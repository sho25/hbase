begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Autogenerated by Thrift Compiler (0.8.0)  *  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING  *  @generated  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|IScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|StandardScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|TupleScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|Hbase
block|{
specifier|public
interface|interface
name|Iface
block|{
comment|/**      * Brings a table on-line (enables it)      *       * @param tableName name of the table      */
specifier|public
name|void
name|enableTable
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
comment|/**      * Disables a table (takes it off-line) If it is being served, the master      * will tell the servers to stop serving it.      *       * @param tableName name of the table      */
specifier|public
name|void
name|disableTable
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
comment|/**      * @return true if table is on-line      *       * @param tableName name of the table to check      */
specifier|public
name|boolean
name|isTableEnabled
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
specifier|public
name|void
name|compact
parameter_list|(
name|ByteBuffer
name|tableNameOrRegionName
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
specifier|public
name|void
name|majorCompact
parameter_list|(
name|ByteBuffer
name|tableNameOrRegionName
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
comment|/**      * List all the userspace tables.      *       * @return returns a list of names      */
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|getTableNames
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
comment|/**      * List all the column families assoicated with a table.      *       * @return list of column family descriptors      *       * @param tableName table name      */
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ColumnDescriptor
argument_list|>
name|getColumnDescriptors
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
comment|/**      * List the regions associated with a table.      *       * @return list of region descriptors      *       * @param tableName table name      */
specifier|public
name|List
argument_list|<
name|TRegionInfo
argument_list|>
name|getTableRegions
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
comment|/**      * Create a table with the specified column families.  The name      * field for each ColumnDescriptor must be set and must end in a      * colon (:). All other fields are optional and will get default      * values if not explicitly specified.      *       * @throws IllegalArgument if an input parameter is invalid      *       * @throws AlreadyExists if the table name already exists      *       * @param tableName name of table to create      *       * @param columnFamilies list of column family descriptors      */
specifier|public
name|void
name|createTable
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ColumnDescriptor
argument_list|>
name|columnFamilies
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|AlreadyExists
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
comment|/**      * Deletes a table      *       * @throws IOError if table doesn't exist on server or there was some other      * problem      *       * @param tableName name of table to delete      */
specifier|public
name|void
name|deleteTable
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
comment|/**      * Get a single TCell for the specified table, row, and column at the      * latest timestamp. Returns an empty list if no such value exists.      *       * @return value for specified row/column      *       * @param tableName name of table      *       * @param row row key      *       * @param column column name      *       * @param attributes Get attributes      */
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|get
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
comment|/**      * Get the specified number of versions for the specified table,      * row, and column.      *       * @return list of cells for specified row/column      *       * @param tableName name of table      *       * @param row row key      *       * @param column column name      *       * @param numVersions number of versions to retrieve      *       * @param attributes Get attributes      */
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|getVer
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|int
name|numVersions
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
comment|/**      * Get the specified number of versions for the specified table,      * row, and column.  Only versions less than or equal to the specified      * timestamp will be returned.      *       * @return list of cells for specified row/column      *       * @param tableName name of table      *       * @param row row key      *       * @param column column name      *       * @param timestamp timestamp      *       * @param numVersions number of versions to retrieve      *       * @param attributes Get attributes      */
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|getVerTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|int
name|numVersions
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
comment|/**      * Get all the data for the specified table and row at the latest      * timestamp. Returns an empty list if the row does not exist.      *       * @return TRowResult containing the row and map of columns to TCells      *       * @param tableName name of table      *       * @param row row key      *       * @param attributes Get attributes      */
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRow
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
comment|/**      * Get the specified columns for the specified table and row at the latest      * timestamp. Returns an empty list if the row does not exist.      *       * @return TRowResult containing the row and map of columns to TCells      *       * @param tableName name of table      *       * @param row row key      *       * @param columns List of columns to return, null for all columns      *       * @param attributes Get attributes      */
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRowWithColumns
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
comment|/**      * Get all the data for the specified table and row at the specified      * timestamp. Returns an empty list if the row does not exist.      *       * @return TRowResult containing the row and map of columns to TCells      *       * @param tableName name of the table      *       * @param row row key      *       * @param timestamp timestamp      *       * @param attributes Get attributes      */
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRowTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
comment|/**      * Get the specified columns for the specified table and row at the specified      * timestamp. Returns an empty list if the row does not exist.      *       * @return TRowResult containing the row and map of columns to TCells      *       * @param tableName name of table      *       * @param row row key      *       * @param columns List of columns to return, null for all columns      *       * @param timestamp      * @param attributes Get attributes      */
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRowWithColumnsTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
comment|/**      * Get all the data for the specified table and rows at the latest      * timestamp. Returns an empty list if no rows exist.      *       * @return TRowResult containing the rows and map of columns to TCells      *       * @param tableName name of table      *       * @param rows row keys      *       * @param attributes Get attributes      */
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRows
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
comment|/**      * Get the specified columns for the specified table and rows at the latest      * timestamp. Returns an empty list if no rows exist.      *       * @return TRowResult containing the rows and map of columns to TCells      *       * @param tableName name of table      *       * @param rows row keys      *       * @param columns List of columns to return, null for all columns      *       * @param attributes Get attributes      */
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRowsWithColumns
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
comment|/**      * Get all the data for the specified table and rows at the specified      * timestamp. Returns an empty list if no rows exist.      *       * @return TRowResult containing the rows and map of columns to TCells      *       * @param tableName name of the table      *       * @param rows row keys      *       * @param timestamp timestamp      *       * @param attributes Get attributes      */
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRowsTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
comment|/**      * Get the specified columns for the specified table and rows at the specified      * timestamp. Returns an empty list if no rows exist.      *       * @return TRowResult containing the rows and map of columns to TCells      *       * @param tableName name of table      *       * @param rows row keys      *       * @param columns List of columns to return, null for all columns      *       * @param timestamp      * @param attributes Get attributes      */
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRowsWithColumnsTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
comment|/**      * Apply a series of mutations (updates/deletes) to a row in a      * single transaction.  If an exception is thrown, then the      * transaction is aborted.  Default current timestamp is used, and      * all entries will have an identical timestamp.      *       * @param tableName name of table      *       * @param row row key      *       * @param mutations list of mutation commands      *       * @param attributes Put attributes      */
specifier|public
name|void
name|mutateRow
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
comment|/**      * Apply a series of mutations (updates/deletes) to a row in a      * single transaction.  If an exception is thrown, then the      * transaction is aborted.  The specified timestamp is used, and      * all entries will have an identical timestamp.      *       * @param tableName name of table      *       * @param row row key      *       * @param mutations list of mutation commands      *       * @param timestamp timestamp      *       * @param attributes Put attributes      */
specifier|public
name|void
name|mutateRowTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
comment|/**      * Apply a series of batches (each a series of mutations on a single row)      * in a single transaction.  If an exception is thrown, then the      * transaction is aborted.  Default current timestamp is used, and      * all entries will have an identical timestamp.      *       * @param tableName name of table      *       * @param rowBatches list of row batches      *       * @param attributes Put attributes      */
specifier|public
name|void
name|mutateRows
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|rowBatches
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
comment|/**      * Apply a series of batches (each a series of mutations on a single row)      * in a single transaction.  If an exception is thrown, then the      * transaction is aborted.  The specified timestamp is used, and      * all entries will have an identical timestamp.      *       * @param tableName name of table      *       * @param rowBatches list of row batches      *       * @param timestamp timestamp      *       * @param attributes Put attributes      */
specifier|public
name|void
name|mutateRowsTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|rowBatches
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
comment|/**      * Atomically increment the column value specified.  Returns the next value post increment.      *       * @param tableName name of table      *       * @param row row to increment      *       * @param column name of column      *       * @param value amount to increment by      */
specifier|public
name|long
name|atomicIncrement
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|long
name|value
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
comment|/**      * Delete all cells that match the passed row and column.      *       * @param tableName name of table      *       * @param row Row to update      *       * @param column name of column whose value is to be deleted      *       * @param attributes Delete attributes      */
specifier|public
name|void
name|deleteAll
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
comment|/**      * Delete all cells that match the passed row and column and whose      * timestamp is equal-to or older than the passed timestamp.      *       * @param tableName name of table      *       * @param row Row to update      *       * @param column name of column whose value is to be deleted      *       * @param timestamp timestamp      *       * @param attributes Delete attributes      */
specifier|public
name|void
name|deleteAllTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
comment|/**      * Completely delete the row's cells.      *       * @param tableName name of table      *       * @param row key of the row to be completely deleted.      *       * @param attributes Delete attributes      */
specifier|public
name|void
name|deleteAllRow
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
comment|/**      * Completely delete the row's cells marked with a timestamp      * equal-to or older than the passed timestamp.      *       * @param tableName name of table      *       * @param row key of the row to be completely deleted.      *       * @param timestamp timestamp      *       * @param attributes Delete attributes      */
specifier|public
name|void
name|deleteAllRowTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
comment|/**      * Get a scanner on the current table, using the Scan instance      * for the scan parameters.      *       * @param tableName name of table      *       * @param scan Scan instance      *       * @param attributes Scan attributes      */
specifier|public
name|int
name|scannerOpenWithScan
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|TScan
name|scan
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
comment|/**      * Get a scanner on the current table starting at the specified row and      * ending at the last row in the table.  Return the specified columns.      *       * @return scanner id to be used with other scanner procedures      *       * @param tableName name of table      *       * @param startRow Starting row in table to scan.      * Send "" (empty string) to start at the first row.      *       * @param columns columns to scan. If column name is a column family, all      * columns of the specified column family are returned. It's also possible      * to pass a regex in the column qualifier.      *       * @param attributes Scan attributes      */
specifier|public
name|int
name|scannerOpen
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
comment|/**      * Get a scanner on the current table starting and stopping at the      * specified rows.  ending at the last row in the table.  Return the      * specified columns.      *       * @return scanner id to be used with other scanner procedures      *       * @param tableName name of table      *       * @param startRow Starting row in table to scan.      * Send "" (empty string) to start at the first row.      *       * @param stopRow row to stop scanning on. This row is *not* included in the      * scanner's results      *       * @param columns columns to scan. If column name is a column family, all      * columns of the specified column family are returned. It's also possible      * to pass a regex in the column qualifier.      *       * @param attributes Scan attributes      */
specifier|public
name|int
name|scannerOpenWithStop
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|ByteBuffer
name|stopRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
comment|/**      * Open a scanner for a given prefix.  That is all rows will have the specified      * prefix. No other rows will be returned.      *       * @return scanner id to use with other scanner calls      *       * @param tableName name of table      *       * @param startAndPrefix the prefix (and thus start row) of the keys you want      *       * @param columns the columns you want returned      *       * @param attributes Scan attributes      */
specifier|public
name|int
name|scannerOpenWithPrefix
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startAndPrefix
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
comment|/**      * Get a scanner on the current table starting at the specified row and      * ending at the last row in the table.  Return the specified columns.      * Only values with the specified timestamp are returned.      *       * @return scanner id to be used with other scanner procedures      *       * @param tableName name of table      *       * @param startRow Starting row in table to scan.      * Send "" (empty string) to start at the first row.      *       * @param columns columns to scan. If column name is a column family, all      * columns of the specified column family are returned. It's also possible      * to pass a regex in the column qualifier.      *       * @param timestamp timestamp      *       * @param attributes Scan attributes      */
specifier|public
name|int
name|scannerOpenTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
comment|/**      * Get a scanner on the current table starting and stopping at the      * specified rows.  ending at the last row in the table.  Return the      * specified columns.  Only values with the specified timestamp are      * returned.      *       * @return scanner id to be used with other scanner procedures      *       * @param tableName name of table      *       * @param startRow Starting row in table to scan.      * Send "" (empty string) to start at the first row.      *       * @param stopRow row to stop scanning on. This row is *not* included in the      * scanner's results      *       * @param columns columns to scan. If column name is a column family, all      * columns of the specified column family are returned. It's also possible      * to pass a regex in the column qualifier.      *       * @param timestamp timestamp      *       * @param attributes Scan attributes      */
specifier|public
name|int
name|scannerOpenWithStopTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|ByteBuffer
name|stopRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
comment|/**      * Returns the scanner's current row value and advances to the next      * row in the table.  When there are no more rows in the table, or a key      * greater-than-or-equal-to the scanner's specified stopRow is reached,      * an empty list is returned.      *       * @return a TRowResult containing the current row and a map of the columns to TCells.      *       * @throws IllegalArgument if ScannerID is invalid      *       * @throws NotFound when the scanner reaches the end      *       * @param id id of a scanner returned by scannerOpen      */
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|scannerGet
parameter_list|(
name|int
name|id
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
comment|/**      * Returns, starting at the scanner's current row value nbRows worth of      * rows and advances to the next row in the table.  When there are no more      * rows in the table, or a key greater-than-or-equal-to the scanner's      * specified stopRow is reached,  an empty list is returned.      *       * @return a TRowResult containing the current row and a map of the columns to TCells.      *       * @throws IllegalArgument if ScannerID is invalid      *       * @throws NotFound when the scanner reaches the end      *       * @param id id of a scanner returned by scannerOpen      *       * @param nbRows number of results to return      */
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|scannerGetList
parameter_list|(
name|int
name|id
parameter_list|,
name|int
name|nbRows
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
comment|/**      * Closes the server-state associated with an open scanner.      *       * @throws IllegalArgument if ScannerID is invalid      *       * @param id id of a scanner returned by scannerOpen      */
specifier|public
name|void
name|scannerClose
parameter_list|(
name|int
name|id
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
comment|/**      * Get the row just before the specified one.      *       * @return value for specified row/column      *       * @param tableName name of table      *       * @param row row key      *       * @param family column name      */
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|getRowOrBefore
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|family
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
comment|/**      * Get the regininfo for the specified row. It scans      * the metatable to find region's start and end keys.      *       * @return value for specified row/column      *       * @param row row key      */
specifier|public
name|TRegionInfo
name|getRegionInfo
parameter_list|(
name|ByteBuffer
name|row
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
block|}
specifier|public
interface|interface
name|AsyncIface
block|{
specifier|public
name|void
name|enableTable
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|enableTable_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
specifier|public
name|void
name|disableTable
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|disableTable_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
specifier|public
name|void
name|isTableEnabled
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|isTableEnabled_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
specifier|public
name|void
name|compact
parameter_list|(
name|ByteBuffer
name|tableNameOrRegionName
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|compact_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
specifier|public
name|void
name|majorCompact
parameter_list|(
name|ByteBuffer
name|tableNameOrRegionName
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|majorCompact_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
specifier|public
name|void
name|getTableNames
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|getTableNames_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
specifier|public
name|void
name|getColumnDescriptors
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|getColumnDescriptors_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
specifier|public
name|void
name|getTableRegions
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|getTableRegions_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
specifier|public
name|void
name|createTable
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ColumnDescriptor
argument_list|>
name|columnFamilies
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|createTable_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
specifier|public
name|void
name|deleteTable
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|deleteTable_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
specifier|public
name|void
name|get
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|get_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
specifier|public
name|void
name|getVer
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|int
name|numVersions
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|getVer_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
specifier|public
name|void
name|getVerTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|int
name|numVersions
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|getVerTs_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
specifier|public
name|void
name|getRow
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|getRow_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
specifier|public
name|void
name|getRowWithColumns
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|getRowWithColumns_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
specifier|public
name|void
name|getRowTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|getRowTs_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
specifier|public
name|void
name|getRowWithColumnsTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|getRowWithColumnsTs_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
specifier|public
name|void
name|getRows
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|getRows_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
specifier|public
name|void
name|getRowsWithColumns
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|getRowsWithColumns_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
specifier|public
name|void
name|getRowsTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|getRowsTs_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
specifier|public
name|void
name|getRowsWithColumnsTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|getRowsWithColumnsTs_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
specifier|public
name|void
name|mutateRow
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|mutateRow_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
specifier|public
name|void
name|mutateRowTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|mutateRowTs_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
specifier|public
name|void
name|mutateRows
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|rowBatches
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|mutateRows_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
specifier|public
name|void
name|mutateRowsTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|rowBatches
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|mutateRowsTs_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
specifier|public
name|void
name|atomicIncrement
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|long
name|value
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|atomicIncrement_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
specifier|public
name|void
name|deleteAll
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|deleteAll_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
specifier|public
name|void
name|deleteAllTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|deleteAllTs_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
specifier|public
name|void
name|deleteAllRow
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|deleteAllRow_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
specifier|public
name|void
name|deleteAllRowTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|deleteAllRowTs_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
specifier|public
name|void
name|scannerOpenWithScan
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|TScan
name|scan
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|scannerOpenWithScan_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
specifier|public
name|void
name|scannerOpen
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|scannerOpen_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
specifier|public
name|void
name|scannerOpenWithStop
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|ByteBuffer
name|stopRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|scannerOpenWithStop_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
specifier|public
name|void
name|scannerOpenWithPrefix
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startAndPrefix
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|scannerOpenWithPrefix_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
specifier|public
name|void
name|scannerOpenTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|scannerOpenTs_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
specifier|public
name|void
name|scannerOpenWithStopTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|ByteBuffer
name|stopRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|scannerOpenWithStopTs_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
specifier|public
name|void
name|scannerGet
parameter_list|(
name|int
name|id
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|scannerGet_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
specifier|public
name|void
name|scannerGetList
parameter_list|(
name|int
name|id
parameter_list|,
name|int
name|nbRows
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|scannerGetList_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
specifier|public
name|void
name|scannerClose
parameter_list|(
name|int
name|id
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|scannerClose_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
specifier|public
name|void
name|getRowOrBefore
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|family
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|getRowOrBefore_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
specifier|public
name|void
name|getRegionInfo
parameter_list|(
name|ByteBuffer
name|row
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|getRegionInfo_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
function_decl|;
block|}
specifier|public
specifier|static
class|class
name|Client
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TServiceClient
implements|implements
name|Iface
block|{
specifier|public
specifier|static
class|class
name|Factory
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TServiceClientFactory
argument_list|<
name|Client
argument_list|>
block|{
specifier|public
name|Factory
parameter_list|()
block|{}
specifier|public
name|Client
name|getClient
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|)
block|{
return|return
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
return|;
block|}
specifier|public
name|Client
name|getClient
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
block|{
return|return
operator|new
name|Client
argument_list|(
name|iprot
argument_list|,
name|oprot
argument_list|)
return|;
block|}
block|}
specifier|public
name|Client
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|)
block|{
name|super
argument_list|(
name|prot
argument_list|,
name|prot
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Client
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
block|{
name|super
argument_list|(
name|iprot
argument_list|,
name|oprot
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|enableTable
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|send_enableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|recv_enableTable
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|send_enableTable
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|enableTable_args
name|args
init|=
operator|new
name|enableTable_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|sendBase
argument_list|(
literal|"enableTable"
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|recv_enableTable
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|enableTable_result
name|result
init|=
operator|new
name|enableTable_result
argument_list|()
decl_stmt|;
name|receiveBase
argument_list|(
name|result
argument_list|,
literal|"enableTable"
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
return|return;
block|}
specifier|public
name|void
name|disableTable
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|send_disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|recv_disableTable
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|send_disableTable
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|disableTable_args
name|args
init|=
operator|new
name|disableTable_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|sendBase
argument_list|(
literal|"disableTable"
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|recv_disableTable
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|disableTable_result
name|result
init|=
operator|new
name|disableTable_result
argument_list|()
decl_stmt|;
name|receiveBase
argument_list|(
name|result
argument_list|,
literal|"disableTable"
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
return|return;
block|}
specifier|public
name|boolean
name|isTableEnabled
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|send_isTableEnabled
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
return|return
name|recv_isTableEnabled
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_isTableEnabled
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|isTableEnabled_args
name|args
init|=
operator|new
name|isTableEnabled_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|sendBase
argument_list|(
literal|"isTableEnabled"
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|recv_isTableEnabled
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|isTableEnabled_result
name|result
init|=
operator|new
name|isTableEnabled_result
argument_list|()
decl_stmt|;
name|receiveBase
argument_list|(
name|result
argument_list|,
literal|"isTableEnabled"
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"isTableEnabled failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|compact
parameter_list|(
name|ByteBuffer
name|tableNameOrRegionName
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|send_compact
argument_list|(
name|tableNameOrRegionName
argument_list|)
expr_stmt|;
name|recv_compact
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|send_compact
parameter_list|(
name|ByteBuffer
name|tableNameOrRegionName
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|compact_args
name|args
init|=
operator|new
name|compact_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableNameOrRegionName
argument_list|(
name|tableNameOrRegionName
argument_list|)
expr_stmt|;
name|sendBase
argument_list|(
literal|"compact"
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|recv_compact
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|compact_result
name|result
init|=
operator|new
name|compact_result
argument_list|()
decl_stmt|;
name|receiveBase
argument_list|(
name|result
argument_list|,
literal|"compact"
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
return|return;
block|}
specifier|public
name|void
name|majorCompact
parameter_list|(
name|ByteBuffer
name|tableNameOrRegionName
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|send_majorCompact
argument_list|(
name|tableNameOrRegionName
argument_list|)
expr_stmt|;
name|recv_majorCompact
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|send_majorCompact
parameter_list|(
name|ByteBuffer
name|tableNameOrRegionName
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|majorCompact_args
name|args
init|=
operator|new
name|majorCompact_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableNameOrRegionName
argument_list|(
name|tableNameOrRegionName
argument_list|)
expr_stmt|;
name|sendBase
argument_list|(
literal|"majorCompact"
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|recv_majorCompact
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|majorCompact_result
name|result
init|=
operator|new
name|majorCompact_result
argument_list|()
decl_stmt|;
name|receiveBase
argument_list|(
name|result
argument_list|,
literal|"majorCompact"
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
return|return;
block|}
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|getTableNames
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|send_getTableNames
argument_list|()
expr_stmt|;
return|return
name|recv_getTableNames
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_getTableNames
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|getTableNames_args
name|args
init|=
operator|new
name|getTableNames_args
argument_list|()
decl_stmt|;
name|sendBase
argument_list|(
literal|"getTableNames"
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|recv_getTableNames
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|getTableNames_result
name|result
init|=
operator|new
name|getTableNames_result
argument_list|()
decl_stmt|;
name|receiveBase
argument_list|(
name|result
argument_list|,
literal|"getTableNames"
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"getTableNames failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ColumnDescriptor
argument_list|>
name|getColumnDescriptors
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|send_getColumnDescriptors
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
return|return
name|recv_getColumnDescriptors
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_getColumnDescriptors
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|getColumnDescriptors_args
name|args
init|=
operator|new
name|getColumnDescriptors_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|sendBase
argument_list|(
literal|"getColumnDescriptors"
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ColumnDescriptor
argument_list|>
name|recv_getColumnDescriptors
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|getColumnDescriptors_result
name|result
init|=
operator|new
name|getColumnDescriptors_result
argument_list|()
decl_stmt|;
name|receiveBase
argument_list|(
name|result
argument_list|,
literal|"getColumnDescriptors"
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"getColumnDescriptors failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|List
argument_list|<
name|TRegionInfo
argument_list|>
name|getTableRegions
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|send_getTableRegions
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
return|return
name|recv_getTableRegions
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_getTableRegions
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|getTableRegions_args
name|args
init|=
operator|new
name|getTableRegions_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|sendBase
argument_list|(
literal|"getTableRegions"
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRegionInfo
argument_list|>
name|recv_getTableRegions
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|getTableRegions_result
name|result
init|=
operator|new
name|getTableRegions_result
argument_list|()
decl_stmt|;
name|receiveBase
argument_list|(
name|result
argument_list|,
literal|"getTableRegions"
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"getTableRegions failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|createTable
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ColumnDescriptor
argument_list|>
name|columnFamilies
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|AlreadyExists
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|send_createTable
argument_list|(
name|tableName
argument_list|,
name|columnFamilies
argument_list|)
expr_stmt|;
name|recv_createTable
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|send_createTable
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ColumnDescriptor
argument_list|>
name|columnFamilies
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|createTable_args
name|args
init|=
operator|new
name|createTable_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumnFamilies
argument_list|(
name|columnFamilies
argument_list|)
expr_stmt|;
name|sendBase
argument_list|(
literal|"createTable"
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|recv_createTable
parameter_list|()
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|AlreadyExists
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|createTable_result
name|result
init|=
operator|new
name|createTable_result
argument_list|()
decl_stmt|;
name|receiveBase
argument_list|(
name|result
argument_list|,
literal|"createTable"
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|ia
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|ia
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|exist
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|exist
throw|;
block|}
return|return;
block|}
specifier|public
name|void
name|deleteTable
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|send_deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|recv_deleteTable
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|send_deleteTable
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|deleteTable_args
name|args
init|=
operator|new
name|deleteTable_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|sendBase
argument_list|(
literal|"deleteTable"
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|recv_deleteTable
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|deleteTable_result
name|result
init|=
operator|new
name|deleteTable_result
argument_list|()
decl_stmt|;
name|receiveBase
argument_list|(
name|result
argument_list|,
literal|"deleteTable"
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
return|return;
block|}
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|get
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|send_get
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
return|return
name|recv_get
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_get
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|get_args
name|args
init|=
operator|new
name|get_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumn
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|args
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|sendBase
argument_list|(
literal|"get"
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|recv_get
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|get_result
name|result
init|=
operator|new
name|get_result
argument_list|()
decl_stmt|;
name|receiveBase
argument_list|(
name|result
argument_list|,
literal|"get"
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"get failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|getVer
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|int
name|numVersions
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|send_getVer
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|numVersions
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
return|return
name|recv_getVer
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_getVer
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|int
name|numVersions
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|getVer_args
name|args
init|=
operator|new
name|getVer_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumn
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|args
operator|.
name|setNumVersions
argument_list|(
name|numVersions
argument_list|)
expr_stmt|;
name|args
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|sendBase
argument_list|(
literal|"getVer"
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|recv_getVer
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|getVer_result
name|result
init|=
operator|new
name|getVer_result
argument_list|()
decl_stmt|;
name|receiveBase
argument_list|(
name|result
argument_list|,
literal|"getVer"
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"getVer failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|getVerTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|int
name|numVersions
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|send_getVerTs
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|timestamp
argument_list|,
name|numVersions
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
return|return
name|recv_getVerTs
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_getVerTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|int
name|numVersions
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|getVerTs_args
name|args
init|=
operator|new
name|getVerTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumn
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|args
operator|.
name|setNumVersions
argument_list|(
name|numVersions
argument_list|)
expr_stmt|;
name|args
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|sendBase
argument_list|(
literal|"getVerTs"
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|recv_getVerTs
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|getVerTs_result
name|result
init|=
operator|new
name|getVerTs_result
argument_list|()
decl_stmt|;
name|receiveBase
argument_list|(
name|result
argument_list|,
literal|"getVerTs"
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"getVerTs failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRow
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|send_getRow
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
return|return
name|recv_getRow
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_getRow
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|getRow_args
name|args
init|=
operator|new
name|getRow_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|sendBase
argument_list|(
literal|"getRow"
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|recv_getRow
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|getRow_result
name|result
init|=
operator|new
name|getRow_result
argument_list|()
decl_stmt|;
name|receiveBase
argument_list|(
name|result
argument_list|,
literal|"getRow"
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"getRow failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRowWithColumns
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|send_getRowWithColumns
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|columns
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
return|return
name|recv_getRowWithColumns
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_getRowWithColumns
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|getRowWithColumns_args
name|args
init|=
operator|new
name|getRowWithColumns_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumns
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|args
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|sendBase
argument_list|(
literal|"getRowWithColumns"
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|recv_getRowWithColumns
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|getRowWithColumns_result
name|result
init|=
operator|new
name|getRowWithColumns_result
argument_list|()
decl_stmt|;
name|receiveBase
argument_list|(
name|result
argument_list|,
literal|"getRowWithColumns"
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"getRowWithColumns failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRowTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|send_getRowTs
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|timestamp
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
return|return
name|recv_getRowTs
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_getRowTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|getRowTs_args
name|args
init|=
operator|new
name|getRowTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|args
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|sendBase
argument_list|(
literal|"getRowTs"
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|recv_getRowTs
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|getRowTs_result
name|result
init|=
operator|new
name|getRowTs_result
argument_list|()
decl_stmt|;
name|receiveBase
argument_list|(
name|result
argument_list|,
literal|"getRowTs"
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"getRowTs failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRowWithColumnsTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|send_getRowWithColumnsTs
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|columns
argument_list|,
name|timestamp
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
return|return
name|recv_getRowWithColumnsTs
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_getRowWithColumnsTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|getRowWithColumnsTs_args
name|args
init|=
operator|new
name|getRowWithColumnsTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumns
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|args
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|sendBase
argument_list|(
literal|"getRowWithColumnsTs"
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|recv_getRowWithColumnsTs
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|getRowWithColumnsTs_result
name|result
init|=
operator|new
name|getRowWithColumnsTs_result
argument_list|()
decl_stmt|;
name|receiveBase
argument_list|(
name|result
argument_list|,
literal|"getRowWithColumnsTs"
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"getRowWithColumnsTs failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRows
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|send_getRows
argument_list|(
name|tableName
argument_list|,
name|rows
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
return|return
name|recv_getRows
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_getRows
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|getRows_args
name|args
init|=
operator|new
name|getRows_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRows
argument_list|(
name|rows
argument_list|)
expr_stmt|;
name|args
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|sendBase
argument_list|(
literal|"getRows"
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|recv_getRows
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|getRows_result
name|result
init|=
operator|new
name|getRows_result
argument_list|()
decl_stmt|;
name|receiveBase
argument_list|(
name|result
argument_list|,
literal|"getRows"
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"getRows failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRowsWithColumns
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|send_getRowsWithColumns
argument_list|(
name|tableName
argument_list|,
name|rows
argument_list|,
name|columns
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
return|return
name|recv_getRowsWithColumns
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_getRowsWithColumns
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|getRowsWithColumns_args
name|args
init|=
operator|new
name|getRowsWithColumns_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRows
argument_list|(
name|rows
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumns
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|args
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|sendBase
argument_list|(
literal|"getRowsWithColumns"
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|recv_getRowsWithColumns
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|getRowsWithColumns_result
name|result
init|=
operator|new
name|getRowsWithColumns_result
argument_list|()
decl_stmt|;
name|receiveBase
argument_list|(
name|result
argument_list|,
literal|"getRowsWithColumns"
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"getRowsWithColumns failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRowsTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|send_getRowsTs
argument_list|(
name|tableName
argument_list|,
name|rows
argument_list|,
name|timestamp
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
return|return
name|recv_getRowsTs
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_getRowsTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|getRowsTs_args
name|args
init|=
operator|new
name|getRowsTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRows
argument_list|(
name|rows
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|args
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|sendBase
argument_list|(
literal|"getRowsTs"
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|recv_getRowsTs
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|getRowsTs_result
name|result
init|=
operator|new
name|getRowsTs_result
argument_list|()
decl_stmt|;
name|receiveBase
argument_list|(
name|result
argument_list|,
literal|"getRowsTs"
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"getRowsTs failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRowsWithColumnsTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|send_getRowsWithColumnsTs
argument_list|(
name|tableName
argument_list|,
name|rows
argument_list|,
name|columns
argument_list|,
name|timestamp
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
return|return
name|recv_getRowsWithColumnsTs
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_getRowsWithColumnsTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|getRowsWithColumnsTs_args
name|args
init|=
operator|new
name|getRowsWithColumnsTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRows
argument_list|(
name|rows
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumns
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|args
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|sendBase
argument_list|(
literal|"getRowsWithColumnsTs"
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|recv_getRowsWithColumnsTs
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|getRowsWithColumnsTs_result
name|result
init|=
operator|new
name|getRowsWithColumnsTs_result
argument_list|()
decl_stmt|;
name|receiveBase
argument_list|(
name|result
argument_list|,
literal|"getRowsWithColumnsTs"
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"getRowsWithColumnsTs failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|mutateRow
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|send_mutateRow
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|mutations
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|recv_mutateRow
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|send_mutateRow
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|mutateRow_args
name|args
init|=
operator|new
name|mutateRow_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|setMutations
argument_list|(
name|mutations
argument_list|)
expr_stmt|;
name|args
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|sendBase
argument_list|(
literal|"mutateRow"
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|recv_mutateRow
parameter_list|()
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|mutateRow_result
name|result
init|=
operator|new
name|mutateRow_result
argument_list|()
decl_stmt|;
name|receiveBase
argument_list|(
name|result
argument_list|,
literal|"mutateRow"
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|ia
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|ia
throw|;
block|}
return|return;
block|}
specifier|public
name|void
name|mutateRowTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|send_mutateRowTs
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|mutations
argument_list|,
name|timestamp
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|recv_mutateRowTs
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|send_mutateRowTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|mutateRowTs_args
name|args
init|=
operator|new
name|mutateRowTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|setMutations
argument_list|(
name|mutations
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|args
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|sendBase
argument_list|(
literal|"mutateRowTs"
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|recv_mutateRowTs
parameter_list|()
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|mutateRowTs_result
name|result
init|=
operator|new
name|mutateRowTs_result
argument_list|()
decl_stmt|;
name|receiveBase
argument_list|(
name|result
argument_list|,
literal|"mutateRowTs"
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|ia
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|ia
throw|;
block|}
return|return;
block|}
specifier|public
name|void
name|mutateRows
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|rowBatches
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|send_mutateRows
argument_list|(
name|tableName
argument_list|,
name|rowBatches
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|recv_mutateRows
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|send_mutateRows
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|rowBatches
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|mutateRows_args
name|args
init|=
operator|new
name|mutateRows_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRowBatches
argument_list|(
name|rowBatches
argument_list|)
expr_stmt|;
name|args
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|sendBase
argument_list|(
literal|"mutateRows"
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|recv_mutateRows
parameter_list|()
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|mutateRows_result
name|result
init|=
operator|new
name|mutateRows_result
argument_list|()
decl_stmt|;
name|receiveBase
argument_list|(
name|result
argument_list|,
literal|"mutateRows"
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|ia
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|ia
throw|;
block|}
return|return;
block|}
specifier|public
name|void
name|mutateRowsTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|rowBatches
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|send_mutateRowsTs
argument_list|(
name|tableName
argument_list|,
name|rowBatches
argument_list|,
name|timestamp
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|recv_mutateRowsTs
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|send_mutateRowsTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|rowBatches
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|mutateRowsTs_args
name|args
init|=
operator|new
name|mutateRowsTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRowBatches
argument_list|(
name|rowBatches
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|args
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|sendBase
argument_list|(
literal|"mutateRowsTs"
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|recv_mutateRowsTs
parameter_list|()
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|mutateRowsTs_result
name|result
init|=
operator|new
name|mutateRowsTs_result
argument_list|()
decl_stmt|;
name|receiveBase
argument_list|(
name|result
argument_list|,
literal|"mutateRowsTs"
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|ia
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|ia
throw|;
block|}
return|return;
block|}
specifier|public
name|long
name|atomicIncrement
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|long
name|value
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|send_atomicIncrement
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|recv_atomicIncrement
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_atomicIncrement
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|long
name|value
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|atomicIncrement_args
name|args
init|=
operator|new
name|atomicIncrement_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumn
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|args
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|sendBase
argument_list|(
literal|"atomicIncrement"
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
specifier|public
name|long
name|recv_atomicIncrement
parameter_list|()
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|atomicIncrement_result
name|result
init|=
operator|new
name|atomicIncrement_result
argument_list|()
decl_stmt|;
name|receiveBase
argument_list|(
name|result
argument_list|,
literal|"atomicIncrement"
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|ia
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|ia
throw|;
block|}
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"atomicIncrement failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|deleteAll
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|send_deleteAll
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|recv_deleteAll
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|send_deleteAll
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|deleteAll_args
name|args
init|=
operator|new
name|deleteAll_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumn
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|args
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|sendBase
argument_list|(
literal|"deleteAll"
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|recv_deleteAll
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|deleteAll_result
name|result
init|=
operator|new
name|deleteAll_result
argument_list|()
decl_stmt|;
name|receiveBase
argument_list|(
name|result
argument_list|,
literal|"deleteAll"
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
return|return;
block|}
specifier|public
name|void
name|deleteAllTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|send_deleteAllTs
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|timestamp
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|recv_deleteAllTs
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|send_deleteAllTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|deleteAllTs_args
name|args
init|=
operator|new
name|deleteAllTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumn
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|args
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|sendBase
argument_list|(
literal|"deleteAllTs"
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|recv_deleteAllTs
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|deleteAllTs_result
name|result
init|=
operator|new
name|deleteAllTs_result
argument_list|()
decl_stmt|;
name|receiveBase
argument_list|(
name|result
argument_list|,
literal|"deleteAllTs"
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
return|return;
block|}
specifier|public
name|void
name|deleteAllRow
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|send_deleteAllRow
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|recv_deleteAllRow
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|send_deleteAllRow
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|deleteAllRow_args
name|args
init|=
operator|new
name|deleteAllRow_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|sendBase
argument_list|(
literal|"deleteAllRow"
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|recv_deleteAllRow
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|deleteAllRow_result
name|result
init|=
operator|new
name|deleteAllRow_result
argument_list|()
decl_stmt|;
name|receiveBase
argument_list|(
name|result
argument_list|,
literal|"deleteAllRow"
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
return|return;
block|}
specifier|public
name|void
name|deleteAllRowTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|send_deleteAllRowTs
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|timestamp
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|recv_deleteAllRowTs
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|send_deleteAllRowTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|deleteAllRowTs_args
name|args
init|=
operator|new
name|deleteAllRowTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|args
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|sendBase
argument_list|(
literal|"deleteAllRowTs"
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|recv_deleteAllRowTs
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|deleteAllRowTs_result
name|result
init|=
operator|new
name|deleteAllRowTs_result
argument_list|()
decl_stmt|;
name|receiveBase
argument_list|(
name|result
argument_list|,
literal|"deleteAllRowTs"
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
return|return;
block|}
specifier|public
name|int
name|scannerOpenWithScan
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|TScan
name|scan
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|send_scannerOpenWithScan
argument_list|(
name|tableName
argument_list|,
name|scan
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
return|return
name|recv_scannerOpenWithScan
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_scannerOpenWithScan
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|TScan
name|scan
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|scannerOpenWithScan_args
name|args
init|=
operator|new
name|scannerOpenWithScan_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setScan
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|args
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|sendBase
argument_list|(
literal|"scannerOpenWithScan"
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|recv_scannerOpenWithScan
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|scannerOpenWithScan_result
name|result
init|=
operator|new
name|scannerOpenWithScan_result
argument_list|()
decl_stmt|;
name|receiveBase
argument_list|(
name|result
argument_list|,
literal|"scannerOpenWithScan"
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"scannerOpenWithScan failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|int
name|scannerOpen
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|send_scannerOpen
argument_list|(
name|tableName
argument_list|,
name|startRow
argument_list|,
name|columns
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
return|return
name|recv_scannerOpen
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_scannerOpen
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|scannerOpen_args
name|args
init|=
operator|new
name|scannerOpen_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setStartRow
argument_list|(
name|startRow
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumns
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|args
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|sendBase
argument_list|(
literal|"scannerOpen"
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|recv_scannerOpen
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|scannerOpen_result
name|result
init|=
operator|new
name|scannerOpen_result
argument_list|()
decl_stmt|;
name|receiveBase
argument_list|(
name|result
argument_list|,
literal|"scannerOpen"
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"scannerOpen failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|int
name|scannerOpenWithStop
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|ByteBuffer
name|stopRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|send_scannerOpenWithStop
argument_list|(
name|tableName
argument_list|,
name|startRow
argument_list|,
name|stopRow
argument_list|,
name|columns
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
return|return
name|recv_scannerOpenWithStop
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_scannerOpenWithStop
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|ByteBuffer
name|stopRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|scannerOpenWithStop_args
name|args
init|=
operator|new
name|scannerOpenWithStop_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setStartRow
argument_list|(
name|startRow
argument_list|)
expr_stmt|;
name|args
operator|.
name|setStopRow
argument_list|(
name|stopRow
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumns
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|args
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|sendBase
argument_list|(
literal|"scannerOpenWithStop"
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|recv_scannerOpenWithStop
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|scannerOpenWithStop_result
name|result
init|=
operator|new
name|scannerOpenWithStop_result
argument_list|()
decl_stmt|;
name|receiveBase
argument_list|(
name|result
argument_list|,
literal|"scannerOpenWithStop"
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"scannerOpenWithStop failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|int
name|scannerOpenWithPrefix
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startAndPrefix
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|send_scannerOpenWithPrefix
argument_list|(
name|tableName
argument_list|,
name|startAndPrefix
argument_list|,
name|columns
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
return|return
name|recv_scannerOpenWithPrefix
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_scannerOpenWithPrefix
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startAndPrefix
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|scannerOpenWithPrefix_args
name|args
init|=
operator|new
name|scannerOpenWithPrefix_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setStartAndPrefix
argument_list|(
name|startAndPrefix
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumns
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|args
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|sendBase
argument_list|(
literal|"scannerOpenWithPrefix"
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|recv_scannerOpenWithPrefix
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|scannerOpenWithPrefix_result
name|result
init|=
operator|new
name|scannerOpenWithPrefix_result
argument_list|()
decl_stmt|;
name|receiveBase
argument_list|(
name|result
argument_list|,
literal|"scannerOpenWithPrefix"
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"scannerOpenWithPrefix failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|int
name|scannerOpenTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|send_scannerOpenTs
argument_list|(
name|tableName
argument_list|,
name|startRow
argument_list|,
name|columns
argument_list|,
name|timestamp
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
return|return
name|recv_scannerOpenTs
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_scannerOpenTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|scannerOpenTs_args
name|args
init|=
operator|new
name|scannerOpenTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setStartRow
argument_list|(
name|startRow
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumns
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|args
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|sendBase
argument_list|(
literal|"scannerOpenTs"
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|recv_scannerOpenTs
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|scannerOpenTs_result
name|result
init|=
operator|new
name|scannerOpenTs_result
argument_list|()
decl_stmt|;
name|receiveBase
argument_list|(
name|result
argument_list|,
literal|"scannerOpenTs"
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"scannerOpenTs failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|int
name|scannerOpenWithStopTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|ByteBuffer
name|stopRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|send_scannerOpenWithStopTs
argument_list|(
name|tableName
argument_list|,
name|startRow
argument_list|,
name|stopRow
argument_list|,
name|columns
argument_list|,
name|timestamp
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
return|return
name|recv_scannerOpenWithStopTs
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_scannerOpenWithStopTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|ByteBuffer
name|stopRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|scannerOpenWithStopTs_args
name|args
init|=
operator|new
name|scannerOpenWithStopTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setStartRow
argument_list|(
name|startRow
argument_list|)
expr_stmt|;
name|args
operator|.
name|setStopRow
argument_list|(
name|stopRow
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumns
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|args
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|sendBase
argument_list|(
literal|"scannerOpenWithStopTs"
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|recv_scannerOpenWithStopTs
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|scannerOpenWithStopTs_result
name|result
init|=
operator|new
name|scannerOpenWithStopTs_result
argument_list|()
decl_stmt|;
name|receiveBase
argument_list|(
name|result
argument_list|,
literal|"scannerOpenWithStopTs"
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"scannerOpenWithStopTs failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|scannerGet
parameter_list|(
name|int
name|id
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|send_scannerGet
argument_list|(
name|id
argument_list|)
expr_stmt|;
return|return
name|recv_scannerGet
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_scannerGet
parameter_list|(
name|int
name|id
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|scannerGet_args
name|args
init|=
operator|new
name|scannerGet_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|sendBase
argument_list|(
literal|"scannerGet"
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|recv_scannerGet
parameter_list|()
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|scannerGet_result
name|result
init|=
operator|new
name|scannerGet_result
argument_list|()
decl_stmt|;
name|receiveBase
argument_list|(
name|result
argument_list|,
literal|"scannerGet"
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|ia
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|ia
throw|;
block|}
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"scannerGet failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|scannerGetList
parameter_list|(
name|int
name|id
parameter_list|,
name|int
name|nbRows
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|send_scannerGetList
argument_list|(
name|id
argument_list|,
name|nbRows
argument_list|)
expr_stmt|;
return|return
name|recv_scannerGetList
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_scannerGetList
parameter_list|(
name|int
name|id
parameter_list|,
name|int
name|nbRows
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|scannerGetList_args
name|args
init|=
operator|new
name|scannerGetList_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|args
operator|.
name|setNbRows
argument_list|(
name|nbRows
argument_list|)
expr_stmt|;
name|sendBase
argument_list|(
literal|"scannerGetList"
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|recv_scannerGetList
parameter_list|()
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|scannerGetList_result
name|result
init|=
operator|new
name|scannerGetList_result
argument_list|()
decl_stmt|;
name|receiveBase
argument_list|(
name|result
argument_list|,
literal|"scannerGetList"
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|ia
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|ia
throw|;
block|}
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"scannerGetList failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|scannerClose
parameter_list|(
name|int
name|id
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|send_scannerClose
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|recv_scannerClose
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|send_scannerClose
parameter_list|(
name|int
name|id
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|scannerClose_args
name|args
init|=
operator|new
name|scannerClose_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|sendBase
argument_list|(
literal|"scannerClose"
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|recv_scannerClose
parameter_list|()
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|scannerClose_result
name|result
init|=
operator|new
name|scannerClose_result
argument_list|()
decl_stmt|;
name|receiveBase
argument_list|(
name|result
argument_list|,
literal|"scannerClose"
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|ia
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|ia
throw|;
block|}
return|return;
block|}
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|getRowOrBefore
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|family
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|send_getRowOrBefore
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|family
argument_list|)
expr_stmt|;
return|return
name|recv_getRowOrBefore
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_getRowOrBefore
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|family
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|getRowOrBefore_args
name|args
init|=
operator|new
name|getRowOrBefore_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|setFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
name|sendBase
argument_list|(
literal|"getRowOrBefore"
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|recv_getRowOrBefore
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|getRowOrBefore_result
name|result
init|=
operator|new
name|getRowOrBefore_result
argument_list|()
decl_stmt|;
name|receiveBase
argument_list|(
name|result
argument_list|,
literal|"getRowOrBefore"
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"getRowOrBefore failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|TRegionInfo
name|getRegionInfo
parameter_list|(
name|ByteBuffer
name|row
parameter_list|)
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|send_getRegionInfo
argument_list|(
name|row
argument_list|)
expr_stmt|;
return|return
name|recv_getRegionInfo
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_getRegionInfo
parameter_list|(
name|ByteBuffer
name|row
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|getRegionInfo_args
name|args
init|=
operator|new
name|getRegionInfo_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|sendBase
argument_list|(
literal|"getRegionInfo"
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TRegionInfo
name|recv_getRegionInfo
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|getRegionInfo_result
name|result
init|=
operator|new
name|getRegionInfo_result
argument_list|()
decl_stmt|;
name|receiveBase
argument_list|(
name|result
argument_list|,
literal|"getRegionInfo"
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"getRegionInfo failed: unknown result"
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
class|class
name|AsyncClient
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClient
implements|implements
name|AsyncIface
block|{
specifier|public
specifier|static
class|class
name|Factory
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClientFactory
argument_list|<
name|AsyncClient
argument_list|>
block|{
specifier|private
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClientManager
name|clientManager
decl_stmt|;
specifier|private
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
name|protocolFactory
decl_stmt|;
specifier|public
name|Factory
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClientManager
name|clientManager
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
name|protocolFactory
parameter_list|)
block|{
name|this
operator|.
name|clientManager
operator|=
name|clientManager
expr_stmt|;
name|this
operator|.
name|protocolFactory
operator|=
name|protocolFactory
expr_stmt|;
block|}
specifier|public
name|AsyncClient
name|getAsyncClient
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingTransport
name|transport
parameter_list|)
block|{
return|return
operator|new
name|AsyncClient
argument_list|(
name|protocolFactory
argument_list|,
name|clientManager
argument_list|,
name|transport
argument_list|)
return|;
block|}
block|}
specifier|public
name|AsyncClient
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClientManager
name|clientManager
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingTransport
name|transport
parameter_list|)
block|{
name|super
argument_list|(
name|protocolFactory
argument_list|,
name|clientManager
argument_list|,
name|transport
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|enableTable
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|enableTable_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|enableTable_call
name|method_call
init|=
operator|new
name|enableTable_call
argument_list|(
name|tableName
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|___protocolFactory
argument_list|,
name|___transport
argument_list|)
decl_stmt|;
name|this
operator|.
name|___currentMethod
operator|=
name|method_call
expr_stmt|;
name|___manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|enableTable_call
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|public
name|enableTable_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|enableTable_call
argument_list|>
name|resultHandler
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClient
name|client
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessage
argument_list|(
literal|"enableTable"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|enableTable_args
name|args
init|=
operator|new
name|enableTable_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
operator|.
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_enableTable
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|disableTable
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|disableTable_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|disableTable_call
name|method_call
init|=
operator|new
name|disableTable_call
argument_list|(
name|tableName
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|___protocolFactory
argument_list|,
name|___transport
argument_list|)
decl_stmt|;
name|this
operator|.
name|___currentMethod
operator|=
name|method_call
expr_stmt|;
name|___manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|disableTable_call
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|public
name|disableTable_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|disableTable_call
argument_list|>
name|resultHandler
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClient
name|client
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessage
argument_list|(
literal|"disableTable"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|disableTable_args
name|args
init|=
operator|new
name|disableTable_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
operator|.
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_disableTable
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|isTableEnabled
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|isTableEnabled_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|isTableEnabled_call
name|method_call
init|=
operator|new
name|isTableEnabled_call
argument_list|(
name|tableName
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|___protocolFactory
argument_list|,
name|___transport
argument_list|)
decl_stmt|;
name|this
operator|.
name|___currentMethod
operator|=
name|method_call
expr_stmt|;
name|___manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|isTableEnabled_call
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|public
name|isTableEnabled_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|isTableEnabled_call
argument_list|>
name|resultHandler
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClient
name|client
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessage
argument_list|(
literal|"isTableEnabled"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|isTableEnabled_args
name|args
init|=
operator|new
name|isTableEnabled_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
operator|.
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_isTableEnabled
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|compact
parameter_list|(
name|ByteBuffer
name|tableNameOrRegionName
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|compact_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|compact_call
name|method_call
init|=
operator|new
name|compact_call
argument_list|(
name|tableNameOrRegionName
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|___protocolFactory
argument_list|,
name|___transport
argument_list|)
decl_stmt|;
name|this
operator|.
name|___currentMethod
operator|=
name|method_call
expr_stmt|;
name|___manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|compact_call
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableNameOrRegionName
decl_stmt|;
specifier|public
name|compact_call
parameter_list|(
name|ByteBuffer
name|tableNameOrRegionName
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|compact_call
argument_list|>
name|resultHandler
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClient
name|client
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableNameOrRegionName
operator|=
name|tableNameOrRegionName
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessage
argument_list|(
literal|"compact"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|compact_args
name|args
init|=
operator|new
name|compact_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableNameOrRegionName
argument_list|(
name|tableNameOrRegionName
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
operator|.
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_compact
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|majorCompact
parameter_list|(
name|ByteBuffer
name|tableNameOrRegionName
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|majorCompact_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|majorCompact_call
name|method_call
init|=
operator|new
name|majorCompact_call
argument_list|(
name|tableNameOrRegionName
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|___protocolFactory
argument_list|,
name|___transport
argument_list|)
decl_stmt|;
name|this
operator|.
name|___currentMethod
operator|=
name|method_call
expr_stmt|;
name|___manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|majorCompact_call
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableNameOrRegionName
decl_stmt|;
specifier|public
name|majorCompact_call
parameter_list|(
name|ByteBuffer
name|tableNameOrRegionName
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|majorCompact_call
argument_list|>
name|resultHandler
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClient
name|client
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableNameOrRegionName
operator|=
name|tableNameOrRegionName
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessage
argument_list|(
literal|"majorCompact"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|majorCompact_args
name|args
init|=
operator|new
name|majorCompact_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableNameOrRegionName
argument_list|(
name|tableNameOrRegionName
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
operator|.
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_majorCompact
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|getTableNames
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|getTableNames_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|getTableNames_call
name|method_call
init|=
operator|new
name|getTableNames_call
argument_list|(
name|resultHandler
argument_list|,
name|this
argument_list|,
name|___protocolFactory
argument_list|,
name|___transport
argument_list|)
decl_stmt|;
name|this
operator|.
name|___currentMethod
operator|=
name|method_call
expr_stmt|;
name|___manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|getTableNames_call
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
block|{
specifier|public
name|getTableNames_call
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|getTableNames_call
argument_list|>
name|resultHandler
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClient
name|client
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessage
argument_list|(
literal|"getTableNames"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|getTableNames_args
name|args
init|=
operator|new
name|getTableNames_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
operator|.
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_getTableNames
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|getColumnDescriptors
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|getColumnDescriptors_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|getColumnDescriptors_call
name|method_call
init|=
operator|new
name|getColumnDescriptors_call
argument_list|(
name|tableName
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|___protocolFactory
argument_list|,
name|___transport
argument_list|)
decl_stmt|;
name|this
operator|.
name|___currentMethod
operator|=
name|method_call
expr_stmt|;
name|___manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|getColumnDescriptors_call
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|public
name|getColumnDescriptors_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|getColumnDescriptors_call
argument_list|>
name|resultHandler
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClient
name|client
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessage
argument_list|(
literal|"getColumnDescriptors"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|getColumnDescriptors_args
name|args
init|=
operator|new
name|getColumnDescriptors_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ColumnDescriptor
argument_list|>
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
operator|.
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_getColumnDescriptors
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|getTableRegions
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|getTableRegions_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|getTableRegions_call
name|method_call
init|=
operator|new
name|getTableRegions_call
argument_list|(
name|tableName
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|___protocolFactory
argument_list|,
name|___transport
argument_list|)
decl_stmt|;
name|this
operator|.
name|___currentMethod
operator|=
name|method_call
expr_stmt|;
name|___manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|getTableRegions_call
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|public
name|getTableRegions_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|getTableRegions_call
argument_list|>
name|resultHandler
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClient
name|client
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessage
argument_list|(
literal|"getTableRegions"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|getTableRegions_args
name|args
init|=
operator|new
name|getTableRegions_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRegionInfo
argument_list|>
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
operator|.
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_getTableRegions
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|createTable
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ColumnDescriptor
argument_list|>
name|columnFamilies
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|createTable_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|createTable_call
name|method_call
init|=
operator|new
name|createTable_call
argument_list|(
name|tableName
argument_list|,
name|columnFamilies
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|___protocolFactory
argument_list|,
name|___transport
argument_list|)
decl_stmt|;
name|this
operator|.
name|___currentMethod
operator|=
name|method_call
expr_stmt|;
name|___manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|createTable_call
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ColumnDescriptor
argument_list|>
name|columnFamilies
decl_stmt|;
specifier|public
name|createTable_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ColumnDescriptor
argument_list|>
name|columnFamilies
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|createTable_call
argument_list|>
name|resultHandler
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClient
name|client
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|columnFamilies
operator|=
name|columnFamilies
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessage
argument_list|(
literal|"createTable"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|createTable_args
name|args
init|=
operator|new
name|createTable_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumnFamilies
argument_list|(
name|columnFamilies
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|AlreadyExists
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
operator|.
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_createTable
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|deleteTable
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|deleteTable_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|deleteTable_call
name|method_call
init|=
operator|new
name|deleteTable_call
argument_list|(
name|tableName
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|___protocolFactory
argument_list|,
name|___transport
argument_list|)
decl_stmt|;
name|this
operator|.
name|___currentMethod
operator|=
name|method_call
expr_stmt|;
name|___manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|deleteTable_call
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|public
name|deleteTable_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|deleteTable_call
argument_list|>
name|resultHandler
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClient
name|client
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessage
argument_list|(
literal|"deleteTable"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|deleteTable_args
name|args
init|=
operator|new
name|deleteTable_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
operator|.
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_deleteTable
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|get
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|get_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|get_call
name|method_call
init|=
operator|new
name|get_call
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|attributes
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|___protocolFactory
argument_list|,
name|___transport
argument_list|)
decl_stmt|;
name|this
operator|.
name|___currentMethod
operator|=
name|method_call
expr_stmt|;
name|___manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|get_call
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|private
name|ByteBuffer
name|row
decl_stmt|;
specifier|private
name|ByteBuffer
name|column
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
decl_stmt|;
specifier|public
name|get_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|get_call
argument_list|>
name|resultHandler
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClient
name|client
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|column
operator|=
name|column
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessage
argument_list|(
literal|"get"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|get_args
name|args
init|=
operator|new
name|get_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumn
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|args
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
operator|.
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_get
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|getVer
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|int
name|numVersions
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|getVer_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|getVer_call
name|method_call
init|=
operator|new
name|getVer_call
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|numVersions
argument_list|,
name|attributes
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|___protocolFactory
argument_list|,
name|___transport
argument_list|)
decl_stmt|;
name|this
operator|.
name|___currentMethod
operator|=
name|method_call
expr_stmt|;
name|___manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|getVer_call
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|private
name|ByteBuffer
name|row
decl_stmt|;
specifier|private
name|ByteBuffer
name|column
decl_stmt|;
specifier|private
name|int
name|numVersions
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
decl_stmt|;
specifier|public
name|getVer_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|int
name|numVersions
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|getVer_call
argument_list|>
name|resultHandler
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClient
name|client
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|column
operator|=
name|column
expr_stmt|;
name|this
operator|.
name|numVersions
operator|=
name|numVersions
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessage
argument_list|(
literal|"getVer"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|getVer_args
name|args
init|=
operator|new
name|getVer_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumn
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|args
operator|.
name|setNumVersions
argument_list|(
name|numVersions
argument_list|)
expr_stmt|;
name|args
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
operator|.
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_getVer
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|getVerTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|int
name|numVersions
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|getVerTs_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|getVerTs_call
name|method_call
init|=
operator|new
name|getVerTs_call
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|timestamp
argument_list|,
name|numVersions
argument_list|,
name|attributes
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|___protocolFactory
argument_list|,
name|___transport
argument_list|)
decl_stmt|;
name|this
operator|.
name|___currentMethod
operator|=
name|method_call
expr_stmt|;
name|___manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|getVerTs_call
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|private
name|ByteBuffer
name|row
decl_stmt|;
specifier|private
name|ByteBuffer
name|column
decl_stmt|;
specifier|private
name|long
name|timestamp
decl_stmt|;
specifier|private
name|int
name|numVersions
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
decl_stmt|;
specifier|public
name|getVerTs_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|int
name|numVersions
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|getVerTs_call
argument_list|>
name|resultHandler
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClient
name|client
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|column
operator|=
name|column
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|this
operator|.
name|numVersions
operator|=
name|numVersions
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessage
argument_list|(
literal|"getVerTs"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|getVerTs_args
name|args
init|=
operator|new
name|getVerTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumn
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|args
operator|.
name|setNumVersions
argument_list|(
name|numVersions
argument_list|)
expr_stmt|;
name|args
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
operator|.
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_getVerTs
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|getRow
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|getRow_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|getRow_call
name|method_call
init|=
operator|new
name|getRow_call
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|attributes
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|___protocolFactory
argument_list|,
name|___transport
argument_list|)
decl_stmt|;
name|this
operator|.
name|___currentMethod
operator|=
name|method_call
expr_stmt|;
name|___manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|getRow_call
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|private
name|ByteBuffer
name|row
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
decl_stmt|;
specifier|public
name|getRow_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|getRow_call
argument_list|>
name|resultHandler
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClient
name|client
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessage
argument_list|(
literal|"getRow"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|getRow_args
name|args
init|=
operator|new
name|getRow_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
operator|.
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_getRow
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|getRowWithColumns
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|getRowWithColumns_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|getRowWithColumns_call
name|method_call
init|=
operator|new
name|getRowWithColumns_call
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|columns
argument_list|,
name|attributes
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|___protocolFactory
argument_list|,
name|___transport
argument_list|)
decl_stmt|;
name|this
operator|.
name|___currentMethod
operator|=
name|method_call
expr_stmt|;
name|___manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|getRowWithColumns_call
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|private
name|ByteBuffer
name|row
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
decl_stmt|;
specifier|public
name|getRowWithColumns_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|getRowWithColumns_call
argument_list|>
name|resultHandler
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClient
name|client
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessage
argument_list|(
literal|"getRowWithColumns"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|getRowWithColumns_args
name|args
init|=
operator|new
name|getRowWithColumns_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumns
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|args
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
operator|.
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_getRowWithColumns
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|getRowTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|getRowTs_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|getRowTs_call
name|method_call
init|=
operator|new
name|getRowTs_call
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|timestamp
argument_list|,
name|attributes
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|___protocolFactory
argument_list|,
name|___transport
argument_list|)
decl_stmt|;
name|this
operator|.
name|___currentMethod
operator|=
name|method_call
expr_stmt|;
name|___manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|getRowTs_call
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|private
name|ByteBuffer
name|row
decl_stmt|;
specifier|private
name|long
name|timestamp
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
decl_stmt|;
specifier|public
name|getRowTs_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|getRowTs_call
argument_list|>
name|resultHandler
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClient
name|client
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessage
argument_list|(
literal|"getRowTs"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|getRowTs_args
name|args
init|=
operator|new
name|getRowTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|args
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
operator|.
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_getRowTs
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|getRowWithColumnsTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|getRowWithColumnsTs_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|getRowWithColumnsTs_call
name|method_call
init|=
operator|new
name|getRowWithColumnsTs_call
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|columns
argument_list|,
name|timestamp
argument_list|,
name|attributes
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|___protocolFactory
argument_list|,
name|___transport
argument_list|)
decl_stmt|;
name|this
operator|.
name|___currentMethod
operator|=
name|method_call
expr_stmt|;
name|___manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|getRowWithColumnsTs_call
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|private
name|ByteBuffer
name|row
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
decl_stmt|;
specifier|private
name|long
name|timestamp
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
decl_stmt|;
specifier|public
name|getRowWithColumnsTs_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|getRowWithColumnsTs_call
argument_list|>
name|resultHandler
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClient
name|client
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessage
argument_list|(
literal|"getRowWithColumnsTs"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|getRowWithColumnsTs_args
name|args
init|=
operator|new
name|getRowWithColumnsTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumns
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|args
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
operator|.
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_getRowWithColumnsTs
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|getRows
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|getRows_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|getRows_call
name|method_call
init|=
operator|new
name|getRows_call
argument_list|(
name|tableName
argument_list|,
name|rows
argument_list|,
name|attributes
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|___protocolFactory
argument_list|,
name|___transport
argument_list|)
decl_stmt|;
name|this
operator|.
name|___currentMethod
operator|=
name|method_call
expr_stmt|;
name|___manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|getRows_call
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
decl_stmt|;
specifier|public
name|getRows_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|getRows_call
argument_list|>
name|resultHandler
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClient
name|client
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|rows
operator|=
name|rows
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessage
argument_list|(
literal|"getRows"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|getRows_args
name|args
init|=
operator|new
name|getRows_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRows
argument_list|(
name|rows
argument_list|)
expr_stmt|;
name|args
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
operator|.
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_getRows
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|getRowsWithColumns
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|getRowsWithColumns_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|getRowsWithColumns_call
name|method_call
init|=
operator|new
name|getRowsWithColumns_call
argument_list|(
name|tableName
argument_list|,
name|rows
argument_list|,
name|columns
argument_list|,
name|attributes
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|___protocolFactory
argument_list|,
name|___transport
argument_list|)
decl_stmt|;
name|this
operator|.
name|___currentMethod
operator|=
name|method_call
expr_stmt|;
name|___manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|getRowsWithColumns_call
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
decl_stmt|;
specifier|public
name|getRowsWithColumns_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|getRowsWithColumns_call
argument_list|>
name|resultHandler
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClient
name|client
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|rows
operator|=
name|rows
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessage
argument_list|(
literal|"getRowsWithColumns"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|getRowsWithColumns_args
name|args
init|=
operator|new
name|getRowsWithColumns_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRows
argument_list|(
name|rows
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumns
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|args
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
operator|.
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_getRowsWithColumns
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|getRowsTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|getRowsTs_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|getRowsTs_call
name|method_call
init|=
operator|new
name|getRowsTs_call
argument_list|(
name|tableName
argument_list|,
name|rows
argument_list|,
name|timestamp
argument_list|,
name|attributes
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|___protocolFactory
argument_list|,
name|___transport
argument_list|)
decl_stmt|;
name|this
operator|.
name|___currentMethod
operator|=
name|method_call
expr_stmt|;
name|___manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|getRowsTs_call
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
decl_stmt|;
specifier|private
name|long
name|timestamp
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
decl_stmt|;
specifier|public
name|getRowsTs_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|getRowsTs_call
argument_list|>
name|resultHandler
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClient
name|client
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|rows
operator|=
name|rows
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessage
argument_list|(
literal|"getRowsTs"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|getRowsTs_args
name|args
init|=
operator|new
name|getRowsTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRows
argument_list|(
name|rows
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|args
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
operator|.
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_getRowsTs
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|getRowsWithColumnsTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|getRowsWithColumnsTs_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|getRowsWithColumnsTs_call
name|method_call
init|=
operator|new
name|getRowsWithColumnsTs_call
argument_list|(
name|tableName
argument_list|,
name|rows
argument_list|,
name|columns
argument_list|,
name|timestamp
argument_list|,
name|attributes
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|___protocolFactory
argument_list|,
name|___transport
argument_list|)
decl_stmt|;
name|this
operator|.
name|___currentMethod
operator|=
name|method_call
expr_stmt|;
name|___manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|getRowsWithColumnsTs_call
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
decl_stmt|;
specifier|private
name|long
name|timestamp
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
decl_stmt|;
specifier|public
name|getRowsWithColumnsTs_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|getRowsWithColumnsTs_call
argument_list|>
name|resultHandler
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClient
name|client
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|rows
operator|=
name|rows
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessage
argument_list|(
literal|"getRowsWithColumnsTs"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|getRowsWithColumnsTs_args
name|args
init|=
operator|new
name|getRowsWithColumnsTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRows
argument_list|(
name|rows
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumns
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|args
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
operator|.
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_getRowsWithColumnsTs
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|mutateRow
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|mutateRow_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|mutateRow_call
name|method_call
init|=
operator|new
name|mutateRow_call
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|mutations
argument_list|,
name|attributes
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|___protocolFactory
argument_list|,
name|___transport
argument_list|)
decl_stmt|;
name|this
operator|.
name|___currentMethod
operator|=
name|method_call
expr_stmt|;
name|___manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|mutateRow_call
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|private
name|ByteBuffer
name|row
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
decl_stmt|;
specifier|public
name|mutateRow_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|mutateRow_call
argument_list|>
name|resultHandler
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClient
name|client
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|mutations
operator|=
name|mutations
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessage
argument_list|(
literal|"mutateRow"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|mutateRow_args
name|args
init|=
operator|new
name|mutateRow_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|setMutations
argument_list|(
name|mutations
argument_list|)
expr_stmt|;
name|args
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
operator|.
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_mutateRow
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|mutateRowTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|mutateRowTs_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|mutateRowTs_call
name|method_call
init|=
operator|new
name|mutateRowTs_call
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|mutations
argument_list|,
name|timestamp
argument_list|,
name|attributes
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|___protocolFactory
argument_list|,
name|___transport
argument_list|)
decl_stmt|;
name|this
operator|.
name|___currentMethod
operator|=
name|method_call
expr_stmt|;
name|___manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|mutateRowTs_call
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|private
name|ByteBuffer
name|row
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
decl_stmt|;
specifier|private
name|long
name|timestamp
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
decl_stmt|;
specifier|public
name|mutateRowTs_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|mutateRowTs_call
argument_list|>
name|resultHandler
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClient
name|client
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|mutations
operator|=
name|mutations
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessage
argument_list|(
literal|"mutateRowTs"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|mutateRowTs_args
name|args
init|=
operator|new
name|mutateRowTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|setMutations
argument_list|(
name|mutations
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|args
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
operator|.
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_mutateRowTs
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|mutateRows
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|rowBatches
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|mutateRows_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|mutateRows_call
name|method_call
init|=
operator|new
name|mutateRows_call
argument_list|(
name|tableName
argument_list|,
name|rowBatches
argument_list|,
name|attributes
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|___protocolFactory
argument_list|,
name|___transport
argument_list|)
decl_stmt|;
name|this
operator|.
name|___currentMethod
operator|=
name|method_call
expr_stmt|;
name|___manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|mutateRows_call
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|private
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|rowBatches
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
decl_stmt|;
specifier|public
name|mutateRows_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|rowBatches
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|mutateRows_call
argument_list|>
name|resultHandler
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClient
name|client
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|rowBatches
operator|=
name|rowBatches
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessage
argument_list|(
literal|"mutateRows"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|mutateRows_args
name|args
init|=
operator|new
name|mutateRows_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRowBatches
argument_list|(
name|rowBatches
argument_list|)
expr_stmt|;
name|args
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
operator|.
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_mutateRows
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|mutateRowsTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|rowBatches
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|mutateRowsTs_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|mutateRowsTs_call
name|method_call
init|=
operator|new
name|mutateRowsTs_call
argument_list|(
name|tableName
argument_list|,
name|rowBatches
argument_list|,
name|timestamp
argument_list|,
name|attributes
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|___protocolFactory
argument_list|,
name|___transport
argument_list|)
decl_stmt|;
name|this
operator|.
name|___currentMethod
operator|=
name|method_call
expr_stmt|;
name|___manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|mutateRowsTs_call
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|private
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|rowBatches
decl_stmt|;
specifier|private
name|long
name|timestamp
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
decl_stmt|;
specifier|public
name|mutateRowsTs_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|rowBatches
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|mutateRowsTs_call
argument_list|>
name|resultHandler
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClient
name|client
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|rowBatches
operator|=
name|rowBatches
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessage
argument_list|(
literal|"mutateRowsTs"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|mutateRowsTs_args
name|args
init|=
operator|new
name|mutateRowsTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRowBatches
argument_list|(
name|rowBatches
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|args
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
operator|.
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_mutateRowsTs
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|atomicIncrement
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|long
name|value
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|atomicIncrement_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|atomicIncrement_call
name|method_call
init|=
operator|new
name|atomicIncrement_call
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|value
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|___protocolFactory
argument_list|,
name|___transport
argument_list|)
decl_stmt|;
name|this
operator|.
name|___currentMethod
operator|=
name|method_call
expr_stmt|;
name|___manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|atomicIncrement_call
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|private
name|ByteBuffer
name|row
decl_stmt|;
specifier|private
name|ByteBuffer
name|column
decl_stmt|;
specifier|private
name|long
name|value
decl_stmt|;
specifier|public
name|atomicIncrement_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|long
name|value
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|atomicIncrement_call
argument_list|>
name|resultHandler
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClient
name|client
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|column
operator|=
name|column
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessage
argument_list|(
literal|"atomicIncrement"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|atomicIncrement_args
name|args
init|=
operator|new
name|atomicIncrement_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumn
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|args
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|long
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
operator|.
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_atomicIncrement
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|deleteAll
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|deleteAll_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|deleteAll_call
name|method_call
init|=
operator|new
name|deleteAll_call
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|attributes
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|___protocolFactory
argument_list|,
name|___transport
argument_list|)
decl_stmt|;
name|this
operator|.
name|___currentMethod
operator|=
name|method_call
expr_stmt|;
name|___manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|deleteAll_call
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|private
name|ByteBuffer
name|row
decl_stmt|;
specifier|private
name|ByteBuffer
name|column
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
decl_stmt|;
specifier|public
name|deleteAll_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|deleteAll_call
argument_list|>
name|resultHandler
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClient
name|client
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|column
operator|=
name|column
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessage
argument_list|(
literal|"deleteAll"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|deleteAll_args
name|args
init|=
operator|new
name|deleteAll_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumn
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|args
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
operator|.
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_deleteAll
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|deleteAllTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|deleteAllTs_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|deleteAllTs_call
name|method_call
init|=
operator|new
name|deleteAllTs_call
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|timestamp
argument_list|,
name|attributes
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|___protocolFactory
argument_list|,
name|___transport
argument_list|)
decl_stmt|;
name|this
operator|.
name|___currentMethod
operator|=
name|method_call
expr_stmt|;
name|___manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|deleteAllTs_call
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|private
name|ByteBuffer
name|row
decl_stmt|;
specifier|private
name|ByteBuffer
name|column
decl_stmt|;
specifier|private
name|long
name|timestamp
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
decl_stmt|;
specifier|public
name|deleteAllTs_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|deleteAllTs_call
argument_list|>
name|resultHandler
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClient
name|client
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|column
operator|=
name|column
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessage
argument_list|(
literal|"deleteAllTs"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|deleteAllTs_args
name|args
init|=
operator|new
name|deleteAllTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumn
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|args
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
operator|.
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_deleteAllTs
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|deleteAllRow
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|deleteAllRow_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|deleteAllRow_call
name|method_call
init|=
operator|new
name|deleteAllRow_call
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|attributes
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|___protocolFactory
argument_list|,
name|___transport
argument_list|)
decl_stmt|;
name|this
operator|.
name|___currentMethod
operator|=
name|method_call
expr_stmt|;
name|___manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|deleteAllRow_call
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|private
name|ByteBuffer
name|row
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
decl_stmt|;
specifier|public
name|deleteAllRow_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|deleteAllRow_call
argument_list|>
name|resultHandler
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClient
name|client
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessage
argument_list|(
literal|"deleteAllRow"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|deleteAllRow_args
name|args
init|=
operator|new
name|deleteAllRow_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
operator|.
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_deleteAllRow
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|deleteAllRowTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|deleteAllRowTs_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|deleteAllRowTs_call
name|method_call
init|=
operator|new
name|deleteAllRowTs_call
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|timestamp
argument_list|,
name|attributes
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|___protocolFactory
argument_list|,
name|___transport
argument_list|)
decl_stmt|;
name|this
operator|.
name|___currentMethod
operator|=
name|method_call
expr_stmt|;
name|___manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|deleteAllRowTs_call
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|private
name|ByteBuffer
name|row
decl_stmt|;
specifier|private
name|long
name|timestamp
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
decl_stmt|;
specifier|public
name|deleteAllRowTs_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|deleteAllRowTs_call
argument_list|>
name|resultHandler
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClient
name|client
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessage
argument_list|(
literal|"deleteAllRowTs"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|deleteAllRowTs_args
name|args
init|=
operator|new
name|deleteAllRowTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|args
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
operator|.
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_deleteAllRowTs
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|scannerOpenWithScan
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|TScan
name|scan
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|scannerOpenWithScan_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|scannerOpenWithScan_call
name|method_call
init|=
operator|new
name|scannerOpenWithScan_call
argument_list|(
name|tableName
argument_list|,
name|scan
argument_list|,
name|attributes
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|___protocolFactory
argument_list|,
name|___transport
argument_list|)
decl_stmt|;
name|this
operator|.
name|___currentMethod
operator|=
name|method_call
expr_stmt|;
name|___manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|scannerOpenWithScan_call
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|private
name|TScan
name|scan
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
decl_stmt|;
specifier|public
name|scannerOpenWithScan_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|TScan
name|scan
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|scannerOpenWithScan_call
argument_list|>
name|resultHandler
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClient
name|client
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|scan
operator|=
name|scan
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessage
argument_list|(
literal|"scannerOpenWithScan"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|scannerOpenWithScan_args
name|args
init|=
operator|new
name|scannerOpenWithScan_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setScan
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|args
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
operator|.
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_scannerOpenWithScan
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|scannerOpen
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|scannerOpen_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|scannerOpen_call
name|method_call
init|=
operator|new
name|scannerOpen_call
argument_list|(
name|tableName
argument_list|,
name|startRow
argument_list|,
name|columns
argument_list|,
name|attributes
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|___protocolFactory
argument_list|,
name|___transport
argument_list|)
decl_stmt|;
name|this
operator|.
name|___currentMethod
operator|=
name|method_call
expr_stmt|;
name|___manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|scannerOpen_call
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|private
name|ByteBuffer
name|startRow
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
decl_stmt|;
specifier|public
name|scannerOpen_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|scannerOpen_call
argument_list|>
name|resultHandler
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClient
name|client
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|startRow
operator|=
name|startRow
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessage
argument_list|(
literal|"scannerOpen"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|scannerOpen_args
name|args
init|=
operator|new
name|scannerOpen_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setStartRow
argument_list|(
name|startRow
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumns
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|args
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
operator|.
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_scannerOpen
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|scannerOpenWithStop
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|ByteBuffer
name|stopRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|scannerOpenWithStop_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|scannerOpenWithStop_call
name|method_call
init|=
operator|new
name|scannerOpenWithStop_call
argument_list|(
name|tableName
argument_list|,
name|startRow
argument_list|,
name|stopRow
argument_list|,
name|columns
argument_list|,
name|attributes
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|___protocolFactory
argument_list|,
name|___transport
argument_list|)
decl_stmt|;
name|this
operator|.
name|___currentMethod
operator|=
name|method_call
expr_stmt|;
name|___manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|scannerOpenWithStop_call
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|private
name|ByteBuffer
name|startRow
decl_stmt|;
specifier|private
name|ByteBuffer
name|stopRow
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
decl_stmt|;
specifier|public
name|scannerOpenWithStop_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|ByteBuffer
name|stopRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|scannerOpenWithStop_call
argument_list|>
name|resultHandler
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClient
name|client
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|startRow
operator|=
name|startRow
expr_stmt|;
name|this
operator|.
name|stopRow
operator|=
name|stopRow
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessage
argument_list|(
literal|"scannerOpenWithStop"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|scannerOpenWithStop_args
name|args
init|=
operator|new
name|scannerOpenWithStop_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setStartRow
argument_list|(
name|startRow
argument_list|)
expr_stmt|;
name|args
operator|.
name|setStopRow
argument_list|(
name|stopRow
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumns
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|args
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
operator|.
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_scannerOpenWithStop
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|scannerOpenWithPrefix
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startAndPrefix
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|scannerOpenWithPrefix_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|scannerOpenWithPrefix_call
name|method_call
init|=
operator|new
name|scannerOpenWithPrefix_call
argument_list|(
name|tableName
argument_list|,
name|startAndPrefix
argument_list|,
name|columns
argument_list|,
name|attributes
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|___protocolFactory
argument_list|,
name|___transport
argument_list|)
decl_stmt|;
name|this
operator|.
name|___currentMethod
operator|=
name|method_call
expr_stmt|;
name|___manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|scannerOpenWithPrefix_call
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|private
name|ByteBuffer
name|startAndPrefix
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
decl_stmt|;
specifier|public
name|scannerOpenWithPrefix_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startAndPrefix
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|scannerOpenWithPrefix_call
argument_list|>
name|resultHandler
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClient
name|client
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|startAndPrefix
operator|=
name|startAndPrefix
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessage
argument_list|(
literal|"scannerOpenWithPrefix"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|scannerOpenWithPrefix_args
name|args
init|=
operator|new
name|scannerOpenWithPrefix_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setStartAndPrefix
argument_list|(
name|startAndPrefix
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumns
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|args
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
operator|.
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_scannerOpenWithPrefix
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|scannerOpenTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|scannerOpenTs_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|scannerOpenTs_call
name|method_call
init|=
operator|new
name|scannerOpenTs_call
argument_list|(
name|tableName
argument_list|,
name|startRow
argument_list|,
name|columns
argument_list|,
name|timestamp
argument_list|,
name|attributes
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|___protocolFactory
argument_list|,
name|___transport
argument_list|)
decl_stmt|;
name|this
operator|.
name|___currentMethod
operator|=
name|method_call
expr_stmt|;
name|___manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|scannerOpenTs_call
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|private
name|ByteBuffer
name|startRow
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
decl_stmt|;
specifier|private
name|long
name|timestamp
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
decl_stmt|;
specifier|public
name|scannerOpenTs_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|scannerOpenTs_call
argument_list|>
name|resultHandler
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClient
name|client
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|startRow
operator|=
name|startRow
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessage
argument_list|(
literal|"scannerOpenTs"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|scannerOpenTs_args
name|args
init|=
operator|new
name|scannerOpenTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setStartRow
argument_list|(
name|startRow
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumns
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|args
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
operator|.
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_scannerOpenTs
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|scannerOpenWithStopTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|ByteBuffer
name|stopRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|scannerOpenWithStopTs_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|scannerOpenWithStopTs_call
name|method_call
init|=
operator|new
name|scannerOpenWithStopTs_call
argument_list|(
name|tableName
argument_list|,
name|startRow
argument_list|,
name|stopRow
argument_list|,
name|columns
argument_list|,
name|timestamp
argument_list|,
name|attributes
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|___protocolFactory
argument_list|,
name|___transport
argument_list|)
decl_stmt|;
name|this
operator|.
name|___currentMethod
operator|=
name|method_call
expr_stmt|;
name|___manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|scannerOpenWithStopTs_call
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|private
name|ByteBuffer
name|startRow
decl_stmt|;
specifier|private
name|ByteBuffer
name|stopRow
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
decl_stmt|;
specifier|private
name|long
name|timestamp
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
decl_stmt|;
specifier|public
name|scannerOpenWithStopTs_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|ByteBuffer
name|stopRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|scannerOpenWithStopTs_call
argument_list|>
name|resultHandler
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClient
name|client
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|startRow
operator|=
name|startRow
expr_stmt|;
name|this
operator|.
name|stopRow
operator|=
name|stopRow
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessage
argument_list|(
literal|"scannerOpenWithStopTs"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|scannerOpenWithStopTs_args
name|args
init|=
operator|new
name|scannerOpenWithStopTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setStartRow
argument_list|(
name|startRow
argument_list|)
expr_stmt|;
name|args
operator|.
name|setStopRow
argument_list|(
name|stopRow
argument_list|)
expr_stmt|;
name|args
operator|.
name|setColumns
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|args
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
operator|.
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_scannerOpenWithStopTs
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|scannerGet
parameter_list|(
name|int
name|id
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|scannerGet_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|scannerGet_call
name|method_call
init|=
operator|new
name|scannerGet_call
argument_list|(
name|id
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|___protocolFactory
argument_list|,
name|___transport
argument_list|)
decl_stmt|;
name|this
operator|.
name|___currentMethod
operator|=
name|method_call
expr_stmt|;
name|___manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|scannerGet_call
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
block|{
specifier|private
name|int
name|id
decl_stmt|;
specifier|public
name|scannerGet_call
parameter_list|(
name|int
name|id
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|scannerGet_call
argument_list|>
name|resultHandler
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClient
name|client
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessage
argument_list|(
literal|"scannerGet"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|scannerGet_args
name|args
init|=
operator|new
name|scannerGet_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
operator|.
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_scannerGet
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|scannerGetList
parameter_list|(
name|int
name|id
parameter_list|,
name|int
name|nbRows
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|scannerGetList_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|scannerGetList_call
name|method_call
init|=
operator|new
name|scannerGetList_call
argument_list|(
name|id
argument_list|,
name|nbRows
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|___protocolFactory
argument_list|,
name|___transport
argument_list|)
decl_stmt|;
name|this
operator|.
name|___currentMethod
operator|=
name|method_call
expr_stmt|;
name|___manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|scannerGetList_call
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
block|{
specifier|private
name|int
name|id
decl_stmt|;
specifier|private
name|int
name|nbRows
decl_stmt|;
specifier|public
name|scannerGetList_call
parameter_list|(
name|int
name|id
parameter_list|,
name|int
name|nbRows
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|scannerGetList_call
argument_list|>
name|resultHandler
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClient
name|client
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|nbRows
operator|=
name|nbRows
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessage
argument_list|(
literal|"scannerGetList"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|scannerGetList_args
name|args
init|=
operator|new
name|scannerGetList_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|args
operator|.
name|setNbRows
argument_list|(
name|nbRows
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
operator|.
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_scannerGetList
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|scannerClose
parameter_list|(
name|int
name|id
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|scannerClose_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|scannerClose_call
name|method_call
init|=
operator|new
name|scannerClose_call
argument_list|(
name|id
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|___protocolFactory
argument_list|,
name|___transport
argument_list|)
decl_stmt|;
name|this
operator|.
name|___currentMethod
operator|=
name|method_call
expr_stmt|;
name|___manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|scannerClose_call
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
block|{
specifier|private
name|int
name|id
decl_stmt|;
specifier|public
name|scannerClose_call
parameter_list|(
name|int
name|id
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|scannerClose_call
argument_list|>
name|resultHandler
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClient
name|client
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessage
argument_list|(
literal|"scannerClose"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|scannerClose_args
name|args
init|=
operator|new
name|scannerClose_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
operator|.
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_scannerClose
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|getRowOrBefore
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|family
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|getRowOrBefore_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|getRowOrBefore_call
name|method_call
init|=
operator|new
name|getRowOrBefore_call
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|___protocolFactory
argument_list|,
name|___transport
argument_list|)
decl_stmt|;
name|this
operator|.
name|___currentMethod
operator|=
name|method_call
expr_stmt|;
name|___manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|getRowOrBefore_call
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|tableName
decl_stmt|;
specifier|private
name|ByteBuffer
name|row
decl_stmt|;
specifier|private
name|ByteBuffer
name|family
decl_stmt|;
specifier|public
name|getRowOrBefore_call
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|family
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|getRowOrBefore_call
argument_list|>
name|resultHandler
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClient
name|client
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|family
operator|=
name|family
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessage
argument_list|(
literal|"getRowOrBefore"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|getRowOrBefore_args
name|args
init|=
operator|new
name|getRowOrBefore_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|setFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
operator|.
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_getRowOrBefore
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|getRegionInfo
parameter_list|(
name|ByteBuffer
name|row
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|getRegionInfo_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|getRegionInfo_call
name|method_call
init|=
operator|new
name|getRegionInfo_call
argument_list|(
name|row
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|___protocolFactory
argument_list|,
name|___transport
argument_list|)
decl_stmt|;
name|this
operator|.
name|___currentMethod
operator|=
name|method_call
expr_stmt|;
name|___manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|getRegionInfo_call
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
block|{
specifier|private
name|ByteBuffer
name|row
decl_stmt|;
specifier|public
name|getRegionInfo_call
parameter_list|(
name|ByteBuffer
name|row
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
argument_list|<
name|getRegionInfo_call
argument_list|>
name|resultHandler
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncClient
name|client
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessage
argument_list|(
literal|"getRegionInfo"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|getRegionInfo_args
name|args
init|=
operator|new
name|getRegionInfo_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|TRegionInfo
name|getResult
parameter_list|()
throws|throws
name|IOError
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|TAsyncMethodCall
operator|.
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_getRegionInfo
argument_list|()
return|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|Processor
parameter_list|<
name|I
extends|extends
name|Iface
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseProcessor
argument_list|<
name|I
argument_list|>
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TProcessor
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Processor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
name|Processor
parameter_list|(
name|I
name|iface
parameter_list|)
block|{
name|super
argument_list|(
name|iface
argument_list|,
name|getProcessMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|ProcessFunction
argument_list|<
name|I
argument_list|,
name|?
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|>
argument_list|>
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Processor
parameter_list|(
name|I
name|iface
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|ProcessFunction
argument_list|<
name|I
argument_list|,
name|?
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|>
argument_list|>
name|processMap
parameter_list|)
block|{
name|super
argument_list|(
name|iface
argument_list|,
name|getProcessMap
argument_list|(
name|processMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
parameter_list|<
name|I
extends|extends
name|Iface
parameter_list|>
name|Map
argument_list|<
name|String
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|ProcessFunction
argument_list|<
name|I
argument_list|,
name|?
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|>
argument_list|>
name|getProcessMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|ProcessFunction
argument_list|<
name|I
argument_list|,
name|?
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|>
argument_list|>
name|processMap
parameter_list|)
block|{
name|processMap
operator|.
name|put
argument_list|(
literal|"enableTable"
argument_list|,
operator|new
name|enableTable
argument_list|()
argument_list|)
expr_stmt|;
name|processMap
operator|.
name|put
argument_list|(
literal|"disableTable"
argument_list|,
operator|new
name|disableTable
argument_list|()
argument_list|)
expr_stmt|;
name|processMap
operator|.
name|put
argument_list|(
literal|"isTableEnabled"
argument_list|,
operator|new
name|isTableEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|processMap
operator|.
name|put
argument_list|(
literal|"compact"
argument_list|,
operator|new
name|compact
argument_list|()
argument_list|)
expr_stmt|;
name|processMap
operator|.
name|put
argument_list|(
literal|"majorCompact"
argument_list|,
operator|new
name|majorCompact
argument_list|()
argument_list|)
expr_stmt|;
name|processMap
operator|.
name|put
argument_list|(
literal|"getTableNames"
argument_list|,
operator|new
name|getTableNames
argument_list|()
argument_list|)
expr_stmt|;
name|processMap
operator|.
name|put
argument_list|(
literal|"getColumnDescriptors"
argument_list|,
operator|new
name|getColumnDescriptors
argument_list|()
argument_list|)
expr_stmt|;
name|processMap
operator|.
name|put
argument_list|(
literal|"getTableRegions"
argument_list|,
operator|new
name|getTableRegions
argument_list|()
argument_list|)
expr_stmt|;
name|processMap
operator|.
name|put
argument_list|(
literal|"createTable"
argument_list|,
operator|new
name|createTable
argument_list|()
argument_list|)
expr_stmt|;
name|processMap
operator|.
name|put
argument_list|(
literal|"deleteTable"
argument_list|,
operator|new
name|deleteTable
argument_list|()
argument_list|)
expr_stmt|;
name|processMap
operator|.
name|put
argument_list|(
literal|"get"
argument_list|,
operator|new
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|processMap
operator|.
name|put
argument_list|(
literal|"getVer"
argument_list|,
operator|new
name|getVer
argument_list|()
argument_list|)
expr_stmt|;
name|processMap
operator|.
name|put
argument_list|(
literal|"getVerTs"
argument_list|,
operator|new
name|getVerTs
argument_list|()
argument_list|)
expr_stmt|;
name|processMap
operator|.
name|put
argument_list|(
literal|"getRow"
argument_list|,
operator|new
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|processMap
operator|.
name|put
argument_list|(
literal|"getRowWithColumns"
argument_list|,
operator|new
name|getRowWithColumns
argument_list|()
argument_list|)
expr_stmt|;
name|processMap
operator|.
name|put
argument_list|(
literal|"getRowTs"
argument_list|,
operator|new
name|getRowTs
argument_list|()
argument_list|)
expr_stmt|;
name|processMap
operator|.
name|put
argument_list|(
literal|"getRowWithColumnsTs"
argument_list|,
operator|new
name|getRowWithColumnsTs
argument_list|()
argument_list|)
expr_stmt|;
name|processMap
operator|.
name|put
argument_list|(
literal|"getRows"
argument_list|,
operator|new
name|getRows
argument_list|()
argument_list|)
expr_stmt|;
name|processMap
operator|.
name|put
argument_list|(
literal|"getRowsWithColumns"
argument_list|,
operator|new
name|getRowsWithColumns
argument_list|()
argument_list|)
expr_stmt|;
name|processMap
operator|.
name|put
argument_list|(
literal|"getRowsTs"
argument_list|,
operator|new
name|getRowsTs
argument_list|()
argument_list|)
expr_stmt|;
name|processMap
operator|.
name|put
argument_list|(
literal|"getRowsWithColumnsTs"
argument_list|,
operator|new
name|getRowsWithColumnsTs
argument_list|()
argument_list|)
expr_stmt|;
name|processMap
operator|.
name|put
argument_list|(
literal|"mutateRow"
argument_list|,
operator|new
name|mutateRow
argument_list|()
argument_list|)
expr_stmt|;
name|processMap
operator|.
name|put
argument_list|(
literal|"mutateRowTs"
argument_list|,
operator|new
name|mutateRowTs
argument_list|()
argument_list|)
expr_stmt|;
name|processMap
operator|.
name|put
argument_list|(
literal|"mutateRows"
argument_list|,
operator|new
name|mutateRows
argument_list|()
argument_list|)
expr_stmt|;
name|processMap
operator|.
name|put
argument_list|(
literal|"mutateRowsTs"
argument_list|,
operator|new
name|mutateRowsTs
argument_list|()
argument_list|)
expr_stmt|;
name|processMap
operator|.
name|put
argument_list|(
literal|"atomicIncrement"
argument_list|,
operator|new
name|atomicIncrement
argument_list|()
argument_list|)
expr_stmt|;
name|processMap
operator|.
name|put
argument_list|(
literal|"deleteAll"
argument_list|,
operator|new
name|deleteAll
argument_list|()
argument_list|)
expr_stmt|;
name|processMap
operator|.
name|put
argument_list|(
literal|"deleteAllTs"
argument_list|,
operator|new
name|deleteAllTs
argument_list|()
argument_list|)
expr_stmt|;
name|processMap
operator|.
name|put
argument_list|(
literal|"deleteAllRow"
argument_list|,
operator|new
name|deleteAllRow
argument_list|()
argument_list|)
expr_stmt|;
name|processMap
operator|.
name|put
argument_list|(
literal|"deleteAllRowTs"
argument_list|,
operator|new
name|deleteAllRowTs
argument_list|()
argument_list|)
expr_stmt|;
name|processMap
operator|.
name|put
argument_list|(
literal|"scannerOpenWithScan"
argument_list|,
operator|new
name|scannerOpenWithScan
argument_list|()
argument_list|)
expr_stmt|;
name|processMap
operator|.
name|put
argument_list|(
literal|"scannerOpen"
argument_list|,
operator|new
name|scannerOpen
argument_list|()
argument_list|)
expr_stmt|;
name|processMap
operator|.
name|put
argument_list|(
literal|"scannerOpenWithStop"
argument_list|,
operator|new
name|scannerOpenWithStop
argument_list|()
argument_list|)
expr_stmt|;
name|processMap
operator|.
name|put
argument_list|(
literal|"scannerOpenWithPrefix"
argument_list|,
operator|new
name|scannerOpenWithPrefix
argument_list|()
argument_list|)
expr_stmt|;
name|processMap
operator|.
name|put
argument_list|(
literal|"scannerOpenTs"
argument_list|,
operator|new
name|scannerOpenTs
argument_list|()
argument_list|)
expr_stmt|;
name|processMap
operator|.
name|put
argument_list|(
literal|"scannerOpenWithStopTs"
argument_list|,
operator|new
name|scannerOpenWithStopTs
argument_list|()
argument_list|)
expr_stmt|;
name|processMap
operator|.
name|put
argument_list|(
literal|"scannerGet"
argument_list|,
operator|new
name|scannerGet
argument_list|()
argument_list|)
expr_stmt|;
name|processMap
operator|.
name|put
argument_list|(
literal|"scannerGetList"
argument_list|,
operator|new
name|scannerGetList
argument_list|()
argument_list|)
expr_stmt|;
name|processMap
operator|.
name|put
argument_list|(
literal|"scannerClose"
argument_list|,
operator|new
name|scannerClose
argument_list|()
argument_list|)
expr_stmt|;
name|processMap
operator|.
name|put
argument_list|(
literal|"getRowOrBefore"
argument_list|,
operator|new
name|getRowOrBefore
argument_list|()
argument_list|)
expr_stmt|;
name|processMap
operator|.
name|put
argument_list|(
literal|"getRegionInfo"
argument_list|,
operator|new
name|getRegionInfo
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|processMap
return|;
block|}
specifier|private
specifier|static
class|class
name|enableTable
parameter_list|<
name|I
extends|extends
name|Iface
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|ProcessFunction
argument_list|<
name|I
argument_list|,
name|enableTable_args
argument_list|>
block|{
specifier|public
name|enableTable
parameter_list|()
block|{
name|super
argument_list|(
literal|"enableTable"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|enableTable_args
name|getEmptyArgsInstance
parameter_list|()
block|{
return|return
operator|new
name|enableTable_args
argument_list|()
return|;
block|}
specifier|protected
name|enableTable_result
name|getResult
parameter_list|(
name|I
name|iface
parameter_list|,
name|enableTable_args
name|args
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|enableTable_result
name|result
init|=
operator|new
name|enableTable_result
argument_list|()
decl_stmt|;
try|try
block|{
name|iface
operator|.
name|enableTable
argument_list|(
name|args
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|disableTable
parameter_list|<
name|I
extends|extends
name|Iface
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|ProcessFunction
argument_list|<
name|I
argument_list|,
name|disableTable_args
argument_list|>
block|{
specifier|public
name|disableTable
parameter_list|()
block|{
name|super
argument_list|(
literal|"disableTable"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|disableTable_args
name|getEmptyArgsInstance
parameter_list|()
block|{
return|return
operator|new
name|disableTable_args
argument_list|()
return|;
block|}
specifier|protected
name|disableTable_result
name|getResult
parameter_list|(
name|I
name|iface
parameter_list|,
name|disableTable_args
name|args
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|disableTable_result
name|result
init|=
operator|new
name|disableTable_result
argument_list|()
decl_stmt|;
try|try
block|{
name|iface
operator|.
name|disableTable
argument_list|(
name|args
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|isTableEnabled
parameter_list|<
name|I
extends|extends
name|Iface
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|ProcessFunction
argument_list|<
name|I
argument_list|,
name|isTableEnabled_args
argument_list|>
block|{
specifier|public
name|isTableEnabled
parameter_list|()
block|{
name|super
argument_list|(
literal|"isTableEnabled"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|isTableEnabled_args
name|getEmptyArgsInstance
parameter_list|()
block|{
return|return
operator|new
name|isTableEnabled_args
argument_list|()
return|;
block|}
specifier|protected
name|isTableEnabled_result
name|getResult
parameter_list|(
name|I
name|iface
parameter_list|,
name|isTableEnabled_args
name|args
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|isTableEnabled_result
name|result
init|=
operator|new
name|isTableEnabled_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface
operator|.
name|isTableEnabled
argument_list|(
name|args
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|result
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|compact
parameter_list|<
name|I
extends|extends
name|Iface
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|ProcessFunction
argument_list|<
name|I
argument_list|,
name|compact_args
argument_list|>
block|{
specifier|public
name|compact
parameter_list|()
block|{
name|super
argument_list|(
literal|"compact"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|compact_args
name|getEmptyArgsInstance
parameter_list|()
block|{
return|return
operator|new
name|compact_args
argument_list|()
return|;
block|}
specifier|protected
name|compact_result
name|getResult
parameter_list|(
name|I
name|iface
parameter_list|,
name|compact_args
name|args
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|compact_result
name|result
init|=
operator|new
name|compact_result
argument_list|()
decl_stmt|;
try|try
block|{
name|iface
operator|.
name|compact
argument_list|(
name|args
operator|.
name|tableNameOrRegionName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|majorCompact
parameter_list|<
name|I
extends|extends
name|Iface
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|ProcessFunction
argument_list|<
name|I
argument_list|,
name|majorCompact_args
argument_list|>
block|{
specifier|public
name|majorCompact
parameter_list|()
block|{
name|super
argument_list|(
literal|"majorCompact"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|majorCompact_args
name|getEmptyArgsInstance
parameter_list|()
block|{
return|return
operator|new
name|majorCompact_args
argument_list|()
return|;
block|}
specifier|protected
name|majorCompact_result
name|getResult
parameter_list|(
name|I
name|iface
parameter_list|,
name|majorCompact_args
name|args
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|majorCompact_result
name|result
init|=
operator|new
name|majorCompact_result
argument_list|()
decl_stmt|;
try|try
block|{
name|iface
operator|.
name|majorCompact
argument_list|(
name|args
operator|.
name|tableNameOrRegionName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getTableNames
parameter_list|<
name|I
extends|extends
name|Iface
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|ProcessFunction
argument_list|<
name|I
argument_list|,
name|getTableNames_args
argument_list|>
block|{
specifier|public
name|getTableNames
parameter_list|()
block|{
name|super
argument_list|(
literal|"getTableNames"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|getTableNames_args
name|getEmptyArgsInstance
parameter_list|()
block|{
return|return
operator|new
name|getTableNames_args
argument_list|()
return|;
block|}
specifier|protected
name|getTableNames_result
name|getResult
parameter_list|(
name|I
name|iface
parameter_list|,
name|getTableNames_args
name|args
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|getTableNames_result
name|result
init|=
operator|new
name|getTableNames_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface
operator|.
name|getTableNames
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getColumnDescriptors
parameter_list|<
name|I
extends|extends
name|Iface
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|ProcessFunction
argument_list|<
name|I
argument_list|,
name|getColumnDescriptors_args
argument_list|>
block|{
specifier|public
name|getColumnDescriptors
parameter_list|()
block|{
name|super
argument_list|(
literal|"getColumnDescriptors"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|getColumnDescriptors_args
name|getEmptyArgsInstance
parameter_list|()
block|{
return|return
operator|new
name|getColumnDescriptors_args
argument_list|()
return|;
block|}
specifier|protected
name|getColumnDescriptors_result
name|getResult
parameter_list|(
name|I
name|iface
parameter_list|,
name|getColumnDescriptors_args
name|args
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|getColumnDescriptors_result
name|result
init|=
operator|new
name|getColumnDescriptors_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface
operator|.
name|getColumnDescriptors
argument_list|(
name|args
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getTableRegions
parameter_list|<
name|I
extends|extends
name|Iface
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|ProcessFunction
argument_list|<
name|I
argument_list|,
name|getTableRegions_args
argument_list|>
block|{
specifier|public
name|getTableRegions
parameter_list|()
block|{
name|super
argument_list|(
literal|"getTableRegions"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|getTableRegions_args
name|getEmptyArgsInstance
parameter_list|()
block|{
return|return
operator|new
name|getTableRegions_args
argument_list|()
return|;
block|}
specifier|protected
name|getTableRegions_result
name|getResult
parameter_list|(
name|I
name|iface
parameter_list|,
name|getTableRegions_args
name|args
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|getTableRegions_result
name|result
init|=
operator|new
name|getTableRegions_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface
operator|.
name|getTableRegions
argument_list|(
name|args
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|createTable
parameter_list|<
name|I
extends|extends
name|Iface
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|ProcessFunction
argument_list|<
name|I
argument_list|,
name|createTable_args
argument_list|>
block|{
specifier|public
name|createTable
parameter_list|()
block|{
name|super
argument_list|(
literal|"createTable"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|createTable_args
name|getEmptyArgsInstance
parameter_list|()
block|{
return|return
operator|new
name|createTable_args
argument_list|()
return|;
block|}
specifier|protected
name|createTable_result
name|getResult
parameter_list|(
name|I
name|iface
parameter_list|,
name|createTable_args
name|args
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|createTable_result
name|result
init|=
operator|new
name|createTable_result
argument_list|()
decl_stmt|;
try|try
block|{
name|iface
operator|.
name|createTable
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|columnFamilies
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|result
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AlreadyExists
name|exist
parameter_list|)
block|{
name|result
operator|.
name|exist
operator|=
name|exist
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|deleteTable
parameter_list|<
name|I
extends|extends
name|Iface
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|ProcessFunction
argument_list|<
name|I
argument_list|,
name|deleteTable_args
argument_list|>
block|{
specifier|public
name|deleteTable
parameter_list|()
block|{
name|super
argument_list|(
literal|"deleteTable"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|deleteTable_args
name|getEmptyArgsInstance
parameter_list|()
block|{
return|return
operator|new
name|deleteTable_args
argument_list|()
return|;
block|}
specifier|protected
name|deleteTable_result
name|getResult
parameter_list|(
name|I
name|iface
parameter_list|,
name|deleteTable_args
name|args
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|deleteTable_result
name|result
init|=
operator|new
name|deleteTable_result
argument_list|()
decl_stmt|;
try|try
block|{
name|iface
operator|.
name|deleteTable
argument_list|(
name|args
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|get
parameter_list|<
name|I
extends|extends
name|Iface
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|ProcessFunction
argument_list|<
name|I
argument_list|,
name|get_args
argument_list|>
block|{
specifier|public
name|get
parameter_list|()
block|{
name|super
argument_list|(
literal|"get"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|get_args
name|getEmptyArgsInstance
parameter_list|()
block|{
return|return
operator|new
name|get_args
argument_list|()
return|;
block|}
specifier|protected
name|get_result
name|getResult
parameter_list|(
name|I
name|iface
parameter_list|,
name|get_args
name|args
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|get_result
name|result
init|=
operator|new
name|get_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface
operator|.
name|get
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|row
argument_list|,
name|args
operator|.
name|column
argument_list|,
name|args
operator|.
name|attributes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getVer
parameter_list|<
name|I
extends|extends
name|Iface
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|ProcessFunction
argument_list|<
name|I
argument_list|,
name|getVer_args
argument_list|>
block|{
specifier|public
name|getVer
parameter_list|()
block|{
name|super
argument_list|(
literal|"getVer"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|getVer_args
name|getEmptyArgsInstance
parameter_list|()
block|{
return|return
operator|new
name|getVer_args
argument_list|()
return|;
block|}
specifier|protected
name|getVer_result
name|getResult
parameter_list|(
name|I
name|iface
parameter_list|,
name|getVer_args
name|args
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|getVer_result
name|result
init|=
operator|new
name|getVer_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface
operator|.
name|getVer
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|row
argument_list|,
name|args
operator|.
name|column
argument_list|,
name|args
operator|.
name|numVersions
argument_list|,
name|args
operator|.
name|attributes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getVerTs
parameter_list|<
name|I
extends|extends
name|Iface
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|ProcessFunction
argument_list|<
name|I
argument_list|,
name|getVerTs_args
argument_list|>
block|{
specifier|public
name|getVerTs
parameter_list|()
block|{
name|super
argument_list|(
literal|"getVerTs"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|getVerTs_args
name|getEmptyArgsInstance
parameter_list|()
block|{
return|return
operator|new
name|getVerTs_args
argument_list|()
return|;
block|}
specifier|protected
name|getVerTs_result
name|getResult
parameter_list|(
name|I
name|iface
parameter_list|,
name|getVerTs_args
name|args
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|getVerTs_result
name|result
init|=
operator|new
name|getVerTs_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface
operator|.
name|getVerTs
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|row
argument_list|,
name|args
operator|.
name|column
argument_list|,
name|args
operator|.
name|timestamp
argument_list|,
name|args
operator|.
name|numVersions
argument_list|,
name|args
operator|.
name|attributes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRow
parameter_list|<
name|I
extends|extends
name|Iface
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|ProcessFunction
argument_list|<
name|I
argument_list|,
name|getRow_args
argument_list|>
block|{
specifier|public
name|getRow
parameter_list|()
block|{
name|super
argument_list|(
literal|"getRow"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|getRow_args
name|getEmptyArgsInstance
parameter_list|()
block|{
return|return
operator|new
name|getRow_args
argument_list|()
return|;
block|}
specifier|protected
name|getRow_result
name|getResult
parameter_list|(
name|I
name|iface
parameter_list|,
name|getRow_args
name|args
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|getRow_result
name|result
init|=
operator|new
name|getRow_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface
operator|.
name|getRow
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|row
argument_list|,
name|args
operator|.
name|attributes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowWithColumns
parameter_list|<
name|I
extends|extends
name|Iface
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|ProcessFunction
argument_list|<
name|I
argument_list|,
name|getRowWithColumns_args
argument_list|>
block|{
specifier|public
name|getRowWithColumns
parameter_list|()
block|{
name|super
argument_list|(
literal|"getRowWithColumns"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|getRowWithColumns_args
name|getEmptyArgsInstance
parameter_list|()
block|{
return|return
operator|new
name|getRowWithColumns_args
argument_list|()
return|;
block|}
specifier|protected
name|getRowWithColumns_result
name|getResult
parameter_list|(
name|I
name|iface
parameter_list|,
name|getRowWithColumns_args
name|args
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|getRowWithColumns_result
name|result
init|=
operator|new
name|getRowWithColumns_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface
operator|.
name|getRowWithColumns
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|row
argument_list|,
name|args
operator|.
name|columns
argument_list|,
name|args
operator|.
name|attributes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowTs
parameter_list|<
name|I
extends|extends
name|Iface
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|ProcessFunction
argument_list|<
name|I
argument_list|,
name|getRowTs_args
argument_list|>
block|{
specifier|public
name|getRowTs
parameter_list|()
block|{
name|super
argument_list|(
literal|"getRowTs"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|getRowTs_args
name|getEmptyArgsInstance
parameter_list|()
block|{
return|return
operator|new
name|getRowTs_args
argument_list|()
return|;
block|}
specifier|protected
name|getRowTs_result
name|getResult
parameter_list|(
name|I
name|iface
parameter_list|,
name|getRowTs_args
name|args
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|getRowTs_result
name|result
init|=
operator|new
name|getRowTs_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface
operator|.
name|getRowTs
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|row
argument_list|,
name|args
operator|.
name|timestamp
argument_list|,
name|args
operator|.
name|attributes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowWithColumnsTs
parameter_list|<
name|I
extends|extends
name|Iface
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|ProcessFunction
argument_list|<
name|I
argument_list|,
name|getRowWithColumnsTs_args
argument_list|>
block|{
specifier|public
name|getRowWithColumnsTs
parameter_list|()
block|{
name|super
argument_list|(
literal|"getRowWithColumnsTs"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|getRowWithColumnsTs_args
name|getEmptyArgsInstance
parameter_list|()
block|{
return|return
operator|new
name|getRowWithColumnsTs_args
argument_list|()
return|;
block|}
specifier|protected
name|getRowWithColumnsTs_result
name|getResult
parameter_list|(
name|I
name|iface
parameter_list|,
name|getRowWithColumnsTs_args
name|args
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|getRowWithColumnsTs_result
name|result
init|=
operator|new
name|getRowWithColumnsTs_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface
operator|.
name|getRowWithColumnsTs
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|row
argument_list|,
name|args
operator|.
name|columns
argument_list|,
name|args
operator|.
name|timestamp
argument_list|,
name|args
operator|.
name|attributes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRows
parameter_list|<
name|I
extends|extends
name|Iface
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|ProcessFunction
argument_list|<
name|I
argument_list|,
name|getRows_args
argument_list|>
block|{
specifier|public
name|getRows
parameter_list|()
block|{
name|super
argument_list|(
literal|"getRows"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|getRows_args
name|getEmptyArgsInstance
parameter_list|()
block|{
return|return
operator|new
name|getRows_args
argument_list|()
return|;
block|}
specifier|protected
name|getRows_result
name|getResult
parameter_list|(
name|I
name|iface
parameter_list|,
name|getRows_args
name|args
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|getRows_result
name|result
init|=
operator|new
name|getRows_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface
operator|.
name|getRows
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|rows
argument_list|,
name|args
operator|.
name|attributes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowsWithColumns
parameter_list|<
name|I
extends|extends
name|Iface
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|ProcessFunction
argument_list|<
name|I
argument_list|,
name|getRowsWithColumns_args
argument_list|>
block|{
specifier|public
name|getRowsWithColumns
parameter_list|()
block|{
name|super
argument_list|(
literal|"getRowsWithColumns"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|getRowsWithColumns_args
name|getEmptyArgsInstance
parameter_list|()
block|{
return|return
operator|new
name|getRowsWithColumns_args
argument_list|()
return|;
block|}
specifier|protected
name|getRowsWithColumns_result
name|getResult
parameter_list|(
name|I
name|iface
parameter_list|,
name|getRowsWithColumns_args
name|args
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|getRowsWithColumns_result
name|result
init|=
operator|new
name|getRowsWithColumns_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface
operator|.
name|getRowsWithColumns
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|rows
argument_list|,
name|args
operator|.
name|columns
argument_list|,
name|args
operator|.
name|attributes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowsTs
parameter_list|<
name|I
extends|extends
name|Iface
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|ProcessFunction
argument_list|<
name|I
argument_list|,
name|getRowsTs_args
argument_list|>
block|{
specifier|public
name|getRowsTs
parameter_list|()
block|{
name|super
argument_list|(
literal|"getRowsTs"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|getRowsTs_args
name|getEmptyArgsInstance
parameter_list|()
block|{
return|return
operator|new
name|getRowsTs_args
argument_list|()
return|;
block|}
specifier|protected
name|getRowsTs_result
name|getResult
parameter_list|(
name|I
name|iface
parameter_list|,
name|getRowsTs_args
name|args
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|getRowsTs_result
name|result
init|=
operator|new
name|getRowsTs_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface
operator|.
name|getRowsTs
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|rows
argument_list|,
name|args
operator|.
name|timestamp
argument_list|,
name|args
operator|.
name|attributes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowsWithColumnsTs
parameter_list|<
name|I
extends|extends
name|Iface
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|ProcessFunction
argument_list|<
name|I
argument_list|,
name|getRowsWithColumnsTs_args
argument_list|>
block|{
specifier|public
name|getRowsWithColumnsTs
parameter_list|()
block|{
name|super
argument_list|(
literal|"getRowsWithColumnsTs"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|getRowsWithColumnsTs_args
name|getEmptyArgsInstance
parameter_list|()
block|{
return|return
operator|new
name|getRowsWithColumnsTs_args
argument_list|()
return|;
block|}
specifier|protected
name|getRowsWithColumnsTs_result
name|getResult
parameter_list|(
name|I
name|iface
parameter_list|,
name|getRowsWithColumnsTs_args
name|args
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|getRowsWithColumnsTs_result
name|result
init|=
operator|new
name|getRowsWithColumnsTs_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface
operator|.
name|getRowsWithColumnsTs
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|rows
argument_list|,
name|args
operator|.
name|columns
argument_list|,
name|args
operator|.
name|timestamp
argument_list|,
name|args
operator|.
name|attributes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|mutateRow
parameter_list|<
name|I
extends|extends
name|Iface
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|ProcessFunction
argument_list|<
name|I
argument_list|,
name|mutateRow_args
argument_list|>
block|{
specifier|public
name|mutateRow
parameter_list|()
block|{
name|super
argument_list|(
literal|"mutateRow"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|mutateRow_args
name|getEmptyArgsInstance
parameter_list|()
block|{
return|return
operator|new
name|mutateRow_args
argument_list|()
return|;
block|}
specifier|protected
name|mutateRow_result
name|getResult
parameter_list|(
name|I
name|iface
parameter_list|,
name|mutateRow_args
name|args
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|mutateRow_result
name|result
init|=
operator|new
name|mutateRow_result
argument_list|()
decl_stmt|;
try|try
block|{
name|iface
operator|.
name|mutateRow
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|row
argument_list|,
name|args
operator|.
name|mutations
argument_list|,
name|args
operator|.
name|attributes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|result
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|mutateRowTs
parameter_list|<
name|I
extends|extends
name|Iface
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|ProcessFunction
argument_list|<
name|I
argument_list|,
name|mutateRowTs_args
argument_list|>
block|{
specifier|public
name|mutateRowTs
parameter_list|()
block|{
name|super
argument_list|(
literal|"mutateRowTs"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|mutateRowTs_args
name|getEmptyArgsInstance
parameter_list|()
block|{
return|return
operator|new
name|mutateRowTs_args
argument_list|()
return|;
block|}
specifier|protected
name|mutateRowTs_result
name|getResult
parameter_list|(
name|I
name|iface
parameter_list|,
name|mutateRowTs_args
name|args
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|mutateRowTs_result
name|result
init|=
operator|new
name|mutateRowTs_result
argument_list|()
decl_stmt|;
try|try
block|{
name|iface
operator|.
name|mutateRowTs
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|row
argument_list|,
name|args
operator|.
name|mutations
argument_list|,
name|args
operator|.
name|timestamp
argument_list|,
name|args
operator|.
name|attributes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|result
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|mutateRows
parameter_list|<
name|I
extends|extends
name|Iface
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|ProcessFunction
argument_list|<
name|I
argument_list|,
name|mutateRows_args
argument_list|>
block|{
specifier|public
name|mutateRows
parameter_list|()
block|{
name|super
argument_list|(
literal|"mutateRows"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|mutateRows_args
name|getEmptyArgsInstance
parameter_list|()
block|{
return|return
operator|new
name|mutateRows_args
argument_list|()
return|;
block|}
specifier|protected
name|mutateRows_result
name|getResult
parameter_list|(
name|I
name|iface
parameter_list|,
name|mutateRows_args
name|args
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|mutateRows_result
name|result
init|=
operator|new
name|mutateRows_result
argument_list|()
decl_stmt|;
try|try
block|{
name|iface
operator|.
name|mutateRows
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|rowBatches
argument_list|,
name|args
operator|.
name|attributes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|result
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|mutateRowsTs
parameter_list|<
name|I
extends|extends
name|Iface
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|ProcessFunction
argument_list|<
name|I
argument_list|,
name|mutateRowsTs_args
argument_list|>
block|{
specifier|public
name|mutateRowsTs
parameter_list|()
block|{
name|super
argument_list|(
literal|"mutateRowsTs"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|mutateRowsTs_args
name|getEmptyArgsInstance
parameter_list|()
block|{
return|return
operator|new
name|mutateRowsTs_args
argument_list|()
return|;
block|}
specifier|protected
name|mutateRowsTs_result
name|getResult
parameter_list|(
name|I
name|iface
parameter_list|,
name|mutateRowsTs_args
name|args
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|mutateRowsTs_result
name|result
init|=
operator|new
name|mutateRowsTs_result
argument_list|()
decl_stmt|;
try|try
block|{
name|iface
operator|.
name|mutateRowsTs
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|rowBatches
argument_list|,
name|args
operator|.
name|timestamp
argument_list|,
name|args
operator|.
name|attributes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|result
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|atomicIncrement
parameter_list|<
name|I
extends|extends
name|Iface
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|ProcessFunction
argument_list|<
name|I
argument_list|,
name|atomicIncrement_args
argument_list|>
block|{
specifier|public
name|atomicIncrement
parameter_list|()
block|{
name|super
argument_list|(
literal|"atomicIncrement"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|atomicIncrement_args
name|getEmptyArgsInstance
parameter_list|()
block|{
return|return
operator|new
name|atomicIncrement_args
argument_list|()
return|;
block|}
specifier|protected
name|atomicIncrement_result
name|getResult
parameter_list|(
name|I
name|iface
parameter_list|,
name|atomicIncrement_args
name|args
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|atomicIncrement_result
name|result
init|=
operator|new
name|atomicIncrement_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface
operator|.
name|atomicIncrement
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|row
argument_list|,
name|args
operator|.
name|column
argument_list|,
name|args
operator|.
name|value
argument_list|)
expr_stmt|;
name|result
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|result
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|deleteAll
parameter_list|<
name|I
extends|extends
name|Iface
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|ProcessFunction
argument_list|<
name|I
argument_list|,
name|deleteAll_args
argument_list|>
block|{
specifier|public
name|deleteAll
parameter_list|()
block|{
name|super
argument_list|(
literal|"deleteAll"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|deleteAll_args
name|getEmptyArgsInstance
parameter_list|()
block|{
return|return
operator|new
name|deleteAll_args
argument_list|()
return|;
block|}
specifier|protected
name|deleteAll_result
name|getResult
parameter_list|(
name|I
name|iface
parameter_list|,
name|deleteAll_args
name|args
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|deleteAll_result
name|result
init|=
operator|new
name|deleteAll_result
argument_list|()
decl_stmt|;
try|try
block|{
name|iface
operator|.
name|deleteAll
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|row
argument_list|,
name|args
operator|.
name|column
argument_list|,
name|args
operator|.
name|attributes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|deleteAllTs
parameter_list|<
name|I
extends|extends
name|Iface
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|ProcessFunction
argument_list|<
name|I
argument_list|,
name|deleteAllTs_args
argument_list|>
block|{
specifier|public
name|deleteAllTs
parameter_list|()
block|{
name|super
argument_list|(
literal|"deleteAllTs"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|deleteAllTs_args
name|getEmptyArgsInstance
parameter_list|()
block|{
return|return
operator|new
name|deleteAllTs_args
argument_list|()
return|;
block|}
specifier|protected
name|deleteAllTs_result
name|getResult
parameter_list|(
name|I
name|iface
parameter_list|,
name|deleteAllTs_args
name|args
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|deleteAllTs_result
name|result
init|=
operator|new
name|deleteAllTs_result
argument_list|()
decl_stmt|;
try|try
block|{
name|iface
operator|.
name|deleteAllTs
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|row
argument_list|,
name|args
operator|.
name|column
argument_list|,
name|args
operator|.
name|timestamp
argument_list|,
name|args
operator|.
name|attributes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|deleteAllRow
parameter_list|<
name|I
extends|extends
name|Iface
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|ProcessFunction
argument_list|<
name|I
argument_list|,
name|deleteAllRow_args
argument_list|>
block|{
specifier|public
name|deleteAllRow
parameter_list|()
block|{
name|super
argument_list|(
literal|"deleteAllRow"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|deleteAllRow_args
name|getEmptyArgsInstance
parameter_list|()
block|{
return|return
operator|new
name|deleteAllRow_args
argument_list|()
return|;
block|}
specifier|protected
name|deleteAllRow_result
name|getResult
parameter_list|(
name|I
name|iface
parameter_list|,
name|deleteAllRow_args
name|args
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|deleteAllRow_result
name|result
init|=
operator|new
name|deleteAllRow_result
argument_list|()
decl_stmt|;
try|try
block|{
name|iface
operator|.
name|deleteAllRow
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|row
argument_list|,
name|args
operator|.
name|attributes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|deleteAllRowTs
parameter_list|<
name|I
extends|extends
name|Iface
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|ProcessFunction
argument_list|<
name|I
argument_list|,
name|deleteAllRowTs_args
argument_list|>
block|{
specifier|public
name|deleteAllRowTs
parameter_list|()
block|{
name|super
argument_list|(
literal|"deleteAllRowTs"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|deleteAllRowTs_args
name|getEmptyArgsInstance
parameter_list|()
block|{
return|return
operator|new
name|deleteAllRowTs_args
argument_list|()
return|;
block|}
specifier|protected
name|deleteAllRowTs_result
name|getResult
parameter_list|(
name|I
name|iface
parameter_list|,
name|deleteAllRowTs_args
name|args
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|deleteAllRowTs_result
name|result
init|=
operator|new
name|deleteAllRowTs_result
argument_list|()
decl_stmt|;
try|try
block|{
name|iface
operator|.
name|deleteAllRowTs
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|row
argument_list|,
name|args
operator|.
name|timestamp
argument_list|,
name|args
operator|.
name|attributes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerOpenWithScan
parameter_list|<
name|I
extends|extends
name|Iface
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|ProcessFunction
argument_list|<
name|I
argument_list|,
name|scannerOpenWithScan_args
argument_list|>
block|{
specifier|public
name|scannerOpenWithScan
parameter_list|()
block|{
name|super
argument_list|(
literal|"scannerOpenWithScan"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|scannerOpenWithScan_args
name|getEmptyArgsInstance
parameter_list|()
block|{
return|return
operator|new
name|scannerOpenWithScan_args
argument_list|()
return|;
block|}
specifier|protected
name|scannerOpenWithScan_result
name|getResult
parameter_list|(
name|I
name|iface
parameter_list|,
name|scannerOpenWithScan_args
name|args
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|scannerOpenWithScan_result
name|result
init|=
operator|new
name|scannerOpenWithScan_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface
operator|.
name|scannerOpenWithScan
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|scan
argument_list|,
name|args
operator|.
name|attributes
argument_list|)
expr_stmt|;
name|result
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerOpen
parameter_list|<
name|I
extends|extends
name|Iface
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|ProcessFunction
argument_list|<
name|I
argument_list|,
name|scannerOpen_args
argument_list|>
block|{
specifier|public
name|scannerOpen
parameter_list|()
block|{
name|super
argument_list|(
literal|"scannerOpen"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|scannerOpen_args
name|getEmptyArgsInstance
parameter_list|()
block|{
return|return
operator|new
name|scannerOpen_args
argument_list|()
return|;
block|}
specifier|protected
name|scannerOpen_result
name|getResult
parameter_list|(
name|I
name|iface
parameter_list|,
name|scannerOpen_args
name|args
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|scannerOpen_result
name|result
init|=
operator|new
name|scannerOpen_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface
operator|.
name|scannerOpen
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|startRow
argument_list|,
name|args
operator|.
name|columns
argument_list|,
name|args
operator|.
name|attributes
argument_list|)
expr_stmt|;
name|result
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerOpenWithStop
parameter_list|<
name|I
extends|extends
name|Iface
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|ProcessFunction
argument_list|<
name|I
argument_list|,
name|scannerOpenWithStop_args
argument_list|>
block|{
specifier|public
name|scannerOpenWithStop
parameter_list|()
block|{
name|super
argument_list|(
literal|"scannerOpenWithStop"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|scannerOpenWithStop_args
name|getEmptyArgsInstance
parameter_list|()
block|{
return|return
operator|new
name|scannerOpenWithStop_args
argument_list|()
return|;
block|}
specifier|protected
name|scannerOpenWithStop_result
name|getResult
parameter_list|(
name|I
name|iface
parameter_list|,
name|scannerOpenWithStop_args
name|args
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|scannerOpenWithStop_result
name|result
init|=
operator|new
name|scannerOpenWithStop_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface
operator|.
name|scannerOpenWithStop
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|startRow
argument_list|,
name|args
operator|.
name|stopRow
argument_list|,
name|args
operator|.
name|columns
argument_list|,
name|args
operator|.
name|attributes
argument_list|)
expr_stmt|;
name|result
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerOpenWithPrefix
parameter_list|<
name|I
extends|extends
name|Iface
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|ProcessFunction
argument_list|<
name|I
argument_list|,
name|scannerOpenWithPrefix_args
argument_list|>
block|{
specifier|public
name|scannerOpenWithPrefix
parameter_list|()
block|{
name|super
argument_list|(
literal|"scannerOpenWithPrefix"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|scannerOpenWithPrefix_args
name|getEmptyArgsInstance
parameter_list|()
block|{
return|return
operator|new
name|scannerOpenWithPrefix_args
argument_list|()
return|;
block|}
specifier|protected
name|scannerOpenWithPrefix_result
name|getResult
parameter_list|(
name|I
name|iface
parameter_list|,
name|scannerOpenWithPrefix_args
name|args
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|scannerOpenWithPrefix_result
name|result
init|=
operator|new
name|scannerOpenWithPrefix_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface
operator|.
name|scannerOpenWithPrefix
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|startAndPrefix
argument_list|,
name|args
operator|.
name|columns
argument_list|,
name|args
operator|.
name|attributes
argument_list|)
expr_stmt|;
name|result
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerOpenTs
parameter_list|<
name|I
extends|extends
name|Iface
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|ProcessFunction
argument_list|<
name|I
argument_list|,
name|scannerOpenTs_args
argument_list|>
block|{
specifier|public
name|scannerOpenTs
parameter_list|()
block|{
name|super
argument_list|(
literal|"scannerOpenTs"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|scannerOpenTs_args
name|getEmptyArgsInstance
parameter_list|()
block|{
return|return
operator|new
name|scannerOpenTs_args
argument_list|()
return|;
block|}
specifier|protected
name|scannerOpenTs_result
name|getResult
parameter_list|(
name|I
name|iface
parameter_list|,
name|scannerOpenTs_args
name|args
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|scannerOpenTs_result
name|result
init|=
operator|new
name|scannerOpenTs_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface
operator|.
name|scannerOpenTs
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|startRow
argument_list|,
name|args
operator|.
name|columns
argument_list|,
name|args
operator|.
name|timestamp
argument_list|,
name|args
operator|.
name|attributes
argument_list|)
expr_stmt|;
name|result
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerOpenWithStopTs
parameter_list|<
name|I
extends|extends
name|Iface
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|ProcessFunction
argument_list|<
name|I
argument_list|,
name|scannerOpenWithStopTs_args
argument_list|>
block|{
specifier|public
name|scannerOpenWithStopTs
parameter_list|()
block|{
name|super
argument_list|(
literal|"scannerOpenWithStopTs"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|scannerOpenWithStopTs_args
name|getEmptyArgsInstance
parameter_list|()
block|{
return|return
operator|new
name|scannerOpenWithStopTs_args
argument_list|()
return|;
block|}
specifier|protected
name|scannerOpenWithStopTs_result
name|getResult
parameter_list|(
name|I
name|iface
parameter_list|,
name|scannerOpenWithStopTs_args
name|args
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|scannerOpenWithStopTs_result
name|result
init|=
operator|new
name|scannerOpenWithStopTs_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface
operator|.
name|scannerOpenWithStopTs
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|startRow
argument_list|,
name|args
operator|.
name|stopRow
argument_list|,
name|args
operator|.
name|columns
argument_list|,
name|args
operator|.
name|timestamp
argument_list|,
name|args
operator|.
name|attributes
argument_list|)
expr_stmt|;
name|result
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerGet
parameter_list|<
name|I
extends|extends
name|Iface
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|ProcessFunction
argument_list|<
name|I
argument_list|,
name|scannerGet_args
argument_list|>
block|{
specifier|public
name|scannerGet
parameter_list|()
block|{
name|super
argument_list|(
literal|"scannerGet"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|scannerGet_args
name|getEmptyArgsInstance
parameter_list|()
block|{
return|return
operator|new
name|scannerGet_args
argument_list|()
return|;
block|}
specifier|protected
name|scannerGet_result
name|getResult
parameter_list|(
name|I
name|iface
parameter_list|,
name|scannerGet_args
name|args
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|scannerGet_result
name|result
init|=
operator|new
name|scannerGet_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface
operator|.
name|scannerGet
argument_list|(
name|args
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|result
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerGetList
parameter_list|<
name|I
extends|extends
name|Iface
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|ProcessFunction
argument_list|<
name|I
argument_list|,
name|scannerGetList_args
argument_list|>
block|{
specifier|public
name|scannerGetList
parameter_list|()
block|{
name|super
argument_list|(
literal|"scannerGetList"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|scannerGetList_args
name|getEmptyArgsInstance
parameter_list|()
block|{
return|return
operator|new
name|scannerGetList_args
argument_list|()
return|;
block|}
specifier|protected
name|scannerGetList_result
name|getResult
parameter_list|(
name|I
name|iface
parameter_list|,
name|scannerGetList_args
name|args
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|scannerGetList_result
name|result
init|=
operator|new
name|scannerGetList_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface
operator|.
name|scannerGetList
argument_list|(
name|args
operator|.
name|id
argument_list|,
name|args
operator|.
name|nbRows
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|result
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerClose
parameter_list|<
name|I
extends|extends
name|Iface
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|ProcessFunction
argument_list|<
name|I
argument_list|,
name|scannerClose_args
argument_list|>
block|{
specifier|public
name|scannerClose
parameter_list|()
block|{
name|super
argument_list|(
literal|"scannerClose"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|scannerClose_args
name|getEmptyArgsInstance
parameter_list|()
block|{
return|return
operator|new
name|scannerClose_args
argument_list|()
return|;
block|}
specifier|protected
name|scannerClose_result
name|getResult
parameter_list|(
name|I
name|iface
parameter_list|,
name|scannerClose_args
name|args
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|scannerClose_result
name|result
init|=
operator|new
name|scannerClose_result
argument_list|()
decl_stmt|;
try|try
block|{
name|iface
operator|.
name|scannerClose
argument_list|(
name|args
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|result
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowOrBefore
parameter_list|<
name|I
extends|extends
name|Iface
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|ProcessFunction
argument_list|<
name|I
argument_list|,
name|getRowOrBefore_args
argument_list|>
block|{
specifier|public
name|getRowOrBefore
parameter_list|()
block|{
name|super
argument_list|(
literal|"getRowOrBefore"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|getRowOrBefore_args
name|getEmptyArgsInstance
parameter_list|()
block|{
return|return
operator|new
name|getRowOrBefore_args
argument_list|()
return|;
block|}
specifier|protected
name|getRowOrBefore_result
name|getResult
parameter_list|(
name|I
name|iface
parameter_list|,
name|getRowOrBefore_args
name|args
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|getRowOrBefore_result
name|result
init|=
operator|new
name|getRowOrBefore_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface
operator|.
name|getRowOrBefore
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|row
argument_list|,
name|args
operator|.
name|family
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRegionInfo
parameter_list|<
name|I
extends|extends
name|Iface
parameter_list|>
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|ProcessFunction
argument_list|<
name|I
argument_list|,
name|getRegionInfo_args
argument_list|>
block|{
specifier|public
name|getRegionInfo
parameter_list|()
block|{
name|super
argument_list|(
literal|"getRegionInfo"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|getRegionInfo_args
name|getEmptyArgsInstance
parameter_list|()
block|{
return|return
operator|new
name|getRegionInfo_args
argument_list|()
return|;
block|}
specifier|protected
name|getRegionInfo_result
name|getResult
parameter_list|(
name|I
name|iface
parameter_list|,
name|getRegionInfo_args
name|args
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|getRegionInfo_result
name|result
init|=
operator|new
name|getRegionInfo_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface
operator|.
name|getRegionInfo
argument_list|(
name|args
operator|.
name|row
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|enableTable_args
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|enableTable_args
argument_list|,
name|enableTable_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"enableTable_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|enableTable_argsStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|enableTable_argsTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * name of the table      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
comment|/**        * name of the table        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Bytes"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|enableTable_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|enableTable_args
parameter_list|()
block|{     }
specifier|public
name|enableTable_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|enableTable_args
parameter_list|(
name|enableTable_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
block|}
specifier|public
name|enableTable_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|enableTable_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * name of the table      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|==
literal|null
condition|?
literal|null
else|:
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of the table      */
specifier|public
name|enableTable_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|tableName
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|enableTable_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|enableTable_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|enableTable_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|enableTable_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|enableTable_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|enableTable_args
name|typedOther
init|=
operator|(
name|enableTable_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"enableTable_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|enableTable_argsStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|enableTable_argsStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|enableTable_argsStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|enableTable_argsStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|enableTable_args
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|enableTable_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|enableTable_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|enableTable_argsTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|enableTable_argsTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|enableTable_argsTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|enableTable_argsTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|enableTable_args
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|enableTable_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|enableTable_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|enableTable_result
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|enableTable_result
argument_list|,
name|enableTable_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"enableTable_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|enableTable_resultStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|enableTable_resultTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IOError
name|io
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|enableTable_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|enableTable_result
parameter_list|()
block|{     }
specifier|public
name|enableTable_result
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|enableTable_result
parameter_list|(
name|enableTable_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|enableTable_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|enableTable_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|enableTable_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|enableTable_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|enableTable_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|enableTable_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|enableTable_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|enableTable_result
name|typedOther
init|=
operator|(
name|enableTable_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"enableTable_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|enableTable_resultStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|enableTable_resultStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|enableTable_resultStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|enableTable_resultStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|enableTable_result
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|enableTable_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|enableTable_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|enableTable_resultTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|enableTable_resultTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|enableTable_resultTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|enableTable_resultTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|enableTable_result
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|enableTable_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|enableTable_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|disableTable_args
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|disableTable_args
argument_list|,
name|disableTable_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"disableTable_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|disableTable_argsStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|disableTable_argsTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * name of the table      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
comment|/**        * name of the table        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Bytes"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|disableTable_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|disableTable_args
parameter_list|()
block|{     }
specifier|public
name|disableTable_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|disableTable_args
parameter_list|(
name|disableTable_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
block|}
specifier|public
name|disableTable_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|disableTable_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * name of the table      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|==
literal|null
condition|?
literal|null
else|:
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of the table      */
specifier|public
name|disableTable_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|tableName
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|disableTable_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|disableTable_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|disableTable_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|disableTable_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|disableTable_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|disableTable_args
name|typedOther
init|=
operator|(
name|disableTable_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"disableTable_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|disableTable_argsStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|disableTable_argsStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|disableTable_argsStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|disableTable_argsStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|disableTable_args
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|disableTable_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|disableTable_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|disableTable_argsTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|disableTable_argsTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|disableTable_argsTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|disableTable_argsTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|disableTable_args
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|disableTable_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|disableTable_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|disableTable_result
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|disableTable_result
argument_list|,
name|disableTable_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"disableTable_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|disableTable_resultStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|disableTable_resultTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IOError
name|io
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|disableTable_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|disableTable_result
parameter_list|()
block|{     }
specifier|public
name|disableTable_result
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|disableTable_result
parameter_list|(
name|disableTable_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|disableTable_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|disableTable_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|disableTable_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|disableTable_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|disableTable_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|disableTable_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|disableTable_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|disableTable_result
name|typedOther
init|=
operator|(
name|disableTable_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"disableTable_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|disableTable_resultStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|disableTable_resultStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|disableTable_resultStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|disableTable_resultStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|disableTable_result
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|disableTable_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|disableTable_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|disableTable_resultTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|disableTable_resultTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|disableTable_resultTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|disableTable_resultTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|disableTable_result
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|disableTable_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|disableTable_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|isTableEnabled_args
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|isTableEnabled_args
argument_list|,
name|isTableEnabled_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"isTableEnabled_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|isTableEnabled_argsStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|isTableEnabled_argsTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * name of the table to check      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
comment|/**        * name of the table to check        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Bytes"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|isTableEnabled_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|isTableEnabled_args
parameter_list|()
block|{     }
specifier|public
name|isTableEnabled_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|isTableEnabled_args
parameter_list|(
name|isTableEnabled_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
block|}
specifier|public
name|isTableEnabled_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|isTableEnabled_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * name of the table to check      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|==
literal|null
condition|?
literal|null
else|:
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of the table to check      */
specifier|public
name|isTableEnabled_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|tableName
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|isTableEnabled_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|isTableEnabled_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|isTableEnabled_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|isTableEnabled_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|isTableEnabled_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|isTableEnabled_args
name|typedOther
init|=
operator|(
name|isTableEnabled_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"isTableEnabled_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|isTableEnabled_argsStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|isTableEnabled_argsStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|isTableEnabled_argsStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|isTableEnabled_argsStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|isTableEnabled_args
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|isTableEnabled_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|isTableEnabled_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|isTableEnabled_argsTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|isTableEnabled_argsTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|isTableEnabled_argsTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|isTableEnabled_argsTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|isTableEnabled_args
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|isTableEnabled_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|isTableEnabled_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|isTableEnabled_result
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|isTableEnabled_result
argument_list|,
name|isTableEnabled_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"isTableEnabled_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|BOOL
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|isTableEnabled_resultStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|isTableEnabled_resultTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|success
decl_stmt|;
comment|// required
specifier|public
name|IOError
name|io
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__SUCCESS_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|BOOL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|isTableEnabled_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|isTableEnabled_result
parameter_list|()
block|{     }
specifier|public
name|isTableEnabled_result
parameter_list|(
name|boolean
name|success
parameter_list|,
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|isTableEnabled_result
parameter_list|(
name|isTableEnabled_result
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|other
operator|.
name|success
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|isTableEnabled_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|isTableEnabled_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|setSuccessIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|isTableEnabled_result
name|setSuccess
parameter_list|(
name|boolean
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|isTableEnabled_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|Boolean
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSuccess
argument_list|()
argument_list|)
return|;
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|isTableEnabled_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|isTableEnabled_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|isTableEnabled_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|success
operator|!=
name|that
operator|.
name|success
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|isTableEnabled_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|isTableEnabled_result
name|typedOther
init|=
operator|(
name|isTableEnabled_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"isTableEnabled_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|isTableEnabled_resultStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|isTableEnabled_resultStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|isTableEnabled_resultStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|isTableEnabled_resultStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|isTableEnabled_result
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|isTableEnabled_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|BOOL
condition|)
block|{
name|struct
operator|.
name|success
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|isTableEnabled_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBool
argument_list|(
name|struct
operator|.
name|success
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|isTableEnabled_resultTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|isTableEnabled_resultTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|isTableEnabled_resultTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|isTableEnabled_resultTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|isTableEnabled_result
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|isTableEnabled_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBool
argument_list|(
name|struct
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|isTableEnabled_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|success
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|compact_args
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|compact_args
argument_list|,
name|compact_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"compact_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|TABLE_NAME_OR_REGION_NAME_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"tableNameOrRegionName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|compact_argsStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|compact_argsTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ByteBuffer
name|tableNameOrRegionName
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
name|TABLE_NAME_OR_REGION_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableNameOrRegionName"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME_OR_REGION_NAME
return|return
name|TABLE_NAME_OR_REGION_NAME
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME_OR_REGION_NAME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"tableNameOrRegionName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Bytes"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|compact_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|compact_args
parameter_list|()
block|{     }
specifier|public
name|compact_args
parameter_list|(
name|ByteBuffer
name|tableNameOrRegionName
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableNameOrRegionName
operator|=
name|tableNameOrRegionName
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|compact_args
parameter_list|(
name|compact_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetTableNameOrRegionName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableNameOrRegionName
operator|=
name|other
operator|.
name|tableNameOrRegionName
expr_stmt|;
block|}
block|}
specifier|public
name|compact_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|compact_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableNameOrRegionName
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|byte
index|[]
name|getTableNameOrRegionName
parameter_list|()
block|{
name|setTableNameOrRegionName
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableNameOrRegionName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableNameOrRegionName
operator|==
literal|null
condition|?
literal|null
else|:
name|tableNameOrRegionName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForTableNameOrRegionName
parameter_list|()
block|{
return|return
name|tableNameOrRegionName
return|;
block|}
specifier|public
name|compact_args
name|setTableNameOrRegionName
parameter_list|(
name|byte
index|[]
name|tableNameOrRegionName
parameter_list|)
block|{
name|setTableNameOrRegionName
argument_list|(
name|tableNameOrRegionName
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableNameOrRegionName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|compact_args
name|setTableNameOrRegionName
parameter_list|(
name|ByteBuffer
name|tableNameOrRegionName
parameter_list|)
block|{
name|this
operator|.
name|tableNameOrRegionName
operator|=
name|tableNameOrRegionName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableNameOrRegionName
parameter_list|()
block|{
name|this
operator|.
name|tableNameOrRegionName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableNameOrRegionName is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableNameOrRegionName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableNameOrRegionName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameOrRegionNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableNameOrRegionName
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME_OR_REGION_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableNameOrRegionName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableNameOrRegionName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME_OR_REGION_NAME
case|:
return|return
name|getTableNameOrRegionName
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME_OR_REGION_NAME
case|:
return|return
name|isSetTableNameOrRegionName
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|compact_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|compact_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|compact_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableNameOrRegionName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableNameOrRegionName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableNameOrRegionName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableNameOrRegionName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableNameOrRegionName
operator|||
name|that_present_tableNameOrRegionName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableNameOrRegionName
operator|&&
name|that_present_tableNameOrRegionName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableNameOrRegionName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableNameOrRegionName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|compact_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|compact_args
name|typedOther
init|=
operator|(
name|compact_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableNameOrRegionName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableNameOrRegionName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableNameOrRegionName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableNameOrRegionName
argument_list|,
name|typedOther
operator|.
name|tableNameOrRegionName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"compact_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableNameOrRegionName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableNameOrRegionName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableNameOrRegionName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|compact_argsStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|compact_argsStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|compact_argsStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|compact_argsStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|compact_args
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|compact_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME_OR_REGION_NAME
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|tableNameOrRegionName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameOrRegionNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|compact_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|tableNameOrRegionName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_OR_REGION_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableNameOrRegionName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|compact_argsTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|compact_argsTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|compact_argsTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|compact_argsTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|compact_args
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|compact_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableNameOrRegionName
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableNameOrRegionName
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableNameOrRegionName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|compact_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|tableNameOrRegionName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameOrRegionNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|compact_result
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|compact_result
argument_list|,
name|compact_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"compact_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|compact_resultStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|compact_resultTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IOError
name|io
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|compact_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|compact_result
parameter_list|()
block|{     }
specifier|public
name|compact_result
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|compact_result
parameter_list|(
name|compact_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|compact_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|compact_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|compact_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|compact_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|compact_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|compact_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|compact_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|compact_result
name|typedOther
init|=
operator|(
name|compact_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"compact_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|compact_resultStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|compact_resultStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|compact_resultStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|compact_resultStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|compact_result
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|compact_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|compact_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|compact_resultTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|compact_resultTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|compact_resultTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|compact_resultTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|compact_result
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|compact_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|compact_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|majorCompact_args
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|majorCompact_args
argument_list|,
name|majorCompact_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"majorCompact_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|TABLE_NAME_OR_REGION_NAME_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"tableNameOrRegionName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|majorCompact_argsStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|majorCompact_argsTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ByteBuffer
name|tableNameOrRegionName
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
name|TABLE_NAME_OR_REGION_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableNameOrRegionName"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME_OR_REGION_NAME
return|return
name|TABLE_NAME_OR_REGION_NAME
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME_OR_REGION_NAME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"tableNameOrRegionName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Bytes"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|majorCompact_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|majorCompact_args
parameter_list|()
block|{     }
specifier|public
name|majorCompact_args
parameter_list|(
name|ByteBuffer
name|tableNameOrRegionName
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableNameOrRegionName
operator|=
name|tableNameOrRegionName
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|majorCompact_args
parameter_list|(
name|majorCompact_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetTableNameOrRegionName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableNameOrRegionName
operator|=
name|other
operator|.
name|tableNameOrRegionName
expr_stmt|;
block|}
block|}
specifier|public
name|majorCompact_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|majorCompact_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableNameOrRegionName
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|byte
index|[]
name|getTableNameOrRegionName
parameter_list|()
block|{
name|setTableNameOrRegionName
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableNameOrRegionName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableNameOrRegionName
operator|==
literal|null
condition|?
literal|null
else|:
name|tableNameOrRegionName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForTableNameOrRegionName
parameter_list|()
block|{
return|return
name|tableNameOrRegionName
return|;
block|}
specifier|public
name|majorCompact_args
name|setTableNameOrRegionName
parameter_list|(
name|byte
index|[]
name|tableNameOrRegionName
parameter_list|)
block|{
name|setTableNameOrRegionName
argument_list|(
name|tableNameOrRegionName
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableNameOrRegionName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|majorCompact_args
name|setTableNameOrRegionName
parameter_list|(
name|ByteBuffer
name|tableNameOrRegionName
parameter_list|)
block|{
name|this
operator|.
name|tableNameOrRegionName
operator|=
name|tableNameOrRegionName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableNameOrRegionName
parameter_list|()
block|{
name|this
operator|.
name|tableNameOrRegionName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableNameOrRegionName is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableNameOrRegionName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableNameOrRegionName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameOrRegionNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableNameOrRegionName
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME_OR_REGION_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableNameOrRegionName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableNameOrRegionName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME_OR_REGION_NAME
case|:
return|return
name|getTableNameOrRegionName
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME_OR_REGION_NAME
case|:
return|return
name|isSetTableNameOrRegionName
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|majorCompact_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|majorCompact_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|majorCompact_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableNameOrRegionName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableNameOrRegionName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableNameOrRegionName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableNameOrRegionName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableNameOrRegionName
operator|||
name|that_present_tableNameOrRegionName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableNameOrRegionName
operator|&&
name|that_present_tableNameOrRegionName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableNameOrRegionName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableNameOrRegionName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|majorCompact_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|majorCompact_args
name|typedOther
init|=
operator|(
name|majorCompact_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableNameOrRegionName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableNameOrRegionName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableNameOrRegionName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableNameOrRegionName
argument_list|,
name|typedOther
operator|.
name|tableNameOrRegionName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"majorCompact_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableNameOrRegionName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableNameOrRegionName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableNameOrRegionName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|majorCompact_argsStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|majorCompact_argsStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|majorCompact_argsStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|majorCompact_argsStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|majorCompact_args
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|majorCompact_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME_OR_REGION_NAME
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|tableNameOrRegionName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameOrRegionNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|majorCompact_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|tableNameOrRegionName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_OR_REGION_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableNameOrRegionName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|majorCompact_argsTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|majorCompact_argsTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|majorCompact_argsTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|majorCompact_argsTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|majorCompact_args
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|majorCompact_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableNameOrRegionName
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableNameOrRegionName
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableNameOrRegionName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|majorCompact_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|tableNameOrRegionName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameOrRegionNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|majorCompact_result
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|majorCompact_result
argument_list|,
name|majorCompact_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"majorCompact_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|majorCompact_resultStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|majorCompact_resultTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IOError
name|io
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|majorCompact_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|majorCompact_result
parameter_list|()
block|{     }
specifier|public
name|majorCompact_result
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|majorCompact_result
parameter_list|(
name|majorCompact_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|majorCompact_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|majorCompact_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|majorCompact_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|majorCompact_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|majorCompact_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|majorCompact_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|majorCompact_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|majorCompact_result
name|typedOther
init|=
operator|(
name|majorCompact_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"majorCompact_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|majorCompact_resultStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|majorCompact_resultStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|majorCompact_resultStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|majorCompact_resultStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|majorCompact_result
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|majorCompact_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|majorCompact_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|majorCompact_resultTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|majorCompact_resultTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|majorCompact_resultTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|majorCompact_resultTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|majorCompact_result
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|majorCompact_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|majorCompact_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|getTableNames_args
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|getTableNames_args
argument_list|,
name|getTableNames_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"getTableNames_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|getTableNames_argsStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|getTableNames_argsTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{ ;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|getTableNames_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|getTableNames_args
parameter_list|()
block|{     }
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|getTableNames_args
parameter_list|(
name|getTableNames_args
name|other
parameter_list|)
block|{     }
specifier|public
name|getTableNames_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|getTableNames_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{     }
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{       }
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{       }
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{       }
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|getTableNames_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|getTableNames_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|getTableNames_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|getTableNames_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|getTableNames_args
name|typedOther
init|=
operator|(
name|getTableNames_args
operator|)
name|other
decl_stmt|;
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getTableNames_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getTableNames_argsStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getTableNames_argsStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getTableNames_argsStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getTableNames_argsStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|getTableNames_args
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|getTableNames_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|getTableNames_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getTableNames_argsTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getTableNames_argsTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getTableNames_argsTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getTableNames_argsTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|getTableNames_args
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getTableNames_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getTableNames_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|getTableNames_result
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|getTableNames_result
argument_list|,
name|getTableNames_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"getTableNames_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|getTableNames_resultStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|getTableNames_resultTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|success
decl_stmt|;
comment|// required
specifier|public
name|IOError
name|io
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|getTableNames_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|getTableNames_result
parameter_list|()
block|{     }
specifier|public
name|getTableNames_result
parameter_list|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|success
parameter_list|,
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|getTableNames_result
parameter_list|(
name|getTableNames_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|__this__success
init|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ByteBuffer
name|other_element
range|:
name|other
operator|.
name|success
control|)
block|{
name|__this__success
operator|.
name|add
argument_list|(
name|other_element
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|=
name|__this__success
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|getTableNames_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|getTableNames_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|ByteBuffer
argument_list|>
name|getSuccessIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|success
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSuccess
parameter_list|(
name|ByteBuffer
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|getTableNames_result
name|setSuccess
parameter_list|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|getTableNames_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|getTableNames_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|getTableNames_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|getTableNames_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|getTableNames_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|getTableNames_result
name|typedOther
init|=
operator|(
name|getTableNames_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getTableNames_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getTableNames_resultStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getTableNames_resultStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getTableNames_resultStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getTableNames_resultStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|getTableNames_result
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|getTableNames_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list26
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|(
name|_list26
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i27
init|=
literal|0
init|;
name|_i27
operator|<
name|_list26
operator|.
name|size
condition|;
operator|++
name|_i27
control|)
block|{
name|ByteBuffer
name|_elem28
decl_stmt|;
comment|// optional
name|_elem28
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem28
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|getTableNames_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|success
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|struct
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ByteBuffer
name|_iter29
range|:
name|struct
operator|.
name|success
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter29
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getTableNames_resultTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getTableNames_resultTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getTableNames_resultTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getTableNames_resultTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|getTableNames_result
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getTableNames_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ByteBuffer
name|_iter30
range|:
name|struct
operator|.
name|success
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter30
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getTableNames_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list31
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|(
name|_list31
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i32
init|=
literal|0
init|;
name|_i32
operator|<
name|_list31
operator|.
name|size
condition|;
operator|++
name|_i32
control|)
block|{
name|ByteBuffer
name|_elem33
decl_stmt|;
comment|// optional
name|_elem33
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem33
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|getColumnDescriptors_args
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|getColumnDescriptors_args
argument_list|,
name|getColumnDescriptors_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"getColumnDescriptors_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|getColumnDescriptors_argsStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|getColumnDescriptors_argsTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * table name      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
comment|/**        * table name        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|getColumnDescriptors_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|getColumnDescriptors_args
parameter_list|()
block|{     }
specifier|public
name|getColumnDescriptors_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|getColumnDescriptors_args
parameter_list|(
name|getColumnDescriptors_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
block|}
specifier|public
name|getColumnDescriptors_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|getColumnDescriptors_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * table name      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|==
literal|null
condition|?
literal|null
else|:
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * table name      */
specifier|public
name|getColumnDescriptors_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|tableName
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|getColumnDescriptors_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|getColumnDescriptors_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|getColumnDescriptors_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|getColumnDescriptors_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|getColumnDescriptors_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|getColumnDescriptors_args
name|typedOther
init|=
operator|(
name|getColumnDescriptors_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getColumnDescriptors_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getColumnDescriptors_argsStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getColumnDescriptors_argsStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getColumnDescriptors_argsStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getColumnDescriptors_argsStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|getColumnDescriptors_args
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|getColumnDescriptors_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|getColumnDescriptors_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getColumnDescriptors_argsTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getColumnDescriptors_argsTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getColumnDescriptors_argsTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getColumnDescriptors_argsTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|getColumnDescriptors_args
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getColumnDescriptors_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getColumnDescriptors_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|getColumnDescriptors_result
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|getColumnDescriptors_result
argument_list|,
name|getColumnDescriptors_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"getColumnDescriptors_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|getColumnDescriptors_resultStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|getColumnDescriptors_resultTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ColumnDescriptor
argument_list|>
name|success
decl_stmt|;
comment|// required
specifier|public
name|IOError
name|io
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|MapMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|ColumnDescriptor
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|getColumnDescriptors_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|getColumnDescriptors_result
parameter_list|()
block|{     }
specifier|public
name|getColumnDescriptors_result
parameter_list|(
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ColumnDescriptor
argument_list|>
name|success
parameter_list|,
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|getColumnDescriptors_result
parameter_list|(
name|getColumnDescriptors_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ColumnDescriptor
argument_list|>
name|__this__success
init|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ColumnDescriptor
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ColumnDescriptor
argument_list|>
name|other_element
range|:
name|other
operator|.
name|success
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ByteBuffer
name|other_element_key
init|=
name|other_element
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ColumnDescriptor
name|other_element_value
init|=
name|other_element
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ByteBuffer
name|__this__success_copy_key
init|=
name|other_element_key
decl_stmt|;
name|ColumnDescriptor
name|__this__success_copy_value
init|=
operator|new
name|ColumnDescriptor
argument_list|(
name|other_element_value
argument_list|)
decl_stmt|;
name|__this__success
operator|.
name|put
argument_list|(
name|__this__success_copy_key
argument_list|,
name|__this__success_copy_value
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|=
name|__this__success
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|getColumnDescriptors_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|getColumnDescriptors_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|putToSuccess
parameter_list|(
name|ByteBuffer
name|key
parameter_list|,
name|ColumnDescriptor
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ColumnDescriptor
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ColumnDescriptor
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|getColumnDescriptors_result
name|setSuccess
parameter_list|(
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ColumnDescriptor
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|getColumnDescriptors_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ColumnDescriptor
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|getColumnDescriptors_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|getColumnDescriptors_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|getColumnDescriptors_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|getColumnDescriptors_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|getColumnDescriptors_result
name|typedOther
init|=
operator|(
name|getColumnDescriptors_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getColumnDescriptors_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getColumnDescriptors_resultStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getColumnDescriptors_resultStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getColumnDescriptors_resultStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getColumnDescriptors_resultStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|getColumnDescriptors_result
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|getColumnDescriptors_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map34
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|success
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ColumnDescriptor
argument_list|>
argument_list|(
literal|2
operator|*
name|_map34
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i35
init|=
literal|0
init|;
name|_i35
operator|<
name|_map34
operator|.
name|size
condition|;
operator|++
name|_i35
control|)
block|{
name|ByteBuffer
name|_key36
decl_stmt|;
comment|// required
name|ColumnDescriptor
name|_val37
decl_stmt|;
comment|// required
name|_key36
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val37
operator|=
operator|new
name|ColumnDescriptor
argument_list|()
expr_stmt|;
name|_val37
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|success
operator|.
name|put
argument_list|(
name|_key36
argument_list|,
name|_val37
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|getColumnDescriptors_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|success
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|struct
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ColumnDescriptor
argument_list|>
name|_iter38
range|:
name|struct
operator|.
name|success
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter38
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|_iter38
operator|.
name|getValue
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getColumnDescriptors_resultTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getColumnDescriptors_resultTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getColumnDescriptors_resultTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getColumnDescriptors_resultTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|getColumnDescriptors_result
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getColumnDescriptors_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ColumnDescriptor
argument_list|>
name|_iter39
range|:
name|struct
operator|.
name|success
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter39
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|_iter39
operator|.
name|getValue
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getColumnDescriptors_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map40
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|success
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ColumnDescriptor
argument_list|>
argument_list|(
literal|2
operator|*
name|_map40
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i41
init|=
literal|0
init|;
name|_i41
operator|<
name|_map40
operator|.
name|size
condition|;
operator|++
name|_i41
control|)
block|{
name|ByteBuffer
name|_key42
decl_stmt|;
comment|// required
name|ColumnDescriptor
name|_val43
decl_stmt|;
comment|// required
name|_key42
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val43
operator|=
operator|new
name|ColumnDescriptor
argument_list|()
expr_stmt|;
name|_val43
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|success
operator|.
name|put
argument_list|(
name|_key42
argument_list|,
name|_val43
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|getTableRegions_args
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|getTableRegions_args
argument_list|,
name|getTableRegions_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"getTableRegions_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|getTableRegions_argsStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|getTableRegions_argsTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * table name      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
comment|/**        * table name        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|getTableRegions_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|getTableRegions_args
parameter_list|()
block|{     }
specifier|public
name|getTableRegions_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|getTableRegions_args
parameter_list|(
name|getTableRegions_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
block|}
specifier|public
name|getTableRegions_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|getTableRegions_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * table name      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|==
literal|null
condition|?
literal|null
else|:
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * table name      */
specifier|public
name|getTableRegions_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|tableName
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|getTableRegions_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|getTableRegions_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|getTableRegions_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|getTableRegions_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|getTableRegions_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|getTableRegions_args
name|typedOther
init|=
operator|(
name|getTableRegions_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getTableRegions_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getTableRegions_argsStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getTableRegions_argsStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getTableRegions_argsStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getTableRegions_argsStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|getTableRegions_args
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|getTableRegions_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|getTableRegions_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getTableRegions_argsTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getTableRegions_argsTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getTableRegions_argsTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getTableRegions_argsTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|getTableRegions_args
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getTableRegions_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getTableRegions_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|getTableRegions_result
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|getTableRegions_result
argument_list|,
name|getTableRegions_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"getTableRegions_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|getTableRegions_resultStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|getTableRegions_resultTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRegionInfo
argument_list|>
name|success
decl_stmt|;
comment|// required
specifier|public
name|IOError
name|io
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|TRegionInfo
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|getTableRegions_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|getTableRegions_result
parameter_list|()
block|{     }
specifier|public
name|getTableRegions_result
parameter_list|(
name|List
argument_list|<
name|TRegionInfo
argument_list|>
name|success
parameter_list|,
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|getTableRegions_result
parameter_list|(
name|getTableRegions_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|TRegionInfo
argument_list|>
name|__this__success
init|=
operator|new
name|ArrayList
argument_list|<
name|TRegionInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TRegionInfo
name|other_element
range|:
name|other
operator|.
name|success
control|)
block|{
name|__this__success
operator|.
name|add
argument_list|(
operator|new
name|TRegionInfo
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|=
name|__this__success
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|getTableRegions_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|getTableRegions_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|TRegionInfo
argument_list|>
name|getSuccessIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|success
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSuccess
parameter_list|(
name|TRegionInfo
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TRegionInfo
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRegionInfo
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|getTableRegions_result
name|setSuccess
parameter_list|(
name|List
argument_list|<
name|TRegionInfo
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|getTableRegions_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|List
argument_list|<
name|TRegionInfo
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|getTableRegions_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|getTableRegions_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|getTableRegions_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|getTableRegions_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|getTableRegions_result
name|typedOther
init|=
operator|(
name|getTableRegions_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getTableRegions_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getTableRegions_resultStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getTableRegions_resultStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getTableRegions_resultStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getTableRegions_resultStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|getTableRegions_result
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|getTableRegions_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list44
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TRegionInfo
argument_list|>
argument_list|(
name|_list44
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i45
init|=
literal|0
init|;
name|_i45
operator|<
name|_list44
operator|.
name|size
condition|;
operator|++
name|_i45
control|)
block|{
name|TRegionInfo
name|_elem46
decl_stmt|;
comment|// optional
name|_elem46
operator|=
operator|new
name|TRegionInfo
argument_list|()
expr_stmt|;
name|_elem46
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem46
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|getTableRegions_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|success
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|struct
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TRegionInfo
name|_iter47
range|:
name|struct
operator|.
name|success
control|)
block|{
name|_iter47
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getTableRegions_resultTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getTableRegions_resultTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getTableRegions_resultTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getTableRegions_resultTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|getTableRegions_result
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getTableRegions_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TRegionInfo
name|_iter48
range|:
name|struct
operator|.
name|success
control|)
block|{
name|_iter48
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getTableRegions_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list49
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TRegionInfo
argument_list|>
argument_list|(
name|_list49
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i50
init|=
literal|0
init|;
name|_i50
operator|<
name|_list49
operator|.
name|size
condition|;
operator|++
name|_i50
control|)
block|{
name|TRegionInfo
name|_elem51
decl_stmt|;
comment|// optional
name|_elem51
operator|=
operator|new
name|TRegionInfo
argument_list|()
expr_stmt|;
name|_elem51
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem51
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|createTable_args
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|createTable_args
argument_list|,
name|createTable_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"createTable_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|COLUMN_FAMILIES_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"columnFamilies"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|createTable_argsStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|createTable_argsTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * name of table to create      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|// required
comment|/**      * list of column family descriptors      */
specifier|public
name|List
argument_list|<
name|ColumnDescriptor
argument_list|>
name|columnFamilies
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
comment|/**        * name of table to create        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|,
comment|/**        * list of column family descriptors        */
name|COLUMN_FAMILIES
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"columnFamilies"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
case|case
literal|2
case|:
comment|// COLUMN_FAMILIES
return|return
name|COLUMN_FAMILIES
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|COLUMN_FAMILIES
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"columnFamilies"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|ColumnDescriptor
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|createTable_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|createTable_args
parameter_list|()
block|{     }
specifier|public
name|createTable_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ColumnDescriptor
argument_list|>
name|columnFamilies
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|columnFamilies
operator|=
name|columnFamilies
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|createTable_args
parameter_list|(
name|createTable_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetColumnFamilies
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|ColumnDescriptor
argument_list|>
name|__this__columnFamilies
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnDescriptor
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ColumnDescriptor
name|other_element
range|:
name|other
operator|.
name|columnFamilies
control|)
block|{
name|__this__columnFamilies
operator|.
name|add
argument_list|(
operator|new
name|ColumnDescriptor
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|columnFamilies
operator|=
name|__this__columnFamilies
expr_stmt|;
block|}
block|}
specifier|public
name|createTable_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|createTable_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|columnFamilies
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * name of table to create      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|==
literal|null
condition|?
literal|null
else|:
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of table to create      */
specifier|public
name|createTable_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|tableName
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|createTable_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getColumnFamiliesSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|columnFamilies
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|columnFamilies
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|ColumnDescriptor
argument_list|>
name|getColumnFamiliesIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|columnFamilies
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|columnFamilies
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToColumnFamilies
parameter_list|(
name|ColumnDescriptor
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|columnFamilies
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|columnFamilies
operator|=
operator|new
name|ArrayList
argument_list|<
name|ColumnDescriptor
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|columnFamilies
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
comment|/**      * list of column family descriptors      */
specifier|public
name|List
argument_list|<
name|ColumnDescriptor
argument_list|>
name|getColumnFamilies
parameter_list|()
block|{
return|return
name|this
operator|.
name|columnFamilies
return|;
block|}
comment|/**      * list of column family descriptors      */
specifier|public
name|createTable_args
name|setColumnFamilies
parameter_list|(
name|List
argument_list|<
name|ColumnDescriptor
argument_list|>
name|columnFamilies
parameter_list|)
block|{
name|this
operator|.
name|columnFamilies
operator|=
name|columnFamilies
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetColumnFamilies
parameter_list|()
block|{
name|this
operator|.
name|columnFamilies
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field columnFamilies is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetColumnFamilies
parameter_list|()
block|{
return|return
name|this
operator|.
name|columnFamilies
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setColumnFamiliesIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|columnFamilies
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|COLUMN_FAMILIES
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetColumnFamilies
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setColumnFamilies
argument_list|(
operator|(
name|List
argument_list|<
name|ColumnDescriptor
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
case|case
name|COLUMN_FAMILIES
case|:
return|return
name|getColumnFamilies
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
case|case
name|COLUMN_FAMILIES
case|:
return|return
name|isSetColumnFamilies
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|createTable_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|createTable_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|createTable_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_columnFamilies
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetColumnFamilies
argument_list|()
decl_stmt|;
name|boolean
name|that_present_columnFamilies
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetColumnFamilies
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_columnFamilies
operator|||
name|that_present_columnFamilies
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_columnFamilies
operator|&&
name|that_present_columnFamilies
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|columnFamilies
operator|.
name|equals
argument_list|(
name|that
operator|.
name|columnFamilies
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|createTable_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|createTable_args
name|typedOther
init|=
operator|(
name|createTable_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetColumnFamilies
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetColumnFamilies
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetColumnFamilies
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|columnFamilies
argument_list|,
name|typedOther
operator|.
name|columnFamilies
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"createTable_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"columnFamilies:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|columnFamilies
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|columnFamilies
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|createTable_argsStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|createTable_argsStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|createTable_argsStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|createTable_argsStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|createTable_args
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|createTable_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// COLUMN_FAMILIES
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list52
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|columnFamilies
operator|=
operator|new
name|ArrayList
argument_list|<
name|ColumnDescriptor
argument_list|>
argument_list|(
name|_list52
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i53
init|=
literal|0
init|;
name|_i53
operator|<
name|_list52
operator|.
name|size
condition|;
operator|++
name|_i53
control|)
block|{
name|ColumnDescriptor
name|_elem54
decl_stmt|;
comment|// optional
name|_elem54
operator|=
operator|new
name|ColumnDescriptor
argument_list|()
expr_stmt|;
name|_elem54
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|columnFamilies
operator|.
name|add
argument_list|(
name|_elem54
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setColumnFamiliesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|createTable_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|columnFamilies
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|COLUMN_FAMILIES_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|struct
operator|.
name|columnFamilies
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ColumnDescriptor
name|_iter55
range|:
name|struct
operator|.
name|columnFamilies
control|)
block|{
name|_iter55
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|createTable_argsTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|createTable_argsTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|createTable_argsTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|createTable_argsTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|createTable_args
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|createTable_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetColumnFamilies
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetColumnFamilies
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|columnFamilies
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ColumnDescriptor
name|_iter56
range|:
name|struct
operator|.
name|columnFamilies
control|)
block|{
name|_iter56
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|createTable_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list57
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|columnFamilies
operator|=
operator|new
name|ArrayList
argument_list|<
name|ColumnDescriptor
argument_list|>
argument_list|(
name|_list57
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i58
init|=
literal|0
init|;
name|_i58
operator|<
name|_list57
operator|.
name|size
condition|;
operator|++
name|_i58
control|)
block|{
name|ColumnDescriptor
name|_elem59
decl_stmt|;
comment|// optional
name|_elem59
operator|=
operator|new
name|ColumnDescriptor
argument_list|()
expr_stmt|;
name|_elem59
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|columnFamilies
operator|.
name|add
argument_list|(
name|_elem59
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setColumnFamiliesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|createTable_result
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|createTable_result
argument_list|,
name|createTable_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"createTable_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|IA_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"ia"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|EXIST_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"exist"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|createTable_resultStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|createTable_resultTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IOError
name|io
decl_stmt|;
comment|// required
specifier|public
name|IllegalArgument
name|ia
decl_stmt|;
comment|// required
specifier|public
name|AlreadyExists
name|exist
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|,
name|IA
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"ia"
argument_list|)
block|,
name|EXIST
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"exist"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
case|case
literal|2
case|:
comment|// IA
return|return
name|IA
return|;
case|case
literal|3
case|:
comment|// EXIST
return|return
name|EXIST
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IA
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"ia"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|EXIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"exist"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|createTable_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|createTable_result
parameter_list|()
block|{     }
specifier|public
name|createTable_result
parameter_list|(
name|IOError
name|io
parameter_list|,
name|IllegalArgument
name|ia
parameter_list|,
name|AlreadyExists
name|exist
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|this
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
name|this
operator|.
name|exist
operator|=
name|exist
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|createTable_result
parameter_list|(
name|createTable_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetIa
argument_list|()
condition|)
block|{
name|this
operator|.
name|ia
operator|=
operator|new
name|IllegalArgument
argument_list|(
name|other
operator|.
name|ia
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetExist
argument_list|()
condition|)
block|{
name|this
operator|.
name|exist
operator|=
operator|new
name|AlreadyExists
argument_list|(
name|other
operator|.
name|exist
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|createTable_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|createTable_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|ia
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|exist
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|createTable_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|IllegalArgument
name|getIa
parameter_list|()
block|{
return|return
name|this
operator|.
name|ia
return|;
block|}
specifier|public
name|createTable_result
name|setIa
parameter_list|(
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|this
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIa
parameter_list|()
block|{
name|this
operator|.
name|ia
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field ia is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIa
parameter_list|()
block|{
return|return
name|this
operator|.
name|ia
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIaIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|ia
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|AlreadyExists
name|getExist
parameter_list|()
block|{
return|return
name|this
operator|.
name|exist
return|;
block|}
specifier|public
name|createTable_result
name|setExist
parameter_list|(
name|AlreadyExists
name|exist
parameter_list|)
block|{
name|this
operator|.
name|exist
operator|=
name|exist
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetExist
parameter_list|()
block|{
name|this
operator|.
name|exist
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field exist is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetExist
parameter_list|()
block|{
return|return
name|this
operator|.
name|exist
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setExistIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|exist
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IA
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIa
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIa
argument_list|(
operator|(
name|IllegalArgument
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|EXIST
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetExist
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setExist
argument_list|(
operator|(
name|AlreadyExists
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
case|case
name|IA
case|:
return|return
name|getIa
argument_list|()
return|;
case|case
name|EXIST
case|:
return|return
name|getExist
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
case|case
name|IA
case|:
return|return
name|isSetIa
argument_list|()
return|;
case|case
name|EXIST
case|:
return|return
name|isSetExist
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|createTable_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|createTable_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|createTable_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_ia
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIa
argument_list|()
decl_stmt|;
name|boolean
name|that_present_ia
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIa
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_ia
operator|||
name|that_present_ia
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_ia
operator|&&
name|that_present_ia
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|ia
operator|.
name|equals
argument_list|(
name|that
operator|.
name|ia
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_exist
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetExist
argument_list|()
decl_stmt|;
name|boolean
name|that_present_exist
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetExist
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_exist
operator|||
name|that_present_exist
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_exist
operator|&&
name|that_present_exist
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|exist
operator|.
name|equals
argument_list|(
name|that
operator|.
name|exist
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|createTable_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|createTable_result
name|typedOther
init|=
operator|(
name|createTable_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIa
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIa
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIa
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|ia
argument_list|,
name|typedOther
operator|.
name|ia
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetExist
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetExist
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetExist
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|exist
argument_list|,
name|typedOther
operator|.
name|exist
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"createTable_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"ia:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|ia
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|ia
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"exist:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|exist
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|exist
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|createTable_resultStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|createTable_resultStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|createTable_resultStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|createTable_resultStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|createTable_result
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|createTable_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// IA
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|ia
operator|=
operator|new
name|IllegalArgument
argument_list|()
expr_stmt|;
name|struct
operator|.
name|ia
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIaIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// EXIST
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|exist
operator|=
operator|new
name|AlreadyExists
argument_list|()
expr_stmt|;
name|struct
operator|.
name|exist
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setExistIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|createTable_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|ia
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IA_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|ia
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|exist
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|EXIST_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|exist
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|createTable_resultTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|createTable_resultTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|createTable_resultTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|createTable_resultTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|createTable_result
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|createTable_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIa
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetExist
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|3
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIa
argument_list|()
condition|)
block|{
name|struct
operator|.
name|ia
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetExist
argument_list|()
condition|)
block|{
name|struct
operator|.
name|exist
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|createTable_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|ia
operator|=
operator|new
name|IllegalArgument
argument_list|()
expr_stmt|;
name|struct
operator|.
name|ia
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIaIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|struct
operator|.
name|exist
operator|=
operator|new
name|AlreadyExists
argument_list|()
expr_stmt|;
name|struct
operator|.
name|exist
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setExistIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|deleteTable_args
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|deleteTable_args
argument_list|,
name|deleteTable_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"deleteTable_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|deleteTable_argsStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|deleteTable_argsTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * name of table to delete      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
comment|/**        * name of table to delete        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|deleteTable_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|deleteTable_args
parameter_list|()
block|{     }
specifier|public
name|deleteTable_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|deleteTable_args
parameter_list|(
name|deleteTable_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
block|}
specifier|public
name|deleteTable_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|deleteTable_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * name of table to delete      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|==
literal|null
condition|?
literal|null
else|:
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of table to delete      */
specifier|public
name|deleteTable_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|tableName
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|deleteTable_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|deleteTable_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|deleteTable_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|deleteTable_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|deleteTable_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|deleteTable_args
name|typedOther
init|=
operator|(
name|deleteTable_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"deleteTable_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|deleteTable_argsStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|deleteTable_argsStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|deleteTable_argsStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|deleteTable_argsStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|deleteTable_args
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|deleteTable_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|deleteTable_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|deleteTable_argsTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|deleteTable_argsTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|deleteTable_argsTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|deleteTable_argsTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|deleteTable_args
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|deleteTable_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|deleteTable_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|deleteTable_result
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|deleteTable_result
argument_list|,
name|deleteTable_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"deleteTable_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|deleteTable_resultStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|deleteTable_resultTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IOError
name|io
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|deleteTable_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|deleteTable_result
parameter_list|()
block|{     }
specifier|public
name|deleteTable_result
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|deleteTable_result
parameter_list|(
name|deleteTable_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|deleteTable_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|deleteTable_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|deleteTable_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|deleteTable_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|deleteTable_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|deleteTable_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|deleteTable_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|deleteTable_result
name|typedOther
init|=
operator|(
name|deleteTable_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"deleteTable_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|deleteTable_resultStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|deleteTable_resultStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|deleteTable_resultStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|deleteTable_resultStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|deleteTable_result
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|deleteTable_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|deleteTable_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|deleteTable_resultTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|deleteTable_resultTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|deleteTable_resultTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|deleteTable_resultTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|deleteTable_result
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|deleteTable_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|deleteTable_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|get_args
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|get_args
argument_list|,
name|get_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"get_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ROW_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"row"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|COLUMN_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"column"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ATTRIBUTES_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"attributes"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|get_argsStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|get_argsTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|// required
comment|/**      * row key      */
specifier|public
name|ByteBuffer
name|row
decl_stmt|;
comment|// required
comment|/**      * column name      */
specifier|public
name|ByteBuffer
name|column
decl_stmt|;
comment|// required
comment|/**      * Get attributes      */
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
comment|/**        * name of table        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|,
comment|/**        * row key        */
name|ROW
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"row"
argument_list|)
block|,
comment|/**        * column name        */
name|COLUMN
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"column"
argument_list|)
block|,
comment|/**        * Get attributes        */
name|ATTRIBUTES
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|,
literal|"attributes"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
case|case
literal|2
case|:
comment|// ROW
return|return
name|ROW
return|;
case|case
literal|3
case|:
comment|// COLUMN
return|return
name|COLUMN
return|;
case|case
literal|4
case|:
comment|// ATTRIBUTES
return|return
name|ATTRIBUTES
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ROW
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"row"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|COLUMN
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"column"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ATTRIBUTES
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"attributes"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|MapMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|get_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|get_args
parameter_list|()
block|{     }
specifier|public
name|get_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|column
operator|=
name|column
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|get_args
parameter_list|(
name|get_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|this
operator|.
name|row
operator|=
name|other
operator|.
name|row
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetColumn
argument_list|()
condition|)
block|{
name|this
operator|.
name|column
operator|=
name|other
operator|.
name|column
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|__this__attributes
init|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|other_element
range|:
name|other
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ByteBuffer
name|other_element_key
init|=
name|other_element
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ByteBuffer
name|other_element_value
init|=
name|other_element
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ByteBuffer
name|__this__attributes_copy_key
init|=
name|other_element_key
decl_stmt|;
name|ByteBuffer
name|__this__attributes_copy_value
init|=
name|other_element_value
decl_stmt|;
name|__this__attributes
operator|.
name|put
argument_list|(
name|__this__attributes_copy_key
argument_list|,
name|__this__attributes_copy_value
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|attributes
operator|=
name|__this__attributes
expr_stmt|;
block|}
block|}
specifier|public
name|get_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|get_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|column
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|==
literal|null
condition|?
literal|null
else|:
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of table      */
specifier|public
name|get_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|tableName
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|get_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * row key      */
specifier|public
name|byte
index|[]
name|getRow
parameter_list|()
block|{
name|setRow
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|row
operator|==
literal|null
condition|?
literal|null
else|:
name|row
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForRow
parameter_list|()
block|{
return|return
name|row
return|;
block|}
comment|/**      * row key      */
specifier|public
name|get_args
name|setRow
parameter_list|(
name|byte
index|[]
name|row
parameter_list|)
block|{
name|setRow
argument_list|(
name|row
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|get_args
name|setRow
parameter_list|(
name|ByteBuffer
name|row
parameter_list|)
block|{
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetRow
parameter_list|()
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field row is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetRow
parameter_list|()
block|{
return|return
name|this
operator|.
name|row
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setRowIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * column name      */
specifier|public
name|byte
index|[]
name|getColumn
parameter_list|()
block|{
name|setColumn
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|column
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|column
operator|==
literal|null
condition|?
literal|null
else|:
name|column
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForColumn
parameter_list|()
block|{
return|return
name|column
return|;
block|}
comment|/**      * column name      */
specifier|public
name|get_args
name|setColumn
parameter_list|(
name|byte
index|[]
name|column
parameter_list|)
block|{
name|setColumn
argument_list|(
name|column
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|column
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|get_args
name|setColumn
parameter_list|(
name|ByteBuffer
name|column
parameter_list|)
block|{
name|this
operator|.
name|column
operator|=
name|column
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetColumn
parameter_list|()
block|{
name|this
operator|.
name|column
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field column is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetColumn
parameter_list|()
block|{
return|return
name|this
operator|.
name|column
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setColumnIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|column
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getAttributesSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|attributes
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|attributes
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|putToAttributes
parameter_list|(
name|ByteBuffer
name|key
parameter_list|,
name|ByteBuffer
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get attributes      */
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|getAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|attributes
return|;
block|}
comment|/**      * Get attributes      */
specifier|public
name|get_args
name|setAttributes
parameter_list|(
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
block|{
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetAttributes
parameter_list|()
block|{
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field attributes is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|attributes
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setAttributesIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ROW
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetRow
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setRow
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|COLUMN
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetColumn
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setColumn
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ATTRIBUTES
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetAttributes
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setAttributes
argument_list|(
operator|(
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
case|case
name|ROW
case|:
return|return
name|getRow
argument_list|()
return|;
case|case
name|COLUMN
case|:
return|return
name|getColumn
argument_list|()
return|;
case|case
name|ATTRIBUTES
case|:
return|return
name|getAttributes
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
case|case
name|ROW
case|:
return|return
name|isSetRow
argument_list|()
return|;
case|case
name|COLUMN
case|:
return|return
name|isSetColumn
argument_list|()
return|;
case|case
name|ATTRIBUTES
case|:
return|return
name|isSetAttributes
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_row
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
name|boolean
name|that_present_row
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_row
operator|||
name|that_present_row
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_row
operator|&&
name|that_present_row
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|row
operator|.
name|equals
argument_list|(
name|that
operator|.
name|row
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_column
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetColumn
argument_list|()
decl_stmt|;
name|boolean
name|that_present_column
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetColumn
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_column
operator|||
name|that_present_column
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_column
operator|&&
name|that_present_column
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|column
operator|.
name|equals
argument_list|(
name|that
operator|.
name|column
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_attributes
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetAttributes
argument_list|()
decl_stmt|;
name|boolean
name|that_present_attributes
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetAttributes
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_attributes
operator|||
name|that_present_attributes
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_attributes
operator|&&
name|that_present_attributes
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|attributes
operator|.
name|equals
argument_list|(
name|that
operator|.
name|attributes
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|get_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|get_args
name|typedOther
init|=
operator|(
name|get_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetRow
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetRow
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetRow
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|row
argument_list|,
name|typedOther
operator|.
name|row
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetColumn
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetColumn
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetColumn
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|column
argument_list|,
name|typedOther
operator|.
name|column
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetAttributes
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetAttributes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetAttributes
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|attributes
argument_list|,
name|typedOther
operator|.
name|attributes
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"row:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|row
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"column:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|column
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|column
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"attributes:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|attributes
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|get_argsStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|get_argsStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|get_argsStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|get_argsStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|get_args
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|get_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// ROW
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setRowIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// COLUMN
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|column
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setColumnIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// ATTRIBUTES
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map60
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|(
literal|2
operator|*
name|_map60
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i61
init|=
literal|0
init|;
name|_i61
operator|<
name|_map60
operator|.
name|size
condition|;
operator|++
name|_i61
control|)
block|{
name|ByteBuffer
name|_key62
decl_stmt|;
comment|// required
name|ByteBuffer
name|_val63
decl_stmt|;
comment|// required
name|_key62
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val63
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|_key62
argument_list|,
name|_val63
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setAttributesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|get_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|row
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ROW_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|row
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|column
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|COLUMN_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|column
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|attributes
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ATTRIBUTES_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|struct
operator|.
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|_iter64
range|:
name|struct
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter64
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter64
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|get_argsTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|get_argsTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|get_argsTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|get_argsTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|get_args
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|get_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetColumn
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|4
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|row
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetColumn
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|column
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|_iter65
range|:
name|struct
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter65
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter65
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|get_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setRowIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|struct
operator|.
name|column
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setColumnIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|3
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map66
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|(
literal|2
operator|*
name|_map66
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i67
init|=
literal|0
init|;
name|_i67
operator|<
name|_map66
operator|.
name|size
condition|;
operator|++
name|_i67
control|)
block|{
name|ByteBuffer
name|_key68
decl_stmt|;
comment|// required
name|ByteBuffer
name|_val69
decl_stmt|;
comment|// required
name|_key68
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val69
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|_key68
argument_list|,
name|_val69
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setAttributesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|get_result
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|get_result
argument_list|,
name|get_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"get_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|get_resultStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|get_resultTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|success
decl_stmt|;
comment|// required
specifier|public
name|IOError
name|io
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|TCell
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|get_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|get_result
parameter_list|()
block|{     }
specifier|public
name|get_result
parameter_list|(
name|List
argument_list|<
name|TCell
argument_list|>
name|success
parameter_list|,
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|get_result
parameter_list|(
name|get_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|TCell
argument_list|>
name|__this__success
init|=
operator|new
name|ArrayList
argument_list|<
name|TCell
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TCell
name|other_element
range|:
name|other
operator|.
name|success
control|)
block|{
name|__this__success
operator|.
name|add
argument_list|(
operator|new
name|TCell
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|=
name|__this__success
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|get_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|get_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|TCell
argument_list|>
name|getSuccessIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|success
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSuccess
parameter_list|(
name|TCell
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TCell
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|get_result
name|setSuccess
parameter_list|(
name|List
argument_list|<
name|TCell
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|get_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|List
argument_list|<
name|TCell
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|get_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|get_result
name|typedOther
init|=
operator|(
name|get_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|get_resultStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|get_resultStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|get_resultStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|get_resultStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|get_result
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|get_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list70
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TCell
argument_list|>
argument_list|(
name|_list70
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i71
init|=
literal|0
init|;
name|_i71
operator|<
name|_list70
operator|.
name|size
condition|;
operator|++
name|_i71
control|)
block|{
name|TCell
name|_elem72
decl_stmt|;
comment|// optional
name|_elem72
operator|=
operator|new
name|TCell
argument_list|()
expr_stmt|;
name|_elem72
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem72
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|get_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|success
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|struct
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TCell
name|_iter73
range|:
name|struct
operator|.
name|success
control|)
block|{
name|_iter73
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|get_resultTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|get_resultTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|get_resultTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|get_resultTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|get_result
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|get_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TCell
name|_iter74
range|:
name|struct
operator|.
name|success
control|)
block|{
name|_iter74
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|get_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list75
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TCell
argument_list|>
argument_list|(
name|_list75
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i76
init|=
literal|0
init|;
name|_i76
operator|<
name|_list75
operator|.
name|size
condition|;
operator|++
name|_i76
control|)
block|{
name|TCell
name|_elem77
decl_stmt|;
comment|// optional
name|_elem77
operator|=
operator|new
name|TCell
argument_list|()
expr_stmt|;
name|_elem77
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem77
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|getVer_args
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|getVer_args
argument_list|,
name|getVer_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"getVer_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ROW_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"row"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|COLUMN_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"column"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|NUM_VERSIONS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"numVersions"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ATTRIBUTES_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"attributes"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|(
name|short
operator|)
literal|5
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|getVer_argsStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|getVer_argsTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|// required
comment|/**      * row key      */
specifier|public
name|ByteBuffer
name|row
decl_stmt|;
comment|// required
comment|/**      * column name      */
specifier|public
name|ByteBuffer
name|column
decl_stmt|;
comment|// required
comment|/**      * number of versions to retrieve      */
specifier|public
name|int
name|numVersions
decl_stmt|;
comment|// required
comment|/**      * Get attributes      */
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
comment|/**        * name of table        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|,
comment|/**        * row key        */
name|ROW
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"row"
argument_list|)
block|,
comment|/**        * column name        */
name|COLUMN
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"column"
argument_list|)
block|,
comment|/**        * number of versions to retrieve        */
name|NUM_VERSIONS
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|,
literal|"numVersions"
argument_list|)
block|,
comment|/**        * Get attributes        */
name|ATTRIBUTES
argument_list|(
operator|(
name|short
operator|)
literal|5
argument_list|,
literal|"attributes"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
case|case
literal|2
case|:
comment|// ROW
return|return
name|ROW
return|;
case|case
literal|3
case|:
comment|// COLUMN
return|return
name|COLUMN
return|;
case|case
literal|4
case|:
comment|// NUM_VERSIONS
return|return
name|NUM_VERSIONS
return|;
case|case
literal|5
case|:
comment|// ATTRIBUTES
return|return
name|ATTRIBUTES
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__NUMVERSIONS_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ROW
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"row"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|COLUMN
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"column"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|NUM_VERSIONS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"numVersions"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ATTRIBUTES
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"attributes"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|MapMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|getVer_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|getVer_args
parameter_list|()
block|{     }
specifier|public
name|getVer_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|int
name|numVersions
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|column
operator|=
name|column
expr_stmt|;
name|this
operator|.
name|numVersions
operator|=
name|numVersions
expr_stmt|;
name|setNumVersionsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|getVer_args
parameter_list|(
name|getVer_args
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|this
operator|.
name|row
operator|=
name|other
operator|.
name|row
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetColumn
argument_list|()
condition|)
block|{
name|this
operator|.
name|column
operator|=
name|other
operator|.
name|column
expr_stmt|;
block|}
name|this
operator|.
name|numVersions
operator|=
name|other
operator|.
name|numVersions
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|__this__attributes
init|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|other_element
range|:
name|other
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ByteBuffer
name|other_element_key
init|=
name|other_element
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ByteBuffer
name|other_element_value
init|=
name|other_element
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ByteBuffer
name|__this__attributes_copy_key
init|=
name|other_element_key
decl_stmt|;
name|ByteBuffer
name|__this__attributes_copy_value
init|=
name|other_element_value
decl_stmt|;
name|__this__attributes
operator|.
name|put
argument_list|(
name|__this__attributes_copy_key
argument_list|,
name|__this__attributes_copy_value
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|attributes
operator|=
name|__this__attributes
expr_stmt|;
block|}
block|}
specifier|public
name|getVer_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|getVer_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|column
operator|=
literal|null
expr_stmt|;
name|setNumVersionsIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|numVersions
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|==
literal|null
condition|?
literal|null
else|:
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of table      */
specifier|public
name|getVer_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|tableName
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|getVer_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * row key      */
specifier|public
name|byte
index|[]
name|getRow
parameter_list|()
block|{
name|setRow
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|row
operator|==
literal|null
condition|?
literal|null
else|:
name|row
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForRow
parameter_list|()
block|{
return|return
name|row
return|;
block|}
comment|/**      * row key      */
specifier|public
name|getVer_args
name|setRow
parameter_list|(
name|byte
index|[]
name|row
parameter_list|)
block|{
name|setRow
argument_list|(
name|row
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|getVer_args
name|setRow
parameter_list|(
name|ByteBuffer
name|row
parameter_list|)
block|{
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetRow
parameter_list|()
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field row is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetRow
parameter_list|()
block|{
return|return
name|this
operator|.
name|row
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setRowIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * column name      */
specifier|public
name|byte
index|[]
name|getColumn
parameter_list|()
block|{
name|setColumn
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|column
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|column
operator|==
literal|null
condition|?
literal|null
else|:
name|column
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForColumn
parameter_list|()
block|{
return|return
name|column
return|;
block|}
comment|/**      * column name      */
specifier|public
name|getVer_args
name|setColumn
parameter_list|(
name|byte
index|[]
name|column
parameter_list|)
block|{
name|setColumn
argument_list|(
name|column
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|column
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|getVer_args
name|setColumn
parameter_list|(
name|ByteBuffer
name|column
parameter_list|)
block|{
name|this
operator|.
name|column
operator|=
name|column
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetColumn
parameter_list|()
block|{
name|this
operator|.
name|column
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field column is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetColumn
parameter_list|()
block|{
return|return
name|this
operator|.
name|column
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setColumnIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|column
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * number of versions to retrieve      */
specifier|public
name|int
name|getNumVersions
parameter_list|()
block|{
return|return
name|this
operator|.
name|numVersions
return|;
block|}
comment|/**      * number of versions to retrieve      */
specifier|public
name|getVer_args
name|setNumVersions
parameter_list|(
name|int
name|numVersions
parameter_list|)
block|{
name|this
operator|.
name|numVersions
operator|=
name|numVersions
expr_stmt|;
name|setNumVersionsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetNumVersions
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__NUMVERSIONS_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field numVersions is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetNumVersions
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__NUMVERSIONS_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setNumVersionsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__NUMVERSIONS_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getAttributesSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|attributes
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|attributes
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|putToAttributes
parameter_list|(
name|ByteBuffer
name|key
parameter_list|,
name|ByteBuffer
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get attributes      */
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|getAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|attributes
return|;
block|}
comment|/**      * Get attributes      */
specifier|public
name|getVer_args
name|setAttributes
parameter_list|(
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
block|{
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetAttributes
parameter_list|()
block|{
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field attributes is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|attributes
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setAttributesIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ROW
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetRow
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setRow
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|COLUMN
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetColumn
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setColumn
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|NUM_VERSIONS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetNumVersions
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setNumVersions
argument_list|(
operator|(
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ATTRIBUTES
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetAttributes
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setAttributes
argument_list|(
operator|(
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
case|case
name|ROW
case|:
return|return
name|getRow
argument_list|()
return|;
case|case
name|COLUMN
case|:
return|return
name|getColumn
argument_list|()
return|;
case|case
name|NUM_VERSIONS
case|:
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|getNumVersions
argument_list|()
argument_list|)
return|;
case|case
name|ATTRIBUTES
case|:
return|return
name|getAttributes
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
case|case
name|ROW
case|:
return|return
name|isSetRow
argument_list|()
return|;
case|case
name|COLUMN
case|:
return|return
name|isSetColumn
argument_list|()
return|;
case|case
name|NUM_VERSIONS
case|:
return|return
name|isSetNumVersions
argument_list|()
return|;
case|case
name|ATTRIBUTES
case|:
return|return
name|isSetAttributes
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|getVer_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|getVer_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|getVer_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_row
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
name|boolean
name|that_present_row
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_row
operator|||
name|that_present_row
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_row
operator|&&
name|that_present_row
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|row
operator|.
name|equals
argument_list|(
name|that
operator|.
name|row
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_column
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetColumn
argument_list|()
decl_stmt|;
name|boolean
name|that_present_column
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetColumn
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_column
operator|||
name|that_present_column
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_column
operator|&&
name|that_present_column
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|column
operator|.
name|equals
argument_list|(
name|that
operator|.
name|column
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_numVersions
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_numVersions
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_numVersions
operator|||
name|that_present_numVersions
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_numVersions
operator|&&
name|that_present_numVersions
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|numVersions
operator|!=
name|that
operator|.
name|numVersions
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_attributes
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetAttributes
argument_list|()
decl_stmt|;
name|boolean
name|that_present_attributes
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetAttributes
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_attributes
operator|||
name|that_present_attributes
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_attributes
operator|&&
name|that_present_attributes
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|attributes
operator|.
name|equals
argument_list|(
name|that
operator|.
name|attributes
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|getVer_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|getVer_args
name|typedOther
init|=
operator|(
name|getVer_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetRow
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetRow
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetRow
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|row
argument_list|,
name|typedOther
operator|.
name|row
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetColumn
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetColumn
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetColumn
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|column
argument_list|,
name|typedOther
operator|.
name|column
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetNumVersions
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetNumVersions
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetNumVersions
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|numVersions
argument_list|,
name|typedOther
operator|.
name|numVersions
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetAttributes
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetAttributes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetAttributes
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|attributes
argument_list|,
name|typedOther
operator|.
name|attributes
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getVer_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"row:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|row
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"column:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|column
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|column
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"numVersions:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|numVersions
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"attributes:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|attributes
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
comment|// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
name|__isset_bit_vector
operator|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getVer_argsStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getVer_argsStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getVer_argsStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getVer_argsStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|getVer_args
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|getVer_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// ROW
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setRowIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// COLUMN
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|column
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setColumnIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// NUM_VERSIONS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
condition|)
block|{
name|struct
operator|.
name|numVersions
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setNumVersionsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|5
case|:
comment|// ATTRIBUTES
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map78
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|(
literal|2
operator|*
name|_map78
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i79
init|=
literal|0
init|;
name|_i79
operator|<
name|_map78
operator|.
name|size
condition|;
operator|++
name|_i79
control|)
block|{
name|ByteBuffer
name|_key80
decl_stmt|;
comment|// required
name|ByteBuffer
name|_val81
decl_stmt|;
comment|// required
name|_key80
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val81
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|_key80
argument_list|,
name|_val81
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setAttributesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|getVer_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|row
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ROW_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|row
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|column
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|COLUMN_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|column
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|NUM_VERSIONS_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|numVersions
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|attributes
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ATTRIBUTES_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|struct
operator|.
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|_iter82
range|:
name|struct
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter82
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter82
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getVer_argsTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getVer_argsTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getVer_argsTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getVer_argsTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|getVer_args
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getVer_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetColumn
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetNumVersions
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|5
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|row
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetColumn
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|column
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetNumVersions
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|numVersions
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|_iter83
range|:
name|struct
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter83
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter83
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getVer_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setRowIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|struct
operator|.
name|column
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setColumnIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|3
argument_list|)
condition|)
block|{
name|struct
operator|.
name|numVersions
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setNumVersionsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|4
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map84
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|(
literal|2
operator|*
name|_map84
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i85
init|=
literal|0
init|;
name|_i85
operator|<
name|_map84
operator|.
name|size
condition|;
operator|++
name|_i85
control|)
block|{
name|ByteBuffer
name|_key86
decl_stmt|;
comment|// required
name|ByteBuffer
name|_val87
decl_stmt|;
comment|// required
name|_key86
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val87
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|_key86
argument_list|,
name|_val87
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setAttributesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|getVer_result
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|getVer_result
argument_list|,
name|getVer_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"getVer_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|getVer_resultStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|getVer_resultTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|success
decl_stmt|;
comment|// required
specifier|public
name|IOError
name|io
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|TCell
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|getVer_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|getVer_result
parameter_list|()
block|{     }
specifier|public
name|getVer_result
parameter_list|(
name|List
argument_list|<
name|TCell
argument_list|>
name|success
parameter_list|,
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|getVer_result
parameter_list|(
name|getVer_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|TCell
argument_list|>
name|__this__success
init|=
operator|new
name|ArrayList
argument_list|<
name|TCell
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TCell
name|other_element
range|:
name|other
operator|.
name|success
control|)
block|{
name|__this__success
operator|.
name|add
argument_list|(
operator|new
name|TCell
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|=
name|__this__success
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|getVer_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|getVer_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|TCell
argument_list|>
name|getSuccessIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|success
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSuccess
parameter_list|(
name|TCell
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TCell
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|getVer_result
name|setSuccess
parameter_list|(
name|List
argument_list|<
name|TCell
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|getVer_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|List
argument_list|<
name|TCell
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|getVer_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|getVer_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|getVer_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|getVer_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|getVer_result
name|typedOther
init|=
operator|(
name|getVer_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getVer_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getVer_resultStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getVer_resultStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getVer_resultStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getVer_resultStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|getVer_result
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|getVer_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list88
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TCell
argument_list|>
argument_list|(
name|_list88
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i89
init|=
literal|0
init|;
name|_i89
operator|<
name|_list88
operator|.
name|size
condition|;
operator|++
name|_i89
control|)
block|{
name|TCell
name|_elem90
decl_stmt|;
comment|// optional
name|_elem90
operator|=
operator|new
name|TCell
argument_list|()
expr_stmt|;
name|_elem90
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem90
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|getVer_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|success
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|struct
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TCell
name|_iter91
range|:
name|struct
operator|.
name|success
control|)
block|{
name|_iter91
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getVer_resultTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getVer_resultTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getVer_resultTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getVer_resultTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|getVer_result
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getVer_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TCell
name|_iter92
range|:
name|struct
operator|.
name|success
control|)
block|{
name|_iter92
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getVer_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list93
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TCell
argument_list|>
argument_list|(
name|_list93
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i94
init|=
literal|0
init|;
name|_i94
operator|<
name|_list93
operator|.
name|size
condition|;
operator|++
name|_i94
control|)
block|{
name|TCell
name|_elem95
decl_stmt|;
comment|// optional
name|_elem95
operator|=
operator|new
name|TCell
argument_list|()
expr_stmt|;
name|_elem95
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem95
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|getVerTs_args
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|getVerTs_args
argument_list|,
name|getVerTs_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"getVerTs_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ROW_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"row"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|COLUMN_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"column"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|TIMESTAMP_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"timestamp"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|NUM_VERSIONS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"numVersions"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|5
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ATTRIBUTES_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"attributes"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|(
name|short
operator|)
literal|6
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|getVerTs_argsStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|getVerTs_argsTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|// required
comment|/**      * row key      */
specifier|public
name|ByteBuffer
name|row
decl_stmt|;
comment|// required
comment|/**      * column name      */
specifier|public
name|ByteBuffer
name|column
decl_stmt|;
comment|// required
comment|/**      * timestamp      */
specifier|public
name|long
name|timestamp
decl_stmt|;
comment|// required
comment|/**      * number of versions to retrieve      */
specifier|public
name|int
name|numVersions
decl_stmt|;
comment|// required
comment|/**      * Get attributes      */
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
comment|/**        * name of table        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|,
comment|/**        * row key        */
name|ROW
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"row"
argument_list|)
block|,
comment|/**        * column name        */
name|COLUMN
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"column"
argument_list|)
block|,
comment|/**        * timestamp        */
name|TIMESTAMP
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|,
literal|"timestamp"
argument_list|)
block|,
comment|/**        * number of versions to retrieve        */
name|NUM_VERSIONS
argument_list|(
operator|(
name|short
operator|)
literal|5
argument_list|,
literal|"numVersions"
argument_list|)
block|,
comment|/**        * Get attributes        */
name|ATTRIBUTES
argument_list|(
operator|(
name|short
operator|)
literal|6
argument_list|,
literal|"attributes"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
case|case
literal|2
case|:
comment|// ROW
return|return
name|ROW
return|;
case|case
literal|3
case|:
comment|// COLUMN
return|return
name|COLUMN
return|;
case|case
literal|4
case|:
comment|// TIMESTAMP
return|return
name|TIMESTAMP
return|;
case|case
literal|5
case|:
comment|// NUM_VERSIONS
return|return
name|NUM_VERSIONS
return|;
case|case
literal|6
case|:
comment|// ATTRIBUTES
return|return
name|ATTRIBUTES
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__TIMESTAMP_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|__NUMVERSIONS_ISSET_ID
init|=
literal|1
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ROW
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"row"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|COLUMN
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"column"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TIMESTAMP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"timestamp"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|NUM_VERSIONS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"numVersions"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ATTRIBUTES
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"attributes"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|MapMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|getVerTs_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|getVerTs_args
parameter_list|()
block|{     }
specifier|public
name|getVerTs_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|int
name|numVersions
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|column
operator|=
name|column
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|numVersions
operator|=
name|numVersions
expr_stmt|;
name|setNumVersionsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|getVerTs_args
parameter_list|(
name|getVerTs_args
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|this
operator|.
name|row
operator|=
name|other
operator|.
name|row
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetColumn
argument_list|()
condition|)
block|{
name|this
operator|.
name|column
operator|=
name|other
operator|.
name|column
expr_stmt|;
block|}
name|this
operator|.
name|timestamp
operator|=
name|other
operator|.
name|timestamp
expr_stmt|;
name|this
operator|.
name|numVersions
operator|=
name|other
operator|.
name|numVersions
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|__this__attributes
init|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|other_element
range|:
name|other
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ByteBuffer
name|other_element_key
init|=
name|other_element
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ByteBuffer
name|other_element_value
init|=
name|other_element
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ByteBuffer
name|__this__attributes_copy_key
init|=
name|other_element_key
decl_stmt|;
name|ByteBuffer
name|__this__attributes_copy_value
init|=
name|other_element_value
decl_stmt|;
name|__this__attributes
operator|.
name|put
argument_list|(
name|__this__attributes_copy_key
argument_list|,
name|__this__attributes_copy_value
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|attributes
operator|=
name|__this__attributes
expr_stmt|;
block|}
block|}
specifier|public
name|getVerTs_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|getVerTs_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|column
operator|=
literal|null
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
literal|0
expr_stmt|;
name|setNumVersionsIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|numVersions
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|==
literal|null
condition|?
literal|null
else|:
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of table      */
specifier|public
name|getVerTs_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|tableName
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|getVerTs_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * row key      */
specifier|public
name|byte
index|[]
name|getRow
parameter_list|()
block|{
name|setRow
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|row
operator|==
literal|null
condition|?
literal|null
else|:
name|row
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForRow
parameter_list|()
block|{
return|return
name|row
return|;
block|}
comment|/**      * row key      */
specifier|public
name|getVerTs_args
name|setRow
parameter_list|(
name|byte
index|[]
name|row
parameter_list|)
block|{
name|setRow
argument_list|(
name|row
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|getVerTs_args
name|setRow
parameter_list|(
name|ByteBuffer
name|row
parameter_list|)
block|{
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetRow
parameter_list|()
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field row is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetRow
parameter_list|()
block|{
return|return
name|this
operator|.
name|row
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setRowIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * column name      */
specifier|public
name|byte
index|[]
name|getColumn
parameter_list|()
block|{
name|setColumn
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|column
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|column
operator|==
literal|null
condition|?
literal|null
else|:
name|column
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForColumn
parameter_list|()
block|{
return|return
name|column
return|;
block|}
comment|/**      * column name      */
specifier|public
name|getVerTs_args
name|setColumn
parameter_list|(
name|byte
index|[]
name|column
parameter_list|)
block|{
name|setColumn
argument_list|(
name|column
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|column
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|getVerTs_args
name|setColumn
parameter_list|(
name|ByteBuffer
name|column
parameter_list|)
block|{
name|this
operator|.
name|column
operator|=
name|column
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetColumn
parameter_list|()
block|{
name|this
operator|.
name|column
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field column is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetColumn
parameter_list|()
block|{
return|return
name|this
operator|.
name|column
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setColumnIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|column
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * timestamp      */
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|this
operator|.
name|timestamp
return|;
block|}
comment|/**      * timestamp      */
specifier|public
name|getVerTs_args
name|setTimestamp
parameter_list|(
name|long
name|timestamp
parameter_list|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTimestamp
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTimestamp
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setTimestampIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * number of versions to retrieve      */
specifier|public
name|int
name|getNumVersions
parameter_list|()
block|{
return|return
name|this
operator|.
name|numVersions
return|;
block|}
comment|/**      * number of versions to retrieve      */
specifier|public
name|getVerTs_args
name|setNumVersions
parameter_list|(
name|int
name|numVersions
parameter_list|)
block|{
name|this
operator|.
name|numVersions
operator|=
name|numVersions
expr_stmt|;
name|setNumVersionsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetNumVersions
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__NUMVERSIONS_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field numVersions is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetNumVersions
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__NUMVERSIONS_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setNumVersionsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__NUMVERSIONS_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getAttributesSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|attributes
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|attributes
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|putToAttributes
parameter_list|(
name|ByteBuffer
name|key
parameter_list|,
name|ByteBuffer
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get attributes      */
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|getAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|attributes
return|;
block|}
comment|/**      * Get attributes      */
specifier|public
name|getVerTs_args
name|setAttributes
parameter_list|(
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
block|{
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetAttributes
parameter_list|()
block|{
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field attributes is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|attributes
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setAttributesIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ROW
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetRow
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setRow
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|COLUMN
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetColumn
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setColumn
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TIMESTAMP
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTimestamp
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTimestamp
argument_list|(
operator|(
name|Long
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|NUM_VERSIONS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetNumVersions
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setNumVersions
argument_list|(
operator|(
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ATTRIBUTES
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetAttributes
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setAttributes
argument_list|(
operator|(
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
case|case
name|ROW
case|:
return|return
name|getRow
argument_list|()
return|;
case|case
name|COLUMN
case|:
return|return
name|getColumn
argument_list|()
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|getTimestamp
argument_list|()
argument_list|)
return|;
case|case
name|NUM_VERSIONS
case|:
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|getNumVersions
argument_list|()
argument_list|)
return|;
case|case
name|ATTRIBUTES
case|:
return|return
name|getAttributes
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
case|case
name|ROW
case|:
return|return
name|isSetRow
argument_list|()
return|;
case|case
name|COLUMN
case|:
return|return
name|isSetColumn
argument_list|()
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|isSetTimestamp
argument_list|()
return|;
case|case
name|NUM_VERSIONS
case|:
return|return
name|isSetNumVersions
argument_list|()
return|;
case|case
name|ATTRIBUTES
case|:
return|return
name|isSetAttributes
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|getVerTs_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|getVerTs_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|getVerTs_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_row
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
name|boolean
name|that_present_row
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_row
operator|||
name|that_present_row
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_row
operator|&&
name|that_present_row
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|row
operator|.
name|equals
argument_list|(
name|that
operator|.
name|row
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_column
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetColumn
argument_list|()
decl_stmt|;
name|boolean
name|that_present_column
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetColumn
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_column
operator|||
name|that_present_column
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_column
operator|&&
name|that_present_column
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|column
operator|.
name|equals
argument_list|(
name|that
operator|.
name|column
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_timestamp
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_timestamp
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_timestamp
operator|||
name|that_present_timestamp
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_timestamp
operator|&&
name|that_present_timestamp
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|timestamp
operator|!=
name|that
operator|.
name|timestamp
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_numVersions
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_numVersions
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_numVersions
operator|||
name|that_present_numVersions
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_numVersions
operator|&&
name|that_present_numVersions
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|numVersions
operator|!=
name|that
operator|.
name|numVersions
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_attributes
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetAttributes
argument_list|()
decl_stmt|;
name|boolean
name|that_present_attributes
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetAttributes
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_attributes
operator|||
name|that_present_attributes
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_attributes
operator|&&
name|that_present_attributes
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|attributes
operator|.
name|equals
argument_list|(
name|that
operator|.
name|attributes
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|getVerTs_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|getVerTs_args
name|typedOther
init|=
operator|(
name|getVerTs_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetRow
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetRow
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetRow
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|row
argument_list|,
name|typedOther
operator|.
name|row
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetColumn
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetColumn
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetColumn
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|column
argument_list|,
name|typedOther
operator|.
name|column
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTimestamp
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTimestamp
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTimestamp
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|timestamp
argument_list|,
name|typedOther
operator|.
name|timestamp
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetNumVersions
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetNumVersions
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetNumVersions
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|numVersions
argument_list|,
name|typedOther
operator|.
name|numVersions
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetAttributes
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetAttributes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetAttributes
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|attributes
argument_list|,
name|typedOther
operator|.
name|attributes
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getVerTs_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"row:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|row
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"column:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|column
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|column
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"timestamp:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"numVersions:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|numVersions
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"attributes:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|attributes
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getVerTs_argsStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getVerTs_argsStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getVerTs_argsStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getVerTs_argsStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|getVerTs_args
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|getVerTs_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// ROW
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setRowIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// COLUMN
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|column
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setColumnIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// TIMESTAMP
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
condition|)
block|{
name|struct
operator|.
name|timestamp
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|5
case|:
comment|// NUM_VERSIONS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
condition|)
block|{
name|struct
operator|.
name|numVersions
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setNumVersionsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|6
case|:
comment|// ATTRIBUTES
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map96
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|(
literal|2
operator|*
name|_map96
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i97
init|=
literal|0
init|;
name|_i97
operator|<
name|_map96
operator|.
name|size
condition|;
operator|++
name|_i97
control|)
block|{
name|ByteBuffer
name|_key98
decl_stmt|;
comment|// required
name|ByteBuffer
name|_val99
decl_stmt|;
comment|// required
name|_key98
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val99
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|_key98
argument_list|,
name|_val99
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setAttributesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|getVerTs_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|row
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ROW_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|row
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|column
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|COLUMN_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|column
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TIMESTAMP_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI64
argument_list|(
name|struct
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|NUM_VERSIONS_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|numVersions
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|attributes
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ATTRIBUTES_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|struct
operator|.
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|_iter100
range|:
name|struct
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter100
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter100
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getVerTs_argsTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getVerTs_argsTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getVerTs_argsTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getVerTs_argsTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|getVerTs_args
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getVerTs_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetColumn
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetTimestamp
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetNumVersions
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|6
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|row
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetColumn
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|column
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetTimestamp
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI64
argument_list|(
name|struct
operator|.
name|timestamp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetNumVersions
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|numVersions
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|_iter101
range|:
name|struct
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter101
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter101
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getVerTs_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|6
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setRowIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|struct
operator|.
name|column
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setColumnIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|3
argument_list|)
condition|)
block|{
name|struct
operator|.
name|timestamp
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|4
argument_list|)
condition|)
block|{
name|struct
operator|.
name|numVersions
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setNumVersionsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|5
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map102
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|(
literal|2
operator|*
name|_map102
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i103
init|=
literal|0
init|;
name|_i103
operator|<
name|_map102
operator|.
name|size
condition|;
operator|++
name|_i103
control|)
block|{
name|ByteBuffer
name|_key104
decl_stmt|;
comment|// required
name|ByteBuffer
name|_val105
decl_stmt|;
comment|// required
name|_key104
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val105
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|_key104
argument_list|,
name|_val105
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setAttributesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|getVerTs_result
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|getVerTs_result
argument_list|,
name|getVerTs_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"getVerTs_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|getVerTs_resultStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|getVerTs_resultTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|success
decl_stmt|;
comment|// required
specifier|public
name|IOError
name|io
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|TCell
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|getVerTs_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|getVerTs_result
parameter_list|()
block|{     }
specifier|public
name|getVerTs_result
parameter_list|(
name|List
argument_list|<
name|TCell
argument_list|>
name|success
parameter_list|,
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|getVerTs_result
parameter_list|(
name|getVerTs_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|TCell
argument_list|>
name|__this__success
init|=
operator|new
name|ArrayList
argument_list|<
name|TCell
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TCell
name|other_element
range|:
name|other
operator|.
name|success
control|)
block|{
name|__this__success
operator|.
name|add
argument_list|(
operator|new
name|TCell
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|=
name|__this__success
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|getVerTs_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|getVerTs_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|TCell
argument_list|>
name|getSuccessIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|success
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSuccess
parameter_list|(
name|TCell
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TCell
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|getVerTs_result
name|setSuccess
parameter_list|(
name|List
argument_list|<
name|TCell
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|getVerTs_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|List
argument_list|<
name|TCell
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|getVerTs_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|getVerTs_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|getVerTs_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|getVerTs_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|getVerTs_result
name|typedOther
init|=
operator|(
name|getVerTs_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getVerTs_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getVerTs_resultStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getVerTs_resultStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getVerTs_resultStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getVerTs_resultStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|getVerTs_result
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|getVerTs_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list106
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TCell
argument_list|>
argument_list|(
name|_list106
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i107
init|=
literal|0
init|;
name|_i107
operator|<
name|_list106
operator|.
name|size
condition|;
operator|++
name|_i107
control|)
block|{
name|TCell
name|_elem108
decl_stmt|;
comment|// optional
name|_elem108
operator|=
operator|new
name|TCell
argument_list|()
expr_stmt|;
name|_elem108
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem108
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|getVerTs_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|success
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|struct
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TCell
name|_iter109
range|:
name|struct
operator|.
name|success
control|)
block|{
name|_iter109
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getVerTs_resultTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getVerTs_resultTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getVerTs_resultTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getVerTs_resultTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|getVerTs_result
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getVerTs_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TCell
name|_iter110
range|:
name|struct
operator|.
name|success
control|)
block|{
name|_iter110
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getVerTs_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list111
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TCell
argument_list|>
argument_list|(
name|_list111
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i112
init|=
literal|0
init|;
name|_i112
operator|<
name|_list111
operator|.
name|size
condition|;
operator|++
name|_i112
control|)
block|{
name|TCell
name|_elem113
decl_stmt|;
comment|// optional
name|_elem113
operator|=
operator|new
name|TCell
argument_list|()
expr_stmt|;
name|_elem113
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem113
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|getRow_args
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|getRow_args
argument_list|,
name|getRow_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"getRow_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ROW_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"row"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ATTRIBUTES_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"attributes"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|getRow_argsStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|getRow_argsTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|// required
comment|/**      * row key      */
specifier|public
name|ByteBuffer
name|row
decl_stmt|;
comment|// required
comment|/**      * Get attributes      */
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
comment|/**        * name of table        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|,
comment|/**        * row key        */
name|ROW
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"row"
argument_list|)
block|,
comment|/**        * Get attributes        */
name|ATTRIBUTES
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"attributes"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
case|case
literal|2
case|:
comment|// ROW
return|return
name|ROW
return|;
case|case
literal|3
case|:
comment|// ATTRIBUTES
return|return
name|ATTRIBUTES
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ROW
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"row"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ATTRIBUTES
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"attributes"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|MapMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|getRow_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|getRow_args
parameter_list|()
block|{     }
specifier|public
name|getRow_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|getRow_args
parameter_list|(
name|getRow_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|this
operator|.
name|row
operator|=
name|other
operator|.
name|row
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|__this__attributes
init|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|other_element
range|:
name|other
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ByteBuffer
name|other_element_key
init|=
name|other_element
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ByteBuffer
name|other_element_value
init|=
name|other_element
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ByteBuffer
name|__this__attributes_copy_key
init|=
name|other_element_key
decl_stmt|;
name|ByteBuffer
name|__this__attributes_copy_value
init|=
name|other_element_value
decl_stmt|;
name|__this__attributes
operator|.
name|put
argument_list|(
name|__this__attributes_copy_key
argument_list|,
name|__this__attributes_copy_value
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|attributes
operator|=
name|__this__attributes
expr_stmt|;
block|}
block|}
specifier|public
name|getRow_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|getRow_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|==
literal|null
condition|?
literal|null
else|:
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of table      */
specifier|public
name|getRow_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|tableName
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|getRow_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * row key      */
specifier|public
name|byte
index|[]
name|getRow
parameter_list|()
block|{
name|setRow
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|row
operator|==
literal|null
condition|?
literal|null
else|:
name|row
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForRow
parameter_list|()
block|{
return|return
name|row
return|;
block|}
comment|/**      * row key      */
specifier|public
name|getRow_args
name|setRow
parameter_list|(
name|byte
index|[]
name|row
parameter_list|)
block|{
name|setRow
argument_list|(
name|row
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|getRow_args
name|setRow
parameter_list|(
name|ByteBuffer
name|row
parameter_list|)
block|{
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetRow
parameter_list|()
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field row is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetRow
parameter_list|()
block|{
return|return
name|this
operator|.
name|row
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setRowIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getAttributesSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|attributes
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|attributes
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|putToAttributes
parameter_list|(
name|ByteBuffer
name|key
parameter_list|,
name|ByteBuffer
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get attributes      */
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|getAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|attributes
return|;
block|}
comment|/**      * Get attributes      */
specifier|public
name|getRow_args
name|setAttributes
parameter_list|(
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
block|{
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetAttributes
parameter_list|()
block|{
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field attributes is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|attributes
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setAttributesIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ROW
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetRow
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setRow
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ATTRIBUTES
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetAttributes
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setAttributes
argument_list|(
operator|(
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
case|case
name|ROW
case|:
return|return
name|getRow
argument_list|()
return|;
case|case
name|ATTRIBUTES
case|:
return|return
name|getAttributes
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
case|case
name|ROW
case|:
return|return
name|isSetRow
argument_list|()
return|;
case|case
name|ATTRIBUTES
case|:
return|return
name|isSetAttributes
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|getRow_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|getRow_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|getRow_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_row
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
name|boolean
name|that_present_row
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_row
operator|||
name|that_present_row
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_row
operator|&&
name|that_present_row
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|row
operator|.
name|equals
argument_list|(
name|that
operator|.
name|row
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_attributes
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetAttributes
argument_list|()
decl_stmt|;
name|boolean
name|that_present_attributes
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetAttributes
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_attributes
operator|||
name|that_present_attributes
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_attributes
operator|&&
name|that_present_attributes
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|attributes
operator|.
name|equals
argument_list|(
name|that
operator|.
name|attributes
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|getRow_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|getRow_args
name|typedOther
init|=
operator|(
name|getRow_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetRow
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetRow
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetRow
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|row
argument_list|,
name|typedOther
operator|.
name|row
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetAttributes
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetAttributes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetAttributes
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|attributes
argument_list|,
name|typedOther
operator|.
name|attributes
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getRow_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"row:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|row
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"attributes:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|attributes
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRow_argsStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getRow_argsStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getRow_argsStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRow_argsStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|getRow_args
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|getRow_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// ROW
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setRowIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// ATTRIBUTES
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map114
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|(
literal|2
operator|*
name|_map114
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i115
init|=
literal|0
init|;
name|_i115
operator|<
name|_map114
operator|.
name|size
condition|;
operator|++
name|_i115
control|)
block|{
name|ByteBuffer
name|_key116
decl_stmt|;
comment|// required
name|ByteBuffer
name|_val117
decl_stmt|;
comment|// required
name|_key116
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val117
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|_key116
argument_list|,
name|_val117
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setAttributesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|getRow_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|row
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ROW_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|row
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|attributes
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ATTRIBUTES_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|struct
operator|.
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|_iter118
range|:
name|struct
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter118
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter118
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRow_argsTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getRow_argsTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getRow_argsTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRow_argsTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|getRow_args
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getRow_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|3
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|row
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|_iter119
range|:
name|struct
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter119
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter119
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getRow_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setRowIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|2
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map120
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|(
literal|2
operator|*
name|_map120
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i121
init|=
literal|0
init|;
name|_i121
operator|<
name|_map120
operator|.
name|size
condition|;
operator|++
name|_i121
control|)
block|{
name|ByteBuffer
name|_key122
decl_stmt|;
comment|// required
name|ByteBuffer
name|_val123
decl_stmt|;
comment|// required
name|_key122
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val123
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|_key122
argument_list|,
name|_val123
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setAttributesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|getRow_result
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|getRow_result
argument_list|,
name|getRow_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"getRow_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|getRow_resultStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|getRow_resultTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
decl_stmt|;
comment|// required
specifier|public
name|IOError
name|io
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|TRowResult
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|getRow_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|getRow_result
parameter_list|()
block|{     }
specifier|public
name|getRow_result
parameter_list|(
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
parameter_list|,
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|getRow_result
parameter_list|(
name|getRow_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|TRowResult
argument_list|>
name|__this__success
init|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TRowResult
name|other_element
range|:
name|other
operator|.
name|success
control|)
block|{
name|__this__success
operator|.
name|add
argument_list|(
operator|new
name|TRowResult
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|=
name|__this__success
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|getRow_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|getRow_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|TRowResult
argument_list|>
name|getSuccessIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|success
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSuccess
parameter_list|(
name|TRowResult
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|getRow_result
name|setSuccess
parameter_list|(
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|getRow_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|List
argument_list|<
name|TRowResult
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|getRow_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|getRow_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|getRow_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|getRow_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|getRow_result
name|typedOther
init|=
operator|(
name|getRow_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getRow_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRow_resultStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getRow_resultStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getRow_resultStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRow_resultStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|getRow_result
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|getRow_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list124
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|(
name|_list124
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i125
init|=
literal|0
init|;
name|_i125
operator|<
name|_list124
operator|.
name|size
condition|;
operator|++
name|_i125
control|)
block|{
name|TRowResult
name|_elem126
decl_stmt|;
comment|// optional
name|_elem126
operator|=
operator|new
name|TRowResult
argument_list|()
expr_stmt|;
name|_elem126
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem126
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|getRow_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|success
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|struct
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TRowResult
name|_iter127
range|:
name|struct
operator|.
name|success
control|)
block|{
name|_iter127
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRow_resultTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getRow_resultTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getRow_resultTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRow_resultTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|getRow_result
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getRow_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TRowResult
name|_iter128
range|:
name|struct
operator|.
name|success
control|)
block|{
name|_iter128
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getRow_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list129
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|(
name|_list129
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i130
init|=
literal|0
init|;
name|_i130
operator|<
name|_list129
operator|.
name|size
condition|;
operator|++
name|_i130
control|)
block|{
name|TRowResult
name|_elem131
decl_stmt|;
comment|// optional
name|_elem131
operator|=
operator|new
name|TRowResult
argument_list|()
expr_stmt|;
name|_elem131
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem131
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|getRowWithColumns_args
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|getRowWithColumns_args
argument_list|,
name|getRowWithColumns_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"getRowWithColumns_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ROW_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"row"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|COLUMNS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"columns"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ATTRIBUTES_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"attributes"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|getRowWithColumns_argsStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|getRowWithColumns_argsTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|// required
comment|/**      * row key      */
specifier|public
name|ByteBuffer
name|row
decl_stmt|;
comment|// required
comment|/**      * List of columns to return, null for all columns      */
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
decl_stmt|;
comment|// required
comment|/**      * Get attributes      */
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
comment|/**        * name of table        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|,
comment|/**        * row key        */
name|ROW
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"row"
argument_list|)
block|,
comment|/**        * List of columns to return, null for all columns        */
name|COLUMNS
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"columns"
argument_list|)
block|,
comment|/**        * Get attributes        */
name|ATTRIBUTES
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|,
literal|"attributes"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
case|case
literal|2
case|:
comment|// ROW
return|return
name|ROW
return|;
case|case
literal|3
case|:
comment|// COLUMNS
return|return
name|COLUMNS
return|;
case|case
literal|4
case|:
comment|// ATTRIBUTES
return|return
name|ATTRIBUTES
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ROW
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"row"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|COLUMNS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"columns"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ATTRIBUTES
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"attributes"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|MapMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|getRowWithColumns_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|getRowWithColumns_args
parameter_list|()
block|{     }
specifier|public
name|getRowWithColumns_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|getRowWithColumns_args
parameter_list|(
name|getRowWithColumns_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|this
operator|.
name|row
operator|=
name|other
operator|.
name|row
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetColumns
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|__this__columns
init|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ByteBuffer
name|other_element
range|:
name|other
operator|.
name|columns
control|)
block|{
name|__this__columns
operator|.
name|add
argument_list|(
name|other_element
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|columns
operator|=
name|__this__columns
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|__this__attributes
init|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|other_element
range|:
name|other
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ByteBuffer
name|other_element_key
init|=
name|other_element
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ByteBuffer
name|other_element_value
init|=
name|other_element
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ByteBuffer
name|__this__attributes_copy_key
init|=
name|other_element_key
decl_stmt|;
name|ByteBuffer
name|__this__attributes_copy_value
init|=
name|other_element_value
decl_stmt|;
name|__this__attributes
operator|.
name|put
argument_list|(
name|__this__attributes_copy_key
argument_list|,
name|__this__attributes_copy_value
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|attributes
operator|=
name|__this__attributes
expr_stmt|;
block|}
block|}
specifier|public
name|getRowWithColumns_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|getRowWithColumns_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|==
literal|null
condition|?
literal|null
else|:
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of table      */
specifier|public
name|getRowWithColumns_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|tableName
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|getRowWithColumns_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * row key      */
specifier|public
name|byte
index|[]
name|getRow
parameter_list|()
block|{
name|setRow
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|row
operator|==
literal|null
condition|?
literal|null
else|:
name|row
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForRow
parameter_list|()
block|{
return|return
name|row
return|;
block|}
comment|/**      * row key      */
specifier|public
name|getRowWithColumns_args
name|setRow
parameter_list|(
name|byte
index|[]
name|row
parameter_list|)
block|{
name|setRow
argument_list|(
name|row
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|getRowWithColumns_args
name|setRow
parameter_list|(
name|ByteBuffer
name|row
parameter_list|)
block|{
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetRow
parameter_list|()
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field row is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetRow
parameter_list|()
block|{
return|return
name|this
operator|.
name|row
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setRowIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getColumnsSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|columns
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|columns
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|ByteBuffer
argument_list|>
name|getColumnsIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|columns
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|columns
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToColumns
parameter_list|(
name|ByteBuffer
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|columns
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|columns
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
comment|/**      * List of columns to return, null for all columns      */
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|getColumns
parameter_list|()
block|{
return|return
name|this
operator|.
name|columns
return|;
block|}
comment|/**      * List of columns to return, null for all columns      */
specifier|public
name|getRowWithColumns_args
name|setColumns
parameter_list|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|)
block|{
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetColumns
parameter_list|()
block|{
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field columns is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetColumns
parameter_list|()
block|{
return|return
name|this
operator|.
name|columns
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setColumnsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getAttributesSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|attributes
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|attributes
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|putToAttributes
parameter_list|(
name|ByteBuffer
name|key
parameter_list|,
name|ByteBuffer
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get attributes      */
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|getAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|attributes
return|;
block|}
comment|/**      * Get attributes      */
specifier|public
name|getRowWithColumns_args
name|setAttributes
parameter_list|(
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
block|{
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetAttributes
parameter_list|()
block|{
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field attributes is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|attributes
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setAttributesIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ROW
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetRow
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setRow
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|COLUMNS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetColumns
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setColumns
argument_list|(
operator|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ATTRIBUTES
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetAttributes
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setAttributes
argument_list|(
operator|(
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
case|case
name|ROW
case|:
return|return
name|getRow
argument_list|()
return|;
case|case
name|COLUMNS
case|:
return|return
name|getColumns
argument_list|()
return|;
case|case
name|ATTRIBUTES
case|:
return|return
name|getAttributes
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
case|case
name|ROW
case|:
return|return
name|isSetRow
argument_list|()
return|;
case|case
name|COLUMNS
case|:
return|return
name|isSetColumns
argument_list|()
return|;
case|case
name|ATTRIBUTES
case|:
return|return
name|isSetAttributes
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|getRowWithColumns_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|getRowWithColumns_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|getRowWithColumns_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_row
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
name|boolean
name|that_present_row
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_row
operator|||
name|that_present_row
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_row
operator|&&
name|that_present_row
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|row
operator|.
name|equals
argument_list|(
name|that
operator|.
name|row
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_columns
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetColumns
argument_list|()
decl_stmt|;
name|boolean
name|that_present_columns
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetColumns
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_columns
operator|||
name|that_present_columns
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_columns
operator|&&
name|that_present_columns
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|columns
operator|.
name|equals
argument_list|(
name|that
operator|.
name|columns
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_attributes
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetAttributes
argument_list|()
decl_stmt|;
name|boolean
name|that_present_attributes
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetAttributes
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_attributes
operator|||
name|that_present_attributes
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_attributes
operator|&&
name|that_present_attributes
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|attributes
operator|.
name|equals
argument_list|(
name|that
operator|.
name|attributes
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|getRowWithColumns_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|getRowWithColumns_args
name|typedOther
init|=
operator|(
name|getRowWithColumns_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetRow
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetRow
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetRow
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|row
argument_list|,
name|typedOther
operator|.
name|row
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetColumns
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetColumns
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetColumns
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|columns
argument_list|,
name|typedOther
operator|.
name|columns
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetAttributes
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetAttributes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetAttributes
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|attributes
argument_list|,
name|typedOther
operator|.
name|attributes
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getRowWithColumns_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"row:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|row
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"columns:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|columns
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|columns
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"attributes:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|attributes
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowWithColumns_argsStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getRowWithColumns_argsStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getRowWithColumns_argsStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowWithColumns_argsStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|getRowWithColumns_args
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|getRowWithColumns_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// ROW
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setRowIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// COLUMNS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list132
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|(
name|_list132
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i133
init|=
literal|0
init|;
name|_i133
operator|<
name|_list132
operator|.
name|size
condition|;
operator|++
name|_i133
control|)
block|{
name|ByteBuffer
name|_elem134
decl_stmt|;
comment|// optional
name|_elem134
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|columns
operator|.
name|add
argument_list|(
name|_elem134
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setColumnsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// ATTRIBUTES
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map135
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|(
literal|2
operator|*
name|_map135
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i136
init|=
literal|0
init|;
name|_i136
operator|<
name|_map135
operator|.
name|size
condition|;
operator|++
name|_i136
control|)
block|{
name|ByteBuffer
name|_key137
decl_stmt|;
comment|// required
name|ByteBuffer
name|_val138
decl_stmt|;
comment|// required
name|_key137
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val138
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|_key137
argument_list|,
name|_val138
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setAttributesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|getRowWithColumns_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|row
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ROW_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|row
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|columns
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|COLUMNS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|struct
operator|.
name|columns
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ByteBuffer
name|_iter139
range|:
name|struct
operator|.
name|columns
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter139
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|attributes
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ATTRIBUTES_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|struct
operator|.
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|_iter140
range|:
name|struct
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter140
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter140
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowWithColumns_argsTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getRowWithColumns_argsTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getRowWithColumns_argsTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowWithColumns_argsTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|getRowWithColumns_args
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getRowWithColumns_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetColumns
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|4
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|row
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetColumns
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|columns
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ByteBuffer
name|_iter141
range|:
name|struct
operator|.
name|columns
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter141
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|_iter142
range|:
name|struct
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter142
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter142
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getRowWithColumns_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setRowIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|2
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list143
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|(
name|_list143
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i144
init|=
literal|0
init|;
name|_i144
operator|<
name|_list143
operator|.
name|size
condition|;
operator|++
name|_i144
control|)
block|{
name|ByteBuffer
name|_elem145
decl_stmt|;
comment|// optional
name|_elem145
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|columns
operator|.
name|add
argument_list|(
name|_elem145
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setColumnsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|3
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map146
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|(
literal|2
operator|*
name|_map146
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i147
init|=
literal|0
init|;
name|_i147
operator|<
name|_map146
operator|.
name|size
condition|;
operator|++
name|_i147
control|)
block|{
name|ByteBuffer
name|_key148
decl_stmt|;
comment|// required
name|ByteBuffer
name|_val149
decl_stmt|;
comment|// required
name|_key148
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val149
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|_key148
argument_list|,
name|_val149
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setAttributesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|getRowWithColumns_result
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|getRowWithColumns_result
argument_list|,
name|getRowWithColumns_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"getRowWithColumns_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|getRowWithColumns_resultStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|getRowWithColumns_resultTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
decl_stmt|;
comment|// required
specifier|public
name|IOError
name|io
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|TRowResult
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|getRowWithColumns_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|getRowWithColumns_result
parameter_list|()
block|{     }
specifier|public
name|getRowWithColumns_result
parameter_list|(
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
parameter_list|,
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|getRowWithColumns_result
parameter_list|(
name|getRowWithColumns_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|TRowResult
argument_list|>
name|__this__success
init|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TRowResult
name|other_element
range|:
name|other
operator|.
name|success
control|)
block|{
name|__this__success
operator|.
name|add
argument_list|(
operator|new
name|TRowResult
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|=
name|__this__success
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|getRowWithColumns_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|getRowWithColumns_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|TRowResult
argument_list|>
name|getSuccessIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|success
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSuccess
parameter_list|(
name|TRowResult
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|getRowWithColumns_result
name|setSuccess
parameter_list|(
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|getRowWithColumns_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|List
argument_list|<
name|TRowResult
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|getRowWithColumns_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|getRowWithColumns_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|getRowWithColumns_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|getRowWithColumns_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|getRowWithColumns_result
name|typedOther
init|=
operator|(
name|getRowWithColumns_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getRowWithColumns_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowWithColumns_resultStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getRowWithColumns_resultStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getRowWithColumns_resultStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowWithColumns_resultStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|getRowWithColumns_result
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|getRowWithColumns_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list150
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|(
name|_list150
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i151
init|=
literal|0
init|;
name|_i151
operator|<
name|_list150
operator|.
name|size
condition|;
operator|++
name|_i151
control|)
block|{
name|TRowResult
name|_elem152
decl_stmt|;
comment|// optional
name|_elem152
operator|=
operator|new
name|TRowResult
argument_list|()
expr_stmt|;
name|_elem152
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem152
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|getRowWithColumns_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|success
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|struct
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TRowResult
name|_iter153
range|:
name|struct
operator|.
name|success
control|)
block|{
name|_iter153
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowWithColumns_resultTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getRowWithColumns_resultTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getRowWithColumns_resultTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowWithColumns_resultTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|getRowWithColumns_result
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getRowWithColumns_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TRowResult
name|_iter154
range|:
name|struct
operator|.
name|success
control|)
block|{
name|_iter154
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getRowWithColumns_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list155
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|(
name|_list155
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i156
init|=
literal|0
init|;
name|_i156
operator|<
name|_list155
operator|.
name|size
condition|;
operator|++
name|_i156
control|)
block|{
name|TRowResult
name|_elem157
decl_stmt|;
comment|// optional
name|_elem157
operator|=
operator|new
name|TRowResult
argument_list|()
expr_stmt|;
name|_elem157
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem157
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|getRowTs_args
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|getRowTs_args
argument_list|,
name|getRowTs_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"getRowTs_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ROW_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"row"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|TIMESTAMP_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"timestamp"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ATTRIBUTES_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"attributes"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|getRowTs_argsStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|getRowTs_argsTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * name of the table      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|// required
comment|/**      * row key      */
specifier|public
name|ByteBuffer
name|row
decl_stmt|;
comment|// required
comment|/**      * timestamp      */
specifier|public
name|long
name|timestamp
decl_stmt|;
comment|// required
comment|/**      * Get attributes      */
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
comment|/**        * name of the table        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|,
comment|/**        * row key        */
name|ROW
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"row"
argument_list|)
block|,
comment|/**        * timestamp        */
name|TIMESTAMP
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"timestamp"
argument_list|)
block|,
comment|/**        * Get attributes        */
name|ATTRIBUTES
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|,
literal|"attributes"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
case|case
literal|2
case|:
comment|// ROW
return|return
name|ROW
return|;
case|case
literal|3
case|:
comment|// TIMESTAMP
return|return
name|TIMESTAMP
return|;
case|case
literal|4
case|:
comment|// ATTRIBUTES
return|return
name|ATTRIBUTES
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__TIMESTAMP_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ROW
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"row"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TIMESTAMP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"timestamp"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ATTRIBUTES
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"attributes"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|MapMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|getRowTs_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|getRowTs_args
parameter_list|()
block|{     }
specifier|public
name|getRowTs_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|getRowTs_args
parameter_list|(
name|getRowTs_args
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|this
operator|.
name|row
operator|=
name|other
operator|.
name|row
expr_stmt|;
block|}
name|this
operator|.
name|timestamp
operator|=
name|other
operator|.
name|timestamp
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|__this__attributes
init|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|other_element
range|:
name|other
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ByteBuffer
name|other_element_key
init|=
name|other_element
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ByteBuffer
name|other_element_value
init|=
name|other_element
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ByteBuffer
name|__this__attributes_copy_key
init|=
name|other_element_key
decl_stmt|;
name|ByteBuffer
name|__this__attributes_copy_value
init|=
name|other_element_value
decl_stmt|;
name|__this__attributes
operator|.
name|put
argument_list|(
name|__this__attributes_copy_key
argument_list|,
name|__this__attributes_copy_value
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|attributes
operator|=
name|__this__attributes
expr_stmt|;
block|}
block|}
specifier|public
name|getRowTs_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|getRowTs_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * name of the table      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|==
literal|null
condition|?
literal|null
else|:
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of the table      */
specifier|public
name|getRowTs_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|tableName
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|getRowTs_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * row key      */
specifier|public
name|byte
index|[]
name|getRow
parameter_list|()
block|{
name|setRow
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|row
operator|==
literal|null
condition|?
literal|null
else|:
name|row
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForRow
parameter_list|()
block|{
return|return
name|row
return|;
block|}
comment|/**      * row key      */
specifier|public
name|getRowTs_args
name|setRow
parameter_list|(
name|byte
index|[]
name|row
parameter_list|)
block|{
name|setRow
argument_list|(
name|row
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|getRowTs_args
name|setRow
parameter_list|(
name|ByteBuffer
name|row
parameter_list|)
block|{
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetRow
parameter_list|()
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field row is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetRow
parameter_list|()
block|{
return|return
name|this
operator|.
name|row
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setRowIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * timestamp      */
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|this
operator|.
name|timestamp
return|;
block|}
comment|/**      * timestamp      */
specifier|public
name|getRowTs_args
name|setTimestamp
parameter_list|(
name|long
name|timestamp
parameter_list|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTimestamp
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTimestamp
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setTimestampIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getAttributesSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|attributes
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|attributes
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|putToAttributes
parameter_list|(
name|ByteBuffer
name|key
parameter_list|,
name|ByteBuffer
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get attributes      */
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|getAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|attributes
return|;
block|}
comment|/**      * Get attributes      */
specifier|public
name|getRowTs_args
name|setAttributes
parameter_list|(
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
block|{
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetAttributes
parameter_list|()
block|{
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field attributes is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|attributes
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setAttributesIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ROW
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetRow
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setRow
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TIMESTAMP
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTimestamp
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTimestamp
argument_list|(
operator|(
name|Long
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ATTRIBUTES
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetAttributes
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setAttributes
argument_list|(
operator|(
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
case|case
name|ROW
case|:
return|return
name|getRow
argument_list|()
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|getTimestamp
argument_list|()
argument_list|)
return|;
case|case
name|ATTRIBUTES
case|:
return|return
name|getAttributes
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
case|case
name|ROW
case|:
return|return
name|isSetRow
argument_list|()
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|isSetTimestamp
argument_list|()
return|;
case|case
name|ATTRIBUTES
case|:
return|return
name|isSetAttributes
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|getRowTs_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|getRowTs_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|getRowTs_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_row
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
name|boolean
name|that_present_row
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_row
operator|||
name|that_present_row
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_row
operator|&&
name|that_present_row
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|row
operator|.
name|equals
argument_list|(
name|that
operator|.
name|row
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_timestamp
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_timestamp
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_timestamp
operator|||
name|that_present_timestamp
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_timestamp
operator|&&
name|that_present_timestamp
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|timestamp
operator|!=
name|that
operator|.
name|timestamp
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_attributes
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetAttributes
argument_list|()
decl_stmt|;
name|boolean
name|that_present_attributes
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetAttributes
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_attributes
operator|||
name|that_present_attributes
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_attributes
operator|&&
name|that_present_attributes
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|attributes
operator|.
name|equals
argument_list|(
name|that
operator|.
name|attributes
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|getRowTs_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|getRowTs_args
name|typedOther
init|=
operator|(
name|getRowTs_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetRow
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetRow
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetRow
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|row
argument_list|,
name|typedOther
operator|.
name|row
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTimestamp
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTimestamp
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTimestamp
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|timestamp
argument_list|,
name|typedOther
operator|.
name|timestamp
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetAttributes
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetAttributes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetAttributes
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|attributes
argument_list|,
name|typedOther
operator|.
name|attributes
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getRowTs_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"row:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|row
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"timestamp:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"attributes:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|attributes
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
comment|// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
name|__isset_bit_vector
operator|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowTs_argsStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getRowTs_argsStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getRowTs_argsStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowTs_argsStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|getRowTs_args
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|getRowTs_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// ROW
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setRowIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// TIMESTAMP
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
condition|)
block|{
name|struct
operator|.
name|timestamp
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// ATTRIBUTES
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map158
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|(
literal|2
operator|*
name|_map158
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i159
init|=
literal|0
init|;
name|_i159
operator|<
name|_map158
operator|.
name|size
condition|;
operator|++
name|_i159
control|)
block|{
name|ByteBuffer
name|_key160
decl_stmt|;
comment|// required
name|ByteBuffer
name|_val161
decl_stmt|;
comment|// required
name|_key160
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val161
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|_key160
argument_list|,
name|_val161
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setAttributesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|getRowTs_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|row
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ROW_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|row
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TIMESTAMP_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI64
argument_list|(
name|struct
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|attributes
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ATTRIBUTES_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|struct
operator|.
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|_iter162
range|:
name|struct
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter162
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter162
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowTs_argsTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getRowTs_argsTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getRowTs_argsTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowTs_argsTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|getRowTs_args
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getRowTs_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetTimestamp
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|4
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|row
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetTimestamp
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI64
argument_list|(
name|struct
operator|.
name|timestamp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|_iter163
range|:
name|struct
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter163
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter163
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getRowTs_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setRowIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|struct
operator|.
name|timestamp
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|3
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map164
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|(
literal|2
operator|*
name|_map164
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i165
init|=
literal|0
init|;
name|_i165
operator|<
name|_map164
operator|.
name|size
condition|;
operator|++
name|_i165
control|)
block|{
name|ByteBuffer
name|_key166
decl_stmt|;
comment|// required
name|ByteBuffer
name|_val167
decl_stmt|;
comment|// required
name|_key166
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val167
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|_key166
argument_list|,
name|_val167
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setAttributesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|getRowTs_result
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|getRowTs_result
argument_list|,
name|getRowTs_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"getRowTs_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|getRowTs_resultStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|getRowTs_resultTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
decl_stmt|;
comment|// required
specifier|public
name|IOError
name|io
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|TRowResult
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|getRowTs_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|getRowTs_result
parameter_list|()
block|{     }
specifier|public
name|getRowTs_result
parameter_list|(
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
parameter_list|,
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|getRowTs_result
parameter_list|(
name|getRowTs_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|TRowResult
argument_list|>
name|__this__success
init|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TRowResult
name|other_element
range|:
name|other
operator|.
name|success
control|)
block|{
name|__this__success
operator|.
name|add
argument_list|(
operator|new
name|TRowResult
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|=
name|__this__success
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|getRowTs_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|getRowTs_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|TRowResult
argument_list|>
name|getSuccessIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|success
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSuccess
parameter_list|(
name|TRowResult
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|getRowTs_result
name|setSuccess
parameter_list|(
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|getRowTs_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|List
argument_list|<
name|TRowResult
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|getRowTs_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|getRowTs_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|getRowTs_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|getRowTs_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|getRowTs_result
name|typedOther
init|=
operator|(
name|getRowTs_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getRowTs_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowTs_resultStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getRowTs_resultStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getRowTs_resultStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowTs_resultStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|getRowTs_result
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|getRowTs_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list168
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|(
name|_list168
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i169
init|=
literal|0
init|;
name|_i169
operator|<
name|_list168
operator|.
name|size
condition|;
operator|++
name|_i169
control|)
block|{
name|TRowResult
name|_elem170
decl_stmt|;
comment|// optional
name|_elem170
operator|=
operator|new
name|TRowResult
argument_list|()
expr_stmt|;
name|_elem170
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem170
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|getRowTs_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|success
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|struct
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TRowResult
name|_iter171
range|:
name|struct
operator|.
name|success
control|)
block|{
name|_iter171
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowTs_resultTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getRowTs_resultTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getRowTs_resultTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowTs_resultTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|getRowTs_result
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getRowTs_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TRowResult
name|_iter172
range|:
name|struct
operator|.
name|success
control|)
block|{
name|_iter172
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getRowTs_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list173
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|(
name|_list173
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i174
init|=
literal|0
init|;
name|_i174
operator|<
name|_list173
operator|.
name|size
condition|;
operator|++
name|_i174
control|)
block|{
name|TRowResult
name|_elem175
decl_stmt|;
comment|// optional
name|_elem175
operator|=
operator|new
name|TRowResult
argument_list|()
expr_stmt|;
name|_elem175
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem175
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|getRowWithColumnsTs_args
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|getRowWithColumnsTs_args
argument_list|,
name|getRowWithColumnsTs_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"getRowWithColumnsTs_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ROW_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"row"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|COLUMNS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"columns"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|TIMESTAMP_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"timestamp"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ATTRIBUTES_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"attributes"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|(
name|short
operator|)
literal|5
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|getRowWithColumnsTs_argsStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|getRowWithColumnsTs_argsTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|// required
comment|/**      * row key      */
specifier|public
name|ByteBuffer
name|row
decl_stmt|;
comment|// required
comment|/**      * List of columns to return, null for all columns      */
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
decl_stmt|;
comment|// required
specifier|public
name|long
name|timestamp
decl_stmt|;
comment|// required
comment|/**      * Get attributes      */
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
comment|/**        * name of table        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|,
comment|/**        * row key        */
name|ROW
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"row"
argument_list|)
block|,
comment|/**        * List of columns to return, null for all columns        */
name|COLUMNS
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"columns"
argument_list|)
block|,
name|TIMESTAMP
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|,
literal|"timestamp"
argument_list|)
block|,
comment|/**        * Get attributes        */
name|ATTRIBUTES
argument_list|(
operator|(
name|short
operator|)
literal|5
argument_list|,
literal|"attributes"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
case|case
literal|2
case|:
comment|// ROW
return|return
name|ROW
return|;
case|case
literal|3
case|:
comment|// COLUMNS
return|return
name|COLUMNS
return|;
case|case
literal|4
case|:
comment|// TIMESTAMP
return|return
name|TIMESTAMP
return|;
case|case
literal|5
case|:
comment|// ATTRIBUTES
return|return
name|ATTRIBUTES
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__TIMESTAMP_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ROW
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"row"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|COLUMNS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"columns"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TIMESTAMP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"timestamp"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ATTRIBUTES
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"attributes"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|MapMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|getRowWithColumnsTs_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|getRowWithColumnsTs_args
parameter_list|()
block|{     }
specifier|public
name|getRowWithColumnsTs_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|getRowWithColumnsTs_args
parameter_list|(
name|getRowWithColumnsTs_args
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|this
operator|.
name|row
operator|=
name|other
operator|.
name|row
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetColumns
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|__this__columns
init|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ByteBuffer
name|other_element
range|:
name|other
operator|.
name|columns
control|)
block|{
name|__this__columns
operator|.
name|add
argument_list|(
name|other_element
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|columns
operator|=
name|__this__columns
expr_stmt|;
block|}
name|this
operator|.
name|timestamp
operator|=
name|other
operator|.
name|timestamp
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|__this__attributes
init|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|other_element
range|:
name|other
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ByteBuffer
name|other_element_key
init|=
name|other_element
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ByteBuffer
name|other_element_value
init|=
name|other_element
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ByteBuffer
name|__this__attributes_copy_key
init|=
name|other_element_key
decl_stmt|;
name|ByteBuffer
name|__this__attributes_copy_value
init|=
name|other_element_value
decl_stmt|;
name|__this__attributes
operator|.
name|put
argument_list|(
name|__this__attributes_copy_key
argument_list|,
name|__this__attributes_copy_value
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|attributes
operator|=
name|__this__attributes
expr_stmt|;
block|}
block|}
specifier|public
name|getRowWithColumnsTs_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|getRowWithColumnsTs_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|==
literal|null
condition|?
literal|null
else|:
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of table      */
specifier|public
name|getRowWithColumnsTs_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|tableName
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|getRowWithColumnsTs_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * row key      */
specifier|public
name|byte
index|[]
name|getRow
parameter_list|()
block|{
name|setRow
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|row
operator|==
literal|null
condition|?
literal|null
else|:
name|row
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForRow
parameter_list|()
block|{
return|return
name|row
return|;
block|}
comment|/**      * row key      */
specifier|public
name|getRowWithColumnsTs_args
name|setRow
parameter_list|(
name|byte
index|[]
name|row
parameter_list|)
block|{
name|setRow
argument_list|(
name|row
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|getRowWithColumnsTs_args
name|setRow
parameter_list|(
name|ByteBuffer
name|row
parameter_list|)
block|{
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetRow
parameter_list|()
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field row is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetRow
parameter_list|()
block|{
return|return
name|this
operator|.
name|row
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setRowIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getColumnsSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|columns
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|columns
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|ByteBuffer
argument_list|>
name|getColumnsIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|columns
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|columns
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToColumns
parameter_list|(
name|ByteBuffer
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|columns
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|columns
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
comment|/**      * List of columns to return, null for all columns      */
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|getColumns
parameter_list|()
block|{
return|return
name|this
operator|.
name|columns
return|;
block|}
comment|/**      * List of columns to return, null for all columns      */
specifier|public
name|getRowWithColumnsTs_args
name|setColumns
parameter_list|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|)
block|{
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetColumns
parameter_list|()
block|{
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field columns is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetColumns
parameter_list|()
block|{
return|return
name|this
operator|.
name|columns
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setColumnsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|this
operator|.
name|timestamp
return|;
block|}
specifier|public
name|getRowWithColumnsTs_args
name|setTimestamp
parameter_list|(
name|long
name|timestamp
parameter_list|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTimestamp
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTimestamp
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setTimestampIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getAttributesSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|attributes
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|attributes
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|putToAttributes
parameter_list|(
name|ByteBuffer
name|key
parameter_list|,
name|ByteBuffer
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get attributes      */
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|getAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|attributes
return|;
block|}
comment|/**      * Get attributes      */
specifier|public
name|getRowWithColumnsTs_args
name|setAttributes
parameter_list|(
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
block|{
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetAttributes
parameter_list|()
block|{
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field attributes is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|attributes
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setAttributesIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ROW
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetRow
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setRow
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|COLUMNS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetColumns
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setColumns
argument_list|(
operator|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TIMESTAMP
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTimestamp
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTimestamp
argument_list|(
operator|(
name|Long
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ATTRIBUTES
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetAttributes
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setAttributes
argument_list|(
operator|(
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
case|case
name|ROW
case|:
return|return
name|getRow
argument_list|()
return|;
case|case
name|COLUMNS
case|:
return|return
name|getColumns
argument_list|()
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|getTimestamp
argument_list|()
argument_list|)
return|;
case|case
name|ATTRIBUTES
case|:
return|return
name|getAttributes
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
case|case
name|ROW
case|:
return|return
name|isSetRow
argument_list|()
return|;
case|case
name|COLUMNS
case|:
return|return
name|isSetColumns
argument_list|()
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|isSetTimestamp
argument_list|()
return|;
case|case
name|ATTRIBUTES
case|:
return|return
name|isSetAttributes
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|getRowWithColumnsTs_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|getRowWithColumnsTs_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|getRowWithColumnsTs_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_row
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
name|boolean
name|that_present_row
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_row
operator|||
name|that_present_row
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_row
operator|&&
name|that_present_row
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|row
operator|.
name|equals
argument_list|(
name|that
operator|.
name|row
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_columns
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetColumns
argument_list|()
decl_stmt|;
name|boolean
name|that_present_columns
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetColumns
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_columns
operator|||
name|that_present_columns
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_columns
operator|&&
name|that_present_columns
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|columns
operator|.
name|equals
argument_list|(
name|that
operator|.
name|columns
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_timestamp
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_timestamp
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_timestamp
operator|||
name|that_present_timestamp
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_timestamp
operator|&&
name|that_present_timestamp
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|timestamp
operator|!=
name|that
operator|.
name|timestamp
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_attributes
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetAttributes
argument_list|()
decl_stmt|;
name|boolean
name|that_present_attributes
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetAttributes
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_attributes
operator|||
name|that_present_attributes
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_attributes
operator|&&
name|that_present_attributes
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|attributes
operator|.
name|equals
argument_list|(
name|that
operator|.
name|attributes
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|getRowWithColumnsTs_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|getRowWithColumnsTs_args
name|typedOther
init|=
operator|(
name|getRowWithColumnsTs_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetRow
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetRow
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetRow
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|row
argument_list|,
name|typedOther
operator|.
name|row
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetColumns
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetColumns
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetColumns
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|columns
argument_list|,
name|typedOther
operator|.
name|columns
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTimestamp
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTimestamp
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTimestamp
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|timestamp
argument_list|,
name|typedOther
operator|.
name|timestamp
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetAttributes
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetAttributes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetAttributes
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|attributes
argument_list|,
name|typedOther
operator|.
name|attributes
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getRowWithColumnsTs_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"row:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|row
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"columns:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|columns
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|columns
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"timestamp:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"attributes:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|attributes
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
comment|// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
name|__isset_bit_vector
operator|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowWithColumnsTs_argsStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getRowWithColumnsTs_argsStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getRowWithColumnsTs_argsStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowWithColumnsTs_argsStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|getRowWithColumnsTs_args
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|getRowWithColumnsTs_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// ROW
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setRowIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// COLUMNS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list176
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|(
name|_list176
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i177
init|=
literal|0
init|;
name|_i177
operator|<
name|_list176
operator|.
name|size
condition|;
operator|++
name|_i177
control|)
block|{
name|ByteBuffer
name|_elem178
decl_stmt|;
comment|// optional
name|_elem178
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|columns
operator|.
name|add
argument_list|(
name|_elem178
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setColumnsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// TIMESTAMP
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
condition|)
block|{
name|struct
operator|.
name|timestamp
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|5
case|:
comment|// ATTRIBUTES
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map179
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|(
literal|2
operator|*
name|_map179
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i180
init|=
literal|0
init|;
name|_i180
operator|<
name|_map179
operator|.
name|size
condition|;
operator|++
name|_i180
control|)
block|{
name|ByteBuffer
name|_key181
decl_stmt|;
comment|// required
name|ByteBuffer
name|_val182
decl_stmt|;
comment|// required
name|_key181
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val182
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|_key181
argument_list|,
name|_val182
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setAttributesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|getRowWithColumnsTs_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|row
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ROW_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|row
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|columns
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|COLUMNS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|struct
operator|.
name|columns
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ByteBuffer
name|_iter183
range|:
name|struct
operator|.
name|columns
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter183
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TIMESTAMP_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI64
argument_list|(
name|struct
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|attributes
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ATTRIBUTES_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|struct
operator|.
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|_iter184
range|:
name|struct
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter184
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter184
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowWithColumnsTs_argsTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getRowWithColumnsTs_argsTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getRowWithColumnsTs_argsTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowWithColumnsTs_argsTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|getRowWithColumnsTs_args
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getRowWithColumnsTs_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetColumns
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetTimestamp
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|5
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|row
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetColumns
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|columns
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ByteBuffer
name|_iter185
range|:
name|struct
operator|.
name|columns
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter185
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetTimestamp
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI64
argument_list|(
name|struct
operator|.
name|timestamp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|_iter186
range|:
name|struct
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter186
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter186
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getRowWithColumnsTs_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setRowIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|2
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list187
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|(
name|_list187
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i188
init|=
literal|0
init|;
name|_i188
operator|<
name|_list187
operator|.
name|size
condition|;
operator|++
name|_i188
control|)
block|{
name|ByteBuffer
name|_elem189
decl_stmt|;
comment|// optional
name|_elem189
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|columns
operator|.
name|add
argument_list|(
name|_elem189
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setColumnsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|3
argument_list|)
condition|)
block|{
name|struct
operator|.
name|timestamp
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|4
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map190
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|(
literal|2
operator|*
name|_map190
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i191
init|=
literal|0
init|;
name|_i191
operator|<
name|_map190
operator|.
name|size
condition|;
operator|++
name|_i191
control|)
block|{
name|ByteBuffer
name|_key192
decl_stmt|;
comment|// required
name|ByteBuffer
name|_val193
decl_stmt|;
comment|// required
name|_key192
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val193
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|_key192
argument_list|,
name|_val193
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setAttributesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|getRowWithColumnsTs_result
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|getRowWithColumnsTs_result
argument_list|,
name|getRowWithColumnsTs_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"getRowWithColumnsTs_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|getRowWithColumnsTs_resultStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|getRowWithColumnsTs_resultTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
decl_stmt|;
comment|// required
specifier|public
name|IOError
name|io
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|TRowResult
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|getRowWithColumnsTs_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|getRowWithColumnsTs_result
parameter_list|()
block|{     }
specifier|public
name|getRowWithColumnsTs_result
parameter_list|(
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
parameter_list|,
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|getRowWithColumnsTs_result
parameter_list|(
name|getRowWithColumnsTs_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|TRowResult
argument_list|>
name|__this__success
init|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TRowResult
name|other_element
range|:
name|other
operator|.
name|success
control|)
block|{
name|__this__success
operator|.
name|add
argument_list|(
operator|new
name|TRowResult
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|=
name|__this__success
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|getRowWithColumnsTs_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|getRowWithColumnsTs_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|TRowResult
argument_list|>
name|getSuccessIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|success
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSuccess
parameter_list|(
name|TRowResult
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|getRowWithColumnsTs_result
name|setSuccess
parameter_list|(
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|getRowWithColumnsTs_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|List
argument_list|<
name|TRowResult
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|getRowWithColumnsTs_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|getRowWithColumnsTs_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|getRowWithColumnsTs_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|getRowWithColumnsTs_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|getRowWithColumnsTs_result
name|typedOther
init|=
operator|(
name|getRowWithColumnsTs_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getRowWithColumnsTs_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowWithColumnsTs_resultStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getRowWithColumnsTs_resultStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getRowWithColumnsTs_resultStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowWithColumnsTs_resultStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|getRowWithColumnsTs_result
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|getRowWithColumnsTs_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list194
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|(
name|_list194
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i195
init|=
literal|0
init|;
name|_i195
operator|<
name|_list194
operator|.
name|size
condition|;
operator|++
name|_i195
control|)
block|{
name|TRowResult
name|_elem196
decl_stmt|;
comment|// optional
name|_elem196
operator|=
operator|new
name|TRowResult
argument_list|()
expr_stmt|;
name|_elem196
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem196
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|getRowWithColumnsTs_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|success
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|struct
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TRowResult
name|_iter197
range|:
name|struct
operator|.
name|success
control|)
block|{
name|_iter197
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowWithColumnsTs_resultTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getRowWithColumnsTs_resultTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getRowWithColumnsTs_resultTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowWithColumnsTs_resultTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|getRowWithColumnsTs_result
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getRowWithColumnsTs_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TRowResult
name|_iter198
range|:
name|struct
operator|.
name|success
control|)
block|{
name|_iter198
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getRowWithColumnsTs_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list199
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|(
name|_list199
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i200
init|=
literal|0
init|;
name|_i200
operator|<
name|_list199
operator|.
name|size
condition|;
operator|++
name|_i200
control|)
block|{
name|TRowResult
name|_elem201
decl_stmt|;
comment|// optional
name|_elem201
operator|=
operator|new
name|TRowResult
argument_list|()
expr_stmt|;
name|_elem201
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem201
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|getRows_args
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|getRows_args
argument_list|,
name|getRows_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"getRows_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ROWS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"rows"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ATTRIBUTES_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"attributes"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|getRows_argsStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|getRows_argsTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|// required
comment|/**      * row keys      */
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
decl_stmt|;
comment|// required
comment|/**      * Get attributes      */
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
comment|/**        * name of table        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|,
comment|/**        * row keys        */
name|ROWS
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"rows"
argument_list|)
block|,
comment|/**        * Get attributes        */
name|ATTRIBUTES
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"attributes"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
case|case
literal|2
case|:
comment|// ROWS
return|return
name|ROWS
return|;
case|case
literal|3
case|:
comment|// ATTRIBUTES
return|return
name|ATTRIBUTES
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ROWS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"rows"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ATTRIBUTES
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"attributes"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|MapMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|getRows_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|getRows_args
parameter_list|()
block|{     }
specifier|public
name|getRows_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|rows
operator|=
name|rows
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|getRows_args
parameter_list|(
name|getRows_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetRows
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|__this__rows
init|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ByteBuffer
name|other_element
range|:
name|other
operator|.
name|rows
control|)
block|{
name|__this__rows
operator|.
name|add
argument_list|(
name|other_element
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|rows
operator|=
name|__this__rows
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|__this__attributes
init|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|other_element
range|:
name|other
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ByteBuffer
name|other_element_key
init|=
name|other_element
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ByteBuffer
name|other_element_value
init|=
name|other_element
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ByteBuffer
name|__this__attributes_copy_key
init|=
name|other_element_key
decl_stmt|;
name|ByteBuffer
name|__this__attributes_copy_value
init|=
name|other_element_value
decl_stmt|;
name|__this__attributes
operator|.
name|put
argument_list|(
name|__this__attributes_copy_key
argument_list|,
name|__this__attributes_copy_value
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|attributes
operator|=
name|__this__attributes
expr_stmt|;
block|}
block|}
specifier|public
name|getRows_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|getRows_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|rows
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|==
literal|null
condition|?
literal|null
else|:
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of table      */
specifier|public
name|getRows_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|tableName
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|getRows_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getRowsSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|rows
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|rows
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|ByteBuffer
argument_list|>
name|getRowsIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|rows
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|rows
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToRows
parameter_list|(
name|ByteBuffer
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|rows
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|rows
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|rows
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
comment|/**      * row keys      */
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|getRows
parameter_list|()
block|{
return|return
name|this
operator|.
name|rows
return|;
block|}
comment|/**      * row keys      */
specifier|public
name|getRows_args
name|setRows
parameter_list|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|)
block|{
name|this
operator|.
name|rows
operator|=
name|rows
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetRows
parameter_list|()
block|{
name|this
operator|.
name|rows
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field rows is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetRows
parameter_list|()
block|{
return|return
name|this
operator|.
name|rows
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setRowsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|rows
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getAttributesSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|attributes
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|attributes
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|putToAttributes
parameter_list|(
name|ByteBuffer
name|key
parameter_list|,
name|ByteBuffer
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get attributes      */
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|getAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|attributes
return|;
block|}
comment|/**      * Get attributes      */
specifier|public
name|getRows_args
name|setAttributes
parameter_list|(
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
block|{
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetAttributes
parameter_list|()
block|{
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field attributes is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|attributes
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setAttributesIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ROWS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetRows
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setRows
argument_list|(
operator|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ATTRIBUTES
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetAttributes
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setAttributes
argument_list|(
operator|(
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
case|case
name|ROWS
case|:
return|return
name|getRows
argument_list|()
return|;
case|case
name|ATTRIBUTES
case|:
return|return
name|getAttributes
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
case|case
name|ROWS
case|:
return|return
name|isSetRows
argument_list|()
return|;
case|case
name|ATTRIBUTES
case|:
return|return
name|isSetAttributes
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|getRows_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|getRows_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|getRows_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_rows
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetRows
argument_list|()
decl_stmt|;
name|boolean
name|that_present_rows
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetRows
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_rows
operator|||
name|that_present_rows
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_rows
operator|&&
name|that_present_rows
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|rows
operator|.
name|equals
argument_list|(
name|that
operator|.
name|rows
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_attributes
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetAttributes
argument_list|()
decl_stmt|;
name|boolean
name|that_present_attributes
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetAttributes
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_attributes
operator|||
name|that_present_attributes
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_attributes
operator|&&
name|that_present_attributes
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|attributes
operator|.
name|equals
argument_list|(
name|that
operator|.
name|attributes
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|getRows_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|getRows_args
name|typedOther
init|=
operator|(
name|getRows_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetRows
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetRows
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetRows
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|rows
argument_list|,
name|typedOther
operator|.
name|rows
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetAttributes
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetAttributes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetAttributes
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|attributes
argument_list|,
name|typedOther
operator|.
name|attributes
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getRows_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"rows:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|rows
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|rows
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"attributes:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|attributes
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRows_argsStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getRows_argsStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getRows_argsStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRows_argsStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|getRows_args
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|getRows_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// ROWS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list202
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|rows
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|(
name|_list202
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i203
init|=
literal|0
init|;
name|_i203
operator|<
name|_list202
operator|.
name|size
condition|;
operator|++
name|_i203
control|)
block|{
name|ByteBuffer
name|_elem204
decl_stmt|;
comment|// optional
name|_elem204
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|rows
operator|.
name|add
argument_list|(
name|_elem204
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setRowsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// ATTRIBUTES
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map205
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|(
literal|2
operator|*
name|_map205
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i206
init|=
literal|0
init|;
name|_i206
operator|<
name|_map205
operator|.
name|size
condition|;
operator|++
name|_i206
control|)
block|{
name|ByteBuffer
name|_key207
decl_stmt|;
comment|// required
name|ByteBuffer
name|_val208
decl_stmt|;
comment|// required
name|_key207
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val208
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|_key207
argument_list|,
name|_val208
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setAttributesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|getRows_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|rows
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ROWS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|struct
operator|.
name|rows
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ByteBuffer
name|_iter209
range|:
name|struct
operator|.
name|rows
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter209
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|attributes
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ATTRIBUTES_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|struct
operator|.
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|_iter210
range|:
name|struct
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter210
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter210
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRows_argsTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getRows_argsTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getRows_argsTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRows_argsTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|getRows_args
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getRows_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetRows
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|3
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetRows
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|rows
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ByteBuffer
name|_iter211
range|:
name|struct
operator|.
name|rows
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter211
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|_iter212
range|:
name|struct
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter212
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter212
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getRows_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list213
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|rows
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|(
name|_list213
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i214
init|=
literal|0
init|;
name|_i214
operator|<
name|_list213
operator|.
name|size
condition|;
operator|++
name|_i214
control|)
block|{
name|ByteBuffer
name|_elem215
decl_stmt|;
comment|// optional
name|_elem215
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|rows
operator|.
name|add
argument_list|(
name|_elem215
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setRowsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|2
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map216
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|(
literal|2
operator|*
name|_map216
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i217
init|=
literal|0
init|;
name|_i217
operator|<
name|_map216
operator|.
name|size
condition|;
operator|++
name|_i217
control|)
block|{
name|ByteBuffer
name|_key218
decl_stmt|;
comment|// required
name|ByteBuffer
name|_val219
decl_stmt|;
comment|// required
name|_key218
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val219
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|_key218
argument_list|,
name|_val219
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setAttributesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|getRows_result
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|getRows_result
argument_list|,
name|getRows_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"getRows_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|getRows_resultStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|getRows_resultTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
decl_stmt|;
comment|// required
specifier|public
name|IOError
name|io
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|TRowResult
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|getRows_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|getRows_result
parameter_list|()
block|{     }
specifier|public
name|getRows_result
parameter_list|(
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
parameter_list|,
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|getRows_result
parameter_list|(
name|getRows_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|TRowResult
argument_list|>
name|__this__success
init|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TRowResult
name|other_element
range|:
name|other
operator|.
name|success
control|)
block|{
name|__this__success
operator|.
name|add
argument_list|(
operator|new
name|TRowResult
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|=
name|__this__success
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|getRows_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|getRows_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|TRowResult
argument_list|>
name|getSuccessIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|success
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSuccess
parameter_list|(
name|TRowResult
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|getRows_result
name|setSuccess
parameter_list|(
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|getRows_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|List
argument_list|<
name|TRowResult
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|getRows_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|getRows_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|getRows_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|getRows_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|getRows_result
name|typedOther
init|=
operator|(
name|getRows_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getRows_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRows_resultStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getRows_resultStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getRows_resultStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRows_resultStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|getRows_result
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|getRows_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list220
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|(
name|_list220
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i221
init|=
literal|0
init|;
name|_i221
operator|<
name|_list220
operator|.
name|size
condition|;
operator|++
name|_i221
control|)
block|{
name|TRowResult
name|_elem222
decl_stmt|;
comment|// optional
name|_elem222
operator|=
operator|new
name|TRowResult
argument_list|()
expr_stmt|;
name|_elem222
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem222
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|getRows_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|success
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|struct
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TRowResult
name|_iter223
range|:
name|struct
operator|.
name|success
control|)
block|{
name|_iter223
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRows_resultTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getRows_resultTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getRows_resultTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRows_resultTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|getRows_result
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getRows_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TRowResult
name|_iter224
range|:
name|struct
operator|.
name|success
control|)
block|{
name|_iter224
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getRows_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list225
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|(
name|_list225
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i226
init|=
literal|0
init|;
name|_i226
operator|<
name|_list225
operator|.
name|size
condition|;
operator|++
name|_i226
control|)
block|{
name|TRowResult
name|_elem227
decl_stmt|;
comment|// optional
name|_elem227
operator|=
operator|new
name|TRowResult
argument_list|()
expr_stmt|;
name|_elem227
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem227
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|getRowsWithColumns_args
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|getRowsWithColumns_args
argument_list|,
name|getRowsWithColumns_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"getRowsWithColumns_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ROWS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"rows"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|COLUMNS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"columns"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ATTRIBUTES_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"attributes"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|getRowsWithColumns_argsStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|getRowsWithColumns_argsTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|// required
comment|/**      * row keys      */
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
decl_stmt|;
comment|// required
comment|/**      * List of columns to return, null for all columns      */
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
decl_stmt|;
comment|// required
comment|/**      * Get attributes      */
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
comment|/**        * name of table        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|,
comment|/**        * row keys        */
name|ROWS
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"rows"
argument_list|)
block|,
comment|/**        * List of columns to return, null for all columns        */
name|COLUMNS
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"columns"
argument_list|)
block|,
comment|/**        * Get attributes        */
name|ATTRIBUTES
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|,
literal|"attributes"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
case|case
literal|2
case|:
comment|// ROWS
return|return
name|ROWS
return|;
case|case
literal|3
case|:
comment|// COLUMNS
return|return
name|COLUMNS
return|;
case|case
literal|4
case|:
comment|// ATTRIBUTES
return|return
name|ATTRIBUTES
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ROWS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"rows"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|COLUMNS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"columns"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ATTRIBUTES
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"attributes"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|MapMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|getRowsWithColumns_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|getRowsWithColumns_args
parameter_list|()
block|{     }
specifier|public
name|getRowsWithColumns_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|rows
operator|=
name|rows
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|getRowsWithColumns_args
parameter_list|(
name|getRowsWithColumns_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetRows
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|__this__rows
init|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ByteBuffer
name|other_element
range|:
name|other
operator|.
name|rows
control|)
block|{
name|__this__rows
operator|.
name|add
argument_list|(
name|other_element
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|rows
operator|=
name|__this__rows
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetColumns
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|__this__columns
init|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ByteBuffer
name|other_element
range|:
name|other
operator|.
name|columns
control|)
block|{
name|__this__columns
operator|.
name|add
argument_list|(
name|other_element
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|columns
operator|=
name|__this__columns
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|__this__attributes
init|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|other_element
range|:
name|other
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ByteBuffer
name|other_element_key
init|=
name|other_element
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ByteBuffer
name|other_element_value
init|=
name|other_element
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ByteBuffer
name|__this__attributes_copy_key
init|=
name|other_element_key
decl_stmt|;
name|ByteBuffer
name|__this__attributes_copy_value
init|=
name|other_element_value
decl_stmt|;
name|__this__attributes
operator|.
name|put
argument_list|(
name|__this__attributes_copy_key
argument_list|,
name|__this__attributes_copy_value
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|attributes
operator|=
name|__this__attributes
expr_stmt|;
block|}
block|}
specifier|public
name|getRowsWithColumns_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|getRowsWithColumns_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|rows
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|==
literal|null
condition|?
literal|null
else|:
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of table      */
specifier|public
name|getRowsWithColumns_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|tableName
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|getRowsWithColumns_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getRowsSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|rows
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|rows
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|ByteBuffer
argument_list|>
name|getRowsIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|rows
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|rows
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToRows
parameter_list|(
name|ByteBuffer
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|rows
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|rows
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|rows
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
comment|/**      * row keys      */
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|getRows
parameter_list|()
block|{
return|return
name|this
operator|.
name|rows
return|;
block|}
comment|/**      * row keys      */
specifier|public
name|getRowsWithColumns_args
name|setRows
parameter_list|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|)
block|{
name|this
operator|.
name|rows
operator|=
name|rows
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetRows
parameter_list|()
block|{
name|this
operator|.
name|rows
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field rows is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetRows
parameter_list|()
block|{
return|return
name|this
operator|.
name|rows
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setRowsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|rows
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getColumnsSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|columns
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|columns
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|ByteBuffer
argument_list|>
name|getColumnsIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|columns
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|columns
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToColumns
parameter_list|(
name|ByteBuffer
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|columns
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|columns
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
comment|/**      * List of columns to return, null for all columns      */
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|getColumns
parameter_list|()
block|{
return|return
name|this
operator|.
name|columns
return|;
block|}
comment|/**      * List of columns to return, null for all columns      */
specifier|public
name|getRowsWithColumns_args
name|setColumns
parameter_list|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|)
block|{
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetColumns
parameter_list|()
block|{
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field columns is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetColumns
parameter_list|()
block|{
return|return
name|this
operator|.
name|columns
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setColumnsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getAttributesSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|attributes
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|attributes
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|putToAttributes
parameter_list|(
name|ByteBuffer
name|key
parameter_list|,
name|ByteBuffer
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get attributes      */
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|getAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|attributes
return|;
block|}
comment|/**      * Get attributes      */
specifier|public
name|getRowsWithColumns_args
name|setAttributes
parameter_list|(
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
block|{
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetAttributes
parameter_list|()
block|{
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field attributes is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|attributes
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setAttributesIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ROWS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetRows
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setRows
argument_list|(
operator|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|COLUMNS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetColumns
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setColumns
argument_list|(
operator|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ATTRIBUTES
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetAttributes
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setAttributes
argument_list|(
operator|(
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
case|case
name|ROWS
case|:
return|return
name|getRows
argument_list|()
return|;
case|case
name|COLUMNS
case|:
return|return
name|getColumns
argument_list|()
return|;
case|case
name|ATTRIBUTES
case|:
return|return
name|getAttributes
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
case|case
name|ROWS
case|:
return|return
name|isSetRows
argument_list|()
return|;
case|case
name|COLUMNS
case|:
return|return
name|isSetColumns
argument_list|()
return|;
case|case
name|ATTRIBUTES
case|:
return|return
name|isSetAttributes
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|getRowsWithColumns_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|getRowsWithColumns_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|getRowsWithColumns_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_rows
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetRows
argument_list|()
decl_stmt|;
name|boolean
name|that_present_rows
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetRows
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_rows
operator|||
name|that_present_rows
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_rows
operator|&&
name|that_present_rows
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|rows
operator|.
name|equals
argument_list|(
name|that
operator|.
name|rows
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_columns
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetColumns
argument_list|()
decl_stmt|;
name|boolean
name|that_present_columns
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetColumns
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_columns
operator|||
name|that_present_columns
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_columns
operator|&&
name|that_present_columns
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|columns
operator|.
name|equals
argument_list|(
name|that
operator|.
name|columns
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_attributes
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetAttributes
argument_list|()
decl_stmt|;
name|boolean
name|that_present_attributes
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetAttributes
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_attributes
operator|||
name|that_present_attributes
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_attributes
operator|&&
name|that_present_attributes
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|attributes
operator|.
name|equals
argument_list|(
name|that
operator|.
name|attributes
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|getRowsWithColumns_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|getRowsWithColumns_args
name|typedOther
init|=
operator|(
name|getRowsWithColumns_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetRows
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetRows
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetRows
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|rows
argument_list|,
name|typedOther
operator|.
name|rows
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetColumns
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetColumns
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetColumns
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|columns
argument_list|,
name|typedOther
operator|.
name|columns
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetAttributes
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetAttributes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetAttributes
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|attributes
argument_list|,
name|typedOther
operator|.
name|attributes
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getRowsWithColumns_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"rows:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|rows
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|rows
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"columns:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|columns
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|columns
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"attributes:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|attributes
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowsWithColumns_argsStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getRowsWithColumns_argsStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getRowsWithColumns_argsStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowsWithColumns_argsStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|getRowsWithColumns_args
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|getRowsWithColumns_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// ROWS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list228
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|rows
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|(
name|_list228
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i229
init|=
literal|0
init|;
name|_i229
operator|<
name|_list228
operator|.
name|size
condition|;
operator|++
name|_i229
control|)
block|{
name|ByteBuffer
name|_elem230
decl_stmt|;
comment|// optional
name|_elem230
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|rows
operator|.
name|add
argument_list|(
name|_elem230
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setRowsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// COLUMNS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list231
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|(
name|_list231
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i232
init|=
literal|0
init|;
name|_i232
operator|<
name|_list231
operator|.
name|size
condition|;
operator|++
name|_i232
control|)
block|{
name|ByteBuffer
name|_elem233
decl_stmt|;
comment|// optional
name|_elem233
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|columns
operator|.
name|add
argument_list|(
name|_elem233
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setColumnsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// ATTRIBUTES
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map234
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|(
literal|2
operator|*
name|_map234
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i235
init|=
literal|0
init|;
name|_i235
operator|<
name|_map234
operator|.
name|size
condition|;
operator|++
name|_i235
control|)
block|{
name|ByteBuffer
name|_key236
decl_stmt|;
comment|// required
name|ByteBuffer
name|_val237
decl_stmt|;
comment|// required
name|_key236
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val237
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|_key236
argument_list|,
name|_val237
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setAttributesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|getRowsWithColumns_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|rows
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ROWS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|struct
operator|.
name|rows
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ByteBuffer
name|_iter238
range|:
name|struct
operator|.
name|rows
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter238
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|columns
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|COLUMNS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|struct
operator|.
name|columns
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ByteBuffer
name|_iter239
range|:
name|struct
operator|.
name|columns
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter239
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|attributes
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ATTRIBUTES_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|struct
operator|.
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|_iter240
range|:
name|struct
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter240
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter240
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowsWithColumns_argsTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getRowsWithColumns_argsTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getRowsWithColumns_argsTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowsWithColumns_argsTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|getRowsWithColumns_args
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getRowsWithColumns_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetRows
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetColumns
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|4
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetRows
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|rows
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ByteBuffer
name|_iter241
range|:
name|struct
operator|.
name|rows
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter241
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetColumns
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|columns
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ByteBuffer
name|_iter242
range|:
name|struct
operator|.
name|columns
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter242
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|_iter243
range|:
name|struct
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter243
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter243
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getRowsWithColumns_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list244
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|rows
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|(
name|_list244
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i245
init|=
literal|0
init|;
name|_i245
operator|<
name|_list244
operator|.
name|size
condition|;
operator|++
name|_i245
control|)
block|{
name|ByteBuffer
name|_elem246
decl_stmt|;
comment|// optional
name|_elem246
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|rows
operator|.
name|add
argument_list|(
name|_elem246
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setRowsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|2
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list247
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|(
name|_list247
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i248
init|=
literal|0
init|;
name|_i248
operator|<
name|_list247
operator|.
name|size
condition|;
operator|++
name|_i248
control|)
block|{
name|ByteBuffer
name|_elem249
decl_stmt|;
comment|// optional
name|_elem249
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|columns
operator|.
name|add
argument_list|(
name|_elem249
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setColumnsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|3
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map250
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|(
literal|2
operator|*
name|_map250
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i251
init|=
literal|0
init|;
name|_i251
operator|<
name|_map250
operator|.
name|size
condition|;
operator|++
name|_i251
control|)
block|{
name|ByteBuffer
name|_key252
decl_stmt|;
comment|// required
name|ByteBuffer
name|_val253
decl_stmt|;
comment|// required
name|_key252
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val253
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|_key252
argument_list|,
name|_val253
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setAttributesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|getRowsWithColumns_result
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|getRowsWithColumns_result
argument_list|,
name|getRowsWithColumns_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"getRowsWithColumns_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|getRowsWithColumns_resultStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|getRowsWithColumns_resultTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
decl_stmt|;
comment|// required
specifier|public
name|IOError
name|io
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|TRowResult
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|getRowsWithColumns_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|getRowsWithColumns_result
parameter_list|()
block|{     }
specifier|public
name|getRowsWithColumns_result
parameter_list|(
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
parameter_list|,
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|getRowsWithColumns_result
parameter_list|(
name|getRowsWithColumns_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|TRowResult
argument_list|>
name|__this__success
init|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TRowResult
name|other_element
range|:
name|other
operator|.
name|success
control|)
block|{
name|__this__success
operator|.
name|add
argument_list|(
operator|new
name|TRowResult
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|=
name|__this__success
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|getRowsWithColumns_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|getRowsWithColumns_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|TRowResult
argument_list|>
name|getSuccessIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|success
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSuccess
parameter_list|(
name|TRowResult
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|getRowsWithColumns_result
name|setSuccess
parameter_list|(
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|getRowsWithColumns_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|List
argument_list|<
name|TRowResult
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|getRowsWithColumns_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|getRowsWithColumns_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|getRowsWithColumns_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|getRowsWithColumns_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|getRowsWithColumns_result
name|typedOther
init|=
operator|(
name|getRowsWithColumns_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getRowsWithColumns_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowsWithColumns_resultStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getRowsWithColumns_resultStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getRowsWithColumns_resultStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowsWithColumns_resultStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|getRowsWithColumns_result
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|getRowsWithColumns_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list254
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|(
name|_list254
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i255
init|=
literal|0
init|;
name|_i255
operator|<
name|_list254
operator|.
name|size
condition|;
operator|++
name|_i255
control|)
block|{
name|TRowResult
name|_elem256
decl_stmt|;
comment|// optional
name|_elem256
operator|=
operator|new
name|TRowResult
argument_list|()
expr_stmt|;
name|_elem256
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem256
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|getRowsWithColumns_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|success
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|struct
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TRowResult
name|_iter257
range|:
name|struct
operator|.
name|success
control|)
block|{
name|_iter257
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowsWithColumns_resultTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getRowsWithColumns_resultTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getRowsWithColumns_resultTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowsWithColumns_resultTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|getRowsWithColumns_result
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getRowsWithColumns_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TRowResult
name|_iter258
range|:
name|struct
operator|.
name|success
control|)
block|{
name|_iter258
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getRowsWithColumns_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list259
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|(
name|_list259
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i260
init|=
literal|0
init|;
name|_i260
operator|<
name|_list259
operator|.
name|size
condition|;
operator|++
name|_i260
control|)
block|{
name|TRowResult
name|_elem261
decl_stmt|;
comment|// optional
name|_elem261
operator|=
operator|new
name|TRowResult
argument_list|()
expr_stmt|;
name|_elem261
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem261
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|getRowsTs_args
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|getRowsTs_args
argument_list|,
name|getRowsTs_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"getRowsTs_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ROWS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"rows"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|TIMESTAMP_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"timestamp"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ATTRIBUTES_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"attributes"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|getRowsTs_argsStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|getRowsTs_argsTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * name of the table      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|// required
comment|/**      * row keys      */
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
decl_stmt|;
comment|// required
comment|/**      * timestamp      */
specifier|public
name|long
name|timestamp
decl_stmt|;
comment|// required
comment|/**      * Get attributes      */
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
comment|/**        * name of the table        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|,
comment|/**        * row keys        */
name|ROWS
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"rows"
argument_list|)
block|,
comment|/**        * timestamp        */
name|TIMESTAMP
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"timestamp"
argument_list|)
block|,
comment|/**        * Get attributes        */
name|ATTRIBUTES
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|,
literal|"attributes"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
case|case
literal|2
case|:
comment|// ROWS
return|return
name|ROWS
return|;
case|case
literal|3
case|:
comment|// TIMESTAMP
return|return
name|TIMESTAMP
return|;
case|case
literal|4
case|:
comment|// ATTRIBUTES
return|return
name|ATTRIBUTES
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__TIMESTAMP_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ROWS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"rows"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TIMESTAMP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"timestamp"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ATTRIBUTES
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"attributes"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|MapMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|getRowsTs_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|getRowsTs_args
parameter_list|()
block|{     }
specifier|public
name|getRowsTs_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|rows
operator|=
name|rows
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|getRowsTs_args
parameter_list|(
name|getRowsTs_args
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetRows
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|__this__rows
init|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ByteBuffer
name|other_element
range|:
name|other
operator|.
name|rows
control|)
block|{
name|__this__rows
operator|.
name|add
argument_list|(
name|other_element
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|rows
operator|=
name|__this__rows
expr_stmt|;
block|}
name|this
operator|.
name|timestamp
operator|=
name|other
operator|.
name|timestamp
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|__this__attributes
init|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|other_element
range|:
name|other
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ByteBuffer
name|other_element_key
init|=
name|other_element
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ByteBuffer
name|other_element_value
init|=
name|other_element
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ByteBuffer
name|__this__attributes_copy_key
init|=
name|other_element_key
decl_stmt|;
name|ByteBuffer
name|__this__attributes_copy_value
init|=
name|other_element_value
decl_stmt|;
name|__this__attributes
operator|.
name|put
argument_list|(
name|__this__attributes_copy_key
argument_list|,
name|__this__attributes_copy_value
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|attributes
operator|=
name|__this__attributes
expr_stmt|;
block|}
block|}
specifier|public
name|getRowsTs_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|getRowsTs_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|rows
operator|=
literal|null
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * name of the table      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|==
literal|null
condition|?
literal|null
else|:
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of the table      */
specifier|public
name|getRowsTs_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|tableName
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|getRowsTs_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getRowsSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|rows
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|rows
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|ByteBuffer
argument_list|>
name|getRowsIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|rows
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|rows
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToRows
parameter_list|(
name|ByteBuffer
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|rows
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|rows
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|rows
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
comment|/**      * row keys      */
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|getRows
parameter_list|()
block|{
return|return
name|this
operator|.
name|rows
return|;
block|}
comment|/**      * row keys      */
specifier|public
name|getRowsTs_args
name|setRows
parameter_list|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|)
block|{
name|this
operator|.
name|rows
operator|=
name|rows
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetRows
parameter_list|()
block|{
name|this
operator|.
name|rows
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field rows is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetRows
parameter_list|()
block|{
return|return
name|this
operator|.
name|rows
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setRowsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|rows
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * timestamp      */
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|this
operator|.
name|timestamp
return|;
block|}
comment|/**      * timestamp      */
specifier|public
name|getRowsTs_args
name|setTimestamp
parameter_list|(
name|long
name|timestamp
parameter_list|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTimestamp
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTimestamp
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setTimestampIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getAttributesSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|attributes
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|attributes
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|putToAttributes
parameter_list|(
name|ByteBuffer
name|key
parameter_list|,
name|ByteBuffer
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get attributes      */
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|getAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|attributes
return|;
block|}
comment|/**      * Get attributes      */
specifier|public
name|getRowsTs_args
name|setAttributes
parameter_list|(
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
block|{
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetAttributes
parameter_list|()
block|{
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field attributes is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|attributes
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setAttributesIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ROWS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetRows
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setRows
argument_list|(
operator|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TIMESTAMP
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTimestamp
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTimestamp
argument_list|(
operator|(
name|Long
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ATTRIBUTES
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetAttributes
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setAttributes
argument_list|(
operator|(
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
case|case
name|ROWS
case|:
return|return
name|getRows
argument_list|()
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|getTimestamp
argument_list|()
argument_list|)
return|;
case|case
name|ATTRIBUTES
case|:
return|return
name|getAttributes
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
case|case
name|ROWS
case|:
return|return
name|isSetRows
argument_list|()
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|isSetTimestamp
argument_list|()
return|;
case|case
name|ATTRIBUTES
case|:
return|return
name|isSetAttributes
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|getRowsTs_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|getRowsTs_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|getRowsTs_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_rows
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetRows
argument_list|()
decl_stmt|;
name|boolean
name|that_present_rows
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetRows
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_rows
operator|||
name|that_present_rows
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_rows
operator|&&
name|that_present_rows
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|rows
operator|.
name|equals
argument_list|(
name|that
operator|.
name|rows
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_timestamp
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_timestamp
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_timestamp
operator|||
name|that_present_timestamp
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_timestamp
operator|&&
name|that_present_timestamp
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|timestamp
operator|!=
name|that
operator|.
name|timestamp
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_attributes
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetAttributes
argument_list|()
decl_stmt|;
name|boolean
name|that_present_attributes
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetAttributes
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_attributes
operator|||
name|that_present_attributes
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_attributes
operator|&&
name|that_present_attributes
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|attributes
operator|.
name|equals
argument_list|(
name|that
operator|.
name|attributes
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|getRowsTs_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|getRowsTs_args
name|typedOther
init|=
operator|(
name|getRowsTs_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetRows
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetRows
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetRows
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|rows
argument_list|,
name|typedOther
operator|.
name|rows
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTimestamp
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTimestamp
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTimestamp
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|timestamp
argument_list|,
name|typedOther
operator|.
name|timestamp
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetAttributes
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetAttributes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetAttributes
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|attributes
argument_list|,
name|typedOther
operator|.
name|attributes
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getRowsTs_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"rows:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|rows
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|rows
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"timestamp:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"attributes:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|attributes
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
comment|// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
name|__isset_bit_vector
operator|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowsTs_argsStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getRowsTs_argsStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getRowsTs_argsStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowsTs_argsStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|getRowsTs_args
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|getRowsTs_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// ROWS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list262
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|rows
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|(
name|_list262
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i263
init|=
literal|0
init|;
name|_i263
operator|<
name|_list262
operator|.
name|size
condition|;
operator|++
name|_i263
control|)
block|{
name|ByteBuffer
name|_elem264
decl_stmt|;
comment|// optional
name|_elem264
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|rows
operator|.
name|add
argument_list|(
name|_elem264
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setRowsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// TIMESTAMP
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
condition|)
block|{
name|struct
operator|.
name|timestamp
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// ATTRIBUTES
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map265
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|(
literal|2
operator|*
name|_map265
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i266
init|=
literal|0
init|;
name|_i266
operator|<
name|_map265
operator|.
name|size
condition|;
operator|++
name|_i266
control|)
block|{
name|ByteBuffer
name|_key267
decl_stmt|;
comment|// required
name|ByteBuffer
name|_val268
decl_stmt|;
comment|// required
name|_key267
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val268
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|_key267
argument_list|,
name|_val268
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setAttributesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|getRowsTs_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|rows
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ROWS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|struct
operator|.
name|rows
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ByteBuffer
name|_iter269
range|:
name|struct
operator|.
name|rows
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter269
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TIMESTAMP_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI64
argument_list|(
name|struct
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|attributes
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ATTRIBUTES_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|struct
operator|.
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|_iter270
range|:
name|struct
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter270
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter270
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowsTs_argsTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getRowsTs_argsTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getRowsTs_argsTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowsTs_argsTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|getRowsTs_args
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getRowsTs_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetRows
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetTimestamp
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|4
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetRows
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|rows
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ByteBuffer
name|_iter271
range|:
name|struct
operator|.
name|rows
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter271
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetTimestamp
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI64
argument_list|(
name|struct
operator|.
name|timestamp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|_iter272
range|:
name|struct
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter272
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter272
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getRowsTs_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list273
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|rows
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|(
name|_list273
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i274
init|=
literal|0
init|;
name|_i274
operator|<
name|_list273
operator|.
name|size
condition|;
operator|++
name|_i274
control|)
block|{
name|ByteBuffer
name|_elem275
decl_stmt|;
comment|// optional
name|_elem275
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|rows
operator|.
name|add
argument_list|(
name|_elem275
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setRowsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|struct
operator|.
name|timestamp
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|3
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map276
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|(
literal|2
operator|*
name|_map276
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i277
init|=
literal|0
init|;
name|_i277
operator|<
name|_map276
operator|.
name|size
condition|;
operator|++
name|_i277
control|)
block|{
name|ByteBuffer
name|_key278
decl_stmt|;
comment|// required
name|ByteBuffer
name|_val279
decl_stmt|;
comment|// required
name|_key278
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val279
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|_key278
argument_list|,
name|_val279
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setAttributesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|getRowsTs_result
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|getRowsTs_result
argument_list|,
name|getRowsTs_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"getRowsTs_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|getRowsTs_resultStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|getRowsTs_resultTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
decl_stmt|;
comment|// required
specifier|public
name|IOError
name|io
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|TRowResult
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|getRowsTs_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|getRowsTs_result
parameter_list|()
block|{     }
specifier|public
name|getRowsTs_result
parameter_list|(
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
parameter_list|,
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|getRowsTs_result
parameter_list|(
name|getRowsTs_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|TRowResult
argument_list|>
name|__this__success
init|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TRowResult
name|other_element
range|:
name|other
operator|.
name|success
control|)
block|{
name|__this__success
operator|.
name|add
argument_list|(
operator|new
name|TRowResult
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|=
name|__this__success
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|getRowsTs_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|getRowsTs_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|TRowResult
argument_list|>
name|getSuccessIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|success
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSuccess
parameter_list|(
name|TRowResult
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|getRowsTs_result
name|setSuccess
parameter_list|(
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|getRowsTs_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|List
argument_list|<
name|TRowResult
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|getRowsTs_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|getRowsTs_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|getRowsTs_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|getRowsTs_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|getRowsTs_result
name|typedOther
init|=
operator|(
name|getRowsTs_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getRowsTs_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowsTs_resultStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getRowsTs_resultStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getRowsTs_resultStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowsTs_resultStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|getRowsTs_result
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|getRowsTs_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list280
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|(
name|_list280
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i281
init|=
literal|0
init|;
name|_i281
operator|<
name|_list280
operator|.
name|size
condition|;
operator|++
name|_i281
control|)
block|{
name|TRowResult
name|_elem282
decl_stmt|;
comment|// optional
name|_elem282
operator|=
operator|new
name|TRowResult
argument_list|()
expr_stmt|;
name|_elem282
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem282
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|getRowsTs_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|success
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|struct
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TRowResult
name|_iter283
range|:
name|struct
operator|.
name|success
control|)
block|{
name|_iter283
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowsTs_resultTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getRowsTs_resultTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getRowsTs_resultTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowsTs_resultTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|getRowsTs_result
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getRowsTs_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TRowResult
name|_iter284
range|:
name|struct
operator|.
name|success
control|)
block|{
name|_iter284
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getRowsTs_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list285
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|(
name|_list285
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i286
init|=
literal|0
init|;
name|_i286
operator|<
name|_list285
operator|.
name|size
condition|;
operator|++
name|_i286
control|)
block|{
name|TRowResult
name|_elem287
decl_stmt|;
comment|// optional
name|_elem287
operator|=
operator|new
name|TRowResult
argument_list|()
expr_stmt|;
name|_elem287
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem287
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|getRowsWithColumnsTs_args
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|getRowsWithColumnsTs_args
argument_list|,
name|getRowsWithColumnsTs_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"getRowsWithColumnsTs_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ROWS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"rows"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|COLUMNS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"columns"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|TIMESTAMP_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"timestamp"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ATTRIBUTES_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"attributes"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|(
name|short
operator|)
literal|5
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|getRowsWithColumnsTs_argsStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|getRowsWithColumnsTs_argsTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|// required
comment|/**      * row keys      */
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
decl_stmt|;
comment|// required
comment|/**      * List of columns to return, null for all columns      */
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
decl_stmt|;
comment|// required
specifier|public
name|long
name|timestamp
decl_stmt|;
comment|// required
comment|/**      * Get attributes      */
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
comment|/**        * name of table        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|,
comment|/**        * row keys        */
name|ROWS
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"rows"
argument_list|)
block|,
comment|/**        * List of columns to return, null for all columns        */
name|COLUMNS
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"columns"
argument_list|)
block|,
name|TIMESTAMP
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|,
literal|"timestamp"
argument_list|)
block|,
comment|/**        * Get attributes        */
name|ATTRIBUTES
argument_list|(
operator|(
name|short
operator|)
literal|5
argument_list|,
literal|"attributes"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
case|case
literal|2
case|:
comment|// ROWS
return|return
name|ROWS
return|;
case|case
literal|3
case|:
comment|// COLUMNS
return|return
name|COLUMNS
return|;
case|case
literal|4
case|:
comment|// TIMESTAMP
return|return
name|TIMESTAMP
return|;
case|case
literal|5
case|:
comment|// ATTRIBUTES
return|return
name|ATTRIBUTES
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__TIMESTAMP_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ROWS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"rows"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|COLUMNS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"columns"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TIMESTAMP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"timestamp"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ATTRIBUTES
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"attributes"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|MapMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|getRowsWithColumnsTs_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|getRowsWithColumnsTs_args
parameter_list|()
block|{     }
specifier|public
name|getRowsWithColumnsTs_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|rows
operator|=
name|rows
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|getRowsWithColumnsTs_args
parameter_list|(
name|getRowsWithColumnsTs_args
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetRows
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|__this__rows
init|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ByteBuffer
name|other_element
range|:
name|other
operator|.
name|rows
control|)
block|{
name|__this__rows
operator|.
name|add
argument_list|(
name|other_element
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|rows
operator|=
name|__this__rows
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetColumns
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|__this__columns
init|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ByteBuffer
name|other_element
range|:
name|other
operator|.
name|columns
control|)
block|{
name|__this__columns
operator|.
name|add
argument_list|(
name|other_element
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|columns
operator|=
name|__this__columns
expr_stmt|;
block|}
name|this
operator|.
name|timestamp
operator|=
name|other
operator|.
name|timestamp
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|__this__attributes
init|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|other_element
range|:
name|other
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ByteBuffer
name|other_element_key
init|=
name|other_element
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ByteBuffer
name|other_element_value
init|=
name|other_element
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ByteBuffer
name|__this__attributes_copy_key
init|=
name|other_element_key
decl_stmt|;
name|ByteBuffer
name|__this__attributes_copy_value
init|=
name|other_element_value
decl_stmt|;
name|__this__attributes
operator|.
name|put
argument_list|(
name|__this__attributes_copy_key
argument_list|,
name|__this__attributes_copy_value
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|attributes
operator|=
name|__this__attributes
expr_stmt|;
block|}
block|}
specifier|public
name|getRowsWithColumnsTs_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|getRowsWithColumnsTs_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|rows
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|==
literal|null
condition|?
literal|null
else|:
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of table      */
specifier|public
name|getRowsWithColumnsTs_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|tableName
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|getRowsWithColumnsTs_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getRowsSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|rows
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|rows
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|ByteBuffer
argument_list|>
name|getRowsIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|rows
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|rows
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToRows
parameter_list|(
name|ByteBuffer
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|rows
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|rows
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|rows
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
comment|/**      * row keys      */
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|getRows
parameter_list|()
block|{
return|return
name|this
operator|.
name|rows
return|;
block|}
comment|/**      * row keys      */
specifier|public
name|getRowsWithColumnsTs_args
name|setRows
parameter_list|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|)
block|{
name|this
operator|.
name|rows
operator|=
name|rows
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetRows
parameter_list|()
block|{
name|this
operator|.
name|rows
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field rows is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetRows
parameter_list|()
block|{
return|return
name|this
operator|.
name|rows
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setRowsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|rows
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getColumnsSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|columns
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|columns
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|ByteBuffer
argument_list|>
name|getColumnsIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|columns
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|columns
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToColumns
parameter_list|(
name|ByteBuffer
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|columns
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|columns
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
comment|/**      * List of columns to return, null for all columns      */
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|getColumns
parameter_list|()
block|{
return|return
name|this
operator|.
name|columns
return|;
block|}
comment|/**      * List of columns to return, null for all columns      */
specifier|public
name|getRowsWithColumnsTs_args
name|setColumns
parameter_list|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|)
block|{
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetColumns
parameter_list|()
block|{
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field columns is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetColumns
parameter_list|()
block|{
return|return
name|this
operator|.
name|columns
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setColumnsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|this
operator|.
name|timestamp
return|;
block|}
specifier|public
name|getRowsWithColumnsTs_args
name|setTimestamp
parameter_list|(
name|long
name|timestamp
parameter_list|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTimestamp
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTimestamp
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setTimestampIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getAttributesSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|attributes
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|attributes
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|putToAttributes
parameter_list|(
name|ByteBuffer
name|key
parameter_list|,
name|ByteBuffer
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get attributes      */
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|getAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|attributes
return|;
block|}
comment|/**      * Get attributes      */
specifier|public
name|getRowsWithColumnsTs_args
name|setAttributes
parameter_list|(
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
block|{
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetAttributes
parameter_list|()
block|{
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field attributes is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|attributes
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setAttributesIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ROWS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetRows
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setRows
argument_list|(
operator|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|COLUMNS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetColumns
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setColumns
argument_list|(
operator|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TIMESTAMP
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTimestamp
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTimestamp
argument_list|(
operator|(
name|Long
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ATTRIBUTES
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetAttributes
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setAttributes
argument_list|(
operator|(
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
case|case
name|ROWS
case|:
return|return
name|getRows
argument_list|()
return|;
case|case
name|COLUMNS
case|:
return|return
name|getColumns
argument_list|()
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|getTimestamp
argument_list|()
argument_list|)
return|;
case|case
name|ATTRIBUTES
case|:
return|return
name|getAttributes
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
case|case
name|ROWS
case|:
return|return
name|isSetRows
argument_list|()
return|;
case|case
name|COLUMNS
case|:
return|return
name|isSetColumns
argument_list|()
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|isSetTimestamp
argument_list|()
return|;
case|case
name|ATTRIBUTES
case|:
return|return
name|isSetAttributes
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|getRowsWithColumnsTs_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|getRowsWithColumnsTs_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|getRowsWithColumnsTs_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_rows
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetRows
argument_list|()
decl_stmt|;
name|boolean
name|that_present_rows
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetRows
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_rows
operator|||
name|that_present_rows
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_rows
operator|&&
name|that_present_rows
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|rows
operator|.
name|equals
argument_list|(
name|that
operator|.
name|rows
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_columns
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetColumns
argument_list|()
decl_stmt|;
name|boolean
name|that_present_columns
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetColumns
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_columns
operator|||
name|that_present_columns
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_columns
operator|&&
name|that_present_columns
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|columns
operator|.
name|equals
argument_list|(
name|that
operator|.
name|columns
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_timestamp
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_timestamp
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_timestamp
operator|||
name|that_present_timestamp
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_timestamp
operator|&&
name|that_present_timestamp
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|timestamp
operator|!=
name|that
operator|.
name|timestamp
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_attributes
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetAttributes
argument_list|()
decl_stmt|;
name|boolean
name|that_present_attributes
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetAttributes
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_attributes
operator|||
name|that_present_attributes
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_attributes
operator|&&
name|that_present_attributes
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|attributes
operator|.
name|equals
argument_list|(
name|that
operator|.
name|attributes
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|getRowsWithColumnsTs_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|getRowsWithColumnsTs_args
name|typedOther
init|=
operator|(
name|getRowsWithColumnsTs_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetRows
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetRows
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetRows
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|rows
argument_list|,
name|typedOther
operator|.
name|rows
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetColumns
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetColumns
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetColumns
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|columns
argument_list|,
name|typedOther
operator|.
name|columns
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTimestamp
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTimestamp
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTimestamp
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|timestamp
argument_list|,
name|typedOther
operator|.
name|timestamp
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetAttributes
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetAttributes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetAttributes
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|attributes
argument_list|,
name|typedOther
operator|.
name|attributes
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getRowsWithColumnsTs_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"rows:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|rows
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|rows
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"columns:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|columns
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|columns
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"timestamp:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"attributes:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|attributes
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
comment|// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
name|__isset_bit_vector
operator|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowsWithColumnsTs_argsStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getRowsWithColumnsTs_argsStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getRowsWithColumnsTs_argsStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowsWithColumnsTs_argsStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|getRowsWithColumnsTs_args
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|getRowsWithColumnsTs_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// ROWS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list288
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|rows
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|(
name|_list288
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i289
init|=
literal|0
init|;
name|_i289
operator|<
name|_list288
operator|.
name|size
condition|;
operator|++
name|_i289
control|)
block|{
name|ByteBuffer
name|_elem290
decl_stmt|;
comment|// optional
name|_elem290
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|rows
operator|.
name|add
argument_list|(
name|_elem290
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setRowsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// COLUMNS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list291
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|(
name|_list291
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i292
init|=
literal|0
init|;
name|_i292
operator|<
name|_list291
operator|.
name|size
condition|;
operator|++
name|_i292
control|)
block|{
name|ByteBuffer
name|_elem293
decl_stmt|;
comment|// optional
name|_elem293
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|columns
operator|.
name|add
argument_list|(
name|_elem293
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setColumnsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// TIMESTAMP
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
condition|)
block|{
name|struct
operator|.
name|timestamp
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|5
case|:
comment|// ATTRIBUTES
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map294
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|(
literal|2
operator|*
name|_map294
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i295
init|=
literal|0
init|;
name|_i295
operator|<
name|_map294
operator|.
name|size
condition|;
operator|++
name|_i295
control|)
block|{
name|ByteBuffer
name|_key296
decl_stmt|;
comment|// required
name|ByteBuffer
name|_val297
decl_stmt|;
comment|// required
name|_key296
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val297
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|_key296
argument_list|,
name|_val297
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setAttributesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|getRowsWithColumnsTs_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|rows
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ROWS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|struct
operator|.
name|rows
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ByteBuffer
name|_iter298
range|:
name|struct
operator|.
name|rows
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter298
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|columns
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|COLUMNS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|struct
operator|.
name|columns
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ByteBuffer
name|_iter299
range|:
name|struct
operator|.
name|columns
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter299
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TIMESTAMP_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI64
argument_list|(
name|struct
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|attributes
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ATTRIBUTES_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|struct
operator|.
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|_iter300
range|:
name|struct
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter300
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter300
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowsWithColumnsTs_argsTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getRowsWithColumnsTs_argsTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getRowsWithColumnsTs_argsTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowsWithColumnsTs_argsTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|getRowsWithColumnsTs_args
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getRowsWithColumnsTs_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetRows
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetColumns
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetTimestamp
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|5
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetRows
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|rows
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ByteBuffer
name|_iter301
range|:
name|struct
operator|.
name|rows
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter301
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetColumns
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|columns
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ByteBuffer
name|_iter302
range|:
name|struct
operator|.
name|columns
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter302
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetTimestamp
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI64
argument_list|(
name|struct
operator|.
name|timestamp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|_iter303
range|:
name|struct
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter303
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter303
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getRowsWithColumnsTs_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list304
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|rows
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|(
name|_list304
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i305
init|=
literal|0
init|;
name|_i305
operator|<
name|_list304
operator|.
name|size
condition|;
operator|++
name|_i305
control|)
block|{
name|ByteBuffer
name|_elem306
decl_stmt|;
comment|// optional
name|_elem306
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|rows
operator|.
name|add
argument_list|(
name|_elem306
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setRowsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|2
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list307
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|(
name|_list307
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i308
init|=
literal|0
init|;
name|_i308
operator|<
name|_list307
operator|.
name|size
condition|;
operator|++
name|_i308
control|)
block|{
name|ByteBuffer
name|_elem309
decl_stmt|;
comment|// optional
name|_elem309
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|columns
operator|.
name|add
argument_list|(
name|_elem309
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setColumnsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|3
argument_list|)
condition|)
block|{
name|struct
operator|.
name|timestamp
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|4
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map310
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|(
literal|2
operator|*
name|_map310
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i311
init|=
literal|0
init|;
name|_i311
operator|<
name|_map310
operator|.
name|size
condition|;
operator|++
name|_i311
control|)
block|{
name|ByteBuffer
name|_key312
decl_stmt|;
comment|// required
name|ByteBuffer
name|_val313
decl_stmt|;
comment|// required
name|_key312
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val313
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|_key312
argument_list|,
name|_val313
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setAttributesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|getRowsWithColumnsTs_result
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|getRowsWithColumnsTs_result
argument_list|,
name|getRowsWithColumnsTs_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"getRowsWithColumnsTs_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|getRowsWithColumnsTs_resultStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|getRowsWithColumnsTs_resultTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
decl_stmt|;
comment|// required
specifier|public
name|IOError
name|io
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|TRowResult
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|getRowsWithColumnsTs_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|getRowsWithColumnsTs_result
parameter_list|()
block|{     }
specifier|public
name|getRowsWithColumnsTs_result
parameter_list|(
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
parameter_list|,
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|getRowsWithColumnsTs_result
parameter_list|(
name|getRowsWithColumnsTs_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|TRowResult
argument_list|>
name|__this__success
init|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TRowResult
name|other_element
range|:
name|other
operator|.
name|success
control|)
block|{
name|__this__success
operator|.
name|add
argument_list|(
operator|new
name|TRowResult
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|=
name|__this__success
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|getRowsWithColumnsTs_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|getRowsWithColumnsTs_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|TRowResult
argument_list|>
name|getSuccessIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|success
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSuccess
parameter_list|(
name|TRowResult
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|getRowsWithColumnsTs_result
name|setSuccess
parameter_list|(
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|getRowsWithColumnsTs_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|List
argument_list|<
name|TRowResult
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|getRowsWithColumnsTs_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|getRowsWithColumnsTs_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|getRowsWithColumnsTs_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|getRowsWithColumnsTs_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|getRowsWithColumnsTs_result
name|typedOther
init|=
operator|(
name|getRowsWithColumnsTs_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getRowsWithColumnsTs_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowsWithColumnsTs_resultStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getRowsWithColumnsTs_resultStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getRowsWithColumnsTs_resultStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowsWithColumnsTs_resultStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|getRowsWithColumnsTs_result
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|getRowsWithColumnsTs_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list314
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|(
name|_list314
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i315
init|=
literal|0
init|;
name|_i315
operator|<
name|_list314
operator|.
name|size
condition|;
operator|++
name|_i315
control|)
block|{
name|TRowResult
name|_elem316
decl_stmt|;
comment|// optional
name|_elem316
operator|=
operator|new
name|TRowResult
argument_list|()
expr_stmt|;
name|_elem316
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem316
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|getRowsWithColumnsTs_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|success
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|struct
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TRowResult
name|_iter317
range|:
name|struct
operator|.
name|success
control|)
block|{
name|_iter317
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowsWithColumnsTs_resultTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getRowsWithColumnsTs_resultTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getRowsWithColumnsTs_resultTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowsWithColumnsTs_resultTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|getRowsWithColumnsTs_result
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getRowsWithColumnsTs_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TRowResult
name|_iter318
range|:
name|struct
operator|.
name|success
control|)
block|{
name|_iter318
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getRowsWithColumnsTs_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list319
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|(
name|_list319
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i320
init|=
literal|0
init|;
name|_i320
operator|<
name|_list319
operator|.
name|size
condition|;
operator|++
name|_i320
control|)
block|{
name|TRowResult
name|_elem321
decl_stmt|;
comment|// optional
name|_elem321
operator|=
operator|new
name|TRowResult
argument_list|()
expr_stmt|;
name|_elem321
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem321
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|mutateRow_args
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|mutateRow_args
argument_list|,
name|mutateRow_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"mutateRow_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ROW_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"row"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|MUTATIONS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"mutations"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ATTRIBUTES_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"attributes"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|mutateRow_argsStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|mutateRow_argsTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|// required
comment|/**      * row key      */
specifier|public
name|ByteBuffer
name|row
decl_stmt|;
comment|// required
comment|/**      * list of mutation commands      */
specifier|public
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
decl_stmt|;
comment|// required
comment|/**      * Put attributes      */
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
comment|/**        * name of table        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|,
comment|/**        * row key        */
name|ROW
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"row"
argument_list|)
block|,
comment|/**        * list of mutation commands        */
name|MUTATIONS
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"mutations"
argument_list|)
block|,
comment|/**        * Put attributes        */
name|ATTRIBUTES
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|,
literal|"attributes"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
case|case
literal|2
case|:
comment|// ROW
return|return
name|ROW
return|;
case|case
literal|3
case|:
comment|// MUTATIONS
return|return
name|MUTATIONS
return|;
case|case
literal|4
case|:
comment|// ATTRIBUTES
return|return
name|ATTRIBUTES
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ROW
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"row"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|MUTATIONS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"mutations"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|Mutation
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ATTRIBUTES
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"attributes"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|MapMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|mutateRow_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|mutateRow_args
parameter_list|()
block|{     }
specifier|public
name|mutateRow_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|mutations
operator|=
name|mutations
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|mutateRow_args
parameter_list|(
name|mutateRow_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|this
operator|.
name|row
operator|=
name|other
operator|.
name|row
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetMutations
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Mutation
argument_list|>
name|__this__mutations
init|=
operator|new
name|ArrayList
argument_list|<
name|Mutation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Mutation
name|other_element
range|:
name|other
operator|.
name|mutations
control|)
block|{
name|__this__mutations
operator|.
name|add
argument_list|(
operator|new
name|Mutation
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|mutations
operator|=
name|__this__mutations
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|__this__attributes
init|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|other_element
range|:
name|other
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ByteBuffer
name|other_element_key
init|=
name|other_element
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ByteBuffer
name|other_element_value
init|=
name|other_element
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ByteBuffer
name|__this__attributes_copy_key
init|=
name|other_element_key
decl_stmt|;
name|ByteBuffer
name|__this__attributes_copy_value
init|=
name|other_element_value
decl_stmt|;
name|__this__attributes
operator|.
name|put
argument_list|(
name|__this__attributes_copy_key
argument_list|,
name|__this__attributes_copy_value
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|attributes
operator|=
name|__this__attributes
expr_stmt|;
block|}
block|}
specifier|public
name|mutateRow_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|mutateRow_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|mutations
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|==
literal|null
condition|?
literal|null
else|:
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of table      */
specifier|public
name|mutateRow_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|tableName
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|mutateRow_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * row key      */
specifier|public
name|byte
index|[]
name|getRow
parameter_list|()
block|{
name|setRow
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|row
operator|==
literal|null
condition|?
literal|null
else|:
name|row
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForRow
parameter_list|()
block|{
return|return
name|row
return|;
block|}
comment|/**      * row key      */
specifier|public
name|mutateRow_args
name|setRow
parameter_list|(
name|byte
index|[]
name|row
parameter_list|)
block|{
name|setRow
argument_list|(
name|row
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|mutateRow_args
name|setRow
parameter_list|(
name|ByteBuffer
name|row
parameter_list|)
block|{
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetRow
parameter_list|()
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field row is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetRow
parameter_list|()
block|{
return|return
name|this
operator|.
name|row
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setRowIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getMutationsSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|mutations
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|mutations
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|Mutation
argument_list|>
name|getMutationsIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|mutations
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|mutations
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToMutations
parameter_list|(
name|Mutation
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|mutations
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|mutations
operator|=
operator|new
name|ArrayList
argument_list|<
name|Mutation
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|mutations
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
comment|/**      * list of mutation commands      */
specifier|public
name|List
argument_list|<
name|Mutation
argument_list|>
name|getMutations
parameter_list|()
block|{
return|return
name|this
operator|.
name|mutations
return|;
block|}
comment|/**      * list of mutation commands      */
specifier|public
name|mutateRow_args
name|setMutations
parameter_list|(
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|)
block|{
name|this
operator|.
name|mutations
operator|=
name|mutations
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetMutations
parameter_list|()
block|{
name|this
operator|.
name|mutations
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field mutations is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetMutations
parameter_list|()
block|{
return|return
name|this
operator|.
name|mutations
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setMutationsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|mutations
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getAttributesSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|attributes
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|attributes
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|putToAttributes
parameter_list|(
name|ByteBuffer
name|key
parameter_list|,
name|ByteBuffer
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
comment|/**      * Put attributes      */
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|getAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|attributes
return|;
block|}
comment|/**      * Put attributes      */
specifier|public
name|mutateRow_args
name|setAttributes
parameter_list|(
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
block|{
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetAttributes
parameter_list|()
block|{
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field attributes is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|attributes
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setAttributesIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ROW
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetRow
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setRow
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|MUTATIONS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetMutations
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setMutations
argument_list|(
operator|(
name|List
argument_list|<
name|Mutation
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ATTRIBUTES
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetAttributes
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setAttributes
argument_list|(
operator|(
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
case|case
name|ROW
case|:
return|return
name|getRow
argument_list|()
return|;
case|case
name|MUTATIONS
case|:
return|return
name|getMutations
argument_list|()
return|;
case|case
name|ATTRIBUTES
case|:
return|return
name|getAttributes
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
case|case
name|ROW
case|:
return|return
name|isSetRow
argument_list|()
return|;
case|case
name|MUTATIONS
case|:
return|return
name|isSetMutations
argument_list|()
return|;
case|case
name|ATTRIBUTES
case|:
return|return
name|isSetAttributes
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|mutateRow_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|mutateRow_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|mutateRow_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_row
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
name|boolean
name|that_present_row
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_row
operator|||
name|that_present_row
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_row
operator|&&
name|that_present_row
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|row
operator|.
name|equals
argument_list|(
name|that
operator|.
name|row
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_mutations
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetMutations
argument_list|()
decl_stmt|;
name|boolean
name|that_present_mutations
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetMutations
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_mutations
operator|||
name|that_present_mutations
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_mutations
operator|&&
name|that_present_mutations
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|mutations
operator|.
name|equals
argument_list|(
name|that
operator|.
name|mutations
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_attributes
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetAttributes
argument_list|()
decl_stmt|;
name|boolean
name|that_present_attributes
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetAttributes
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_attributes
operator|||
name|that_present_attributes
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_attributes
operator|&&
name|that_present_attributes
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|attributes
operator|.
name|equals
argument_list|(
name|that
operator|.
name|attributes
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|mutateRow_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|mutateRow_args
name|typedOther
init|=
operator|(
name|mutateRow_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetRow
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetRow
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetRow
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|row
argument_list|,
name|typedOther
operator|.
name|row
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetMutations
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetMutations
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetMutations
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|mutations
argument_list|,
name|typedOther
operator|.
name|mutations
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetAttributes
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetAttributes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetAttributes
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|attributes
argument_list|,
name|typedOther
operator|.
name|attributes
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"mutateRow_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"row:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|row
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"mutations:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|mutations
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|mutations
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"attributes:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|attributes
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|mutateRow_argsStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|mutateRow_argsStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|mutateRow_argsStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|mutateRow_argsStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|mutateRow_args
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|mutateRow_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// ROW
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setRowIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// MUTATIONS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list322
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|mutations
operator|=
operator|new
name|ArrayList
argument_list|<
name|Mutation
argument_list|>
argument_list|(
name|_list322
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i323
init|=
literal|0
init|;
name|_i323
operator|<
name|_list322
operator|.
name|size
condition|;
operator|++
name|_i323
control|)
block|{
name|Mutation
name|_elem324
decl_stmt|;
comment|// optional
name|_elem324
operator|=
operator|new
name|Mutation
argument_list|()
expr_stmt|;
name|_elem324
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|mutations
operator|.
name|add
argument_list|(
name|_elem324
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setMutationsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// ATTRIBUTES
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map325
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|(
literal|2
operator|*
name|_map325
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i326
init|=
literal|0
init|;
name|_i326
operator|<
name|_map325
operator|.
name|size
condition|;
operator|++
name|_i326
control|)
block|{
name|ByteBuffer
name|_key327
decl_stmt|;
comment|// required
name|ByteBuffer
name|_val328
decl_stmt|;
comment|// required
name|_key327
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val328
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|_key327
argument_list|,
name|_val328
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setAttributesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|mutateRow_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|row
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ROW_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|row
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|mutations
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|MUTATIONS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|struct
operator|.
name|mutations
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Mutation
name|_iter329
range|:
name|struct
operator|.
name|mutations
control|)
block|{
name|_iter329
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|attributes
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ATTRIBUTES_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|struct
operator|.
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|_iter330
range|:
name|struct
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter330
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter330
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|mutateRow_argsTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|mutateRow_argsTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|mutateRow_argsTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|mutateRow_argsTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|mutateRow_args
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|mutateRow_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetMutations
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|4
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|row
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetMutations
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|mutations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Mutation
name|_iter331
range|:
name|struct
operator|.
name|mutations
control|)
block|{
name|_iter331
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|_iter332
range|:
name|struct
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter332
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter332
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|mutateRow_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setRowIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|2
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list333
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|mutations
operator|=
operator|new
name|ArrayList
argument_list|<
name|Mutation
argument_list|>
argument_list|(
name|_list333
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i334
init|=
literal|0
init|;
name|_i334
operator|<
name|_list333
operator|.
name|size
condition|;
operator|++
name|_i334
control|)
block|{
name|Mutation
name|_elem335
decl_stmt|;
comment|// optional
name|_elem335
operator|=
operator|new
name|Mutation
argument_list|()
expr_stmt|;
name|_elem335
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|mutations
operator|.
name|add
argument_list|(
name|_elem335
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setMutationsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|3
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map336
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|(
literal|2
operator|*
name|_map336
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i337
init|=
literal|0
init|;
name|_i337
operator|<
name|_map336
operator|.
name|size
condition|;
operator|++
name|_i337
control|)
block|{
name|ByteBuffer
name|_key338
decl_stmt|;
comment|// required
name|ByteBuffer
name|_val339
decl_stmt|;
comment|// required
name|_key338
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val339
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|_key338
argument_list|,
name|_val339
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setAttributesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|mutateRow_result
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|mutateRow_result
argument_list|,
name|mutateRow_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"mutateRow_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|IA_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"ia"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|mutateRow_resultStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|mutateRow_resultTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IOError
name|io
decl_stmt|;
comment|// required
specifier|public
name|IllegalArgument
name|ia
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|,
name|IA
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"ia"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
case|case
literal|2
case|:
comment|// IA
return|return
name|IA
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IA
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"ia"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|mutateRow_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|mutateRow_result
parameter_list|()
block|{     }
specifier|public
name|mutateRow_result
parameter_list|(
name|IOError
name|io
parameter_list|,
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|this
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|mutateRow_result
parameter_list|(
name|mutateRow_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetIa
argument_list|()
condition|)
block|{
name|this
operator|.
name|ia
operator|=
operator|new
name|IllegalArgument
argument_list|(
name|other
operator|.
name|ia
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|mutateRow_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|mutateRow_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|ia
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|mutateRow_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|IllegalArgument
name|getIa
parameter_list|()
block|{
return|return
name|this
operator|.
name|ia
return|;
block|}
specifier|public
name|mutateRow_result
name|setIa
parameter_list|(
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|this
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIa
parameter_list|()
block|{
name|this
operator|.
name|ia
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field ia is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIa
parameter_list|()
block|{
return|return
name|this
operator|.
name|ia
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIaIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|ia
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IA
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIa
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIa
argument_list|(
operator|(
name|IllegalArgument
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
case|case
name|IA
case|:
return|return
name|getIa
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
case|case
name|IA
case|:
return|return
name|isSetIa
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|mutateRow_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|mutateRow_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|mutateRow_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_ia
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIa
argument_list|()
decl_stmt|;
name|boolean
name|that_present_ia
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIa
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_ia
operator|||
name|that_present_ia
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_ia
operator|&&
name|that_present_ia
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|ia
operator|.
name|equals
argument_list|(
name|that
operator|.
name|ia
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|mutateRow_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|mutateRow_result
name|typedOther
init|=
operator|(
name|mutateRow_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIa
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIa
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIa
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|ia
argument_list|,
name|typedOther
operator|.
name|ia
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"mutateRow_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"ia:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|ia
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|ia
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|mutateRow_resultStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|mutateRow_resultStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|mutateRow_resultStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|mutateRow_resultStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|mutateRow_result
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|mutateRow_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// IA
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|ia
operator|=
operator|new
name|IllegalArgument
argument_list|()
expr_stmt|;
name|struct
operator|.
name|ia
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIaIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|mutateRow_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|ia
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IA_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|ia
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|mutateRow_resultTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|mutateRow_resultTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|mutateRow_resultTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|mutateRow_resultTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|mutateRow_result
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|mutateRow_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIa
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIa
argument_list|()
condition|)
block|{
name|struct
operator|.
name|ia
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|mutateRow_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|ia
operator|=
operator|new
name|IllegalArgument
argument_list|()
expr_stmt|;
name|struct
operator|.
name|ia
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIaIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|mutateRowTs_args
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|mutateRowTs_args
argument_list|,
name|mutateRowTs_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"mutateRowTs_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ROW_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"row"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|MUTATIONS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"mutations"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|TIMESTAMP_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"timestamp"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ATTRIBUTES_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"attributes"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|(
name|short
operator|)
literal|5
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|mutateRowTs_argsStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|mutateRowTs_argsTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|// required
comment|/**      * row key      */
specifier|public
name|ByteBuffer
name|row
decl_stmt|;
comment|// required
comment|/**      * list of mutation commands      */
specifier|public
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
decl_stmt|;
comment|// required
comment|/**      * timestamp      */
specifier|public
name|long
name|timestamp
decl_stmt|;
comment|// required
comment|/**      * Put attributes      */
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
comment|/**        * name of table        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|,
comment|/**        * row key        */
name|ROW
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"row"
argument_list|)
block|,
comment|/**        * list of mutation commands        */
name|MUTATIONS
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"mutations"
argument_list|)
block|,
comment|/**        * timestamp        */
name|TIMESTAMP
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|,
literal|"timestamp"
argument_list|)
block|,
comment|/**        * Put attributes        */
name|ATTRIBUTES
argument_list|(
operator|(
name|short
operator|)
literal|5
argument_list|,
literal|"attributes"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
case|case
literal|2
case|:
comment|// ROW
return|return
name|ROW
return|;
case|case
literal|3
case|:
comment|// MUTATIONS
return|return
name|MUTATIONS
return|;
case|case
literal|4
case|:
comment|// TIMESTAMP
return|return
name|TIMESTAMP
return|;
case|case
literal|5
case|:
comment|// ATTRIBUTES
return|return
name|ATTRIBUTES
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__TIMESTAMP_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ROW
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"row"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|MUTATIONS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"mutations"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|Mutation
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TIMESTAMP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"timestamp"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ATTRIBUTES
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"attributes"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|MapMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|mutateRowTs_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|mutateRowTs_args
parameter_list|()
block|{     }
specifier|public
name|mutateRowTs_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|mutations
operator|=
name|mutations
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|mutateRowTs_args
parameter_list|(
name|mutateRowTs_args
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|this
operator|.
name|row
operator|=
name|other
operator|.
name|row
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetMutations
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Mutation
argument_list|>
name|__this__mutations
init|=
operator|new
name|ArrayList
argument_list|<
name|Mutation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Mutation
name|other_element
range|:
name|other
operator|.
name|mutations
control|)
block|{
name|__this__mutations
operator|.
name|add
argument_list|(
operator|new
name|Mutation
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|mutations
operator|=
name|__this__mutations
expr_stmt|;
block|}
name|this
operator|.
name|timestamp
operator|=
name|other
operator|.
name|timestamp
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|__this__attributes
init|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|other_element
range|:
name|other
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ByteBuffer
name|other_element_key
init|=
name|other_element
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ByteBuffer
name|other_element_value
init|=
name|other_element
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ByteBuffer
name|__this__attributes_copy_key
init|=
name|other_element_key
decl_stmt|;
name|ByteBuffer
name|__this__attributes_copy_value
init|=
name|other_element_value
decl_stmt|;
name|__this__attributes
operator|.
name|put
argument_list|(
name|__this__attributes_copy_key
argument_list|,
name|__this__attributes_copy_value
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|attributes
operator|=
name|__this__attributes
expr_stmt|;
block|}
block|}
specifier|public
name|mutateRowTs_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|mutateRowTs_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|mutations
operator|=
literal|null
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|==
literal|null
condition|?
literal|null
else|:
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of table      */
specifier|public
name|mutateRowTs_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|tableName
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|mutateRowTs_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * row key      */
specifier|public
name|byte
index|[]
name|getRow
parameter_list|()
block|{
name|setRow
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|row
operator|==
literal|null
condition|?
literal|null
else|:
name|row
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForRow
parameter_list|()
block|{
return|return
name|row
return|;
block|}
comment|/**      * row key      */
specifier|public
name|mutateRowTs_args
name|setRow
parameter_list|(
name|byte
index|[]
name|row
parameter_list|)
block|{
name|setRow
argument_list|(
name|row
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|mutateRowTs_args
name|setRow
parameter_list|(
name|ByteBuffer
name|row
parameter_list|)
block|{
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetRow
parameter_list|()
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field row is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetRow
parameter_list|()
block|{
return|return
name|this
operator|.
name|row
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setRowIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getMutationsSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|mutations
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|mutations
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|Mutation
argument_list|>
name|getMutationsIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|mutations
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|mutations
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToMutations
parameter_list|(
name|Mutation
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|mutations
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|mutations
operator|=
operator|new
name|ArrayList
argument_list|<
name|Mutation
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|mutations
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
comment|/**      * list of mutation commands      */
specifier|public
name|List
argument_list|<
name|Mutation
argument_list|>
name|getMutations
parameter_list|()
block|{
return|return
name|this
operator|.
name|mutations
return|;
block|}
comment|/**      * list of mutation commands      */
specifier|public
name|mutateRowTs_args
name|setMutations
parameter_list|(
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|)
block|{
name|this
operator|.
name|mutations
operator|=
name|mutations
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetMutations
parameter_list|()
block|{
name|this
operator|.
name|mutations
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field mutations is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetMutations
parameter_list|()
block|{
return|return
name|this
operator|.
name|mutations
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setMutationsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|mutations
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * timestamp      */
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|this
operator|.
name|timestamp
return|;
block|}
comment|/**      * timestamp      */
specifier|public
name|mutateRowTs_args
name|setTimestamp
parameter_list|(
name|long
name|timestamp
parameter_list|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTimestamp
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTimestamp
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setTimestampIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getAttributesSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|attributes
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|attributes
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|putToAttributes
parameter_list|(
name|ByteBuffer
name|key
parameter_list|,
name|ByteBuffer
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
comment|/**      * Put attributes      */
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|getAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|attributes
return|;
block|}
comment|/**      * Put attributes      */
specifier|public
name|mutateRowTs_args
name|setAttributes
parameter_list|(
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
block|{
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetAttributes
parameter_list|()
block|{
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field attributes is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|attributes
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setAttributesIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ROW
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetRow
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setRow
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|MUTATIONS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetMutations
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setMutations
argument_list|(
operator|(
name|List
argument_list|<
name|Mutation
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TIMESTAMP
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTimestamp
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTimestamp
argument_list|(
operator|(
name|Long
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ATTRIBUTES
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetAttributes
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setAttributes
argument_list|(
operator|(
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
case|case
name|ROW
case|:
return|return
name|getRow
argument_list|()
return|;
case|case
name|MUTATIONS
case|:
return|return
name|getMutations
argument_list|()
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|getTimestamp
argument_list|()
argument_list|)
return|;
case|case
name|ATTRIBUTES
case|:
return|return
name|getAttributes
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
case|case
name|ROW
case|:
return|return
name|isSetRow
argument_list|()
return|;
case|case
name|MUTATIONS
case|:
return|return
name|isSetMutations
argument_list|()
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|isSetTimestamp
argument_list|()
return|;
case|case
name|ATTRIBUTES
case|:
return|return
name|isSetAttributes
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|mutateRowTs_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|mutateRowTs_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|mutateRowTs_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_row
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
name|boolean
name|that_present_row
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_row
operator|||
name|that_present_row
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_row
operator|&&
name|that_present_row
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|row
operator|.
name|equals
argument_list|(
name|that
operator|.
name|row
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_mutations
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetMutations
argument_list|()
decl_stmt|;
name|boolean
name|that_present_mutations
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetMutations
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_mutations
operator|||
name|that_present_mutations
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_mutations
operator|&&
name|that_present_mutations
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|mutations
operator|.
name|equals
argument_list|(
name|that
operator|.
name|mutations
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_timestamp
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_timestamp
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_timestamp
operator|||
name|that_present_timestamp
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_timestamp
operator|&&
name|that_present_timestamp
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|timestamp
operator|!=
name|that
operator|.
name|timestamp
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_attributes
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetAttributes
argument_list|()
decl_stmt|;
name|boolean
name|that_present_attributes
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetAttributes
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_attributes
operator|||
name|that_present_attributes
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_attributes
operator|&&
name|that_present_attributes
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|attributes
operator|.
name|equals
argument_list|(
name|that
operator|.
name|attributes
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|mutateRowTs_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|mutateRowTs_args
name|typedOther
init|=
operator|(
name|mutateRowTs_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetRow
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetRow
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetRow
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|row
argument_list|,
name|typedOther
operator|.
name|row
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetMutations
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetMutations
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetMutations
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|mutations
argument_list|,
name|typedOther
operator|.
name|mutations
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTimestamp
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTimestamp
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTimestamp
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|timestamp
argument_list|,
name|typedOther
operator|.
name|timestamp
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetAttributes
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetAttributes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetAttributes
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|attributes
argument_list|,
name|typedOther
operator|.
name|attributes
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"mutateRowTs_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"row:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|row
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"mutations:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|mutations
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|mutations
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"timestamp:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"attributes:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|attributes
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
comment|// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
name|__isset_bit_vector
operator|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|mutateRowTs_argsStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|mutateRowTs_argsStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|mutateRowTs_argsStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|mutateRowTs_argsStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|mutateRowTs_args
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|mutateRowTs_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// ROW
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setRowIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// MUTATIONS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list340
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|mutations
operator|=
operator|new
name|ArrayList
argument_list|<
name|Mutation
argument_list|>
argument_list|(
name|_list340
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i341
init|=
literal|0
init|;
name|_i341
operator|<
name|_list340
operator|.
name|size
condition|;
operator|++
name|_i341
control|)
block|{
name|Mutation
name|_elem342
decl_stmt|;
comment|// optional
name|_elem342
operator|=
operator|new
name|Mutation
argument_list|()
expr_stmt|;
name|_elem342
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|mutations
operator|.
name|add
argument_list|(
name|_elem342
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setMutationsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// TIMESTAMP
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
condition|)
block|{
name|struct
operator|.
name|timestamp
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|5
case|:
comment|// ATTRIBUTES
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map343
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|(
literal|2
operator|*
name|_map343
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i344
init|=
literal|0
init|;
name|_i344
operator|<
name|_map343
operator|.
name|size
condition|;
operator|++
name|_i344
control|)
block|{
name|ByteBuffer
name|_key345
decl_stmt|;
comment|// required
name|ByteBuffer
name|_val346
decl_stmt|;
comment|// required
name|_key345
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val346
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|_key345
argument_list|,
name|_val346
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setAttributesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|mutateRowTs_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|row
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ROW_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|row
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|mutations
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|MUTATIONS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|struct
operator|.
name|mutations
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Mutation
name|_iter347
range|:
name|struct
operator|.
name|mutations
control|)
block|{
name|_iter347
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TIMESTAMP_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI64
argument_list|(
name|struct
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|attributes
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ATTRIBUTES_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|struct
operator|.
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|_iter348
range|:
name|struct
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter348
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter348
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|mutateRowTs_argsTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|mutateRowTs_argsTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|mutateRowTs_argsTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|mutateRowTs_argsTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|mutateRowTs_args
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|mutateRowTs_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetMutations
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetTimestamp
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|5
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|row
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetMutations
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|mutations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Mutation
name|_iter349
range|:
name|struct
operator|.
name|mutations
control|)
block|{
name|_iter349
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetTimestamp
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI64
argument_list|(
name|struct
operator|.
name|timestamp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|_iter350
range|:
name|struct
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter350
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter350
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|mutateRowTs_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setRowIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|2
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list351
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|mutations
operator|=
operator|new
name|ArrayList
argument_list|<
name|Mutation
argument_list|>
argument_list|(
name|_list351
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i352
init|=
literal|0
init|;
name|_i352
operator|<
name|_list351
operator|.
name|size
condition|;
operator|++
name|_i352
control|)
block|{
name|Mutation
name|_elem353
decl_stmt|;
comment|// optional
name|_elem353
operator|=
operator|new
name|Mutation
argument_list|()
expr_stmt|;
name|_elem353
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|mutations
operator|.
name|add
argument_list|(
name|_elem353
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setMutationsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|3
argument_list|)
condition|)
block|{
name|struct
operator|.
name|timestamp
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|4
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map354
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|(
literal|2
operator|*
name|_map354
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i355
init|=
literal|0
init|;
name|_i355
operator|<
name|_map354
operator|.
name|size
condition|;
operator|++
name|_i355
control|)
block|{
name|ByteBuffer
name|_key356
decl_stmt|;
comment|// required
name|ByteBuffer
name|_val357
decl_stmt|;
comment|// required
name|_key356
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val357
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|_key356
argument_list|,
name|_val357
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setAttributesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|mutateRowTs_result
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|mutateRowTs_result
argument_list|,
name|mutateRowTs_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"mutateRowTs_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|IA_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"ia"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|mutateRowTs_resultStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|mutateRowTs_resultTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IOError
name|io
decl_stmt|;
comment|// required
specifier|public
name|IllegalArgument
name|ia
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|,
name|IA
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"ia"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
case|case
literal|2
case|:
comment|// IA
return|return
name|IA
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IA
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"ia"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|mutateRowTs_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|mutateRowTs_result
parameter_list|()
block|{     }
specifier|public
name|mutateRowTs_result
parameter_list|(
name|IOError
name|io
parameter_list|,
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|this
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|mutateRowTs_result
parameter_list|(
name|mutateRowTs_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetIa
argument_list|()
condition|)
block|{
name|this
operator|.
name|ia
operator|=
operator|new
name|IllegalArgument
argument_list|(
name|other
operator|.
name|ia
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|mutateRowTs_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|mutateRowTs_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|ia
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|mutateRowTs_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|IllegalArgument
name|getIa
parameter_list|()
block|{
return|return
name|this
operator|.
name|ia
return|;
block|}
specifier|public
name|mutateRowTs_result
name|setIa
parameter_list|(
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|this
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIa
parameter_list|()
block|{
name|this
operator|.
name|ia
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field ia is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIa
parameter_list|()
block|{
return|return
name|this
operator|.
name|ia
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIaIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|ia
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IA
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIa
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIa
argument_list|(
operator|(
name|IllegalArgument
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
case|case
name|IA
case|:
return|return
name|getIa
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
case|case
name|IA
case|:
return|return
name|isSetIa
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|mutateRowTs_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|mutateRowTs_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|mutateRowTs_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_ia
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIa
argument_list|()
decl_stmt|;
name|boolean
name|that_present_ia
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIa
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_ia
operator|||
name|that_present_ia
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_ia
operator|&&
name|that_present_ia
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|ia
operator|.
name|equals
argument_list|(
name|that
operator|.
name|ia
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|mutateRowTs_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|mutateRowTs_result
name|typedOther
init|=
operator|(
name|mutateRowTs_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIa
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIa
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIa
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|ia
argument_list|,
name|typedOther
operator|.
name|ia
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"mutateRowTs_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"ia:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|ia
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|ia
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|mutateRowTs_resultStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|mutateRowTs_resultStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|mutateRowTs_resultStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|mutateRowTs_resultStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|mutateRowTs_result
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|mutateRowTs_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// IA
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|ia
operator|=
operator|new
name|IllegalArgument
argument_list|()
expr_stmt|;
name|struct
operator|.
name|ia
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIaIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|mutateRowTs_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|ia
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IA_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|ia
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|mutateRowTs_resultTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|mutateRowTs_resultTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|mutateRowTs_resultTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|mutateRowTs_resultTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|mutateRowTs_result
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|mutateRowTs_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIa
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIa
argument_list|()
condition|)
block|{
name|struct
operator|.
name|ia
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|mutateRowTs_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|ia
operator|=
operator|new
name|IllegalArgument
argument_list|()
expr_stmt|;
name|struct
operator|.
name|ia
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIaIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|mutateRows_args
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|mutateRows_args
argument_list|,
name|mutateRows_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"mutateRows_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ROW_BATCHES_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"rowBatches"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ATTRIBUTES_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"attributes"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|mutateRows_argsStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|mutateRows_argsTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|// required
comment|/**      * list of row batches      */
specifier|public
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|rowBatches
decl_stmt|;
comment|// required
comment|/**      * Put attributes      */
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
comment|/**        * name of table        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|,
comment|/**        * list of row batches        */
name|ROW_BATCHES
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"rowBatches"
argument_list|)
block|,
comment|/**        * Put attributes        */
name|ATTRIBUTES
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"attributes"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
case|case
literal|2
case|:
comment|// ROW_BATCHES
return|return
name|ROW_BATCHES
return|;
case|case
literal|3
case|:
comment|// ATTRIBUTES
return|return
name|ATTRIBUTES
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ROW_BATCHES
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"rowBatches"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|BatchMutation
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ATTRIBUTES
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"attributes"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|MapMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|mutateRows_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|mutateRows_args
parameter_list|()
block|{     }
specifier|public
name|mutateRows_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|rowBatches
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|rowBatches
operator|=
name|rowBatches
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|mutateRows_args
parameter_list|(
name|mutateRows_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetRowBatches
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|__this__rowBatches
init|=
operator|new
name|ArrayList
argument_list|<
name|BatchMutation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|BatchMutation
name|other_element
range|:
name|other
operator|.
name|rowBatches
control|)
block|{
name|__this__rowBatches
operator|.
name|add
argument_list|(
operator|new
name|BatchMutation
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|rowBatches
operator|=
name|__this__rowBatches
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|__this__attributes
init|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|other_element
range|:
name|other
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ByteBuffer
name|other_element_key
init|=
name|other_element
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ByteBuffer
name|other_element_value
init|=
name|other_element
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ByteBuffer
name|__this__attributes_copy_key
init|=
name|other_element_key
decl_stmt|;
name|ByteBuffer
name|__this__attributes_copy_value
init|=
name|other_element_value
decl_stmt|;
name|__this__attributes
operator|.
name|put
argument_list|(
name|__this__attributes_copy_key
argument_list|,
name|__this__attributes_copy_value
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|attributes
operator|=
name|__this__attributes
expr_stmt|;
block|}
block|}
specifier|public
name|mutateRows_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|mutateRows_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|rowBatches
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|==
literal|null
condition|?
literal|null
else|:
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of table      */
specifier|public
name|mutateRows_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|tableName
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|mutateRows_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getRowBatchesSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|rowBatches
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|rowBatches
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|BatchMutation
argument_list|>
name|getRowBatchesIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|rowBatches
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|rowBatches
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToRowBatches
parameter_list|(
name|BatchMutation
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|rowBatches
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|rowBatches
operator|=
operator|new
name|ArrayList
argument_list|<
name|BatchMutation
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|rowBatches
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
comment|/**      * list of row batches      */
specifier|public
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|getRowBatches
parameter_list|()
block|{
return|return
name|this
operator|.
name|rowBatches
return|;
block|}
comment|/**      * list of row batches      */
specifier|public
name|mutateRows_args
name|setRowBatches
parameter_list|(
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|rowBatches
parameter_list|)
block|{
name|this
operator|.
name|rowBatches
operator|=
name|rowBatches
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetRowBatches
parameter_list|()
block|{
name|this
operator|.
name|rowBatches
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field rowBatches is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetRowBatches
parameter_list|()
block|{
return|return
name|this
operator|.
name|rowBatches
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setRowBatchesIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|rowBatches
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getAttributesSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|attributes
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|attributes
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|putToAttributes
parameter_list|(
name|ByteBuffer
name|key
parameter_list|,
name|ByteBuffer
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
comment|/**      * Put attributes      */
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|getAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|attributes
return|;
block|}
comment|/**      * Put attributes      */
specifier|public
name|mutateRows_args
name|setAttributes
parameter_list|(
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
block|{
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetAttributes
parameter_list|()
block|{
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field attributes is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|attributes
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setAttributesIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ROW_BATCHES
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetRowBatches
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setRowBatches
argument_list|(
operator|(
name|List
argument_list|<
name|BatchMutation
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ATTRIBUTES
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetAttributes
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setAttributes
argument_list|(
operator|(
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
case|case
name|ROW_BATCHES
case|:
return|return
name|getRowBatches
argument_list|()
return|;
case|case
name|ATTRIBUTES
case|:
return|return
name|getAttributes
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
case|case
name|ROW_BATCHES
case|:
return|return
name|isSetRowBatches
argument_list|()
return|;
case|case
name|ATTRIBUTES
case|:
return|return
name|isSetAttributes
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|mutateRows_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|mutateRows_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|mutateRows_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_rowBatches
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetRowBatches
argument_list|()
decl_stmt|;
name|boolean
name|that_present_rowBatches
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetRowBatches
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_rowBatches
operator|||
name|that_present_rowBatches
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_rowBatches
operator|&&
name|that_present_rowBatches
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|rowBatches
operator|.
name|equals
argument_list|(
name|that
operator|.
name|rowBatches
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_attributes
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetAttributes
argument_list|()
decl_stmt|;
name|boolean
name|that_present_attributes
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetAttributes
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_attributes
operator|||
name|that_present_attributes
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_attributes
operator|&&
name|that_present_attributes
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|attributes
operator|.
name|equals
argument_list|(
name|that
operator|.
name|attributes
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|mutateRows_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|mutateRows_args
name|typedOther
init|=
operator|(
name|mutateRows_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetRowBatches
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetRowBatches
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetRowBatches
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|rowBatches
argument_list|,
name|typedOther
operator|.
name|rowBatches
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetAttributes
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetAttributes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetAttributes
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|attributes
argument_list|,
name|typedOther
operator|.
name|attributes
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"mutateRows_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"rowBatches:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|rowBatches
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|rowBatches
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"attributes:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|attributes
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|mutateRows_argsStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|mutateRows_argsStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|mutateRows_argsStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|mutateRows_argsStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|mutateRows_args
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|mutateRows_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// ROW_BATCHES
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list358
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|rowBatches
operator|=
operator|new
name|ArrayList
argument_list|<
name|BatchMutation
argument_list|>
argument_list|(
name|_list358
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i359
init|=
literal|0
init|;
name|_i359
operator|<
name|_list358
operator|.
name|size
condition|;
operator|++
name|_i359
control|)
block|{
name|BatchMutation
name|_elem360
decl_stmt|;
comment|// optional
name|_elem360
operator|=
operator|new
name|BatchMutation
argument_list|()
expr_stmt|;
name|_elem360
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|rowBatches
operator|.
name|add
argument_list|(
name|_elem360
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setRowBatchesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// ATTRIBUTES
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map361
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|(
literal|2
operator|*
name|_map361
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i362
init|=
literal|0
init|;
name|_i362
operator|<
name|_map361
operator|.
name|size
condition|;
operator|++
name|_i362
control|)
block|{
name|ByteBuffer
name|_key363
decl_stmt|;
comment|// required
name|ByteBuffer
name|_val364
decl_stmt|;
comment|// required
name|_key363
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val364
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|_key363
argument_list|,
name|_val364
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setAttributesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|mutateRows_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|rowBatches
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ROW_BATCHES_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|struct
operator|.
name|rowBatches
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|BatchMutation
name|_iter365
range|:
name|struct
operator|.
name|rowBatches
control|)
block|{
name|_iter365
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|attributes
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ATTRIBUTES_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|struct
operator|.
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|_iter366
range|:
name|struct
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter366
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter366
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|mutateRows_argsTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|mutateRows_argsTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|mutateRows_argsTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|mutateRows_argsTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|mutateRows_args
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|mutateRows_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetRowBatches
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|3
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetRowBatches
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|rowBatches
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|BatchMutation
name|_iter367
range|:
name|struct
operator|.
name|rowBatches
control|)
block|{
name|_iter367
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|_iter368
range|:
name|struct
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter368
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter368
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|mutateRows_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list369
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|rowBatches
operator|=
operator|new
name|ArrayList
argument_list|<
name|BatchMutation
argument_list|>
argument_list|(
name|_list369
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i370
init|=
literal|0
init|;
name|_i370
operator|<
name|_list369
operator|.
name|size
condition|;
operator|++
name|_i370
control|)
block|{
name|BatchMutation
name|_elem371
decl_stmt|;
comment|// optional
name|_elem371
operator|=
operator|new
name|BatchMutation
argument_list|()
expr_stmt|;
name|_elem371
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|rowBatches
operator|.
name|add
argument_list|(
name|_elem371
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setRowBatchesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|2
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map372
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|(
literal|2
operator|*
name|_map372
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i373
init|=
literal|0
init|;
name|_i373
operator|<
name|_map372
operator|.
name|size
condition|;
operator|++
name|_i373
control|)
block|{
name|ByteBuffer
name|_key374
decl_stmt|;
comment|// required
name|ByteBuffer
name|_val375
decl_stmt|;
comment|// required
name|_key374
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val375
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|_key374
argument_list|,
name|_val375
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setAttributesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|mutateRows_result
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|mutateRows_result
argument_list|,
name|mutateRows_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"mutateRows_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|IA_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"ia"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|mutateRows_resultStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|mutateRows_resultTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IOError
name|io
decl_stmt|;
comment|// required
specifier|public
name|IllegalArgument
name|ia
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|,
name|IA
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"ia"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
case|case
literal|2
case|:
comment|// IA
return|return
name|IA
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IA
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"ia"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|mutateRows_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|mutateRows_result
parameter_list|()
block|{     }
specifier|public
name|mutateRows_result
parameter_list|(
name|IOError
name|io
parameter_list|,
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|this
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|mutateRows_result
parameter_list|(
name|mutateRows_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetIa
argument_list|()
condition|)
block|{
name|this
operator|.
name|ia
operator|=
operator|new
name|IllegalArgument
argument_list|(
name|other
operator|.
name|ia
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|mutateRows_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|mutateRows_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|ia
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|mutateRows_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|IllegalArgument
name|getIa
parameter_list|()
block|{
return|return
name|this
operator|.
name|ia
return|;
block|}
specifier|public
name|mutateRows_result
name|setIa
parameter_list|(
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|this
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIa
parameter_list|()
block|{
name|this
operator|.
name|ia
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field ia is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIa
parameter_list|()
block|{
return|return
name|this
operator|.
name|ia
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIaIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|ia
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IA
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIa
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIa
argument_list|(
operator|(
name|IllegalArgument
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
case|case
name|IA
case|:
return|return
name|getIa
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
case|case
name|IA
case|:
return|return
name|isSetIa
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|mutateRows_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|mutateRows_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|mutateRows_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_ia
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIa
argument_list|()
decl_stmt|;
name|boolean
name|that_present_ia
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIa
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_ia
operator|||
name|that_present_ia
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_ia
operator|&&
name|that_present_ia
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|ia
operator|.
name|equals
argument_list|(
name|that
operator|.
name|ia
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|mutateRows_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|mutateRows_result
name|typedOther
init|=
operator|(
name|mutateRows_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIa
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIa
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIa
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|ia
argument_list|,
name|typedOther
operator|.
name|ia
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"mutateRows_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"ia:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|ia
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|ia
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|mutateRows_resultStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|mutateRows_resultStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|mutateRows_resultStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|mutateRows_resultStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|mutateRows_result
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|mutateRows_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// IA
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|ia
operator|=
operator|new
name|IllegalArgument
argument_list|()
expr_stmt|;
name|struct
operator|.
name|ia
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIaIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|mutateRows_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|ia
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IA_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|ia
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|mutateRows_resultTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|mutateRows_resultTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|mutateRows_resultTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|mutateRows_resultTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|mutateRows_result
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|mutateRows_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIa
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIa
argument_list|()
condition|)
block|{
name|struct
operator|.
name|ia
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|mutateRows_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|ia
operator|=
operator|new
name|IllegalArgument
argument_list|()
expr_stmt|;
name|struct
operator|.
name|ia
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIaIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|mutateRowsTs_args
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|mutateRowsTs_args
argument_list|,
name|mutateRowsTs_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"mutateRowsTs_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ROW_BATCHES_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"rowBatches"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|TIMESTAMP_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"timestamp"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ATTRIBUTES_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"attributes"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|mutateRowsTs_argsStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|mutateRowsTs_argsTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|// required
comment|/**      * list of row batches      */
specifier|public
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|rowBatches
decl_stmt|;
comment|// required
comment|/**      * timestamp      */
specifier|public
name|long
name|timestamp
decl_stmt|;
comment|// required
comment|/**      * Put attributes      */
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
comment|/**        * name of table        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|,
comment|/**        * list of row batches        */
name|ROW_BATCHES
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"rowBatches"
argument_list|)
block|,
comment|/**        * timestamp        */
name|TIMESTAMP
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"timestamp"
argument_list|)
block|,
comment|/**        * Put attributes        */
name|ATTRIBUTES
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|,
literal|"attributes"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
case|case
literal|2
case|:
comment|// ROW_BATCHES
return|return
name|ROW_BATCHES
return|;
case|case
literal|3
case|:
comment|// TIMESTAMP
return|return
name|TIMESTAMP
return|;
case|case
literal|4
case|:
comment|// ATTRIBUTES
return|return
name|ATTRIBUTES
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__TIMESTAMP_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ROW_BATCHES
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"rowBatches"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|BatchMutation
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TIMESTAMP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"timestamp"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ATTRIBUTES
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"attributes"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|MapMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|mutateRowsTs_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|mutateRowsTs_args
parameter_list|()
block|{     }
specifier|public
name|mutateRowsTs_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|rowBatches
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|rowBatches
operator|=
name|rowBatches
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|mutateRowsTs_args
parameter_list|(
name|mutateRowsTs_args
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetRowBatches
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|__this__rowBatches
init|=
operator|new
name|ArrayList
argument_list|<
name|BatchMutation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|BatchMutation
name|other_element
range|:
name|other
operator|.
name|rowBatches
control|)
block|{
name|__this__rowBatches
operator|.
name|add
argument_list|(
operator|new
name|BatchMutation
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|rowBatches
operator|=
name|__this__rowBatches
expr_stmt|;
block|}
name|this
operator|.
name|timestamp
operator|=
name|other
operator|.
name|timestamp
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|__this__attributes
init|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|other_element
range|:
name|other
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ByteBuffer
name|other_element_key
init|=
name|other_element
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ByteBuffer
name|other_element_value
init|=
name|other_element
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ByteBuffer
name|__this__attributes_copy_key
init|=
name|other_element_key
decl_stmt|;
name|ByteBuffer
name|__this__attributes_copy_value
init|=
name|other_element_value
decl_stmt|;
name|__this__attributes
operator|.
name|put
argument_list|(
name|__this__attributes_copy_key
argument_list|,
name|__this__attributes_copy_value
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|attributes
operator|=
name|__this__attributes
expr_stmt|;
block|}
block|}
specifier|public
name|mutateRowsTs_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|mutateRowsTs_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|rowBatches
operator|=
literal|null
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|==
literal|null
condition|?
literal|null
else|:
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of table      */
specifier|public
name|mutateRowsTs_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|tableName
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|mutateRowsTs_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getRowBatchesSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|rowBatches
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|rowBatches
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|BatchMutation
argument_list|>
name|getRowBatchesIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|rowBatches
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|rowBatches
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToRowBatches
parameter_list|(
name|BatchMutation
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|rowBatches
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|rowBatches
operator|=
operator|new
name|ArrayList
argument_list|<
name|BatchMutation
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|rowBatches
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
comment|/**      * list of row batches      */
specifier|public
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|getRowBatches
parameter_list|()
block|{
return|return
name|this
operator|.
name|rowBatches
return|;
block|}
comment|/**      * list of row batches      */
specifier|public
name|mutateRowsTs_args
name|setRowBatches
parameter_list|(
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|rowBatches
parameter_list|)
block|{
name|this
operator|.
name|rowBatches
operator|=
name|rowBatches
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetRowBatches
parameter_list|()
block|{
name|this
operator|.
name|rowBatches
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field rowBatches is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetRowBatches
parameter_list|()
block|{
return|return
name|this
operator|.
name|rowBatches
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setRowBatchesIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|rowBatches
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * timestamp      */
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|this
operator|.
name|timestamp
return|;
block|}
comment|/**      * timestamp      */
specifier|public
name|mutateRowsTs_args
name|setTimestamp
parameter_list|(
name|long
name|timestamp
parameter_list|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTimestamp
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTimestamp
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setTimestampIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getAttributesSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|attributes
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|attributes
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|putToAttributes
parameter_list|(
name|ByteBuffer
name|key
parameter_list|,
name|ByteBuffer
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
comment|/**      * Put attributes      */
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|getAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|attributes
return|;
block|}
comment|/**      * Put attributes      */
specifier|public
name|mutateRowsTs_args
name|setAttributes
parameter_list|(
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
block|{
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetAttributes
parameter_list|()
block|{
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field attributes is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|attributes
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setAttributesIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ROW_BATCHES
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetRowBatches
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setRowBatches
argument_list|(
operator|(
name|List
argument_list|<
name|BatchMutation
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TIMESTAMP
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTimestamp
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTimestamp
argument_list|(
operator|(
name|Long
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ATTRIBUTES
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetAttributes
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setAttributes
argument_list|(
operator|(
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
case|case
name|ROW_BATCHES
case|:
return|return
name|getRowBatches
argument_list|()
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|getTimestamp
argument_list|()
argument_list|)
return|;
case|case
name|ATTRIBUTES
case|:
return|return
name|getAttributes
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
case|case
name|ROW_BATCHES
case|:
return|return
name|isSetRowBatches
argument_list|()
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|isSetTimestamp
argument_list|()
return|;
case|case
name|ATTRIBUTES
case|:
return|return
name|isSetAttributes
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|mutateRowsTs_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|mutateRowsTs_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|mutateRowsTs_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_rowBatches
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetRowBatches
argument_list|()
decl_stmt|;
name|boolean
name|that_present_rowBatches
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetRowBatches
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_rowBatches
operator|||
name|that_present_rowBatches
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_rowBatches
operator|&&
name|that_present_rowBatches
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|rowBatches
operator|.
name|equals
argument_list|(
name|that
operator|.
name|rowBatches
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_timestamp
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_timestamp
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_timestamp
operator|||
name|that_present_timestamp
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_timestamp
operator|&&
name|that_present_timestamp
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|timestamp
operator|!=
name|that
operator|.
name|timestamp
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_attributes
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetAttributes
argument_list|()
decl_stmt|;
name|boolean
name|that_present_attributes
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetAttributes
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_attributes
operator|||
name|that_present_attributes
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_attributes
operator|&&
name|that_present_attributes
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|attributes
operator|.
name|equals
argument_list|(
name|that
operator|.
name|attributes
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|mutateRowsTs_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|mutateRowsTs_args
name|typedOther
init|=
operator|(
name|mutateRowsTs_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetRowBatches
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetRowBatches
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetRowBatches
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|rowBatches
argument_list|,
name|typedOther
operator|.
name|rowBatches
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTimestamp
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTimestamp
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTimestamp
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|timestamp
argument_list|,
name|typedOther
operator|.
name|timestamp
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetAttributes
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetAttributes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetAttributes
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|attributes
argument_list|,
name|typedOther
operator|.
name|attributes
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"mutateRowsTs_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"rowBatches:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|rowBatches
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|rowBatches
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"timestamp:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"attributes:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|attributes
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|mutateRowsTs_argsStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|mutateRowsTs_argsStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|mutateRowsTs_argsStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|mutateRowsTs_argsStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|mutateRowsTs_args
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|mutateRowsTs_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// ROW_BATCHES
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list376
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|rowBatches
operator|=
operator|new
name|ArrayList
argument_list|<
name|BatchMutation
argument_list|>
argument_list|(
name|_list376
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i377
init|=
literal|0
init|;
name|_i377
operator|<
name|_list376
operator|.
name|size
condition|;
operator|++
name|_i377
control|)
block|{
name|BatchMutation
name|_elem378
decl_stmt|;
comment|// optional
name|_elem378
operator|=
operator|new
name|BatchMutation
argument_list|()
expr_stmt|;
name|_elem378
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|rowBatches
operator|.
name|add
argument_list|(
name|_elem378
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setRowBatchesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// TIMESTAMP
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
condition|)
block|{
name|struct
operator|.
name|timestamp
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// ATTRIBUTES
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map379
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|(
literal|2
operator|*
name|_map379
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i380
init|=
literal|0
init|;
name|_i380
operator|<
name|_map379
operator|.
name|size
condition|;
operator|++
name|_i380
control|)
block|{
name|ByteBuffer
name|_key381
decl_stmt|;
comment|// required
name|ByteBuffer
name|_val382
decl_stmt|;
comment|// required
name|_key381
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val382
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|_key381
argument_list|,
name|_val382
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setAttributesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|mutateRowsTs_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|rowBatches
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ROW_BATCHES_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|struct
operator|.
name|rowBatches
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|BatchMutation
name|_iter383
range|:
name|struct
operator|.
name|rowBatches
control|)
block|{
name|_iter383
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TIMESTAMP_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI64
argument_list|(
name|struct
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|attributes
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ATTRIBUTES_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|struct
operator|.
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|_iter384
range|:
name|struct
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter384
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter384
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|mutateRowsTs_argsTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|mutateRowsTs_argsTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|mutateRowsTs_argsTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|mutateRowsTs_argsTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|mutateRowsTs_args
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|mutateRowsTs_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetRowBatches
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetTimestamp
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|4
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetRowBatches
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|rowBatches
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|BatchMutation
name|_iter385
range|:
name|struct
operator|.
name|rowBatches
control|)
block|{
name|_iter385
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetTimestamp
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI64
argument_list|(
name|struct
operator|.
name|timestamp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|_iter386
range|:
name|struct
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter386
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter386
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|mutateRowsTs_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list387
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|rowBatches
operator|=
operator|new
name|ArrayList
argument_list|<
name|BatchMutation
argument_list|>
argument_list|(
name|_list387
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i388
init|=
literal|0
init|;
name|_i388
operator|<
name|_list387
operator|.
name|size
condition|;
operator|++
name|_i388
control|)
block|{
name|BatchMutation
name|_elem389
decl_stmt|;
comment|// optional
name|_elem389
operator|=
operator|new
name|BatchMutation
argument_list|()
expr_stmt|;
name|_elem389
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|rowBatches
operator|.
name|add
argument_list|(
name|_elem389
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setRowBatchesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|struct
operator|.
name|timestamp
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|3
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map390
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|(
literal|2
operator|*
name|_map390
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i391
init|=
literal|0
init|;
name|_i391
operator|<
name|_map390
operator|.
name|size
condition|;
operator|++
name|_i391
control|)
block|{
name|ByteBuffer
name|_key392
decl_stmt|;
comment|// required
name|ByteBuffer
name|_val393
decl_stmt|;
comment|// required
name|_key392
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val393
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|_key392
argument_list|,
name|_val393
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setAttributesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|mutateRowsTs_result
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|mutateRowsTs_result
argument_list|,
name|mutateRowsTs_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"mutateRowsTs_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|IA_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"ia"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|mutateRowsTs_resultStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|mutateRowsTs_resultTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IOError
name|io
decl_stmt|;
comment|// required
specifier|public
name|IllegalArgument
name|ia
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|,
name|IA
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"ia"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
case|case
literal|2
case|:
comment|// IA
return|return
name|IA
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IA
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"ia"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|mutateRowsTs_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|mutateRowsTs_result
parameter_list|()
block|{     }
specifier|public
name|mutateRowsTs_result
parameter_list|(
name|IOError
name|io
parameter_list|,
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|this
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|mutateRowsTs_result
parameter_list|(
name|mutateRowsTs_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetIa
argument_list|()
condition|)
block|{
name|this
operator|.
name|ia
operator|=
operator|new
name|IllegalArgument
argument_list|(
name|other
operator|.
name|ia
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|mutateRowsTs_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|mutateRowsTs_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|ia
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|mutateRowsTs_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|IllegalArgument
name|getIa
parameter_list|()
block|{
return|return
name|this
operator|.
name|ia
return|;
block|}
specifier|public
name|mutateRowsTs_result
name|setIa
parameter_list|(
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|this
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIa
parameter_list|()
block|{
name|this
operator|.
name|ia
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field ia is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIa
parameter_list|()
block|{
return|return
name|this
operator|.
name|ia
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIaIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|ia
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IA
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIa
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIa
argument_list|(
operator|(
name|IllegalArgument
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
case|case
name|IA
case|:
return|return
name|getIa
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
case|case
name|IA
case|:
return|return
name|isSetIa
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|mutateRowsTs_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|mutateRowsTs_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|mutateRowsTs_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_ia
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIa
argument_list|()
decl_stmt|;
name|boolean
name|that_present_ia
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIa
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_ia
operator|||
name|that_present_ia
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_ia
operator|&&
name|that_present_ia
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|ia
operator|.
name|equals
argument_list|(
name|that
operator|.
name|ia
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|mutateRowsTs_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|mutateRowsTs_result
name|typedOther
init|=
operator|(
name|mutateRowsTs_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIa
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIa
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIa
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|ia
argument_list|,
name|typedOther
operator|.
name|ia
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"mutateRowsTs_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"ia:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|ia
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|ia
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|mutateRowsTs_resultStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|mutateRowsTs_resultStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|mutateRowsTs_resultStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|mutateRowsTs_resultStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|mutateRowsTs_result
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|mutateRowsTs_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// IA
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|ia
operator|=
operator|new
name|IllegalArgument
argument_list|()
expr_stmt|;
name|struct
operator|.
name|ia
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIaIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|mutateRowsTs_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|ia
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IA_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|ia
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|mutateRowsTs_resultTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|mutateRowsTs_resultTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|mutateRowsTs_resultTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|mutateRowsTs_resultTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|mutateRowsTs_result
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|mutateRowsTs_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIa
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIa
argument_list|()
condition|)
block|{
name|struct
operator|.
name|ia
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|mutateRowsTs_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|ia
operator|=
operator|new
name|IllegalArgument
argument_list|()
expr_stmt|;
name|struct
operator|.
name|ia
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIaIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|atomicIncrement_args
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|atomicIncrement_args
argument_list|,
name|atomicIncrement_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"atomicIncrement_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ROW_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"row"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|COLUMN_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"column"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|VALUE_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"value"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|atomicIncrement_argsStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|atomicIncrement_argsTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|// required
comment|/**      * row to increment      */
specifier|public
name|ByteBuffer
name|row
decl_stmt|;
comment|// required
comment|/**      * name of column      */
specifier|public
name|ByteBuffer
name|column
decl_stmt|;
comment|// required
comment|/**      * amount to increment by      */
specifier|public
name|long
name|value
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
comment|/**        * name of table        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|,
comment|/**        * row to increment        */
name|ROW
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"row"
argument_list|)
block|,
comment|/**        * name of column        */
name|COLUMN
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"column"
argument_list|)
block|,
comment|/**        * amount to increment by        */
name|VALUE
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|,
literal|"value"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
case|case
literal|2
case|:
comment|// ROW
return|return
name|ROW
return|;
case|case
literal|3
case|:
comment|// COLUMN
return|return
name|COLUMN
return|;
case|case
literal|4
case|:
comment|// VALUE
return|return
name|VALUE
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__VALUE_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ROW
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"row"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|COLUMN
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"column"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|VALUE
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"value"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|atomicIncrement_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|atomicIncrement_args
parameter_list|()
block|{     }
specifier|public
name|atomicIncrement_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|column
operator|=
name|column
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|setValueIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|atomicIncrement_args
parameter_list|(
name|atomicIncrement_args
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|this
operator|.
name|row
operator|=
name|other
operator|.
name|row
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetColumn
argument_list|()
condition|)
block|{
name|this
operator|.
name|column
operator|=
name|other
operator|.
name|column
expr_stmt|;
block|}
name|this
operator|.
name|value
operator|=
name|other
operator|.
name|value
expr_stmt|;
block|}
specifier|public
name|atomicIncrement_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|atomicIncrement_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|column
operator|=
literal|null
expr_stmt|;
name|setValueIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|value
operator|=
literal|0
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|==
literal|null
condition|?
literal|null
else|:
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of table      */
specifier|public
name|atomicIncrement_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|tableName
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|atomicIncrement_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * row to increment      */
specifier|public
name|byte
index|[]
name|getRow
parameter_list|()
block|{
name|setRow
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|row
operator|==
literal|null
condition|?
literal|null
else|:
name|row
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForRow
parameter_list|()
block|{
return|return
name|row
return|;
block|}
comment|/**      * row to increment      */
specifier|public
name|atomicIncrement_args
name|setRow
parameter_list|(
name|byte
index|[]
name|row
parameter_list|)
block|{
name|setRow
argument_list|(
name|row
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|atomicIncrement_args
name|setRow
parameter_list|(
name|ByteBuffer
name|row
parameter_list|)
block|{
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetRow
parameter_list|()
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field row is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetRow
parameter_list|()
block|{
return|return
name|this
operator|.
name|row
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setRowIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * name of column      */
specifier|public
name|byte
index|[]
name|getColumn
parameter_list|()
block|{
name|setColumn
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|column
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|column
operator|==
literal|null
condition|?
literal|null
else|:
name|column
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForColumn
parameter_list|()
block|{
return|return
name|column
return|;
block|}
comment|/**      * name of column      */
specifier|public
name|atomicIncrement_args
name|setColumn
parameter_list|(
name|byte
index|[]
name|column
parameter_list|)
block|{
name|setColumn
argument_list|(
name|column
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|column
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|atomicIncrement_args
name|setColumn
parameter_list|(
name|ByteBuffer
name|column
parameter_list|)
block|{
name|this
operator|.
name|column
operator|=
name|column
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetColumn
parameter_list|()
block|{
name|this
operator|.
name|column
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field column is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetColumn
parameter_list|()
block|{
return|return
name|this
operator|.
name|column
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setColumnIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|column
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * amount to increment by      */
specifier|public
name|long
name|getValue
parameter_list|()
block|{
return|return
name|this
operator|.
name|value
return|;
block|}
comment|/**      * amount to increment by      */
specifier|public
name|atomicIncrement_args
name|setValue
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|setValueIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetValue
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__VALUE_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field value is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetValue
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__VALUE_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setValueIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__VALUE_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ROW
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetRow
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setRow
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|COLUMN
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetColumn
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setColumn
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|VALUE
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setValue
argument_list|(
operator|(
name|Long
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
case|case
name|ROW
case|:
return|return
name|getRow
argument_list|()
return|;
case|case
name|COLUMN
case|:
return|return
name|getColumn
argument_list|()
return|;
case|case
name|VALUE
case|:
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|getValue
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
case|case
name|ROW
case|:
return|return
name|isSetRow
argument_list|()
return|;
case|case
name|COLUMN
case|:
return|return
name|isSetColumn
argument_list|()
return|;
case|case
name|VALUE
case|:
return|return
name|isSetValue
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|atomicIncrement_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|atomicIncrement_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|atomicIncrement_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_row
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
name|boolean
name|that_present_row
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_row
operator|||
name|that_present_row
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_row
operator|&&
name|that_present_row
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|row
operator|.
name|equals
argument_list|(
name|that
operator|.
name|row
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_column
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetColumn
argument_list|()
decl_stmt|;
name|boolean
name|that_present_column
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetColumn
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_column
operator|||
name|that_present_column
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_column
operator|&&
name|that_present_column
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|column
operator|.
name|equals
argument_list|(
name|that
operator|.
name|column
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_value
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_value
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_value
operator|||
name|that_present_value
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_value
operator|&&
name|that_present_value
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|value
operator|!=
name|that
operator|.
name|value
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|atomicIncrement_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|atomicIncrement_args
name|typedOther
init|=
operator|(
name|atomicIncrement_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetRow
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetRow
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetRow
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|row
argument_list|,
name|typedOther
operator|.
name|row
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetColumn
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetColumn
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetColumn
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|column
argument_list|,
name|typedOther
operator|.
name|column
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetValue
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetValue
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|value
argument_list|,
name|typedOther
operator|.
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"atomicIncrement_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"row:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|row
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"column:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|column
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|column
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"value:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|value
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
comment|// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
name|__isset_bit_vector
operator|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|atomicIncrement_argsStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|atomicIncrement_argsStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|atomicIncrement_argsStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|atomicIncrement_argsStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|atomicIncrement_args
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|atomicIncrement_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// ROW
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setRowIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// COLUMN
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|column
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setColumnIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// VALUE
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
condition|)
block|{
name|struct
operator|.
name|value
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setValueIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|atomicIncrement_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|row
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ROW_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|row
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|column
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|COLUMN_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|column
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|VALUE_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI64
argument_list|(
name|struct
operator|.
name|value
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|atomicIncrement_argsTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|atomicIncrement_argsTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|atomicIncrement_argsTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|atomicIncrement_argsTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|atomicIncrement_args
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|atomicIncrement_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetColumn
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetValue
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|4
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|row
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetColumn
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|column
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetValue
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI64
argument_list|(
name|struct
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|atomicIncrement_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setRowIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|struct
operator|.
name|column
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setColumnIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|3
argument_list|)
condition|)
block|{
name|struct
operator|.
name|value
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setValueIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|atomicIncrement_result
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|atomicIncrement_result
argument_list|,
name|atomicIncrement_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"atomicIncrement_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|IA_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"ia"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|atomicIncrement_resultStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|atomicIncrement_resultTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|long
name|success
decl_stmt|;
comment|// required
specifier|public
name|IOError
name|io
decl_stmt|;
comment|// required
specifier|public
name|IllegalArgument
name|ia
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|,
name|IA
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"ia"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
case|case
literal|2
case|:
comment|// IA
return|return
name|IA
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__SUCCESS_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IA
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"ia"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|atomicIncrement_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|atomicIncrement_result
parameter_list|()
block|{     }
specifier|public
name|atomicIncrement_result
parameter_list|(
name|long
name|success
parameter_list|,
name|IOError
name|io
parameter_list|,
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|this
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|atomicIncrement_result
parameter_list|(
name|atomicIncrement_result
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|other
operator|.
name|success
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetIa
argument_list|()
condition|)
block|{
name|this
operator|.
name|ia
operator|=
operator|new
name|IllegalArgument
argument_list|(
name|other
operator|.
name|ia
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|atomicIncrement_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|atomicIncrement_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|setSuccessIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|ia
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|long
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|atomicIncrement_result
name|setSuccess
parameter_list|(
name|long
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|atomicIncrement_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|IllegalArgument
name|getIa
parameter_list|()
block|{
return|return
name|this
operator|.
name|ia
return|;
block|}
specifier|public
name|atomicIncrement_result
name|setIa
parameter_list|(
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|this
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIa
parameter_list|()
block|{
name|this
operator|.
name|ia
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field ia is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIa
parameter_list|()
block|{
return|return
name|this
operator|.
name|ia
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIaIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|ia
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|Long
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IA
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIa
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIa
argument_list|(
operator|(
name|IllegalArgument
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|getSuccess
argument_list|()
argument_list|)
return|;
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
case|case
name|IA
case|:
return|return
name|getIa
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
case|case
name|IA
case|:
return|return
name|isSetIa
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|atomicIncrement_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|atomicIncrement_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|atomicIncrement_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|success
operator|!=
name|that
operator|.
name|success
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_ia
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIa
argument_list|()
decl_stmt|;
name|boolean
name|that_present_ia
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIa
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_ia
operator|||
name|that_present_ia
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_ia
operator|&&
name|that_present_ia
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|ia
operator|.
name|equals
argument_list|(
name|that
operator|.
name|ia
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|atomicIncrement_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|atomicIncrement_result
name|typedOther
init|=
operator|(
name|atomicIncrement_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIa
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIa
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIa
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|ia
argument_list|,
name|typedOther
operator|.
name|ia
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"atomicIncrement_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"ia:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|ia
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|ia
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|atomicIncrement_resultStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|atomicIncrement_resultStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|atomicIncrement_resultStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|atomicIncrement_resultStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|atomicIncrement_result
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|atomicIncrement_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
condition|)
block|{
name|struct
operator|.
name|success
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// IA
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|ia
operator|=
operator|new
name|IllegalArgument
argument_list|()
expr_stmt|;
name|struct
operator|.
name|ia
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIaIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|atomicIncrement_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI64
argument_list|(
name|struct
operator|.
name|success
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|ia
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IA_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|ia
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|atomicIncrement_resultTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|atomicIncrement_resultTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|atomicIncrement_resultTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|atomicIncrement_resultTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|atomicIncrement_result
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|atomicIncrement_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIa
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|3
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI64
argument_list|(
name|struct
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIa
argument_list|()
condition|)
block|{
name|struct
operator|.
name|ia
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|atomicIncrement_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|success
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|struct
operator|.
name|ia
operator|=
operator|new
name|IllegalArgument
argument_list|()
expr_stmt|;
name|struct
operator|.
name|ia
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIaIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|deleteAll_args
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|deleteAll_args
argument_list|,
name|deleteAll_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"deleteAll_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ROW_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"row"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|COLUMN_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"column"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ATTRIBUTES_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"attributes"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|deleteAll_argsStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|deleteAll_argsTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|// required
comment|/**      * Row to update      */
specifier|public
name|ByteBuffer
name|row
decl_stmt|;
comment|// required
comment|/**      * name of column whose value is to be deleted      */
specifier|public
name|ByteBuffer
name|column
decl_stmt|;
comment|// required
comment|/**      * Delete attributes      */
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
comment|/**        * name of table        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|,
comment|/**        * Row to update        */
name|ROW
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"row"
argument_list|)
block|,
comment|/**        * name of column whose value is to be deleted        */
name|COLUMN
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"column"
argument_list|)
block|,
comment|/**        * Delete attributes        */
name|ATTRIBUTES
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|,
literal|"attributes"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
case|case
literal|2
case|:
comment|// ROW
return|return
name|ROW
return|;
case|case
literal|3
case|:
comment|// COLUMN
return|return
name|COLUMN
return|;
case|case
literal|4
case|:
comment|// ATTRIBUTES
return|return
name|ATTRIBUTES
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ROW
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"row"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|COLUMN
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"column"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ATTRIBUTES
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"attributes"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|MapMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|deleteAll_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|deleteAll_args
parameter_list|()
block|{     }
specifier|public
name|deleteAll_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|column
operator|=
name|column
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|deleteAll_args
parameter_list|(
name|deleteAll_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|this
operator|.
name|row
operator|=
name|other
operator|.
name|row
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetColumn
argument_list|()
condition|)
block|{
name|this
operator|.
name|column
operator|=
name|other
operator|.
name|column
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|__this__attributes
init|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|other_element
range|:
name|other
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ByteBuffer
name|other_element_key
init|=
name|other_element
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ByteBuffer
name|other_element_value
init|=
name|other_element
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ByteBuffer
name|__this__attributes_copy_key
init|=
name|other_element_key
decl_stmt|;
name|ByteBuffer
name|__this__attributes_copy_value
init|=
name|other_element_value
decl_stmt|;
name|__this__attributes
operator|.
name|put
argument_list|(
name|__this__attributes_copy_key
argument_list|,
name|__this__attributes_copy_value
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|attributes
operator|=
name|__this__attributes
expr_stmt|;
block|}
block|}
specifier|public
name|deleteAll_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|deleteAll_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|column
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|==
literal|null
condition|?
literal|null
else|:
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of table      */
specifier|public
name|deleteAll_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|tableName
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|deleteAll_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * Row to update      */
specifier|public
name|byte
index|[]
name|getRow
parameter_list|()
block|{
name|setRow
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|row
operator|==
literal|null
condition|?
literal|null
else|:
name|row
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForRow
parameter_list|()
block|{
return|return
name|row
return|;
block|}
comment|/**      * Row to update      */
specifier|public
name|deleteAll_args
name|setRow
parameter_list|(
name|byte
index|[]
name|row
parameter_list|)
block|{
name|setRow
argument_list|(
name|row
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|deleteAll_args
name|setRow
parameter_list|(
name|ByteBuffer
name|row
parameter_list|)
block|{
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetRow
parameter_list|()
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field row is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetRow
parameter_list|()
block|{
return|return
name|this
operator|.
name|row
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setRowIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * name of column whose value is to be deleted      */
specifier|public
name|byte
index|[]
name|getColumn
parameter_list|()
block|{
name|setColumn
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|column
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|column
operator|==
literal|null
condition|?
literal|null
else|:
name|column
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForColumn
parameter_list|()
block|{
return|return
name|column
return|;
block|}
comment|/**      * name of column whose value is to be deleted      */
specifier|public
name|deleteAll_args
name|setColumn
parameter_list|(
name|byte
index|[]
name|column
parameter_list|)
block|{
name|setColumn
argument_list|(
name|column
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|column
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|deleteAll_args
name|setColumn
parameter_list|(
name|ByteBuffer
name|column
parameter_list|)
block|{
name|this
operator|.
name|column
operator|=
name|column
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetColumn
parameter_list|()
block|{
name|this
operator|.
name|column
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field column is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetColumn
parameter_list|()
block|{
return|return
name|this
operator|.
name|column
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setColumnIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|column
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getAttributesSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|attributes
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|attributes
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|putToAttributes
parameter_list|(
name|ByteBuffer
name|key
parameter_list|,
name|ByteBuffer
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
comment|/**      * Delete attributes      */
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|getAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|attributes
return|;
block|}
comment|/**      * Delete attributes      */
specifier|public
name|deleteAll_args
name|setAttributes
parameter_list|(
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
block|{
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetAttributes
parameter_list|()
block|{
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field attributes is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|attributes
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setAttributesIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ROW
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetRow
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setRow
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|COLUMN
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetColumn
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setColumn
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ATTRIBUTES
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetAttributes
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setAttributes
argument_list|(
operator|(
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
case|case
name|ROW
case|:
return|return
name|getRow
argument_list|()
return|;
case|case
name|COLUMN
case|:
return|return
name|getColumn
argument_list|()
return|;
case|case
name|ATTRIBUTES
case|:
return|return
name|getAttributes
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
case|case
name|ROW
case|:
return|return
name|isSetRow
argument_list|()
return|;
case|case
name|COLUMN
case|:
return|return
name|isSetColumn
argument_list|()
return|;
case|case
name|ATTRIBUTES
case|:
return|return
name|isSetAttributes
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|deleteAll_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|deleteAll_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|deleteAll_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_row
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
name|boolean
name|that_present_row
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_row
operator|||
name|that_present_row
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_row
operator|&&
name|that_present_row
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|row
operator|.
name|equals
argument_list|(
name|that
operator|.
name|row
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_column
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetColumn
argument_list|()
decl_stmt|;
name|boolean
name|that_present_column
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetColumn
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_column
operator|||
name|that_present_column
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_column
operator|&&
name|that_present_column
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|column
operator|.
name|equals
argument_list|(
name|that
operator|.
name|column
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_attributes
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetAttributes
argument_list|()
decl_stmt|;
name|boolean
name|that_present_attributes
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetAttributes
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_attributes
operator|||
name|that_present_attributes
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_attributes
operator|&&
name|that_present_attributes
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|attributes
operator|.
name|equals
argument_list|(
name|that
operator|.
name|attributes
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|deleteAll_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|deleteAll_args
name|typedOther
init|=
operator|(
name|deleteAll_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetRow
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetRow
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetRow
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|row
argument_list|,
name|typedOther
operator|.
name|row
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetColumn
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetColumn
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetColumn
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|column
argument_list|,
name|typedOther
operator|.
name|column
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetAttributes
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetAttributes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetAttributes
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|attributes
argument_list|,
name|typedOther
operator|.
name|attributes
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"deleteAll_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"row:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|row
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"column:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|column
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|column
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"attributes:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|attributes
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|deleteAll_argsStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|deleteAll_argsStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|deleteAll_argsStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|deleteAll_argsStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|deleteAll_args
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|deleteAll_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// ROW
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setRowIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// COLUMN
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|column
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setColumnIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// ATTRIBUTES
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map394
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|(
literal|2
operator|*
name|_map394
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i395
init|=
literal|0
init|;
name|_i395
operator|<
name|_map394
operator|.
name|size
condition|;
operator|++
name|_i395
control|)
block|{
name|ByteBuffer
name|_key396
decl_stmt|;
comment|// required
name|ByteBuffer
name|_val397
decl_stmt|;
comment|// required
name|_key396
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val397
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|_key396
argument_list|,
name|_val397
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setAttributesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|deleteAll_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|row
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ROW_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|row
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|column
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|COLUMN_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|column
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|attributes
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ATTRIBUTES_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|struct
operator|.
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|_iter398
range|:
name|struct
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter398
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter398
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|deleteAll_argsTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|deleteAll_argsTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|deleteAll_argsTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|deleteAll_argsTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|deleteAll_args
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|deleteAll_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetColumn
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|4
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|row
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetColumn
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|column
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|_iter399
range|:
name|struct
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter399
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter399
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|deleteAll_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setRowIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|struct
operator|.
name|column
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setColumnIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|3
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map400
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|(
literal|2
operator|*
name|_map400
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i401
init|=
literal|0
init|;
name|_i401
operator|<
name|_map400
operator|.
name|size
condition|;
operator|++
name|_i401
control|)
block|{
name|ByteBuffer
name|_key402
decl_stmt|;
comment|// required
name|ByteBuffer
name|_val403
decl_stmt|;
comment|// required
name|_key402
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val403
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|_key402
argument_list|,
name|_val403
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setAttributesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|deleteAll_result
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|deleteAll_result
argument_list|,
name|deleteAll_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"deleteAll_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|deleteAll_resultStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|deleteAll_resultTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IOError
name|io
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|deleteAll_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|deleteAll_result
parameter_list|()
block|{     }
specifier|public
name|deleteAll_result
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|deleteAll_result
parameter_list|(
name|deleteAll_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|deleteAll_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|deleteAll_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|deleteAll_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|deleteAll_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|deleteAll_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|deleteAll_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|deleteAll_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|deleteAll_result
name|typedOther
init|=
operator|(
name|deleteAll_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"deleteAll_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|deleteAll_resultStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|deleteAll_resultStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|deleteAll_resultStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|deleteAll_resultStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|deleteAll_result
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|deleteAll_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|deleteAll_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|deleteAll_resultTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|deleteAll_resultTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|deleteAll_resultTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|deleteAll_resultTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|deleteAll_result
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|deleteAll_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|deleteAll_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|deleteAllTs_args
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|deleteAllTs_args
argument_list|,
name|deleteAllTs_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"deleteAllTs_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ROW_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"row"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|COLUMN_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"column"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|TIMESTAMP_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"timestamp"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ATTRIBUTES_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"attributes"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|(
name|short
operator|)
literal|5
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|deleteAllTs_argsStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|deleteAllTs_argsTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|// required
comment|/**      * Row to update      */
specifier|public
name|ByteBuffer
name|row
decl_stmt|;
comment|// required
comment|/**      * name of column whose value is to be deleted      */
specifier|public
name|ByteBuffer
name|column
decl_stmt|;
comment|// required
comment|/**      * timestamp      */
specifier|public
name|long
name|timestamp
decl_stmt|;
comment|// required
comment|/**      * Delete attributes      */
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
comment|/**        * name of table        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|,
comment|/**        * Row to update        */
name|ROW
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"row"
argument_list|)
block|,
comment|/**        * name of column whose value is to be deleted        */
name|COLUMN
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"column"
argument_list|)
block|,
comment|/**        * timestamp        */
name|TIMESTAMP
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|,
literal|"timestamp"
argument_list|)
block|,
comment|/**        * Delete attributes        */
name|ATTRIBUTES
argument_list|(
operator|(
name|short
operator|)
literal|5
argument_list|,
literal|"attributes"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
case|case
literal|2
case|:
comment|// ROW
return|return
name|ROW
return|;
case|case
literal|3
case|:
comment|// COLUMN
return|return
name|COLUMN
return|;
case|case
literal|4
case|:
comment|// TIMESTAMP
return|return
name|TIMESTAMP
return|;
case|case
literal|5
case|:
comment|// ATTRIBUTES
return|return
name|ATTRIBUTES
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__TIMESTAMP_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ROW
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"row"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|COLUMN
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"column"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TIMESTAMP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"timestamp"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ATTRIBUTES
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"attributes"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|MapMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|deleteAllTs_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|deleteAllTs_args
parameter_list|()
block|{     }
specifier|public
name|deleteAllTs_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|column
operator|=
name|column
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|deleteAllTs_args
parameter_list|(
name|deleteAllTs_args
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|this
operator|.
name|row
operator|=
name|other
operator|.
name|row
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetColumn
argument_list|()
condition|)
block|{
name|this
operator|.
name|column
operator|=
name|other
operator|.
name|column
expr_stmt|;
block|}
name|this
operator|.
name|timestamp
operator|=
name|other
operator|.
name|timestamp
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|__this__attributes
init|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|other_element
range|:
name|other
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ByteBuffer
name|other_element_key
init|=
name|other_element
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ByteBuffer
name|other_element_value
init|=
name|other_element
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ByteBuffer
name|__this__attributes_copy_key
init|=
name|other_element_key
decl_stmt|;
name|ByteBuffer
name|__this__attributes_copy_value
init|=
name|other_element_value
decl_stmt|;
name|__this__attributes
operator|.
name|put
argument_list|(
name|__this__attributes_copy_key
argument_list|,
name|__this__attributes_copy_value
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|attributes
operator|=
name|__this__attributes
expr_stmt|;
block|}
block|}
specifier|public
name|deleteAllTs_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|deleteAllTs_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|column
operator|=
literal|null
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|==
literal|null
condition|?
literal|null
else|:
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of table      */
specifier|public
name|deleteAllTs_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|tableName
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|deleteAllTs_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * Row to update      */
specifier|public
name|byte
index|[]
name|getRow
parameter_list|()
block|{
name|setRow
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|row
operator|==
literal|null
condition|?
literal|null
else|:
name|row
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForRow
parameter_list|()
block|{
return|return
name|row
return|;
block|}
comment|/**      * Row to update      */
specifier|public
name|deleteAllTs_args
name|setRow
parameter_list|(
name|byte
index|[]
name|row
parameter_list|)
block|{
name|setRow
argument_list|(
name|row
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|deleteAllTs_args
name|setRow
parameter_list|(
name|ByteBuffer
name|row
parameter_list|)
block|{
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetRow
parameter_list|()
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field row is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetRow
parameter_list|()
block|{
return|return
name|this
operator|.
name|row
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setRowIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * name of column whose value is to be deleted      */
specifier|public
name|byte
index|[]
name|getColumn
parameter_list|()
block|{
name|setColumn
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|column
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|column
operator|==
literal|null
condition|?
literal|null
else|:
name|column
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForColumn
parameter_list|()
block|{
return|return
name|column
return|;
block|}
comment|/**      * name of column whose value is to be deleted      */
specifier|public
name|deleteAllTs_args
name|setColumn
parameter_list|(
name|byte
index|[]
name|column
parameter_list|)
block|{
name|setColumn
argument_list|(
name|column
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|column
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|deleteAllTs_args
name|setColumn
parameter_list|(
name|ByteBuffer
name|column
parameter_list|)
block|{
name|this
operator|.
name|column
operator|=
name|column
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetColumn
parameter_list|()
block|{
name|this
operator|.
name|column
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field column is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetColumn
parameter_list|()
block|{
return|return
name|this
operator|.
name|column
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setColumnIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|column
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * timestamp      */
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|this
operator|.
name|timestamp
return|;
block|}
comment|/**      * timestamp      */
specifier|public
name|deleteAllTs_args
name|setTimestamp
parameter_list|(
name|long
name|timestamp
parameter_list|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTimestamp
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTimestamp
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setTimestampIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getAttributesSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|attributes
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|attributes
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|putToAttributes
parameter_list|(
name|ByteBuffer
name|key
parameter_list|,
name|ByteBuffer
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
comment|/**      * Delete attributes      */
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|getAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|attributes
return|;
block|}
comment|/**      * Delete attributes      */
specifier|public
name|deleteAllTs_args
name|setAttributes
parameter_list|(
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
block|{
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetAttributes
parameter_list|()
block|{
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field attributes is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|attributes
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setAttributesIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ROW
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetRow
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setRow
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|COLUMN
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetColumn
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setColumn
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TIMESTAMP
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTimestamp
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTimestamp
argument_list|(
operator|(
name|Long
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ATTRIBUTES
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetAttributes
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setAttributes
argument_list|(
operator|(
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
case|case
name|ROW
case|:
return|return
name|getRow
argument_list|()
return|;
case|case
name|COLUMN
case|:
return|return
name|getColumn
argument_list|()
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|getTimestamp
argument_list|()
argument_list|)
return|;
case|case
name|ATTRIBUTES
case|:
return|return
name|getAttributes
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
case|case
name|ROW
case|:
return|return
name|isSetRow
argument_list|()
return|;
case|case
name|COLUMN
case|:
return|return
name|isSetColumn
argument_list|()
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|isSetTimestamp
argument_list|()
return|;
case|case
name|ATTRIBUTES
case|:
return|return
name|isSetAttributes
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|deleteAllTs_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|deleteAllTs_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|deleteAllTs_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_row
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
name|boolean
name|that_present_row
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_row
operator|||
name|that_present_row
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_row
operator|&&
name|that_present_row
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|row
operator|.
name|equals
argument_list|(
name|that
operator|.
name|row
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_column
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetColumn
argument_list|()
decl_stmt|;
name|boolean
name|that_present_column
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetColumn
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_column
operator|||
name|that_present_column
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_column
operator|&&
name|that_present_column
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|column
operator|.
name|equals
argument_list|(
name|that
operator|.
name|column
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_timestamp
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_timestamp
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_timestamp
operator|||
name|that_present_timestamp
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_timestamp
operator|&&
name|that_present_timestamp
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|timestamp
operator|!=
name|that
operator|.
name|timestamp
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_attributes
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetAttributes
argument_list|()
decl_stmt|;
name|boolean
name|that_present_attributes
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetAttributes
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_attributes
operator|||
name|that_present_attributes
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_attributes
operator|&&
name|that_present_attributes
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|attributes
operator|.
name|equals
argument_list|(
name|that
operator|.
name|attributes
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|deleteAllTs_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|deleteAllTs_args
name|typedOther
init|=
operator|(
name|deleteAllTs_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetRow
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetRow
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetRow
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|row
argument_list|,
name|typedOther
operator|.
name|row
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetColumn
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetColumn
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetColumn
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|column
argument_list|,
name|typedOther
operator|.
name|column
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTimestamp
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTimestamp
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTimestamp
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|timestamp
argument_list|,
name|typedOther
operator|.
name|timestamp
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetAttributes
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetAttributes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetAttributes
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|attributes
argument_list|,
name|typedOther
operator|.
name|attributes
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"deleteAllTs_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"row:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|row
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"column:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|column
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|column
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"timestamp:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"attributes:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|attributes
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
comment|// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
name|__isset_bit_vector
operator|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|deleteAllTs_argsStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|deleteAllTs_argsStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|deleteAllTs_argsStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|deleteAllTs_argsStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|deleteAllTs_args
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|deleteAllTs_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// ROW
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setRowIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// COLUMN
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|column
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setColumnIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// TIMESTAMP
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
condition|)
block|{
name|struct
operator|.
name|timestamp
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|5
case|:
comment|// ATTRIBUTES
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map404
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|(
literal|2
operator|*
name|_map404
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i405
init|=
literal|0
init|;
name|_i405
operator|<
name|_map404
operator|.
name|size
condition|;
operator|++
name|_i405
control|)
block|{
name|ByteBuffer
name|_key406
decl_stmt|;
comment|// required
name|ByteBuffer
name|_val407
decl_stmt|;
comment|// required
name|_key406
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val407
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|_key406
argument_list|,
name|_val407
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setAttributesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|deleteAllTs_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|row
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ROW_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|row
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|column
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|COLUMN_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|column
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TIMESTAMP_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI64
argument_list|(
name|struct
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|attributes
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ATTRIBUTES_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|struct
operator|.
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|_iter408
range|:
name|struct
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter408
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter408
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|deleteAllTs_argsTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|deleteAllTs_argsTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|deleteAllTs_argsTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|deleteAllTs_argsTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|deleteAllTs_args
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|deleteAllTs_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetColumn
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetTimestamp
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|5
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|row
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetColumn
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|column
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetTimestamp
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI64
argument_list|(
name|struct
operator|.
name|timestamp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|_iter409
range|:
name|struct
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter409
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter409
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|deleteAllTs_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setRowIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|struct
operator|.
name|column
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setColumnIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|3
argument_list|)
condition|)
block|{
name|struct
operator|.
name|timestamp
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|4
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map410
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|(
literal|2
operator|*
name|_map410
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i411
init|=
literal|0
init|;
name|_i411
operator|<
name|_map410
operator|.
name|size
condition|;
operator|++
name|_i411
control|)
block|{
name|ByteBuffer
name|_key412
decl_stmt|;
comment|// required
name|ByteBuffer
name|_val413
decl_stmt|;
comment|// required
name|_key412
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val413
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|_key412
argument_list|,
name|_val413
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setAttributesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|deleteAllTs_result
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|deleteAllTs_result
argument_list|,
name|deleteAllTs_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"deleteAllTs_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|deleteAllTs_resultStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|deleteAllTs_resultTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IOError
name|io
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|deleteAllTs_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|deleteAllTs_result
parameter_list|()
block|{     }
specifier|public
name|deleteAllTs_result
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|deleteAllTs_result
parameter_list|(
name|deleteAllTs_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|deleteAllTs_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|deleteAllTs_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|deleteAllTs_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|deleteAllTs_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|deleteAllTs_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|deleteAllTs_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|deleteAllTs_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|deleteAllTs_result
name|typedOther
init|=
operator|(
name|deleteAllTs_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"deleteAllTs_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|deleteAllTs_resultStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|deleteAllTs_resultStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|deleteAllTs_resultStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|deleteAllTs_resultStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|deleteAllTs_result
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|deleteAllTs_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|deleteAllTs_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|deleteAllTs_resultTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|deleteAllTs_resultTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|deleteAllTs_resultTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|deleteAllTs_resultTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|deleteAllTs_result
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|deleteAllTs_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|deleteAllTs_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|deleteAllRow_args
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|deleteAllRow_args
argument_list|,
name|deleteAllRow_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"deleteAllRow_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ROW_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"row"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ATTRIBUTES_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"attributes"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|deleteAllRow_argsStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|deleteAllRow_argsTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|// required
comment|/**      * key of the row to be completely deleted.      */
specifier|public
name|ByteBuffer
name|row
decl_stmt|;
comment|// required
comment|/**      * Delete attributes      */
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
comment|/**        * name of table        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|,
comment|/**        * key of the row to be completely deleted.        */
name|ROW
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"row"
argument_list|)
block|,
comment|/**        * Delete attributes        */
name|ATTRIBUTES
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"attributes"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
case|case
literal|2
case|:
comment|// ROW
return|return
name|ROW
return|;
case|case
literal|3
case|:
comment|// ATTRIBUTES
return|return
name|ATTRIBUTES
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ROW
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"row"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ATTRIBUTES
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"attributes"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|MapMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|deleteAllRow_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|deleteAllRow_args
parameter_list|()
block|{     }
specifier|public
name|deleteAllRow_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|deleteAllRow_args
parameter_list|(
name|deleteAllRow_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|this
operator|.
name|row
operator|=
name|other
operator|.
name|row
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|__this__attributes
init|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|other_element
range|:
name|other
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ByteBuffer
name|other_element_key
init|=
name|other_element
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ByteBuffer
name|other_element_value
init|=
name|other_element
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ByteBuffer
name|__this__attributes_copy_key
init|=
name|other_element_key
decl_stmt|;
name|ByteBuffer
name|__this__attributes_copy_value
init|=
name|other_element_value
decl_stmt|;
name|__this__attributes
operator|.
name|put
argument_list|(
name|__this__attributes_copy_key
argument_list|,
name|__this__attributes_copy_value
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|attributes
operator|=
name|__this__attributes
expr_stmt|;
block|}
block|}
specifier|public
name|deleteAllRow_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|deleteAllRow_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|==
literal|null
condition|?
literal|null
else|:
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of table      */
specifier|public
name|deleteAllRow_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|tableName
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|deleteAllRow_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * key of the row to be completely deleted.      */
specifier|public
name|byte
index|[]
name|getRow
parameter_list|()
block|{
name|setRow
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|row
operator|==
literal|null
condition|?
literal|null
else|:
name|row
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForRow
parameter_list|()
block|{
return|return
name|row
return|;
block|}
comment|/**      * key of the row to be completely deleted.      */
specifier|public
name|deleteAllRow_args
name|setRow
parameter_list|(
name|byte
index|[]
name|row
parameter_list|)
block|{
name|setRow
argument_list|(
name|row
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|deleteAllRow_args
name|setRow
parameter_list|(
name|ByteBuffer
name|row
parameter_list|)
block|{
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetRow
parameter_list|()
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field row is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetRow
parameter_list|()
block|{
return|return
name|this
operator|.
name|row
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setRowIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getAttributesSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|attributes
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|attributes
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|putToAttributes
parameter_list|(
name|ByteBuffer
name|key
parameter_list|,
name|ByteBuffer
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
comment|/**      * Delete attributes      */
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|getAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|attributes
return|;
block|}
comment|/**      * Delete attributes      */
specifier|public
name|deleteAllRow_args
name|setAttributes
parameter_list|(
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
block|{
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetAttributes
parameter_list|()
block|{
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field attributes is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|attributes
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setAttributesIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ROW
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetRow
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setRow
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ATTRIBUTES
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetAttributes
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setAttributes
argument_list|(
operator|(
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
case|case
name|ROW
case|:
return|return
name|getRow
argument_list|()
return|;
case|case
name|ATTRIBUTES
case|:
return|return
name|getAttributes
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
case|case
name|ROW
case|:
return|return
name|isSetRow
argument_list|()
return|;
case|case
name|ATTRIBUTES
case|:
return|return
name|isSetAttributes
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|deleteAllRow_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|deleteAllRow_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|deleteAllRow_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_row
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
name|boolean
name|that_present_row
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_row
operator|||
name|that_present_row
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_row
operator|&&
name|that_present_row
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|row
operator|.
name|equals
argument_list|(
name|that
operator|.
name|row
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_attributes
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetAttributes
argument_list|()
decl_stmt|;
name|boolean
name|that_present_attributes
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetAttributes
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_attributes
operator|||
name|that_present_attributes
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_attributes
operator|&&
name|that_present_attributes
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|attributes
operator|.
name|equals
argument_list|(
name|that
operator|.
name|attributes
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|deleteAllRow_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|deleteAllRow_args
name|typedOther
init|=
operator|(
name|deleteAllRow_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetRow
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetRow
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetRow
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|row
argument_list|,
name|typedOther
operator|.
name|row
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetAttributes
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetAttributes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetAttributes
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|attributes
argument_list|,
name|typedOther
operator|.
name|attributes
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"deleteAllRow_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"row:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|row
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"attributes:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|attributes
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|deleteAllRow_argsStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|deleteAllRow_argsStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|deleteAllRow_argsStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|deleteAllRow_argsStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|deleteAllRow_args
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|deleteAllRow_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// ROW
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setRowIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// ATTRIBUTES
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map414
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|(
literal|2
operator|*
name|_map414
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i415
init|=
literal|0
init|;
name|_i415
operator|<
name|_map414
operator|.
name|size
condition|;
operator|++
name|_i415
control|)
block|{
name|ByteBuffer
name|_key416
decl_stmt|;
comment|// required
name|ByteBuffer
name|_val417
decl_stmt|;
comment|// required
name|_key416
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val417
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|_key416
argument_list|,
name|_val417
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setAttributesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|deleteAllRow_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|row
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ROW_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|row
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|attributes
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ATTRIBUTES_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|struct
operator|.
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|_iter418
range|:
name|struct
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter418
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter418
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|deleteAllRow_argsTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|deleteAllRow_argsTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|deleteAllRow_argsTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|deleteAllRow_argsTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|deleteAllRow_args
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|deleteAllRow_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|3
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|row
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|_iter419
range|:
name|struct
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter419
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter419
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|deleteAllRow_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setRowIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|2
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map420
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|(
literal|2
operator|*
name|_map420
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i421
init|=
literal|0
init|;
name|_i421
operator|<
name|_map420
operator|.
name|size
condition|;
operator|++
name|_i421
control|)
block|{
name|ByteBuffer
name|_key422
decl_stmt|;
comment|// required
name|ByteBuffer
name|_val423
decl_stmt|;
comment|// required
name|_key422
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val423
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|_key422
argument_list|,
name|_val423
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setAttributesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|deleteAllRow_result
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|deleteAllRow_result
argument_list|,
name|deleteAllRow_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"deleteAllRow_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|deleteAllRow_resultStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|deleteAllRow_resultTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IOError
name|io
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|deleteAllRow_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|deleteAllRow_result
parameter_list|()
block|{     }
specifier|public
name|deleteAllRow_result
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|deleteAllRow_result
parameter_list|(
name|deleteAllRow_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|deleteAllRow_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|deleteAllRow_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|deleteAllRow_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|deleteAllRow_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|deleteAllRow_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|deleteAllRow_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|deleteAllRow_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|deleteAllRow_result
name|typedOther
init|=
operator|(
name|deleteAllRow_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"deleteAllRow_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|deleteAllRow_resultStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|deleteAllRow_resultStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|deleteAllRow_resultStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|deleteAllRow_resultStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|deleteAllRow_result
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|deleteAllRow_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|deleteAllRow_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|deleteAllRow_resultTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|deleteAllRow_resultTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|deleteAllRow_resultTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|deleteAllRow_resultTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|deleteAllRow_result
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|deleteAllRow_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|deleteAllRow_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|deleteAllRowTs_args
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|deleteAllRowTs_args
argument_list|,
name|deleteAllRowTs_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"deleteAllRowTs_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ROW_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"row"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|TIMESTAMP_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"timestamp"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ATTRIBUTES_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"attributes"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|deleteAllRowTs_argsStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|deleteAllRowTs_argsTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|// required
comment|/**      * key of the row to be completely deleted.      */
specifier|public
name|ByteBuffer
name|row
decl_stmt|;
comment|// required
comment|/**      * timestamp      */
specifier|public
name|long
name|timestamp
decl_stmt|;
comment|// required
comment|/**      * Delete attributes      */
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
comment|/**        * name of table        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|,
comment|/**        * key of the row to be completely deleted.        */
name|ROW
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"row"
argument_list|)
block|,
comment|/**        * timestamp        */
name|TIMESTAMP
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"timestamp"
argument_list|)
block|,
comment|/**        * Delete attributes        */
name|ATTRIBUTES
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|,
literal|"attributes"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
case|case
literal|2
case|:
comment|// ROW
return|return
name|ROW
return|;
case|case
literal|3
case|:
comment|// TIMESTAMP
return|return
name|TIMESTAMP
return|;
case|case
literal|4
case|:
comment|// ATTRIBUTES
return|return
name|ATTRIBUTES
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__TIMESTAMP_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ROW
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"row"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TIMESTAMP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"timestamp"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ATTRIBUTES
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"attributes"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|MapMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|deleteAllRowTs_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|deleteAllRowTs_args
parameter_list|()
block|{     }
specifier|public
name|deleteAllRowTs_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|deleteAllRowTs_args
parameter_list|(
name|deleteAllRowTs_args
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|this
operator|.
name|row
operator|=
name|other
operator|.
name|row
expr_stmt|;
block|}
name|this
operator|.
name|timestamp
operator|=
name|other
operator|.
name|timestamp
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|__this__attributes
init|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|other_element
range|:
name|other
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ByteBuffer
name|other_element_key
init|=
name|other_element
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ByteBuffer
name|other_element_value
init|=
name|other_element
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ByteBuffer
name|__this__attributes_copy_key
init|=
name|other_element_key
decl_stmt|;
name|ByteBuffer
name|__this__attributes_copy_value
init|=
name|other_element_value
decl_stmt|;
name|__this__attributes
operator|.
name|put
argument_list|(
name|__this__attributes_copy_key
argument_list|,
name|__this__attributes_copy_value
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|attributes
operator|=
name|__this__attributes
expr_stmt|;
block|}
block|}
specifier|public
name|deleteAllRowTs_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|deleteAllRowTs_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|==
literal|null
condition|?
literal|null
else|:
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of table      */
specifier|public
name|deleteAllRowTs_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|tableName
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|deleteAllRowTs_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * key of the row to be completely deleted.      */
specifier|public
name|byte
index|[]
name|getRow
parameter_list|()
block|{
name|setRow
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|row
operator|==
literal|null
condition|?
literal|null
else|:
name|row
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForRow
parameter_list|()
block|{
return|return
name|row
return|;
block|}
comment|/**      * key of the row to be completely deleted.      */
specifier|public
name|deleteAllRowTs_args
name|setRow
parameter_list|(
name|byte
index|[]
name|row
parameter_list|)
block|{
name|setRow
argument_list|(
name|row
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|deleteAllRowTs_args
name|setRow
parameter_list|(
name|ByteBuffer
name|row
parameter_list|)
block|{
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetRow
parameter_list|()
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field row is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetRow
parameter_list|()
block|{
return|return
name|this
operator|.
name|row
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setRowIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * timestamp      */
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|this
operator|.
name|timestamp
return|;
block|}
comment|/**      * timestamp      */
specifier|public
name|deleteAllRowTs_args
name|setTimestamp
parameter_list|(
name|long
name|timestamp
parameter_list|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTimestamp
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTimestamp
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setTimestampIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getAttributesSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|attributes
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|attributes
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|putToAttributes
parameter_list|(
name|ByteBuffer
name|key
parameter_list|,
name|ByteBuffer
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
comment|/**      * Delete attributes      */
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|getAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|attributes
return|;
block|}
comment|/**      * Delete attributes      */
specifier|public
name|deleteAllRowTs_args
name|setAttributes
parameter_list|(
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
block|{
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetAttributes
parameter_list|()
block|{
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field attributes is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|attributes
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setAttributesIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ROW
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetRow
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setRow
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TIMESTAMP
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTimestamp
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTimestamp
argument_list|(
operator|(
name|Long
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ATTRIBUTES
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetAttributes
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setAttributes
argument_list|(
operator|(
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
case|case
name|ROW
case|:
return|return
name|getRow
argument_list|()
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|getTimestamp
argument_list|()
argument_list|)
return|;
case|case
name|ATTRIBUTES
case|:
return|return
name|getAttributes
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
case|case
name|ROW
case|:
return|return
name|isSetRow
argument_list|()
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|isSetTimestamp
argument_list|()
return|;
case|case
name|ATTRIBUTES
case|:
return|return
name|isSetAttributes
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|deleteAllRowTs_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|deleteAllRowTs_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|deleteAllRowTs_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_row
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
name|boolean
name|that_present_row
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_row
operator|||
name|that_present_row
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_row
operator|&&
name|that_present_row
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|row
operator|.
name|equals
argument_list|(
name|that
operator|.
name|row
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_timestamp
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_timestamp
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_timestamp
operator|||
name|that_present_timestamp
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_timestamp
operator|&&
name|that_present_timestamp
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|timestamp
operator|!=
name|that
operator|.
name|timestamp
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_attributes
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetAttributes
argument_list|()
decl_stmt|;
name|boolean
name|that_present_attributes
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetAttributes
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_attributes
operator|||
name|that_present_attributes
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_attributes
operator|&&
name|that_present_attributes
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|attributes
operator|.
name|equals
argument_list|(
name|that
operator|.
name|attributes
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|deleteAllRowTs_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|deleteAllRowTs_args
name|typedOther
init|=
operator|(
name|deleteAllRowTs_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetRow
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetRow
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetRow
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|row
argument_list|,
name|typedOther
operator|.
name|row
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTimestamp
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTimestamp
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTimestamp
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|timestamp
argument_list|,
name|typedOther
operator|.
name|timestamp
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetAttributes
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetAttributes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetAttributes
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|attributes
argument_list|,
name|typedOther
operator|.
name|attributes
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"deleteAllRowTs_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"row:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|row
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"timestamp:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"attributes:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|attributes
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
comment|// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
name|__isset_bit_vector
operator|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|deleteAllRowTs_argsStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|deleteAllRowTs_argsStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|deleteAllRowTs_argsStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|deleteAllRowTs_argsStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|deleteAllRowTs_args
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|deleteAllRowTs_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// ROW
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setRowIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// TIMESTAMP
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
condition|)
block|{
name|struct
operator|.
name|timestamp
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// ATTRIBUTES
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map424
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|(
literal|2
operator|*
name|_map424
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i425
init|=
literal|0
init|;
name|_i425
operator|<
name|_map424
operator|.
name|size
condition|;
operator|++
name|_i425
control|)
block|{
name|ByteBuffer
name|_key426
decl_stmt|;
comment|// required
name|ByteBuffer
name|_val427
decl_stmt|;
comment|// required
name|_key426
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val427
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|_key426
argument_list|,
name|_val427
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setAttributesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|deleteAllRowTs_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|row
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ROW_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|row
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TIMESTAMP_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI64
argument_list|(
name|struct
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|attributes
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ATTRIBUTES_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|struct
operator|.
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|_iter428
range|:
name|struct
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter428
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter428
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|deleteAllRowTs_argsTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|deleteAllRowTs_argsTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|deleteAllRowTs_argsTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|deleteAllRowTs_argsTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|deleteAllRowTs_args
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|deleteAllRowTs_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetTimestamp
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|4
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|row
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetTimestamp
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI64
argument_list|(
name|struct
operator|.
name|timestamp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|_iter429
range|:
name|struct
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter429
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter429
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|deleteAllRowTs_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setRowIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|struct
operator|.
name|timestamp
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|3
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map430
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|(
literal|2
operator|*
name|_map430
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i431
init|=
literal|0
init|;
name|_i431
operator|<
name|_map430
operator|.
name|size
condition|;
operator|++
name|_i431
control|)
block|{
name|ByteBuffer
name|_key432
decl_stmt|;
comment|// required
name|ByteBuffer
name|_val433
decl_stmt|;
comment|// required
name|_key432
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val433
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|_key432
argument_list|,
name|_val433
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setAttributesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|deleteAllRowTs_result
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|deleteAllRowTs_result
argument_list|,
name|deleteAllRowTs_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"deleteAllRowTs_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|deleteAllRowTs_resultStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|deleteAllRowTs_resultTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IOError
name|io
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|deleteAllRowTs_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|deleteAllRowTs_result
parameter_list|()
block|{     }
specifier|public
name|deleteAllRowTs_result
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|deleteAllRowTs_result
parameter_list|(
name|deleteAllRowTs_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|deleteAllRowTs_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|deleteAllRowTs_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|deleteAllRowTs_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|deleteAllRowTs_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|deleteAllRowTs_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|deleteAllRowTs_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|deleteAllRowTs_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|deleteAllRowTs_result
name|typedOther
init|=
operator|(
name|deleteAllRowTs_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"deleteAllRowTs_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|deleteAllRowTs_resultStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|deleteAllRowTs_resultStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|deleteAllRowTs_resultStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|deleteAllRowTs_resultStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|deleteAllRowTs_result
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|deleteAllRowTs_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|deleteAllRowTs_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|deleteAllRowTs_resultTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|deleteAllRowTs_resultTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|deleteAllRowTs_resultTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|deleteAllRowTs_resultTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|deleteAllRowTs_result
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|deleteAllRowTs_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|deleteAllRowTs_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|scannerOpenWithScan_args
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|scannerOpenWithScan_args
argument_list|,
name|scannerOpenWithScan_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"scannerOpenWithScan_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|SCAN_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"scan"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ATTRIBUTES_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"attributes"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|scannerOpenWithScan_argsStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|scannerOpenWithScan_argsTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|// required
comment|/**      * Scan instance      */
specifier|public
name|TScan
name|scan
decl_stmt|;
comment|// required
comment|/**      * Scan attributes      */
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
comment|/**        * name of table        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|,
comment|/**        * Scan instance        */
name|SCAN
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"scan"
argument_list|)
block|,
comment|/**        * Scan attributes        */
name|ATTRIBUTES
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"attributes"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
case|case
literal|2
case|:
comment|// SCAN
return|return
name|SCAN
return|;
case|case
literal|3
case|:
comment|// ATTRIBUTES
return|return
name|ATTRIBUTES
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SCAN
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"scan"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|TScan
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ATTRIBUTES
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"attributes"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|MapMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|scannerOpenWithScan_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|scannerOpenWithScan_args
parameter_list|()
block|{     }
specifier|public
name|scannerOpenWithScan_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|TScan
name|scan
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|scan
operator|=
name|scan
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|scannerOpenWithScan_args
parameter_list|(
name|scannerOpenWithScan_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetScan
argument_list|()
condition|)
block|{
name|this
operator|.
name|scan
operator|=
operator|new
name|TScan
argument_list|(
name|other
operator|.
name|scan
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|__this__attributes
init|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|other_element
range|:
name|other
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ByteBuffer
name|other_element_key
init|=
name|other_element
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ByteBuffer
name|other_element_value
init|=
name|other_element
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ByteBuffer
name|__this__attributes_copy_key
init|=
name|other_element_key
decl_stmt|;
name|ByteBuffer
name|__this__attributes_copy_value
init|=
name|other_element_value
decl_stmt|;
name|__this__attributes
operator|.
name|put
argument_list|(
name|__this__attributes_copy_key
argument_list|,
name|__this__attributes_copy_value
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|attributes
operator|=
name|__this__attributes
expr_stmt|;
block|}
block|}
specifier|public
name|scannerOpenWithScan_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|scannerOpenWithScan_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|scan
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|==
literal|null
condition|?
literal|null
else|:
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of table      */
specifier|public
name|scannerOpenWithScan_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|tableName
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|scannerOpenWithScan_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * Scan instance      */
specifier|public
name|TScan
name|getScan
parameter_list|()
block|{
return|return
name|this
operator|.
name|scan
return|;
block|}
comment|/**      * Scan instance      */
specifier|public
name|scannerOpenWithScan_args
name|setScan
parameter_list|(
name|TScan
name|scan
parameter_list|)
block|{
name|this
operator|.
name|scan
operator|=
name|scan
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetScan
parameter_list|()
block|{
name|this
operator|.
name|scan
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field scan is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetScan
parameter_list|()
block|{
return|return
name|this
operator|.
name|scan
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setScanIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|scan
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getAttributesSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|attributes
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|attributes
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|putToAttributes
parameter_list|(
name|ByteBuffer
name|key
parameter_list|,
name|ByteBuffer
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
comment|/**      * Scan attributes      */
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|getAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|attributes
return|;
block|}
comment|/**      * Scan attributes      */
specifier|public
name|scannerOpenWithScan_args
name|setAttributes
parameter_list|(
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
block|{
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetAttributes
parameter_list|()
block|{
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field attributes is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|attributes
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setAttributesIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|SCAN
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetScan
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setScan
argument_list|(
operator|(
name|TScan
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ATTRIBUTES
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetAttributes
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setAttributes
argument_list|(
operator|(
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
case|case
name|SCAN
case|:
return|return
name|getScan
argument_list|()
return|;
case|case
name|ATTRIBUTES
case|:
return|return
name|getAttributes
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
case|case
name|SCAN
case|:
return|return
name|isSetScan
argument_list|()
return|;
case|case
name|ATTRIBUTES
case|:
return|return
name|isSetAttributes
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|scannerOpenWithScan_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|scannerOpenWithScan_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|scannerOpenWithScan_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_scan
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetScan
argument_list|()
decl_stmt|;
name|boolean
name|that_present_scan
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetScan
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_scan
operator|||
name|that_present_scan
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_scan
operator|&&
name|that_present_scan
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|scan
operator|.
name|equals
argument_list|(
name|that
operator|.
name|scan
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_attributes
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetAttributes
argument_list|()
decl_stmt|;
name|boolean
name|that_present_attributes
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetAttributes
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_attributes
operator|||
name|that_present_attributes
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_attributes
operator|&&
name|that_present_attributes
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|attributes
operator|.
name|equals
argument_list|(
name|that
operator|.
name|attributes
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|scannerOpenWithScan_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|scannerOpenWithScan_args
name|typedOther
init|=
operator|(
name|scannerOpenWithScan_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetScan
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetScan
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetScan
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|scan
argument_list|,
name|typedOther
operator|.
name|scan
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetAttributes
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetAttributes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetAttributes
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|attributes
argument_list|,
name|typedOther
operator|.
name|attributes
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"scannerOpenWithScan_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"scan:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|scan
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|scan
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"attributes:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|attributes
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerOpenWithScan_argsStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|scannerOpenWithScan_argsStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|scannerOpenWithScan_argsStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerOpenWithScan_argsStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|scannerOpenWithScan_args
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|scannerOpenWithScan_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// SCAN
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|scan
operator|=
operator|new
name|TScan
argument_list|()
expr_stmt|;
name|struct
operator|.
name|scan
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setScanIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// ATTRIBUTES
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map434
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|(
literal|2
operator|*
name|_map434
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i435
init|=
literal|0
init|;
name|_i435
operator|<
name|_map434
operator|.
name|size
condition|;
operator|++
name|_i435
control|)
block|{
name|ByteBuffer
name|_key436
decl_stmt|;
comment|// required
name|ByteBuffer
name|_val437
decl_stmt|;
comment|// required
name|_key436
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val437
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|_key436
argument_list|,
name|_val437
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setAttributesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|scannerOpenWithScan_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|scan
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SCAN_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|scan
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|attributes
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ATTRIBUTES_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|struct
operator|.
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|_iter438
range|:
name|struct
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter438
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter438
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerOpenWithScan_argsTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|scannerOpenWithScan_argsTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|scannerOpenWithScan_argsTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerOpenWithScan_argsTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|scannerOpenWithScan_args
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|scannerOpenWithScan_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetScan
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|3
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetScan
argument_list|()
condition|)
block|{
name|struct
operator|.
name|scan
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|_iter439
range|:
name|struct
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter439
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter439
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|scannerOpenWithScan_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|scan
operator|=
operator|new
name|TScan
argument_list|()
expr_stmt|;
name|struct
operator|.
name|scan
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setScanIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|2
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map440
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|(
literal|2
operator|*
name|_map440
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i441
init|=
literal|0
init|;
name|_i441
operator|<
name|_map440
operator|.
name|size
condition|;
operator|++
name|_i441
control|)
block|{
name|ByteBuffer
name|_key442
decl_stmt|;
comment|// required
name|ByteBuffer
name|_val443
decl_stmt|;
comment|// required
name|_key442
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val443
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|_key442
argument_list|,
name|_val443
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setAttributesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|scannerOpenWithScan_result
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|scannerOpenWithScan_result
argument_list|,
name|scannerOpenWithScan_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"scannerOpenWithScan_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|scannerOpenWithScan_resultStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|scannerOpenWithScan_resultTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|success
decl_stmt|;
comment|// required
specifier|public
name|IOError
name|io
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__SUCCESS_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
literal|"ScannerID"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|scannerOpenWithScan_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|scannerOpenWithScan_result
parameter_list|()
block|{     }
specifier|public
name|scannerOpenWithScan_result
parameter_list|(
name|int
name|success
parameter_list|,
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|scannerOpenWithScan_result
parameter_list|(
name|scannerOpenWithScan_result
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|other
operator|.
name|success
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|scannerOpenWithScan_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|scannerOpenWithScan_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|setSuccessIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|scannerOpenWithScan_result
name|setSuccess
parameter_list|(
name|int
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|scannerOpenWithScan_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|getSuccess
argument_list|()
argument_list|)
return|;
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|scannerOpenWithScan_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|scannerOpenWithScan_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|scannerOpenWithScan_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|success
operator|!=
name|that
operator|.
name|success
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|scannerOpenWithScan_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|scannerOpenWithScan_result
name|typedOther
init|=
operator|(
name|scannerOpenWithScan_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"scannerOpenWithScan_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerOpenWithScan_resultStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|scannerOpenWithScan_resultStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|scannerOpenWithScan_resultStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerOpenWithScan_resultStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|scannerOpenWithScan_result
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|scannerOpenWithScan_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
condition|)
block|{
name|struct
operator|.
name|success
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|scannerOpenWithScan_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|success
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerOpenWithScan_resultTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|scannerOpenWithScan_resultTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|scannerOpenWithScan_resultTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerOpenWithScan_resultTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|scannerOpenWithScan_result
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|scannerOpenWithScan_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|scannerOpenWithScan_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|success
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|scannerOpen_args
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|scannerOpen_args
argument_list|,
name|scannerOpen_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"scannerOpen_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|START_ROW_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"startRow"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|COLUMNS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"columns"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ATTRIBUTES_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"attributes"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|scannerOpen_argsStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|scannerOpen_argsTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|// required
comment|/**      * Starting row in table to scan.      * Send "" (empty string) to start at the first row.      */
specifier|public
name|ByteBuffer
name|startRow
decl_stmt|;
comment|// required
comment|/**      * columns to scan. If column name is a column family, all      * columns of the specified column family are returned. It's also possible      * to pass a regex in the column qualifier.      */
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
decl_stmt|;
comment|// required
comment|/**      * Scan attributes      */
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
comment|/**        * name of table        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|,
comment|/**        * Starting row in table to scan.        * Send "" (empty string) to start at the first row.        */
name|START_ROW
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"startRow"
argument_list|)
block|,
comment|/**        * columns to scan. If column name is a column family, all        * columns of the specified column family are returned. It's also possible        * to pass a regex in the column qualifier.        */
name|COLUMNS
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"columns"
argument_list|)
block|,
comment|/**        * Scan attributes        */
name|ATTRIBUTES
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|,
literal|"attributes"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
case|case
literal|2
case|:
comment|// START_ROW
return|return
name|START_ROW
return|;
case|case
literal|3
case|:
comment|// COLUMNS
return|return
name|COLUMNS
return|;
case|case
literal|4
case|:
comment|// ATTRIBUTES
return|return
name|ATTRIBUTES
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|START_ROW
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"startRow"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|COLUMNS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"columns"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ATTRIBUTES
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"attributes"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|MapMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|scannerOpen_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|scannerOpen_args
parameter_list|()
block|{     }
specifier|public
name|scannerOpen_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|startRow
operator|=
name|startRow
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|scannerOpen_args
parameter_list|(
name|scannerOpen_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetStartRow
argument_list|()
condition|)
block|{
name|this
operator|.
name|startRow
operator|=
name|other
operator|.
name|startRow
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetColumns
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|__this__columns
init|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ByteBuffer
name|other_element
range|:
name|other
operator|.
name|columns
control|)
block|{
name|__this__columns
operator|.
name|add
argument_list|(
name|other_element
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|columns
operator|=
name|__this__columns
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|__this__attributes
init|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|other_element
range|:
name|other
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ByteBuffer
name|other_element_key
init|=
name|other_element
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ByteBuffer
name|other_element_value
init|=
name|other_element
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ByteBuffer
name|__this__attributes_copy_key
init|=
name|other_element_key
decl_stmt|;
name|ByteBuffer
name|__this__attributes_copy_value
init|=
name|other_element_value
decl_stmt|;
name|__this__attributes
operator|.
name|put
argument_list|(
name|__this__attributes_copy_key
argument_list|,
name|__this__attributes_copy_value
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|attributes
operator|=
name|__this__attributes
expr_stmt|;
block|}
block|}
specifier|public
name|scannerOpen_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|scannerOpen_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|startRow
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|==
literal|null
condition|?
literal|null
else|:
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of table      */
specifier|public
name|scannerOpen_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|tableName
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|scannerOpen_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * Starting row in table to scan.      * Send "" (empty string) to start at the first row.      */
specifier|public
name|byte
index|[]
name|getStartRow
parameter_list|()
block|{
name|setStartRow
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|startRow
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|startRow
operator|==
literal|null
condition|?
literal|null
else|:
name|startRow
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForStartRow
parameter_list|()
block|{
return|return
name|startRow
return|;
block|}
comment|/**      * Starting row in table to scan.      * Send "" (empty string) to start at the first row.      */
specifier|public
name|scannerOpen_args
name|setStartRow
parameter_list|(
name|byte
index|[]
name|startRow
parameter_list|)
block|{
name|setStartRow
argument_list|(
name|startRow
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|startRow
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|scannerOpen_args
name|setStartRow
parameter_list|(
name|ByteBuffer
name|startRow
parameter_list|)
block|{
name|this
operator|.
name|startRow
operator|=
name|startRow
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetStartRow
parameter_list|()
block|{
name|this
operator|.
name|startRow
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field startRow is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetStartRow
parameter_list|()
block|{
return|return
name|this
operator|.
name|startRow
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setStartRowIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|startRow
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getColumnsSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|columns
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|columns
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|ByteBuffer
argument_list|>
name|getColumnsIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|columns
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|columns
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToColumns
parameter_list|(
name|ByteBuffer
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|columns
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|columns
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
comment|/**      * columns to scan. If column name is a column family, all      * columns of the specified column family are returned. It's also possible      * to pass a regex in the column qualifier.      */
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|getColumns
parameter_list|()
block|{
return|return
name|this
operator|.
name|columns
return|;
block|}
comment|/**      * columns to scan. If column name is a column family, all      * columns of the specified column family are returned. It's also possible      * to pass a regex in the column qualifier.      */
specifier|public
name|scannerOpen_args
name|setColumns
parameter_list|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|)
block|{
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetColumns
parameter_list|()
block|{
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field columns is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetColumns
parameter_list|()
block|{
return|return
name|this
operator|.
name|columns
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setColumnsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getAttributesSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|attributes
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|attributes
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|putToAttributes
parameter_list|(
name|ByteBuffer
name|key
parameter_list|,
name|ByteBuffer
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
comment|/**      * Scan attributes      */
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|getAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|attributes
return|;
block|}
comment|/**      * Scan attributes      */
specifier|public
name|scannerOpen_args
name|setAttributes
parameter_list|(
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
block|{
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetAttributes
parameter_list|()
block|{
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field attributes is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|attributes
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setAttributesIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|START_ROW
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetStartRow
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setStartRow
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|COLUMNS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetColumns
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setColumns
argument_list|(
operator|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ATTRIBUTES
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetAttributes
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setAttributes
argument_list|(
operator|(
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
case|case
name|START_ROW
case|:
return|return
name|getStartRow
argument_list|()
return|;
case|case
name|COLUMNS
case|:
return|return
name|getColumns
argument_list|()
return|;
case|case
name|ATTRIBUTES
case|:
return|return
name|getAttributes
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
case|case
name|START_ROW
case|:
return|return
name|isSetStartRow
argument_list|()
return|;
case|case
name|COLUMNS
case|:
return|return
name|isSetColumns
argument_list|()
return|;
case|case
name|ATTRIBUTES
case|:
return|return
name|isSetAttributes
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|scannerOpen_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|scannerOpen_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|scannerOpen_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_startRow
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetStartRow
argument_list|()
decl_stmt|;
name|boolean
name|that_present_startRow
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetStartRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_startRow
operator|||
name|that_present_startRow
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_startRow
operator|&&
name|that_present_startRow
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|startRow
operator|.
name|equals
argument_list|(
name|that
operator|.
name|startRow
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_columns
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetColumns
argument_list|()
decl_stmt|;
name|boolean
name|that_present_columns
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetColumns
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_columns
operator|||
name|that_present_columns
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_columns
operator|&&
name|that_present_columns
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|columns
operator|.
name|equals
argument_list|(
name|that
operator|.
name|columns
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_attributes
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetAttributes
argument_list|()
decl_stmt|;
name|boolean
name|that_present_attributes
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetAttributes
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_attributes
operator|||
name|that_present_attributes
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_attributes
operator|&&
name|that_present_attributes
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|attributes
operator|.
name|equals
argument_list|(
name|that
operator|.
name|attributes
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|scannerOpen_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|scannerOpen_args
name|typedOther
init|=
operator|(
name|scannerOpen_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetStartRow
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetStartRow
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetStartRow
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|startRow
argument_list|,
name|typedOther
operator|.
name|startRow
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetColumns
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetColumns
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetColumns
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|columns
argument_list|,
name|typedOther
operator|.
name|columns
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetAttributes
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetAttributes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetAttributes
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|attributes
argument_list|,
name|typedOther
operator|.
name|attributes
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"scannerOpen_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"startRow:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|startRow
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|startRow
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"columns:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|columns
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|columns
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"attributes:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|attributes
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerOpen_argsStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|scannerOpen_argsStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|scannerOpen_argsStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerOpen_argsStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|scannerOpen_args
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|scannerOpen_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// START_ROW
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|startRow
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setStartRowIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// COLUMNS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list444
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|(
name|_list444
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i445
init|=
literal|0
init|;
name|_i445
operator|<
name|_list444
operator|.
name|size
condition|;
operator|++
name|_i445
control|)
block|{
name|ByteBuffer
name|_elem446
decl_stmt|;
comment|// optional
name|_elem446
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|columns
operator|.
name|add
argument_list|(
name|_elem446
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setColumnsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// ATTRIBUTES
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map447
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|(
literal|2
operator|*
name|_map447
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i448
init|=
literal|0
init|;
name|_i448
operator|<
name|_map447
operator|.
name|size
condition|;
operator|++
name|_i448
control|)
block|{
name|ByteBuffer
name|_key449
decl_stmt|;
comment|// required
name|ByteBuffer
name|_val450
decl_stmt|;
comment|// required
name|_key449
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val450
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|_key449
argument_list|,
name|_val450
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setAttributesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|scannerOpen_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|startRow
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|START_ROW_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|startRow
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|columns
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|COLUMNS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|struct
operator|.
name|columns
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ByteBuffer
name|_iter451
range|:
name|struct
operator|.
name|columns
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter451
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|attributes
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ATTRIBUTES_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|struct
operator|.
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|_iter452
range|:
name|struct
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter452
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter452
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerOpen_argsTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|scannerOpen_argsTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|scannerOpen_argsTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerOpen_argsTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|scannerOpen_args
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|scannerOpen_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetStartRow
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetColumns
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|4
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetStartRow
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|startRow
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetColumns
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|columns
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ByteBuffer
name|_iter453
range|:
name|struct
operator|.
name|columns
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter453
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|_iter454
range|:
name|struct
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter454
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter454
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|scannerOpen_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|startRow
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setStartRowIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|2
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list455
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|(
name|_list455
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i456
init|=
literal|0
init|;
name|_i456
operator|<
name|_list455
operator|.
name|size
condition|;
operator|++
name|_i456
control|)
block|{
name|ByteBuffer
name|_elem457
decl_stmt|;
comment|// optional
name|_elem457
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|columns
operator|.
name|add
argument_list|(
name|_elem457
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setColumnsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|3
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map458
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|(
literal|2
operator|*
name|_map458
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i459
init|=
literal|0
init|;
name|_i459
operator|<
name|_map458
operator|.
name|size
condition|;
operator|++
name|_i459
control|)
block|{
name|ByteBuffer
name|_key460
decl_stmt|;
comment|// required
name|ByteBuffer
name|_val461
decl_stmt|;
comment|// required
name|_key460
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val461
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|_key460
argument_list|,
name|_val461
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setAttributesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|scannerOpen_result
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|scannerOpen_result
argument_list|,
name|scannerOpen_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"scannerOpen_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|scannerOpen_resultStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|scannerOpen_resultTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|success
decl_stmt|;
comment|// required
specifier|public
name|IOError
name|io
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__SUCCESS_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
literal|"ScannerID"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|scannerOpen_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|scannerOpen_result
parameter_list|()
block|{     }
specifier|public
name|scannerOpen_result
parameter_list|(
name|int
name|success
parameter_list|,
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|scannerOpen_result
parameter_list|(
name|scannerOpen_result
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|other
operator|.
name|success
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|scannerOpen_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|scannerOpen_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|setSuccessIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|scannerOpen_result
name|setSuccess
parameter_list|(
name|int
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|scannerOpen_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|getSuccess
argument_list|()
argument_list|)
return|;
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|scannerOpen_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|scannerOpen_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|scannerOpen_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|success
operator|!=
name|that
operator|.
name|success
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|scannerOpen_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|scannerOpen_result
name|typedOther
init|=
operator|(
name|scannerOpen_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"scannerOpen_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerOpen_resultStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|scannerOpen_resultStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|scannerOpen_resultStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerOpen_resultStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|scannerOpen_result
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|scannerOpen_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
condition|)
block|{
name|struct
operator|.
name|success
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|scannerOpen_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|success
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerOpen_resultTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|scannerOpen_resultTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|scannerOpen_resultTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerOpen_resultTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|scannerOpen_result
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|scannerOpen_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|scannerOpen_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|success
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|scannerOpenWithStop_args
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|scannerOpenWithStop_args
argument_list|,
name|scannerOpenWithStop_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"scannerOpenWithStop_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|START_ROW_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"startRow"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|STOP_ROW_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"stopRow"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|COLUMNS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"columns"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ATTRIBUTES_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"attributes"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|(
name|short
operator|)
literal|5
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|scannerOpenWithStop_argsStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|scannerOpenWithStop_argsTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|// required
comment|/**      * Starting row in table to scan.      * Send "" (empty string) to start at the first row.      */
specifier|public
name|ByteBuffer
name|startRow
decl_stmt|;
comment|// required
comment|/**      * row to stop scanning on. This row is *not* included in the      * scanner's results      */
specifier|public
name|ByteBuffer
name|stopRow
decl_stmt|;
comment|// required
comment|/**      * columns to scan. If column name is a column family, all      * columns of the specified column family are returned. It's also possible      * to pass a regex in the column qualifier.      */
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
decl_stmt|;
comment|// required
comment|/**      * Scan attributes      */
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
comment|/**        * name of table        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|,
comment|/**        * Starting row in table to scan.        * Send "" (empty string) to start at the first row.        */
name|START_ROW
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"startRow"
argument_list|)
block|,
comment|/**        * row to stop scanning on. This row is *not* included in the        * scanner's results        */
name|STOP_ROW
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"stopRow"
argument_list|)
block|,
comment|/**        * columns to scan. If column name is a column family, all        * columns of the specified column family are returned. It's also possible        * to pass a regex in the column qualifier.        */
name|COLUMNS
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|,
literal|"columns"
argument_list|)
block|,
comment|/**        * Scan attributes        */
name|ATTRIBUTES
argument_list|(
operator|(
name|short
operator|)
literal|5
argument_list|,
literal|"attributes"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
case|case
literal|2
case|:
comment|// START_ROW
return|return
name|START_ROW
return|;
case|case
literal|3
case|:
comment|// STOP_ROW
return|return
name|STOP_ROW
return|;
case|case
literal|4
case|:
comment|// COLUMNS
return|return
name|COLUMNS
return|;
case|case
literal|5
case|:
comment|// ATTRIBUTES
return|return
name|ATTRIBUTES
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|START_ROW
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"startRow"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|STOP_ROW
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"stopRow"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|COLUMNS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"columns"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ATTRIBUTES
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"attributes"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|MapMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|scannerOpenWithStop_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|scannerOpenWithStop_args
parameter_list|()
block|{     }
specifier|public
name|scannerOpenWithStop_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|ByteBuffer
name|stopRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|startRow
operator|=
name|startRow
expr_stmt|;
name|this
operator|.
name|stopRow
operator|=
name|stopRow
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|scannerOpenWithStop_args
parameter_list|(
name|scannerOpenWithStop_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetStartRow
argument_list|()
condition|)
block|{
name|this
operator|.
name|startRow
operator|=
name|other
operator|.
name|startRow
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetStopRow
argument_list|()
condition|)
block|{
name|this
operator|.
name|stopRow
operator|=
name|other
operator|.
name|stopRow
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetColumns
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|__this__columns
init|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ByteBuffer
name|other_element
range|:
name|other
operator|.
name|columns
control|)
block|{
name|__this__columns
operator|.
name|add
argument_list|(
name|other_element
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|columns
operator|=
name|__this__columns
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|__this__attributes
init|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|other_element
range|:
name|other
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ByteBuffer
name|other_element_key
init|=
name|other_element
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ByteBuffer
name|other_element_value
init|=
name|other_element
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ByteBuffer
name|__this__attributes_copy_key
init|=
name|other_element_key
decl_stmt|;
name|ByteBuffer
name|__this__attributes_copy_value
init|=
name|other_element_value
decl_stmt|;
name|__this__attributes
operator|.
name|put
argument_list|(
name|__this__attributes_copy_key
argument_list|,
name|__this__attributes_copy_value
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|attributes
operator|=
name|__this__attributes
expr_stmt|;
block|}
block|}
specifier|public
name|scannerOpenWithStop_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|scannerOpenWithStop_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|startRow
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|stopRow
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|==
literal|null
condition|?
literal|null
else|:
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of table      */
specifier|public
name|scannerOpenWithStop_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|tableName
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|scannerOpenWithStop_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * Starting row in table to scan.      * Send "" (empty string) to start at the first row.      */
specifier|public
name|byte
index|[]
name|getStartRow
parameter_list|()
block|{
name|setStartRow
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|startRow
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|startRow
operator|==
literal|null
condition|?
literal|null
else|:
name|startRow
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForStartRow
parameter_list|()
block|{
return|return
name|startRow
return|;
block|}
comment|/**      * Starting row in table to scan.      * Send "" (empty string) to start at the first row.      */
specifier|public
name|scannerOpenWithStop_args
name|setStartRow
parameter_list|(
name|byte
index|[]
name|startRow
parameter_list|)
block|{
name|setStartRow
argument_list|(
name|startRow
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|startRow
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|scannerOpenWithStop_args
name|setStartRow
parameter_list|(
name|ByteBuffer
name|startRow
parameter_list|)
block|{
name|this
operator|.
name|startRow
operator|=
name|startRow
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetStartRow
parameter_list|()
block|{
name|this
operator|.
name|startRow
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field startRow is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetStartRow
parameter_list|()
block|{
return|return
name|this
operator|.
name|startRow
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setStartRowIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|startRow
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * row to stop scanning on. This row is *not* included in the      * scanner's results      */
specifier|public
name|byte
index|[]
name|getStopRow
parameter_list|()
block|{
name|setStopRow
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|stopRow
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|stopRow
operator|==
literal|null
condition|?
literal|null
else|:
name|stopRow
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForStopRow
parameter_list|()
block|{
return|return
name|stopRow
return|;
block|}
comment|/**      * row to stop scanning on. This row is *not* included in the      * scanner's results      */
specifier|public
name|scannerOpenWithStop_args
name|setStopRow
parameter_list|(
name|byte
index|[]
name|stopRow
parameter_list|)
block|{
name|setStopRow
argument_list|(
name|stopRow
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|stopRow
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|scannerOpenWithStop_args
name|setStopRow
parameter_list|(
name|ByteBuffer
name|stopRow
parameter_list|)
block|{
name|this
operator|.
name|stopRow
operator|=
name|stopRow
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetStopRow
parameter_list|()
block|{
name|this
operator|.
name|stopRow
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field stopRow is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetStopRow
parameter_list|()
block|{
return|return
name|this
operator|.
name|stopRow
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setStopRowIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|stopRow
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getColumnsSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|columns
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|columns
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|ByteBuffer
argument_list|>
name|getColumnsIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|columns
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|columns
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToColumns
parameter_list|(
name|ByteBuffer
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|columns
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|columns
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
comment|/**      * columns to scan. If column name is a column family, all      * columns of the specified column family are returned. It's also possible      * to pass a regex in the column qualifier.      */
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|getColumns
parameter_list|()
block|{
return|return
name|this
operator|.
name|columns
return|;
block|}
comment|/**      * columns to scan. If column name is a column family, all      * columns of the specified column family are returned. It's also possible      * to pass a regex in the column qualifier.      */
specifier|public
name|scannerOpenWithStop_args
name|setColumns
parameter_list|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|)
block|{
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetColumns
parameter_list|()
block|{
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field columns is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetColumns
parameter_list|()
block|{
return|return
name|this
operator|.
name|columns
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setColumnsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getAttributesSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|attributes
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|attributes
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|putToAttributes
parameter_list|(
name|ByteBuffer
name|key
parameter_list|,
name|ByteBuffer
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
comment|/**      * Scan attributes      */
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|getAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|attributes
return|;
block|}
comment|/**      * Scan attributes      */
specifier|public
name|scannerOpenWithStop_args
name|setAttributes
parameter_list|(
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
block|{
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetAttributes
parameter_list|()
block|{
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field attributes is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|attributes
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setAttributesIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|START_ROW
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetStartRow
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setStartRow
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|STOP_ROW
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetStopRow
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setStopRow
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|COLUMNS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetColumns
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setColumns
argument_list|(
operator|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ATTRIBUTES
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetAttributes
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setAttributes
argument_list|(
operator|(
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
case|case
name|START_ROW
case|:
return|return
name|getStartRow
argument_list|()
return|;
case|case
name|STOP_ROW
case|:
return|return
name|getStopRow
argument_list|()
return|;
case|case
name|COLUMNS
case|:
return|return
name|getColumns
argument_list|()
return|;
case|case
name|ATTRIBUTES
case|:
return|return
name|getAttributes
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
case|case
name|START_ROW
case|:
return|return
name|isSetStartRow
argument_list|()
return|;
case|case
name|STOP_ROW
case|:
return|return
name|isSetStopRow
argument_list|()
return|;
case|case
name|COLUMNS
case|:
return|return
name|isSetColumns
argument_list|()
return|;
case|case
name|ATTRIBUTES
case|:
return|return
name|isSetAttributes
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|scannerOpenWithStop_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|scannerOpenWithStop_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|scannerOpenWithStop_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_startRow
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetStartRow
argument_list|()
decl_stmt|;
name|boolean
name|that_present_startRow
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetStartRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_startRow
operator|||
name|that_present_startRow
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_startRow
operator|&&
name|that_present_startRow
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|startRow
operator|.
name|equals
argument_list|(
name|that
operator|.
name|startRow
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_stopRow
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetStopRow
argument_list|()
decl_stmt|;
name|boolean
name|that_present_stopRow
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetStopRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_stopRow
operator|||
name|that_present_stopRow
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_stopRow
operator|&&
name|that_present_stopRow
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|stopRow
operator|.
name|equals
argument_list|(
name|that
operator|.
name|stopRow
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_columns
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetColumns
argument_list|()
decl_stmt|;
name|boolean
name|that_present_columns
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetColumns
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_columns
operator|||
name|that_present_columns
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_columns
operator|&&
name|that_present_columns
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|columns
operator|.
name|equals
argument_list|(
name|that
operator|.
name|columns
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_attributes
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetAttributes
argument_list|()
decl_stmt|;
name|boolean
name|that_present_attributes
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetAttributes
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_attributes
operator|||
name|that_present_attributes
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_attributes
operator|&&
name|that_present_attributes
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|attributes
operator|.
name|equals
argument_list|(
name|that
operator|.
name|attributes
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|scannerOpenWithStop_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|scannerOpenWithStop_args
name|typedOther
init|=
operator|(
name|scannerOpenWithStop_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetStartRow
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetStartRow
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetStartRow
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|startRow
argument_list|,
name|typedOther
operator|.
name|startRow
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetStopRow
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetStopRow
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetStopRow
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|stopRow
argument_list|,
name|typedOther
operator|.
name|stopRow
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetColumns
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetColumns
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetColumns
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|columns
argument_list|,
name|typedOther
operator|.
name|columns
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetAttributes
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetAttributes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetAttributes
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|attributes
argument_list|,
name|typedOther
operator|.
name|attributes
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"scannerOpenWithStop_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"startRow:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|startRow
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|startRow
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"stopRow:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|stopRow
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|stopRow
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"columns:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|columns
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|columns
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"attributes:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|attributes
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerOpenWithStop_argsStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|scannerOpenWithStop_argsStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|scannerOpenWithStop_argsStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerOpenWithStop_argsStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|scannerOpenWithStop_args
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|scannerOpenWithStop_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// START_ROW
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|startRow
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setStartRowIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// STOP_ROW
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|stopRow
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setStopRowIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// COLUMNS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list462
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|(
name|_list462
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i463
init|=
literal|0
init|;
name|_i463
operator|<
name|_list462
operator|.
name|size
condition|;
operator|++
name|_i463
control|)
block|{
name|ByteBuffer
name|_elem464
decl_stmt|;
comment|// optional
name|_elem464
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|columns
operator|.
name|add
argument_list|(
name|_elem464
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setColumnsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|5
case|:
comment|// ATTRIBUTES
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map465
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|(
literal|2
operator|*
name|_map465
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i466
init|=
literal|0
init|;
name|_i466
operator|<
name|_map465
operator|.
name|size
condition|;
operator|++
name|_i466
control|)
block|{
name|ByteBuffer
name|_key467
decl_stmt|;
comment|// required
name|ByteBuffer
name|_val468
decl_stmt|;
comment|// required
name|_key467
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val468
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|_key467
argument_list|,
name|_val468
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setAttributesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|scannerOpenWithStop_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|startRow
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|START_ROW_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|startRow
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|stopRow
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|STOP_ROW_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|stopRow
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|columns
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|COLUMNS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|struct
operator|.
name|columns
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ByteBuffer
name|_iter469
range|:
name|struct
operator|.
name|columns
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter469
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|attributes
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ATTRIBUTES_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|struct
operator|.
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|_iter470
range|:
name|struct
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter470
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter470
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerOpenWithStop_argsTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|scannerOpenWithStop_argsTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|scannerOpenWithStop_argsTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerOpenWithStop_argsTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|scannerOpenWithStop_args
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|scannerOpenWithStop_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetStartRow
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetStopRow
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetColumns
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|5
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetStartRow
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|startRow
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetStopRow
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|stopRow
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetColumns
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|columns
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ByteBuffer
name|_iter471
range|:
name|struct
operator|.
name|columns
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter471
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|_iter472
range|:
name|struct
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter472
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter472
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|scannerOpenWithStop_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|startRow
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setStartRowIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|struct
operator|.
name|stopRow
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setStopRowIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|3
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list473
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|(
name|_list473
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i474
init|=
literal|0
init|;
name|_i474
operator|<
name|_list473
operator|.
name|size
condition|;
operator|++
name|_i474
control|)
block|{
name|ByteBuffer
name|_elem475
decl_stmt|;
comment|// optional
name|_elem475
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|columns
operator|.
name|add
argument_list|(
name|_elem475
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setColumnsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|4
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map476
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|(
literal|2
operator|*
name|_map476
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i477
init|=
literal|0
init|;
name|_i477
operator|<
name|_map476
operator|.
name|size
condition|;
operator|++
name|_i477
control|)
block|{
name|ByteBuffer
name|_key478
decl_stmt|;
comment|// required
name|ByteBuffer
name|_val479
decl_stmt|;
comment|// required
name|_key478
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val479
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|_key478
argument_list|,
name|_val479
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setAttributesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|scannerOpenWithStop_result
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|scannerOpenWithStop_result
argument_list|,
name|scannerOpenWithStop_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"scannerOpenWithStop_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|scannerOpenWithStop_resultStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|scannerOpenWithStop_resultTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|success
decl_stmt|;
comment|// required
specifier|public
name|IOError
name|io
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__SUCCESS_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
literal|"ScannerID"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|scannerOpenWithStop_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|scannerOpenWithStop_result
parameter_list|()
block|{     }
specifier|public
name|scannerOpenWithStop_result
parameter_list|(
name|int
name|success
parameter_list|,
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|scannerOpenWithStop_result
parameter_list|(
name|scannerOpenWithStop_result
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|other
operator|.
name|success
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|scannerOpenWithStop_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|scannerOpenWithStop_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|setSuccessIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|scannerOpenWithStop_result
name|setSuccess
parameter_list|(
name|int
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|scannerOpenWithStop_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|getSuccess
argument_list|()
argument_list|)
return|;
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|scannerOpenWithStop_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|scannerOpenWithStop_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|scannerOpenWithStop_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|success
operator|!=
name|that
operator|.
name|success
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|scannerOpenWithStop_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|scannerOpenWithStop_result
name|typedOther
init|=
operator|(
name|scannerOpenWithStop_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"scannerOpenWithStop_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerOpenWithStop_resultStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|scannerOpenWithStop_resultStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|scannerOpenWithStop_resultStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerOpenWithStop_resultStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|scannerOpenWithStop_result
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|scannerOpenWithStop_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
condition|)
block|{
name|struct
operator|.
name|success
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|scannerOpenWithStop_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|success
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerOpenWithStop_resultTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|scannerOpenWithStop_resultTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|scannerOpenWithStop_resultTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerOpenWithStop_resultTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|scannerOpenWithStop_result
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|scannerOpenWithStop_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|scannerOpenWithStop_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|success
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|scannerOpenWithPrefix_args
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|scannerOpenWithPrefix_args
argument_list|,
name|scannerOpenWithPrefix_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"scannerOpenWithPrefix_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|START_AND_PREFIX_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"startAndPrefix"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|COLUMNS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"columns"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ATTRIBUTES_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"attributes"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|scannerOpenWithPrefix_argsStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|scannerOpenWithPrefix_argsTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|// required
comment|/**      * the prefix (and thus start row) of the keys you want      */
specifier|public
name|ByteBuffer
name|startAndPrefix
decl_stmt|;
comment|// required
comment|/**      * the columns you want returned      */
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
decl_stmt|;
comment|// required
comment|/**      * Scan attributes      */
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
comment|/**        * name of table        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|,
comment|/**        * the prefix (and thus start row) of the keys you want        */
name|START_AND_PREFIX
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"startAndPrefix"
argument_list|)
block|,
comment|/**        * the columns you want returned        */
name|COLUMNS
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"columns"
argument_list|)
block|,
comment|/**        * Scan attributes        */
name|ATTRIBUTES
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|,
literal|"attributes"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
case|case
literal|2
case|:
comment|// START_AND_PREFIX
return|return
name|START_AND_PREFIX
return|;
case|case
literal|3
case|:
comment|// COLUMNS
return|return
name|COLUMNS
return|;
case|case
literal|4
case|:
comment|// ATTRIBUTES
return|return
name|ATTRIBUTES
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|START_AND_PREFIX
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"startAndPrefix"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|COLUMNS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"columns"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ATTRIBUTES
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"attributes"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|MapMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|scannerOpenWithPrefix_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|scannerOpenWithPrefix_args
parameter_list|()
block|{     }
specifier|public
name|scannerOpenWithPrefix_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startAndPrefix
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|startAndPrefix
operator|=
name|startAndPrefix
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|scannerOpenWithPrefix_args
parameter_list|(
name|scannerOpenWithPrefix_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetStartAndPrefix
argument_list|()
condition|)
block|{
name|this
operator|.
name|startAndPrefix
operator|=
name|other
operator|.
name|startAndPrefix
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetColumns
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|__this__columns
init|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ByteBuffer
name|other_element
range|:
name|other
operator|.
name|columns
control|)
block|{
name|__this__columns
operator|.
name|add
argument_list|(
name|other_element
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|columns
operator|=
name|__this__columns
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|__this__attributes
init|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|other_element
range|:
name|other
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ByteBuffer
name|other_element_key
init|=
name|other_element
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ByteBuffer
name|other_element_value
init|=
name|other_element
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ByteBuffer
name|__this__attributes_copy_key
init|=
name|other_element_key
decl_stmt|;
name|ByteBuffer
name|__this__attributes_copy_value
init|=
name|other_element_value
decl_stmt|;
name|__this__attributes
operator|.
name|put
argument_list|(
name|__this__attributes_copy_key
argument_list|,
name|__this__attributes_copy_value
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|attributes
operator|=
name|__this__attributes
expr_stmt|;
block|}
block|}
specifier|public
name|scannerOpenWithPrefix_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|scannerOpenWithPrefix_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|startAndPrefix
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|==
literal|null
condition|?
literal|null
else|:
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of table      */
specifier|public
name|scannerOpenWithPrefix_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|tableName
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|scannerOpenWithPrefix_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * the prefix (and thus start row) of the keys you want      */
specifier|public
name|byte
index|[]
name|getStartAndPrefix
parameter_list|()
block|{
name|setStartAndPrefix
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|startAndPrefix
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|startAndPrefix
operator|==
literal|null
condition|?
literal|null
else|:
name|startAndPrefix
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForStartAndPrefix
parameter_list|()
block|{
return|return
name|startAndPrefix
return|;
block|}
comment|/**      * the prefix (and thus start row) of the keys you want      */
specifier|public
name|scannerOpenWithPrefix_args
name|setStartAndPrefix
parameter_list|(
name|byte
index|[]
name|startAndPrefix
parameter_list|)
block|{
name|setStartAndPrefix
argument_list|(
name|startAndPrefix
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|startAndPrefix
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|scannerOpenWithPrefix_args
name|setStartAndPrefix
parameter_list|(
name|ByteBuffer
name|startAndPrefix
parameter_list|)
block|{
name|this
operator|.
name|startAndPrefix
operator|=
name|startAndPrefix
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetStartAndPrefix
parameter_list|()
block|{
name|this
operator|.
name|startAndPrefix
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field startAndPrefix is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetStartAndPrefix
parameter_list|()
block|{
return|return
name|this
operator|.
name|startAndPrefix
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setStartAndPrefixIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|startAndPrefix
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getColumnsSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|columns
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|columns
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|ByteBuffer
argument_list|>
name|getColumnsIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|columns
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|columns
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToColumns
parameter_list|(
name|ByteBuffer
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|columns
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|columns
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
comment|/**      * the columns you want returned      */
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|getColumns
parameter_list|()
block|{
return|return
name|this
operator|.
name|columns
return|;
block|}
comment|/**      * the columns you want returned      */
specifier|public
name|scannerOpenWithPrefix_args
name|setColumns
parameter_list|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|)
block|{
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetColumns
parameter_list|()
block|{
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field columns is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetColumns
parameter_list|()
block|{
return|return
name|this
operator|.
name|columns
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setColumnsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getAttributesSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|attributes
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|attributes
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|putToAttributes
parameter_list|(
name|ByteBuffer
name|key
parameter_list|,
name|ByteBuffer
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
comment|/**      * Scan attributes      */
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|getAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|attributes
return|;
block|}
comment|/**      * Scan attributes      */
specifier|public
name|scannerOpenWithPrefix_args
name|setAttributes
parameter_list|(
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
block|{
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetAttributes
parameter_list|()
block|{
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field attributes is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|attributes
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setAttributesIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|START_AND_PREFIX
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetStartAndPrefix
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setStartAndPrefix
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|COLUMNS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetColumns
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setColumns
argument_list|(
operator|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ATTRIBUTES
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetAttributes
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setAttributes
argument_list|(
operator|(
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
case|case
name|START_AND_PREFIX
case|:
return|return
name|getStartAndPrefix
argument_list|()
return|;
case|case
name|COLUMNS
case|:
return|return
name|getColumns
argument_list|()
return|;
case|case
name|ATTRIBUTES
case|:
return|return
name|getAttributes
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
case|case
name|START_AND_PREFIX
case|:
return|return
name|isSetStartAndPrefix
argument_list|()
return|;
case|case
name|COLUMNS
case|:
return|return
name|isSetColumns
argument_list|()
return|;
case|case
name|ATTRIBUTES
case|:
return|return
name|isSetAttributes
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|scannerOpenWithPrefix_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|scannerOpenWithPrefix_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|scannerOpenWithPrefix_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_startAndPrefix
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetStartAndPrefix
argument_list|()
decl_stmt|;
name|boolean
name|that_present_startAndPrefix
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetStartAndPrefix
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_startAndPrefix
operator|||
name|that_present_startAndPrefix
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_startAndPrefix
operator|&&
name|that_present_startAndPrefix
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|startAndPrefix
operator|.
name|equals
argument_list|(
name|that
operator|.
name|startAndPrefix
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_columns
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetColumns
argument_list|()
decl_stmt|;
name|boolean
name|that_present_columns
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetColumns
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_columns
operator|||
name|that_present_columns
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_columns
operator|&&
name|that_present_columns
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|columns
operator|.
name|equals
argument_list|(
name|that
operator|.
name|columns
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_attributes
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetAttributes
argument_list|()
decl_stmt|;
name|boolean
name|that_present_attributes
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetAttributes
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_attributes
operator|||
name|that_present_attributes
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_attributes
operator|&&
name|that_present_attributes
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|attributes
operator|.
name|equals
argument_list|(
name|that
operator|.
name|attributes
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|scannerOpenWithPrefix_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|scannerOpenWithPrefix_args
name|typedOther
init|=
operator|(
name|scannerOpenWithPrefix_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetStartAndPrefix
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetStartAndPrefix
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetStartAndPrefix
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|startAndPrefix
argument_list|,
name|typedOther
operator|.
name|startAndPrefix
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetColumns
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetColumns
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetColumns
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|columns
argument_list|,
name|typedOther
operator|.
name|columns
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetAttributes
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetAttributes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetAttributes
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|attributes
argument_list|,
name|typedOther
operator|.
name|attributes
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"scannerOpenWithPrefix_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"startAndPrefix:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|startAndPrefix
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|startAndPrefix
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"columns:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|columns
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|columns
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"attributes:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|attributes
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerOpenWithPrefix_argsStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|scannerOpenWithPrefix_argsStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|scannerOpenWithPrefix_argsStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerOpenWithPrefix_argsStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|scannerOpenWithPrefix_args
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|scannerOpenWithPrefix_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// START_AND_PREFIX
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|startAndPrefix
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setStartAndPrefixIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// COLUMNS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list480
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|(
name|_list480
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i481
init|=
literal|0
init|;
name|_i481
operator|<
name|_list480
operator|.
name|size
condition|;
operator|++
name|_i481
control|)
block|{
name|ByteBuffer
name|_elem482
decl_stmt|;
comment|// optional
name|_elem482
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|columns
operator|.
name|add
argument_list|(
name|_elem482
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setColumnsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// ATTRIBUTES
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map483
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|(
literal|2
operator|*
name|_map483
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i484
init|=
literal|0
init|;
name|_i484
operator|<
name|_map483
operator|.
name|size
condition|;
operator|++
name|_i484
control|)
block|{
name|ByteBuffer
name|_key485
decl_stmt|;
comment|// required
name|ByteBuffer
name|_val486
decl_stmt|;
comment|// required
name|_key485
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val486
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|_key485
argument_list|,
name|_val486
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setAttributesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|scannerOpenWithPrefix_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|startAndPrefix
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|START_AND_PREFIX_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|startAndPrefix
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|columns
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|COLUMNS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|struct
operator|.
name|columns
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ByteBuffer
name|_iter487
range|:
name|struct
operator|.
name|columns
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter487
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|attributes
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ATTRIBUTES_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|struct
operator|.
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|_iter488
range|:
name|struct
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter488
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter488
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerOpenWithPrefix_argsTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|scannerOpenWithPrefix_argsTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|scannerOpenWithPrefix_argsTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerOpenWithPrefix_argsTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|scannerOpenWithPrefix_args
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|scannerOpenWithPrefix_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetStartAndPrefix
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetColumns
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|4
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetStartAndPrefix
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|startAndPrefix
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetColumns
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|columns
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ByteBuffer
name|_iter489
range|:
name|struct
operator|.
name|columns
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter489
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|_iter490
range|:
name|struct
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter490
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter490
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|scannerOpenWithPrefix_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|startAndPrefix
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setStartAndPrefixIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|2
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list491
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|(
name|_list491
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i492
init|=
literal|0
init|;
name|_i492
operator|<
name|_list491
operator|.
name|size
condition|;
operator|++
name|_i492
control|)
block|{
name|ByteBuffer
name|_elem493
decl_stmt|;
comment|// optional
name|_elem493
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|columns
operator|.
name|add
argument_list|(
name|_elem493
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setColumnsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|3
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map494
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|(
literal|2
operator|*
name|_map494
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i495
init|=
literal|0
init|;
name|_i495
operator|<
name|_map494
operator|.
name|size
condition|;
operator|++
name|_i495
control|)
block|{
name|ByteBuffer
name|_key496
decl_stmt|;
comment|// required
name|ByteBuffer
name|_val497
decl_stmt|;
comment|// required
name|_key496
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val497
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|_key496
argument_list|,
name|_val497
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setAttributesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|scannerOpenWithPrefix_result
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|scannerOpenWithPrefix_result
argument_list|,
name|scannerOpenWithPrefix_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"scannerOpenWithPrefix_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|scannerOpenWithPrefix_resultStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|scannerOpenWithPrefix_resultTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|success
decl_stmt|;
comment|// required
specifier|public
name|IOError
name|io
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__SUCCESS_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
literal|"ScannerID"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|scannerOpenWithPrefix_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|scannerOpenWithPrefix_result
parameter_list|()
block|{     }
specifier|public
name|scannerOpenWithPrefix_result
parameter_list|(
name|int
name|success
parameter_list|,
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|scannerOpenWithPrefix_result
parameter_list|(
name|scannerOpenWithPrefix_result
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|other
operator|.
name|success
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|scannerOpenWithPrefix_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|scannerOpenWithPrefix_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|setSuccessIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|scannerOpenWithPrefix_result
name|setSuccess
parameter_list|(
name|int
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|scannerOpenWithPrefix_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|getSuccess
argument_list|()
argument_list|)
return|;
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|scannerOpenWithPrefix_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|scannerOpenWithPrefix_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|scannerOpenWithPrefix_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|success
operator|!=
name|that
operator|.
name|success
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|scannerOpenWithPrefix_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|scannerOpenWithPrefix_result
name|typedOther
init|=
operator|(
name|scannerOpenWithPrefix_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"scannerOpenWithPrefix_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerOpenWithPrefix_resultStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|scannerOpenWithPrefix_resultStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|scannerOpenWithPrefix_resultStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerOpenWithPrefix_resultStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|scannerOpenWithPrefix_result
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|scannerOpenWithPrefix_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
condition|)
block|{
name|struct
operator|.
name|success
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|scannerOpenWithPrefix_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|success
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerOpenWithPrefix_resultTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|scannerOpenWithPrefix_resultTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|scannerOpenWithPrefix_resultTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerOpenWithPrefix_resultTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|scannerOpenWithPrefix_result
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|scannerOpenWithPrefix_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|scannerOpenWithPrefix_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|success
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|scannerOpenTs_args
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|scannerOpenTs_args
argument_list|,
name|scannerOpenTs_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"scannerOpenTs_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|START_ROW_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"startRow"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|COLUMNS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"columns"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|TIMESTAMP_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"timestamp"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ATTRIBUTES_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"attributes"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|(
name|short
operator|)
literal|5
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|scannerOpenTs_argsStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|scannerOpenTs_argsTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|// required
comment|/**      * Starting row in table to scan.      * Send "" (empty string) to start at the first row.      */
specifier|public
name|ByteBuffer
name|startRow
decl_stmt|;
comment|// required
comment|/**      * columns to scan. If column name is a column family, all      * columns of the specified column family are returned. It's also possible      * to pass a regex in the column qualifier.      */
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
decl_stmt|;
comment|// required
comment|/**      * timestamp      */
specifier|public
name|long
name|timestamp
decl_stmt|;
comment|// required
comment|/**      * Scan attributes      */
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
comment|/**        * name of table        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|,
comment|/**        * Starting row in table to scan.        * Send "" (empty string) to start at the first row.        */
name|START_ROW
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"startRow"
argument_list|)
block|,
comment|/**        * columns to scan. If column name is a column family, all        * columns of the specified column family are returned. It's also possible        * to pass a regex in the column qualifier.        */
name|COLUMNS
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"columns"
argument_list|)
block|,
comment|/**        * timestamp        */
name|TIMESTAMP
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|,
literal|"timestamp"
argument_list|)
block|,
comment|/**        * Scan attributes        */
name|ATTRIBUTES
argument_list|(
operator|(
name|short
operator|)
literal|5
argument_list|,
literal|"attributes"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
case|case
literal|2
case|:
comment|// START_ROW
return|return
name|START_ROW
return|;
case|case
literal|3
case|:
comment|// COLUMNS
return|return
name|COLUMNS
return|;
case|case
literal|4
case|:
comment|// TIMESTAMP
return|return
name|TIMESTAMP
return|;
case|case
literal|5
case|:
comment|// ATTRIBUTES
return|return
name|ATTRIBUTES
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__TIMESTAMP_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|START_ROW
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"startRow"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|COLUMNS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"columns"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TIMESTAMP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"timestamp"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ATTRIBUTES
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"attributes"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|MapMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|scannerOpenTs_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|scannerOpenTs_args
parameter_list|()
block|{     }
specifier|public
name|scannerOpenTs_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|startRow
operator|=
name|startRow
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|scannerOpenTs_args
parameter_list|(
name|scannerOpenTs_args
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetStartRow
argument_list|()
condition|)
block|{
name|this
operator|.
name|startRow
operator|=
name|other
operator|.
name|startRow
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetColumns
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|__this__columns
init|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ByteBuffer
name|other_element
range|:
name|other
operator|.
name|columns
control|)
block|{
name|__this__columns
operator|.
name|add
argument_list|(
name|other_element
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|columns
operator|=
name|__this__columns
expr_stmt|;
block|}
name|this
operator|.
name|timestamp
operator|=
name|other
operator|.
name|timestamp
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|__this__attributes
init|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|other_element
range|:
name|other
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ByteBuffer
name|other_element_key
init|=
name|other_element
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ByteBuffer
name|other_element_value
init|=
name|other_element
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ByteBuffer
name|__this__attributes_copy_key
init|=
name|other_element_key
decl_stmt|;
name|ByteBuffer
name|__this__attributes_copy_value
init|=
name|other_element_value
decl_stmt|;
name|__this__attributes
operator|.
name|put
argument_list|(
name|__this__attributes_copy_key
argument_list|,
name|__this__attributes_copy_value
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|attributes
operator|=
name|__this__attributes
expr_stmt|;
block|}
block|}
specifier|public
name|scannerOpenTs_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|scannerOpenTs_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|startRow
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|==
literal|null
condition|?
literal|null
else|:
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of table      */
specifier|public
name|scannerOpenTs_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|tableName
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|scannerOpenTs_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * Starting row in table to scan.      * Send "" (empty string) to start at the first row.      */
specifier|public
name|byte
index|[]
name|getStartRow
parameter_list|()
block|{
name|setStartRow
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|startRow
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|startRow
operator|==
literal|null
condition|?
literal|null
else|:
name|startRow
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForStartRow
parameter_list|()
block|{
return|return
name|startRow
return|;
block|}
comment|/**      * Starting row in table to scan.      * Send "" (empty string) to start at the first row.      */
specifier|public
name|scannerOpenTs_args
name|setStartRow
parameter_list|(
name|byte
index|[]
name|startRow
parameter_list|)
block|{
name|setStartRow
argument_list|(
name|startRow
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|startRow
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|scannerOpenTs_args
name|setStartRow
parameter_list|(
name|ByteBuffer
name|startRow
parameter_list|)
block|{
name|this
operator|.
name|startRow
operator|=
name|startRow
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetStartRow
parameter_list|()
block|{
name|this
operator|.
name|startRow
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field startRow is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetStartRow
parameter_list|()
block|{
return|return
name|this
operator|.
name|startRow
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setStartRowIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|startRow
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getColumnsSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|columns
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|columns
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|ByteBuffer
argument_list|>
name|getColumnsIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|columns
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|columns
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToColumns
parameter_list|(
name|ByteBuffer
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|columns
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|columns
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
comment|/**      * columns to scan. If column name is a column family, all      * columns of the specified column family are returned. It's also possible      * to pass a regex in the column qualifier.      */
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|getColumns
parameter_list|()
block|{
return|return
name|this
operator|.
name|columns
return|;
block|}
comment|/**      * columns to scan. If column name is a column family, all      * columns of the specified column family are returned. It's also possible      * to pass a regex in the column qualifier.      */
specifier|public
name|scannerOpenTs_args
name|setColumns
parameter_list|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|)
block|{
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetColumns
parameter_list|()
block|{
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field columns is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetColumns
parameter_list|()
block|{
return|return
name|this
operator|.
name|columns
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setColumnsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * timestamp      */
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|this
operator|.
name|timestamp
return|;
block|}
comment|/**      * timestamp      */
specifier|public
name|scannerOpenTs_args
name|setTimestamp
parameter_list|(
name|long
name|timestamp
parameter_list|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTimestamp
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTimestamp
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setTimestampIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getAttributesSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|attributes
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|attributes
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|putToAttributes
parameter_list|(
name|ByteBuffer
name|key
parameter_list|,
name|ByteBuffer
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
comment|/**      * Scan attributes      */
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|getAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|attributes
return|;
block|}
comment|/**      * Scan attributes      */
specifier|public
name|scannerOpenTs_args
name|setAttributes
parameter_list|(
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
block|{
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetAttributes
parameter_list|()
block|{
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field attributes is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|attributes
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setAttributesIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|START_ROW
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetStartRow
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setStartRow
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|COLUMNS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetColumns
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setColumns
argument_list|(
operator|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TIMESTAMP
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTimestamp
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTimestamp
argument_list|(
operator|(
name|Long
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ATTRIBUTES
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetAttributes
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setAttributes
argument_list|(
operator|(
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
case|case
name|START_ROW
case|:
return|return
name|getStartRow
argument_list|()
return|;
case|case
name|COLUMNS
case|:
return|return
name|getColumns
argument_list|()
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|getTimestamp
argument_list|()
argument_list|)
return|;
case|case
name|ATTRIBUTES
case|:
return|return
name|getAttributes
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
case|case
name|START_ROW
case|:
return|return
name|isSetStartRow
argument_list|()
return|;
case|case
name|COLUMNS
case|:
return|return
name|isSetColumns
argument_list|()
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|isSetTimestamp
argument_list|()
return|;
case|case
name|ATTRIBUTES
case|:
return|return
name|isSetAttributes
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|scannerOpenTs_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|scannerOpenTs_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|scannerOpenTs_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_startRow
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetStartRow
argument_list|()
decl_stmt|;
name|boolean
name|that_present_startRow
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetStartRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_startRow
operator|||
name|that_present_startRow
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_startRow
operator|&&
name|that_present_startRow
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|startRow
operator|.
name|equals
argument_list|(
name|that
operator|.
name|startRow
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_columns
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetColumns
argument_list|()
decl_stmt|;
name|boolean
name|that_present_columns
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetColumns
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_columns
operator|||
name|that_present_columns
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_columns
operator|&&
name|that_present_columns
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|columns
operator|.
name|equals
argument_list|(
name|that
operator|.
name|columns
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_timestamp
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_timestamp
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_timestamp
operator|||
name|that_present_timestamp
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_timestamp
operator|&&
name|that_present_timestamp
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|timestamp
operator|!=
name|that
operator|.
name|timestamp
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_attributes
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetAttributes
argument_list|()
decl_stmt|;
name|boolean
name|that_present_attributes
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetAttributes
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_attributes
operator|||
name|that_present_attributes
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_attributes
operator|&&
name|that_present_attributes
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|attributes
operator|.
name|equals
argument_list|(
name|that
operator|.
name|attributes
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|scannerOpenTs_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|scannerOpenTs_args
name|typedOther
init|=
operator|(
name|scannerOpenTs_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetStartRow
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetStartRow
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetStartRow
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|startRow
argument_list|,
name|typedOther
operator|.
name|startRow
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetColumns
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetColumns
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetColumns
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|columns
argument_list|,
name|typedOther
operator|.
name|columns
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTimestamp
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTimestamp
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTimestamp
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|timestamp
argument_list|,
name|typedOther
operator|.
name|timestamp
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetAttributes
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetAttributes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetAttributes
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|attributes
argument_list|,
name|typedOther
operator|.
name|attributes
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"scannerOpenTs_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"startRow:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|startRow
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|startRow
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"columns:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|columns
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|columns
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"timestamp:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"attributes:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|attributes
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerOpenTs_argsStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|scannerOpenTs_argsStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|scannerOpenTs_argsStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerOpenTs_argsStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|scannerOpenTs_args
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|scannerOpenTs_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// START_ROW
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|startRow
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setStartRowIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// COLUMNS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list498
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|(
name|_list498
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i499
init|=
literal|0
init|;
name|_i499
operator|<
name|_list498
operator|.
name|size
condition|;
operator|++
name|_i499
control|)
block|{
name|ByteBuffer
name|_elem500
decl_stmt|;
comment|// optional
name|_elem500
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|columns
operator|.
name|add
argument_list|(
name|_elem500
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setColumnsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// TIMESTAMP
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
condition|)
block|{
name|struct
operator|.
name|timestamp
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|5
case|:
comment|// ATTRIBUTES
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map501
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|(
literal|2
operator|*
name|_map501
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i502
init|=
literal|0
init|;
name|_i502
operator|<
name|_map501
operator|.
name|size
condition|;
operator|++
name|_i502
control|)
block|{
name|ByteBuffer
name|_key503
decl_stmt|;
comment|// required
name|ByteBuffer
name|_val504
decl_stmt|;
comment|// required
name|_key503
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val504
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|_key503
argument_list|,
name|_val504
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setAttributesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|scannerOpenTs_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|startRow
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|START_ROW_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|startRow
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|columns
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|COLUMNS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|struct
operator|.
name|columns
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ByteBuffer
name|_iter505
range|:
name|struct
operator|.
name|columns
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter505
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TIMESTAMP_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI64
argument_list|(
name|struct
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|attributes
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ATTRIBUTES_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|struct
operator|.
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|_iter506
range|:
name|struct
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter506
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter506
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerOpenTs_argsTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|scannerOpenTs_argsTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|scannerOpenTs_argsTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerOpenTs_argsTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|scannerOpenTs_args
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|scannerOpenTs_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetStartRow
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetColumns
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetTimestamp
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|5
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetStartRow
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|startRow
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetColumns
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|columns
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ByteBuffer
name|_iter507
range|:
name|struct
operator|.
name|columns
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter507
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetTimestamp
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI64
argument_list|(
name|struct
operator|.
name|timestamp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|_iter508
range|:
name|struct
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter508
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter508
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|scannerOpenTs_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|startRow
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setStartRowIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|2
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list509
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|(
name|_list509
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i510
init|=
literal|0
init|;
name|_i510
operator|<
name|_list509
operator|.
name|size
condition|;
operator|++
name|_i510
control|)
block|{
name|ByteBuffer
name|_elem511
decl_stmt|;
comment|// optional
name|_elem511
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|columns
operator|.
name|add
argument_list|(
name|_elem511
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setColumnsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|3
argument_list|)
condition|)
block|{
name|struct
operator|.
name|timestamp
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|4
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map512
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|(
literal|2
operator|*
name|_map512
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i513
init|=
literal|0
init|;
name|_i513
operator|<
name|_map512
operator|.
name|size
condition|;
operator|++
name|_i513
control|)
block|{
name|ByteBuffer
name|_key514
decl_stmt|;
comment|// required
name|ByteBuffer
name|_val515
decl_stmt|;
comment|// required
name|_key514
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val515
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|_key514
argument_list|,
name|_val515
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setAttributesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|scannerOpenTs_result
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|scannerOpenTs_result
argument_list|,
name|scannerOpenTs_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"scannerOpenTs_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|scannerOpenTs_resultStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|scannerOpenTs_resultTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|success
decl_stmt|;
comment|// required
specifier|public
name|IOError
name|io
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__SUCCESS_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
literal|"ScannerID"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|scannerOpenTs_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|scannerOpenTs_result
parameter_list|()
block|{     }
specifier|public
name|scannerOpenTs_result
parameter_list|(
name|int
name|success
parameter_list|,
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|scannerOpenTs_result
parameter_list|(
name|scannerOpenTs_result
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|other
operator|.
name|success
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|scannerOpenTs_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|scannerOpenTs_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|setSuccessIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|scannerOpenTs_result
name|setSuccess
parameter_list|(
name|int
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|scannerOpenTs_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|getSuccess
argument_list|()
argument_list|)
return|;
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|scannerOpenTs_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|scannerOpenTs_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|scannerOpenTs_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|success
operator|!=
name|that
operator|.
name|success
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|scannerOpenTs_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|scannerOpenTs_result
name|typedOther
init|=
operator|(
name|scannerOpenTs_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"scannerOpenTs_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerOpenTs_resultStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|scannerOpenTs_resultStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|scannerOpenTs_resultStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerOpenTs_resultStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|scannerOpenTs_result
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|scannerOpenTs_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
condition|)
block|{
name|struct
operator|.
name|success
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|scannerOpenTs_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|success
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerOpenTs_resultTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|scannerOpenTs_resultTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|scannerOpenTs_resultTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerOpenTs_resultTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|scannerOpenTs_result
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|scannerOpenTs_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|scannerOpenTs_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|success
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|scannerOpenWithStopTs_args
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|scannerOpenWithStopTs_args
argument_list|,
name|scannerOpenWithStopTs_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"scannerOpenWithStopTs_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|START_ROW_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"startRow"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|STOP_ROW_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"stopRow"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|COLUMNS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"columns"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|TIMESTAMP_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"timestamp"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
argument_list|,
operator|(
name|short
operator|)
literal|5
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ATTRIBUTES_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"attributes"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|(
name|short
operator|)
literal|6
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|scannerOpenWithStopTs_argsStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|scannerOpenWithStopTs_argsTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|// required
comment|/**      * Starting row in table to scan.      * Send "" (empty string) to start at the first row.      */
specifier|public
name|ByteBuffer
name|startRow
decl_stmt|;
comment|// required
comment|/**      * row to stop scanning on. This row is *not* included in the      * scanner's results      */
specifier|public
name|ByteBuffer
name|stopRow
decl_stmt|;
comment|// required
comment|/**      * columns to scan. If column name is a column family, all      * columns of the specified column family are returned. It's also possible      * to pass a regex in the column qualifier.      */
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
decl_stmt|;
comment|// required
comment|/**      * timestamp      */
specifier|public
name|long
name|timestamp
decl_stmt|;
comment|// required
comment|/**      * Scan attributes      */
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
comment|/**        * name of table        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|,
comment|/**        * Starting row in table to scan.        * Send "" (empty string) to start at the first row.        */
name|START_ROW
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"startRow"
argument_list|)
block|,
comment|/**        * row to stop scanning on. This row is *not* included in the        * scanner's results        */
name|STOP_ROW
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"stopRow"
argument_list|)
block|,
comment|/**        * columns to scan. If column name is a column family, all        * columns of the specified column family are returned. It's also possible        * to pass a regex in the column qualifier.        */
name|COLUMNS
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|,
literal|"columns"
argument_list|)
block|,
comment|/**        * timestamp        */
name|TIMESTAMP
argument_list|(
operator|(
name|short
operator|)
literal|5
argument_list|,
literal|"timestamp"
argument_list|)
block|,
comment|/**        * Scan attributes        */
name|ATTRIBUTES
argument_list|(
operator|(
name|short
operator|)
literal|6
argument_list|,
literal|"attributes"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
case|case
literal|2
case|:
comment|// START_ROW
return|return
name|START_ROW
return|;
case|case
literal|3
case|:
comment|// STOP_ROW
return|return
name|STOP_ROW
return|;
case|case
literal|4
case|:
comment|// COLUMNS
return|return
name|COLUMNS
return|;
case|case
literal|5
case|:
comment|// TIMESTAMP
return|return
name|TIMESTAMP
return|;
case|case
literal|6
case|:
comment|// ATTRIBUTES
return|return
name|ATTRIBUTES
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__TIMESTAMP_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|START_ROW
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"startRow"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|STOP_ROW
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"stopRow"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|COLUMNS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"columns"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TIMESTAMP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"timestamp"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ATTRIBUTES
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"attributes"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|MapMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|scannerOpenWithStopTs_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|scannerOpenWithStopTs_args
parameter_list|()
block|{     }
specifier|public
name|scannerOpenWithStopTs_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|ByteBuffer
name|stopRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|startRow
operator|=
name|startRow
expr_stmt|;
name|this
operator|.
name|stopRow
operator|=
name|stopRow
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|scannerOpenWithStopTs_args
parameter_list|(
name|scannerOpenWithStopTs_args
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetStartRow
argument_list|()
condition|)
block|{
name|this
operator|.
name|startRow
operator|=
name|other
operator|.
name|startRow
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetStopRow
argument_list|()
condition|)
block|{
name|this
operator|.
name|stopRow
operator|=
name|other
operator|.
name|stopRow
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetColumns
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|__this__columns
init|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ByteBuffer
name|other_element
range|:
name|other
operator|.
name|columns
control|)
block|{
name|__this__columns
operator|.
name|add
argument_list|(
name|other_element
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|columns
operator|=
name|__this__columns
expr_stmt|;
block|}
name|this
operator|.
name|timestamp
operator|=
name|other
operator|.
name|timestamp
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|__this__attributes
init|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|other_element
range|:
name|other
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ByteBuffer
name|other_element_key
init|=
name|other_element
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ByteBuffer
name|other_element_value
init|=
name|other_element
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ByteBuffer
name|__this__attributes_copy_key
init|=
name|other_element_key
decl_stmt|;
name|ByteBuffer
name|__this__attributes_copy_value
init|=
name|other_element_value
decl_stmt|;
name|__this__attributes
operator|.
name|put
argument_list|(
name|__this__attributes_copy_key
argument_list|,
name|__this__attributes_copy_value
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|attributes
operator|=
name|__this__attributes
expr_stmt|;
block|}
block|}
specifier|public
name|scannerOpenWithStopTs_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|scannerOpenWithStopTs_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|startRow
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|stopRow
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|==
literal|null
condition|?
literal|null
else|:
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of table      */
specifier|public
name|scannerOpenWithStopTs_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|tableName
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|scannerOpenWithStopTs_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * Starting row in table to scan.      * Send "" (empty string) to start at the first row.      */
specifier|public
name|byte
index|[]
name|getStartRow
parameter_list|()
block|{
name|setStartRow
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|startRow
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|startRow
operator|==
literal|null
condition|?
literal|null
else|:
name|startRow
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForStartRow
parameter_list|()
block|{
return|return
name|startRow
return|;
block|}
comment|/**      * Starting row in table to scan.      * Send "" (empty string) to start at the first row.      */
specifier|public
name|scannerOpenWithStopTs_args
name|setStartRow
parameter_list|(
name|byte
index|[]
name|startRow
parameter_list|)
block|{
name|setStartRow
argument_list|(
name|startRow
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|startRow
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|scannerOpenWithStopTs_args
name|setStartRow
parameter_list|(
name|ByteBuffer
name|startRow
parameter_list|)
block|{
name|this
operator|.
name|startRow
operator|=
name|startRow
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetStartRow
parameter_list|()
block|{
name|this
operator|.
name|startRow
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field startRow is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetStartRow
parameter_list|()
block|{
return|return
name|this
operator|.
name|startRow
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setStartRowIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|startRow
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * row to stop scanning on. This row is *not* included in the      * scanner's results      */
specifier|public
name|byte
index|[]
name|getStopRow
parameter_list|()
block|{
name|setStopRow
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|stopRow
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|stopRow
operator|==
literal|null
condition|?
literal|null
else|:
name|stopRow
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForStopRow
parameter_list|()
block|{
return|return
name|stopRow
return|;
block|}
comment|/**      * row to stop scanning on. This row is *not* included in the      * scanner's results      */
specifier|public
name|scannerOpenWithStopTs_args
name|setStopRow
parameter_list|(
name|byte
index|[]
name|stopRow
parameter_list|)
block|{
name|setStopRow
argument_list|(
name|stopRow
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|stopRow
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|scannerOpenWithStopTs_args
name|setStopRow
parameter_list|(
name|ByteBuffer
name|stopRow
parameter_list|)
block|{
name|this
operator|.
name|stopRow
operator|=
name|stopRow
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetStopRow
parameter_list|()
block|{
name|this
operator|.
name|stopRow
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field stopRow is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetStopRow
parameter_list|()
block|{
return|return
name|this
operator|.
name|stopRow
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setStopRowIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|stopRow
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getColumnsSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|columns
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|columns
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|ByteBuffer
argument_list|>
name|getColumnsIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|columns
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|columns
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToColumns
parameter_list|(
name|ByteBuffer
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|columns
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|columns
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
comment|/**      * columns to scan. If column name is a column family, all      * columns of the specified column family are returned. It's also possible      * to pass a regex in the column qualifier.      */
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|getColumns
parameter_list|()
block|{
return|return
name|this
operator|.
name|columns
return|;
block|}
comment|/**      * columns to scan. If column name is a column family, all      * columns of the specified column family are returned. It's also possible      * to pass a regex in the column qualifier.      */
specifier|public
name|scannerOpenWithStopTs_args
name|setColumns
parameter_list|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|)
block|{
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetColumns
parameter_list|()
block|{
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field columns is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetColumns
parameter_list|()
block|{
return|return
name|this
operator|.
name|columns
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setColumnsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * timestamp      */
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|this
operator|.
name|timestamp
return|;
block|}
comment|/**      * timestamp      */
specifier|public
name|scannerOpenWithStopTs_args
name|setTimestamp
parameter_list|(
name|long
name|timestamp
parameter_list|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTimestamp
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTimestamp
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setTimestampIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__TIMESTAMP_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getAttributesSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|attributes
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|attributes
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|putToAttributes
parameter_list|(
name|ByteBuffer
name|key
parameter_list|,
name|ByteBuffer
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
comment|/**      * Scan attributes      */
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|getAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|attributes
return|;
block|}
comment|/**      * Scan attributes      */
specifier|public
name|scannerOpenWithStopTs_args
name|setAttributes
parameter_list|(
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
block|{
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetAttributes
parameter_list|()
block|{
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field attributes is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|attributes
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setAttributesIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|START_ROW
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetStartRow
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setStartRow
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|STOP_ROW
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetStopRow
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setStopRow
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|COLUMNS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetColumns
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setColumns
argument_list|(
operator|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TIMESTAMP
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTimestamp
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTimestamp
argument_list|(
operator|(
name|Long
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ATTRIBUTES
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetAttributes
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setAttributes
argument_list|(
operator|(
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
case|case
name|START_ROW
case|:
return|return
name|getStartRow
argument_list|()
return|;
case|case
name|STOP_ROW
case|:
return|return
name|getStopRow
argument_list|()
return|;
case|case
name|COLUMNS
case|:
return|return
name|getColumns
argument_list|()
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|getTimestamp
argument_list|()
argument_list|)
return|;
case|case
name|ATTRIBUTES
case|:
return|return
name|getAttributes
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
case|case
name|START_ROW
case|:
return|return
name|isSetStartRow
argument_list|()
return|;
case|case
name|STOP_ROW
case|:
return|return
name|isSetStopRow
argument_list|()
return|;
case|case
name|COLUMNS
case|:
return|return
name|isSetColumns
argument_list|()
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|isSetTimestamp
argument_list|()
return|;
case|case
name|ATTRIBUTES
case|:
return|return
name|isSetAttributes
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|scannerOpenWithStopTs_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|scannerOpenWithStopTs_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|scannerOpenWithStopTs_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_startRow
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetStartRow
argument_list|()
decl_stmt|;
name|boolean
name|that_present_startRow
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetStartRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_startRow
operator|||
name|that_present_startRow
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_startRow
operator|&&
name|that_present_startRow
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|startRow
operator|.
name|equals
argument_list|(
name|that
operator|.
name|startRow
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_stopRow
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetStopRow
argument_list|()
decl_stmt|;
name|boolean
name|that_present_stopRow
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetStopRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_stopRow
operator|||
name|that_present_stopRow
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_stopRow
operator|&&
name|that_present_stopRow
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|stopRow
operator|.
name|equals
argument_list|(
name|that
operator|.
name|stopRow
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_columns
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetColumns
argument_list|()
decl_stmt|;
name|boolean
name|that_present_columns
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetColumns
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_columns
operator|||
name|that_present_columns
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_columns
operator|&&
name|that_present_columns
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|columns
operator|.
name|equals
argument_list|(
name|that
operator|.
name|columns
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_timestamp
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_timestamp
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_timestamp
operator|||
name|that_present_timestamp
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_timestamp
operator|&&
name|that_present_timestamp
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|timestamp
operator|!=
name|that
operator|.
name|timestamp
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_attributes
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetAttributes
argument_list|()
decl_stmt|;
name|boolean
name|that_present_attributes
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetAttributes
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_attributes
operator|||
name|that_present_attributes
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_attributes
operator|&&
name|that_present_attributes
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|attributes
operator|.
name|equals
argument_list|(
name|that
operator|.
name|attributes
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|scannerOpenWithStopTs_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|scannerOpenWithStopTs_args
name|typedOther
init|=
operator|(
name|scannerOpenWithStopTs_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetStartRow
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetStartRow
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetStartRow
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|startRow
argument_list|,
name|typedOther
operator|.
name|startRow
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetStopRow
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetStopRow
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetStopRow
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|stopRow
argument_list|,
name|typedOther
operator|.
name|stopRow
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetColumns
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetColumns
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetColumns
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|columns
argument_list|,
name|typedOther
operator|.
name|columns
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTimestamp
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTimestamp
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTimestamp
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|timestamp
argument_list|,
name|typedOther
operator|.
name|timestamp
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetAttributes
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetAttributes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetAttributes
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|attributes
argument_list|,
name|typedOther
operator|.
name|attributes
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"scannerOpenWithStopTs_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"startRow:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|startRow
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|startRow
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"stopRow:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|stopRow
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|stopRow
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"columns:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|columns
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|columns
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"timestamp:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"attributes:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|attributes
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerOpenWithStopTs_argsStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|scannerOpenWithStopTs_argsStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|scannerOpenWithStopTs_argsStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerOpenWithStopTs_argsStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|scannerOpenWithStopTs_args
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|scannerOpenWithStopTs_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// START_ROW
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|startRow
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setStartRowIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// STOP_ROW
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|stopRow
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setStopRowIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// COLUMNS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list516
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|(
name|_list516
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i517
init|=
literal|0
init|;
name|_i517
operator|<
name|_list516
operator|.
name|size
condition|;
operator|++
name|_i517
control|)
block|{
name|ByteBuffer
name|_elem518
decl_stmt|;
comment|// optional
name|_elem518
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|columns
operator|.
name|add
argument_list|(
name|_elem518
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setColumnsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|5
case|:
comment|// TIMESTAMP
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
condition|)
block|{
name|struct
operator|.
name|timestamp
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|6
case|:
comment|// ATTRIBUTES
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map519
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|(
literal|2
operator|*
name|_map519
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i520
init|=
literal|0
init|;
name|_i520
operator|<
name|_map519
operator|.
name|size
condition|;
operator|++
name|_i520
control|)
block|{
name|ByteBuffer
name|_key521
decl_stmt|;
comment|// required
name|ByteBuffer
name|_val522
decl_stmt|;
comment|// required
name|_key521
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val522
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|_key521
argument_list|,
name|_val522
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setAttributesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|scannerOpenWithStopTs_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|startRow
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|START_ROW_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|startRow
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|stopRow
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|STOP_ROW_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|stopRow
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|columns
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|COLUMNS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|struct
operator|.
name|columns
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ByteBuffer
name|_iter523
range|:
name|struct
operator|.
name|columns
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter523
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TIMESTAMP_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI64
argument_list|(
name|struct
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|attributes
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ATTRIBUTES_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|struct
operator|.
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|_iter524
range|:
name|struct
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter524
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter524
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerOpenWithStopTs_argsTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|scannerOpenWithStopTs_argsTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|scannerOpenWithStopTs_argsTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerOpenWithStopTs_argsTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|scannerOpenWithStopTs_args
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|scannerOpenWithStopTs_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetStartRow
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetStopRow
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetColumns
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetTimestamp
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|6
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetStartRow
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|startRow
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetStopRow
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|stopRow
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetColumns
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|columns
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ByteBuffer
name|_iter525
range|:
name|struct
operator|.
name|columns
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter525
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetTimestamp
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI64
argument_list|(
name|struct
operator|.
name|timestamp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|_iter526
range|:
name|struct
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter526
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter526
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|scannerOpenWithStopTs_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|6
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|startRow
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setStartRowIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|struct
operator|.
name|stopRow
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setStopRowIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|3
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list527
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|(
name|_list527
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i528
init|=
literal|0
init|;
name|_i528
operator|<
name|_list527
operator|.
name|size
condition|;
operator|++
name|_i528
control|)
block|{
name|ByteBuffer
name|_elem529
decl_stmt|;
comment|// optional
name|_elem529
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|columns
operator|.
name|add
argument_list|(
name|_elem529
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setColumnsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|4
argument_list|)
condition|)
block|{
name|struct
operator|.
name|timestamp
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTimestampIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|5
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map530
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|(
literal|2
operator|*
name|_map530
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i531
init|=
literal|0
init|;
name|_i531
operator|<
name|_map530
operator|.
name|size
condition|;
operator|++
name|_i531
control|)
block|{
name|ByteBuffer
name|_key532
decl_stmt|;
comment|// required
name|ByteBuffer
name|_val533
decl_stmt|;
comment|// required
name|_key532
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val533
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|_key532
argument_list|,
name|_val533
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setAttributesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|scannerOpenWithStopTs_result
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|scannerOpenWithStopTs_result
argument_list|,
name|scannerOpenWithStopTs_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"scannerOpenWithStopTs_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|scannerOpenWithStopTs_resultStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|scannerOpenWithStopTs_resultTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|success
decl_stmt|;
comment|// required
specifier|public
name|IOError
name|io
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__SUCCESS_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
literal|"ScannerID"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|scannerOpenWithStopTs_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|scannerOpenWithStopTs_result
parameter_list|()
block|{     }
specifier|public
name|scannerOpenWithStopTs_result
parameter_list|(
name|int
name|success
parameter_list|,
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|scannerOpenWithStopTs_result
parameter_list|(
name|scannerOpenWithStopTs_result
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|other
operator|.
name|success
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|scannerOpenWithStopTs_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|scannerOpenWithStopTs_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|setSuccessIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|scannerOpenWithStopTs_result
name|setSuccess
parameter_list|(
name|int
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|scannerOpenWithStopTs_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|getSuccess
argument_list|()
argument_list|)
return|;
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|scannerOpenWithStopTs_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|scannerOpenWithStopTs_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|scannerOpenWithStopTs_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|success
operator|!=
name|that
operator|.
name|success
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|scannerOpenWithStopTs_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|scannerOpenWithStopTs_result
name|typedOther
init|=
operator|(
name|scannerOpenWithStopTs_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"scannerOpenWithStopTs_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerOpenWithStopTs_resultStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|scannerOpenWithStopTs_resultStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|scannerOpenWithStopTs_resultStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerOpenWithStopTs_resultStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|scannerOpenWithStopTs_result
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|scannerOpenWithStopTs_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
condition|)
block|{
name|struct
operator|.
name|success
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|scannerOpenWithStopTs_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|success
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerOpenWithStopTs_resultTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|scannerOpenWithStopTs_resultTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|scannerOpenWithStopTs_resultTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerOpenWithStopTs_resultTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|scannerOpenWithStopTs_result
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|scannerOpenWithStopTs_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|scannerOpenWithStopTs_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|success
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|scannerGet_args
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|scannerGet_args
argument_list|,
name|scannerGet_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"scannerGet_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ID_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"id"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|scannerGet_argsStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|scannerGet_argsTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * id of a scanner returned by scannerOpen      */
specifier|public
name|int
name|id
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
comment|/**        * id of a scanner returned by scannerOpen        */
name|ID
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"id"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// ID
return|return
name|ID
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__ID_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ID
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"id"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
literal|"ScannerID"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|scannerGet_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|scannerGet_args
parameter_list|()
block|{     }
specifier|public
name|scannerGet_args
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|setIdIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|scannerGet_args
parameter_list|(
name|scannerGet_args
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|other
operator|.
name|id
expr_stmt|;
block|}
specifier|public
name|scannerGet_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|scannerGet_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|setIdIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|id
operator|=
literal|0
expr_stmt|;
block|}
comment|/**      * id of a scanner returned by scannerOpen      */
specifier|public
name|int
name|getId
parameter_list|()
block|{
return|return
name|this
operator|.
name|id
return|;
block|}
comment|/**      * id of a scanner returned by scannerOpen      */
specifier|public
name|scannerGet_args
name|setId
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|setIdIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetId
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__ID_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field id is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetId
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__ID_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setIdIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__ID_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|ID
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetId
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setId
argument_list|(
operator|(
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|ID
case|:
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|getId
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|ID
case|:
return|return
name|isSetId
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|scannerGet_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|scannerGet_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|scannerGet_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_id
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_id
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_id
operator|||
name|that_present_id
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_id
operator|&&
name|that_present_id
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|id
operator|!=
name|that
operator|.
name|id
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|scannerGet_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|scannerGet_args
name|typedOther
init|=
operator|(
name|scannerGet_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetId
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetId
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|id
argument_list|,
name|typedOther
operator|.
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"scannerGet_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"id:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|id
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
comment|// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
name|__isset_bit_vector
operator|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerGet_argsStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|scannerGet_argsStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|scannerGet_argsStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerGet_argsStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|scannerGet_args
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|scannerGet_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// ID
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
condition|)
block|{
name|struct
operator|.
name|id
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setIdIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|scannerGet_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ID_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|id
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerGet_argsTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|scannerGet_argsTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|scannerGet_argsTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerGet_argsTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|scannerGet_args
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|scannerGet_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetId
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetId
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|scannerGet_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|id
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setIdIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|scannerGet_result
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|scannerGet_result
argument_list|,
name|scannerGet_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"scannerGet_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|IA_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"ia"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|scannerGet_resultStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|scannerGet_resultTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
decl_stmt|;
comment|// required
specifier|public
name|IOError
name|io
decl_stmt|;
comment|// required
specifier|public
name|IllegalArgument
name|ia
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|,
name|IA
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"ia"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
case|case
literal|2
case|:
comment|// IA
return|return
name|IA
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|TRowResult
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IA
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"ia"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|scannerGet_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|scannerGet_result
parameter_list|()
block|{     }
specifier|public
name|scannerGet_result
parameter_list|(
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
parameter_list|,
name|IOError
name|io
parameter_list|,
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|this
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|scannerGet_result
parameter_list|(
name|scannerGet_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|TRowResult
argument_list|>
name|__this__success
init|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TRowResult
name|other_element
range|:
name|other
operator|.
name|success
control|)
block|{
name|__this__success
operator|.
name|add
argument_list|(
operator|new
name|TRowResult
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|=
name|__this__success
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetIa
argument_list|()
condition|)
block|{
name|this
operator|.
name|ia
operator|=
operator|new
name|IllegalArgument
argument_list|(
name|other
operator|.
name|ia
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|scannerGet_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|scannerGet_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|ia
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|TRowResult
argument_list|>
name|getSuccessIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|success
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSuccess
parameter_list|(
name|TRowResult
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|scannerGet_result
name|setSuccess
parameter_list|(
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|scannerGet_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|IllegalArgument
name|getIa
parameter_list|()
block|{
return|return
name|this
operator|.
name|ia
return|;
block|}
specifier|public
name|scannerGet_result
name|setIa
parameter_list|(
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|this
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIa
parameter_list|()
block|{
name|this
operator|.
name|ia
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field ia is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIa
parameter_list|()
block|{
return|return
name|this
operator|.
name|ia
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIaIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|ia
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|List
argument_list|<
name|TRowResult
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IA
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIa
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIa
argument_list|(
operator|(
name|IllegalArgument
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
case|case
name|IA
case|:
return|return
name|getIa
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
case|case
name|IA
case|:
return|return
name|isSetIa
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|scannerGet_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|scannerGet_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|scannerGet_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_ia
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIa
argument_list|()
decl_stmt|;
name|boolean
name|that_present_ia
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIa
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_ia
operator|||
name|that_present_ia
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_ia
operator|&&
name|that_present_ia
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|ia
operator|.
name|equals
argument_list|(
name|that
operator|.
name|ia
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|scannerGet_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|scannerGet_result
name|typedOther
init|=
operator|(
name|scannerGet_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIa
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIa
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIa
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|ia
argument_list|,
name|typedOther
operator|.
name|ia
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"scannerGet_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"ia:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|ia
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|ia
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerGet_resultStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|scannerGet_resultStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|scannerGet_resultStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerGet_resultStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|scannerGet_result
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|scannerGet_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list534
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|(
name|_list534
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i535
init|=
literal|0
init|;
name|_i535
operator|<
name|_list534
operator|.
name|size
condition|;
operator|++
name|_i535
control|)
block|{
name|TRowResult
name|_elem536
decl_stmt|;
comment|// optional
name|_elem536
operator|=
operator|new
name|TRowResult
argument_list|()
expr_stmt|;
name|_elem536
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem536
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// IA
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|ia
operator|=
operator|new
name|IllegalArgument
argument_list|()
expr_stmt|;
name|struct
operator|.
name|ia
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIaIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|scannerGet_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|success
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|struct
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TRowResult
name|_iter537
range|:
name|struct
operator|.
name|success
control|)
block|{
name|_iter537
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|ia
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IA_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|ia
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerGet_resultTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|scannerGet_resultTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|scannerGet_resultTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerGet_resultTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|scannerGet_result
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|scannerGet_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIa
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|3
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TRowResult
name|_iter538
range|:
name|struct
operator|.
name|success
control|)
block|{
name|_iter538
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIa
argument_list|()
condition|)
block|{
name|struct
operator|.
name|ia
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|scannerGet_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list539
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|(
name|_list539
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i540
init|=
literal|0
init|;
name|_i540
operator|<
name|_list539
operator|.
name|size
condition|;
operator|++
name|_i540
control|)
block|{
name|TRowResult
name|_elem541
decl_stmt|;
comment|// optional
name|_elem541
operator|=
operator|new
name|TRowResult
argument_list|()
expr_stmt|;
name|_elem541
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem541
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|struct
operator|.
name|ia
operator|=
operator|new
name|IllegalArgument
argument_list|()
expr_stmt|;
name|struct
operator|.
name|ia
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIaIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|scannerGetList_args
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|scannerGetList_args
argument_list|,
name|scannerGetList_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"scannerGetList_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ID_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"id"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|NB_ROWS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"nbRows"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|scannerGetList_argsStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|scannerGetList_argsTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * id of a scanner returned by scannerOpen      */
specifier|public
name|int
name|id
decl_stmt|;
comment|// required
comment|/**      * number of results to return      */
specifier|public
name|int
name|nbRows
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
comment|/**        * id of a scanner returned by scannerOpen        */
name|ID
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"id"
argument_list|)
block|,
comment|/**        * number of results to return        */
name|NB_ROWS
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"nbRows"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// ID
return|return
name|ID
return|;
case|case
literal|2
case|:
comment|// NB_ROWS
return|return
name|NB_ROWS
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__ID_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|__NBROWS_ISSET_ID
init|=
literal|1
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ID
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"id"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
literal|"ScannerID"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|NB_ROWS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"nbRows"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|scannerGetList_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|scannerGetList_args
parameter_list|()
block|{     }
specifier|public
name|scannerGetList_args
parameter_list|(
name|int
name|id
parameter_list|,
name|int
name|nbRows
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|setIdIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|nbRows
operator|=
name|nbRows
expr_stmt|;
name|setNbRowsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|scannerGetList_args
parameter_list|(
name|scannerGetList_args
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|other
operator|.
name|id
expr_stmt|;
name|this
operator|.
name|nbRows
operator|=
name|other
operator|.
name|nbRows
expr_stmt|;
block|}
specifier|public
name|scannerGetList_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|scannerGetList_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|setIdIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|id
operator|=
literal|0
expr_stmt|;
name|setNbRowsIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|nbRows
operator|=
literal|0
expr_stmt|;
block|}
comment|/**      * id of a scanner returned by scannerOpen      */
specifier|public
name|int
name|getId
parameter_list|()
block|{
return|return
name|this
operator|.
name|id
return|;
block|}
comment|/**      * id of a scanner returned by scannerOpen      */
specifier|public
name|scannerGetList_args
name|setId
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|setIdIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetId
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__ID_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field id is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetId
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__ID_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setIdIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__ID_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * number of results to return      */
specifier|public
name|int
name|getNbRows
parameter_list|()
block|{
return|return
name|this
operator|.
name|nbRows
return|;
block|}
comment|/**      * number of results to return      */
specifier|public
name|scannerGetList_args
name|setNbRows
parameter_list|(
name|int
name|nbRows
parameter_list|)
block|{
name|this
operator|.
name|nbRows
operator|=
name|nbRows
expr_stmt|;
name|setNbRowsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetNbRows
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__NBROWS_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field nbRows is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetNbRows
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__NBROWS_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setNbRowsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__NBROWS_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|ID
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetId
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setId
argument_list|(
operator|(
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|NB_ROWS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetNbRows
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setNbRows
argument_list|(
operator|(
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|ID
case|:
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|getId
argument_list|()
argument_list|)
return|;
case|case
name|NB_ROWS
case|:
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|getNbRows
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|ID
case|:
return|return
name|isSetId
argument_list|()
return|;
case|case
name|NB_ROWS
case|:
return|return
name|isSetNbRows
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|scannerGetList_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|scannerGetList_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|scannerGetList_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_id
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_id
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_id
operator|||
name|that_present_id
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_id
operator|&&
name|that_present_id
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|id
operator|!=
name|that
operator|.
name|id
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_nbRows
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_nbRows
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_nbRows
operator|||
name|that_present_nbRows
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_nbRows
operator|&&
name|that_present_nbRows
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|nbRows
operator|!=
name|that
operator|.
name|nbRows
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|scannerGetList_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|scannerGetList_args
name|typedOther
init|=
operator|(
name|scannerGetList_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetId
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetId
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|id
argument_list|,
name|typedOther
operator|.
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetNbRows
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetNbRows
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetNbRows
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|nbRows
argument_list|,
name|typedOther
operator|.
name|nbRows
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"scannerGetList_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"id:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|id
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"nbRows:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|nbRows
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerGetList_argsStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|scannerGetList_argsStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|scannerGetList_argsStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerGetList_argsStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|scannerGetList_args
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|scannerGetList_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// ID
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
condition|)
block|{
name|struct
operator|.
name|id
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setIdIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// NB_ROWS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
condition|)
block|{
name|struct
operator|.
name|nbRows
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setNbRowsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|scannerGetList_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ID_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|id
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|NB_ROWS_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|nbRows
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerGetList_argsTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|scannerGetList_argsTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|scannerGetList_argsTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerGetList_argsTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|scannerGetList_args
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|scannerGetList_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetId
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetNbRows
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetId
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetNbRows
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|nbRows
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|scannerGetList_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|id
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setIdIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|nbRows
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setNbRowsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|scannerGetList_result
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|scannerGetList_result
argument_list|,
name|scannerGetList_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"scannerGetList_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|IA_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"ia"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|scannerGetList_resultStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|scannerGetList_resultTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
decl_stmt|;
comment|// required
specifier|public
name|IOError
name|io
decl_stmt|;
comment|// required
specifier|public
name|IllegalArgument
name|ia
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|,
name|IA
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"ia"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
case|case
literal|2
case|:
comment|// IA
return|return
name|IA
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|TRowResult
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IA
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"ia"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|scannerGetList_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|scannerGetList_result
parameter_list|()
block|{     }
specifier|public
name|scannerGetList_result
parameter_list|(
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
parameter_list|,
name|IOError
name|io
parameter_list|,
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|this
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|scannerGetList_result
parameter_list|(
name|scannerGetList_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|TRowResult
argument_list|>
name|__this__success
init|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TRowResult
name|other_element
range|:
name|other
operator|.
name|success
control|)
block|{
name|__this__success
operator|.
name|add
argument_list|(
operator|new
name|TRowResult
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|=
name|__this__success
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetIa
argument_list|()
condition|)
block|{
name|this
operator|.
name|ia
operator|=
operator|new
name|IllegalArgument
argument_list|(
name|other
operator|.
name|ia
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|scannerGetList_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|scannerGetList_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|ia
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|TRowResult
argument_list|>
name|getSuccessIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|success
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSuccess
parameter_list|(
name|TRowResult
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|scannerGetList_result
name|setSuccess
parameter_list|(
name|List
argument_list|<
name|TRowResult
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|scannerGetList_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|IllegalArgument
name|getIa
parameter_list|()
block|{
return|return
name|this
operator|.
name|ia
return|;
block|}
specifier|public
name|scannerGetList_result
name|setIa
parameter_list|(
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|this
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIa
parameter_list|()
block|{
name|this
operator|.
name|ia
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field ia is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIa
parameter_list|()
block|{
return|return
name|this
operator|.
name|ia
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIaIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|ia
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|List
argument_list|<
name|TRowResult
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IA
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIa
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIa
argument_list|(
operator|(
name|IllegalArgument
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
case|case
name|IA
case|:
return|return
name|getIa
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
case|case
name|IA
case|:
return|return
name|isSetIa
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|scannerGetList_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|scannerGetList_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|scannerGetList_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_ia
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIa
argument_list|()
decl_stmt|;
name|boolean
name|that_present_ia
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIa
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_ia
operator|||
name|that_present_ia
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_ia
operator|&&
name|that_present_ia
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|ia
operator|.
name|equals
argument_list|(
name|that
operator|.
name|ia
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|scannerGetList_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|scannerGetList_result
name|typedOther
init|=
operator|(
name|scannerGetList_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIa
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIa
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIa
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|ia
argument_list|,
name|typedOther
operator|.
name|ia
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"scannerGetList_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"ia:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|ia
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|ia
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerGetList_resultStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|scannerGetList_resultStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|scannerGetList_resultStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerGetList_resultStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|scannerGetList_result
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|scannerGetList_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list542
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|(
name|_list542
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i543
init|=
literal|0
init|;
name|_i543
operator|<
name|_list542
operator|.
name|size
condition|;
operator|++
name|_i543
control|)
block|{
name|TRowResult
name|_elem544
decl_stmt|;
comment|// optional
name|_elem544
operator|=
operator|new
name|TRowResult
argument_list|()
expr_stmt|;
name|_elem544
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem544
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// IA
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|ia
operator|=
operator|new
name|IllegalArgument
argument_list|()
expr_stmt|;
name|struct
operator|.
name|ia
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIaIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|scannerGetList_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|success
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|struct
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TRowResult
name|_iter545
range|:
name|struct
operator|.
name|success
control|)
block|{
name|_iter545
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|ia
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IA_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|ia
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerGetList_resultTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|scannerGetList_resultTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|scannerGetList_resultTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerGetList_resultTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|scannerGetList_result
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|scannerGetList_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIa
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|3
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TRowResult
name|_iter546
range|:
name|struct
operator|.
name|success
control|)
block|{
name|_iter546
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIa
argument_list|()
condition|)
block|{
name|struct
operator|.
name|ia
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|scannerGetList_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list547
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|(
name|_list547
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i548
init|=
literal|0
init|;
name|_i548
operator|<
name|_list547
operator|.
name|size
condition|;
operator|++
name|_i548
control|)
block|{
name|TRowResult
name|_elem549
decl_stmt|;
comment|// optional
name|_elem549
operator|=
operator|new
name|TRowResult
argument_list|()
expr_stmt|;
name|_elem549
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem549
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|struct
operator|.
name|ia
operator|=
operator|new
name|IllegalArgument
argument_list|()
expr_stmt|;
name|struct
operator|.
name|ia
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIaIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|scannerClose_args
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|scannerClose_args
argument_list|,
name|scannerClose_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"scannerClose_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ID_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"id"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|scannerClose_argsStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|scannerClose_argsTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * id of a scanner returned by scannerOpen      */
specifier|public
name|int
name|id
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
comment|/**        * id of a scanner returned by scannerOpen        */
name|ID
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"id"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// ID
return|return
name|ID
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__ID_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ID
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"id"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
literal|"ScannerID"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|scannerClose_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|scannerClose_args
parameter_list|()
block|{     }
specifier|public
name|scannerClose_args
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|setIdIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|scannerClose_args
parameter_list|(
name|scannerClose_args
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|other
operator|.
name|id
expr_stmt|;
block|}
specifier|public
name|scannerClose_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|scannerClose_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|setIdIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|id
operator|=
literal|0
expr_stmt|;
block|}
comment|/**      * id of a scanner returned by scannerOpen      */
specifier|public
name|int
name|getId
parameter_list|()
block|{
return|return
name|this
operator|.
name|id
return|;
block|}
comment|/**      * id of a scanner returned by scannerOpen      */
specifier|public
name|scannerClose_args
name|setId
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|setIdIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetId
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__ID_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field id is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetId
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__ID_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setIdIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__ID_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|ID
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetId
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setId
argument_list|(
operator|(
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|ID
case|:
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|getId
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|ID
case|:
return|return
name|isSetId
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|scannerClose_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|scannerClose_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|scannerClose_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_id
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_id
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_id
operator|||
name|that_present_id
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_id
operator|&&
name|that_present_id
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|id
operator|!=
name|that
operator|.
name|id
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|scannerClose_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|scannerClose_args
name|typedOther
init|=
operator|(
name|scannerClose_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetId
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetId
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|id
argument_list|,
name|typedOther
operator|.
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"scannerClose_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"id:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|id
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
comment|// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
name|__isset_bit_vector
operator|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerClose_argsStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|scannerClose_argsStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|scannerClose_argsStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerClose_argsStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|scannerClose_args
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|scannerClose_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// ID
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
condition|)
block|{
name|struct
operator|.
name|id
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setIdIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|scannerClose_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ID_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|id
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerClose_argsTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|scannerClose_argsTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|scannerClose_argsTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerClose_argsTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|scannerClose_args
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|scannerClose_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetId
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetId
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|scannerClose_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|id
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setIdIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|scannerClose_result
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|scannerClose_result
argument_list|,
name|scannerClose_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"scannerClose_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|IA_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"ia"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|scannerClose_resultStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|scannerClose_resultTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IOError
name|io
decl_stmt|;
comment|// required
specifier|public
name|IllegalArgument
name|ia
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|,
name|IA
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"ia"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
case|case
literal|2
case|:
comment|// IA
return|return
name|IA
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IA
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"ia"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|scannerClose_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|scannerClose_result
parameter_list|()
block|{     }
specifier|public
name|scannerClose_result
parameter_list|(
name|IOError
name|io
parameter_list|,
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|this
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|scannerClose_result
parameter_list|(
name|scannerClose_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetIa
argument_list|()
condition|)
block|{
name|this
operator|.
name|ia
operator|=
operator|new
name|IllegalArgument
argument_list|(
name|other
operator|.
name|ia
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|scannerClose_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|scannerClose_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|ia
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|scannerClose_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|IllegalArgument
name|getIa
parameter_list|()
block|{
return|return
name|this
operator|.
name|ia
return|;
block|}
specifier|public
name|scannerClose_result
name|setIa
parameter_list|(
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|this
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIa
parameter_list|()
block|{
name|this
operator|.
name|ia
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field ia is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIa
parameter_list|()
block|{
return|return
name|this
operator|.
name|ia
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIaIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|ia
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IA
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIa
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIa
argument_list|(
operator|(
name|IllegalArgument
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
case|case
name|IA
case|:
return|return
name|getIa
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
case|case
name|IA
case|:
return|return
name|isSetIa
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|scannerClose_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|scannerClose_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|scannerClose_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_ia
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIa
argument_list|()
decl_stmt|;
name|boolean
name|that_present_ia
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIa
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_ia
operator|||
name|that_present_ia
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_ia
operator|&&
name|that_present_ia
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|ia
operator|.
name|equals
argument_list|(
name|that
operator|.
name|ia
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|scannerClose_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|scannerClose_result
name|typedOther
init|=
operator|(
name|scannerClose_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIa
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIa
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIa
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|ia
argument_list|,
name|typedOther
operator|.
name|ia
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"scannerClose_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"ia:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|ia
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|ia
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerClose_resultStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|scannerClose_resultStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|scannerClose_resultStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerClose_resultStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|scannerClose_result
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|scannerClose_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// IA
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|ia
operator|=
operator|new
name|IllegalArgument
argument_list|()
expr_stmt|;
name|struct
operator|.
name|ia
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIaIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|scannerClose_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|ia
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IA_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|ia
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerClose_resultTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|scannerClose_resultTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|scannerClose_resultTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|scannerClose_resultTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|scannerClose_result
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|scannerClose_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIa
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIa
argument_list|()
condition|)
block|{
name|struct
operator|.
name|ia
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|scannerClose_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|ia
operator|=
operator|new
name|IllegalArgument
argument_list|()
expr_stmt|;
name|struct
operator|.
name|ia
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIaIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|getRowOrBefore_args
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|getRowOrBefore_args
argument_list|,
name|getRowOrBefore_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"getRowOrBefore_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ROW_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"row"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|FAMILY_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"family"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|getRowOrBefore_argsStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|getRowOrBefore_argsTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|ByteBuffer
name|tableName
decl_stmt|;
comment|// required
comment|/**      * row key      */
specifier|public
name|ByteBuffer
name|row
decl_stmt|;
comment|// required
comment|/**      * column name      */
specifier|public
name|ByteBuffer
name|family
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
comment|/**        * name of table        */
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|,
comment|/**        * row key        */
name|ROW
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"row"
argument_list|)
block|,
comment|/**        * column name        */
name|FAMILY
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"family"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
case|case
literal|2
case|:
comment|// ROW
return|return
name|ROW
return|;
case|case
literal|3
case|:
comment|// FAMILY
return|return
name|FAMILY
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ROW
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"row"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|FAMILY
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"family"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|getRowOrBefore_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|getRowOrBefore_args
parameter_list|()
block|{     }
specifier|public
name|getRowOrBefore_args
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|family
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|family
operator|=
name|family
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|getRowOrBefore_args
parameter_list|(
name|getRowOrBefore_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|this
operator|.
name|row
operator|=
name|other
operator|.
name|row
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetFamily
argument_list|()
condition|)
block|{
name|this
operator|.
name|family
operator|=
name|other
operator|.
name|family
expr_stmt|;
block|}
block|}
specifier|public
name|getRowOrBefore_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|getRowOrBefore_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|family
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * name of table      */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
name|setTableName
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableName
operator|==
literal|null
condition|?
literal|null
else|:
name|tableName
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * name of table      */
specifier|public
name|getRowOrBefore_args
name|setTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|setTableName
argument_list|(
name|tableName
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|getRowOrBefore_args
name|setTableName
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * row key      */
specifier|public
name|byte
index|[]
name|getRow
parameter_list|()
block|{
name|setRow
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|row
operator|==
literal|null
condition|?
literal|null
else|:
name|row
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForRow
parameter_list|()
block|{
return|return
name|row
return|;
block|}
comment|/**      * row key      */
specifier|public
name|getRowOrBefore_args
name|setRow
parameter_list|(
name|byte
index|[]
name|row
parameter_list|)
block|{
name|setRow
argument_list|(
name|row
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|getRowOrBefore_args
name|setRow
parameter_list|(
name|ByteBuffer
name|row
parameter_list|)
block|{
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetRow
parameter_list|()
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field row is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetRow
parameter_list|()
block|{
return|return
name|this
operator|.
name|row
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setRowIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * column name      */
specifier|public
name|byte
index|[]
name|getFamily
parameter_list|()
block|{
name|setFamily
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|family
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|family
operator|==
literal|null
condition|?
literal|null
else|:
name|family
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForFamily
parameter_list|()
block|{
return|return
name|family
return|;
block|}
comment|/**      * column name      */
specifier|public
name|getRowOrBefore_args
name|setFamily
parameter_list|(
name|byte
index|[]
name|family
parameter_list|)
block|{
name|setFamily
argument_list|(
name|family
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|family
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|getRowOrBefore_args
name|setFamily
parameter_list|(
name|ByteBuffer
name|family
parameter_list|)
block|{
name|this
operator|.
name|family
operator|=
name|family
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetFamily
parameter_list|()
block|{
name|this
operator|.
name|family
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field family is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetFamily
parameter_list|()
block|{
return|return
name|this
operator|.
name|family
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setFamilyIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|family
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ROW
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetRow
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setRow
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|FAMILY
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetFamily
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setFamily
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
case|case
name|ROW
case|:
return|return
name|getRow
argument_list|()
return|;
case|case
name|FAMILY
case|:
return|return
name|getFamily
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
case|case
name|ROW
case|:
return|return
name|isSetRow
argument_list|()
return|;
case|case
name|FAMILY
case|:
return|return
name|isSetFamily
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|getRowOrBefore_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|getRowOrBefore_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|getRowOrBefore_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_row
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
name|boolean
name|that_present_row
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_row
operator|||
name|that_present_row
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_row
operator|&&
name|that_present_row
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|row
operator|.
name|equals
argument_list|(
name|that
operator|.
name|row
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_family
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetFamily
argument_list|()
decl_stmt|;
name|boolean
name|that_present_family
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetFamily
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_family
operator|||
name|that_present_family
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_family
operator|&&
name|that_present_family
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|family
operator|.
name|equals
argument_list|(
name|that
operator|.
name|family
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|getRowOrBefore_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|getRowOrBefore_args
name|typedOther
init|=
operator|(
name|getRowOrBefore_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetRow
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetRow
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetRow
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|row
argument_list|,
name|typedOther
operator|.
name|row
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetFamily
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetFamily
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetFamily
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|family
argument_list|,
name|typedOther
operator|.
name|family
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getRowOrBefore_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"row:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|row
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"family:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|family
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|family
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowOrBefore_argsStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getRowOrBefore_argsStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getRowOrBefore_argsStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowOrBefore_argsStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|getRowOrBefore_args
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|getRowOrBefore_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// ROW
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setRowIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// FAMILY
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|family
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setFamilyIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|getRowOrBefore_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|row
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ROW_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|row
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|family
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|FAMILY_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|family
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowOrBefore_argsTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getRowOrBefore_argsTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getRowOrBefore_argsTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowOrBefore_argsTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|getRowOrBefore_args
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getRowOrBefore_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetFamily
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|3
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|row
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetFamily
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|family
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getRowOrBefore_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setRowIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|struct
operator|.
name|family
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setFamilyIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|getRowOrBefore_result
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|getRowOrBefore_result
argument_list|,
name|getRowOrBefore_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"getRowOrBefore_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|getRowOrBefore_resultStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|getRowOrBefore_resultTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|success
decl_stmt|;
comment|// required
specifier|public
name|IOError
name|io
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|TCell
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|getRowOrBefore_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|getRowOrBefore_result
parameter_list|()
block|{     }
specifier|public
name|getRowOrBefore_result
parameter_list|(
name|List
argument_list|<
name|TCell
argument_list|>
name|success
parameter_list|,
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|getRowOrBefore_result
parameter_list|(
name|getRowOrBefore_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|TCell
argument_list|>
name|__this__success
init|=
operator|new
name|ArrayList
argument_list|<
name|TCell
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TCell
name|other_element
range|:
name|other
operator|.
name|success
control|)
block|{
name|__this__success
operator|.
name|add
argument_list|(
operator|new
name|TCell
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|=
name|__this__success
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|getRowOrBefore_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|getRowOrBefore_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|TCell
argument_list|>
name|getSuccessIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|success
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSuccess
parameter_list|(
name|TCell
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TCell
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|getRowOrBefore_result
name|setSuccess
parameter_list|(
name|List
argument_list|<
name|TCell
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|getRowOrBefore_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|List
argument_list|<
name|TCell
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|getRowOrBefore_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|getRowOrBefore_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|getRowOrBefore_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|getRowOrBefore_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|getRowOrBefore_result
name|typedOther
init|=
operator|(
name|getRowOrBefore_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getRowOrBefore_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowOrBefore_resultStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getRowOrBefore_resultStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getRowOrBefore_resultStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowOrBefore_resultStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|getRowOrBefore_result
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|getRowOrBefore_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list550
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TCell
argument_list|>
argument_list|(
name|_list550
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i551
init|=
literal|0
init|;
name|_i551
operator|<
name|_list550
operator|.
name|size
condition|;
operator|++
name|_i551
control|)
block|{
name|TCell
name|_elem552
decl_stmt|;
comment|// optional
name|_elem552
operator|=
operator|new
name|TCell
argument_list|()
expr_stmt|;
name|_elem552
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem552
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|getRowOrBefore_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|success
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|struct
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TCell
name|_iter553
range|:
name|struct
operator|.
name|success
control|)
block|{
name|_iter553
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowOrBefore_resultTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getRowOrBefore_resultTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getRowOrBefore_resultTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRowOrBefore_resultTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|getRowOrBefore_result
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getRowOrBefore_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TCell
name|_iter554
range|:
name|struct
operator|.
name|success
control|)
block|{
name|_iter554
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getRowOrBefore_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list555
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|TCell
argument_list|>
argument_list|(
name|_list555
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i556
init|=
literal|0
init|;
name|_i556
operator|<
name|_list555
operator|.
name|size
condition|;
operator|++
name|_i556
control|)
block|{
name|TCell
name|_elem557
decl_stmt|;
comment|// optional
name|_elem557
operator|=
operator|new
name|TCell
argument_list|()
expr_stmt|;
name|_elem557
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem557
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|getRegionInfo_args
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|getRegionInfo_args
argument_list|,
name|getRegionInfo_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"getRegionInfo_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ROW_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"row"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|getRegionInfo_argsStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|getRegionInfo_argsTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * row key      */
specifier|public
name|ByteBuffer
name|row
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
comment|/**        * row key        */
name|ROW
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"row"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// ROW
return|return
name|ROW
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ROW
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"row"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|getRegionInfo_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|getRegionInfo_args
parameter_list|()
block|{     }
specifier|public
name|getRegionInfo_args
parameter_list|(
name|ByteBuffer
name|row
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|getRegionInfo_args
parameter_list|(
name|getRegionInfo_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|this
operator|.
name|row
operator|=
name|other
operator|.
name|row
expr_stmt|;
block|}
block|}
specifier|public
name|getRegionInfo_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|getRegionInfo_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * row key      */
specifier|public
name|byte
index|[]
name|getRow
parameter_list|()
block|{
name|setRow
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|row
operator|==
literal|null
condition|?
literal|null
else|:
name|row
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForRow
parameter_list|()
block|{
return|return
name|row
return|;
block|}
comment|/**      * row key      */
specifier|public
name|getRegionInfo_args
name|setRow
parameter_list|(
name|byte
index|[]
name|row
parameter_list|)
block|{
name|setRow
argument_list|(
name|row
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|getRegionInfo_args
name|setRow
parameter_list|(
name|ByteBuffer
name|row
parameter_list|)
block|{
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetRow
parameter_list|()
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field row is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetRow
parameter_list|()
block|{
return|return
name|this
operator|.
name|row
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setRowIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|ROW
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetRow
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setRow
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|ROW
case|:
return|return
name|getRow
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|ROW
case|:
return|return
name|isSetRow
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|getRegionInfo_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|getRegionInfo_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|getRegionInfo_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_row
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
name|boolean
name|that_present_row
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_row
operator|||
name|that_present_row
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_row
operator|&&
name|that_present_row
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|row
operator|.
name|equals
argument_list|(
name|that
operator|.
name|row
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|getRegionInfo_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|getRegionInfo_args
name|typedOther
init|=
operator|(
name|getRegionInfo_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetRow
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetRow
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetRow
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|row
argument_list|,
name|typedOther
operator|.
name|row
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getRegionInfo_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"row:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|row
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRegionInfo_argsStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getRegionInfo_argsStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getRegionInfo_argsStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRegionInfo_argsStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|getRegionInfo_args
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|getRegionInfo_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// ROW
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setRowIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|getRegionInfo_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|row
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ROW_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|row
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRegionInfo_argsTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getRegionInfo_argsTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getRegionInfo_argsTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRegionInfo_argsTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|getRegionInfo_args
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getRegionInfo_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|row
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getRegionInfo_args
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setRowIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|getRegionInfo_result
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|getRegionInfo_result
argument_list|,
name|getRegionInfo_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"getRegionInfo_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|IO_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|getRegionInfo_resultStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|getRegionInfo_resultTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TRegionInfo
name|success
decl_stmt|;
comment|// required
specifier|public
name|IOError
name|io
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|IO
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"io"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// IO
return|return
name|IO
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|TRegionInfo
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IO
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"io"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|getRegionInfo_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|getRegionInfo_result
parameter_list|()
block|{     }
specifier|public
name|getRegionInfo_result
parameter_list|(
name|TRegionInfo
name|success
parameter_list|,
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|getRegionInfo_result
parameter_list|(
name|getRegionInfo_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|TRegionInfo
argument_list|(
name|other
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|(
name|other
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|getRegionInfo_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|getRegionInfo_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|TRegionInfo
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|getRegionInfo_result
name|setSuccess
parameter_list|(
name|TRegionInfo
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|IOError
name|getIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
return|;
block|}
specifier|public
name|getRegionInfo_result
name|setIo
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetIo
parameter_list|()
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field io is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIo
parameter_list|()
block|{
return|return
name|this
operator|.
name|io
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|io
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|TRegionInfo
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIo
argument_list|(
operator|(
name|IOError
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|getIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|IO
case|:
return|return
name|isSetIo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|getRegionInfo_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|getRegionInfo_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|getRegionInfo_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_io
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_io
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_io
operator|||
name|that_present_io
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_io
operator|&&
name|that_present_io
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|io
operator|.
name|equals
argument_list|(
name|that
operator|.
name|io
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|getRegionInfo_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|getRegionInfo_result
name|typedOther
init|=
operator|(
name|getRegionInfo_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|io
argument_list|,
name|typedOther
operator|.
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getRegionInfo_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|io
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRegionInfo_resultStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getRegionInfo_resultStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getRegionInfo_resultStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRegionInfo_resultStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|getRegionInfo_result
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|getRegionInfo_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|success
operator|=
operator|new
name|TRegionInfo
argument_list|()
expr_stmt|;
name|struct
operator|.
name|success
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// IO
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|getRegionInfo_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|success
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|success
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IO_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRegionInfo_resultTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|getRegionInfo_resultTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|getRegionInfo_resultTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|getRegionInfo_resultTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|getRegionInfo_result
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getRegionInfo_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|struct
operator|.
name|success
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetIo
argument_list|()
condition|)
block|{
name|struct
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|getRegionInfo_result
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|success
operator|=
operator|new
name|TRegionInfo
argument_list|()
expr_stmt|;
name|struct
operator|.
name|success
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|struct
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setIoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

