begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
operator|.
name|getBytes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|OptionGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|OperationWithAttributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|ParseFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|PrefixFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|WhileMatchFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|CallQueue
operator|.
name|Call
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|AlreadyExists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|BatchMutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|ColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|Hbase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|IOError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|IllegalArgument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|Mutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|TCell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|TRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|TRowResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|TScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Addressing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Writables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|DNS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TBinaryProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|server
operator|.
name|THsHaServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|server
operator|.
name|TNonblockingServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|server
operator|.
name|TServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|server
operator|.
name|TThreadedSelectorServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TFramedTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingServerSocket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingServerTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TServerSocket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TServerTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransportFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_comment
comment|/**  * ThriftServerRunner - this class starts up a Thrift server which implements  * the Hbase API specified in the Hbase.thrift IDL file.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ThriftServerRunner
implements|implements
name|Runnable
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ThriftServerRunner
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|SERVER_TYPE_CONF_KEY
init|=
literal|"hbase.regionserver.thrift.server.type"
decl_stmt|;
specifier|static
specifier|final
name|String
name|BIND_CONF_KEY
init|=
literal|"hbase.regionserver.thrift.ipaddress"
decl_stmt|;
specifier|static
specifier|final
name|String
name|COMPACT_CONF_KEY
init|=
literal|"hbase.regionserver.thrift.compact"
decl_stmt|;
specifier|static
specifier|final
name|String
name|FRAMED_CONF_KEY
init|=
literal|"hbase.regionserver.thrift.framed"
decl_stmt|;
specifier|static
specifier|final
name|String
name|PORT_CONF_KEY
init|=
literal|"hbase.regionserver.thrift.port"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_BIND_ADDR
init|=
literal|"0.0.0.0"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_LISTEN_PORT
init|=
literal|9090
decl_stmt|;
specifier|private
specifier|final
name|int
name|listenPort
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|volatile
name|TServer
name|tserver
decl_stmt|;
specifier|private
specifier|final
name|Hbase
operator|.
name|Iface
name|handler
decl_stmt|;
specifier|private
specifier|final
name|ThriftMetrics
name|metrics
decl_stmt|;
comment|/** An enum of server implementation selections */
enum|enum
name|ImplType
block|{
name|HS_HA
argument_list|(
literal|"hsha"
argument_list|,
literal|true
argument_list|,
name|THsHaServer
operator|.
name|class
argument_list|,
literal|false
argument_list|)
block|,
name|NONBLOCKING
argument_list|(
literal|"nonblocking"
argument_list|,
literal|true
argument_list|,
name|TNonblockingServer
operator|.
name|class
argument_list|,
literal|false
argument_list|)
block|,
name|THREAD_POOL
argument_list|(
literal|"threadpool"
argument_list|,
literal|false
argument_list|,
name|TBoundedThreadPoolServer
operator|.
name|class
argument_list|,
literal|true
argument_list|)
block|,
name|THREADED_SELECTOR
argument_list|(
literal|"threadedselector"
argument_list|,
literal|true
argument_list|,
name|TThreadedSelectorServer
operator|.
name|class
argument_list|,
literal|false
argument_list|)
block|;
specifier|public
specifier|static
specifier|final
name|ImplType
name|DEFAULT
init|=
name|THREAD_POOL
decl_stmt|;
specifier|final
name|String
name|option
decl_stmt|;
specifier|final
name|boolean
name|isAlwaysFramed
decl_stmt|;
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|TServer
argument_list|>
name|serverClass
decl_stmt|;
specifier|final
name|boolean
name|canSpecifyBindIP
decl_stmt|;
name|ImplType
parameter_list|(
name|String
name|option
parameter_list|,
name|boolean
name|isAlwaysFramed
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|TServer
argument_list|>
name|serverClass
parameter_list|,
name|boolean
name|canSpecifyBindIP
parameter_list|)
block|{
name|this
operator|.
name|option
operator|=
name|option
expr_stmt|;
name|this
operator|.
name|isAlwaysFramed
operator|=
name|isAlwaysFramed
expr_stmt|;
name|this
operator|.
name|serverClass
operator|=
name|serverClass
expr_stmt|;
name|this
operator|.
name|canSpecifyBindIP
operator|=
name|canSpecifyBindIP
expr_stmt|;
block|}
comment|/**      * @return<code>-option</code> so we can get the list of options from      *         {@link #values()}      */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"-"
operator|+
name|option
return|;
block|}
name|String
name|getDescription
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Use the "
operator|+
name|serverClass
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|isAlwaysFramed
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" This implies the framed transport."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|==
name|DEFAULT
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"This is the default."
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|static
name|OptionGroup
name|createOptionGroup
parameter_list|()
block|{
name|OptionGroup
name|group
init|=
operator|new
name|OptionGroup
argument_list|()
decl_stmt|;
for|for
control|(
name|ImplType
name|t
range|:
name|values
argument_list|()
control|)
block|{
name|group
operator|.
name|addOption
argument_list|(
operator|new
name|Option
argument_list|(
name|t
operator|.
name|option
argument_list|,
name|t
operator|.
name|getDescription
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|group
return|;
block|}
specifier|static
name|ImplType
name|getServerImpl
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|confType
init|=
name|conf
operator|.
name|get
argument_list|(
name|SERVER_TYPE_CONF_KEY
argument_list|,
name|THREAD_POOL
operator|.
name|option
argument_list|)
decl_stmt|;
for|for
control|(
name|ImplType
name|t
range|:
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|confType
operator|.
name|equals
argument_list|(
name|t
operator|.
name|option
argument_list|)
condition|)
block|{
return|return
name|t
return|;
block|}
block|}
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Unknown server ImplType.option:"
operator|+
name|confType
argument_list|)
throw|;
block|}
specifier|static
name|void
name|setServerImpl
parameter_list|(
name|CommandLine
name|cmd
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|ImplType
name|chosenType
init|=
literal|null
decl_stmt|;
name|int
name|numChosen
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ImplType
name|t
range|:
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
name|t
operator|.
name|option
argument_list|)
condition|)
block|{
name|chosenType
operator|=
name|t
expr_stmt|;
operator|++
name|numChosen
expr_stmt|;
block|}
block|}
if|if
condition|(
name|numChosen
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Exactly one option out of "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|values
argument_list|()
argument_list|)
operator|+
literal|" has to be specified"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Setting thrift server to "
operator|+
name|chosenType
operator|.
name|option
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|SERVER_TYPE_CONF_KEY
argument_list|,
name|chosenType
operator|.
name|option
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|simpleClassName
parameter_list|()
block|{
return|return
name|serverClass
operator|.
name|getSimpleName
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|serversThatCannotSpecifyBindIP
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ImplType
name|t
range|:
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|t
operator|.
name|canSpecifyBindIP
condition|)
block|{
name|l
operator|.
name|add
argument_list|(
name|t
operator|.
name|simpleClassName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|l
return|;
block|}
block|}
specifier|public
name|ThriftServerRunner
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|conf
argument_list|,
operator|new
name|ThriftServerRunner
operator|.
name|HBaseHandler
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ThriftServerRunner
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|HBaseHandler
name|handler
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|HBaseConfiguration
operator|.
name|create
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|listenPort
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|PORT_CONF_KEY
argument_list|,
name|DEFAULT_LISTEN_PORT
argument_list|)
expr_stmt|;
name|this
operator|.
name|metrics
operator|=
operator|new
name|ThriftMetrics
argument_list|(
name|listenPort
argument_list|,
name|conf
argument_list|,
name|Hbase
operator|.
name|Iface
operator|.
name|class
argument_list|)
expr_stmt|;
name|handler
operator|.
name|initMetrics
argument_list|(
name|metrics
argument_list|)
expr_stmt|;
name|this
operator|.
name|handler
operator|=
name|HbaseHandlerMetricsProxy
operator|.
name|newInstance
argument_list|(
name|handler
argument_list|,
name|metrics
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/*    * Runs the Thrift server    */
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|setupServer
argument_list|()
expr_stmt|;
name|tserver
operator|.
name|serve
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Cannot run ThriftServer"
argument_list|)
expr_stmt|;
comment|// Crash the process if the ThriftServer is not running
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
if|if
condition|(
name|tserver
operator|!=
literal|null
condition|)
block|{
name|tserver
operator|.
name|stop
argument_list|()
expr_stmt|;
name|tserver
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * Setting up the thrift TServer    */
specifier|private
name|void
name|setupServer
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Construct correct ProtocolFactory
name|TProtocolFactory
name|protocolFactory
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|COMPACT_CONF_KEY
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using compact protocol"
argument_list|)
expr_stmt|;
name|protocolFactory
operator|=
operator|new
name|TCompactProtocol
operator|.
name|Factory
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using binary protocol"
argument_list|)
expr_stmt|;
name|protocolFactory
operator|=
operator|new
name|TBinaryProtocol
operator|.
name|Factory
argument_list|()
expr_stmt|;
block|}
name|Hbase
operator|.
name|Processor
argument_list|<
name|Hbase
operator|.
name|Iface
argument_list|>
name|processor
init|=
operator|new
name|Hbase
operator|.
name|Processor
argument_list|<
name|Hbase
operator|.
name|Iface
argument_list|>
argument_list|(
name|handler
argument_list|)
decl_stmt|;
name|ImplType
name|implType
init|=
name|ImplType
operator|.
name|getServerImpl
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Construct correct TransportFactory
name|TTransportFactory
name|transportFactory
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|FRAMED_CONF_KEY
argument_list|,
literal|false
argument_list|)
operator|||
name|implType
operator|.
name|isAlwaysFramed
condition|)
block|{
name|transportFactory
operator|=
operator|new
name|TFramedTransport
operator|.
name|Factory
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using framed transport"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|transportFactory
operator|=
operator|new
name|TTransportFactory
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|conf
operator|.
name|get
argument_list|(
name|BIND_CONF_KEY
argument_list|)
operator|!=
literal|null
operator|&&
operator|!
name|implType
operator|.
name|canSpecifyBindIP
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Server types "
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|", "
argument_list|)
operator|.
name|join
argument_list|(
name|ImplType
operator|.
name|serversThatCannotSpecifyBindIP
argument_list|()
argument_list|)
operator|+
literal|" don't support IP "
operator|+
literal|"address binding at the moment. See "
operator|+
literal|"https://issues.apache.org/jira/browse/HBASE-2155 for details."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"-"
operator|+
name|BIND_CONF_KEY
operator|+
literal|" not supported with "
operator|+
name|implType
argument_list|)
throw|;
block|}
if|if
condition|(
name|implType
operator|==
name|ImplType
operator|.
name|HS_HA
operator|||
name|implType
operator|==
name|ImplType
operator|.
name|NONBLOCKING
operator|||
name|implType
operator|==
name|ImplType
operator|.
name|THREADED_SELECTOR
condition|)
block|{
name|TNonblockingServerTransport
name|serverTransport
init|=
operator|new
name|TNonblockingServerSocket
argument_list|(
name|listenPort
argument_list|)
decl_stmt|;
if|if
condition|(
name|implType
operator|==
name|ImplType
operator|.
name|NONBLOCKING
condition|)
block|{
name|TNonblockingServer
operator|.
name|Args
name|serverArgs
init|=
operator|new
name|TNonblockingServer
operator|.
name|Args
argument_list|(
name|serverTransport
argument_list|)
decl_stmt|;
name|serverArgs
operator|.
name|processor
argument_list|(
name|processor
argument_list|)
operator|.
name|transportFactory
argument_list|(
name|transportFactory
argument_list|)
operator|.
name|protocolFactory
argument_list|(
name|protocolFactory
argument_list|)
expr_stmt|;
name|tserver
operator|=
operator|new
name|TNonblockingServer
argument_list|(
name|serverArgs
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|implType
operator|==
name|ImplType
operator|.
name|HS_HA
condition|)
block|{
name|THsHaServer
operator|.
name|Args
name|serverArgs
init|=
operator|new
name|THsHaServer
operator|.
name|Args
argument_list|(
name|serverTransport
argument_list|)
decl_stmt|;
name|CallQueue
name|callQueue
init|=
operator|new
name|CallQueue
argument_list|(
operator|new
name|LinkedBlockingQueue
argument_list|<
name|Call
argument_list|>
argument_list|()
argument_list|,
name|metrics
argument_list|)
decl_stmt|;
name|ExecutorService
name|executorService
init|=
name|createExecutor
argument_list|(
name|callQueue
argument_list|,
name|serverArgs
operator|.
name|getWorkerThreads
argument_list|()
argument_list|)
decl_stmt|;
name|serverArgs
operator|.
name|executorService
argument_list|(
name|executorService
argument_list|)
operator|.
name|processor
argument_list|(
name|processor
argument_list|)
operator|.
name|transportFactory
argument_list|(
name|transportFactory
argument_list|)
operator|.
name|protocolFactory
argument_list|(
name|protocolFactory
argument_list|)
expr_stmt|;
name|tserver
operator|=
operator|new
name|THsHaServer
argument_list|(
name|serverArgs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// THREADED_SELECTOR
name|TThreadedSelectorServer
operator|.
name|Args
name|serverArgs
init|=
operator|new
name|HThreadedSelectorServerArgs
argument_list|(
name|serverTransport
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|CallQueue
name|callQueue
init|=
operator|new
name|CallQueue
argument_list|(
operator|new
name|LinkedBlockingQueue
argument_list|<
name|Call
argument_list|>
argument_list|()
argument_list|,
name|metrics
argument_list|)
decl_stmt|;
name|ExecutorService
name|executorService
init|=
name|createExecutor
argument_list|(
name|callQueue
argument_list|,
name|serverArgs
operator|.
name|getWorkerThreads
argument_list|()
argument_list|)
decl_stmt|;
name|serverArgs
operator|.
name|executorService
argument_list|(
name|executorService
argument_list|)
operator|.
name|processor
argument_list|(
name|processor
argument_list|)
operator|.
name|transportFactory
argument_list|(
name|transportFactory
argument_list|)
operator|.
name|protocolFactory
argument_list|(
name|protocolFactory
argument_list|)
expr_stmt|;
name|tserver
operator|=
operator|new
name|TThreadedSelectorServer
argument_list|(
name|serverArgs
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"starting HBase "
operator|+
name|implType
operator|.
name|simpleClassName
argument_list|()
operator|+
literal|" server on "
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|listenPort
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|implType
operator|==
name|ImplType
operator|.
name|THREAD_POOL
condition|)
block|{
comment|// Thread pool server. Get the IP address to bind to.
name|InetAddress
name|listenAddress
init|=
name|getBindAddress
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|TServerTransport
name|serverTransport
init|=
operator|new
name|TServerSocket
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|listenAddress
argument_list|,
name|listenPort
argument_list|)
argument_list|)
decl_stmt|;
name|TBoundedThreadPoolServer
operator|.
name|Args
name|serverArgs
init|=
operator|new
name|TBoundedThreadPoolServer
operator|.
name|Args
argument_list|(
name|serverTransport
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|serverArgs
operator|.
name|processor
argument_list|(
name|processor
argument_list|)
operator|.
name|transportFactory
argument_list|(
name|transportFactory
argument_list|)
operator|.
name|protocolFactory
argument_list|(
name|protocolFactory
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"starting "
operator|+
name|ImplType
operator|.
name|THREAD_POOL
operator|.
name|simpleClassName
argument_list|()
operator|+
literal|" on "
operator|+
name|listenAddress
operator|+
literal|":"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|listenPort
argument_list|)
operator|+
literal|"; "
operator|+
name|serverArgs
argument_list|)
expr_stmt|;
name|TBoundedThreadPoolServer
name|tserver
init|=
operator|new
name|TBoundedThreadPoolServer
argument_list|(
name|serverArgs
argument_list|,
name|metrics
argument_list|)
decl_stmt|;
name|this
operator|.
name|tserver
operator|=
name|tserver
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Unsupported Thrift server implementation: "
operator|+
name|implType
operator|.
name|simpleClassName
argument_list|()
argument_list|)
throw|;
block|}
comment|// A sanity check that we instantiated the right type of server.
if|if
condition|(
name|tserver
operator|.
name|getClass
argument_list|()
operator|!=
name|implType
operator|.
name|serverClass
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Expected to create Thrift server class "
operator|+
name|implType
operator|.
name|serverClass
operator|.
name|getName
argument_list|()
operator|+
literal|" but got "
operator|+
name|tserver
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|// login the server principal (if using secure Hadoop)
if|if
condition|(
name|User
operator|.
name|isSecurityEnabled
argument_list|()
operator|&&
name|User
operator|.
name|isHBaseSecurityEnabled
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|String
name|machineName
init|=
name|Strings
operator|.
name|domainNamePointerToHostName
argument_list|(
name|DNS
operator|.
name|getDefaultHost
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"hbase.thrift.dns.interface"
argument_list|,
literal|"default"
argument_list|)
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"hbase.thrift.dns.nameserver"
argument_list|,
literal|"default"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|User
operator|.
name|login
argument_list|(
name|conf
argument_list|,
literal|"hbase.thrift.keytab.file"
argument_list|,
literal|"hbase.thrift.kerberos.principal"
argument_list|,
name|machineName
argument_list|)
expr_stmt|;
block|}
name|registerFilters
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|ExecutorService
name|createExecutor
parameter_list|(
name|BlockingQueue
argument_list|<
name|Runnable
argument_list|>
name|callQueue
parameter_list|,
name|int
name|workerThreads
parameter_list|)
block|{
name|ThreadFactoryBuilder
name|tfb
init|=
operator|new
name|ThreadFactoryBuilder
argument_list|()
decl_stmt|;
name|tfb
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tfb
operator|.
name|setNameFormat
argument_list|(
literal|"thrift-worker-%d"
argument_list|)
expr_stmt|;
return|return
operator|new
name|ThreadPoolExecutor
argument_list|(
name|workerThreads
argument_list|,
name|workerThreads
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
name|callQueue
argument_list|,
name|tfb
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|InetAddress
name|getBindAddress
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|UnknownHostException
block|{
name|String
name|bindAddressStr
init|=
name|conf
operator|.
name|get
argument_list|(
name|BIND_CONF_KEY
argument_list|,
name|DEFAULT_BIND_ADDR
argument_list|)
decl_stmt|;
return|return
name|InetAddress
operator|.
name|getByName
argument_list|(
name|bindAddressStr
argument_list|)
return|;
block|}
comment|/**    * The HBaseHandler is a glue object that connects Thrift RPC calls to the    * HBase client API primarily defined in the HBaseAdmin and HTable objects.    */
specifier|public
specifier|static
class|class
name|HBaseHandler
implements|implements
name|Hbase
operator|.
name|Iface
block|{
specifier|protected
name|Configuration
name|conf
decl_stmt|;
specifier|protected
specifier|volatile
name|HBaseAdmin
name|admin
init|=
literal|null
decl_stmt|;
specifier|protected
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// nextScannerId and scannerMap are used to manage scanner state
specifier|protected
name|int
name|nextScannerId
init|=
literal|0
decl_stmt|;
specifier|protected
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|ResultScanner
argument_list|>
name|scannerMap
init|=
literal|null
decl_stmt|;
specifier|private
name|ThriftMetrics
name|metrics
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|ThreadLocal
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|HTable
argument_list|>
argument_list|>
name|threadLocalTables
init|=
operator|new
name|ThreadLocal
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|HTable
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|HTable
argument_list|>
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|HTable
argument_list|>
argument_list|()
return|;
block|}
block|}
decl_stmt|;
comment|/**      * Returns a list of all the column families for a given htable.      *      * @param table      * @return      * @throws IOException      */
name|byte
index|[]
index|[]
name|getAllColumns
parameter_list|(
name|HTable
name|table
parameter_list|)
throws|throws
name|IOException
block|{
name|HColumnDescriptor
index|[]
name|cds
init|=
name|table
operator|.
name|getTableDescriptor
argument_list|()
operator|.
name|getColumnFamilies
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|columns
init|=
operator|new
name|byte
index|[
name|cds
operator|.
name|length
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cds
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|columns
index|[
name|i
index|]
operator|=
name|Bytes
operator|.
name|add
argument_list|(
name|cds
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|,
name|KeyValue
operator|.
name|COLUMN_FAMILY_DELIM_ARRAY
argument_list|)
expr_stmt|;
block|}
return|return
name|columns
return|;
block|}
comment|/**      * Creates and returns an HTable instance from a given table name.      *      * @param tableName      *          name of table      * @return HTable object      * @throws IOException      * @throws IOError      */
specifier|protected
name|HTable
name|getTable
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|table
init|=
operator|new
name|String
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|HTable
argument_list|>
name|tables
init|=
name|threadLocalTables
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|tables
operator|.
name|containsKey
argument_list|(
name|table
argument_list|)
condition|)
block|{
name|tables
operator|.
name|put
argument_list|(
name|table
argument_list|,
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|tables
operator|.
name|get
argument_list|(
name|table
argument_list|)
return|;
block|}
specifier|protected
name|HTable
name|getTable
parameter_list|(
specifier|final
name|ByteBuffer
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getTable
argument_list|(
name|getBytes
argument_list|(
name|tableName
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Assigns a unique ID to the scanner and adds the mapping to an internal      * hash-map.      *      * @param scanner      * @return integer scanner id      */
specifier|protected
specifier|synchronized
name|int
name|addScanner
parameter_list|(
name|ResultScanner
name|scanner
parameter_list|)
block|{
name|int
name|id
init|=
name|nextScannerId
operator|++
decl_stmt|;
name|scannerMap
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|scanner
argument_list|)
expr_stmt|;
return|return
name|id
return|;
block|}
comment|/**      * Returns the scanner associated with the specified ID.      *      * @param id      * @return a Scanner, or null if ID was invalid.      */
specifier|protected
specifier|synchronized
name|ResultScanner
name|getScanner
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
name|scannerMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
return|;
block|}
comment|/**      * Removes the scanner associated with the specified ID from the internal      * id->scanner hash-map.      *      * @param id      * @return a Scanner, or null if ID was invalid.      */
specifier|protected
specifier|synchronized
name|ResultScanner
name|removeScanner
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
name|scannerMap
operator|.
name|remove
argument_list|(
name|id
argument_list|)
return|;
block|}
comment|/**      * Constructs an HBaseHandler object.      * @throws IOException      */
specifier|protected
name|HBaseHandler
parameter_list|()
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|HBaseConfiguration
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|HBaseHandler
parameter_list|(
specifier|final
name|Configuration
name|c
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|conf
operator|=
name|c
expr_stmt|;
name|scannerMap
operator|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|ResultScanner
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/**      * Obtain HBaseAdmin. Creates the instance if it is not already created.      */
specifier|private
name|HBaseAdmin
name|getHBaseAdmin
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|admin
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|admin
operator|==
literal|null
condition|)
block|{
name|admin
operator|=
operator|new
name|HBaseAdmin
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|admin
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|enableTable
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
throws|throws
name|IOError
block|{
try|try
block|{
name|getHBaseAdmin
argument_list|()
operator|.
name|enableTable
argument_list|(
name|getBytes
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|disableTable
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
throws|throws
name|IOError
block|{
try|try
block|{
name|getHBaseAdmin
argument_list|()
operator|.
name|disableTable
argument_list|(
name|getBytes
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isTableEnabled
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
throws|throws
name|IOError
block|{
try|try
block|{
return|return
name|HTable
operator|.
name|isTableEnabled
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|getBytes
argument_list|(
name|tableName
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|compact
parameter_list|(
name|ByteBuffer
name|tableNameOrRegionName
parameter_list|)
throws|throws
name|IOError
block|{
try|try
block|{
name|getHBaseAdmin
argument_list|()
operator|.
name|compact
argument_list|(
name|getBytes
argument_list|(
name|tableNameOrRegionName
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|majorCompact
parameter_list|(
name|ByteBuffer
name|tableNameOrRegionName
parameter_list|)
throws|throws
name|IOError
block|{
try|try
block|{
name|getHBaseAdmin
argument_list|()
operator|.
name|majorCompact
argument_list|(
name|getBytes
argument_list|(
name|tableNameOrRegionName
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|getTableNames
parameter_list|()
throws|throws
name|IOError
block|{
try|try
block|{
name|HTableDescriptor
index|[]
name|tables
init|=
name|this
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|listTables
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|(
name|tables
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tables
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tables
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TRegionInfo
argument_list|>
name|getTableRegions
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
throws|throws
name|IOError
block|{
try|try
block|{
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|hris
init|=
name|this
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|getTableRegions
argument_list|(
name|toBytes
argument_list|(
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TRegionInfo
argument_list|>
name|regions
init|=
operator|new
name|ArrayList
argument_list|<
name|TRegionInfo
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|hris
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|HRegionInfo
name|regionInfo
range|:
name|hris
control|)
block|{
name|TRegionInfo
name|region
init|=
operator|new
name|TRegionInfo
argument_list|()
decl_stmt|;
name|region
operator|.
name|startKey
operator|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|regionInfo
operator|.
name|getStartKey
argument_list|()
argument_list|)
expr_stmt|;
name|region
operator|.
name|endKey
operator|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|regionInfo
operator|.
name|getEndKey
argument_list|()
argument_list|)
expr_stmt|;
name|region
operator|.
name|id
operator|=
name|regionInfo
operator|.
name|getRegionId
argument_list|()
expr_stmt|;
name|region
operator|.
name|name
operator|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|regionInfo
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
name|region
operator|.
name|version
operator|=
name|regionInfo
operator|.
name|getVersion
argument_list|()
expr_stmt|;
name|regions
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|regions
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * Convert ByteBuffer to byte array. Note that this cannot be replaced by      * Bytes.toBytes().      */
specifier|public
specifier|static
name|byte
index|[]
name|toBytes
parameter_list|(
name|ByteBuffer
name|bb
parameter_list|)
block|{
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|bb
operator|.
name|remaining
argument_list|()
index|]
decl_stmt|;
comment|// Make a duplicate so the position doesn't change
name|ByteBuffer
name|dup
init|=
name|bb
operator|.
name|duplicate
argument_list|()
decl_stmt|;
name|dup
operator|.
name|get
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Deprecated
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|get
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
block|{
name|byte
index|[]
index|[]
name|famAndQf
init|=
name|KeyValue
operator|.
name|parseColumn
argument_list|(
name|getBytes
argument_list|(
name|column
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|famAndQf
operator|.
name|length
operator|==
literal|1
condition|)
block|{
return|return
name|get
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|famAndQf
index|[
literal|0
index|]
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|attributes
argument_list|)
return|;
block|}
return|return
name|get
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|famAndQf
index|[
literal|1
index|]
argument_list|,
name|attributes
argument_list|)
return|;
block|}
specifier|protected
name|List
argument_list|<
name|TCell
argument_list|>
name|get
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
block|{
try|try
block|{
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|getBytes
argument_list|(
name|row
argument_list|)
argument_list|)
decl_stmt|;
name|addAttributes
argument_list|(
name|get
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
if|if
condition|(
name|qualifier
operator|==
literal|null
operator|||
name|qualifier
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|get
operator|.
name|addFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
block|}
name|Result
name|result
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
return|return
name|ThriftUtilities
operator|.
name|cellFromHBase
argument_list|(
name|result
operator|.
name|raw
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Deprecated
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|getVer
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|int
name|numVersions
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
block|{
name|byte
index|[]
index|[]
name|famAndQf
init|=
name|KeyValue
operator|.
name|parseColumn
argument_list|(
name|getBytes
argument_list|(
name|column
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|famAndQf
operator|.
name|length
operator|==
literal|1
condition|)
block|{
return|return
name|getVer
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|famAndQf
index|[
literal|0
index|]
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|numVersions
argument_list|,
name|attributes
argument_list|)
return|;
block|}
return|return
name|getVer
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|famAndQf
index|[
literal|1
index|]
argument_list|,
name|numVersions
argument_list|,
name|attributes
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|getVer
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|int
name|numVersions
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
block|{
try|try
block|{
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|getBytes
argument_list|(
name|row
argument_list|)
argument_list|)
decl_stmt|;
name|addAttributes
argument_list|(
name|get
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|numVersions
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
return|return
name|ThriftUtilities
operator|.
name|cellFromHBase
argument_list|(
name|result
operator|.
name|raw
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Deprecated
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|getVerTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|int
name|numVersions
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
block|{
name|byte
index|[]
index|[]
name|famAndQf
init|=
name|KeyValue
operator|.
name|parseColumn
argument_list|(
name|getBytes
argument_list|(
name|column
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|famAndQf
operator|.
name|length
operator|==
literal|1
condition|)
block|{
return|return
name|getVerTs
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|famAndQf
index|[
literal|0
index|]
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|timestamp
argument_list|,
name|numVersions
argument_list|,
name|attributes
argument_list|)
return|;
block|}
return|return
name|getVerTs
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|famAndQf
index|[
literal|1
index|]
argument_list|,
name|timestamp
argument_list|,
name|numVersions
argument_list|,
name|attributes
argument_list|)
return|;
block|}
specifier|protected
name|List
argument_list|<
name|TCell
argument_list|>
name|getVerTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|int
name|numVersions
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
block|{
try|try
block|{
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|getBytes
argument_list|(
name|row
argument_list|)
argument_list|)
decl_stmt|;
name|addAttributes
argument_list|(
name|get
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|get
operator|.
name|setTimeRange
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|numVersions
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
return|return
name|ThriftUtilities
operator|.
name|cellFromHBase
argument_list|(
name|result
operator|.
name|raw
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRow
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
block|{
return|return
name|getRowWithColumnsTs
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
literal|null
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|attributes
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRowWithColumns
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
block|{
return|return
name|getRowWithColumnsTs
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|columns
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|attributes
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRowTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
block|{
return|return
name|getRowWithColumnsTs
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
literal|null
argument_list|,
name|timestamp
argument_list|,
name|attributes
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRowWithColumnsTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
block|{
try|try
block|{
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|columns
operator|==
literal|null
condition|)
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|getBytes
argument_list|(
name|row
argument_list|)
argument_list|)
decl_stmt|;
name|addAttributes
argument_list|(
name|get
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|get
operator|.
name|setTimeRange
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
return|return
name|ThriftUtilities
operator|.
name|rowResultFromHBase
argument_list|(
name|result
argument_list|)
return|;
block|}
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|getBytes
argument_list|(
name|row
argument_list|)
argument_list|)
decl_stmt|;
name|addAttributes
argument_list|(
name|get
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
for|for
control|(
name|ByteBuffer
name|column
range|:
name|columns
control|)
block|{
name|byte
index|[]
index|[]
name|famAndQf
init|=
name|KeyValue
operator|.
name|parseColumn
argument_list|(
name|getBytes
argument_list|(
name|column
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|famAndQf
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|get
operator|.
name|addFamily
argument_list|(
name|famAndQf
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|get
operator|.
name|addColumn
argument_list|(
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|famAndQf
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|get
operator|.
name|setTimeRange
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
return|return
name|ThriftUtilities
operator|.
name|rowResultFromHBase
argument_list|(
name|result
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRows
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
block|{
return|return
name|getRowsWithColumnsTs
argument_list|(
name|tableName
argument_list|,
name|rows
argument_list|,
literal|null
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|attributes
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRowsWithColumns
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
block|{
return|return
name|getRowsWithColumnsTs
argument_list|(
name|tableName
argument_list|,
name|rows
argument_list|,
name|columns
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|attributes
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRowsTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
block|{
return|return
name|getRowsWithColumnsTs
argument_list|(
name|tableName
argument_list|,
name|rows
argument_list|,
literal|null
argument_list|,
name|timestamp
argument_list|,
name|attributes
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRowsWithColumnsTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
block|{
try|try
block|{
name|List
argument_list|<
name|Get
argument_list|>
name|gets
init|=
operator|new
name|ArrayList
argument_list|<
name|Get
argument_list|>
argument_list|(
name|rows
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|metrics
operator|!=
literal|null
condition|)
block|{
name|metrics
operator|.
name|incNumRowKeysInBatchGet
argument_list|(
name|rows
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ByteBuffer
name|row
range|:
name|rows
control|)
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|getBytes
argument_list|(
name|row
argument_list|)
argument_list|)
decl_stmt|;
name|addAttributes
argument_list|(
name|get
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
if|if
condition|(
name|columns
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ByteBuffer
name|column
range|:
name|columns
control|)
block|{
name|byte
index|[]
index|[]
name|famAndQf
init|=
name|KeyValue
operator|.
name|parseColumn
argument_list|(
name|getBytes
argument_list|(
name|column
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|famAndQf
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|get
operator|.
name|addFamily
argument_list|(
name|famAndQf
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|get
operator|.
name|addColumn
argument_list|(
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|famAndQf
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|get
operator|.
name|setTimeRange
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
name|gets
operator|.
name|add
argument_list|(
name|get
argument_list|)
expr_stmt|;
block|}
name|Result
index|[]
name|result
init|=
name|table
operator|.
name|get
argument_list|(
name|gets
argument_list|)
decl_stmt|;
return|return
name|ThriftUtilities
operator|.
name|rowResultFromHBase
argument_list|(
name|result
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteAll
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
block|{
name|deleteAllTs
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteAllTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
block|{
try|try
block|{
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|getBytes
argument_list|(
name|row
argument_list|)
argument_list|)
decl_stmt|;
name|addAttributes
argument_list|(
name|delete
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|byte
index|[]
index|[]
name|famAndQf
init|=
name|KeyValue
operator|.
name|parseColumn
argument_list|(
name|getBytes
argument_list|(
name|column
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|famAndQf
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|delete
operator|.
name|deleteFamily
argument_list|(
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|delete
operator|.
name|deleteColumns
argument_list|(
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|famAndQf
index|[
literal|1
index|]
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteAllRow
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
block|{
name|deleteAllRowTs
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteAllRowTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
block|{
try|try
block|{
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|getBytes
argument_list|(
name|row
argument_list|)
argument_list|,
name|timestamp
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|addAttributes
argument_list|(
name|delete
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|table
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|createTable
parameter_list|(
name|ByteBuffer
name|in_tableName
parameter_list|,
name|List
argument_list|<
name|ColumnDescriptor
argument_list|>
name|columnFamilies
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|AlreadyExists
block|{
name|byte
index|[]
name|tableName
init|=
name|getBytes
argument_list|(
name|in_tableName
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|getHBaseAdmin
argument_list|()
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AlreadyExists
argument_list|(
literal|"table name already in use"
argument_list|)
throw|;
block|}
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
for|for
control|(
name|ColumnDescriptor
name|col
range|:
name|columnFamilies
control|)
block|{
name|HColumnDescriptor
name|colDesc
init|=
name|ThriftUtilities
operator|.
name|colDescFromThrift
argument_list|(
name|col
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
name|colDesc
argument_list|)
expr_stmt|;
block|}
name|getHBaseAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgument
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteTable
parameter_list|(
name|ByteBuffer
name|in_tableName
parameter_list|)
throws|throws
name|IOError
block|{
name|byte
index|[]
name|tableName
init|=
name|getBytes
argument_list|(
name|in_tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"deleteTable: table="
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
operator|!
name|getHBaseAdmin
argument_list|()
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"table does not exist"
argument_list|)
throw|;
block|}
name|getHBaseAdmin
argument_list|()
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|mutateRow
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
block|{
name|mutateRowTs
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|mutations
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|mutateRowTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
block|{
name|HTable
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|table
operator|=
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|getBytes
argument_list|(
name|row
argument_list|)
argument_list|,
name|timestamp
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|addAttributes
argument_list|(
name|put
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|getBytes
argument_list|(
name|row
argument_list|)
argument_list|)
decl_stmt|;
name|addAttributes
argument_list|(
name|delete
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
if|if
condition|(
name|metrics
operator|!=
literal|null
condition|)
block|{
name|metrics
operator|.
name|incNumRowKeysInBatchMutate
argument_list|(
name|mutations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// I apologize for all this mess :)
for|for
control|(
name|Mutation
name|m
range|:
name|mutations
control|)
block|{
name|byte
index|[]
index|[]
name|famAndQf
init|=
name|KeyValue
operator|.
name|parseColumn
argument_list|(
name|getBytes
argument_list|(
name|m
operator|.
name|column
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|isDelete
condition|)
block|{
if|if
condition|(
name|famAndQf
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|delete
operator|.
name|deleteFamily
argument_list|(
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|delete
operator|.
name|deleteColumns
argument_list|(
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|famAndQf
index|[
literal|1
index|]
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
name|delete
operator|.
name|setWriteToWAL
argument_list|(
name|m
operator|.
name|writeToWAL
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|famAndQf
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|put
operator|.
name|add
argument_list|(
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|m
operator|.
name|value
operator|!=
literal|null
condition|?
name|m
operator|.
name|value
operator|.
name|array
argument_list|()
else|:
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|put
operator|.
name|add
argument_list|(
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|famAndQf
index|[
literal|1
index|]
argument_list|,
name|m
operator|.
name|value
operator|!=
literal|null
condition|?
name|m
operator|.
name|value
operator|.
name|array
argument_list|()
else|:
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
expr_stmt|;
block|}
name|put
operator|.
name|setWriteToWAL
argument_list|(
name|m
operator|.
name|writeToWAL
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|delete
operator|.
name|isEmpty
argument_list|()
condition|)
name|table
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|put
operator|.
name|isEmpty
argument_list|()
condition|)
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgument
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|mutateRows
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|rowBatches
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
block|{
name|mutateRowsTs
argument_list|(
name|tableName
argument_list|,
name|rowBatches
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|mutateRowsTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|rowBatches
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
block|{
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<
name|Put
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Delete
argument_list|>
name|deletes
init|=
operator|new
name|ArrayList
argument_list|<
name|Delete
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|BatchMutation
name|batch
range|:
name|rowBatches
control|)
block|{
name|byte
index|[]
name|row
init|=
name|getBytes
argument_list|(
name|batch
operator|.
name|row
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
init|=
name|batch
operator|.
name|mutations
decl_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|addAttributes
argument_list|(
name|delete
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|,
name|timestamp
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|addAttributes
argument_list|(
name|put
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
for|for
control|(
name|Mutation
name|m
range|:
name|mutations
control|)
block|{
name|byte
index|[]
index|[]
name|famAndQf
init|=
name|KeyValue
operator|.
name|parseColumn
argument_list|(
name|getBytes
argument_list|(
name|m
operator|.
name|column
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|isDelete
condition|)
block|{
comment|// no qualifier, family only.
if|if
condition|(
name|famAndQf
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|delete
operator|.
name|deleteFamily
argument_list|(
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|delete
operator|.
name|deleteColumns
argument_list|(
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|famAndQf
index|[
literal|1
index|]
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
name|delete
operator|.
name|setWriteToWAL
argument_list|(
name|m
operator|.
name|writeToWAL
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|famAndQf
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|put
operator|.
name|add
argument_list|(
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|m
operator|.
name|value
operator|!=
literal|null
condition|?
name|m
operator|.
name|value
operator|.
name|array
argument_list|()
else|:
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|put
operator|.
name|add
argument_list|(
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|famAndQf
index|[
literal|1
index|]
argument_list|,
name|m
operator|.
name|value
operator|!=
literal|null
condition|?
name|m
operator|.
name|value
operator|.
name|array
argument_list|()
else|:
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
expr_stmt|;
block|}
name|put
operator|.
name|setWriteToWAL
argument_list|(
name|m
operator|.
name|writeToWAL
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|delete
operator|.
name|isEmpty
argument_list|()
condition|)
name|deletes
operator|.
name|add
argument_list|(
name|delete
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|put
operator|.
name|isEmpty
argument_list|()
condition|)
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
name|HTable
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|table
operator|=
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|puts
operator|.
name|isEmpty
argument_list|()
condition|)
name|table
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
for|for
control|(
name|Delete
name|del
range|:
name|deletes
control|)
block|{
name|table
operator|.
name|delete
argument_list|(
name|del
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgument
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Deprecated
annotation|@
name|Override
specifier|public
name|long
name|atomicIncrement
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|long
name|amount
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
block|{
name|byte
index|[]
index|[]
name|famAndQf
init|=
name|KeyValue
operator|.
name|parseColumn
argument_list|(
name|getBytes
argument_list|(
name|column
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|famAndQf
operator|.
name|length
operator|==
literal|1
condition|)
block|{
return|return
name|atomicIncrement
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|famAndQf
index|[
literal|0
index|]
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|amount
argument_list|)
return|;
block|}
return|return
name|atomicIncrement
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|famAndQf
index|[
literal|1
index|]
argument_list|,
name|amount
argument_list|)
return|;
block|}
specifier|protected
name|long
name|atomicIncrement
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
name|amount
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
block|{
name|HTable
name|table
decl_stmt|;
try|try
block|{
name|table
operator|=
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
return|return
name|table
operator|.
name|incrementColumnValue
argument_list|(
name|getBytes
argument_list|(
name|row
argument_list|)
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|amount
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|scannerClose
parameter_list|(
name|int
name|id
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"scannerClose: id="
operator|+
name|id
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|getScanner
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|scanner
operator|==
literal|null
condition|)
block|{
name|String
name|message
init|=
literal|"scanner ID is invalid"
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|message
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgument
argument_list|(
literal|"scanner ID is invalid"
argument_list|)
throw|;
block|}
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|removeScanner
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|scannerGetList
parameter_list|(
name|int
name|id
parameter_list|,
name|int
name|nbRows
parameter_list|)
throws|throws
name|IllegalArgument
throws|,
name|IOError
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"scannerGetList: id="
operator|+
name|id
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|getScanner
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|scanner
condition|)
block|{
name|String
name|message
init|=
literal|"scanner ID is invalid"
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|message
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgument
argument_list|(
literal|"scanner ID is invalid"
argument_list|)
throw|;
block|}
name|Result
index|[]
name|results
init|=
literal|null
decl_stmt|;
try|try
block|{
name|results
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|nbRows
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|results
condition|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|ThriftUtilities
operator|.
name|rowResultFromHBase
argument_list|(
name|results
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|scannerGet
parameter_list|(
name|int
name|id
parameter_list|)
throws|throws
name|IllegalArgument
throws|,
name|IOError
block|{
return|return
name|scannerGetList
argument_list|(
name|id
argument_list|,
literal|1
argument_list|)
return|;
block|}
specifier|public
name|int
name|scannerOpenWithScan
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|TScan
name|tScan
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
block|{
try|try
block|{
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|addAttributes
argument_list|(
name|scan
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
if|if
condition|(
name|tScan
operator|.
name|isSetStartRow
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setStartRow
argument_list|(
name|tScan
operator|.
name|getStartRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tScan
operator|.
name|isSetStopRow
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setStopRow
argument_list|(
name|tScan
operator|.
name|getStopRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tScan
operator|.
name|isSetTimestamp
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setTimeRange
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|tScan
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tScan
operator|.
name|isSetCaching
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setCaching
argument_list|(
name|tScan
operator|.
name|getCaching
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tScan
operator|.
name|isSetColumns
argument_list|()
operator|&&
name|tScan
operator|.
name|getColumns
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
for|for
control|(
name|ByteBuffer
name|column
range|:
name|tScan
operator|.
name|getColumns
argument_list|()
control|)
block|{
name|byte
index|[]
index|[]
name|famQf
init|=
name|KeyValue
operator|.
name|parseColumn
argument_list|(
name|getBytes
argument_list|(
name|column
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|famQf
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|scan
operator|.
name|addFamily
argument_list|(
name|famQf
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scan
operator|.
name|addColumn
argument_list|(
name|famQf
index|[
literal|0
index|]
argument_list|,
name|famQf
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|tScan
operator|.
name|isSetFilterString
argument_list|()
condition|)
block|{
name|ParseFilter
name|parseFilter
init|=
operator|new
name|ParseFilter
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
name|parseFilter
operator|.
name|parseFilterString
argument_list|(
name|tScan
operator|.
name|getFilterString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|addScanner
argument_list|(
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|scannerOpen
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
block|{
try|try
block|{
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|getBytes
argument_list|(
name|startRow
argument_list|)
argument_list|)
decl_stmt|;
name|addAttributes
argument_list|(
name|scan
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
if|if
condition|(
name|columns
operator|!=
literal|null
operator|&&
name|columns
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
for|for
control|(
name|ByteBuffer
name|column
range|:
name|columns
control|)
block|{
name|byte
index|[]
index|[]
name|famQf
init|=
name|KeyValue
operator|.
name|parseColumn
argument_list|(
name|getBytes
argument_list|(
name|column
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|famQf
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|scan
operator|.
name|addFamily
argument_list|(
name|famQf
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scan
operator|.
name|addColumn
argument_list|(
name|famQf
index|[
literal|0
index|]
argument_list|,
name|famQf
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|addScanner
argument_list|(
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|scannerOpenWithStop
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|ByteBuffer
name|stopRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
try|try
block|{
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|getBytes
argument_list|(
name|startRow
argument_list|)
argument_list|,
name|getBytes
argument_list|(
name|stopRow
argument_list|)
argument_list|)
decl_stmt|;
name|addAttributes
argument_list|(
name|scan
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
if|if
condition|(
name|columns
operator|!=
literal|null
operator|&&
name|columns
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
for|for
control|(
name|ByteBuffer
name|column
range|:
name|columns
control|)
block|{
name|byte
index|[]
index|[]
name|famQf
init|=
name|KeyValue
operator|.
name|parseColumn
argument_list|(
name|getBytes
argument_list|(
name|column
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|famQf
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|scan
operator|.
name|addFamily
argument_list|(
name|famQf
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scan
operator|.
name|addColumn
argument_list|(
name|famQf
index|[
literal|0
index|]
argument_list|,
name|famQf
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|addScanner
argument_list|(
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|scannerOpenWithPrefix
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startAndPrefix
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
try|try
block|{
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|getBytes
argument_list|(
name|startAndPrefix
argument_list|)
argument_list|)
decl_stmt|;
name|addAttributes
argument_list|(
name|scan
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|Filter
name|f
init|=
operator|new
name|WhileMatchFilter
argument_list|(
operator|new
name|PrefixFilter
argument_list|(
name|getBytes
argument_list|(
name|startAndPrefix
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
if|if
condition|(
name|columns
operator|!=
literal|null
operator|&&
name|columns
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
for|for
control|(
name|ByteBuffer
name|column
range|:
name|columns
control|)
block|{
name|byte
index|[]
index|[]
name|famQf
init|=
name|KeyValue
operator|.
name|parseColumn
argument_list|(
name|getBytes
argument_list|(
name|column
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|famQf
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|scan
operator|.
name|addFamily
argument_list|(
name|famQf
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scan
operator|.
name|addColumn
argument_list|(
name|famQf
index|[
literal|0
index|]
argument_list|,
name|famQf
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|addScanner
argument_list|(
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|scannerOpenTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
try|try
block|{
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|getBytes
argument_list|(
name|startRow
argument_list|)
argument_list|)
decl_stmt|;
name|addAttributes
argument_list|(
name|scan
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setTimeRange
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
if|if
condition|(
name|columns
operator|!=
literal|null
operator|&&
name|columns
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
for|for
control|(
name|ByteBuffer
name|column
range|:
name|columns
control|)
block|{
name|byte
index|[]
index|[]
name|famQf
init|=
name|KeyValue
operator|.
name|parseColumn
argument_list|(
name|getBytes
argument_list|(
name|column
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|famQf
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|scan
operator|.
name|addFamily
argument_list|(
name|famQf
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scan
operator|.
name|addColumn
argument_list|(
name|famQf
index|[
literal|0
index|]
argument_list|,
name|famQf
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|addScanner
argument_list|(
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|scannerOpenWithStopTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|ByteBuffer
name|stopRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
try|try
block|{
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|getBytes
argument_list|(
name|startRow
argument_list|)
argument_list|,
name|getBytes
argument_list|(
name|stopRow
argument_list|)
argument_list|)
decl_stmt|;
name|addAttributes
argument_list|(
name|scan
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setTimeRange
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
if|if
condition|(
name|columns
operator|!=
literal|null
operator|&&
name|columns
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
for|for
control|(
name|ByteBuffer
name|column
range|:
name|columns
control|)
block|{
name|byte
index|[]
index|[]
name|famQf
init|=
name|KeyValue
operator|.
name|parseColumn
argument_list|(
name|getBytes
argument_list|(
name|column
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|famQf
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|scan
operator|.
name|addFamily
argument_list|(
name|famQf
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scan
operator|.
name|addColumn
argument_list|(
name|famQf
index|[
literal|0
index|]
argument_list|,
name|famQf
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|scan
operator|.
name|setTimeRange
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
return|return
name|addScanner
argument_list|(
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ColumnDescriptor
argument_list|>
name|getColumnDescriptors
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
try|try
block|{
name|TreeMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ColumnDescriptor
argument_list|>
name|columns
init|=
operator|new
name|TreeMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ColumnDescriptor
argument_list|>
argument_list|()
decl_stmt|;
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|desc
init|=
name|table
operator|.
name|getTableDescriptor
argument_list|()
decl_stmt|;
for|for
control|(
name|HColumnDescriptor
name|e
range|:
name|desc
operator|.
name|getFamilies
argument_list|()
control|)
block|{
name|ColumnDescriptor
name|col
init|=
name|ThriftUtilities
operator|.
name|colDescFromHbase
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|columns
operator|.
name|put
argument_list|(
name|col
operator|.
name|name
argument_list|,
name|col
argument_list|)
expr_stmt|;
block|}
return|return
name|columns
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|getRowOrBefore
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|family
parameter_list|)
throws|throws
name|IOError
block|{
try|try
block|{
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|getBytes
argument_list|(
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|table
operator|.
name|getRowOrBefore
argument_list|(
name|getBytes
argument_list|(
name|row
argument_list|)
argument_list|,
name|getBytes
argument_list|(
name|family
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|ThriftUtilities
operator|.
name|cellFromHBase
argument_list|(
name|result
operator|.
name|raw
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|TRegionInfo
name|getRegionInfo
parameter_list|(
name|ByteBuffer
name|searchRow
parameter_list|)
throws|throws
name|IOError
block|{
try|try
block|{
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|HConstants
operator|.
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row
init|=
name|toBytes
argument_list|(
name|searchRow
argument_list|)
decl_stmt|;
name|Result
name|startRowResult
init|=
name|table
operator|.
name|getRowOrBefore
argument_list|(
name|row
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
decl_stmt|;
if|if
condition|(
name|startRowResult
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot find row in .META., row="
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|row
argument_list|)
argument_list|)
throw|;
block|}
comment|// find region start and end keys
name|byte
index|[]
name|value
init|=
name|startRowResult
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|REGIONINFO_QUALIFIER
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"HRegionInfo REGIONINFO was null or "
operator|+
literal|" empty in Meta for row="
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|row
argument_list|)
argument_list|)
throw|;
block|}
name|HRegionInfo
name|regionInfo
init|=
name|Writables
operator|.
name|getHRegionInfo
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|TRegionInfo
name|region
init|=
operator|new
name|TRegionInfo
argument_list|()
decl_stmt|;
name|region
operator|.
name|setStartKey
argument_list|(
name|regionInfo
operator|.
name|getStartKey
argument_list|()
argument_list|)
expr_stmt|;
name|region
operator|.
name|setEndKey
argument_list|(
name|regionInfo
operator|.
name|getEndKey
argument_list|()
argument_list|)
expr_stmt|;
name|region
operator|.
name|id
operator|=
name|regionInfo
operator|.
name|getRegionId
argument_list|()
expr_stmt|;
name|region
operator|.
name|setName
argument_list|(
name|regionInfo
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
name|region
operator|.
name|version
operator|=
name|regionInfo
operator|.
name|getVersion
argument_list|()
expr_stmt|;
comment|// find region assignment to server
name|value
operator|=
name|startRowResult
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|SERVER_QUALIFIER
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|value
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|String
name|hostAndPort
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|region
operator|.
name|setServerName
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Addressing
operator|.
name|parseHostname
argument_list|(
name|hostAndPort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|port
operator|=
name|Addressing
operator|.
name|parsePort
argument_list|(
name|hostAndPort
argument_list|)
expr_stmt|;
block|}
return|return
name|region
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|initMetrics
parameter_list|(
name|ThriftMetrics
name|metrics
parameter_list|)
block|{
name|this
operator|.
name|metrics
operator|=
name|metrics
expr_stmt|;
block|}
block|}
comment|/**    * Adds all the attributes into the Operation object    */
specifier|private
specifier|static
name|void
name|addAttributes
parameter_list|(
name|OperationWithAttributes
name|op
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
block|{
if|if
condition|(
name|attributes
operator|==
literal|null
operator|||
name|attributes
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|entry
range|:
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|op
operator|.
name|setAttribute
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|registerFilters
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
index|[]
name|filters
init|=
name|conf
operator|.
name|getStrings
argument_list|(
literal|"hbase.thrift.filters"
argument_list|)
decl_stmt|;
if|if
condition|(
name|filters
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|filterClass
range|:
name|filters
control|)
block|{
name|String
index|[]
name|filterPart
init|=
name|filterClass
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|filterPart
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Invalid filter specification "
operator|+
name|filterClass
operator|+
literal|" - skipping"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ParseFilter
operator|.
name|registerFilter
argument_list|(
name|filterPart
index|[
literal|0
index|]
argument_list|,
name|filterPart
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

