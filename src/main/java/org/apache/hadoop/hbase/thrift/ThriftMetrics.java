begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|Hbase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|MetricsContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|MetricsRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|MetricsUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|Updater
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|util
operator|.
name|MetricsBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|util
operator|.
name|MetricsIntValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|util
operator|.
name|MetricsRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|util
operator|.
name|MetricsTimeVaryingInt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|util
operator|.
name|MetricsTimeVaryingLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|util
operator|.
name|MetricsTimeVaryingRate
import|;
end_import

begin_comment
comment|/**  * This class is for maintaining the various statistics of thrift server  * and publishing them through the metrics interfaces.  */
end_comment

begin_class
specifier|public
class|class
name|ThriftMetrics
implements|implements
name|Updater
block|{
specifier|public
specifier|final
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ThriftMetrics
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|CONTEXT_NAME
init|=
literal|"thriftserver"
decl_stmt|;
specifier|private
specifier|final
name|MetricsContext
name|context
decl_stmt|;
specifier|private
specifier|final
name|MetricsRecord
name|metricsRecord
decl_stmt|;
specifier|private
specifier|final
name|MetricsRegistry
name|registry
init|=
operator|new
name|MetricsRegistry
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|long
name|slowResponseTime
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SLOW_RESPONSE_NANO_SEC
init|=
literal|"hbase.thrift.slow.response.nano.second"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_SLOW_RESPONSE_NANO_SEC
init|=
literal|10
operator|*
literal|1000
operator|*
literal|1000
decl_stmt|;
specifier|private
specifier|final
name|MetricsIntValue
name|callQueueLen
init|=
operator|new
name|MetricsIntValue
argument_list|(
literal|"callQueueLen"
argument_list|,
name|registry
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|MetricsTimeVaryingRate
name|timeInQueue
init|=
operator|new
name|MetricsTimeVaryingRate
argument_list|(
literal|"timeInQueue"
argument_list|,
name|registry
argument_list|)
decl_stmt|;
specifier|private
name|MetricsTimeVaryingRate
name|thriftCall
init|=
operator|new
name|MetricsTimeVaryingRate
argument_list|(
literal|"thriftCall"
argument_list|,
name|registry
argument_list|)
decl_stmt|;
specifier|private
name|MetricsTimeVaryingRate
name|slowThriftCall
init|=
operator|new
name|MetricsTimeVaryingRate
argument_list|(
literal|"slowThriftCall"
argument_list|,
name|registry
argument_list|)
decl_stmt|;
specifier|public
name|ThriftMetrics
parameter_list|(
name|int
name|port
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|iface
parameter_list|)
block|{
name|slowResponseTime
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|SLOW_RESPONSE_NANO_SEC
argument_list|,
name|DEFAULT_SLOW_RESPONSE_NANO_SEC
argument_list|)
expr_stmt|;
name|context
operator|=
name|MetricsUtil
operator|.
name|getContext
argument_list|(
name|CONTEXT_NAME
argument_list|)
expr_stmt|;
name|metricsRecord
operator|=
name|MetricsUtil
operator|.
name|createRecord
argument_list|(
name|context
argument_list|,
name|CONTEXT_NAME
argument_list|)
expr_stmt|;
name|metricsRecord
operator|.
name|setTag
argument_list|(
literal|"port"
argument_list|,
name|port
operator|+
literal|""
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing RPC Metrics with port="
operator|+
name|port
argument_list|)
expr_stmt|;
name|context
operator|.
name|registerUpdater
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|createMetricsForMethods
argument_list|(
name|iface
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|incTimeInQueue
parameter_list|(
name|long
name|time
parameter_list|)
block|{
name|timeInQueue
operator|.
name|inc
argument_list|(
name|time
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setCallQueueLen
parameter_list|(
name|int
name|len
parameter_list|)
block|{
name|callQueueLen
operator|.
name|set
argument_list|(
name|len
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|incMethodTime
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|time
parameter_list|)
block|{
name|MetricsTimeVaryingRate
name|methodTimeMetrc
init|=
name|getMethodTimeMetrics
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|methodTimeMetrc
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Got incMethodTime() request for method that doesnt exist: "
operator|+
name|name
argument_list|)
expr_stmt|;
return|return;
comment|// ignore methods that dont exist.
block|}
comment|// inc method specific processTime
name|methodTimeMetrc
operator|.
name|inc
argument_list|(
name|time
argument_list|)
expr_stmt|;
comment|// inc general processTime
name|thriftCall
operator|.
name|inc
argument_list|(
name|time
argument_list|)
expr_stmt|;
if|if
condition|(
name|time
operator|>
name|slowResponseTime
condition|)
block|{
name|slowThriftCall
operator|.
name|inc
argument_list|(
name|time
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|createMetricsForMethods
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|iface
parameter_list|)
block|{
for|for
control|(
name|Method
name|m
range|:
name|iface
operator|.
name|getDeclaredMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|getMethodTimeMetrics
argument_list|(
name|m
operator|.
name|getName
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating metrics for method:"
operator|+
name|m
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|createMethodTimeMetrics
argument_list|(
name|m
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|MetricsTimeVaryingRate
name|getMethodTimeMetrics
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
operator|(
name|MetricsTimeVaryingRate
operator|)
name|registry
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|private
name|MetricsTimeVaryingRate
name|createMethodTimeMetrics
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
operator|new
name|MetricsTimeVaryingRate
argument_list|(
name|key
argument_list|,
name|this
operator|.
name|registry
argument_list|)
return|;
block|}
comment|/**    * Push the metrics to the monitoring subsystem on doUpdate() call.    */
specifier|public
name|void
name|doUpdates
parameter_list|(
specifier|final
name|MetricsContext
name|context
parameter_list|)
block|{
comment|// getMetricsList() and pushMetric() are thread safe methods
for|for
control|(
name|MetricsBase
name|m
range|:
name|registry
operator|.
name|getMetricsList
argument_list|()
control|)
block|{
name|m
operator|.
name|pushMetric
argument_list|(
name|metricsRecord
argument_list|)
expr_stmt|;
block|}
name|metricsRecord
operator|.
name|update
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

