begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * This is a generic HBase executor service. This component abstract a  * threadpool, a queue to which jobs can be submitted and a Runnable that  * handles the object that is added to the queue.  *  * In order to create a new HBExecutorService, you need to do:  *   HBExecutorService.startExecutorService("myService");  *  * In order to use the service created above, you need to override the  * HBEventHandler class and create an event type that submits to this service.  *  */
end_comment

begin_class
specifier|public
class|class
name|HBaseExecutorService
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HBaseExecutorService
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// default number of threads in the pool
specifier|private
name|int
name|corePoolSize
init|=
literal|1
decl_stmt|;
comment|// max number of threads - maximum concurrency
specifier|private
name|int
name|maximumPoolSize
init|=
literal|5
decl_stmt|;
comment|// how long to retain excess threads
specifier|private
name|long
name|keepAliveTimeInMillis
init|=
literal|1000
decl_stmt|;
comment|// the thread pool executor that services the requests
name|ThreadPoolExecutor
name|threadPoolExecutor
decl_stmt|;
comment|// work queue to use - unbounded queue
name|BlockingQueue
argument_list|<
name|Runnable
argument_list|>
name|workQueue
init|=
operator|new
name|LinkedBlockingQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
decl_stmt|;
comment|// name for this executor service
name|String
name|name
decl_stmt|;
comment|// hold the all the executors created in a map addressable by their names
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|HBaseExecutorService
argument_list|>
name|executorServicesMap
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|HBaseExecutorService
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
comment|/**    * The following is a list of names for the various executor services in both     * the master and the region server.    */
specifier|public
enum|enum
name|HBaseExecutorServiceType
block|{
name|NONE
argument_list|(
operator|-
literal|1
argument_list|)
block|,
name|MASTER_CLOSEREGION
argument_list|(
literal|1
argument_list|)
block|,
name|MASTER_OPENREGION
argument_list|(
literal|2
argument_list|)
block|;
specifier|private
specifier|final
name|int
name|value
decl_stmt|;
name|HBaseExecutorServiceType
parameter_list|(
name|int
name|intValue
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|intValue
expr_stmt|;
block|}
specifier|public
name|void
name|startExecutorService
parameter_list|(
name|String
name|serverName
parameter_list|)
block|{
comment|// if this is NONE then there is no executor to start
if|if
condition|(
name|value
operator|==
name|NONE
operator|.
name|value
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot start NONE executor type."
argument_list|)
throw|;
block|}
name|String
name|name
init|=
name|getExecutorName
argument_list|(
name|serverName
argument_list|)
decl_stmt|;
if|if
condition|(
name|HBaseExecutorService
operator|.
name|isExecutorServiceRunning
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executor service "
operator|+
name|toString
argument_list|()
operator|+
literal|" already running on "
operator|+
name|serverName
argument_list|)
expr_stmt|;
return|return;
block|}
name|HBaseExecutorService
operator|.
name|startExecutorService
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
specifier|public
name|HBaseExecutorService
name|getExecutor
parameter_list|(
name|String
name|serverName
parameter_list|)
block|{
comment|// if this is NONE then there is no executor
if|if
condition|(
name|value
operator|==
name|NONE
operator|.
name|value
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|HBaseExecutorService
operator|.
name|getExecutorService
argument_list|(
name|getExecutorName
argument_list|(
name|serverName
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|String
name|getExecutorName
parameter_list|(
name|String
name|serverName
parameter_list|)
block|{
comment|// if this is NONE then there is no executor
if|if
condition|(
name|value
operator|==
name|NONE
operator|.
name|value
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|(
name|this
operator|.
name|toString
argument_list|()
operator|+
literal|"-"
operator|+
name|serverName
operator|)
return|;
block|}
block|}
comment|/**    * Start an executor service with a given name. If there was a service already    * started with the same name, this throws a RuntimeException.    * @param name Name of the service to start.    */
specifier|public
specifier|static
name|void
name|startExecutorService
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|executorServicesMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"An executor service with the name "
operator|+
name|name
operator|+
literal|" is already running!"
argument_list|)
throw|;
block|}
name|HBaseExecutorService
name|hbes
init|=
operator|new
name|HBaseExecutorService
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|executorServicesMap
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|hbes
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting executor service: "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|boolean
name|isExecutorServiceRunning
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|(
name|executorServicesMap
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
operator|)
return|;
block|}
comment|/**    * This method is an accessor for all the HBExecutorServices running so far    * addressable by name. If there is no such service, then it returns null.    */
specifier|public
specifier|static
name|HBaseExecutorService
name|getExecutorService
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|HBaseExecutorService
name|executor
init|=
name|executorServicesMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|executor
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executor service ["
operator|+
name|name
operator|+
literal|"] not found."
argument_list|)
expr_stmt|;
block|}
return|return
name|executor
return|;
block|}
specifier|public
specifier|static
name|void
name|shutdown
parameter_list|()
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|HBaseExecutorService
argument_list|>
name|entry
range|:
name|executorServicesMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|threadPoolExecutor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|executorServicesMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|HBaseExecutorService
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
comment|// create the thread pool executor
name|threadPoolExecutor
operator|=
operator|new
name|ThreadPoolExecutor
argument_list|(
name|corePoolSize
argument_list|,
name|maximumPoolSize
argument_list|,
name|keepAliveTimeInMillis
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
name|workQueue
argument_list|)
expr_stmt|;
comment|// name the threads for this threadpool
name|threadPoolExecutor
operator|.
name|setThreadFactory
argument_list|(
operator|new
name|NamedThreadFactory
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Submit the event to the queue for handling.    * @param event    */
specifier|public
name|void
name|submit
parameter_list|(
name|Runnable
name|event
parameter_list|)
block|{
name|threadPoolExecutor
operator|.
name|execute
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

