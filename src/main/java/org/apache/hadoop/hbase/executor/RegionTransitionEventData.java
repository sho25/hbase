begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|HBaseEventHandler
operator|.
name|HBaseEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_class
specifier|public
class|class
name|RegionTransitionEventData
implements|implements
name|Writable
block|{
specifier|private
name|HBaseEventType
name|hbEvent
decl_stmt|;
specifier|private
name|String
name|rsName
decl_stmt|;
specifier|private
name|long
name|timeStamp
decl_stmt|;
specifier|private
name|HMsg
name|hmsg
decl_stmt|;
specifier|public
name|RegionTransitionEventData
parameter_list|()
block|{   }
specifier|public
name|RegionTransitionEventData
parameter_list|(
name|HBaseEventType
name|hbEvent
parameter_list|,
name|String
name|rsName
parameter_list|)
block|{
name|this
argument_list|(
name|hbEvent
argument_list|,
name|rsName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RegionTransitionEventData
parameter_list|(
name|HBaseEventType
name|hbEvent
parameter_list|,
name|String
name|rsName
parameter_list|,
name|HMsg
name|hmsg
parameter_list|)
block|{
name|this
operator|.
name|hbEvent
operator|=
name|hbEvent
expr_stmt|;
name|this
operator|.
name|rsName
operator|=
name|rsName
expr_stmt|;
name|this
operator|.
name|timeStamp
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|this
operator|.
name|hmsg
operator|=
name|hmsg
expr_stmt|;
block|}
specifier|public
name|HBaseEventType
name|getHbEvent
parameter_list|()
block|{
return|return
name|hbEvent
return|;
block|}
specifier|public
name|String
name|getRsName
parameter_list|()
block|{
return|return
name|rsName
return|;
block|}
specifier|public
name|long
name|getTimeStamp
parameter_list|()
block|{
return|return
name|timeStamp
return|;
block|}
specifier|public
name|HMsg
name|getHmsg
parameter_list|()
block|{
return|return
name|hmsg
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
comment|// the event type byte
name|hbEvent
operator|=
name|HBaseEventType
operator|.
name|fromByte
argument_list|(
name|in
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
comment|// the hostname of the RS sending the data
name|rsName
operator|=
name|in
operator|.
name|readUTF
argument_list|()
expr_stmt|;
comment|// the timestamp
name|timeStamp
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
comment|// deserialized the HMsg from ZK
name|hmsg
operator|=
operator|new
name|HMsg
argument_list|()
expr_stmt|;
name|hmsg
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeByte
argument_list|(
name|hbEvent
operator|.
name|getByteValue
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeUTF
argument_list|(
name|rsName
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
operator|(
name|hmsg
operator|!=
literal|null
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hmsg
operator|!=
literal|null
condition|)
block|{
name|hmsg
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

