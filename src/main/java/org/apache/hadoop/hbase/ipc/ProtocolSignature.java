begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableFactory
import|;
end_import

begin_class
specifier|public
class|class
name|ProtocolSignature
implements|implements
name|Writable
block|{
static|static
block|{
comment|// register a ctor
name|WritableFactories
operator|.
name|setFactory
argument_list|(
name|ProtocolSignature
operator|.
name|class
argument_list|,
operator|new
name|WritableFactory
argument_list|()
block|{
specifier|public
name|Writable
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|ProtocolSignature
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|long
name|version
decl_stmt|;
specifier|private
name|int
index|[]
name|methods
init|=
literal|null
decl_stmt|;
comment|// an array of method hash codes
comment|/**    * default constructor    */
specifier|public
name|ProtocolSignature
parameter_list|()
block|{   }
comment|/**    * Constructor    *    * @param version server version    * @param methodHashcodes hash codes of the methods supported by server    */
specifier|public
name|ProtocolSignature
parameter_list|(
name|long
name|version
parameter_list|,
name|int
index|[]
name|methodHashcodes
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
name|this
operator|.
name|methods
operator|=
name|methodHashcodes
expr_stmt|;
block|}
specifier|public
name|long
name|getVersion
parameter_list|()
block|{
return|return
name|version
return|;
block|}
specifier|public
name|int
index|[]
name|getMethods
parameter_list|()
block|{
return|return
name|methods
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|version
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|boolean
name|hasMethods
init|=
name|in
operator|.
name|readBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasMethods
condition|)
block|{
name|int
name|numMethods
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|methods
operator|=
operator|new
name|int
index|[
name|numMethods
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numMethods
condition|;
name|i
operator|++
control|)
block|{
name|methods
index|[
name|i
index|]
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|version
argument_list|)
expr_stmt|;
if|if
condition|(
name|methods
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|methods
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|method
range|:
name|methods
control|)
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|method
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Calculate a method's hash code considering its method    * name, returning type, and its parameter types    *    * @param method a method    * @return its hash code    */
specifier|static
name|int
name|getFingerprint
parameter_list|(
name|Method
name|method
parameter_list|)
block|{
name|int
name|hashcode
init|=
name|method
operator|.
name|getName
argument_list|()
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|hashcode
operator|=
name|hashcode
operator|+
literal|31
operator|*
name|method
operator|.
name|getReturnType
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|hashCode
argument_list|()
expr_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
range|:
name|method
operator|.
name|getParameterTypes
argument_list|()
control|)
block|{
name|hashcode
operator|=
literal|31
operator|*
name|hashcode
operator|^
name|type
operator|.
name|getName
argument_list|()
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
return|return
name|hashcode
return|;
block|}
comment|/**    * Convert an array of Method into an array of hash codes    *    * @param methods    * @return array of hash codes    */
specifier|private
specifier|static
name|int
index|[]
name|getFingerprints
parameter_list|(
name|Method
index|[]
name|methods
parameter_list|)
block|{
if|if
condition|(
name|methods
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
index|[]
name|hashCodes
init|=
operator|new
name|int
index|[
name|methods
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|methods
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|hashCodes
index|[
name|i
index|]
operator|=
name|getFingerprint
argument_list|(
name|methods
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|hashCodes
return|;
block|}
comment|/**    * Get the hash code of an array of methods    * Methods are sorted before hashcode is calculated.    * So the returned value is irrelevant of the method order in the array.    *    * @param methods an array of methods    * @return the hash code    */
specifier|static
name|int
name|getFingerprint
parameter_list|(
name|Method
index|[]
name|methods
parameter_list|)
block|{
return|return
name|getFingerprint
argument_list|(
name|getFingerprints
argument_list|(
name|methods
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Get the hash code of an array of hashcodes    * Hashcodes are sorted before hashcode is calculated.    * So the returned value is irrelevant of the hashcode order in the array.    *    * @param methods an array of methods    * @return the hash code    */
specifier|static
name|int
name|getFingerprint
parameter_list|(
name|int
index|[]
name|hashcodes
parameter_list|)
block|{
name|Arrays
operator|.
name|sort
argument_list|(
name|hashcodes
argument_list|)
expr_stmt|;
return|return
name|Arrays
operator|.
name|hashCode
argument_list|(
name|hashcodes
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|ProtocolSigFingerprint
block|{
specifier|private
name|ProtocolSignature
name|signature
decl_stmt|;
specifier|private
name|int
name|fingerprint
decl_stmt|;
name|ProtocolSigFingerprint
parameter_list|(
name|ProtocolSignature
name|sig
parameter_list|,
name|int
name|fingerprint
parameter_list|)
block|{
name|this
operator|.
name|signature
operator|=
name|sig
expr_stmt|;
name|this
operator|.
name|fingerprint
operator|=
name|fingerprint
expr_stmt|;
block|}
block|}
comment|/**    * A cache that maps a protocol's name to its signature& finger print    */
specifier|final
specifier|private
specifier|static
name|HashMap
argument_list|<
name|String
argument_list|,
name|ProtocolSigFingerprint
argument_list|>
name|PROTOCOL_FINGERPRINT_CACHE
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ProtocolSigFingerprint
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Return a protocol's signature and finger print from cache    *    * @param protocol a protocol class    * @param serverVersion protocol version    * @return its signature and finger print    */
specifier|private
specifier|static
name|ProtocolSigFingerprint
name|getSigFingerprint
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|VersionedProtocol
argument_list|>
name|protocol
parameter_list|,
name|long
name|serverVersion
parameter_list|)
block|{
name|String
name|protocolName
init|=
name|protocol
operator|.
name|getName
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|PROTOCOL_FINGERPRINT_CACHE
init|)
block|{
name|ProtocolSigFingerprint
name|sig
init|=
name|PROTOCOL_FINGERPRINT_CACHE
operator|.
name|get
argument_list|(
name|protocolName
argument_list|)
decl_stmt|;
if|if
condition|(
name|sig
operator|==
literal|null
condition|)
block|{
name|int
index|[]
name|serverMethodHashcodes
init|=
name|getFingerprints
argument_list|(
name|protocol
operator|.
name|getMethods
argument_list|()
argument_list|)
decl_stmt|;
name|sig
operator|=
operator|new
name|ProtocolSigFingerprint
argument_list|(
operator|new
name|ProtocolSignature
argument_list|(
name|serverVersion
argument_list|,
name|serverMethodHashcodes
argument_list|)
argument_list|,
name|getFingerprint
argument_list|(
name|serverMethodHashcodes
argument_list|)
argument_list|)
expr_stmt|;
name|PROTOCOL_FINGERPRINT_CACHE
operator|.
name|put
argument_list|(
name|protocolName
argument_list|,
name|sig
argument_list|)
expr_stmt|;
block|}
return|return
name|sig
return|;
block|}
block|}
comment|/**    * Get a server protocol's signature    *    * @param clientMethodsHashCode client protocol methods hashcode    * @param serverVersion server protocol version    * @param protocol protocol    * @return the server's protocol signature    */
specifier|static
name|ProtocolSignature
name|getProtocolSignature
parameter_list|(
name|int
name|clientMethodsHashCode
parameter_list|,
name|long
name|serverVersion
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|VersionedProtocol
argument_list|>
name|protocol
parameter_list|)
block|{
comment|// try to get the finger print& signature from the cache
name|ProtocolSigFingerprint
name|sig
init|=
name|getSigFingerprint
argument_list|(
name|protocol
argument_list|,
name|serverVersion
argument_list|)
decl_stmt|;
comment|// check if the client side protocol matches the one on the server side
if|if
condition|(
name|clientMethodsHashCode
operator|==
name|sig
operator|.
name|fingerprint
condition|)
block|{
return|return
operator|new
name|ProtocolSignature
argument_list|(
name|serverVersion
argument_list|,
literal|null
argument_list|)
return|;
comment|// null indicates a match
block|}
return|return
name|sig
operator|.
name|signature
return|;
block|}
comment|/**    * Get a server protocol's signature    *    * @param server server implementation    * @param protocol server protocol    * @param clientVersion client's version    * @param clientMethodsHash client's protocol's hash code    * @return the server protocol's signature    * @throws IOException if any error occurs    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
name|ProtocolSignature
name|getProtocolSignature
parameter_list|(
name|VersionedProtocol
name|server
parameter_list|,
name|String
name|protocol
parameter_list|,
name|long
name|clientVersion
parameter_list|,
name|int
name|clientMethodsHash
parameter_list|)
throws|throws
name|IOException
block|{
name|Class
argument_list|<
name|?
extends|extends
name|VersionedProtocol
argument_list|>
name|inter
decl_stmt|;
try|try
block|{
name|inter
operator|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|VersionedProtocol
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|protocol
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|long
name|serverVersion
init|=
name|server
operator|.
name|getProtocolVersion
argument_list|(
name|protocol
argument_list|,
name|clientVersion
argument_list|)
decl_stmt|;
return|return
name|ProtocolSignature
operator|.
name|getProtocolSignature
argument_list|(
name|clientMethodsHash
argument_list|,
name|serverVersion
argument_list|,
name|inter
argument_list|)
return|;
block|}
block|}
end_class

end_unit

