begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FilterFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_comment
comment|/**  * An encapsulation for the FileSystem object that hbase uses to access  * data. This class allows the flexibility of using    * separate filesystem objects for reading and writing hfiles and hlogs.  * In future, if we want to make hlogs be in a different filesystem,  * this is the place to make it happen.  */
end_comment

begin_class
specifier|public
class|class
name|HFileSystem
extends|extends
name|FilterFileSystem
block|{
specifier|private
specifier|final
name|FileSystem
name|noChecksumFs
decl_stmt|;
comment|// read hfile data from storage
specifier|private
specifier|final
name|boolean
name|useHBaseChecksum
decl_stmt|;
comment|/**    * Create a FileSystem object for HBase regionservers.    * @param conf The configuration to be used for the filesystem    * @param useHBaseChecksums if true, then use    *        checksum verfication in hbase, otherwise    *        delegate checksum verification to the FileSystem.    */
specifier|public
name|HFileSystem
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|boolean
name|useHBaseChecksum
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Create the default filesystem with checksum verification switched on.
comment|// By default, any operation to this FilterFileSystem occurs on
comment|// the underlying filesystem that has checksums switched on.
name|this
operator|.
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|useHBaseChecksum
operator|=
name|useHBaseChecksum
expr_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// If hbase checksum verification is switched on, then create a new
comment|// filesystem object that has cksum verification turned off.
comment|// We will avoid verifying checksums in the fs client, instead do it
comment|// inside of hbase.
if|if
condition|(
name|useHBaseChecksum
condition|)
block|{
name|this
operator|.
name|noChecksumFs
operator|=
name|newInstanceFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|noChecksumFs
operator|.
name|setVerifyChecksum
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|noChecksumFs
operator|=
name|fs
expr_stmt|;
block|}
block|}
comment|/**    * Wrap a FileSystem object within a HFileSystem. The noChecksumFs and    * writefs are both set to be the same specified fs.     * Do not verify hbase-checksums while reading data from filesystem.    * @param fs Set the noChecksumFs and writeFs to this specified filesystem.    */
specifier|public
name|HFileSystem
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
block|{
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|noChecksumFs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|useHBaseChecksum
operator|=
literal|false
expr_stmt|;
block|}
comment|/**    * Returns the filesystem that is specially setup for     * doing reads from storage. This object avoids doing     * checksum verifications for reads.    * @return The FileSystem object that can be used to read data    *         from files.    */
specifier|public
name|FileSystem
name|getNoChecksumFs
parameter_list|()
block|{
return|return
name|noChecksumFs
return|;
block|}
comment|/**    * Returns the underlying filesystem    * @return The underlying FileSystem for this FilterFileSystem object.    */
specifier|public
name|FileSystem
name|getBackingFs
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|fs
return|;
block|}
comment|/**    * Are we verifying checksums in HBase?    * @return True, if hbase is configured to verify checksums,    *         otherwise false.    */
specifier|public
name|boolean
name|useHBaseChecksum
parameter_list|()
block|{
return|return
name|useHBaseChecksum
return|;
block|}
comment|/**    * Close this filesystem object    */
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|noChecksumFs
operator|!=
name|fs
condition|)
block|{
name|this
operator|.
name|noChecksumFs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Returns a brand new instance of the FileSystem. It does not use    * the FileSystem.Cache. In newer versions of HDFS, we can directly    * invoke FileSystem.newInstance(Configuration).    *     * @param conf Configuration    * @return A new instance of the filesystem    */
specifier|private
specifier|static
name|FileSystem
name|newInstanceFileSystem
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|URI
name|uri
init|=
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|conf
operator|.
name|getClass
argument_list|(
literal|"fs."
operator|+
name|uri
operator|.
name|getScheme
argument_list|()
operator|+
literal|".impl"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No FileSystem for scheme: "
operator|+
name|uri
operator|.
name|getScheme
argument_list|()
argument_list|)
throw|;
block|}
name|FileSystem
name|fs
init|=
operator|(
name|FileSystem
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|clazz
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
expr_stmt|;
return|return
name|fs
return|;
block|}
comment|/**    * Create a new HFileSystem object, similar to FileSystem.get().    * This returns a filesystem object that avoids checksum    * verification in the filesystem for hfileblock-reads.    * For these blocks, checksum verification is done by HBase.    */
specifier|static
specifier|public
name|FileSystem
name|get
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|HFileSystem
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * Wrap a LocalFileSystem within a HFileSystem.    */
specifier|static
specifier|public
name|FileSystem
name|getLocalFs
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|HFileSystem
argument_list|(
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * The org.apache.hadoop.fs.FilterFileSystem does not yet support     * createNonRecursive. This is a hadoop bug and when it is fixed in Hadoop,    * this definition will go away.    */
specifier|public
name|FSDataOutputStream
name|createNonRecursive
parameter_list|(
name|Path
name|f
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|fs
operator|.
name|createNonRecursive
argument_list|(
name|f
argument_list|,
name|overwrite
argument_list|,
name|bufferSize
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
name|progress
argument_list|)
return|;
block|}
block|}
end_class

end_unit

