begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|coprocessor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|reflect
operator|.
name|MethodUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|CoprocessorProtocol
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_comment
comment|/**  * A collection of interfaces and utilities used for interacting with custom RPC  * interfaces exposed by Coprocessors.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|Batch
block|{
specifier|private
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Batch
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Creates a new {@link Batch.Call} instance that invokes a method    * with the given parameters and returns the result.    *    *<p>    * Note that currently the method is naively looked up using the method name    * and class types of the passed arguments, which means that    *<em>none of the arguments can be<code>null</code></em>.    * For more flexibility, see    * {@link Batch#forMethod(java.lang.reflect.Method, Object...)}.    *</p>    *    * @param protocol the protocol class being called    * @param method the method name    * @param args zero or more arguments to be passed to the method    * (individual args cannot be<code>null</code>!)    * @param<T> the class type of the protocol implementation being invoked    * @param<R> the return type for the method call    * @return a {@code Callable} instance that will invoke the given method    * and return the results    * @throws NoSuchMethodException if the method named, with the given argument    *     types, cannot be found in the protocol class    * @see Batch#forMethod(java.lang.reflect.Method, Object...)    * @see org.apache.hadoop.hbase.client.HTable#coprocessorExec(Class, byte[], byte[], org.apache.hadoop.hbase.client.coprocessor.Batch.Call, org.apache.hadoop.hbase.client.coprocessor.Batch.Callback)    */
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|CoprocessorProtocol
parameter_list|,
name|R
parameter_list|>
name|Call
argument_list|<
name|T
argument_list|,
name|R
argument_list|>
name|forMethod
parameter_list|(
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|protocol
parameter_list|,
specifier|final
name|String
name|method
parameter_list|,
specifier|final
name|Object
modifier|...
name|args
parameter_list|)
throws|throws
name|NoSuchMethodException
block|{
name|Class
index|[]
name|types
init|=
operator|new
name|Class
index|[
name|args
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|args
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Method argument cannot be null"
argument_list|)
throw|;
block|}
name|types
index|[
name|i
index|]
operator|=
name|args
index|[
name|i
index|]
operator|.
name|getClass
argument_list|()
expr_stmt|;
block|}
name|Method
name|m
init|=
name|MethodUtils
operator|.
name|getMatchingAccessibleMethod
argument_list|(
name|protocol
argument_list|,
name|method
argument_list|,
name|types
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchMethodException
argument_list|(
literal|"No matching method found for '"
operator|+
name|method
operator|+
literal|"'"
argument_list|)
throw|;
block|}
name|m
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|forMethod
argument_list|(
name|m
argument_list|,
name|args
argument_list|)
return|;
block|}
comment|/**    * Creates a new {@link Batch.Call} instance that invokes a method    * with the given parameters and returns the result.    *    * @param method the method reference to invoke    * @param args zero or more arguments to be passed to the method    * @param<T> the class type of the protocol implementation being invoked    * @param<R> the return type for the method call    * @return a {@code Callable} instance that will invoke the given method and    * return the results    * @see org.apache.hadoop.hbase.client.HTable#coprocessorExec(Class, byte[], byte[], org.apache.hadoop.hbase.client.coprocessor.Batch.Call, org.apache.hadoop.hbase.client.coprocessor.Batch.Callback)    */
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|CoprocessorProtocol
parameter_list|,
name|R
parameter_list|>
name|Call
argument_list|<
name|T
argument_list|,
name|R
argument_list|>
name|forMethod
parameter_list|(
specifier|final
name|Method
name|method
parameter_list|,
specifier|final
name|Object
modifier|...
name|args
parameter_list|)
block|{
return|return
operator|new
name|Call
argument_list|<
name|T
argument_list|,
name|R
argument_list|>
argument_list|()
block|{
specifier|public
name|R
name|call
parameter_list|(
name|T
name|instance
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
name|Proxy
operator|.
name|isProxyClass
argument_list|(
name|instance
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|InvocationHandler
name|invoker
init|=
name|Proxy
operator|.
name|getInvocationHandler
argument_list|(
name|instance
argument_list|)
decl_stmt|;
return|return
operator|(
name|R
operator|)
name|invoker
operator|.
name|invoke
argument_list|(
name|instance
argument_list|,
name|method
argument_list|,
name|args
argument_list|)
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Non proxied invocation of method '"
operator|+
name|method
operator|.
name|getName
argument_list|()
operator|+
literal|"'!"
argument_list|)
expr_stmt|;
return|return
operator|(
name|R
operator|)
name|method
operator|.
name|invoke
argument_list|(
name|instance
argument_list|,
name|args
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|iae
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to invoke method '"
operator|+
name|method
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|,
name|iae
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|ite
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ite
operator|.
name|toString
argument_list|()
argument_list|,
name|ite
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|t
operator|.
name|toString
argument_list|()
argument_list|,
name|t
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
comment|/**    * Defines a unit of work to be executed.    *    *<p>    * When used with    * {@link org.apache.hadoop.hbase.client.HTable#coprocessorExec(Class, byte[], byte[], org.apache.hadoop.hbase.client.coprocessor.Batch.Call, org.apache.hadoop.hbase.client.coprocessor.Batch.Callback)}    * the implementations {@link Batch.Call#call(Object)} method will be invoked    * with a proxy to the    * {@link org.apache.hadoop.hbase.ipc.CoprocessorProtocol}    * sub-type instance.    *</p>    * @see org.apache.hadoop.hbase.client.coprocessor    * @see org.apache.hadoop.hbase.client.HTable#coprocessorExec(Class, byte[], byte[], org.apache.hadoop.hbase.client.coprocessor.Batch.Call)    * @see org.apache.hadoop.hbase.client.HTable#coprocessorExec(Class, byte[], byte[], org.apache.hadoop.hbase.client.coprocessor.Batch.Call, org.apache.hadoop.hbase.client.coprocessor.Batch.Callback)    * @param<T> the instance type to be passed to    * {@link Batch.Call#call(Object)}    * @param<R> the return type from {@link Batch.Call#call(Object)}    */
specifier|public
specifier|static
interface|interface
name|Call
parameter_list|<
name|T
parameter_list|,
name|R
parameter_list|>
block|{
specifier|public
name|R
name|call
parameter_list|(
name|T
name|instance
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
comment|/**    * Defines a generic callback to be triggered for each {@link Batch.Call#call(Object)}    * result.    *    *<p>    * When used with    * {@link org.apache.hadoop.hbase.client.HTable#coprocessorExec(Class, byte[], byte[], org.apache.hadoop.hbase.client.coprocessor.Batch.Call, org.apache.hadoop.hbase.client.coprocessor.Batch.Callback)},    * the implementation's {@link Batch.Callback#update(byte[], byte[], Object)}    * method will be called with the {@link Batch.Call#call(Object)} return value    * from each region in the selected range.    *</p>    * @param<R> the return type from the associated {@link Batch.Call#call(Object)}    * @see org.apache.hadoop.hbase.client.HTable#coprocessorExec(Class, byte[], byte[], org.apache.hadoop.hbase.client.coprocessor.Batch.Call, org.apache.hadoop.hbase.client.coprocessor.Batch.Callback)    */
specifier|public
specifier|static
interface|interface
name|Callback
parameter_list|<
name|R
parameter_list|>
block|{
specifier|public
name|void
name|update
parameter_list|(
name|byte
index|[]
name|region
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|R
name|result
parameter_list|)
function_decl|;
block|}
block|}
end_class

end_unit

