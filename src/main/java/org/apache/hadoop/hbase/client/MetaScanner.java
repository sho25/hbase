begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2009 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Writables
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Scanner class that contains the<code>.META.</code> table scanning logic  * and uses a Retryable scanner. Provided visitors will be called  * for each row.  */
end_comment

begin_class
class|class
name|MetaScanner
block|{
comment|/**    * Scans the meta table and calls a visitor on each RowResult and uses a empty    * start row value as table name.    *    * @param configuration conf    * @param visitor A custom visitor    * @throws IOException e    */
specifier|public
specifier|static
name|void
name|metaScan
parameter_list|(
name|Configuration
name|configuration
parameter_list|,
name|MetaScannerVisitor
name|visitor
parameter_list|)
throws|throws
name|IOException
block|{
name|metaScan
argument_list|(
name|configuration
argument_list|,
name|visitor
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
expr_stmt|;
block|}
comment|/**    * Scans the meta table and calls a visitor on each RowResult. Uses a table    * name to locate meta regions.    *    * @param configuration config    * @param visitor visitor object    * @param tableName table name    * @throws IOException e    */
specifier|public
specifier|static
name|void
name|metaScan
parameter_list|(
name|Configuration
name|configuration
parameter_list|,
name|MetaScannerVisitor
name|visitor
parameter_list|,
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|metaScan
argument_list|(
name|configuration
argument_list|,
name|visitor
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
comment|/**    * Scans the meta table and calls a visitor on each RowResult. Uses a table    * name and a row name to locate meta regions. And it only scans at most    *<code>rowLimit</code> of rows.    *    * @param configuration HBase configuration.    * @param visitor Visitor object.    * @param tableName User table name.    * @param row Name of the row at the user table. The scan will start from    * the region row where the row resides.    * @param rowLimit Max of processed rows. If it is less than 0, it    * will be set to default value<code>Integer.MAX_VALUE</code>.    * @throws IOException e    */
specifier|public
specifier|static
name|void
name|metaScan
parameter_list|(
name|Configuration
name|configuration
parameter_list|,
name|MetaScannerVisitor
name|visitor
parameter_list|,
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|int
name|rowLimit
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|rowUpperLimit
init|=
name|rowLimit
operator|>
literal|0
condition|?
name|rowLimit
else|:
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
name|HConnection
name|connection
init|=
name|HConnectionManager
operator|.
name|getConnection
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|byte
index|[]
name|startRow
init|=
name|tableName
operator|==
literal|null
operator|||
name|tableName
operator|.
name|length
operator|==
literal|0
condition|?
name|HConstants
operator|.
name|EMPTY_START_ROW
else|:
name|HRegionInfo
operator|.
name|createRegionName
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|HConstants
operator|.
name|ZEROES
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// if row is not null, we want to use the startKey of the row's region as
comment|// the startRow for the meta scan.
if|if
condition|(
name|row
operator|!=
literal|null
condition|)
block|{
name|HTable
name|metaTable
init|=
operator|new
name|HTable
argument_list|(
name|HConstants
operator|.
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
name|Result
name|startRowResult
init|=
name|metaTable
operator|.
name|getRowOrBefore
argument_list|(
name|startRow
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
decl_stmt|;
if|if
condition|(
name|startRowResult
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|TableNotFoundException
argument_list|(
literal|"Cannot find row in .META. for table: "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|tableName
argument_list|)
operator|+
literal|", row="
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|startRow
argument_list|)
argument_list|)
throw|;
block|}
name|byte
index|[]
name|value
init|=
name|startRowResult
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|REGIONINFO_QUALIFIER
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"HRegionInfo was null or empty in Meta for "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|tableName
argument_list|)
operator|+
literal|", row="
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|startRow
argument_list|)
argument_list|)
throw|;
block|}
name|HRegionInfo
name|regionInfo
init|=
name|Writables
operator|.
name|getHRegionInfo
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|byte
index|[]
name|rowBefore
init|=
name|regionInfo
operator|.
name|getStartKey
argument_list|()
decl_stmt|;
name|startRow
operator|=
name|HRegionInfo
operator|.
name|createRegionName
argument_list|(
name|tableName
argument_list|,
name|rowBefore
argument_list|,
name|HConstants
operator|.
name|ZEROES
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// Scan over each meta region
name|ScannerCallable
name|callable
decl_stmt|;
name|int
name|rows
init|=
name|Math
operator|.
name|min
argument_list|(
name|rowLimit
argument_list|,
name|configuration
operator|.
name|getInt
argument_list|(
literal|"hbase.meta.scanner.caching"
argument_list|,
literal|100
argument_list|)
argument_list|)
decl_stmt|;
do|do
block|{
specifier|final
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|startRow
argument_list|)
operator|.
name|addFamily
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
decl_stmt|;
name|callable
operator|=
operator|new
name|ScannerCallable
argument_list|(
name|connection
argument_list|,
name|HConstants
operator|.
name|META_TABLE_NAME
argument_list|,
name|scan
argument_list|)
expr_stmt|;
comment|// Open scanner
name|connection
operator|.
name|getRegionServerWithRetries
argument_list|(
name|callable
argument_list|)
expr_stmt|;
name|int
name|processedRows
init|=
literal|0
decl_stmt|;
try|try
block|{
name|callable
operator|.
name|setCaching
argument_list|(
name|rows
argument_list|)
expr_stmt|;
name|done
label|:
do|do
block|{
if|if
condition|(
name|processedRows
operator|>=
name|rowUpperLimit
condition|)
block|{
break|break;
block|}
comment|//we have all the rows here
name|Result
index|[]
name|rrs
init|=
name|connection
operator|.
name|getRegionServerWithRetries
argument_list|(
name|callable
argument_list|)
decl_stmt|;
if|if
condition|(
name|rrs
operator|==
literal|null
operator|||
name|rrs
operator|.
name|length
operator|==
literal|0
operator|||
name|rrs
index|[
literal|0
index|]
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
break|break;
comment|//exit completely
block|}
for|for
control|(
name|Result
name|rr
range|:
name|rrs
control|)
block|{
if|if
condition|(
name|processedRows
operator|>=
name|rowUpperLimit
condition|)
block|{
break|break
name|done
break|;
block|}
if|if
condition|(
operator|!
name|visitor
operator|.
name|processRow
argument_list|(
name|rr
argument_list|)
condition|)
break|break
name|done
break|;
comment|//exit completely
name|processedRows
operator|++
expr_stmt|;
block|}
comment|//here, we didn't break anywhere. Check if we have more rows
block|}
do|while
condition|(
literal|true
condition|)
do|;
comment|// Advance the startRow to the end key of the current region
name|startRow
operator|=
name|callable
operator|.
name|getHRegionInfo
argument_list|()
operator|.
name|getEndKey
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
comment|// Close scanner
name|callable
operator|.
name|setClose
argument_list|()
expr_stmt|;
name|connection
operator|.
name|getRegionServerWithRetries
argument_list|(
name|callable
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|startRow
argument_list|,
name|HConstants
operator|.
name|LAST_ROW
argument_list|)
operator|!=
literal|0
condition|)
do|;
block|}
comment|/**    * Visitor class called to process each row of the .META. table    */
interface|interface
name|MetaScannerVisitor
block|{
comment|/**      * Visitor method that accepts a RowResult and the meta region location.      * Implementations can return false to stop the region's loop if it becomes      * unnecessary for some reason.      *      * @param rowResult result      * @return A boolean to know if it should continue to loop in the region      * @throws IOException e      */
specifier|public
name|boolean
name|processRow
parameter_list|(
name|Result
name|rowResult
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
block|}
end_class

end_unit

