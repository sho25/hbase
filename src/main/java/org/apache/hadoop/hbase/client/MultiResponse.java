begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2009 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|HbaseObjectWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_comment
comment|/**  * A container for Result objects, grouped by regionName.  */
end_comment

begin_class
specifier|public
class|class
name|MultiResponse
implements|implements
name|Writable
block|{
comment|// map of regionName to list of (Results paired to the original index for that
comment|// Result)
specifier|private
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|>
name|results
init|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
specifier|public
name|MultiResponse
parameter_list|()
block|{   }
comment|/**    * @return Number of pairs in this container    */
specifier|public
name|int
name|size
parameter_list|()
block|{
name|int
name|size
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
range|:
name|results
operator|.
name|values
argument_list|()
control|)
block|{
name|size
operator|+=
name|c
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
return|return
name|size
return|;
block|}
comment|/**    * Add the pair to the container, grouped by the regionName    *    * @param regionName    * @param r    *          First item in the pair is the original index of the Action    *          (request). Second item is the Result. Result will be empty for    *          successful Put and Delete actions.    */
specifier|public
name|void
name|add
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|,
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Object
argument_list|>
name|r
parameter_list|)
block|{
name|List
argument_list|<
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Object
argument_list|>
argument_list|>
name|rs
init|=
name|results
operator|.
name|get
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|rs
operator|==
literal|null
condition|)
block|{
name|rs
operator|=
operator|new
name|ArrayList
argument_list|<
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|results
operator|.
name|put
argument_list|(
name|regionName
argument_list|,
name|rs
argument_list|)
expr_stmt|;
block|}
name|rs
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|,
name|int
name|originalIndex
parameter_list|,
name|Object
name|resOrEx
parameter_list|)
block|{
name|add
argument_list|(
name|regionName
argument_list|,
operator|new
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Object
argument_list|>
argument_list|(
name|originalIndex
argument_list|,
name|resOrEx
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|>
name|getResults
parameter_list|()
block|{
return|return
name|results
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|>
name|e
range|:
name|results
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Bytes
operator|.
name|writeByteArray
argument_list|(
name|out
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Object
argument_list|>
argument_list|>
name|lst
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|lst
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Object
argument_list|>
name|r
range|:
name|lst
control|)
block|{
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeInt
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// Cant have index -1; on other side we recognize -1 as 'null'
block|}
else|else
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|r
operator|.
name|getFirst
argument_list|()
argument_list|)
expr_stmt|;
comment|// Can this can npe!?!
name|Object
name|obj
init|=
name|r
operator|.
name|getSecond
argument_list|()
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|Throwable
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// true, Throwable/exception.
name|Throwable
name|t
init|=
operator|(
name|Throwable
operator|)
name|obj
decl_stmt|;
comment|// serialize exception
name|WritableUtils
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|t
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// no exception
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|Writable
operator|)
condition|)
name|obj
operator|=
literal|null
expr_stmt|;
comment|// squash all non-writables to null.
name|HbaseObjectWritable
operator|.
name|writeObject
argument_list|(
name|out
argument_list|,
name|obj
argument_list|,
name|Result
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
name|int
name|mapSize
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mapSize
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|key
init|=
name|Bytes
operator|.
name|readByteArray
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|int
name|listSize
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Object
argument_list|>
argument_list|>
name|lst
init|=
operator|new
name|ArrayList
argument_list|<
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|(
name|listSize
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|listSize
condition|;
name|j
operator|++
control|)
block|{
name|Integer
name|idx
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|idx
operator|==
operator|-
literal|1
condition|)
block|{
name|lst
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|isException
init|=
name|in
operator|.
name|readBoolean
argument_list|()
decl_stmt|;
name|Object
name|o
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isException
condition|)
block|{
name|String
name|klass
init|=
name|WritableUtils
operator|.
name|readString
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|String
name|desc
init|=
name|WritableUtils
operator|.
name|readString
argument_list|(
name|in
argument_list|)
decl_stmt|;
try|try
block|{
comment|// the type-unsafe insertion, but since we control what klass is..
name|Class
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
name|c
init|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|klass
argument_list|)
decl_stmt|;
name|Constructor
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
name|cn
init|=
name|c
operator|.
name|getDeclaredConstructor
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|o
operator|=
name|cn
operator|.
name|newInstance
argument_list|(
name|desc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|ignored
parameter_list|)
block|{             }
catch|catch
parameter_list|(
name|NoSuchMethodException
name|ignored
parameter_list|)
block|{             }
catch|catch
parameter_list|(
name|InvocationTargetException
name|ignored
parameter_list|)
block|{             }
catch|catch
parameter_list|(
name|InstantiationException
name|ignored
parameter_list|)
block|{             }
catch|catch
parameter_list|(
name|IllegalAccessException
name|ignored
parameter_list|)
block|{             }
block|}
else|else
block|{
name|o
operator|=
name|HbaseObjectWritable
operator|.
name|readObject
argument_list|(
name|in
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|lst
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Object
argument_list|>
argument_list|(
name|idx
argument_list|,
name|o
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|results
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|lst
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

