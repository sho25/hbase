begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|UndeclaredThrowableException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArraySet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Abortable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MasterAddressTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MasterNotRunningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RemoteExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ZooKeeperConnectionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|MetaScanner
operator|.
name|MetaScannerVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|HBaseRPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|HBaseRPCProtocolVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|HMasterInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|HRegionInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|SoftValueSortedMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Writables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|RootRegionTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKTableDisable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_comment
comment|/**  * A non-instantiable class that manages connections to tables.  * Used by {@link HTable} and {@link HBaseAdmin}  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
specifier|public
class|class
name|HConnectionManager
block|{
comment|// Register a shutdown hook, one that cleans up RPC and closes zk sessions.
static|static
block|{
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|addShutdownHook
argument_list|(
operator|new
name|Thread
argument_list|(
literal|"HCM.shutdownHook"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|HConnectionManager
operator|.
name|deleteAllConnections
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|static
specifier|final
name|int
name|MAX_CACHED_HBASE_INSTANCES
init|=
literal|31
decl_stmt|;
comment|// A LRU Map of Configuration hashcode -> TableServers. We set instances to 31.
comment|// The zk default max connections to the ensemble from the one client is 30 so
comment|// should run into zk issues before hit this value of 31.
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Configuration
argument_list|,
name|HConnectionImplementation
argument_list|>
name|HBASE_INSTANCES
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Configuration
argument_list|,
name|HConnectionImplementation
argument_list|>
argument_list|(
call|(
name|int
call|)
argument_list|(
name|MAX_CACHED_HBASE_INSTANCES
operator|/
literal|0.75F
argument_list|)
operator|+
literal|1
argument_list|,
literal|0.75F
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|removeEldestEntry
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|Configuration
argument_list|,
name|HConnectionImplementation
argument_list|>
name|eldest
parameter_list|)
block|{
return|return
name|size
argument_list|()
operator|>
name|MAX_CACHED_HBASE_INSTANCES
return|;
block|}
block|}
decl_stmt|;
comment|/*    * Non-instantiable.    */
specifier|protected
name|HConnectionManager
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**    * Get the connection that goes with the passed<code>conf</code> configuration.    * If no current connection exists, method creates a new connection for the    * passed<code>conf</code> instance.    * @param conf configuration    * @return HConnection object for<code>conf</code>    * @throws ZooKeeperConnectionException    */
specifier|public
specifier|static
name|HConnection
name|getConnection
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|ZooKeeperConnectionException
block|{
name|HConnectionImplementation
name|connection
decl_stmt|;
synchronized|synchronized
init|(
name|HBASE_INSTANCES
init|)
block|{
name|connection
operator|=
name|HBASE_INSTANCES
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|connection
operator|==
literal|null
condition|)
block|{
name|connection
operator|=
operator|new
name|HConnectionImplementation
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|HBASE_INSTANCES
operator|.
name|put
argument_list|(
name|conf
argument_list|,
name|connection
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|connection
return|;
block|}
comment|/**    * Delete connection information for the instance specified by configuration    * @param conf configuration    * @param stopProxy stop the proxy as well    */
specifier|public
specifier|static
name|void
name|deleteConnection
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|boolean
name|stopProxy
parameter_list|)
block|{
synchronized|synchronized
init|(
name|HBASE_INSTANCES
init|)
block|{
name|HConnectionImplementation
name|t
init|=
name|HBASE_INSTANCES
operator|.
name|remove
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
name|t
operator|.
name|close
argument_list|(
name|stopProxy
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Delete information for all connections.    * @param stopProxy stop the proxy as well    * @throws IOException    */
specifier|public
specifier|static
name|void
name|deleteAllConnections
parameter_list|(
name|boolean
name|stopProxy
parameter_list|)
block|{
synchronized|synchronized
init|(
name|HBASE_INSTANCES
init|)
block|{
for|for
control|(
name|HConnectionImplementation
name|t
range|:
name|HBASE_INSTANCES
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
name|t
operator|.
name|close
argument_list|(
name|stopProxy
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * It is provided for unit test cases which verify the behavior of region    * location cache prefetch.    * @return Number of cached regions for the table.    * @throws ZooKeeperConnectionException    */
specifier|static
name|int
name|getCachedRegionCount
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|ZooKeeperConnectionException
block|{
name|HConnectionImplementation
name|connection
init|=
operator|(
name|HConnectionImplementation
operator|)
name|getConnection
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
name|connection
operator|.
name|getNumberOfCachedRegionLocations
argument_list|(
name|tableName
argument_list|)
return|;
block|}
comment|/**    * It's provided for unit test cases which verify the behavior of region    * location cache prefetch.    * @return true if the region where the table and row reside is cached.    * @throws ZooKeeperConnectionException    */
specifier|static
name|boolean
name|isRegionCached
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|)
throws|throws
name|ZooKeeperConnectionException
block|{
name|HConnectionImplementation
name|connection
init|=
operator|(
name|HConnectionImplementation
operator|)
name|getConnection
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
name|connection
operator|.
name|isRegionCached
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|)
return|;
block|}
comment|/* Encapsulates connection to zookeeper and regionservers.*/
specifier|static
class|class
name|HConnectionImplementation
implements|implements
name|HConnection
implements|,
name|Abortable
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HConnectionImplementation
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|HRegionInterface
argument_list|>
name|serverInterfaceClass
decl_stmt|;
specifier|private
specifier|final
name|long
name|pause
decl_stmt|;
specifier|private
specifier|final
name|int
name|numRetries
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxRPCAttempts
decl_stmt|;
specifier|private
specifier|final
name|long
name|rpcTimeout
decl_stmt|;
specifier|private
specifier|final
name|int
name|prefetchRegionLimit
decl_stmt|;
specifier|private
specifier|final
name|Object
name|masterLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|closed
decl_stmt|;
specifier|private
specifier|volatile
name|HMasterInterface
name|master
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|masterChecked
decl_stmt|;
comment|// ZooKeeper reference
specifier|private
name|ZooKeeperWatcher
name|zooKeeper
decl_stmt|;
comment|// ZooKeeper-based master address tracker
specifier|private
name|MasterAddressTracker
name|masterAddressTracker
decl_stmt|;
specifier|private
specifier|final
name|Object
name|metaRegionLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Object
name|userRegionLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
comment|// Known region HServerAddress.toString() -> HRegionInterface
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|HRegionInterface
argument_list|>
name|servers
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|HRegionInterface
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|RootRegionTracker
name|rootRegionTracker
decl_stmt|;
comment|/**      * Map of table to table {@link HRegionLocation}s.  The table key is made      * by doing a {@link Bytes#mapKey(byte[])} of the table's name.      */
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|SoftValueSortedMap
argument_list|<
name|byte
index|[]
argument_list|,
name|HRegionLocation
argument_list|>
argument_list|>
name|cachedRegionLocations
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|SoftValueSortedMap
argument_list|<
name|byte
index|[]
argument_list|,
name|HRegionLocation
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// region cache prefetch is enabled by default. this set contains all
comment|// tables whose region cache prefetch are disabled.
specifier|private
specifier|final
name|Set
argument_list|<
name|Integer
argument_list|>
name|regionCachePrefetchDisabledTables
init|=
operator|new
name|CopyOnWriteArraySet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * constructor      * @param conf Configuration object      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|HConnectionImplementation
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|ZooKeeperConnectionException
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|String
name|serverClassName
init|=
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|REGION_SERVER_CLASS
argument_list|,
name|HConstants
operator|.
name|DEFAULT_REGION_SERVER_CLASS
argument_list|)
decl_stmt|;
name|this
operator|.
name|closed
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|this
operator|.
name|serverInterfaceClass
operator|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|HRegionInterface
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|serverClassName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Unable to find region server interface "
operator|+
name|serverClassName
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|this
operator|.
name|pause
operator|=
name|conf
operator|.
name|getLong
argument_list|(
literal|"hbase.client.pause"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|this
operator|.
name|numRetries
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.client.retries.number"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxRPCAttempts
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.client.rpc.maxattempts"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|rpcTimeout
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|HConstants
operator|.
name|HBASE_REGIONSERVER_LEASE_PERIOD_KEY
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_REGIONSERVER_LEASE_PERIOD
argument_list|)
expr_stmt|;
name|this
operator|.
name|prefetchRegionLimit
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.client.prefetch.limit"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// initialize zookeeper and master address manager
name|this
operator|.
name|zooKeeper
operator|=
name|getZooKeeperWatcher
argument_list|()
expr_stmt|;
name|masterAddressTracker
operator|=
operator|new
name|MasterAddressTracker
argument_list|(
name|this
operator|.
name|zooKeeper
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|zooKeeper
operator|.
name|registerListener
argument_list|(
name|masterAddressTracker
argument_list|)
expr_stmt|;
name|masterAddressTracker
operator|.
name|start
argument_list|()
expr_stmt|;
name|this
operator|.
name|rootRegionTracker
operator|=
operator|new
name|RootRegionTracker
argument_list|(
name|this
operator|.
name|zooKeeper
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|rootRegionTracker
operator|.
name|start
argument_list|()
expr_stmt|;
name|this
operator|.
name|master
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|masterChecked
operator|=
literal|false
expr_stmt|;
block|}
specifier|private
name|long
name|getPauseTime
parameter_list|(
name|int
name|tries
parameter_list|)
block|{
name|int
name|ntries
init|=
name|tries
decl_stmt|;
if|if
condition|(
name|ntries
operator|>=
name|HConstants
operator|.
name|RETRY_BACKOFF
operator|.
name|length
condition|)
block|{
name|ntries
operator|=
name|HConstants
operator|.
name|RETRY_BACKOFF
operator|.
name|length
operator|-
literal|1
expr_stmt|;
block|}
return|return
name|this
operator|.
name|pause
operator|*
name|HConstants
operator|.
name|RETRY_BACKOFF
index|[
name|ntries
index|]
return|;
block|}
specifier|public
name|HMasterInterface
name|getMaster
parameter_list|()
throws|throws
name|MasterNotRunningException
throws|,
name|ZooKeeperConnectionException
block|{
comment|// Check if we already have a good master connection
if|if
condition|(
name|master
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|master
operator|.
name|isMasterRunning
argument_list|()
condition|)
block|{
return|return
name|master
return|;
block|}
block|}
name|HServerAddress
name|masterLocation
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|masterLock
init|)
block|{
for|for
control|(
name|int
name|tries
init|=
literal|0
init|;
operator|!
name|this
operator|.
name|closed
operator|&&
operator|!
name|this
operator|.
name|masterChecked
operator|&&
name|this
operator|.
name|master
operator|==
literal|null
operator|&&
name|tries
operator|<
name|numRetries
condition|;
name|tries
operator|++
control|)
block|{
try|try
block|{
name|masterLocation
operator|=
name|masterAddressTracker
operator|.
name|getMasterAddress
argument_list|()
expr_stmt|;
if|if
condition|(
name|masterLocation
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"ZooKeeper available but no active master location found"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MasterNotRunningException
argument_list|()
throw|;
block|}
name|HMasterInterface
name|tryMaster
init|=
operator|(
name|HMasterInterface
operator|)
name|HBaseRPC
operator|.
name|getProxy
argument_list|(
name|HMasterInterface
operator|.
name|class
argument_list|,
name|HBaseRPCProtocolVersion
operator|.
name|versionID
argument_list|,
name|masterLocation
operator|.
name|getInetSocketAddress
argument_list|()
argument_list|,
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|tryMaster
operator|.
name|isMasterRunning
argument_list|()
condition|)
block|{
name|this
operator|.
name|master
operator|=
name|tryMaster
expr_stmt|;
name|this
operator|.
name|masterLock
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|tries
operator|==
name|numRetries
operator|-
literal|1
condition|)
block|{
comment|// This was our last chance - don't bother sleeping
name|LOG
operator|.
name|info
argument_list|(
literal|"getMaster attempt "
operator|+
name|tries
operator|+
literal|" of "
operator|+
name|this
operator|.
name|numRetries
operator|+
literal|" failed; no more retrying."
argument_list|,
name|e
argument_list|)
expr_stmt|;
break|break;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"getMaster attempt "
operator|+
name|tries
operator|+
literal|" of "
operator|+
name|this
operator|.
name|numRetries
operator|+
literal|" failed; retrying after sleep of "
operator|+
name|getPauseTime
argument_list|(
name|tries
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Cannot connect to master or it is not running. Sleep& retry
try|try
block|{
name|this
operator|.
name|masterLock
operator|.
name|wait
argument_list|(
name|getPauseTime
argument_list|(
name|tries
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// continue
block|}
block|}
name|this
operator|.
name|masterChecked
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|master
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|masterLocation
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MasterNotRunningException
argument_list|()
throw|;
block|}
throw|throw
operator|new
name|MasterNotRunningException
argument_list|(
name|masterLocation
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|this
operator|.
name|master
return|;
block|}
specifier|public
name|boolean
name|isMasterRunning
parameter_list|()
throws|throws
name|MasterNotRunningException
throws|,
name|ZooKeeperConnectionException
block|{
if|if
condition|(
name|this
operator|.
name|master
operator|==
literal|null
condition|)
block|{
name|getMaster
argument_list|()
expr_stmt|;
block|}
name|boolean
name|isRunning
init|=
name|master
operator|.
name|isMasterRunning
argument_list|()
decl_stmt|;
if|if
condition|(
name|isRunning
condition|)
block|{
return|return
literal|true
return|;
block|}
throw|throw
operator|new
name|MasterNotRunningException
argument_list|()
throw|;
block|}
specifier|public
name|HRegionLocation
name|getRegionLocation
parameter_list|(
specifier|final
name|byte
index|[]
name|name
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|,
name|boolean
name|reload
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|reload
condition|?
name|relocateRegion
argument_list|(
name|name
argument_list|,
name|row
argument_list|)
else|:
name|locateRegion
argument_list|(
name|name
argument_list|,
name|row
argument_list|)
return|;
block|}
specifier|public
name|HTableDescriptor
index|[]
name|listTables
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|TreeSet
argument_list|<
name|HTableDescriptor
argument_list|>
name|uniqueTables
init|=
operator|new
name|TreeSet
argument_list|<
name|HTableDescriptor
argument_list|>
argument_list|()
decl_stmt|;
name|MetaScannerVisitor
name|visitor
init|=
operator|new
name|MetaScannerVisitor
argument_list|()
block|{
specifier|public
name|boolean
name|processRow
parameter_list|(
name|Result
name|result
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|byte
index|[]
name|value
init|=
name|result
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|REGIONINFO_QUALIFIER
argument_list|)
decl_stmt|;
name|HRegionInfo
name|info
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|info
operator|=
name|Writables
operator|.
name|getHRegionInfo
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
comment|// Only examine the rows where the startKey is zero length
if|if
condition|(
name|info
operator|!=
literal|null
operator|&&
name|info
operator|.
name|getStartKey
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|uniqueTables
operator|.
name|add
argument_list|(
name|info
operator|.
name|getTableDesc
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Result="
operator|+
name|result
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
decl_stmt|;
name|MetaScanner
operator|.
name|metaScan
argument_list|(
name|conf
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
return|return
name|uniqueTables
operator|.
name|toArray
argument_list|(
operator|new
name|HTableDescriptor
index|[
name|uniqueTables
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isTableEnabled
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|testTableOnlineState
argument_list|(
name|tableName
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isTableDisabled
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|testTableOnlineState
argument_list|(
name|tableName
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isTableAvailable
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|AtomicBoolean
name|available
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|MetaScannerVisitor
name|visitor
init|=
operator|new
name|MetaScannerVisitor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|processRow
parameter_list|(
name|Result
name|row
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|value
init|=
name|row
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|REGIONINFO_QUALIFIER
argument_list|)
decl_stmt|;
name|HRegionInfo
name|info
init|=
name|Writables
operator|.
name|getHRegionInfoOrNull
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|tableName
argument_list|,
name|info
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|value
operator|=
name|row
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|SERVER_QUALIFIER
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|available
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|MetaScanner
operator|.
name|metaScan
argument_list|(
name|conf
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
return|return
name|available
operator|.
name|get
argument_list|()
return|;
block|}
comment|/*      * @param True if table is online      */
specifier|private
name|boolean
name|testTableOnlineState
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|boolean
name|online
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|ROOT_TABLE_NAME
argument_list|)
condition|)
block|{
comment|// The root region is always enabled
return|return
literal|true
return|;
block|}
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|tables
init|=
name|ZKTableDisable
operator|.
name|getDisabledTables
argument_list|(
name|this
operator|.
name|zooKeeper
argument_list|)
decl_stmt|;
name|String
name|searchStr
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|boolean
name|disabled
init|=
name|tables
operator|.
name|contains
argument_list|(
name|searchStr
argument_list|)
decl_stmt|;
return|return
name|online
condition|?
operator|!
name|disabled
else|:
name|disabled
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed listing disabled tables"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|HTableDescriptorFinder
implements|implements
name|MetaScanner
operator|.
name|MetaScannerVisitor
block|{
name|byte
index|[]
name|tableName
decl_stmt|;
name|HTableDescriptor
name|result
decl_stmt|;
specifier|protected
name|HTableDescriptorFinder
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
block|}
specifier|public
name|boolean
name|processRow
parameter_list|(
name|Result
name|rowResult
parameter_list|)
throws|throws
name|IOException
block|{
name|HRegionInfo
name|info
init|=
name|Writables
operator|.
name|getHRegionInfo
argument_list|(
name|rowResult
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|REGIONINFO_QUALIFIER
argument_list|)
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|desc
init|=
name|info
operator|.
name|getTableDesc
argument_list|()
decl_stmt|;
if|if
condition|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|desc
operator|.
name|getName
argument_list|()
argument_list|,
name|tableName
argument_list|)
operator|==
literal|0
condition|)
block|{
name|result
operator|=
name|desc
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
name|HTableDescriptor
name|getResult
parameter_list|()
block|{
return|return
name|result
return|;
block|}
block|}
specifier|public
name|HTableDescriptor
name|getHTableDescriptor
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|ROOT_TABLE_NAME
argument_list|)
condition|)
block|{
return|return
operator|new
name|UnmodifyableHTableDescriptor
argument_list|(
name|HTableDescriptor
operator|.
name|ROOT_TABLEDESC
argument_list|)
return|;
block|}
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|META_TABLE_NAME
argument_list|)
condition|)
block|{
return|return
name|HTableDescriptor
operator|.
name|META_TABLEDESC
return|;
block|}
name|HTableDescriptorFinder
name|finder
init|=
operator|new
name|HTableDescriptorFinder
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|MetaScanner
operator|.
name|metaScan
argument_list|(
name|conf
argument_list|,
name|finder
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|HTableDescriptor
name|result
init|=
name|finder
operator|.
name|getResult
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|TableNotFoundException
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|tableName
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|HRegionLocation
name|locateRegion
parameter_list|(
specifier|final
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO implement.  use old stuff or new stuff?
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|locateRegions
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO implement.  use old stuff or new stuff?
return|return
literal|null
return|;
block|}
specifier|public
name|HRegionLocation
name|locateRegion
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|locateRegion
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
name|HRegionLocation
name|relocateRegion
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|locateRegion
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|private
name|HRegionLocation
name|locateRegion
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|,
name|boolean
name|useCache
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|tableName
operator|==
literal|null
operator|||
name|tableName
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"table name cannot be null or zero length"
argument_list|)
throw|;
block|}
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|ROOT_TABLE_NAME
argument_list|)
condition|)
block|{
try|try
block|{
name|HServerAddress
name|hsa
init|=
name|this
operator|.
name|rootRegionTracker
operator|.
name|waitRootRegionLocation
argument_list|(
name|this
operator|.
name|rpcTimeout
argument_list|)
decl_stmt|;
if|if
condition|(
name|hsa
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|HRegionLocation
argument_list|(
name|HRegionInfo
operator|.
name|ROOT_REGIONINFO
argument_list|,
name|hsa
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|META_TABLE_NAME
argument_list|)
condition|)
block|{
return|return
name|locateRegionInMeta
argument_list|(
name|HConstants
operator|.
name|ROOT_TABLE_NAME
argument_list|,
name|tableName
argument_list|,
name|row
argument_list|,
name|useCache
argument_list|,
name|metaRegionLock
argument_list|)
return|;
block|}
else|else
block|{
comment|// Region not in the cache - have to go to the meta RS
return|return
name|locateRegionInMeta
argument_list|(
name|HConstants
operator|.
name|META_TABLE_NAME
argument_list|,
name|tableName
argument_list|,
name|row
argument_list|,
name|useCache
argument_list|,
name|userRegionLock
argument_list|)
return|;
block|}
block|}
comment|/*      * Search .META. for the HRegionLocation info that contains the table and      * row we're seeking. It will prefetch certain number of regions info and      * save them to the global region cache.      */
specifier|private
name|void
name|prefetchRegionCache
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|)
block|{
comment|// Implement a new visitor for MetaScanner, and use it to walk through
comment|// the .META.
name|MetaScannerVisitor
name|visitor
init|=
operator|new
name|MetaScannerVisitor
argument_list|()
block|{
specifier|public
name|boolean
name|processRow
parameter_list|(
name|Result
name|result
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|byte
index|[]
name|value
init|=
name|result
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|REGIONINFO_QUALIFIER
argument_list|)
decl_stmt|;
name|HRegionInfo
name|regionInfo
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
comment|// convert the row result into the HRegionLocation we need!
name|regionInfo
operator|=
name|Writables
operator|.
name|getHRegionInfo
argument_list|(
name|value
argument_list|)
expr_stmt|;
comment|// possible we got a region of a different table...
if|if
condition|(
operator|!
name|Bytes
operator|.
name|equals
argument_list|(
name|regionInfo
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|tableName
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
comment|// stop scanning
block|}
if|if
condition|(
name|regionInfo
operator|.
name|isOffline
argument_list|()
condition|)
block|{
comment|// don't cache offline regions
return|return
literal|true
return|;
block|}
name|value
operator|=
name|result
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|SERVER_QUALIFIER
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
comment|// don't cache it
block|}
specifier|final
name|String
name|serverAddress
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|value
argument_list|)
decl_stmt|;
comment|// instantiate the location
name|HRegionLocation
name|loc
init|=
operator|new
name|HRegionLocation
argument_list|(
name|regionInfo
argument_list|,
operator|new
name|HServerAddress
argument_list|(
name|serverAddress
argument_list|)
argument_list|)
decl_stmt|;
comment|// cache this meta entry
name|cacheLocation
argument_list|(
name|tableName
argument_list|,
name|loc
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
try|try
block|{
comment|// pre-fetch certain number of regions info at region cache.
name|MetaScanner
operator|.
name|metaScan
argument_list|(
name|conf
argument_list|,
name|visitor
argument_list|,
name|tableName
argument_list|,
name|row
argument_list|,
name|this
operator|.
name|prefetchRegionLimit
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Encounted problems when prefetch META table: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*       * Search one of the meta tables (-ROOT- or .META.) for the HRegionLocation       * info that contains the table and row we're seeking.       */
specifier|private
name|HRegionLocation
name|locateRegionInMeta
parameter_list|(
specifier|final
name|byte
index|[]
name|parentTable
parameter_list|,
specifier|final
name|byte
index|[]
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|,
name|boolean
name|useCache
parameter_list|,
name|Object
name|regionLockObject
parameter_list|)
throws|throws
name|IOException
block|{
name|HRegionLocation
name|location
decl_stmt|;
comment|// If we are supposed to be using the cache, look in the cache to see if
comment|// we already have the region.
if|if
condition|(
name|useCache
condition|)
block|{
name|location
operator|=
name|getCachedLocation
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
literal|null
condition|)
block|{
return|return
name|location
return|;
block|}
block|}
comment|// build the key of the meta region we should be looking for.
comment|// the extra 9's on the end are necessary to allow "exact" matches
comment|// without knowing the precise region names.
name|byte
index|[]
name|metaKey
init|=
name|HRegionInfo
operator|.
name|createRegionName
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|HConstants
operator|.
name|NINES
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|tries
init|=
literal|0
init|;
literal|true
condition|;
name|tries
operator|++
control|)
block|{
if|if
condition|(
name|tries
operator|>=
name|numRetries
condition|)
block|{
throw|throw
operator|new
name|NoServerForRegionException
argument_list|(
literal|"Unable to find region for "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|row
argument_list|)
operator|+
literal|" after "
operator|+
name|numRetries
operator|+
literal|" tries."
argument_list|)
throw|;
block|}
try|try
block|{
comment|// locate the root or meta region
name|HRegionLocation
name|metaLocation
init|=
name|locateRegion
argument_list|(
name|parentTable
argument_list|,
name|metaKey
argument_list|)
decl_stmt|;
name|HRegionInterface
name|server
init|=
name|getHRegionConnection
argument_list|(
name|metaLocation
operator|.
name|getServerAddress
argument_list|()
argument_list|)
decl_stmt|;
name|Result
name|regionInfoRow
init|=
literal|null
decl_stmt|;
comment|// This block guards against two threads trying to load the meta
comment|// region at the same time. The first will load the meta region and
comment|// the second will use the value that the first one found.
synchronized|synchronized
init|(
name|regionLockObject
init|)
block|{
comment|// If the parent table is META, we may want to pre-fetch some
comment|// region info into the global region cache for this table.
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|parentTable
argument_list|,
name|HConstants
operator|.
name|META_TABLE_NAME
argument_list|)
operator|&&
operator|(
name|getRegionCachePrefetch
argument_list|(
name|tableName
argument_list|)
operator|)
condition|)
block|{
name|prefetchRegionCache
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
comment|// Check the cache again for a hit in case some other thread made the
comment|// same query while we were waiting on the lock. If not supposed to
comment|// be using the cache, delete any existing cached location so it won't
comment|// interfere.
if|if
condition|(
name|useCache
condition|)
block|{
name|location
operator|=
name|getCachedLocation
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
literal|null
condition|)
block|{
return|return
name|location
return|;
block|}
block|}
else|else
block|{
name|deleteCachedLocation
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
comment|// Query the root or meta region for the location of the meta region
name|regionInfoRow
operator|=
name|server
operator|.
name|getClosestRowBefore
argument_list|(
name|metaLocation
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|metaKey
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|regionInfoRow
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|TableNotFoundException
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|tableName
argument_list|)
argument_list|)
throw|;
block|}
name|byte
index|[]
name|value
init|=
name|regionInfoRow
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|REGIONINFO_QUALIFIER
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"HRegionInfo was null or empty in "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|parentTable
argument_list|)
operator|+
literal|", row="
operator|+
name|regionInfoRow
argument_list|)
throw|;
block|}
comment|// convert the row result into the HRegionLocation we need!
name|HRegionInfo
name|regionInfo
init|=
operator|(
name|HRegionInfo
operator|)
name|Writables
operator|.
name|getWritable
argument_list|(
name|value
argument_list|,
operator|new
name|HRegionInfo
argument_list|()
argument_list|)
decl_stmt|;
comment|// possible we got a region of a different table...
if|if
condition|(
operator|!
name|Bytes
operator|.
name|equals
argument_list|(
name|regionInfo
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|tableName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|TableNotFoundException
argument_list|(
literal|"Table '"
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|tableName
argument_list|)
operator|+
literal|"' was not found."
argument_list|)
throw|;
block|}
if|if
condition|(
name|regionInfo
operator|.
name|isOffline
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RegionOfflineException
argument_list|(
literal|"region offline: "
operator|+
name|regionInfo
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
throw|;
block|}
name|value
operator|=
name|regionInfoRow
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|SERVER_QUALIFIER
argument_list|)
expr_stmt|;
name|String
name|serverAddress
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|serverAddress
operator|=
name|Bytes
operator|.
name|toString
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|serverAddress
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|NoServerForRegionException
argument_list|(
literal|"No server address listed "
operator|+
literal|"in "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|parentTable
argument_list|)
operator|+
literal|" for region "
operator|+
name|regionInfo
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
throw|;
block|}
comment|// instantiate the location
name|location
operator|=
operator|new
name|HRegionLocation
argument_list|(
name|regionInfo
argument_list|,
operator|new
name|HServerAddress
argument_list|(
name|serverAddress
argument_list|)
argument_list|)
expr_stmt|;
name|cacheLocation
argument_list|(
name|tableName
argument_list|,
name|location
argument_list|)
expr_stmt|;
return|return
name|location
return|;
block|}
catch|catch
parameter_list|(
name|TableNotFoundException
name|e
parameter_list|)
block|{
comment|// if we got this error, probably means the table just plain doesn't
comment|// exist. rethrow the error immediately. this should always be coming
comment|// from the HTable constructor.
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|RemoteException
condition|)
block|{
name|e
operator|=
name|RemoteExceptionHandler
operator|.
name|decodeRemoteException
argument_list|(
operator|(
name|RemoteException
operator|)
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tries
operator|<
name|numRetries
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"locateRegionInMeta attempt "
operator|+
name|tries
operator|+
literal|" of "
operator|+
name|this
operator|.
name|numRetries
operator|+
literal|" failed; retrying after sleep of "
operator|+
name|getPauseTime
argument_list|(
name|tries
argument_list|)
operator|+
literal|" because: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
comment|// Only relocate the parent region if necessary
if|if
condition|(
operator|!
operator|(
name|e
operator|instanceof
name|RegionOfflineException
operator|||
name|e
operator|instanceof
name|NoServerForRegionException
operator|)
condition|)
block|{
name|relocateRegion
argument_list|(
name|parentTable
argument_list|,
name|metaKey
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|getPauseTime
argument_list|(
name|tries
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// continue
block|}
block|}
block|}
comment|/*      * Search the cache for a location that fits our table and row key.      * Return null if no suitable region is located. TODO: synchronization note      *      *<p>TODO: This method during writing consumes 15% of CPU doing lookup      * into the Soft Reference SortedMap.  Improve.      *      * @param tableName      * @param row      * @return Null or region location found in cache.      */
name|HRegionLocation
name|getCachedLocation
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|)
block|{
name|SoftValueSortedMap
argument_list|<
name|byte
index|[]
argument_list|,
name|HRegionLocation
argument_list|>
name|tableLocations
init|=
name|getTableLocations
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
comment|// start to examine the cache. we can only do cache actions
comment|// if there's something in the cache for this table.
if|if
condition|(
name|tableLocations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|HRegionLocation
name|rl
init|=
name|tableLocations
operator|.
name|get
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|rl
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cache hit for row<"
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|row
argument_list|)
operator|+
literal|"> in tableName "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|tableName
argument_list|)
operator|+
literal|": location server "
operator|+
name|rl
operator|.
name|getServerAddress
argument_list|()
operator|+
literal|", location region name "
operator|+
name|rl
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|rl
return|;
block|}
comment|// Cut the cache so that we only get the part that could contain
comment|// regions that match our key
name|SoftValueSortedMap
argument_list|<
name|byte
index|[]
argument_list|,
name|HRegionLocation
argument_list|>
name|matchingRegions
init|=
name|tableLocations
operator|.
name|headMap
argument_list|(
name|row
argument_list|)
decl_stmt|;
comment|// if that portion of the map is empty, then we're done. otherwise,
comment|// we need to examine the cached location to verify that it is
comment|// a match by end key as well.
if|if
condition|(
operator|!
name|matchingRegions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|HRegionLocation
name|possibleRegion
init|=
name|matchingRegions
operator|.
name|get
argument_list|(
name|matchingRegions
operator|.
name|lastKey
argument_list|()
argument_list|)
decl_stmt|;
comment|// there is a possibility that the reference was garbage collected
comment|// in the instant since we checked isEmpty().
if|if
condition|(
name|possibleRegion
operator|!=
literal|null
condition|)
block|{
name|byte
index|[]
name|endKey
init|=
name|possibleRegion
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEndKey
argument_list|()
decl_stmt|;
comment|// make sure that the end key is greater than the row we're looking
comment|// for, otherwise the row actually belongs in the next region, not
comment|// this one. the exception case is when the endkey is
comment|// HConstants.EMPTY_START_ROW, signifying that the region we're
comment|// checking is actually the last region in the table.
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|endKey
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
operator|||
name|KeyValue
operator|.
name|getRowComparator
argument_list|(
name|tableName
argument_list|)
operator|.
name|compareRows
argument_list|(
name|endKey
argument_list|,
literal|0
argument_list|,
name|endKey
operator|.
name|length
argument_list|,
name|row
argument_list|,
literal|0
argument_list|,
name|row
operator|.
name|length
argument_list|)
operator|>
literal|0
condition|)
block|{
return|return
name|possibleRegion
return|;
block|}
block|}
block|}
comment|// Passed all the way through, so we got nothin - complete cache miss
return|return
literal|null
return|;
block|}
comment|/**      * Delete a cached location      * @param tableName tableName      * @param row      */
name|void
name|deleteCachedLocation
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|cachedRegionLocations
init|)
block|{
name|SoftValueSortedMap
argument_list|<
name|byte
index|[]
argument_list|,
name|HRegionLocation
argument_list|>
name|tableLocations
init|=
name|getTableLocations
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
comment|// start to examine the cache. we can only do cache actions
comment|// if there's something in the cache for this table.
if|if
condition|(
operator|!
name|tableLocations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|HRegionLocation
name|rl
init|=
name|getCachedLocation
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|rl
operator|!=
literal|null
condition|)
block|{
name|tableLocations
operator|.
name|remove
argument_list|(
name|rl
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getStartKey
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removed "
operator|+
name|rl
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" for tableName="
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|tableName
argument_list|)
operator|+
literal|" from cache "
operator|+
literal|"because of "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/*      * @param tableName      * @return Map of cached locations for passed<code>tableName</code>      */
specifier|private
name|SoftValueSortedMap
argument_list|<
name|byte
index|[]
argument_list|,
name|HRegionLocation
argument_list|>
name|getTableLocations
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|)
block|{
comment|// find the map of cached locations for this table
name|Integer
name|key
init|=
name|Bytes
operator|.
name|mapKey
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|SoftValueSortedMap
argument_list|<
name|byte
index|[]
argument_list|,
name|HRegionLocation
argument_list|>
name|result
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|cachedRegionLocations
init|)
block|{
name|result
operator|=
name|this
operator|.
name|cachedRegionLocations
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
comment|// if tableLocations for this table isn't built yet, make one
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|SoftValueSortedMap
argument_list|<
name|byte
index|[]
argument_list|,
name|HRegionLocation
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
expr_stmt|;
name|this
operator|.
name|cachedRegionLocations
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clearRegionCache
parameter_list|()
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|cachedRegionLocations
init|)
block|{
name|this
operator|.
name|cachedRegionLocations
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|clearRegionCache
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|cachedRegionLocations
init|)
block|{
name|this
operator|.
name|cachedRegionLocations
operator|.
name|remove
argument_list|(
name|Bytes
operator|.
name|mapKey
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*      * Put a newly discovered HRegionLocation into the cache.      */
specifier|private
name|void
name|cacheLocation
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|,
specifier|final
name|HRegionLocation
name|location
parameter_list|)
block|{
name|byte
index|[]
name|startKey
init|=
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getStartKey
argument_list|()
decl_stmt|;
name|SoftValueSortedMap
argument_list|<
name|byte
index|[]
argument_list|,
name|HRegionLocation
argument_list|>
name|tableLocations
init|=
name|getTableLocations
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableLocations
operator|.
name|put
argument_list|(
name|startKey
argument_list|,
name|location
argument_list|)
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cached location for "
operator|+
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" is "
operator|+
name|location
operator|.
name|getServerAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|HRegionInterface
name|getHRegionConnection
parameter_list|(
name|HServerAddress
name|regionServer
parameter_list|,
name|boolean
name|getMaster
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|getMaster
condition|)
block|{
name|getMaster
argument_list|()
expr_stmt|;
block|}
name|HRegionInterface
name|server
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|servers
init|)
block|{
comment|// See if we already have a connection
name|server
operator|=
name|this
operator|.
name|servers
operator|.
name|get
argument_list|(
name|regionServer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
block|{
comment|// Get a connection
try|try
block|{
name|server
operator|=
operator|(
name|HRegionInterface
operator|)
name|HBaseRPC
operator|.
name|waitForProxy
argument_list|(
name|serverInterfaceClass
argument_list|,
name|HBaseRPCProtocolVersion
operator|.
name|versionID
argument_list|,
name|regionServer
operator|.
name|getInetSocketAddress
argument_list|()
argument_list|,
name|this
operator|.
name|conf
argument_list|,
name|this
operator|.
name|maxRPCAttempts
argument_list|,
name|this
operator|.
name|rpcTimeout
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Remove exception connecting to RS"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|RemoteExceptionHandler
operator|.
name|decodeRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|this
operator|.
name|servers
operator|.
name|put
argument_list|(
name|regionServer
operator|.
name|toString
argument_list|()
argument_list|,
name|server
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|server
return|;
block|}
specifier|public
name|HRegionInterface
name|getHRegionConnection
parameter_list|(
name|HServerAddress
name|regionServer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getHRegionConnection
argument_list|(
name|regionServer
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Get the ZooKeeper instance for this TableServers instance.      *      * If ZK has not been initialized yet, this will connect to ZK.      * @returns zookeeper reference      * @throws ZooKeeperConncetionException if there's a problem connecting to zk      */
specifier|public
specifier|synchronized
name|ZooKeeperWatcher
name|getZooKeeperWatcher
parameter_list|()
throws|throws
name|ZooKeeperConnectionException
block|{
if|if
condition|(
name|zooKeeper
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|this
operator|.
name|zooKeeper
operator|=
operator|new
name|ZooKeeperWatcher
argument_list|(
name|conf
argument_list|,
name|ZKUtil
operator|.
name|getZooKeeperClusterKey
argument_list|(
name|conf
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"zkw created, sessionid=0x"
operator|+
name|Long
operator|.
name|toHexString
argument_list|(
name|this
operator|.
name|zooKeeper
operator|.
name|getZooKeeper
argument_list|()
operator|.
name|getSessionId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ZooKeeperConnectionException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|zooKeeper
return|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getRegionServerWithRetries
parameter_list|(
name|ServerCallable
argument_list|<
name|T
argument_list|>
name|callable
parameter_list|)
throws|throws
name|IOException
throws|,
name|RuntimeException
block|{
name|List
argument_list|<
name|Throwable
argument_list|>
name|exceptions
init|=
operator|new
name|ArrayList
argument_list|<
name|Throwable
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|tries
init|=
literal|0
init|;
name|tries
operator|<
name|numRetries
condition|;
name|tries
operator|++
control|)
block|{
try|try
block|{
name|callable
operator|.
name|instantiateServer
argument_list|(
name|tries
operator|!=
literal|0
argument_list|)
expr_stmt|;
return|return
name|callable
operator|.
name|call
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|t
operator|=
name|translateException
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|exceptions
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
if|if
condition|(
name|tries
operator|==
name|numRetries
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|RetriesExhaustedException
argument_list|(
name|callable
operator|.
name|getServerName
argument_list|()
argument_list|,
name|callable
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|callable
operator|.
name|getRow
argument_list|()
argument_list|,
name|tries
argument_list|,
name|exceptions
argument_list|)
throw|;
block|}
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|getPauseTime
argument_list|(
name|tries
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// continue
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getRegionServerWithoutRetries
parameter_list|(
name|ServerCallable
argument_list|<
name|T
argument_list|>
name|callable
parameter_list|)
throws|throws
name|IOException
throws|,
name|RuntimeException
block|{
try|try
block|{
name|callable
operator|.
name|instantiateServer
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|callable
operator|.
name|call
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|Throwable
name|t2
init|=
name|translateException
argument_list|(
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
name|t2
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|t2
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|t2
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * @deprecated Use HConnectionManager::processBatch instead.      */
specifier|public
name|int
name|processBatchOfRows
parameter_list|(
specifier|final
name|ArrayList
argument_list|<
name|Put
argument_list|>
name|list
parameter_list|,
specifier|final
name|byte
index|[]
name|tableName
parameter_list|,
name|ExecutorService
name|pool
parameter_list|)
throws|throws
name|IOException
block|{
name|Result
index|[]
name|results
init|=
operator|new
name|Result
index|[
name|list
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|processBatch
argument_list|(
operator|(
name|List
operator|)
name|list
argument_list|,
name|tableName
argument_list|,
name|pool
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Result
name|r
range|:
name|results
control|)
block|{
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
return|return
operator|(
name|count
operator|==
name|list
operator|.
name|size
argument_list|()
condition|?
operator|-
literal|1
else|:
name|count
operator|)
return|;
block|}
comment|/**      * @deprecated Use HConnectionManager::processBatch instead.      */
specifier|public
name|int
name|processBatchOfDeletes
parameter_list|(
specifier|final
name|List
argument_list|<
name|Delete
argument_list|>
name|list
parameter_list|,
specifier|final
name|byte
index|[]
name|tableName
parameter_list|,
name|ExecutorService
name|pool
parameter_list|)
throws|throws
name|IOException
block|{
name|Result
index|[]
name|results
init|=
operator|new
name|Result
index|[
name|list
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|processBatch
argument_list|(
operator|(
name|List
operator|)
name|list
argument_list|,
name|tableName
argument_list|,
name|pool
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Result
name|r
range|:
name|results
control|)
block|{
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
return|return
operator|(
name|count
operator|==
name|list
operator|.
name|size
argument_list|()
condition|?
operator|-
literal|1
else|:
name|count
operator|)
return|;
block|}
name|void
name|close
parameter_list|(
name|boolean
name|stopProxy
parameter_list|)
block|{
if|if
condition|(
name|master
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|stopProxy
condition|)
block|{
name|HBaseRPC
operator|.
name|stopProxy
argument_list|(
name|master
argument_list|)
expr_stmt|;
block|}
name|master
operator|=
literal|null
expr_stmt|;
name|masterChecked
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|stopProxy
condition|)
block|{
for|for
control|(
name|HRegionInterface
name|i
range|:
name|servers
operator|.
name|values
argument_list|()
control|)
block|{
name|HBaseRPC
operator|.
name|stopProxy
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|this
operator|.
name|zooKeeper
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Closed zookeeper sessionid=0x"
operator|+
name|Long
operator|.
name|toHexString
argument_list|(
name|this
operator|.
name|zooKeeper
operator|.
name|getZooKeeper
argument_list|()
operator|.
name|getSessionId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|zooKeeper
operator|.
name|close
argument_list|()
expr_stmt|;
name|this
operator|.
name|zooKeeper
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|private
name|Callable
argument_list|<
name|MultiResponse
argument_list|>
name|createCallable
parameter_list|(
specifier|final
name|HServerAddress
name|address
parameter_list|,
specifier|final
name|MultiAction
name|multi
parameter_list|,
specifier|final
name|byte
index|[]
name|tableName
parameter_list|)
block|{
specifier|final
name|HConnection
name|connection
init|=
name|this
decl_stmt|;
return|return
operator|new
name|Callable
argument_list|<
name|MultiResponse
argument_list|>
argument_list|()
block|{
specifier|public
name|MultiResponse
name|call
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getRegionServerWithoutRetries
argument_list|(
operator|new
name|ServerCallable
argument_list|<
name|MultiResponse
argument_list|>
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|)
block|{
specifier|public
name|MultiResponse
name|call
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|server
operator|.
name|multi
argument_list|(
name|multi
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|instantiateServer
parameter_list|(
name|boolean
name|reload
parameter_list|)
throws|throws
name|IOException
block|{
name|server
operator|=
name|connection
operator|.
name|getHRegionConnection
argument_list|(
name|address
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
return|;
block|}
specifier|public
name|void
name|processBatch
parameter_list|(
name|List
argument_list|<
name|Row
argument_list|>
name|list
parameter_list|,
specifier|final
name|byte
index|[]
name|tableName
parameter_list|,
name|ExecutorService
name|pool
parameter_list|,
name|Result
index|[]
name|results
parameter_list|)
throws|throws
name|IOException
block|{
comment|// results must be the same size as list
if|if
condition|(
name|results
operator|.
name|length
operator|!=
name|list
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"argument results must be the same size as argument list"
argument_list|)
throw|;
block|}
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|Row
argument_list|>
name|workingList
init|=
operator|new
name|ArrayList
argument_list|<
name|Row
argument_list|>
argument_list|(
name|list
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|singletonList
init|=
operator|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
decl_stmt|;
name|boolean
name|retry
init|=
literal|true
decl_stmt|;
name|Throwable
name|singleRowCause
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|tries
init|=
literal|0
init|;
name|tries
operator|<
name|numRetries
operator|&&
name|retry
condition|;
operator|++
name|tries
control|)
block|{
comment|// sleep first, if this is a retry
if|if
condition|(
name|tries
operator|>=
literal|1
condition|)
block|{
name|long
name|sleepTime
init|=
name|getPauseTime
argument_list|(
name|tries
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Retry "
operator|+
name|tries
operator|+
literal|", sleep for "
operator|+
name|sleepTime
operator|+
literal|"ms!"
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignore
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Interupted"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
comment|// step 1: break up into regionserver-sized chunks and build the data structs
name|Map
argument_list|<
name|HServerAddress
argument_list|,
name|MultiAction
argument_list|>
name|actionsByServer
init|=
operator|new
name|HashMap
argument_list|<
name|HServerAddress
argument_list|,
name|MultiAction
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|workingList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Row
name|row
init|=
name|workingList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|row
operator|!=
literal|null
condition|)
block|{
name|HRegionLocation
name|loc
init|=
name|locateRegion
argument_list|(
name|tableName
argument_list|,
name|row
operator|.
name|getRow
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|HServerAddress
name|address
init|=
name|loc
operator|.
name|getServerAddress
argument_list|()
decl_stmt|;
name|byte
index|[]
name|regionName
init|=
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
decl_stmt|;
name|MultiAction
name|actions
init|=
name|actionsByServer
operator|.
name|get
argument_list|(
name|address
argument_list|)
decl_stmt|;
if|if
condition|(
name|actions
operator|==
literal|null
condition|)
block|{
name|actions
operator|=
operator|new
name|MultiAction
argument_list|()
expr_stmt|;
name|actionsByServer
operator|.
name|put
argument_list|(
name|address
argument_list|,
name|actions
argument_list|)
expr_stmt|;
block|}
name|Action
name|action
init|=
operator|new
name|Action
argument_list|(
name|regionName
argument_list|,
name|row
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|actions
operator|.
name|add
argument_list|(
name|regionName
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
block|}
comment|// step 2: make the requests
name|Map
argument_list|<
name|HServerAddress
argument_list|,
name|Future
argument_list|<
name|MultiResponse
argument_list|>
argument_list|>
name|futures
init|=
operator|new
name|HashMap
argument_list|<
name|HServerAddress
argument_list|,
name|Future
argument_list|<
name|MultiResponse
argument_list|>
argument_list|>
argument_list|(
name|actionsByServer
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|HServerAddress
argument_list|,
name|MultiAction
argument_list|>
name|e
range|:
name|actionsByServer
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|futures
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|pool
operator|.
name|submit
argument_list|(
name|createCallable
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|,
name|tableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// step 3: collect the failures and successes and prepare for retry
for|for
control|(
name|Entry
argument_list|<
name|HServerAddress
argument_list|,
name|Future
argument_list|<
name|MultiResponse
argument_list|>
argument_list|>
name|responsePerServer
range|:
name|futures
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|HServerAddress
name|address
init|=
name|responsePerServer
operator|.
name|getKey
argument_list|()
decl_stmt|;
try|try
block|{
comment|// Gather the results for one server
name|Future
argument_list|<
name|MultiResponse
argument_list|>
name|future
init|=
name|responsePerServer
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// Not really sure what a reasonable timeout value is. Here's a first try.
name|MultiResponse
name|resp
init|=
name|future
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|resp
operator|==
literal|null
condition|)
block|{
comment|// Entire server failed
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed all for server: "
operator|+
name|address
operator|+
literal|", removing from cache"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// For each region
for|for
control|(
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Result
argument_list|>
argument_list|>
argument_list|>
name|e
range|:
name|resp
operator|.
name|getResults
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|byte
index|[]
name|regionName
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Result
argument_list|>
argument_list|>
name|regionResults
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Result
argument_list|>
name|regionResult
range|:
name|regionResults
control|)
block|{
if|if
condition|(
name|regionResult
operator|==
literal|null
condition|)
block|{
comment|// failed
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failures for region: "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|regionName
argument_list|)
operator|+
literal|", removing from cache"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// success
name|results
index|[
name|regionResult
operator|.
name|getFirst
argument_list|()
index|]
operator|=
name|regionResult
operator|.
name|getSecond
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed all from "
operator|+
name|address
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed all from "
operator|+
name|address
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// Just give up, leaving the batch incomplete
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|DoNotRetryIOException
condition|)
block|{
throw|throw
operator|(
name|DoNotRetryIOException
operator|)
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
if|if
condition|(
name|singletonList
condition|)
block|{
comment|// be richer for reporting in a 1 row case.
name|singleRowCause
operator|=
name|e
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// Find failures (i.e. null Result), and add them to the workingList (in
comment|// order), so they can be retried.
name|retry
operator|=
literal|false
expr_stmt|;
name|workingList
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|results
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|results
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
name|retry
operator|=
literal|true
expr_stmt|;
name|Row
name|row
init|=
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|workingList
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|deleteCachedLocation
argument_list|(
name|tableName
argument_list|,
name|row
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// add null to workingList, so the order remains consistent with the original list argument.
name|workingList
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|isInterrupted
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Aborting attempt because of a thread interruption"
argument_list|)
throw|;
block|}
if|if
condition|(
name|retry
condition|)
block|{
comment|// ran out of retries and didn't successfully finish everything!
if|if
condition|(
name|singleRowCause
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|singleRowCause
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|RetriesExhaustedException
argument_list|(
literal|"Still had "
operator|+
name|workingList
operator|.
name|size
argument_list|()
operator|+
literal|" actions left after retrying "
operator|+
name|numRetries
operator|+
literal|" times."
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * @deprecated Use HConnectionManager::processBatch instead.      */
specifier|public
name|void
name|processBatchOfPuts
parameter_list|(
name|List
argument_list|<
name|Put
argument_list|>
name|list
parameter_list|,
specifier|final
name|byte
index|[]
name|tableName
parameter_list|,
name|ExecutorService
name|pool
parameter_list|)
throws|throws
name|IOException
block|{
name|Result
index|[]
name|results
init|=
operator|new
name|Result
index|[
name|list
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|processBatch
argument_list|(
operator|(
name|List
operator|)
name|list
argument_list|,
name|tableName
argument_list|,
name|pool
argument_list|,
name|results
argument_list|)
expr_stmt|;
comment|// mutate list so that it is empty for complete success, or contains only failed records
comment|// results are returned in the same order as the requests in list
comment|// walk the list backwards, so we can remove from list without impacting the indexes of earlier members
for|for
control|(
name|int
name|i
init|=
name|results
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
comment|// if result is not null, it succeeded
if|if
condition|(
name|results
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|list
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|Throwable
name|translateException
parameter_list|(
name|Throwable
name|t
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|t
operator|instanceof
name|UndeclaredThrowableException
condition|)
block|{
name|t
operator|=
name|t
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|t
operator|instanceof
name|RemoteException
condition|)
block|{
name|t
operator|=
name|RemoteExceptionHandler
operator|.
name|decodeRemoteException
argument_list|(
operator|(
name|RemoteException
operator|)
name|t
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|t
operator|instanceof
name|DoNotRetryIOException
condition|)
block|{
throw|throw
operator|(
name|DoNotRetryIOException
operator|)
name|t
throw|;
block|}
return|return
name|t
return|;
block|}
comment|/*      * Return the number of cached region for a table. It will only be called      * from a unit test.      */
name|int
name|getNumberOfCachedRegionLocations
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|Integer
name|key
init|=
name|Bytes
operator|.
name|mapKey
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|cachedRegionLocations
init|)
block|{
name|SoftValueSortedMap
argument_list|<
name|byte
index|[]
argument_list|,
name|HRegionLocation
argument_list|>
name|tableLocs
init|=
name|this
operator|.
name|cachedRegionLocations
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableLocs
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|tableLocs
operator|.
name|values
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
block|}
comment|/**      * Check the region cache to see whether a region is cached yet or not.      * Called by unit tests.      * @param tableName tableName      * @param row row      * @return Region cached or not.      */
name|boolean
name|isRegionCached
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|)
block|{
name|HRegionLocation
name|location
init|=
name|getCachedLocation
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|)
decl_stmt|;
return|return
name|location
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setRegionCachePrefetch
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|,
specifier|final
name|boolean
name|enable
parameter_list|)
block|{
if|if
condition|(
operator|!
name|enable
condition|)
block|{
name|regionCachePrefetchDisabledTables
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|mapKey
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|regionCachePrefetchDisabledTables
operator|.
name|remove
argument_list|(
name|Bytes
operator|.
name|mapKey
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|getRegionCachePrefetch
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|)
block|{
return|return
operator|!
name|regionCachePrefetchDisabledTables
operator|.
name|contains
argument_list|(
name|Bytes
operator|.
name|mapKey
argument_list|(
name|tableName
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|void
name|prewarmRegionCache
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|,
specifier|final
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
name|regions
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
name|e
range|:
name|regions
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|cacheLocation
argument_list|(
name|tableName
argument_list|,
operator|new
name|HRegionLocation
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|abort
parameter_list|(
specifier|final
name|String
name|msg
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
name|LOG
operator|.
name|fatal
argument_list|(
name|msg
argument_list|,
name|t
argument_list|)
expr_stmt|;
else|else
name|LOG
operator|.
name|fatal
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

