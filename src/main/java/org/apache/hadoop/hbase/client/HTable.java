begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2011 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SynchronousQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NotServingRegionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|UnknownScannerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ZooKeeperConnectionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HConnectionManager
operator|.
name|HConnectable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|MetaScanner
operator|.
name|MetaScannerVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|metrics
operator|.
name|ScanMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|coprocessor
operator|.
name|Batch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|CoprocessorProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|ExecRPCInvoker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionServerStoppedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Addressing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Writables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_comment
comment|/**  *<p>Used to communicate with a single HBase table.  *  *<p>This class is not thread safe for reads nor write.  *   *<p>In case of writes (Put, Delete), the underlying write buffer can  * be corrupted if multiple threads contend over a single HTable instance.  *   *<p>In case of reads, some fields used by a Scan are shared among all threads.  * The HTable implementation can either not contract to be safe in case of a Get  *  *<p>To access a table in a multi threaded environment, please consider  * using the {@link HTablePool} class to create your HTable instances.  *  *<p>Instances of HTable passed the same {@link Configuration} instance will  * share connections to servers out on the cluster and to the zookeeper ensemble  * as well as caches of region locations.  This is usually a *good* thing and it  * is recommended to reuse the same configuration object for all your tables.  * This happens because they will all share the same underlying  * {@link HConnection} instance. See {@link HConnectionManager} for more on  * how this mechanism works.  *  *<p>{@link HConnection} will read most of the  * configuration it needs from the passed {@link Configuration} on initial  * construction.  Thereafter, for settings such as  *<code>hbase.client.pause</code>,<code>hbase.client.retries.number</code>,  * and<code>hbase.client.rpc.maxattempts</code> updating their values in the  * passed {@link Configuration} subsequent to {@link HConnection} construction  * will go unnoticed.  To run with changed values, make a new  * {@link HTable} passing a new {@link Configuration} instance that has the  * new configuration.  *  *<p>Note that this class implements the {@link Closeable} interface. When a  * HTable instance is no longer required, it *should* be closed in order to ensure  * that the underlying resources are promptly released. Please note that the close   * method can throw java.io.IOException that must be handled.  *  * @see HBaseAdmin for create, drop, list, enable and disable of tables.  * @see HConnection  * @see HConnectionManager  */
end_comment

begin_class
specifier|public
class|class
name|HTable
implements|implements
name|HTableInterface
implements|,
name|Closeable
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HTable
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|HConnection
name|connection
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|tableName
decl_stmt|;
specifier|protected
specifier|final
name|int
name|scannerTimeout
decl_stmt|;
specifier|private
specifier|volatile
name|Configuration
name|configuration
decl_stmt|;
specifier|private
specifier|final
name|ArrayList
argument_list|<
name|Put
argument_list|>
name|writeBuffer
init|=
operator|new
name|ArrayList
argument_list|<
name|Put
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|long
name|writeBufferSize
decl_stmt|;
specifier|private
name|boolean
name|clearBufferOnFail
decl_stmt|;
specifier|private
name|boolean
name|autoFlush
decl_stmt|;
specifier|private
name|long
name|currentWriteBufferSize
decl_stmt|;
specifier|protected
name|int
name|scannerCaching
decl_stmt|;
specifier|private
name|int
name|maxKeyValueSize
decl_stmt|;
specifier|private
name|ExecutorService
name|pool
decl_stmt|;
comment|// For Multi
specifier|private
name|long
name|maxScannerResultSize
decl_stmt|;
specifier|private
name|boolean
name|closed
decl_stmt|;
specifier|private
name|int
name|operationTimeout
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DOPUT_WB_CHECK
init|=
literal|10
decl_stmt|;
comment|// i.e., doPut checks the writebuffer every X Puts.
comment|/**    * Creates an object to access a HBase table.    * Internally it creates a new instance of {@link Configuration} and a new    * client to zookeeper as well as other resources.  It also comes up with    * a fresh view of the cluster and must do discovery from scratch of region    * locations; i.e. it will not make use of already-cached region locations if    * available. Use only when being quick and dirty.    * @throws IOException if a remote or network exception occurs    * @see #HTable(Configuration, String)    */
specifier|public
name|HTable
parameter_list|(
specifier|final
name|String
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|HBaseConfiguration
operator|.
name|create
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates an object to access a HBase table.    * Internally it creates a new instance of {@link Configuration} and a new    * client to zookeeper as well as other resources.  It also comes up with    * a fresh view of the cluster and must do discovery from scratch of region    * locations; i.e. it will not make use of already-cached region locations if    * available. Use only when being quick and dirty.    * @param tableName Name of the table.    * @throws IOException if a remote or network exception occurs    * @see #HTable(Configuration, String)    */
specifier|public
name|HTable
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|HBaseConfiguration
operator|.
name|create
argument_list|()
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates an object to access a HBase table.    * Shares zookeeper connection and other resources with other HTable instances    * created with the same<code>conf</code> instance.  Uses already-populated    * region cache if one is available, populated by any other HTable instances    * sharing this<code>conf</code> instance.  Recommended.    * @param conf Configuration object to use.    * @param tableName Name of the table.    * @throws IOException if a remote or network exception occurs    */
specifier|public
name|HTable
parameter_list|(
name|Configuration
name|conf
parameter_list|,
specifier|final
name|String
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|conf
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates an object to access a HBase table.    * Shares zookeeper connection and other resources with other HTable instances    * created with the same<code>conf</code> instance.  Uses already-populated    * region cache if one is available, populated by any other HTable instances    * sharing this<code>conf</code> instance.  Recommended.    * @param conf Configuration object to use.    * @param tableName Name of the table.    * @throws IOException if a remote or network exception occurs    */
specifier|public
name|HTable
parameter_list|(
name|Configuration
name|conf
parameter_list|,
specifier|final
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|scannerTimeout
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|connection
operator|=
literal|null
expr_stmt|;
return|return;
block|}
name|this
operator|.
name|connection
operator|=
name|HConnectionManager
operator|.
name|getConnection
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|scannerTimeout
operator|=
operator|(
name|int
operator|)
name|conf
operator|.
name|getLong
argument_list|(
name|HConstants
operator|.
name|HBASE_REGIONSERVER_LEASE_PERIOD_KEY
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_REGIONSERVER_LEASE_PERIOD
argument_list|)
expr_stmt|;
name|this
operator|.
name|operationTimeout
operator|=
name|HTableDescriptor
operator|.
name|isMetaTable
argument_list|(
name|tableName
argument_list|)
condition|?
name|HConstants
operator|.
name|DEFAULT_HBASE_CLIENT_OPERATION_TIMEOUT
else|:
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_OPERATION_TIMEOUT
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_CLIENT_OPERATION_TIMEOUT
argument_list|)
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|connection
operator|.
name|locateRegion
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
expr_stmt|;
name|this
operator|.
name|writeBufferSize
operator|=
name|conf
operator|.
name|getLong
argument_list|(
literal|"hbase.client.write.buffer"
argument_list|,
literal|2097152
argument_list|)
expr_stmt|;
name|this
operator|.
name|clearBufferOnFail
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|autoFlush
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|currentWriteBufferSize
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|scannerCaching
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.client.scanner.caching"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxScannerResultSize
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_SCANNER_MAX_RESULT_SIZE_KEY
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_CLIENT_SCANNER_MAX_RESULT_SIZE
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxKeyValueSize
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.client.keyvalue.maxsize"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|int
name|maxThreads
init|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.htable.threads.max"
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxThreads
operator|==
literal|0
condition|)
block|{
name|maxThreads
operator|=
literal|1
expr_stmt|;
comment|// is there a better default?
block|}
comment|// Using the "direct handoff" approach, new threads will only be created
comment|// if it is necessary and will grow unbounded. This could be bad but in HCM
comment|// we only create as many Runnables as there are region servers. It means
comment|// it also scales when new region servers are added.
name|this
operator|.
name|pool
operator|=
operator|new
name|ThreadPoolExecutor
argument_list|(
literal|1
argument_list|,
name|maxThreads
argument_list|,
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|SynchronousQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
argument_list|,
operator|new
name|DaemonThreadFactory
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ThreadPoolExecutor
operator|)
name|this
operator|.
name|pool
operator|)
operator|.
name|allowCoreThreadTimeOut
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|closed
operator|=
literal|false
expr_stmt|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
comment|/**    * Tells whether or not a table is enabled or not.    * @param tableName Name of table to check.    * @return {@code true} if table is online.    * @throws IOException if a remote or network exception occurs 	* @deprecated use {@link HBaseAdmin#isTableEnabled(byte[])}    */
annotation|@
name|Deprecated
specifier|public
specifier|static
name|boolean
name|isTableEnabled
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|isTableEnabled
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|tableName
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Tells whether or not a table is enabled or not.    * @param tableName Name of table to check.    * @return {@code true} if table is online.    * @throws IOException if a remote or network exception occurs 	* @deprecated use {@link HBaseAdmin#isTableEnabled(byte[])}    */
annotation|@
name|Deprecated
specifier|public
specifier|static
name|boolean
name|isTableEnabled
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|isTableEnabled
argument_list|(
name|HBaseConfiguration
operator|.
name|create
argument_list|()
argument_list|,
name|tableName
argument_list|)
return|;
block|}
comment|/**    * Tells whether or not a table is enabled or not.    * @param conf The Configuration object to use.    * @param tableName Name of table to check.    * @return {@code true} if table is online.    * @throws IOException if a remote or network exception occurs 	* @deprecated use {@link HBaseAdmin#isTableEnabled(byte[])}    */
annotation|@
name|Deprecated
specifier|public
specifier|static
name|boolean
name|isTableEnabled
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|isTableEnabled
argument_list|(
name|conf
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|tableName
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Tells whether or not a table is enabled or not.    * @param conf The Configuration object to use.    * @param tableName Name of table to check.    * @return {@code true} if table is online.    * @throws IOException if a remote or network exception occurs    */
specifier|public
specifier|static
name|boolean
name|isTableEnabled
parameter_list|(
name|Configuration
name|conf
parameter_list|,
specifier|final
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|HConnectionManager
operator|.
name|execute
argument_list|(
operator|new
name|HConnectable
argument_list|<
name|Boolean
argument_list|>
argument_list|(
name|conf
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|connect
parameter_list|(
name|HConnection
name|connection
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|connection
operator|.
name|isTableEnabled
argument_list|(
name|tableName
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * Find region location hosting passed row using cached info    * @param row Row to find.    * @return The location of the given row.    * @throws IOException if a remote or network exception occurs    */
specifier|public
name|HRegionLocation
name|getRegionLocation
parameter_list|(
specifier|final
name|String
name|row
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|connection
operator|.
name|getRegionLocation
argument_list|(
name|tableName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row
argument_list|)
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Finds the region on which the given row is being served.    * @param row Row to find.    * @return Location of the row.    * @throws IOException if a remote or network exception occurs    */
specifier|public
name|HRegionLocation
name|getRegionLocation
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|connection
operator|.
name|getRegionLocation
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
return|;
block|}
comment|/**    *<em>INTERNAL</em> Used by unit tests and tools to do low-level    * manipulations.    * @return An HConnection instance.    * @deprecated This method will be changed from public to package protected.    */
comment|// TODO(tsuna): Remove this.  Unit tests shouldn't require public helpers.
specifier|public
name|HConnection
name|getConnection
parameter_list|()
block|{
return|return
name|this
operator|.
name|connection
return|;
block|}
comment|/**    * Gets the number of rows that a scanner will fetch at once.    *<p>    * The default value comes from {@code hbase.client.scanner.caching}.    */
specifier|public
name|int
name|getScannerCaching
parameter_list|()
block|{
return|return
name|scannerCaching
return|;
block|}
comment|/**    * Sets the number of rows that a scanner will fetch at once.    *<p>    * This will override the value specified by    * {@code hbase.client.scanner.caching}.    * Increasing this value will reduce the amount of work needed each time    * {@code next()} is called on a scanner, at the expense of memory use    * (since more rows will need to be maintained in memory by the scanners).    * @param scannerCaching the number of rows a scanner will fetch at once.    */
specifier|public
name|void
name|setScannerCaching
parameter_list|(
name|int
name|scannerCaching
parameter_list|)
block|{
name|this
operator|.
name|scannerCaching
operator|=
name|scannerCaching
expr_stmt|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|HTableDescriptor
name|getTableDescriptor
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|UnmodifyableHTableDescriptor
argument_list|(
name|this
operator|.
name|connection
operator|.
name|getHTableDescriptor
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Gets the starting row key for every region in the currently open table.    *<p>    * This is mainly useful for the MapReduce integration.    * @return Array of region starting row keys    * @throws IOException if a remote or network exception occurs    */
specifier|public
name|byte
index|[]
index|[]
name|getStartKeys
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getStartEndKeys
argument_list|()
operator|.
name|getFirst
argument_list|()
return|;
block|}
comment|/**    * Gets the ending row key for every region in the currently open table.    *<p>    * This is mainly useful for the MapReduce integration.    * @return Array of region ending row keys    * @throws IOException if a remote or network exception occurs    */
specifier|public
name|byte
index|[]
index|[]
name|getEndKeys
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getStartEndKeys
argument_list|()
operator|.
name|getSecond
argument_list|()
return|;
block|}
comment|/**    * Gets the starting and ending row keys for every region in the currently    * open table.    *<p>    * This is mainly useful for the MapReduce integration.    * @return Pair of arrays of region starting and ending row keys    * @throws IOException if a remote or network exception occurs    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|Pair
argument_list|<
name|byte
index|[]
index|[]
argument_list|,
name|byte
index|[]
index|[]
argument_list|>
name|getStartEndKeys
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|startKeyList
init|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|endKeyList
init|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|MetaScannerVisitor
name|visitor
init|=
operator|new
name|MetaScannerVisitor
argument_list|()
block|{
specifier|public
name|boolean
name|processRow
parameter_list|(
name|Result
name|rowResult
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|bytes
init|=
name|rowResult
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|REGIONINFO_QUALIFIER
argument_list|)
decl_stmt|;
if|if
condition|(
name|bytes
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Null "
operator|+
name|HConstants
operator|.
name|REGIONINFO_QUALIFIER
operator|+
literal|" cell in "
operator|+
name|rowResult
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|HRegionInfo
name|info
init|=
name|Writables
operator|.
name|getHRegionInfo
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|info
operator|.
name|getTableName
argument_list|()
argument_list|,
name|getTableName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|info
operator|.
name|isOffline
argument_list|()
operator|||
name|info
operator|.
name|isSplit
argument_list|()
operator|)
condition|)
block|{
name|startKeyList
operator|.
name|add
argument_list|(
name|info
operator|.
name|getStartKey
argument_list|()
argument_list|)
expr_stmt|;
name|endKeyList
operator|.
name|add
argument_list|(
name|info
operator|.
name|getEndKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|MetaScanner
operator|.
name|metaScan
argument_list|(
name|configuration
argument_list|,
name|visitor
argument_list|,
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
return|return
operator|new
name|Pair
argument_list|(
name|startKeyList
operator|.
name|toArray
argument_list|(
operator|new
name|byte
index|[
name|startKeyList
operator|.
name|size
argument_list|()
index|]
index|[]
argument_list|)
argument_list|,
name|endKeyList
operator|.
name|toArray
argument_list|(
operator|new
name|byte
index|[
name|endKeyList
operator|.
name|size
argument_list|()
index|]
index|[]
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Gets all the regions and their address for this table.    * @return A map of HRegionInfo with it's server address    * @throws IOException if a remote or network exception occurs    * @deprecated Use {@link #getRegionLocations()} or {@link #getStartEndKeys()}    */
specifier|public
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
name|getRegionsInfo
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
name|regionMap
init|=
operator|new
name|TreeMap
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
argument_list|()
decl_stmt|;
name|MetaScannerVisitor
name|visitor
init|=
operator|new
name|MetaScannerVisitor
argument_list|()
block|{
specifier|public
name|boolean
name|processRow
parameter_list|(
name|Result
name|rowResult
parameter_list|)
throws|throws
name|IOException
block|{
name|HRegionInfo
name|info
init|=
name|Writables
operator|.
name|getHRegionInfo
argument_list|(
name|rowResult
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|REGIONINFO_QUALIFIER
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|Bytes
operator|.
name|equals
argument_list|(
name|info
operator|.
name|getTableName
argument_list|()
argument_list|,
name|getTableName
argument_list|()
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|HServerAddress
name|server
init|=
operator|new
name|HServerAddress
argument_list|()
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|rowResult
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|SERVER_QUALIFIER
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|value
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|String
name|hostAndPort
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|server
operator|=
operator|new
name|HServerAddress
argument_list|(
name|Addressing
operator|.
name|createInetSocketAddressFromHostAndPortStr
argument_list|(
name|hostAndPort
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|info
operator|.
name|isOffline
argument_list|()
operator|||
name|info
operator|.
name|isSplit
argument_list|()
operator|)
condition|)
block|{
name|regionMap
operator|.
name|put
argument_list|(
operator|new
name|UnmodifyableHRegionInfo
argument_list|(
name|info
argument_list|)
argument_list|,
name|server
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|MetaScanner
operator|.
name|metaScan
argument_list|(
name|configuration
argument_list|,
name|visitor
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
return|return
name|regionMap
return|;
block|}
comment|/**    * Gets all the regions and their address for this table.    *<p>    * This is mainly useful for the MapReduce integration.    * @return A map of HRegionInfo with it's server address    * @throws IOException if a remote or network exception occurs    */
specifier|public
name|NavigableMap
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|getRegionLocations
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|MetaScanner
operator|.
name|allTableRegions
argument_list|(
name|getConfiguration
argument_list|()
argument_list|,
name|getTableName
argument_list|()
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Save the passed region information and the table's regions    * cache.    *<p>    * This is mainly useful for the MapReduce integration. You can call    * {@link #deserializeRegionInfo deserializeRegionInfo}    * to deserialize regions information from a    * {@link DataInput}, then call this method to load them to cache.    *    *<pre>    * {@code    * HTable t1 = new HTable("foo");    * FileInputStream fis = new FileInputStream("regions.dat");    * DataInputStream dis = new DataInputStream(fis);    *    * Map<HRegionInfo, HServerAddress> hm = t1.deserializeRegionInfo(dis);    * t1.prewarmRegionCache(hm);    * }    *</pre>    * @param regionMap This piece of regions information will be loaded    * to region cache.    */
specifier|public
name|void
name|prewarmRegionCache
parameter_list|(
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
name|regionMap
parameter_list|)
block|{
name|this
operator|.
name|connection
operator|.
name|prewarmRegionCache
argument_list|(
name|this
operator|.
name|getTableName
argument_list|()
argument_list|,
name|regionMap
argument_list|)
expr_stmt|;
block|}
comment|/**    * Serialize the regions information of this table and output    * to<code>out</code>.    *<p>    * This is mainly useful for the MapReduce integration. A client could    * perform a large scan for all the regions for the table, serialize the    * region info to a file. MR job can ship a copy of the meta for the table in    * the DistributedCache.    *<pre>    * {@code    * FileOutputStream fos = new FileOutputStream("regions.dat");    * DataOutputStream dos = new DataOutputStream(fos);    * table.serializeRegionInfo(dos);    * dos.flush();    * dos.close();    * }    *</pre>    * @param out {@link DataOutput} to serialize this object into.    * @throws IOException if a remote or network exception occurs    */
specifier|public
name|void
name|serializeRegionInfo
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
name|allRegions
init|=
name|this
operator|.
name|getRegionsInfo
argument_list|()
decl_stmt|;
comment|// first, write number of regions
name|out
operator|.
name|writeInt
argument_list|(
name|allRegions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
name|es
range|:
name|allRegions
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|es
operator|.
name|getKey
argument_list|()
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|es
operator|.
name|getValue
argument_list|()
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Read from<code>in</code> and deserialize the regions information.    *    *<p>It behaves similarly as {@link #getRegionsInfo getRegionsInfo}, except    * that it loads the region map from a {@link DataInput} object.    *    *<p>It is supposed to be followed immediately by  {@link    * #prewarmRegionCache prewarmRegionCache}.    *    *<p>    * Please refer to {@link #prewarmRegionCache prewarmRegionCache} for usage.    *    * @param in {@link DataInput} object.    * @return A map of HRegionInfo with its server address.    * @throws IOException if an I/O exception occurs.    */
specifier|public
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
name|deserializeRegionInfo
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
name|allRegions
init|=
operator|new
name|TreeMap
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
argument_list|()
decl_stmt|;
comment|// the first integer is expected to be the size of records
name|int
name|regionsCount
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|regionsCount
condition|;
operator|++
name|i
control|)
block|{
name|HRegionInfo
name|hri
init|=
operator|new
name|HRegionInfo
argument_list|()
decl_stmt|;
name|hri
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|HServerAddress
name|hsa
init|=
operator|new
name|HServerAddress
argument_list|()
decl_stmt|;
name|hsa
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|allRegions
operator|.
name|put
argument_list|(
name|hri
argument_list|,
name|hsa
argument_list|)
expr_stmt|;
block|}
return|return
name|allRegions
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|Result
name|getRowOrBefore
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|connection
operator|.
name|getRegionServerWithRetries
argument_list|(
operator|new
name|ServerCallable
argument_list|<
name|Result
argument_list|>
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
name|row
argument_list|,
name|operationTimeout
argument_list|)
block|{
specifier|public
name|Result
name|call
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|server
operator|.
name|getClosestRowBefore
argument_list|(
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|row
argument_list|,
name|family
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**     * {@inheritDoc}     */
annotation|@
name|Override
specifier|public
name|ResultScanner
name|getScanner
parameter_list|(
specifier|final
name|Scan
name|scan
parameter_list|)
throws|throws
name|IOException
block|{
name|ClientScanner
name|s
init|=
operator|new
name|ClientScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|s
operator|.
name|initialize
argument_list|()
expr_stmt|;
return|return
name|s
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|ResultScanner
name|getScanner
parameter_list|(
name|byte
index|[]
name|family
parameter_list|)
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
return|return
name|getScanner
argument_list|(
name|scan
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|ResultScanner
name|getScanner
parameter_list|(
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|)
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
return|return
name|getScanner
argument_list|(
name|scan
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|Result
name|get
parameter_list|(
specifier|final
name|Get
name|get
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|connection
operator|.
name|getRegionServerWithRetries
argument_list|(
operator|new
name|ServerCallable
argument_list|<
name|Result
argument_list|>
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
name|get
operator|.
name|getRow
argument_list|()
argument_list|,
name|operationTimeout
argument_list|)
block|{
specifier|public
name|Result
name|call
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|server
operator|.
name|get
argument_list|(
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|get
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|Result
index|[]
name|get
parameter_list|(
name|List
argument_list|<
name|Get
argument_list|>
name|gets
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|Object
index|[]
name|r1
init|=
name|batch
argument_list|(
operator|(
name|List
operator|)
name|gets
argument_list|)
decl_stmt|;
comment|// translate.
name|Result
index|[]
name|results
init|=
operator|new
name|Result
index|[
name|r1
operator|.
name|length
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|r1
control|)
block|{
comment|// batch ensures if there is a failure we get an exception instead
name|results
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|Result
operator|)
name|o
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|batch
parameter_list|(
specifier|final
name|List
argument_list|<
name|Row
argument_list|>
name|actions
parameter_list|,
specifier|final
name|Object
index|[]
name|results
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|connection
operator|.
name|processBatch
argument_list|(
name|actions
argument_list|,
name|tableName
argument_list|,
name|pool
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
specifier|synchronized
name|Object
index|[]
name|batch
parameter_list|(
specifier|final
name|List
argument_list|<
name|Row
argument_list|>
name|actions
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|Object
index|[]
name|results
init|=
operator|new
name|Object
index|[
name|actions
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|connection
operator|.
name|processBatch
argument_list|(
name|actions
argument_list|,
name|tableName
argument_list|,
name|pool
argument_list|,
name|results
argument_list|)
expr_stmt|;
return|return
name|results
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|void
name|delete
parameter_list|(
specifier|final
name|Delete
name|delete
parameter_list|)
throws|throws
name|IOException
block|{
name|connection
operator|.
name|getRegionServerWithRetries
argument_list|(
operator|new
name|ServerCallable
argument_list|<
name|Boolean
argument_list|>
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
name|delete
operator|.
name|getRow
argument_list|()
argument_list|,
name|operationTimeout
argument_list|)
block|{
specifier|public
name|Boolean
name|call
parameter_list|()
throws|throws
name|IOException
block|{
name|server
operator|.
name|delete
argument_list|(
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|delete
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
comment|// FindBugs NP_BOOLEAN_RETURN_NULL
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|void
name|delete
parameter_list|(
specifier|final
name|List
argument_list|<
name|Delete
argument_list|>
name|deletes
parameter_list|)
throws|throws
name|IOException
block|{
name|Object
index|[]
name|results
init|=
operator|new
name|Object
index|[
name|deletes
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
try|try
block|{
name|connection
operator|.
name|processBatch
argument_list|(
operator|(
name|List
operator|)
name|deletes
argument_list|,
name|tableName
argument_list|,
name|pool
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
comment|// mutate list so that it is empty for complete success, or contains only failed records
comment|// results are returned in the same order as the requests in list
comment|// walk the list backwards, so we can remove from list without impacting the indexes of earlier members
for|for
control|(
name|int
name|i
init|=
name|results
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
comment|// if result is not null, it succeeded
if|if
condition|(
name|results
index|[
name|i
index|]
operator|instanceof
name|Result
condition|)
block|{
name|deletes
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|void
name|put
parameter_list|(
specifier|final
name|Put
name|put
parameter_list|)
throws|throws
name|IOException
block|{
name|doPut
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|put
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|void
name|put
parameter_list|(
specifier|final
name|List
argument_list|<
name|Put
argument_list|>
name|puts
parameter_list|)
throws|throws
name|IOException
block|{
name|doPut
argument_list|(
name|puts
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doPut
parameter_list|(
specifier|final
name|List
argument_list|<
name|Put
argument_list|>
name|puts
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|n
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Put
name|put
range|:
name|puts
control|)
block|{
name|validatePut
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|writeBuffer
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|currentWriteBufferSize
operator|+=
name|put
operator|.
name|heapSize
argument_list|()
expr_stmt|;
comment|// we need to periodically see if the writebuffer is full instead of waiting until the end of the List
name|n
operator|++
expr_stmt|;
if|if
condition|(
name|n
operator|%
name|DOPUT_WB_CHECK
operator|==
literal|0
operator|&&
name|currentWriteBufferSize
operator|>
name|writeBufferSize
condition|)
block|{
name|flushCommits
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|autoFlush
operator|||
name|currentWriteBufferSize
operator|>
name|writeBufferSize
condition|)
block|{
name|flushCommits
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|Result
name|increment
parameter_list|(
specifier|final
name|Increment
name|increment
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|increment
operator|.
name|hasFamilies
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid arguments to increment, no columns specified"
argument_list|)
throw|;
block|}
return|return
name|connection
operator|.
name|getRegionServerWithRetries
argument_list|(
operator|new
name|ServerCallable
argument_list|<
name|Result
argument_list|>
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
name|increment
operator|.
name|getRow
argument_list|()
argument_list|,
name|operationTimeout
argument_list|)
block|{
specifier|public
name|Result
name|call
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|server
operator|.
name|increment
argument_list|(
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|increment
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|long
name|incrementColumnValue
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|byte
index|[]
name|qualifier
parameter_list|,
specifier|final
name|long
name|amount
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|incrementColumnValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|amount
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|long
name|incrementColumnValue
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|byte
index|[]
name|qualifier
parameter_list|,
specifier|final
name|long
name|amount
parameter_list|,
specifier|final
name|boolean
name|writeToWAL
parameter_list|)
throws|throws
name|IOException
block|{
name|NullPointerException
name|npe
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|row
operator|==
literal|null
condition|)
block|{
name|npe
operator|=
operator|new
name|NullPointerException
argument_list|(
literal|"row is null"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|family
operator|==
literal|null
condition|)
block|{
name|npe
operator|=
operator|new
name|NullPointerException
argument_list|(
literal|"column is null"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|npe
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid arguments to incrementColumnValue"
argument_list|,
name|npe
argument_list|)
throw|;
block|}
return|return
name|connection
operator|.
name|getRegionServerWithRetries
argument_list|(
operator|new
name|ServerCallable
argument_list|<
name|Long
argument_list|>
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
name|row
argument_list|,
name|operationTimeout
argument_list|)
block|{
specifier|public
name|Long
name|call
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|server
operator|.
name|incrementColumnValue
argument_list|(
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|amount
argument_list|,
name|writeToWAL
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|boolean
name|checkAndPut
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|byte
index|[]
name|qualifier
parameter_list|,
specifier|final
name|byte
index|[]
name|value
parameter_list|,
specifier|final
name|Put
name|put
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|connection
operator|.
name|getRegionServerWithRetries
argument_list|(
operator|new
name|ServerCallable
argument_list|<
name|Boolean
argument_list|>
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
name|row
argument_list|,
name|operationTimeout
argument_list|)
block|{
specifier|public
name|Boolean
name|call
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|server
operator|.
name|checkAndPut
argument_list|(
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|value
argument_list|,
name|put
argument_list|)
condition|?
name|Boolean
operator|.
name|TRUE
else|:
name|Boolean
operator|.
name|FALSE
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|boolean
name|checkAndDelete
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|byte
index|[]
name|qualifier
parameter_list|,
specifier|final
name|byte
index|[]
name|value
parameter_list|,
specifier|final
name|Delete
name|delete
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|connection
operator|.
name|getRegionServerWithRetries
argument_list|(
operator|new
name|ServerCallable
argument_list|<
name|Boolean
argument_list|>
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
name|row
argument_list|,
name|operationTimeout
argument_list|)
block|{
specifier|public
name|Boolean
name|call
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|server
operator|.
name|checkAndDelete
argument_list|(
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|value
argument_list|,
name|delete
argument_list|)
condition|?
name|Boolean
operator|.
name|TRUE
else|:
name|Boolean
operator|.
name|FALSE
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|boolean
name|exists
parameter_list|(
specifier|final
name|Get
name|get
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|connection
operator|.
name|getRegionServerWithRetries
argument_list|(
operator|new
name|ServerCallable
argument_list|<
name|Boolean
argument_list|>
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
name|get
operator|.
name|getRow
argument_list|()
argument_list|,
name|operationTimeout
argument_list|)
block|{
specifier|public
name|Boolean
name|call
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|server
operator|.
name|exists
argument_list|(
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|get
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|void
name|flushCommits
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|connection
operator|.
name|processBatchOfPuts
argument_list|(
name|writeBuffer
argument_list|,
name|tableName
argument_list|,
name|pool
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|clearBufferOnFail
condition|)
block|{
name|writeBuffer
operator|.
name|clear
argument_list|()
expr_stmt|;
name|currentWriteBufferSize
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
comment|// the write buffer was adjusted by processBatchOfPuts
name|currentWriteBufferSize
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|Put
name|aPut
range|:
name|writeBuffer
control|)
block|{
name|currentWriteBufferSize
operator|+=
name|aPut
operator|.
name|heapSize
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|closed
condition|)
block|{
return|return;
block|}
name|flushCommits
argument_list|()
expr_stmt|;
name|this
operator|.
name|pool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|connection
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|closed
operator|=
literal|true
expr_stmt|;
block|}
comment|// validate for well-formedness
specifier|private
name|void
name|validatePut
parameter_list|(
specifier|final
name|Put
name|put
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|put
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No columns to insert"
argument_list|)
throw|;
block|}
if|if
condition|(
name|maxKeyValueSize
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|List
argument_list|<
name|KeyValue
argument_list|>
name|list
range|:
name|put
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|KeyValue
name|kv
range|:
name|list
control|)
block|{
if|if
condition|(
name|kv
operator|.
name|getLength
argument_list|()
operator|>
name|maxKeyValueSize
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"KeyValue size too large"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|RowLock
name|lockRow
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|connection
operator|.
name|getRegionServerWithRetries
argument_list|(
operator|new
name|ServerCallable
argument_list|<
name|RowLock
argument_list|>
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
name|row
argument_list|,
name|operationTimeout
argument_list|)
block|{
specifier|public
name|RowLock
name|call
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|lockId
init|=
name|server
operator|.
name|lockRow
argument_list|(
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|row
argument_list|)
decl_stmt|;
return|return
operator|new
name|RowLock
argument_list|(
name|row
argument_list|,
name|lockId
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|void
name|unlockRow
parameter_list|(
specifier|final
name|RowLock
name|rl
parameter_list|)
throws|throws
name|IOException
block|{
name|connection
operator|.
name|getRegionServerWithRetries
argument_list|(
operator|new
name|ServerCallable
argument_list|<
name|Boolean
argument_list|>
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
name|rl
operator|.
name|getRow
argument_list|()
argument_list|,
name|operationTimeout
argument_list|)
block|{
specifier|public
name|Boolean
name|call
parameter_list|()
throws|throws
name|IOException
block|{
name|server
operator|.
name|unlockRow
argument_list|(
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|rl
operator|.
name|getLockId
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
comment|// FindBugs NP_BOOLEAN_RETURN_NULL
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|boolean
name|isAutoFlush
parameter_list|()
block|{
return|return
name|autoFlush
return|;
block|}
comment|/**    * See {@link #setAutoFlush(boolean, boolean)}    *    * @param autoFlush    *          Whether or not to enable 'auto-flush'.    */
specifier|public
name|void
name|setAutoFlush
parameter_list|(
name|boolean
name|autoFlush
parameter_list|)
block|{
name|setAutoFlush
argument_list|(
name|autoFlush
argument_list|,
name|autoFlush
argument_list|)
expr_stmt|;
block|}
comment|/**    * Turns 'auto-flush' on or off.    *<p>    * When enabled (default), {@link Put} operations don't get buffered/delayed    * and are immediately executed. Failed operations are not retried. This is    * slower but safer.    *<p>    * Turning off {@link #autoFlush} means that multiple {@link Put}s will be    * accepted before any RPC is actually sent to do the write operations. If the    * application dies before pending writes get flushed to HBase, data will be    * lost.    *<p>    * When you turn {@link #autoFlush} off, you should also consider the    * {@link #clearBufferOnFail} option. By default, asynchronous {@link Put}    * requests will be retried on failure until successful. However, this can    * pollute the writeBuffer and slow down batching performance. Additionally,    * you may want to issue a number of Put requests and call    * {@link #flushCommits()} as a barrier. In both use cases, consider setting    * clearBufferOnFail to true to erase the buffer after {@link #flushCommits()}    * has been called, regardless of success.    *    * @param autoFlush    *          Whether or not to enable 'auto-flush'.    * @param clearBufferOnFail    *          Whether to keep Put failures in the writeBuffer    * @see #flushCommits    */
specifier|public
name|void
name|setAutoFlush
parameter_list|(
name|boolean
name|autoFlush
parameter_list|,
name|boolean
name|clearBufferOnFail
parameter_list|)
block|{
name|this
operator|.
name|autoFlush
operator|=
name|autoFlush
expr_stmt|;
name|this
operator|.
name|clearBufferOnFail
operator|=
name|autoFlush
operator|||
name|clearBufferOnFail
expr_stmt|;
block|}
comment|/**    * Returns the maximum size in bytes of the write buffer for this HTable.    *<p>    * The default value comes from the configuration parameter    * {@code hbase.client.write.buffer}.    * @return The size of the write buffer in bytes.    */
specifier|public
name|long
name|getWriteBufferSize
parameter_list|()
block|{
return|return
name|writeBufferSize
return|;
block|}
comment|/**    * Sets the size of the buffer in bytes.    *<p>    * If the new size is less than the current amount of data in the    * write buffer, the buffer gets flushed.    * @param writeBufferSize The new write buffer size, in bytes.    * @throws IOException if a remote or network exception occurs.    */
specifier|public
name|void
name|setWriteBufferSize
parameter_list|(
name|long
name|writeBufferSize
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|writeBufferSize
operator|=
name|writeBufferSize
expr_stmt|;
if|if
condition|(
name|currentWriteBufferSize
operator|>
name|writeBufferSize
condition|)
block|{
name|flushCommits
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Returns the write buffer.    * @return The current write buffer.    */
specifier|public
name|ArrayList
argument_list|<
name|Put
argument_list|>
name|getWriteBuffer
parameter_list|()
block|{
return|return
name|writeBuffer
return|;
block|}
comment|/**    * Implements the scanner interface for the HBase client.    * If there are multiple regions in a table, this scanner will iterate    * through them all.    */
specifier|protected
class|class
name|ClientScanner
implements|implements
name|ResultScanner
block|{
specifier|private
specifier|final
name|Log
name|CLIENT_LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
comment|// HEADSUP: The scan internal start row can change as we move through table.
specifier|private
name|Scan
name|scan
decl_stmt|;
specifier|private
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
comment|// Current region scanner is against.  Gets cleared if current region goes
comment|// wonky: e.g. if it splits on us.
specifier|private
name|HRegionInfo
name|currentRegion
init|=
literal|null
decl_stmt|;
specifier|private
name|ScannerCallable
name|callable
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|LinkedList
argument_list|<
name|Result
argument_list|>
name|cache
init|=
operator|new
name|LinkedList
argument_list|<
name|Result
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|int
name|caching
decl_stmt|;
specifier|private
name|long
name|lastNext
decl_stmt|;
comment|// Keep lastResult returned successfully in case we have to reset scanner.
specifier|private
name|Result
name|lastResult
init|=
literal|null
decl_stmt|;
specifier|private
name|ScanMetrics
name|scanMetrics
init|=
literal|null
decl_stmt|;
specifier|protected
name|ClientScanner
parameter_list|(
specifier|final
name|Scan
name|scan
parameter_list|)
block|{
if|if
condition|(
name|CLIENT_LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|CLIENT_LOG
operator|.
name|debug
argument_list|(
literal|"Creating scanner over "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|getTableName
argument_list|()
argument_list|)
operator|+
literal|" starting at key '"
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|scan
operator|.
name|getStartRow
argument_list|()
argument_list|)
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|scan
operator|=
name|scan
expr_stmt|;
name|this
operator|.
name|lastNext
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
comment|// check if application wants to collect scan metrics
name|byte
index|[]
name|enableMetrics
init|=
name|scan
operator|.
name|getAttribute
argument_list|(
name|Scan
operator|.
name|SCAN_ATTRIBUTES_METRICS_ENABLE
argument_list|)
decl_stmt|;
if|if
condition|(
name|enableMetrics
operator|!=
literal|null
operator|&&
name|Bytes
operator|.
name|toBoolean
argument_list|(
name|enableMetrics
argument_list|)
condition|)
block|{
name|scanMetrics
operator|=
operator|new
name|ScanMetrics
argument_list|()
expr_stmt|;
block|}
comment|// Use the caching from the Scan.  If not set, use the default cache setting for this table.
if|if
condition|(
name|this
operator|.
name|scan
operator|.
name|getCaching
argument_list|()
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|caching
operator|=
name|this
operator|.
name|scan
operator|.
name|getCaching
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|caching
operator|=
name|HTable
operator|.
name|this
operator|.
name|scannerCaching
expr_stmt|;
block|}
comment|// Removed filter validation.  We have a new format now, only one of all
comment|// the current filters has a validate() method.  We can add it back,
comment|// need to decide on what we're going to do re: filter redesign.
comment|// Need, at the least, to break up family from qualifier as separate
comment|// checks, I think it's important server-side filters are optimal in that
comment|// respect.
block|}
specifier|public
name|void
name|initialize
parameter_list|()
throws|throws
name|IOException
block|{
name|nextScanner
argument_list|(
name|this
operator|.
name|caching
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Scan
name|getScan
parameter_list|()
block|{
return|return
name|scan
return|;
block|}
specifier|protected
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|lastNext
return|;
block|}
comment|// returns true if the passed region endKey
specifier|private
name|boolean
name|checkScanStopRow
parameter_list|(
specifier|final
name|byte
index|[]
name|endKey
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|scan
operator|.
name|getStopRow
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
comment|// there is a stop row, check to see if we are past it.
name|byte
index|[]
name|stopRow
init|=
name|scan
operator|.
name|getStopRow
argument_list|()
decl_stmt|;
name|int
name|cmp
init|=
name|Bytes
operator|.
name|compareTo
argument_list|(
name|stopRow
argument_list|,
literal|0
argument_list|,
name|stopRow
operator|.
name|length
argument_list|,
name|endKey
argument_list|,
literal|0
argument_list|,
name|endKey
operator|.
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|<=
literal|0
condition|)
block|{
comment|// stopRow<= endKey (endKey is equals to or larger than stopRow)
comment|// This is a stop.
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
comment|//unlikely.
block|}
comment|/*      * Gets a scanner for the next region.  If this.currentRegion != null, then      * we will move to the endrow of this.currentRegion.  Else we will get      * scanner at the scan.getStartRow().  We will go no further, just tidy      * up outstanding scanners, if<code>currentRegion != null</code> and      *<code>done</code> is true.      * @param nbRows      * @param done Server-side says we're done scanning.      */
specifier|private
name|boolean
name|nextScanner
parameter_list|(
name|int
name|nbRows
parameter_list|,
specifier|final
name|boolean
name|done
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Close the previous scanner if it's open
if|if
condition|(
name|this
operator|.
name|callable
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|callable
operator|.
name|setClose
argument_list|()
expr_stmt|;
name|getConnection
argument_list|()
operator|.
name|getRegionServerWithRetries
argument_list|(
name|callable
argument_list|)
expr_stmt|;
name|this
operator|.
name|callable
operator|=
literal|null
expr_stmt|;
block|}
comment|// Where to start the next scanner
name|byte
index|[]
name|localStartKey
decl_stmt|;
comment|// if we're at end of table, close and return false to stop iterating
if|if
condition|(
name|this
operator|.
name|currentRegion
operator|!=
literal|null
condition|)
block|{
name|byte
index|[]
name|endKey
init|=
name|this
operator|.
name|currentRegion
operator|.
name|getEndKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|endKey
operator|==
literal|null
operator|||
name|Bytes
operator|.
name|equals
argument_list|(
name|endKey
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
operator|||
name|checkScanStopRow
argument_list|(
name|endKey
argument_list|)
operator|||
name|done
condition|)
block|{
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|CLIENT_LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|CLIENT_LOG
operator|.
name|debug
argument_list|(
literal|"Finished with scanning at "
operator|+
name|this
operator|.
name|currentRegion
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
name|localStartKey
operator|=
name|endKey
expr_stmt|;
if|if
condition|(
name|CLIENT_LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|CLIENT_LOG
operator|.
name|debug
argument_list|(
literal|"Finished with region "
operator|+
name|this
operator|.
name|currentRegion
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|localStartKey
operator|=
name|this
operator|.
name|scan
operator|.
name|getStartRow
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|CLIENT_LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|CLIENT_LOG
operator|.
name|debug
argument_list|(
literal|"Advancing internal scanner to startKey at '"
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|localStartKey
argument_list|)
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|callable
operator|=
name|getScannerCallable
argument_list|(
name|localStartKey
argument_list|,
name|nbRows
argument_list|)
expr_stmt|;
comment|// Open a scanner on the region server starting at the
comment|// beginning of the region
name|getConnection
argument_list|()
operator|.
name|getRegionServerWithRetries
argument_list|(
name|callable
argument_list|)
expr_stmt|;
name|this
operator|.
name|currentRegion
operator|=
name|callable
operator|.
name|getHRegionInfo
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|scanMetrics
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|scanMetrics
operator|.
name|countOfRegions
operator|.
name|inc
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|close
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
return|return
literal|true
return|;
block|}
specifier|protected
name|ScannerCallable
name|getScannerCallable
parameter_list|(
name|byte
index|[]
name|localStartKey
parameter_list|,
name|int
name|nbRows
parameter_list|)
block|{
name|scan
operator|.
name|setStartRow
argument_list|(
name|localStartKey
argument_list|)
expr_stmt|;
name|ScannerCallable
name|s
init|=
operator|new
name|ScannerCallable
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getTableName
argument_list|()
argument_list|,
name|scan
argument_list|,
name|this
operator|.
name|scanMetrics
argument_list|)
decl_stmt|;
name|s
operator|.
name|setCaching
argument_list|(
name|nbRows
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
comment|/**      * publish the scan metrics      * For now, we use scan.setAttribute to pass the metrics for application      * or TableInputFormat to consume      * Later, we could push it to other systems      * We don't use metrics framework because it doesn't support      * multi instances of the same metrics on the same machine; for scan/map      * reduce scenarios, we will have multiple scans running at the same time      */
specifier|private
name|void
name|writeScanMetrics
parameter_list|()
throws|throws
name|IOException
block|{
comment|// by default, scanMetrics is null
comment|// if application wants to collect scanMetrics, it can turn it on by
comment|// calling scan.setAttribute(SCAN_ATTRIBUTES_METRICS_ENABLE,
comment|// Bytes.toBytes(Boolean.TRUE))
if|if
condition|(
name|this
operator|.
name|scanMetrics
operator|==
literal|null
condition|)
block|{
return|return;
block|}
specifier|final
name|DataOutputBuffer
name|d
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|scanMetrics
operator|.
name|write
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setAttribute
argument_list|(
name|Scan
operator|.
name|SCAN_ATTRIBUTES_METRICS_DATA
argument_list|,
name|d
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Result
name|next
parameter_list|()
throws|throws
name|IOException
block|{
comment|// If the scanner is closed but there is some rows left in the cache,
comment|// it will first empty it before returning null
if|if
condition|(
name|cache
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|&&
name|this
operator|.
name|closed
condition|)
block|{
name|writeScanMetrics
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|cache
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|Result
index|[]
name|values
init|=
literal|null
decl_stmt|;
name|long
name|remainingResultSize
init|=
name|maxScannerResultSize
decl_stmt|;
name|int
name|countdown
init|=
name|this
operator|.
name|caching
decl_stmt|;
comment|// We need to reset it if it's a new callable that was created
comment|// with a countdown in nextScanner
name|callable
operator|.
name|setCaching
argument_list|(
name|this
operator|.
name|caching
argument_list|)
expr_stmt|;
comment|// This flag is set when we want to skip the result returned.  We do
comment|// this when we reset scanner because it split under us.
name|boolean
name|skipFirst
init|=
literal|false
decl_stmt|;
do|do
block|{
try|try
block|{
if|if
condition|(
name|skipFirst
condition|)
block|{
comment|// Skip only the first row (which was the last row of the last
comment|// already-processed batch).
name|callable
operator|.
name|setCaching
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|values
operator|=
name|getConnection
argument_list|()
operator|.
name|getRegionServerWithRetries
argument_list|(
name|callable
argument_list|)
expr_stmt|;
name|callable
operator|.
name|setCaching
argument_list|(
name|this
operator|.
name|caching
argument_list|)
expr_stmt|;
name|skipFirst
operator|=
literal|false
expr_stmt|;
block|}
comment|// Server returns a null values if scanning is to stop.  Else,
comment|// returns an empty array if scanning is to go on and we've just
comment|// exhausted current region.
name|values
operator|=
name|getConnection
argument_list|()
operator|.
name|getRegionServerWithRetries
argument_list|(
name|callable
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DoNotRetryIOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|UnknownScannerException
condition|)
block|{
name|long
name|timeout
init|=
name|lastNext
operator|+
name|scannerTimeout
decl_stmt|;
comment|// If we are over the timeout, throw this exception to the client
comment|// Else, it's because the region moved and we used the old id
comment|// against the new region server; reset the scanner.
if|if
condition|(
name|timeout
operator|<
name|System
operator|.
name|currentTimeMillis
argument_list|()
condition|)
block|{
name|long
name|elapsed
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|lastNext
decl_stmt|;
name|ScannerTimeoutException
name|ex
init|=
operator|new
name|ScannerTimeoutException
argument_list|(
name|elapsed
operator|+
literal|"ms passed since the last invocation, "
operator|+
literal|"timeout is currently set to "
operator|+
name|scannerTimeout
argument_list|)
decl_stmt|;
name|ex
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
else|else
block|{
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|==
literal|null
operator|||
operator|(
operator|!
operator|(
name|cause
operator|instanceof
name|NotServingRegionException
operator|)
operator|&&
operator|!
operator|(
name|cause
operator|instanceof
name|RegionServerStoppedException
operator|)
operator|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
comment|// Else, its signal from depths of ScannerCallable that we got an
comment|// NSRE on a next and that we need to reset the scanner.
if|if
condition|(
name|this
operator|.
name|lastResult
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|scan
operator|.
name|setStartRow
argument_list|(
name|this
operator|.
name|lastResult
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
comment|// Skip first row returned.  We already let it out on previous
comment|// invocation.
name|skipFirst
operator|=
literal|true
expr_stmt|;
block|}
comment|// Clear region
name|this
operator|.
name|currentRegion
operator|=
literal|null
expr_stmt|;
continue|continue;
block|}
name|long
name|currentTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|scanMetrics
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|scanMetrics
operator|.
name|sumOfMillisSecBetweenNexts
operator|.
name|inc
argument_list|(
name|currentTime
operator|-
name|lastNext
argument_list|)
expr_stmt|;
block|}
name|lastNext
operator|=
name|currentTime
expr_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
operator|&&
name|values
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Result
name|rs
range|:
name|values
control|)
block|{
name|cache
operator|.
name|add
argument_list|(
name|rs
argument_list|)
expr_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
name|rs
operator|.
name|raw
argument_list|()
control|)
block|{
name|remainingResultSize
operator|-=
name|kv
operator|.
name|heapSize
argument_list|()
expr_stmt|;
block|}
name|countdown
operator|--
expr_stmt|;
name|this
operator|.
name|lastResult
operator|=
name|rs
expr_stmt|;
block|}
block|}
comment|// Values == null means server-side filter has determined we must STOP
block|}
do|while
condition|(
name|remainingResultSize
operator|>
literal|0
operator|&&
name|countdown
operator|>
literal|0
operator|&&
name|nextScanner
argument_list|(
name|countdown
argument_list|,
name|values
operator|==
literal|null
argument_list|)
condition|)
do|;
block|}
if|if
condition|(
name|cache
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|cache
operator|.
name|poll
argument_list|()
return|;
block|}
name|writeScanMetrics
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|/**      * Get<param>nbRows</param> rows.      * How many RPCs are made is determined by the {@link Scan#setCaching(int)}      * setting (or hbase.client.scanner.caching in hbase-site.xml).      * @param nbRows number of rows to return      * @return Between zero and<param>nbRows</param> RowResults.  Scan is done      * if returned array is of zero-length (We never return null).      * @throws IOException      */
specifier|public
name|Result
index|[]
name|next
parameter_list|(
name|int
name|nbRows
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Collect values to be returned here
name|ArrayList
argument_list|<
name|Result
argument_list|>
name|resultSets
init|=
operator|new
name|ArrayList
argument_list|<
name|Result
argument_list|>
argument_list|(
name|nbRows
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nbRows
condition|;
name|i
operator|++
control|)
block|{
name|Result
name|next
init|=
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
name|resultSets
operator|.
name|add
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
return|return
name|resultSets
operator|.
name|toArray
argument_list|(
operator|new
name|Result
index|[
name|resultSets
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|callable
operator|!=
literal|null
condition|)
block|{
name|callable
operator|.
name|setClose
argument_list|()
expr_stmt|;
try|try
block|{
name|getConnection
argument_list|()
operator|.
name|getRegionServerWithRetries
argument_list|(
name|callable
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// We used to catch this error, interpret, and rethrow. However, we
comment|// have since decided that it's not nice for a scanner's close to
comment|// throw exceptions. Chances are it was just an UnknownScanner
comment|// exception due to lease time out.
block|}
name|callable
operator|=
literal|null
expr_stmt|;
block|}
name|closed
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|Iterator
argument_list|<
name|Result
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|Result
argument_list|>
argument_list|()
block|{
comment|// The next RowResult, possibly pre-read
name|Result
name|next
init|=
literal|null
decl_stmt|;
comment|// return true if there is another item pending, false if there isn't.
comment|// this method is where the actual advancing takes place, but you need
comment|// to call next() to consume it. hasNext() will only advance if there
comment|// isn't a pending next().
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
name|next
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|next
operator|=
name|ClientScanner
operator|.
name|this
operator|.
name|next
argument_list|()
expr_stmt|;
return|return
name|next
operator|!=
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|// get the pending next item and advance the iterator. returns null if
comment|// there is no next item.
specifier|public
name|Result
name|next
parameter_list|()
block|{
comment|// since hasNext() does the real advancing, we call this to determine
comment|// if there is a next before proceeding.
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// if we get to here, then hasNext() has given us an item to return.
comment|// we want to return the item and then null out the next pointer, so
comment|// we use a temporary variable.
name|Result
name|temp
init|=
name|next
decl_stmt|;
name|next
operator|=
literal|null
expr_stmt|;
return|return
name|temp
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
block|}
comment|/**    * The pool is used for mutli requests for this HTable    * @return the pool used for mutli    */
name|ExecutorService
name|getPool
parameter_list|()
block|{
return|return
name|this
operator|.
name|pool
return|;
block|}
specifier|static
class|class
name|DaemonThreadFactory
implements|implements
name|ThreadFactory
block|{
specifier|static
specifier|final
name|AtomicInteger
name|poolNumber
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|ThreadGroup
name|group
decl_stmt|;
specifier|final
name|AtomicInteger
name|threadNumber
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|String
name|namePrefix
decl_stmt|;
name|DaemonThreadFactory
parameter_list|()
block|{
name|SecurityManager
name|s
init|=
name|System
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
name|group
operator|=
operator|(
name|s
operator|!=
literal|null
operator|)
condition|?
name|s
operator|.
name|getThreadGroup
argument_list|()
else|:
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getThreadGroup
argument_list|()
expr_stmt|;
name|namePrefix
operator|=
literal|"pool-"
operator|+
name|poolNumber
operator|.
name|getAndIncrement
argument_list|()
operator|+
literal|"-thread-"
expr_stmt|;
block|}
specifier|public
name|Thread
name|newThread
parameter_list|(
name|Runnable
name|r
parameter_list|)
block|{
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
name|group
argument_list|,
name|r
argument_list|,
name|namePrefix
operator|+
name|threadNumber
operator|.
name|getAndIncrement
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|t
operator|.
name|isDaemon
argument_list|()
condition|)
block|{
name|t
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|t
operator|.
name|getPriority
argument_list|()
operator|!=
name|Thread
operator|.
name|NORM_PRIORITY
condition|)
block|{
name|t
operator|.
name|setPriority
argument_list|(
name|Thread
operator|.
name|NORM_PRIORITY
argument_list|)
expr_stmt|;
block|}
return|return
name|t
return|;
block|}
block|}
comment|/**    * Enable or disable region cache prefetch for the table. It will be    * applied for the given table's all HTable instances who share the same    * connection. By default, the cache prefetch is enabled.    * @param tableName name of table to configure.    * @param enable Set to true to enable region cache prefetch. Or set to    * false to disable it.    * @throws IOException    */
specifier|public
specifier|static
name|void
name|setRegionCachePrefetch
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|,
specifier|final
name|boolean
name|enable
parameter_list|)
throws|throws
name|IOException
block|{
name|HConnectionManager
operator|.
name|execute
argument_list|(
operator|new
name|HConnectable
argument_list|<
name|Void
argument_list|>
argument_list|(
name|HBaseConfiguration
operator|.
name|create
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Void
name|connect
parameter_list|(
name|HConnection
name|connection
parameter_list|)
throws|throws
name|IOException
block|{
name|connection
operator|.
name|setRegionCachePrefetch
argument_list|(
name|tableName
argument_list|,
name|enable
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Enable or disable region cache prefetch for the table. It will be    * applied for the given table's all HTable instances who share the same    * connection. By default, the cache prefetch is enabled.    * @param conf The Configuration object to use.    * @param tableName name of table to configure.    * @param enable Set to true to enable region cache prefetch. Or set to    * false to disable it.    * @throws IOException    */
specifier|public
specifier|static
name|void
name|setRegionCachePrefetch
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|byte
index|[]
name|tableName
parameter_list|,
specifier|final
name|boolean
name|enable
parameter_list|)
throws|throws
name|IOException
block|{
name|HConnectionManager
operator|.
name|execute
argument_list|(
operator|new
name|HConnectable
argument_list|<
name|Void
argument_list|>
argument_list|(
name|conf
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Void
name|connect
parameter_list|(
name|HConnection
name|connection
parameter_list|)
throws|throws
name|IOException
block|{
name|connection
operator|.
name|setRegionCachePrefetch
argument_list|(
name|tableName
argument_list|,
name|enable
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check whether region cache prefetch is enabled or not for the table.    * @param conf The Configuration object to use.    * @param tableName name of table to check    * @return true if table's region cache prefecth is enabled. Otherwise    * it is disabled.    * @throws IOException    */
specifier|public
specifier|static
name|boolean
name|getRegionCachePrefetch
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|HConnectionManager
operator|.
name|execute
argument_list|(
operator|new
name|HConnectable
argument_list|<
name|Boolean
argument_list|>
argument_list|(
name|conf
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|connect
parameter_list|(
name|HConnection
name|connection
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|connection
operator|.
name|getRegionCachePrefetch
argument_list|(
name|tableName
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * Check whether region cache prefetch is enabled or not for the table.    * @param tableName name of table to check    * @return true if table's region cache prefecth is enabled. Otherwise    * it is disabled.    * @throws IOException    */
specifier|public
specifier|static
name|boolean
name|getRegionCachePrefetch
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|HConnectionManager
operator|.
name|execute
argument_list|(
operator|new
name|HConnectable
argument_list|<
name|Boolean
argument_list|>
argument_list|(
name|HBaseConfiguration
operator|.
name|create
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|connect
parameter_list|(
name|HConnection
name|connection
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|connection
operator|.
name|getRegionCachePrefetch
argument_list|(
name|tableName
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * Explicitly clears the region cache to fetch the latest value from META.    * This is a power user function: avoid unless you know the ramifications.    */
specifier|public
name|void
name|clearRegionCache
parameter_list|()
block|{
name|this
operator|.
name|connection
operator|.
name|clearRegionCache
argument_list|()
expr_stmt|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|CoprocessorProtocol
parameter_list|>
name|T
name|coprocessorProxy
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|protocol
parameter_list|,
name|byte
index|[]
name|row
parameter_list|)
block|{
return|return
operator|(
name|T
operator|)
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
index|[]
block|{
name|protocol
block|}
argument_list|,
operator|new
name|ExecRPCInvoker
argument_list|(
name|configuration
argument_list|,
name|connection
argument_list|,
name|protocol
argument_list|,
name|tableName
argument_list|,
name|row
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|CoprocessorProtocol
parameter_list|,
name|R
parameter_list|>
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|R
argument_list|>
name|coprocessorExec
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|protocol
parameter_list|,
name|byte
index|[]
name|startKey
parameter_list|,
name|byte
index|[]
name|endKey
parameter_list|,
name|Batch
operator|.
name|Call
argument_list|<
name|T
argument_list|,
name|R
argument_list|>
name|callable
parameter_list|)
throws|throws
name|IOException
throws|,
name|Throwable
block|{
specifier|final
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|R
argument_list|>
name|results
init|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|R
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
name|coprocessorExec
argument_list|(
name|protocol
argument_list|,
name|startKey
argument_list|,
name|endKey
argument_list|,
name|callable
argument_list|,
operator|new
name|Batch
operator|.
name|Callback
argument_list|<
name|R
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|update
parameter_list|(
name|byte
index|[]
name|region
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|R
name|value
parameter_list|)
block|{
name|results
operator|.
name|put
argument_list|(
name|region
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|results
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|CoprocessorProtocol
parameter_list|,
name|R
parameter_list|>
name|void
name|coprocessorExec
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|protocol
parameter_list|,
name|byte
index|[]
name|startKey
parameter_list|,
name|byte
index|[]
name|endKey
parameter_list|,
name|Batch
operator|.
name|Call
argument_list|<
name|T
argument_list|,
name|R
argument_list|>
name|callable
parameter_list|,
name|Batch
operator|.
name|Callback
argument_list|<
name|R
argument_list|>
name|callback
parameter_list|)
throws|throws
name|IOException
throws|,
name|Throwable
block|{
comment|// get regions covered by the row range
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|keys
init|=
name|getStartKeysInRange
argument_list|(
name|startKey
argument_list|,
name|endKey
argument_list|)
decl_stmt|;
name|connection
operator|.
name|processExecs
argument_list|(
name|protocol
argument_list|,
name|keys
argument_list|,
name|tableName
argument_list|,
name|pool
argument_list|,
name|callable
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|getStartKeysInRange
parameter_list|(
name|byte
index|[]
name|start
parameter_list|,
name|byte
index|[]
name|end
parameter_list|)
throws|throws
name|IOException
block|{
name|Pair
argument_list|<
name|byte
index|[]
index|[]
argument_list|,
name|byte
index|[]
index|[]
argument_list|>
name|startEndKeys
init|=
name|getStartEndKeys
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|startKeys
init|=
name|startEndKeys
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|endKeys
init|=
name|startEndKeys
operator|.
name|getSecond
argument_list|()
decl_stmt|;
if|if
condition|(
name|start
operator|==
literal|null
condition|)
block|{
name|start
operator|=
name|HConstants
operator|.
name|EMPTY_START_ROW
expr_stmt|;
block|}
if|if
condition|(
name|end
operator|==
literal|null
condition|)
block|{
name|end
operator|=
name|HConstants
operator|.
name|EMPTY_END_ROW
expr_stmt|;
block|}
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|rangeKeys
init|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|startKeys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|start
argument_list|,
name|startKeys
index|[
name|i
index|]
argument_list|)
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|endKeys
index|[
name|i
index|]
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
operator|||
name|Bytes
operator|.
name|compareTo
argument_list|(
name|start
argument_list|,
name|endKeys
index|[
name|i
index|]
argument_list|)
operator|<
literal|0
condition|)
block|{
name|rangeKeys
operator|.
name|add
argument_list|(
name|start
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|end
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
operator|||
name|Bytes
operator|.
name|compareTo
argument_list|(
name|startKeys
index|[
name|i
index|]
argument_list|,
name|end
argument_list|)
operator|<=
literal|0
condition|)
block|{
name|rangeKeys
operator|.
name|add
argument_list|(
name|startKeys
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
comment|// past stop
block|}
block|}
return|return
name|rangeKeys
return|;
block|}
specifier|public
name|void
name|setOperationTimeout
parameter_list|(
name|int
name|operationTimeout
parameter_list|)
block|{
name|this
operator|.
name|operationTimeout
operator|=
name|operationTimeout
expr_stmt|;
block|}
specifier|public
name|int
name|getOperationTimeout
parameter_list|()
block|{
return|return
name|operationTimeout
return|;
block|}
block|}
end_class

end_unit

