begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ClusterStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MasterNotRunningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RemoteExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|MetaScanner
operator|.
name|MetaScannerVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ImmutableBytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|HMasterInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|HRegionInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|MetaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Writables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_comment
comment|/**  * Check consistency among the in-memory states of the master and the   * region server(s) and the state of data in HDFS.  */
end_comment

begin_class
specifier|public
class|class
name|HBaseFsck
extends|extends
name|HBaseAdmin
block|{
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_TIME_LAG
init|=
literal|60000
decl_stmt|;
comment|// default value of 1 minute
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HBaseFsck
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|FileSystem
name|fs
decl_stmt|;
specifier|private
name|Path
name|rootDir
decl_stmt|;
specifier|private
name|ClusterStatus
name|status
decl_stmt|;
specifier|private
name|HMasterInterface
name|master
decl_stmt|;
specifier|private
name|HConnection
name|connection
decl_stmt|;
specifier|private
name|TreeMap
argument_list|<
name|HRegionInfo
argument_list|,
name|MetaEntry
argument_list|>
name|metaEntries
decl_stmt|;
specifier|private
name|boolean
name|details
init|=
literal|false
decl_stmt|;
comment|// do we display the full report?
specifier|private
name|long
name|timelag
init|=
name|DEFAULT_TIME_LAG
decl_stmt|;
comment|// tables whose modtime is older
comment|/**    * Constructor    *    * @param conf Configuration object    * @throws MasterNotRunningException if the master is not running    */
specifier|public
name|HBaseFsck
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|MasterNotRunningException
throws|,
name|IOException
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
comment|// setup filesystem properties
name|this
operator|.
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|rootDir
operator|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|HBASE_DIR
argument_list|)
argument_list|)
expr_stmt|;
comment|// fetch information from master
name|master
operator|=
name|getMaster
argument_list|()
expr_stmt|;
name|status
operator|=
name|master
operator|.
name|getClusterStatus
argument_list|()
expr_stmt|;
name|connection
operator|=
name|getConnection
argument_list|()
expr_stmt|;
name|this
operator|.
name|metaEntries
operator|=
operator|new
name|TreeMap
argument_list|<
name|HRegionInfo
argument_list|,
name|MetaEntry
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/**    * Contacts the master and prints out cluster-wide information    * @throws IOException if a remote or network exception occurs    * @return 0 on success, non-zero on failure    */
name|int
name|doWork
parameter_list|()
throws|throws
name|IOException
block|{
comment|// print hbase server version
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Version: "
operator|+
name|status
operator|.
name|getHBaseVersion
argument_list|()
argument_list|)
expr_stmt|;
comment|// get a list of all regions from the master. This involves
comment|// scanning the META table
name|getMetaEntries
argument_list|(
name|metaEntries
argument_list|)
expr_stmt|;
comment|// get a list of all tables that have not changed recently.
name|AtomicInteger
name|numSkipped
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|HTableDescriptor
index|[]
name|allTables
init|=
name|getTables
argument_list|(
name|metaEntries
argument_list|,
name|numSkipped
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Number of Tables: "
operator|+
name|allTables
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|details
condition|)
block|{
if|if
condition|(
name|numSkipped
operator|.
name|get
argument_list|()
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\n Number of Tables in flux: "
operator|+
name|numSkipped
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|HTableDescriptor
name|td
range|:
name|allTables
control|)
block|{
name|String
name|tableName
init|=
name|td
operator|.
name|getNameAsString
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t Table: "
operator|+
name|tableName
operator|+
literal|"\t"
operator|+
operator|(
name|td
operator|.
name|isReadOnly
argument_list|()
condition|?
literal|"ro"
else|:
literal|"rw"
operator|)
operator|+
literal|"\t"
operator|+
operator|(
name|td
operator|.
name|isRootRegion
argument_list|()
condition|?
literal|"ROOT"
else|:
operator|(
name|td
operator|.
name|isMetaRegion
argument_list|()
condition|?
literal|"META"
else|:
literal|"    "
operator|)
operator|)
operator|+
literal|"\t"
operator|+
literal|" families:"
operator|+
name|td
operator|.
name|getFamilies
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// From the master, get a list of all known live region servers
name|Collection
argument_list|<
name|HServerInfo
argument_list|>
name|regionServers
init|=
name|status
operator|.
name|getServerInfo
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Number of live region servers:"
operator|+
name|regionServers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|details
condition|)
block|{
for|for
control|(
name|HServerInfo
name|rsinfo
range|:
name|regionServers
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t RegionServer:"
operator|+
name|rsinfo
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// From the master, get a list of all dead region servers
name|Collection
argument_list|<
name|String
argument_list|>
name|deadRegionServers
init|=
name|status
operator|.
name|getDeadServerNames
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Number of dead region servers:"
operator|+
name|deadRegionServers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|details
condition|)
block|{
for|for
control|(
name|String
name|name
range|:
name|deadRegionServers
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t RegionServer(dead):"
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
block|}
comment|// process information from all region servers
name|boolean
name|status1
init|=
name|processRegionServers
argument_list|(
name|regionServers
argument_list|)
decl_stmt|;
comment|// match HDFS with META
name|boolean
name|status2
init|=
name|checkHdfs
argument_list|()
decl_stmt|;
if|if
condition|(
name|status1
operator|==
literal|true
operator|&&
name|status2
operator|==
literal|true
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nRest easy, buddy! HBase is clean. "
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nInconsistencies detected."
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
comment|/**    * Checks HDFS and META    * @return true if there were no errors, otherwise return false    */
name|boolean
name|checkHdfs
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|status
init|=
literal|true
decl_stmt|;
comment|// success
comment|// make a copy of all tables in META
name|TreeMap
argument_list|<
name|String
argument_list|,
name|MetaEntry
argument_list|>
name|regions
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|MetaEntry
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|MetaEntry
name|meta
range|:
name|metaEntries
operator|.
name|values
argument_list|()
control|)
block|{
name|regions
operator|.
name|put
argument_list|(
name|meta
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getNameAsString
argument_list|()
argument_list|,
name|meta
argument_list|)
expr_stmt|;
block|}
comment|// list all tables from HDFS
name|TreeMap
argument_list|<
name|Path
argument_list|,
name|FileStatus
argument_list|>
name|allTableDirs
init|=
operator|new
name|TreeMap
argument_list|<
name|Path
argument_list|,
name|FileStatus
argument_list|>
argument_list|()
decl_stmt|;
name|FileStatus
index|[]
name|files
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|rootDir
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|files
operator|!=
literal|null
operator|&&
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|allTableDirs
operator|.
name|put
argument_list|(
name|files
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|,
name|files
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// verify that -ROOT-,  .META directories exists.
name|Path
name|rdir
init|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|HConstants
operator|.
name|ROOT_TABLE_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|FileStatus
name|ignore
init|=
name|allTableDirs
operator|.
name|remove
argument_list|(
name|rdir
argument_list|)
decl_stmt|;
if|if
condition|(
name|ignore
operator|==
literal|null
condition|)
block|{
name|status
operator|=
literal|false
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"\nERROR: Path "
operator|+
name|rdir
operator|+
literal|" for ROOT table does not exist."
argument_list|)
expr_stmt|;
block|}
name|Path
name|mdir
init|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|HConstants
operator|.
name|META_TABLE_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|ignore
operator|=
name|allTableDirs
operator|.
name|remove
argument_list|(
name|mdir
argument_list|)
expr_stmt|;
if|if
condition|(
name|ignore
operator|==
literal|null
condition|)
block|{
name|status
operator|=
literal|false
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"\nERROR: Path "
operator|+
name|mdir
operator|+
literal|" for META table does not exist."
argument_list|)
expr_stmt|;
block|}
comment|// verify that version file exists
name|Path
name|vfile
init|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|HConstants
operator|.
name|VERSION_FILE_NAME
argument_list|)
decl_stmt|;
name|ignore
operator|=
name|allTableDirs
operator|.
name|remove
argument_list|(
name|vfile
argument_list|)
expr_stmt|;
if|if
condition|(
name|ignore
operator|==
literal|null
condition|)
block|{
name|status
operator|=
literal|false
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"\nERROR: Version file "
operator|+
name|vfile
operator|+
literal|" does not exist."
argument_list|)
expr_stmt|;
block|}
comment|// filter out all valid regions found in the META
for|for
control|(
name|HRegionInfo
name|rinfo
range|:
name|metaEntries
operator|.
name|values
argument_list|()
control|)
block|{
name|Path
name|tableDir
init|=
name|HTableDescriptor
operator|.
name|getTableDir
argument_list|(
name|rootDir
argument_list|,
name|rinfo
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// Path regionDir = HRegion.getRegionDir(tableDir, rinfo.getEncodedName());
comment|// if the entry exists in allTableDirs, then remove it from allTableDirs as well
comment|// as from the META tmp list
name|FileStatus
name|found
init|=
name|allTableDirs
operator|.
name|remove
argument_list|(
name|tableDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|found
operator|!=
literal|null
condition|)
block|{
name|regions
operator|.
name|remove
argument_list|(
name|tableDir
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// The remaining entries in allTableDirs do not have entries in .META
comment|// However, if the path name was modified in the last few milliseconds
comment|// as specified by timelag, then do not flag it as an inconsistency.
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|FileStatus
name|region
range|:
name|allTableDirs
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|region
operator|.
name|getModificationTime
argument_list|()
operator|+
name|timelag
operator|<
name|now
condition|)
block|{
name|String
name|finalComponent
init|=
name|region
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|finalComponent
operator|.
name|startsWith
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
comment|// ignore .logs and .oldlogs directories
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"\nERROR: Path "
operator|+
name|region
operator|.
name|getPath
argument_list|()
operator|+
literal|" does not have a corresponding entry in META."
argument_list|)
expr_stmt|;
name|status
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
comment|// the remaining entries in tmp do not have entries in HDFS
for|for
control|(
name|HRegionInfo
name|rinfo
range|:
name|regions
operator|.
name|values
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nERROR: Region "
operator|+
name|rinfo
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" does not have a corresponding entry in HDFS."
argument_list|)
expr_stmt|;
name|status
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|status
return|;
block|}
comment|/**    * Contacts each regionserver and fetches metadata about regions.    * @param regionServerList - the list of region servers to connect to    * @throws IOException if a remote or network exception occurs    * @return true if there were no errors, otherwise return false    */
name|boolean
name|processRegionServers
parameter_list|(
name|Collection
argument_list|<
name|HServerInfo
argument_list|>
name|regionServerList
parameter_list|)
throws|throws
name|IOException
block|{
comment|// make a copy of all entries in META
name|TreeMap
argument_list|<
name|HRegionInfo
argument_list|,
name|MetaEntry
argument_list|>
name|tmp
init|=
operator|new
name|TreeMap
argument_list|<
name|HRegionInfo
argument_list|,
name|MetaEntry
argument_list|>
argument_list|(
name|metaEntries
argument_list|)
decl_stmt|;
name|long
name|errorCount
init|=
literal|0
decl_stmt|;
comment|// number of inconsistencies detected
name|int
name|showProgress
init|=
literal|0
decl_stmt|;
comment|// loop to contact each region server
for|for
control|(
name|HServerInfo
name|rsinfo
range|:
name|regionServerList
control|)
block|{
name|showProgress
operator|++
expr_stmt|;
comment|// one more server.
try|try
block|{
name|HRegionInterface
name|server
init|=
name|connection
operator|.
name|getHRegionConnection
argument_list|(
name|rsinfo
operator|.
name|getServerAddress
argument_list|()
argument_list|)
decl_stmt|;
comment|// list all online regions from this region server
name|HRegionInfo
index|[]
name|regions
init|=
name|server
operator|.
name|getRegionsAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|details
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"\nRegionServer:"
operator|+
name|rsinfo
operator|.
name|getServerName
argument_list|()
operator|+
literal|" number of regions:"
operator|+
name|regions
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|HRegionInfo
name|rinfo
range|:
name|regions
control|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"\n\t name:"
operator|+
name|rinfo
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" id:"
operator|+
name|rinfo
operator|.
name|getRegionId
argument_list|()
operator|+
literal|" encoded name:"
operator|+
name|rinfo
operator|.
name|getEncodedName
argument_list|()
operator|+
literal|" start :"
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|rinfo
operator|.
name|getStartKey
argument_list|()
argument_list|)
operator|+
literal|" end :"
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|rinfo
operator|.
name|getEndKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|showProgress
operator|=
literal|0
expr_stmt|;
block|}
comment|// check to see if the existance of this region matches the region in META
for|for
control|(
name|HRegionInfo
name|r
range|:
name|regions
control|)
block|{
name|MetaEntry
name|metaEntry
init|=
name|metaEntries
operator|.
name|get
argument_list|(
name|r
argument_list|)
decl_stmt|;
comment|// this entry exists in the region server but is not in the META
if|if
condition|(
name|metaEntry
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|r
operator|.
name|isMetaRegion
argument_list|()
condition|)
block|{
continue|continue;
comment|// this is ROOT or META region
block|}
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"\nERROR: Region "
operator|+
name|r
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" found on server "
operator|+
name|rsinfo
operator|.
name|getServerAddress
argument_list|()
operator|+
literal|" but is not listed in META."
argument_list|)
expr_stmt|;
name|errorCount
operator|++
expr_stmt|;
name|showProgress
operator|=
literal|0
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|metaEntry
operator|.
name|regionServer
operator|.
name|equals
argument_list|(
name|rsinfo
operator|.
name|getServerAddress
argument_list|()
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"\nERROR: Region "
operator|+
name|r
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" found on server "
operator|+
name|rsinfo
operator|.
name|getServerAddress
argument_list|()
operator|+
literal|" but is listed in META to be on server "
operator|+
name|metaEntry
operator|.
name|regionServer
argument_list|)
expr_stmt|;
name|errorCount
operator|++
expr_stmt|;
name|showProgress
operator|=
literal|0
expr_stmt|;
block|}
comment|// The region server is indeed serving a valid region. Remove it from tmp
name|tmp
operator|.
name|remove
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// unable to connect to the region server.
if|if
condition|(
name|details
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"\nRegionServer:"
operator|+
name|rsinfo
operator|.
name|getServerName
argument_list|()
operator|+
literal|" Unable to fetch region information. "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|showProgress
operator|%
literal|10
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
comment|// show progress to user
name|showProgress
operator|=
literal|0
expr_stmt|;
block|}
block|}
comment|// all the region left in tmp are not found on any region server
for|for
control|(
name|MetaEntry
name|metaEntry
range|:
name|tmp
operator|.
name|values
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"\nERROR: Region "
operator|+
name|metaEntry
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" is not served by any region server "
operator|+
literal|" but is listed in META to be on server "
operator|+
name|metaEntry
operator|.
name|regionServer
argument_list|)
expr_stmt|;
name|errorCount
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|errorCount
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nDetected "
operator|+
name|errorCount
operator|+
literal|" inconsistencies. "
operator|+
literal|"This might not indicate a real problem because these regions "
operator|+
literal|"could be in the midst of a split. Consider re-running with a "
operator|+
literal|"larger value of -timelag."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
comment|// no errors
block|}
comment|/**    * Return a list of table names whose metadata have not been modified in the    * last few milliseconds specified by timelag    * if any of the REGIONINFO_QUALIFIER, SERVER_QUALIFIER, STARTCODE_QUALIFIER,     * SPLITA_QUALIFIER, SPLITB_QUALIFIER have not changed in the last     * milliseconds specified by timelag, then the table is a candidate to be returned.    * @param regionList - all entries found in .META    * @return tables that have not been modified recently    * @throws IOException if an error is encountered    */
name|HTableDescriptor
index|[]
name|getTables
parameter_list|(
specifier|final
name|TreeMap
argument_list|<
name|HRegionInfo
argument_list|,
name|MetaEntry
argument_list|>
name|regionList
parameter_list|,
name|AtomicInteger
name|numSkipped
parameter_list|)
block|{
name|TreeSet
argument_list|<
name|HTableDescriptor
argument_list|>
name|uniqueTables
init|=
operator|new
name|TreeSet
argument_list|<
name|HTableDescriptor
argument_list|>
argument_list|()
decl_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|MetaEntry
name|m
range|:
name|regionList
operator|.
name|values
argument_list|()
control|)
block|{
name|HRegionInfo
name|info
init|=
name|m
decl_stmt|;
comment|// if the start key is zero, then we have found the first region of a table.
comment|// pick only those tables that were not modified in the last few milliseconds.
if|if
condition|(
name|info
operator|!=
literal|null
operator|&&
name|info
operator|.
name|getStartKey
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|m
operator|.
name|modTime
operator|+
name|timelag
operator|<
name|now
condition|)
block|{
name|uniqueTables
operator|.
name|add
argument_list|(
name|info
operator|.
name|getTableDesc
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|numSkipped
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
comment|// one more in-flux table
block|}
block|}
block|}
return|return
name|uniqueTables
operator|.
name|toArray
argument_list|(
operator|new
name|HTableDescriptor
index|[
name|uniqueTables
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**    * Scan META. Returns a list of all regions of all known tables.     * @param regionList - fill up all entries found in .META    * @throws IOException if an error is encountered    */
name|void
name|getMetaEntries
parameter_list|(
specifier|final
name|TreeMap
argument_list|<
name|HRegionInfo
argument_list|,
name|MetaEntry
argument_list|>
name|regionList
parameter_list|)
throws|throws
name|IOException
block|{
name|MetaScannerVisitor
name|visitor
init|=
operator|new
name|MetaScannerVisitor
argument_list|()
block|{
name|int
name|countRecord
init|=
literal|1
decl_stmt|;
comment|// comparator to sort KeyValues with latest modtime
specifier|final
name|Comparator
argument_list|<
name|KeyValue
argument_list|>
name|comp
init|=
operator|new
name|Comparator
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|KeyValue
name|k1
parameter_list|,
name|KeyValue
name|k2
parameter_list|)
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|k1
operator|.
name|getTimestamp
argument_list|()
operator|-
name|k2
operator|.
name|getTimestamp
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|public
name|boolean
name|processRow
parameter_list|(
name|Result
name|result
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
comment|// record the latest modification of this META record
name|long
name|ts
init|=
name|Collections
operator|.
name|max
argument_list|(
name|result
operator|.
name|list
argument_list|()
argument_list|,
name|comp
argument_list|)
operator|.
name|getTimestamp
argument_list|()
decl_stmt|;
comment|// record region details
name|byte
index|[]
name|value
init|=
name|result
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|REGIONINFO_QUALIFIER
argument_list|)
decl_stmt|;
name|HRegionInfo
name|info
init|=
literal|null
decl_stmt|;
name|HServerAddress
name|server
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|startCode
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|info
operator|=
name|Writables
operator|.
name|getHRegionInfo
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
comment|// record assigned region server
name|value
operator|=
name|result
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|SERVER_QUALIFIER
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|value
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|String
name|address
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|server
operator|=
operator|new
name|HServerAddress
argument_list|(
name|address
argument_list|)
expr_stmt|;
block|}
comment|// record region's start key
name|value
operator|=
name|result
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|STARTCODE_QUALIFIER
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|startCode
operator|=
name|value
expr_stmt|;
block|}
name|MetaEntry
name|m
init|=
operator|new
name|MetaEntry
argument_list|(
name|info
argument_list|,
name|server
argument_list|,
name|startCode
argument_list|,
name|ts
argument_list|)
decl_stmt|;
name|m
operator|=
name|regionList
operator|.
name|put
argument_list|(
name|m
argument_list|,
name|m
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Two entries in META are same "
operator|+
name|m
argument_list|)
throw|;
block|}
comment|// show proof of progress to the user, once for every 100 records.
if|if
condition|(
name|countRecord
operator|%
literal|100
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
block|}
name|countRecord
operator|++
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Result="
operator|+
name|result
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
decl_stmt|;
name|MetaScanner
operator|.
name|metaScan
argument_list|(
name|conf
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
comment|/**    * Stores the entries scanned from META    */
specifier|private
specifier|static
class|class
name|MetaEntry
extends|extends
name|HRegionInfo
block|{
name|HServerAddress
name|regionServer
decl_stmt|;
comment|// server hosting this region
name|byte
index|[]
name|startCode
decl_stmt|;
comment|// start value of region
name|long
name|modTime
decl_stmt|;
comment|// timestamp of most recent modification metadata
specifier|public
name|MetaEntry
parameter_list|(
name|HRegionInfo
name|rinfo
parameter_list|,
name|HServerAddress
name|regionServer
parameter_list|,
name|byte
index|[]
name|startCode
parameter_list|,
name|long
name|modTime
parameter_list|)
block|{
name|super
argument_list|(
name|rinfo
argument_list|)
expr_stmt|;
name|this
operator|.
name|regionServer
operator|=
name|regionServer
expr_stmt|;
name|this
operator|.
name|startCode
operator|=
name|startCode
expr_stmt|;
name|this
operator|.
name|modTime
operator|=
name|modTime
expr_stmt|;
block|}
block|}
comment|/**    * Display the full report from fsck. This displays all live and dead region servers ,    * and all known regions.    */
name|void
name|displayFullReport
parameter_list|()
block|{
name|details
operator|=
literal|true
expr_stmt|;
block|}
comment|/**    * We are interested in only those tables that have not changed their state in    * META during the last few seconds specified by hbase.admin.fsck.timelag    * @param seconds - the time in seconds    */
name|void
name|setTimeLag
parameter_list|(
name|long
name|seconds
parameter_list|)
block|{
name|timelag
operator|=
name|seconds
operator|*
literal|1000
expr_stmt|;
comment|// convert to milliseconds
block|}
specifier|protected
specifier|static
name|void
name|printUsageAndExit
parameter_list|()
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: fsck [opts] "
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" where [opts] are:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"   -details Display full report of all regions."
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"   -timelag {timeInSeconds}  Process only regions that "
operator|+
literal|" have not experienced any metadata updates in the last "
operator|+
literal|" {{timeInSeconds} seconds."
argument_list|)
expr_stmt|;
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exit
argument_list|(
operator|-
literal|2
argument_list|)
expr_stmt|;
block|}
comment|/**    * Main program    * @param args    */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
throws|,
name|MasterNotRunningException
block|{
comment|// create a fsck object
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.defaultFS"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"hbase.rootdir"
argument_list|)
argument_list|)
expr_stmt|;
name|HBaseFsck
name|fsck
init|=
operator|new
name|HBaseFsck
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Process command-line args.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|cmd
init|=
name|args
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-details"
argument_list|)
condition|)
block|{
name|fsck
operator|.
name|displayFullReport
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-timelag"
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|==
name|args
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"HBaseFsck: -timelag needs a value."
argument_list|)
expr_stmt|;
name|printUsageAndExit
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|long
name|timelag
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|args
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
decl_stmt|;
name|fsck
operator|.
name|setTimeLag
argument_list|(
name|timelag
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"-timelag needs a numeric value."
argument_list|)
expr_stmt|;
name|printUsageAndExit
argument_list|()
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
block|}
else|else
block|{
name|String
name|str
init|=
literal|"Unknown command line option : "
operator|+
name|cmd
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|str
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|str
argument_list|)
expr_stmt|;
name|printUsageAndExit
argument_list|()
expr_stmt|;
block|}
block|}
comment|// do the real work of fsck
name|int
name|code
init|=
name|fsck
operator|.
name|doWork
argument_list|()
decl_stmt|;
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exit
argument_list|(
name|code
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

