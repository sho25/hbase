begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|coprocessor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|HbaseObjectWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Classes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_comment
comment|/**  * Represents the return value from a  * {@link org.apache.hadoop.hbase.client.coprocessor.Exec} invocation.  * This simply wraps the value for easier  * {@link org.apache.hadoop.hbase.io.HbaseObjectWritable}  * serialization.  *  *<p>  * This class is used internally by the HBase client code to properly serialize  * responses from {@link org.apache.hadoop.hbase.ipc.CoprocessorProtocol}  * method invocations.  It should not be used directly by clients.  *</p>  *  * @see Exec  * @see org.apache.hadoop.hbase.client.HTable#coprocessorExec(Class, byte[], byte[], org.apache.hadoop.hbase.client.coprocessor.Batch.Call)  * @see org.apache.hadoop.hbase.client.HTable#coprocessorExec(Class, byte[], byte[], org.apache.hadoop.hbase.client.coprocessor.Batch.Call, org.apache.hadoop.hbase.client.coprocessor.Batch.Callback)  */
end_comment

begin_class
specifier|public
class|class
name|ExecResult
implements|implements
name|Writable
block|{
specifier|private
name|byte
index|[]
name|regionName
decl_stmt|;
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|valueType
decl_stmt|;
specifier|private
name|Object
name|value
decl_stmt|;
specifier|public
name|ExecResult
parameter_list|()
block|{   }
specifier|public
name|ExecResult
parameter_list|(
name|byte
index|[]
name|region
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|valueType
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|this
operator|.
name|regionName
operator|=
name|region
expr_stmt|;
name|this
operator|.
name|valueType
operator|=
name|valueType
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|byte
index|[]
name|getRegionName
parameter_list|()
block|{
return|return
name|regionName
return|;
block|}
specifier|public
name|Object
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|Bytes
operator|.
name|writeByteArray
argument_list|(
name|out
argument_list|,
name|regionName
argument_list|)
expr_stmt|;
name|HbaseObjectWritable
operator|.
name|writeObject
argument_list|(
name|out
argument_list|,
name|value
argument_list|,
name|value
operator|!=
literal|null
condition|?
name|value
operator|.
name|getClass
argument_list|()
else|:
name|valueType
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|alternativeSerializationClass
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Writable
condition|)
block|{
name|alternativeSerializationClass
operator|=
name|Writable
operator|.
name|class
expr_stmt|;
block|}
else|else
block|{
name|alternativeSerializationClass
operator|=
name|Serializable
operator|.
name|class
expr_stmt|;
block|}
name|out
operator|.
name|writeUTF
argument_list|(
operator|(
name|valueType
operator|!=
literal|null
condition|?
name|valueType
else|:
name|alternativeSerializationClass
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|regionName
operator|=
name|Bytes
operator|.
name|readByteArray
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|value
operator|=
name|HbaseObjectWritable
operator|.
name|readObject
argument_list|(
name|in
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|String
name|className
init|=
name|in
operator|.
name|readUTF
argument_list|()
decl_stmt|;
try|try
block|{
name|valueType
operator|=
name|Classes
operator|.
name|extendedForName
argument_list|(
name|className
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to find class of type: "
operator|+
name|className
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

