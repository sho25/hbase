begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2011 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|coprocessor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|AggregateProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|ColumnInterpreter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_comment
comment|/**  * This client class is for invoking the aggregate functions deployed on the  * Region Server side via the AggregateProtocol. This class will implement the  * supporting functionality for summing/processing the individual results  * obtained from the AggregateProtocol for each region.  *<p>  * This will serve as the client side handler for invoking the aggregate  * functions.  *<ul>  * For all aggregate functions,  *<li>start row< end row is an essential condition (if they are not  * {@link HConstants#EMPTY_BYTE_ARRAY})  *<li>Column family can't be null. In case where multiple families are  * provided, an IOException will be thrown. An optional column qualifier can  * also be defined.  *<li>For methods to find maximum, minimum, sum, rowcount, it returns the  * parameter type. For average and std, it returns a double value. For row  * count, it returns a long value.  */
end_comment

begin_class
specifier|public
class|class
name|AggregationClient
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AggregationClient
operator|.
name|class
argument_list|)
decl_stmt|;
name|Configuration
name|conf
decl_stmt|;
comment|/**    * Constructor with Conf object    * @param cfg    */
specifier|public
name|AggregationClient
parameter_list|(
name|Configuration
name|cfg
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|cfg
expr_stmt|;
block|}
comment|/**    * It gives the maximum value of a column for a given column family for the    * given range. In case qualifier is null, a max of all values for the given    * family is returned.    * @param tableName    * @param ci    * @param scan    * @return max val<R>    * @throws Throwable    *           The caller is supposed to handle the exception as they are thrown    *& propagated to it.    */
specifier|public
parameter_list|<
name|R
parameter_list|,
name|S
parameter_list|>
name|R
name|max
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|,
specifier|final
name|ColumnInterpreter
argument_list|<
name|R
argument_list|,
name|S
argument_list|>
name|ci
parameter_list|,
specifier|final
name|Scan
name|scan
parameter_list|)
throws|throws
name|Throwable
block|{
name|validateParameters
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
class|class
name|MaxCallBack
implements|implements
name|Batch
operator|.
name|Callback
argument_list|<
name|R
argument_list|>
block|{
name|R
name|max
init|=
literal|null
decl_stmt|;
name|R
name|getMax
parameter_list|()
block|{
return|return
name|max
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|update
parameter_list|(
name|byte
index|[]
name|region
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|R
name|result
parameter_list|)
block|{
name|max
operator|=
name|ci
operator|.
name|compare
argument_list|(
name|max
argument_list|,
name|result
argument_list|)
operator|<
literal|0
condition|?
name|result
else|:
name|max
expr_stmt|;
block|}
block|}
name|MaxCallBack
name|aMaxCallBack
init|=
operator|new
name|MaxCallBack
argument_list|()
decl_stmt|;
name|table
operator|.
name|coprocessorExec
argument_list|(
name|AggregateProtocol
operator|.
name|class
argument_list|,
name|scan
operator|.
name|getStartRow
argument_list|()
argument_list|,
name|scan
operator|.
name|getStopRow
argument_list|()
argument_list|,
operator|new
name|Batch
operator|.
name|Call
argument_list|<
name|AggregateProtocol
argument_list|,
name|R
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|R
name|call
parameter_list|(
name|AggregateProtocol
name|instance
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|instance
operator|.
name|getMax
argument_list|(
name|ci
argument_list|,
name|scan
argument_list|)
return|;
block|}
block|}
argument_list|,
name|aMaxCallBack
argument_list|)
expr_stmt|;
return|return
name|aMaxCallBack
operator|.
name|getMax
argument_list|()
return|;
block|}
specifier|private
name|void
name|validateParameters
parameter_list|(
name|Scan
name|scan
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|scan
operator|==
literal|null
operator|||
operator|(
name|Bytes
operator|.
name|equals
argument_list|(
name|scan
operator|.
name|getStartRow
argument_list|()
argument_list|,
name|scan
operator|.
name|getStopRow
argument_list|()
argument_list|)
operator|&&
operator|!
name|Bytes
operator|.
name|equals
argument_list|(
name|scan
operator|.
name|getStartRow
argument_list|()
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
operator|)
operator|||
name|Bytes
operator|.
name|compareTo
argument_list|(
name|scan
operator|.
name|getStartRow
argument_list|()
argument_list|,
name|scan
operator|.
name|getStopRow
argument_list|()
argument_list|)
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Agg client Exception: Startrow should be smaller than Stoprow"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|scan
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"There must be only one family."
argument_list|)
throw|;
block|}
block|}
comment|/**    * It gives the minimum value of a column for a given column family for the    * given range. In case qualifier is null, a min of all values for the given    * family is returned.    * @param tableName    * @param ci    * @param scan    * @return min val<R>    * @throws Throwable    */
specifier|public
parameter_list|<
name|R
parameter_list|,
name|S
parameter_list|>
name|R
name|min
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|,
specifier|final
name|ColumnInterpreter
argument_list|<
name|R
argument_list|,
name|S
argument_list|>
name|ci
parameter_list|,
specifier|final
name|Scan
name|scan
parameter_list|)
throws|throws
name|Throwable
block|{
name|validateParameters
argument_list|(
name|scan
argument_list|)
expr_stmt|;
class|class
name|MinCallBack
implements|implements
name|Batch
operator|.
name|Callback
argument_list|<
name|R
argument_list|>
block|{
specifier|private
name|R
name|min
init|=
literal|null
decl_stmt|;
specifier|public
name|R
name|getMinimum
parameter_list|()
block|{
return|return
name|min
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|update
parameter_list|(
name|byte
index|[]
name|region
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|R
name|result
parameter_list|)
block|{
name|min
operator|=
operator|(
name|min
operator|==
literal|null
operator|||
name|ci
operator|.
name|compare
argument_list|(
name|result
argument_list|,
name|min
argument_list|)
operator|<
literal|0
operator|)
condition|?
name|result
else|:
name|min
expr_stmt|;
block|}
block|}
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|MinCallBack
name|minCallBack
init|=
operator|new
name|MinCallBack
argument_list|()
decl_stmt|;
name|table
operator|.
name|coprocessorExec
argument_list|(
name|AggregateProtocol
operator|.
name|class
argument_list|,
name|scan
operator|.
name|getStartRow
argument_list|()
argument_list|,
name|scan
operator|.
name|getStopRow
argument_list|()
argument_list|,
operator|new
name|Batch
operator|.
name|Call
argument_list|<
name|AggregateProtocol
argument_list|,
name|R
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|R
name|call
parameter_list|(
name|AggregateProtocol
name|instance
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|instance
operator|.
name|getMin
argument_list|(
name|ci
argument_list|,
name|scan
argument_list|)
return|;
block|}
block|}
argument_list|,
name|minCallBack
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Min fom all regions is: "
operator|+
name|minCallBack
operator|.
name|getMinimum
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|minCallBack
operator|.
name|getMinimum
argument_list|()
return|;
block|}
comment|/**    * It gives the row count, by summing up the individual results obtained from    * regions. In case the qualifier is null, FirstKEyValueFilter is used to    * optimised the operation. In case qualifier is provided, I can't use the    * filter as it may set the flag to skip to next row, but the value read is    * not of the given filter: in this case, this particular row will not be    * counted ==> an error.    * @param tableName    * @param ci    * @param scan    * @return    * @throws Throwable    */
specifier|public
parameter_list|<
name|R
parameter_list|,
name|S
parameter_list|>
name|long
name|rowCount
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|,
specifier|final
name|ColumnInterpreter
argument_list|<
name|R
argument_list|,
name|S
argument_list|>
name|ci
parameter_list|,
specifier|final
name|Scan
name|scan
parameter_list|)
throws|throws
name|Throwable
block|{
name|validateParameters
argument_list|(
name|scan
argument_list|)
expr_stmt|;
class|class
name|RowNumCallback
implements|implements
name|Batch
operator|.
name|Callback
argument_list|<
name|Long
argument_list|>
block|{
specifier|private
name|long
name|rowCountL
init|=
literal|0l
decl_stmt|;
specifier|public
name|long
name|getRowNumCount
parameter_list|()
block|{
return|return
name|rowCountL
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|update
parameter_list|(
name|byte
index|[]
name|region
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|Long
name|result
parameter_list|)
block|{
name|rowCountL
operator|+=
name|result
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
block|}
name|RowNumCallback
name|rowNum
init|=
operator|new
name|RowNumCallback
argument_list|()
decl_stmt|;
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|table
operator|.
name|coprocessorExec
argument_list|(
name|AggregateProtocol
operator|.
name|class
argument_list|,
name|scan
operator|.
name|getStartRow
argument_list|()
argument_list|,
name|scan
operator|.
name|getStopRow
argument_list|()
argument_list|,
operator|new
name|Batch
operator|.
name|Call
argument_list|<
name|AggregateProtocol
argument_list|,
name|Long
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Long
name|call
parameter_list|(
name|AggregateProtocol
name|instance
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|instance
operator|.
name|getRowNum
argument_list|(
name|ci
argument_list|,
name|scan
argument_list|)
return|;
block|}
block|}
argument_list|,
name|rowNum
argument_list|)
expr_stmt|;
return|return
name|rowNum
operator|.
name|getRowNumCount
argument_list|()
return|;
block|}
comment|/**    * It sums up the value returned from various regions. In case qualifier is    * null, summation of all the column qualifiers in the given family is done.    * @param tableName    * @param ci    * @param scan    * @return sum<S>    * @throws Throwable    */
specifier|public
parameter_list|<
name|R
parameter_list|,
name|S
parameter_list|>
name|S
name|sum
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|,
specifier|final
name|ColumnInterpreter
argument_list|<
name|R
argument_list|,
name|S
argument_list|>
name|ci
parameter_list|,
specifier|final
name|Scan
name|scan
parameter_list|)
throws|throws
name|Throwable
block|{
name|validateParameters
argument_list|(
name|scan
argument_list|)
expr_stmt|;
class|class
name|SumCallBack
implements|implements
name|Batch
operator|.
name|Callback
argument_list|<
name|S
argument_list|>
block|{
name|S
name|sumVal
init|=
literal|null
decl_stmt|;
specifier|public
name|S
name|getSumResult
parameter_list|()
block|{
return|return
name|sumVal
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|update
parameter_list|(
name|byte
index|[]
name|region
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|S
name|result
parameter_list|)
block|{
name|sumVal
operator|=
name|ci
operator|.
name|add
argument_list|(
name|sumVal
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
name|SumCallBack
name|sumCallBack
init|=
operator|new
name|SumCallBack
argument_list|()
decl_stmt|;
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|table
operator|.
name|coprocessorExec
argument_list|(
name|AggregateProtocol
operator|.
name|class
argument_list|,
name|scan
operator|.
name|getStartRow
argument_list|()
argument_list|,
name|scan
operator|.
name|getStopRow
argument_list|()
argument_list|,
operator|new
name|Batch
operator|.
name|Call
argument_list|<
name|AggregateProtocol
argument_list|,
name|S
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|S
name|call
parameter_list|(
name|AggregateProtocol
name|instance
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|instance
operator|.
name|getSum
argument_list|(
name|ci
argument_list|,
name|scan
argument_list|)
return|;
block|}
block|}
argument_list|,
name|sumCallBack
argument_list|)
expr_stmt|;
return|return
name|sumCallBack
operator|.
name|getSumResult
argument_list|()
return|;
block|}
comment|/**    * It computes average while fetching sum and row count from all the    * corresponding regions. Approach is to compute a global sum of region level    * sum and rowcount and then compute the average.    * @param tableName    * @param scan    * @throws Throwable    */
specifier|private
parameter_list|<
name|R
parameter_list|,
name|S
parameter_list|>
name|Pair
argument_list|<
name|S
argument_list|,
name|Long
argument_list|>
name|getAvgArgs
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|,
specifier|final
name|ColumnInterpreter
argument_list|<
name|R
argument_list|,
name|S
argument_list|>
name|ci
parameter_list|,
specifier|final
name|Scan
name|scan
parameter_list|)
throws|throws
name|Throwable
block|{
name|validateParameters
argument_list|(
name|scan
argument_list|)
expr_stmt|;
class|class
name|AvgCallBack
implements|implements
name|Batch
operator|.
name|Callback
argument_list|<
name|Pair
argument_list|<
name|S
argument_list|,
name|Long
argument_list|>
argument_list|>
block|{
name|S
name|sum
init|=
literal|null
decl_stmt|;
name|Long
name|rowCount
init|=
literal|0l
decl_stmt|;
specifier|public
name|Pair
argument_list|<
name|S
argument_list|,
name|Long
argument_list|>
name|getAvgArgs
parameter_list|()
block|{
return|return
operator|new
name|Pair
argument_list|<
name|S
argument_list|,
name|Long
argument_list|>
argument_list|(
name|sum
argument_list|,
name|rowCount
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|update
parameter_list|(
name|byte
index|[]
name|region
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|Pair
argument_list|<
name|S
argument_list|,
name|Long
argument_list|>
name|result
parameter_list|)
block|{
name|sum
operator|=
name|ci
operator|.
name|add
argument_list|(
name|sum
argument_list|,
name|result
operator|.
name|getFirst
argument_list|()
argument_list|)
expr_stmt|;
name|rowCount
operator|+=
name|result
operator|.
name|getSecond
argument_list|()
expr_stmt|;
block|}
block|}
name|AvgCallBack
name|avgCallBack
init|=
operator|new
name|AvgCallBack
argument_list|()
decl_stmt|;
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|table
operator|.
name|coprocessorExec
argument_list|(
name|AggregateProtocol
operator|.
name|class
argument_list|,
name|scan
operator|.
name|getStartRow
argument_list|()
argument_list|,
name|scan
operator|.
name|getStopRow
argument_list|()
argument_list|,
operator|new
name|Batch
operator|.
name|Call
argument_list|<
name|AggregateProtocol
argument_list|,
name|Pair
argument_list|<
name|S
argument_list|,
name|Long
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Pair
argument_list|<
name|S
argument_list|,
name|Long
argument_list|>
name|call
parameter_list|(
name|AggregateProtocol
name|instance
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|instance
operator|.
name|getAvg
argument_list|(
name|ci
argument_list|,
name|scan
argument_list|)
return|;
block|}
block|}
argument_list|,
name|avgCallBack
argument_list|)
expr_stmt|;
return|return
name|avgCallBack
operator|.
name|getAvgArgs
argument_list|()
return|;
block|}
comment|/**    * This is the client side interface/handle for calling the average method for    * a given cf-cq combination. It was necessary to add one more call stack as    * its return type should be a decimal value, irrespective of what    * columninterpreter says. So, this methods collects the necessary parameters    * to compute the average and returs the double value.    * @param tableName    * @param ci    * @param scan    * @return    * @throws Throwable    */
specifier|public
parameter_list|<
name|R
parameter_list|,
name|S
parameter_list|>
name|double
name|avg
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|,
specifier|final
name|ColumnInterpreter
argument_list|<
name|R
argument_list|,
name|S
argument_list|>
name|ci
parameter_list|,
name|Scan
name|scan
parameter_list|)
throws|throws
name|Throwable
block|{
name|Pair
argument_list|<
name|S
argument_list|,
name|Long
argument_list|>
name|p
init|=
name|getAvgArgs
argument_list|(
name|tableName
argument_list|,
name|ci
argument_list|,
name|scan
argument_list|)
decl_stmt|;
return|return
name|ci
operator|.
name|divideForAvg
argument_list|(
name|p
operator|.
name|getFirst
argument_list|()
argument_list|,
name|p
operator|.
name|getSecond
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * It computes a global standard deviation for a given column and its value.    * Standard deviation is square root of (average of squares -    * average*average). From individual regions, it obtains sum, square sum and    * number of rows. With these, the above values are computed to get the global    * std.    * @param tableName    * @param scan    * @return    * @throws Throwable    */
specifier|private
parameter_list|<
name|R
parameter_list|,
name|S
parameter_list|>
name|Pair
argument_list|<
name|List
argument_list|<
name|S
argument_list|>
argument_list|,
name|Long
argument_list|>
name|getStdArgs
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|,
specifier|final
name|ColumnInterpreter
argument_list|<
name|R
argument_list|,
name|S
argument_list|>
name|ci
parameter_list|,
specifier|final
name|Scan
name|scan
parameter_list|)
throws|throws
name|Throwable
block|{
name|validateParameters
argument_list|(
name|scan
argument_list|)
expr_stmt|;
class|class
name|StdCallback
implements|implements
name|Batch
operator|.
name|Callback
argument_list|<
name|Pair
argument_list|<
name|List
argument_list|<
name|S
argument_list|>
argument_list|,
name|Long
argument_list|>
argument_list|>
block|{
name|long
name|rowCountVal
init|=
literal|0l
decl_stmt|;
name|S
name|sumVal
init|=
literal|null
decl_stmt|,
name|sumSqVal
init|=
literal|null
decl_stmt|;
specifier|public
name|Pair
argument_list|<
name|List
argument_list|<
name|S
argument_list|>
argument_list|,
name|Long
argument_list|>
name|getStdParams
parameter_list|()
block|{
name|List
argument_list|<
name|S
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<
name|S
argument_list|>
argument_list|()
decl_stmt|;
name|l
operator|.
name|add
argument_list|(
name|sumVal
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
name|sumSqVal
argument_list|)
expr_stmt|;
name|Pair
argument_list|<
name|List
argument_list|<
name|S
argument_list|>
argument_list|,
name|Long
argument_list|>
name|p
init|=
operator|new
name|Pair
argument_list|<
name|List
argument_list|<
name|S
argument_list|>
argument_list|,
name|Long
argument_list|>
argument_list|(
name|l
argument_list|,
name|rowCountVal
argument_list|)
decl_stmt|;
return|return
name|p
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|update
parameter_list|(
name|byte
index|[]
name|region
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|Pair
argument_list|<
name|List
argument_list|<
name|S
argument_list|>
argument_list|,
name|Long
argument_list|>
name|result
parameter_list|)
block|{
name|sumVal
operator|=
name|ci
operator|.
name|add
argument_list|(
name|sumVal
argument_list|,
name|result
operator|.
name|getFirst
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|sumSqVal
operator|=
name|ci
operator|.
name|add
argument_list|(
name|sumSqVal
argument_list|,
name|result
operator|.
name|getFirst
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|rowCountVal
operator|+=
name|result
operator|.
name|getSecond
argument_list|()
expr_stmt|;
block|}
block|}
name|StdCallback
name|stdCallback
init|=
operator|new
name|StdCallback
argument_list|()
decl_stmt|;
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|table
operator|.
name|coprocessorExec
argument_list|(
name|AggregateProtocol
operator|.
name|class
argument_list|,
name|scan
operator|.
name|getStartRow
argument_list|()
argument_list|,
name|scan
operator|.
name|getStopRow
argument_list|()
argument_list|,
operator|new
name|Batch
operator|.
name|Call
argument_list|<
name|AggregateProtocol
argument_list|,
name|Pair
argument_list|<
name|List
argument_list|<
name|S
argument_list|>
argument_list|,
name|Long
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Pair
argument_list|<
name|List
argument_list|<
name|S
argument_list|>
argument_list|,
name|Long
argument_list|>
name|call
parameter_list|(
name|AggregateProtocol
name|instance
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|instance
operator|.
name|getStd
argument_list|(
name|ci
argument_list|,
name|scan
argument_list|)
return|;
block|}
block|}
argument_list|,
name|stdCallback
argument_list|)
expr_stmt|;
return|return
name|stdCallback
operator|.
name|getStdParams
argument_list|()
return|;
block|}
comment|/**    * This is the client side interface/handle for calling the std method for a    * given cf-cq combination. It was necessary to add one more call stack as its    * return type should be a decimal value, irrespective of what    * columninterpreter says. So, this methods collects the necessary parameters    * to compute the std and returns the double value.    * @param tableName    * @param ci    * @param scan    * @return    * @throws Throwable    */
specifier|public
parameter_list|<
name|R
parameter_list|,
name|S
parameter_list|>
name|double
name|std
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|,
name|ColumnInterpreter
argument_list|<
name|R
argument_list|,
name|S
argument_list|>
name|ci
parameter_list|,
name|Scan
name|scan
parameter_list|)
throws|throws
name|Throwable
block|{
name|Pair
argument_list|<
name|List
argument_list|<
name|S
argument_list|>
argument_list|,
name|Long
argument_list|>
name|p
init|=
name|getStdArgs
argument_list|(
name|tableName
argument_list|,
name|ci
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|double
name|res
init|=
literal|0d
decl_stmt|;
name|double
name|avg
init|=
name|ci
operator|.
name|divideForAvg
argument_list|(
name|p
operator|.
name|getFirst
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|p
operator|.
name|getSecond
argument_list|()
argument_list|)
decl_stmt|;
name|double
name|avgOfSumSq
init|=
name|ci
operator|.
name|divideForAvg
argument_list|(
name|p
operator|.
name|getFirst
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|p
operator|.
name|getSecond
argument_list|()
argument_list|)
decl_stmt|;
name|res
operator|=
name|avgOfSumSq
operator|-
operator|(
name|avg
operator|)
operator|*
operator|(
name|avg
operator|)
expr_stmt|;
comment|// variance
name|res
operator|=
name|Math
operator|.
name|pow
argument_list|(
name|res
argument_list|,
literal|0.5
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
block|}
end_class

end_unit

