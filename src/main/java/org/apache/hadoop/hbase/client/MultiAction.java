begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2009 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|HbaseObjectWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_comment
comment|/**  * Container for Actions (i.e. Get, Delete, or Put), which are grouped by  * regionName. Intended to be used with HConnectionManager.processBatch()  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|MultiAction
parameter_list|<
name|R
parameter_list|>
implements|implements
name|Writable
block|{
comment|// map of regions to lists of puts/gets/deletes for that region.
specifier|public
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Action
argument_list|<
name|R
argument_list|>
argument_list|>
argument_list|>
name|actions
init|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Action
argument_list|<
name|R
argument_list|>
argument_list|>
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
specifier|public
name|MultiAction
parameter_list|()
block|{   }
comment|/**    * Get the total number of Actions    *    * @return total number of Actions for all groups in this container.    */
specifier|public
name|int
name|size
parameter_list|()
block|{
name|int
name|size
init|=
literal|0
decl_stmt|;
for|for
control|(
name|List
name|l
range|:
name|actions
operator|.
name|values
argument_list|()
control|)
block|{
name|size
operator|+=
name|l
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
return|return
name|size
return|;
block|}
comment|/**    * Add an Action to this container based on it's regionName. If the regionName    * is wrong, the initial execution will fail, but will be automatically    * retried after looking up the correct region.    *    * @param regionName    * @param a    */
specifier|public
name|void
name|add
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|,
name|Action
argument_list|<
name|R
argument_list|>
name|a
parameter_list|)
block|{
name|List
argument_list|<
name|Action
argument_list|<
name|R
argument_list|>
argument_list|>
name|rsActions
init|=
name|actions
operator|.
name|get
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|rsActions
operator|==
literal|null
condition|)
block|{
name|rsActions
operator|=
operator|new
name|ArrayList
argument_list|<
name|Action
argument_list|<
name|R
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
name|regionName
argument_list|,
name|rsActions
argument_list|)
expr_stmt|;
block|}
name|rsActions
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|getRegions
parameter_list|()
block|{
return|return
name|actions
operator|.
name|keySet
argument_list|()
return|;
block|}
comment|/**    * @return All actions from all regions in this container    */
specifier|public
name|List
argument_list|<
name|Action
argument_list|<
name|R
argument_list|>
argument_list|>
name|allActions
parameter_list|()
block|{
name|List
argument_list|<
name|Action
argument_list|<
name|R
argument_list|>
argument_list|>
name|res
init|=
operator|new
name|ArrayList
argument_list|<
name|Action
argument_list|<
name|R
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|Action
argument_list|<
name|R
argument_list|>
argument_list|>
name|lst
range|:
name|actions
operator|.
name|values
argument_list|()
control|)
block|{
name|res
operator|.
name|addAll
argument_list|(
name|lst
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|actions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Action
argument_list|<
name|R
argument_list|>
argument_list|>
argument_list|>
name|e
range|:
name|actions
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Bytes
operator|.
name|writeByteArray
argument_list|(
name|out
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Action
argument_list|<
name|R
argument_list|>
argument_list|>
name|lst
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|lst
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Action
name|a
range|:
name|lst
control|)
block|{
name|HbaseObjectWritable
operator|.
name|writeObject
argument_list|(
name|out
argument_list|,
name|a
argument_list|,
name|a
operator|.
name|getClass
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|actions
operator|.
name|clear
argument_list|()
expr_stmt|;
name|int
name|mapSize
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mapSize
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|key
init|=
name|Bytes
operator|.
name|readByteArray
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|int
name|listSize
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Action
argument_list|<
name|R
argument_list|>
argument_list|>
name|lst
init|=
operator|new
name|ArrayList
argument_list|<
name|Action
argument_list|<
name|R
argument_list|>
argument_list|>
argument_list|(
name|listSize
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|listSize
condition|;
name|j
operator|++
control|)
block|{
name|lst
operator|.
name|add
argument_list|(
operator|(
name|Action
operator|)
name|HbaseObjectWritable
operator|.
name|readObject
argument_list|(
name|in
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|actions
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|lst
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

