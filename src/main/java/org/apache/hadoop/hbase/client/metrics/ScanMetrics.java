begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|util
operator|.
name|MetricsBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|util
operator|.
name|MetricsRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|util
operator|.
name|MetricsTimeVaryingLong
import|;
end_import

begin_comment
comment|/**  * Provides client-side metrics related to scan operations  * The data can be passed to mapreduce framework or other systems.  * Currently metrics framework won't be able to support the scenario  * where multiple scan instances run on the same machine trying to  * update the same metric. We use metrics objects in the class,  * so that it can be easily switched to metrics framework later when it support  * this scenario.  * Some of these metrics are general for any client operation such as put  * However, there is no need for this. So they are defined under scan operation  * for now.  */
end_comment

begin_class
specifier|public
class|class
name|ScanMetrics
implements|implements
name|Writable
block|{
specifier|private
specifier|static
specifier|final
name|byte
name|SCANMETRICS_VERSION
init|=
operator|(
name|byte
operator|)
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ScanMetrics
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|MetricsRegistry
name|registry
init|=
operator|new
name|MetricsRegistry
argument_list|()
decl_stmt|;
comment|/**    * number of RPC calls    */
specifier|public
specifier|final
name|MetricsTimeVaryingLong
name|countOfRPCcalls
init|=
operator|new
name|MetricsTimeVaryingLong
argument_list|(
literal|"RPC_CALLS"
argument_list|,
name|registry
argument_list|)
decl_stmt|;
comment|/**    * number of remote RPC calls    */
specifier|public
specifier|final
name|MetricsTimeVaryingLong
name|countOfRemoteRPCcalls
init|=
operator|new
name|MetricsTimeVaryingLong
argument_list|(
literal|"REMOTE_RPC_CALLS"
argument_list|,
name|registry
argument_list|)
decl_stmt|;
comment|/**    * sum of milliseconds between sequential next calls    */
specifier|public
specifier|final
name|MetricsTimeVaryingLong
name|sumOfMillisSecBetweenNexts
init|=
operator|new
name|MetricsTimeVaryingLong
argument_list|(
literal|"MILLIS_BETWEEN_NEXTS"
argument_list|,
name|registry
argument_list|)
decl_stmt|;
comment|/**    * number of NotServingRegionException caught    */
specifier|public
specifier|final
name|MetricsTimeVaryingLong
name|countOfNSRE
init|=
operator|new
name|MetricsTimeVaryingLong
argument_list|(
literal|"NOT_SERVING_REGION_EXCEPTION"
argument_list|,
name|registry
argument_list|)
decl_stmt|;
comment|/**    * number of bytes in Result objects from region servers    */
specifier|public
specifier|final
name|MetricsTimeVaryingLong
name|countOfBytesInResults
init|=
operator|new
name|MetricsTimeVaryingLong
argument_list|(
literal|"BYTES_IN_RESULTS"
argument_list|,
name|registry
argument_list|)
decl_stmt|;
comment|/**    * number of bytes in Result objects from remote region servers    */
specifier|public
specifier|final
name|MetricsTimeVaryingLong
name|countOfBytesInRemoteResults
init|=
operator|new
name|MetricsTimeVaryingLong
argument_list|(
literal|"BYTES_IN_REMOTE_RESULTS"
argument_list|,
name|registry
argument_list|)
decl_stmt|;
comment|/**    * number of regions    */
specifier|public
specifier|final
name|MetricsTimeVaryingLong
name|countOfRegions
init|=
operator|new
name|MetricsTimeVaryingLong
argument_list|(
literal|"REGIONS_SCANNED"
argument_list|,
name|registry
argument_list|)
decl_stmt|;
comment|/**    * number of RPC retries    */
specifier|public
specifier|final
name|MetricsTimeVaryingLong
name|countOfRPCRetries
init|=
operator|new
name|MetricsTimeVaryingLong
argument_list|(
literal|"RPC_RETRIES"
argument_list|,
name|registry
argument_list|)
decl_stmt|;
comment|/**    * number of remote RPC retries    */
specifier|public
specifier|final
name|MetricsTimeVaryingLong
name|countOfRemoteRPCRetries
init|=
operator|new
name|MetricsTimeVaryingLong
argument_list|(
literal|"REMOTE_RPC_RETRIES"
argument_list|,
name|registry
argument_list|)
decl_stmt|;
comment|/**    * constructor    */
specifier|public
name|ScanMetrics
parameter_list|()
block|{   }
comment|/**    * serialize all the MetricsTimeVaryingLong    */
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeByte
argument_list|(
name|SCANMETRICS_VERSION
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|MetricsBase
argument_list|>
name|mbs
init|=
name|registry
operator|.
name|getMetricsList
argument_list|()
decl_stmt|;
comment|// we only handle MetricsTimeVaryingLong for now.
name|int
name|metricsCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|MetricsBase
name|mb
range|:
name|mbs
control|)
block|{
if|if
condition|(
name|mb
operator|instanceof
name|MetricsTimeVaryingLong
condition|)
block|{
name|metricsCount
operator|++
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"unsupported metrics type. metrics name: "
operator|+
name|mb
operator|.
name|getName
argument_list|()
operator|+
literal|", metrics description: "
operator|+
name|mb
operator|.
name|getDescription
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|out
operator|.
name|writeInt
argument_list|(
name|metricsCount
argument_list|)
expr_stmt|;
for|for
control|(
name|MetricsBase
name|mb
range|:
name|mbs
control|)
block|{
name|out
operator|.
name|writeUTF
argument_list|(
name|mb
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
operator|(
operator|(
name|MetricsTimeVaryingLong
operator|)
name|mb
operator|)
operator|.
name|getCurrentIntervalValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|version
init|=
name|in
operator|.
name|readByte
argument_list|()
decl_stmt|;
if|if
condition|(
name|version
operator|>
operator|(
name|int
operator|)
name|SCANMETRICS_VERSION
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"version "
operator|+
name|version
operator|+
literal|" not supported"
argument_list|)
throw|;
block|}
name|int
name|metricsCount
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|metricsCount
condition|;
name|i
operator|++
control|)
block|{
name|String
name|metricsName
init|=
name|in
operator|.
name|readUTF
argument_list|()
decl_stmt|;
name|long
name|v
init|=
name|in
operator|.
name|readLong
argument_list|()
decl_stmt|;
name|MetricsBase
name|mb
init|=
name|registry
operator|.
name|get
argument_list|(
name|metricsName
argument_list|)
decl_stmt|;
if|if
condition|(
name|mb
operator|instanceof
name|MetricsTimeVaryingLong
condition|)
block|{
operator|(
operator|(
name|MetricsTimeVaryingLong
operator|)
name|mb
operator|)
operator|.
name|inc
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"unsupported metrics type. metrics name: "
operator|+
name|mb
operator|.
name|getName
argument_list|()
operator|+
literal|", metrics description: "
operator|+
name|mb
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|MetricsTimeVaryingLong
index|[]
name|getMetricsTimeVaryingLongArray
parameter_list|()
block|{
name|Collection
argument_list|<
name|MetricsBase
argument_list|>
name|mbs
init|=
name|registry
operator|.
name|getMetricsList
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|MetricsTimeVaryingLong
argument_list|>
name|mlv
init|=
operator|new
name|ArrayList
argument_list|<
name|MetricsTimeVaryingLong
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|MetricsBase
name|mb
range|:
name|mbs
control|)
block|{
if|if
condition|(
name|mb
operator|instanceof
name|MetricsTimeVaryingLong
condition|)
block|{
name|mlv
operator|.
name|add
argument_list|(
operator|(
name|MetricsTimeVaryingLong
operator|)
name|mb
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|mlv
operator|.
name|toArray
argument_list|(
operator|new
name|MetricsTimeVaryingLong
index|[
name|mlv
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
block|}
end_class

end_unit

