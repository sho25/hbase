begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|RegionTransitionData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooKeeper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
operator|.
name|NoNodeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooDefs
operator|.
name|Ids
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import

begin_comment
comment|/**  * Internal HBase utility class for ZooKeeper.  *  *<p>Contains only static methods and constants.  *  *<p>Methods all throw {@link KeeperException} if there is an unexpected  * zookeeper exception, so callers of these methods must handle appropriately.  * If ZK is required for the operation, the server will need to be aborted.  */
end_comment

begin_class
specifier|public
class|class
name|ZKUtil
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ZKUtil
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// TODO: Replace this with ZooKeeper constant when ZOOKEEPER-277 is resolved.
specifier|private
specifier|static
specifier|final
name|char
name|ZNODE_PATH_SEPARATOR
init|=
literal|'/'
decl_stmt|;
comment|/**    * Creates a new connection to ZooKeeper, pulling settings and ensemble config    * from the specified configuration object using methods from {@link ZKConfig}.    *    * Sets the connection status monitoring watcher to the specified watcher.    *    * @param conf configuration to pull ensemble and other settings from    * @param watcher watcher to monitor connection changes    * @return connection to zookeeper    * @throws IOException if unable to connect to zk or config problem    */
specifier|public
specifier|static
name|ZooKeeper
name|connect
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Watcher
name|watcher
parameter_list|)
throws|throws
name|IOException
block|{
name|Properties
name|properties
init|=
name|ZKConfig
operator|.
name|makeZKProps
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|ensemble
init|=
name|ZKConfig
operator|.
name|getZKQuorumServersString
argument_list|(
name|properties
argument_list|)
decl_stmt|;
return|return
name|connect
argument_list|(
name|conf
argument_list|,
name|ensemble
argument_list|,
name|watcher
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ZooKeeper
name|connect
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|ensemble
parameter_list|,
name|Watcher
name|watcher
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|connect
argument_list|(
name|conf
argument_list|,
name|ensemble
argument_list|,
name|watcher
argument_list|,
literal|""
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ZooKeeper
name|connect
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|ensemble
parameter_list|,
name|Watcher
name|watcher
parameter_list|,
specifier|final
name|String
name|descriptor
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|ensemble
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to determine ZooKeeper ensemble"
argument_list|)
throw|;
block|}
name|int
name|timeout
init|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"zookeeper.session.timeout"
argument_list|,
literal|180
operator|*
literal|1000
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|descriptor
operator|+
literal|" opening connection to ZooKeeper with ensemble ("
operator|+
name|ensemble
operator|+
literal|")"
argument_list|)
expr_stmt|;
return|return
operator|new
name|ZooKeeper
argument_list|(
name|ensemble
argument_list|,
name|timeout
argument_list|,
name|watcher
argument_list|)
return|;
block|}
comment|//
comment|// Helper methods
comment|//
comment|/**    * Join the prefix znode name with the suffix znode name to generate a proper    * full znode name.    *    * Assumes prefix does not end with slash and suffix does not begin with it.    *    * @param prefix beginning of znode name    * @param suffix ending of znode name    * @return result of properly joining prefix with suffix    */
specifier|public
specifier|static
name|String
name|joinZNode
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|suffix
parameter_list|)
block|{
return|return
name|prefix
operator|+
name|ZNODE_PATH_SEPARATOR
operator|+
name|suffix
return|;
block|}
comment|/**    * Returns the full path of the immediate parent of the specified node.    * @param node path to get parent of    * @return parent of path, null if passed the root node or an invalid node    */
specifier|public
specifier|static
name|String
name|getParent
parameter_list|(
name|String
name|node
parameter_list|)
block|{
name|int
name|idx
init|=
name|node
operator|.
name|lastIndexOf
argument_list|(
name|ZNODE_PATH_SEPARATOR
argument_list|)
decl_stmt|;
return|return
name|idx
operator|<=
literal|0
condition|?
literal|null
else|:
name|node
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
return|;
block|}
comment|/**    * Get the name of the current node from the specified fully-qualified path.    * @param path fully-qualified path    * @return name of the current node    */
specifier|public
specifier|static
name|String
name|getNodeName
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|path
operator|.
name|substring
argument_list|(
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|"/"
argument_list|)
operator|+
literal|1
argument_list|)
return|;
block|}
comment|/**    * Get the key to the ZK ensemble for this configuration without    * adding a name at the end    * @param conf Configuration to use to build the key    * @return ensemble key without a name    */
specifier|public
specifier|static
name|String
name|getZooKeeperClusterKey
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|getZooKeeperClusterKey
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Get the key to the ZK ensemble for this configuration and append    * a name at the end    * @param conf Configuration to use to build the key    * @param name Name that should be appended at the end if not empty or null    * @return ensemble key with a name (if any)    */
specifier|public
specifier|static
name|String
name|getZooKeeperClusterKey
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|String
name|ensemble
init|=
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_QUORUM
operator|.
name|replaceAll
argument_list|(
literal|"[\\t\\n\\x0B\\f\\r]"
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
name|ensemble
argument_list|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_CLIENT_PORT
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_ZNODE_PARENT
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Apply the settings in the given key to the given configuration, this is    * used to communicate with distant clusters    * @param conf configuration object to configure    * @param key string that contains the 3 required configuratins    * @throws IOException    */
specifier|public
specifier|static
name|void
name|applyClusterKeyToConf
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|String
index|[]
name|parts
init|=
name|transformClusterKey
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_QUORUM
argument_list|,
name|parts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hbase.zookeeper.property.clientPort"
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_ZNODE_PARENT
argument_list|,
name|parts
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
comment|/**    * Separate the given key into the three configurations it should contain:    * hbase.zookeeper.quorum, hbase.zookeeper.client.port    * and zookeeper.znode.parent    * @param key    * @return the three configuration in the described order    * @throws IOException    */
specifier|public
specifier|static
name|String
index|[]
name|transformClusterKey
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|String
index|[]
name|parts
init|=
name|key
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|!=
literal|3
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cluster key invalid, the format should be:"
operator|+
name|HConstants
operator|.
name|ZOOKEEPER_QUORUM
operator|+
literal|":hbase.zookeeper.client.port:"
operator|+
name|HConstants
operator|.
name|ZOOKEEPER_ZNODE_PARENT
argument_list|)
throw|;
block|}
return|return
name|parts
return|;
block|}
comment|//
comment|// Existence checks and watches
comment|//
comment|/**    * Watch the specified znode for delete/create/change events.  The watcher is    * set whether or not the node exists.  If the node already exists, the method    * returns true.  If the node does not exist, the method returns false.    *    * @param zkw zk reference    * @param znode path of node to watch    * @return true if znode exists, false if does not exist or error    * @throws KeeperException if unexpected zookeeper exception    */
specifier|public
specifier|static
name|boolean
name|watchAndCheckExists
parameter_list|(
name|ZooKeeperWatcher
name|zkw
parameter_list|,
name|String
name|znode
parameter_list|)
throws|throws
name|KeeperException
block|{
try|try
block|{
name|Stat
name|s
init|=
name|zkw
operator|.
name|getZooKeeper
argument_list|()
operator|.
name|exists
argument_list|(
name|znode
argument_list|,
name|zkw
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|zkw
operator|.
name|prefix
argument_list|(
literal|"Set watcher on existing znode "
operator|+
name|znode
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|s
operator|!=
literal|null
condition|?
literal|true
else|:
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|zkw
operator|.
name|prefix
argument_list|(
literal|"Unable to set watcher on znode "
operator|+
name|znode
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|zkw
operator|.
name|keeperException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|zkw
operator|.
name|prefix
argument_list|(
literal|"Unable to set watcher on znode "
operator|+
name|znode
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|zkw
operator|.
name|interruptedException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Check if the specified node exists.  Sets no watches.    *    * Returns true if node exists, false if not.  Returns an exception if there    * is an unexpected zookeeper exception.    *    * @param zkw zk reference    * @param znode path of node to watch    * @return version of the node if it exists, -1 if does not exist    * @throws KeeperException if unexpected zookeeper exception    */
specifier|public
specifier|static
name|int
name|checkExists
parameter_list|(
name|ZooKeeperWatcher
name|zkw
parameter_list|,
name|String
name|znode
parameter_list|)
throws|throws
name|KeeperException
block|{
try|try
block|{
name|Stat
name|s
init|=
name|zkw
operator|.
name|getZooKeeper
argument_list|()
operator|.
name|exists
argument_list|(
name|znode
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|s
operator|!=
literal|null
condition|?
name|s
operator|.
name|getVersion
argument_list|()
else|:
operator|-
literal|1
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|zkw
operator|.
name|prefix
argument_list|(
literal|"Unable to set watcher on znode ("
operator|+
name|znode
operator|+
literal|")"
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|zkw
operator|.
name|keeperException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|zkw
operator|.
name|prefix
argument_list|(
literal|"Unable to set watcher on znode ("
operator|+
name|znode
operator|+
literal|")"
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|zkw
operator|.
name|interruptedException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
comment|//
comment|// Znode listings
comment|//
comment|/**    * Lists the children znodes of the specified znode.  Also sets a watch on    * the specified znode which will capture a NodeDeleted event on the specified    * znode as well as NodeChildrenChanged if any children of the specified znode    * are created or deleted.    *    * Returns null if the specified node does not exist.  Otherwise returns a    * list of children of the specified node.  If the node exists but it has no    * children, an empty list will be returned.    *    * @param zkw zk reference    * @param znode path of node to list and watch children of    * @return list of children of the specified node, an empty list if the node    *          exists but has no children, and null if the node does not exist    * @throws KeeperException if unexpected zookeeper exception    */
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|listChildrenAndWatchForNewChildren
parameter_list|(
name|ZooKeeperWatcher
name|zkw
parameter_list|,
name|String
name|znode
parameter_list|)
throws|throws
name|KeeperException
block|{
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|children
init|=
name|zkw
operator|.
name|getZooKeeper
argument_list|()
operator|.
name|getChildren
argument_list|(
name|znode
argument_list|,
name|zkw
argument_list|)
decl_stmt|;
return|return
name|children
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|ke
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|zkw
operator|.
name|prefix
argument_list|(
literal|"Unable to list children of znode "
operator|+
name|znode
operator|+
literal|" "
operator|+
literal|"because node does not exist (not an error)"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|zkw
operator|.
name|prefix
argument_list|(
literal|"Unable to list children of znode "
operator|+
name|znode
operator|+
literal|" "
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|zkw
operator|.
name|keeperException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|zkw
operator|.
name|prefix
argument_list|(
literal|"Unable to list children of znode "
operator|+
name|znode
operator|+
literal|" "
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|zkw
operator|.
name|interruptedException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * List all the children of the specified znode, setting a watch for children    * changes and also setting a watch on every individual child in order to get    * the NodeCreated and NodeDeleted events.    * @param zkw zookeeper reference    * @param znode node to get children of and watch    * @return list of znode names, null if the node doesn't exist    * @throws KeeperException    */
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|listChildrenAndWatchThem
parameter_list|(
name|ZooKeeperWatcher
name|zkw
parameter_list|,
name|String
name|znode
parameter_list|)
throws|throws
name|KeeperException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|children
init|=
name|listChildrenAndWatchForNewChildren
argument_list|(
name|zkw
argument_list|,
name|znode
argument_list|)
decl_stmt|;
if|if
condition|(
name|children
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|String
name|child
range|:
name|children
control|)
block|{
name|watchAndCheckExists
argument_list|(
name|zkw
argument_list|,
name|joinZNode
argument_list|(
name|znode
argument_list|,
name|child
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|children
return|;
block|}
comment|/**    * Lists the children of the specified znode without setting any watches.    *    * Used to list the currently online regionservers and their addresses.    *    * Sets no watches at all, this method is best effort.    *    * Returns an empty list if the node has no children.  Returns null if the    * parent node itself does not exist.    *    * @param zkw zookeeper reference    * @param znode node to get children of as addresses    * @return list of data of children of specified znode, empty if no children,    *         null if parent does not exist    * @throws KeeperException if unexpected zookeeper exception    */
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|listChildrenNoWatch
parameter_list|(
name|ZooKeeperWatcher
name|zkw
parameter_list|,
name|String
name|znode
parameter_list|)
throws|throws
name|KeeperException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|children
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// List the children without watching
name|children
operator|=
name|zkw
operator|.
name|getZooKeeper
argument_list|()
operator|.
name|getChildren
argument_list|(
name|znode
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|nne
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|zkw
operator|.
name|interruptedException
argument_list|(
name|ie
argument_list|)
expr_stmt|;
block|}
return|return
name|children
return|;
block|}
comment|/**    * Simple class to hold a node path and node data.    */
specifier|public
specifier|static
class|class
name|NodeAndData
block|{
specifier|private
name|String
name|node
decl_stmt|;
specifier|private
name|byte
index|[]
name|data
decl_stmt|;
specifier|public
name|NodeAndData
parameter_list|(
name|String
name|node
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
block|{
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
block|}
specifier|public
name|String
name|getNode
parameter_list|()
block|{
return|return
name|node
return|;
block|}
specifier|public
name|byte
index|[]
name|getData
parameter_list|()
block|{
return|return
name|data
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|node
operator|+
literal|" ("
operator|+
name|RegionTransitionData
operator|.
name|fromBytes
argument_list|(
name|data
argument_list|)
operator|+
literal|")"
return|;
block|}
block|}
comment|/**    * Checks if the specified znode has any children.  Sets no watches.    *    * Returns true if the node exists and has children.  Returns false if the    * node does not exist or if the node does not have any children.    *    * Used during master initialization to determine if the master is a    * failed-over-to master or the first master during initial cluster startup.    * If the directory for regionserver ephemeral nodes is empty then this is    * a cluster startup, if not then it is not cluster startup.    *    * @param zkw zk reference    * @param znode path of node to check for children of    * @return true if node has children, false if not or node does not exist    * @throws KeeperException if unexpected zookeeper exception    */
specifier|public
specifier|static
name|boolean
name|nodeHasChildren
parameter_list|(
name|ZooKeeperWatcher
name|zkw
parameter_list|,
name|String
name|znode
parameter_list|)
throws|throws
name|KeeperException
block|{
try|try
block|{
return|return
operator|!
name|zkw
operator|.
name|getZooKeeper
argument_list|()
operator|.
name|getChildren
argument_list|(
name|znode
argument_list|,
literal|null
argument_list|)
operator|.
name|isEmpty
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|ke
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|zkw
operator|.
name|prefix
argument_list|(
literal|"Unable to list children of znode "
operator|+
name|znode
operator|+
literal|" "
operator|+
literal|"because node does not exist (not an error)"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|zkw
operator|.
name|prefix
argument_list|(
literal|"Unable to list children of znode "
operator|+
name|znode
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|zkw
operator|.
name|keeperException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|zkw
operator|.
name|prefix
argument_list|(
literal|"Unable to list children of znode "
operator|+
name|znode
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|zkw
operator|.
name|interruptedException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Get the number of children of the specified node.    *    * If the node does not exist or has no children, returns 0.    *    * Sets no watches at all.    *    * @param zkw zk reference    * @param znode path of node to count children of    * @return number of children of specified node, 0 if none or parent does not    *         exist    * @throws KeeperException if unexpected zookeeper exception    */
specifier|public
specifier|static
name|int
name|getNumberOfChildren
parameter_list|(
name|ZooKeeperWatcher
name|zkw
parameter_list|,
name|String
name|znode
parameter_list|)
throws|throws
name|KeeperException
block|{
try|try
block|{
name|Stat
name|stat
init|=
name|zkw
operator|.
name|getZooKeeper
argument_list|()
operator|.
name|exists
argument_list|(
name|znode
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|stat
operator|==
literal|null
condition|?
literal|0
else|:
name|stat
operator|.
name|getNumChildren
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|zkw
operator|.
name|prefix
argument_list|(
literal|"Unable to get children of node "
operator|+
name|znode
argument_list|)
argument_list|)
expr_stmt|;
name|zkw
operator|.
name|keeperException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|zkw
operator|.
name|interruptedException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|//
comment|// Data retrieval
comment|//
comment|/**    * Get znode data. Does not set a watcher.    * @return ZNode data    */
specifier|public
specifier|static
name|byte
index|[]
name|getData
parameter_list|(
name|ZooKeeperWatcher
name|zkw
parameter_list|,
name|String
name|znode
parameter_list|)
throws|throws
name|KeeperException
block|{
try|try
block|{
name|byte
index|[]
name|data
init|=
name|zkw
operator|.
name|getZooKeeper
argument_list|()
operator|.
name|getData
argument_list|(
name|znode
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|logRetrievedMsg
argument_list|(
name|zkw
argument_list|,
name|znode
argument_list|,
name|data
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|zkw
operator|.
name|prefix
argument_list|(
literal|"Unable to get data of znode "
operator|+
name|znode
operator|+
literal|" "
operator|+
literal|"because node does not exist (not an error)"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|zkw
operator|.
name|prefix
argument_list|(
literal|"Unable to get data of znode "
operator|+
name|znode
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|zkw
operator|.
name|keeperException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|zkw
operator|.
name|prefix
argument_list|(
literal|"Unable to get data of znode "
operator|+
name|znode
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|zkw
operator|.
name|interruptedException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Get the data at the specified znode and set a watch.    *    * Returns the data and sets a watch if the node exists.  Returns null and no    * watch is set if the node does not exist or there is an exception.    *    * @param zkw zk reference    * @param znode path of node    * @return data of the specified znode, or null    * @throws KeeperException if unexpected zookeeper exception    */
specifier|public
specifier|static
name|byte
index|[]
name|getDataAndWatch
parameter_list|(
name|ZooKeeperWatcher
name|zkw
parameter_list|,
name|String
name|znode
parameter_list|)
throws|throws
name|KeeperException
block|{
try|try
block|{
name|byte
index|[]
name|data
init|=
name|zkw
operator|.
name|getZooKeeper
argument_list|()
operator|.
name|getData
argument_list|(
name|znode
argument_list|,
name|zkw
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|logRetrievedMsg
argument_list|(
name|zkw
argument_list|,
name|znode
argument_list|,
name|data
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|zkw
operator|.
name|prefix
argument_list|(
literal|"Unable to get data of znode "
operator|+
name|znode
operator|+
literal|" "
operator|+
literal|"because node does not exist (not an error)"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|zkw
operator|.
name|prefix
argument_list|(
literal|"Unable to get data of znode "
operator|+
name|znode
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|zkw
operator|.
name|keeperException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|zkw
operator|.
name|prefix
argument_list|(
literal|"Unable to get data of znode "
operator|+
name|znode
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|zkw
operator|.
name|interruptedException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Get the data at the specified znode without setting a watch.    *    * Returns the data if the node exists.  Returns null if the node does not    * exist.    *    * Sets the stats of the node in the passed Stat object.  Pass a null stat if    * not interested.    *    * @param zkw zk reference    * @param znode path of node    * @param stat node status to get if node exists    * @return data of the specified znode, or null if node does not exist    * @throws KeeperException if unexpected zookeeper exception    */
specifier|public
specifier|static
name|byte
index|[]
name|getDataNoWatch
parameter_list|(
name|ZooKeeperWatcher
name|zkw
parameter_list|,
name|String
name|znode
parameter_list|,
name|Stat
name|stat
parameter_list|)
throws|throws
name|KeeperException
block|{
try|try
block|{
name|byte
index|[]
name|data
init|=
name|zkw
operator|.
name|getZooKeeper
argument_list|()
operator|.
name|getData
argument_list|(
name|znode
argument_list|,
literal|null
argument_list|,
name|stat
argument_list|)
decl_stmt|;
name|logRetrievedMsg
argument_list|(
name|zkw
argument_list|,
name|znode
argument_list|,
name|data
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|zkw
operator|.
name|prefix
argument_list|(
literal|"Unable to get data of znode "
operator|+
name|znode
operator|+
literal|" "
operator|+
literal|"because node does not exist (not necessarily an error)"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|zkw
operator|.
name|prefix
argument_list|(
literal|"Unable to get data of znode "
operator|+
name|znode
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|zkw
operator|.
name|keeperException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|zkw
operator|.
name|prefix
argument_list|(
literal|"Unable to get data of znode "
operator|+
name|znode
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|zkw
operator|.
name|interruptedException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Update the data of an existing node with the expected version to have the    * specified data.    *    * Throws an exception if there is a version mismatch or some other problem.    *    * Sets no watches under any conditions.    *    * @param zkw zk reference    * @param znode    * @param data    * @param expectedVersion    * @throws KeeperException if unexpected zookeeper exception    * @throws KeeperException.BadVersionException if version mismatch    */
specifier|public
specifier|static
name|void
name|updateExistingNodeData
parameter_list|(
name|ZooKeeperWatcher
name|zkw
parameter_list|,
name|String
name|znode
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|int
name|expectedVersion
parameter_list|)
throws|throws
name|KeeperException
block|{
try|try
block|{
name|zkw
operator|.
name|getZooKeeper
argument_list|()
operator|.
name|setData
argument_list|(
name|znode
argument_list|,
name|data
argument_list|,
name|expectedVersion
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|zkw
operator|.
name|interruptedException
argument_list|(
name|ie
argument_list|)
expr_stmt|;
block|}
block|}
comment|//
comment|// Data setting
comment|//
comment|/**    * Sets the data of the existing znode to be the specified data.  Ensures that    * the current data has the specified expected version.    *    *<p>If the node does not exist, a {@link NoNodeException} will be thrown.    *    *<p>If their is a version mismatch, method returns null.    *    *<p>No watches are set but setting data will trigger other watchers of this    * node.    *    *<p>If there is another problem, a KeeperException will be thrown.    *    * @param zkw zk reference    * @param znode path of node    * @param data data to set for node    * @param expectedVersion version expected when setting data    * @return true if data set, false if version mismatch    * @throws KeeperException if unexpected zookeeper exception    */
specifier|public
specifier|static
name|boolean
name|setData
parameter_list|(
name|ZooKeeperWatcher
name|zkw
parameter_list|,
name|String
name|znode
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|int
name|expectedVersion
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|KeeperException
operator|.
name|NoNodeException
block|{
try|try
block|{
return|return
name|zkw
operator|.
name|getZooKeeper
argument_list|()
operator|.
name|setData
argument_list|(
name|znode
argument_list|,
name|data
argument_list|,
name|expectedVersion
argument_list|)
operator|!=
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|zkw
operator|.
name|interruptedException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Set data into node creating node if it doesn't yet exist.    * Does not set watch.    * @param zkw zk reference    * @param znode path of node    * @param data data to set for node    * @throws KeeperException    */
specifier|public
specifier|static
name|void
name|createSetData
parameter_list|(
specifier|final
name|ZooKeeperWatcher
name|zkw
parameter_list|,
specifier|final
name|String
name|znode
parameter_list|,
specifier|final
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|KeeperException
block|{
if|if
condition|(
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|znode
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|ZKUtil
operator|.
name|createWithParents
argument_list|(
name|zkw
argument_list|,
name|znode
argument_list|)
expr_stmt|;
block|}
name|ZKUtil
operator|.
name|setData
argument_list|(
name|zkw
argument_list|,
name|znode
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sets the data of the existing znode to be the specified data.  The node    * must exist but no checks are done on the existing data or version.    *    *<p>If the node does not exist, a {@link NoNodeException} will be thrown.    *    *<p>No watches are set but setting data will trigger other watchers of this    * node.    *    *<p>If there is another problem, a KeeperException will be thrown.    *    * @param zkw zk reference    * @param znode path of node    * @param data data to set for node    * @throws KeeperException if unexpected zookeeper exception    */
specifier|public
specifier|static
name|void
name|setData
parameter_list|(
name|ZooKeeperWatcher
name|zkw
parameter_list|,
name|String
name|znode
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|KeeperException
operator|.
name|NoNodeException
block|{
name|setData
argument_list|(
name|zkw
argument_list|,
name|znode
argument_list|,
name|data
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// Node creation
comment|//
comment|/**    *    * Set the specified znode to be an ephemeral node carrying the specified    * data.    *    * If the node is created successfully, a watcher is also set on the node.    *    * If the node is not created successfully because it already exists, this    * method will also set a watcher on the node.    *    * If there is another problem, a KeeperException will be thrown.    *    * @param zkw zk reference    * @param znode path of node    * @param data data of node    * @return true if node created, false if not, watch set in both cases    * @throws KeeperException if unexpected zookeeper exception    */
specifier|public
specifier|static
name|boolean
name|createEphemeralNodeAndWatch
parameter_list|(
name|ZooKeeperWatcher
name|zkw
parameter_list|,
name|String
name|znode
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|KeeperException
block|{
try|try
block|{
name|zkw
operator|.
name|getZooKeeper
argument_list|()
operator|.
name|create
argument_list|(
name|znode
argument_list|,
name|data
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|EPHEMERAL
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NodeExistsException
name|nee
parameter_list|)
block|{
if|if
condition|(
operator|!
name|watchAndCheckExists
argument_list|(
name|zkw
argument_list|,
name|znode
argument_list|)
condition|)
block|{
comment|// It did exist but now it doesn't, try again
return|return
name|createEphemeralNodeAndWatch
argument_list|(
name|zkw
argument_list|,
name|znode
argument_list|,
name|data
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Interrupted"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Creates the specified znode to be a persistent node carrying the specified    * data.    *    * Returns true if the node was successfully created, false if the node    * already existed.    *    * If the node is created successfully, a watcher is also set on the node.    *    * If the node is not created successfully because it already exists, this    * method will also set a watcher on the node but return false.    *    * If there is another problem, a KeeperException will be thrown.    *    * @param zkw zk reference    * @param znode path of node    * @param data data of node    * @return true if node created, false if not, watch set in both cases    * @throws KeeperException if unexpected zookeeper exception    */
specifier|public
specifier|static
name|boolean
name|createNodeIfNotExistsAndWatch
parameter_list|(
name|ZooKeeperWatcher
name|zkw
parameter_list|,
name|String
name|znode
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|KeeperException
block|{
try|try
block|{
name|zkw
operator|.
name|getZooKeeper
argument_list|()
operator|.
name|create
argument_list|(
name|znode
argument_list|,
name|data
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NodeExistsException
name|nee
parameter_list|)
block|{
try|try
block|{
name|zkw
operator|.
name|getZooKeeper
argument_list|()
operator|.
name|exists
argument_list|(
name|znode
argument_list|,
name|zkw
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|zkw
operator|.
name|interruptedException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|zkw
operator|.
name|interruptedException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Creates the specified node with the specified data and watches it.    *    *<p>Throws an exception if the node already exists.    *    *<p>The node created is persistent and open access.    *    *<p>Returns the version number of the created node if successful.    *    * @param zkw zk reference    * @param znode path of node to create    * @param data data of node to create    * @return version of node created    * @throws KeeperException if unexpected zookeeper exception    * @throws KeeperException.NodeExistsException if node already exists    */
specifier|public
specifier|static
name|int
name|createAndWatch
parameter_list|(
name|ZooKeeperWatcher
name|zkw
parameter_list|,
name|String
name|znode
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|KeeperException
operator|.
name|NodeExistsException
block|{
try|try
block|{
name|zkw
operator|.
name|getZooKeeper
argument_list|()
operator|.
name|create
argument_list|(
name|znode
argument_list|,
name|data
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
return|return
name|zkw
operator|.
name|getZooKeeper
argument_list|()
operator|.
name|exists
argument_list|(
name|znode
argument_list|,
name|zkw
argument_list|)
operator|.
name|getVersion
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|zkw
operator|.
name|interruptedException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
comment|/**    * Async creates the specified node with the specified data.    *    *<p>Throws an exception if the node already exists.    *    *<p>The node created is persistent and open access.    *    * @param zkw zk reference    * @param znode path of node to create    * @param data data of node to create    * @param cb    * @param ctx    * @throws KeeperException if unexpected zookeeper exception    * @throws KeeperException.NodeExistsException if node already exists    */
specifier|public
specifier|static
name|void
name|asyncCreate
parameter_list|(
name|ZooKeeperWatcher
name|zkw
parameter_list|,
name|String
name|znode
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
specifier|final
name|AsyncCallback
operator|.
name|StringCallback
name|cb
parameter_list|,
specifier|final
name|Object
name|ctx
parameter_list|)
block|{
name|zkw
operator|.
name|getZooKeeper
argument_list|()
operator|.
name|create
argument_list|(
name|znode
argument_list|,
name|data
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|,
name|cb
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates the specified node, if the node does not exist.  Does not set a    * watch and fails silently if the node already exists.    *    * The node created is persistent and open access.    *    * @param zkw zk reference    * @param znode path of node    * @throws KeeperException if unexpected zookeeper exception    */
specifier|public
specifier|static
name|void
name|createAndFailSilent
parameter_list|(
name|ZooKeeperWatcher
name|zkw
parameter_list|,
name|String
name|znode
parameter_list|)
throws|throws
name|KeeperException
block|{
try|try
block|{
name|ZooKeeper
name|zk
init|=
name|zkw
operator|.
name|getZooKeeper
argument_list|()
decl_stmt|;
if|if
condition|(
name|zk
operator|.
name|exists
argument_list|(
name|znode
argument_list|,
literal|false
argument_list|)
operator|==
literal|null
condition|)
block|{
name|zk
operator|.
name|create
argument_list|(
name|znode
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NodeExistsException
name|nee
parameter_list|)
block|{     }
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoAuthException
name|nee
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
literal|null
operator|==
name|zkw
operator|.
name|getZooKeeper
argument_list|()
operator|.
name|exists
argument_list|(
name|znode
argument_list|,
literal|false
argument_list|)
condition|)
block|{
comment|// If we failed to create the file and it does not already exist.
throw|throw
operator|(
name|nee
operator|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|zkw
operator|.
name|interruptedException
argument_list|(
name|ie
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|zkw
operator|.
name|interruptedException
argument_list|(
name|ie
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Creates the specified node and all parent nodes required for it to exist.    *    * No watches are set and no errors are thrown if the node already exists.    *    * The nodes created are persistent and open access.    *    * @param zkw zk reference    * @param znode path of node    * @throws KeeperException if unexpected zookeeper exception    */
specifier|public
specifier|static
name|void
name|createWithParents
parameter_list|(
name|ZooKeeperWatcher
name|zkw
parameter_list|,
name|String
name|znode
parameter_list|)
throws|throws
name|KeeperException
block|{
try|try
block|{
if|if
condition|(
name|znode
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|zkw
operator|.
name|getZooKeeper
argument_list|()
operator|.
name|create
argument_list|(
name|znode
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NodeExistsException
name|nee
parameter_list|)
block|{
return|return;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|nne
parameter_list|)
block|{
name|createWithParents
argument_list|(
name|zkw
argument_list|,
name|getParent
argument_list|(
name|znode
argument_list|)
argument_list|)
expr_stmt|;
name|createWithParents
argument_list|(
name|zkw
argument_list|,
name|znode
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|zkw
operator|.
name|interruptedException
argument_list|(
name|ie
argument_list|)
expr_stmt|;
block|}
block|}
comment|//
comment|// Deletes
comment|//
comment|/**    * Delete the specified node.  Sets no watches.  Throws all exceptions.    */
specifier|public
specifier|static
name|void
name|deleteNode
parameter_list|(
name|ZooKeeperWatcher
name|zkw
parameter_list|,
name|String
name|node
parameter_list|)
throws|throws
name|KeeperException
block|{
name|deleteNode
argument_list|(
name|zkw
argument_list|,
name|node
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Delete the specified node with the specified version.  Sets no watches.    * Throws all exceptions.    */
specifier|public
specifier|static
name|boolean
name|deleteNode
parameter_list|(
name|ZooKeeperWatcher
name|zkw
parameter_list|,
name|String
name|node
parameter_list|,
name|int
name|version
parameter_list|)
throws|throws
name|KeeperException
block|{
try|try
block|{
name|zkw
operator|.
name|getZooKeeper
argument_list|()
operator|.
name|delete
argument_list|(
name|node
argument_list|,
name|version
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|BadVersionException
name|bve
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|zkw
operator|.
name|interruptedException
argument_list|(
name|ie
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Deletes the specified node.  Fails silent if the node does not exist.    * @param zkw    * @param node    * @throws KeeperException    */
specifier|public
specifier|static
name|void
name|deleteNodeFailSilent
parameter_list|(
name|ZooKeeperWatcher
name|zkw
parameter_list|,
name|String
name|node
parameter_list|)
throws|throws
name|KeeperException
block|{
try|try
block|{
name|zkw
operator|.
name|getZooKeeper
argument_list|()
operator|.
name|delete
argument_list|(
name|node
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|nne
parameter_list|)
block|{     }
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|zkw
operator|.
name|interruptedException
argument_list|(
name|ie
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Delete the specified node and all of it's children.    *    * Sets no watches.  Throws all exceptions besides dealing with deletion of    * children.    */
specifier|public
specifier|static
name|void
name|deleteNodeRecursively
parameter_list|(
name|ZooKeeperWatcher
name|zkw
parameter_list|,
name|String
name|node
parameter_list|)
throws|throws
name|KeeperException
block|{
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|children
init|=
name|ZKUtil
operator|.
name|listChildrenNoWatch
argument_list|(
name|zkw
argument_list|,
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|children
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|child
range|:
name|children
control|)
block|{
name|deleteNodeRecursively
argument_list|(
name|zkw
argument_list|,
name|joinZNode
argument_list|(
name|node
argument_list|,
name|child
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|zkw
operator|.
name|getZooKeeper
argument_list|()
operator|.
name|delete
argument_list|(
name|node
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|zkw
operator|.
name|interruptedException
argument_list|(
name|ie
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Delete all the children of the specified node but not the node itself.    *    * Sets no watches.  Throws all exceptions besides dealing with deletion of    * children.    */
specifier|public
specifier|static
name|void
name|deleteChildrenRecursively
parameter_list|(
name|ZooKeeperWatcher
name|zkw
parameter_list|,
name|String
name|node
parameter_list|)
throws|throws
name|KeeperException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|children
init|=
name|ZKUtil
operator|.
name|listChildrenNoWatch
argument_list|(
name|zkw
argument_list|,
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|children
operator|==
literal|null
operator|||
name|children
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
for|for
control|(
name|String
name|child
range|:
name|children
control|)
block|{
name|deleteNodeRecursively
argument_list|(
name|zkw
argument_list|,
name|joinZNode
argument_list|(
name|node
argument_list|,
name|child
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//
comment|// ZooKeeper cluster information
comment|//
comment|/** @return String dump of everything in ZooKeeper. */
specifier|public
specifier|static
name|String
name|dump
parameter_list|(
name|ZooKeeperWatcher
name|zkw
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
try|try
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"HBase is rooted at "
argument_list|)
operator|.
name|append
argument_list|(
name|zkw
operator|.
name|baseZNode
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\nMaster address: "
argument_list|)
operator|.
name|append
argument_list|(
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|getData
argument_list|(
name|zkw
argument_list|,
name|zkw
operator|.
name|masterAddressZNode
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\nRegion server holding ROOT: "
argument_list|)
operator|.
name|append
argument_list|(
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|getData
argument_list|(
name|zkw
argument_list|,
name|zkw
operator|.
name|rootServerZNode
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\nRegion servers:"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|child
range|:
name|listChildrenNoWatch
argument_list|(
name|zkw
argument_list|,
name|zkw
operator|.
name|rsZNode
argument_list|)
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n "
argument_list|)
operator|.
name|append
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\nQuorum Server Statistics:"
argument_list|)
expr_stmt|;
name|String
index|[]
name|servers
init|=
name|zkw
operator|.
name|getQuorum
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|server
range|:
name|servers
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n "
argument_list|)
operator|.
name|append
argument_list|(
name|server
argument_list|)
expr_stmt|;
try|try
block|{
name|String
index|[]
name|stat
init|=
name|getServerStats
argument_list|(
name|server
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|stat
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n  "
argument_list|)
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n  ERROR: "
argument_list|)
operator|.
name|append
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\nFATAL ZooKeeper Exception!\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
operator|+
name|ke
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Gets the statistics from the given server. Uses a 1 minute timeout.    *    * @param server  The server to get the statistics from.    * @return The array of response strings.    * @throws IOException When the socket communication fails.    */
specifier|public
specifier|static
name|String
index|[]
name|getServerStats
parameter_list|(
name|String
name|server
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getServerStats
argument_list|(
name|server
argument_list|,
literal|60
operator|*
literal|1000
argument_list|)
return|;
block|}
comment|/**    * Gets the statistics from the given server.    *    * @param server  The server to get the statistics from.    * @param timeout  The socket timeout to use.    * @return The array of response strings.    * @throws IOException When the socket communication fails.    */
specifier|public
specifier|static
name|String
index|[]
name|getServerStats
parameter_list|(
name|String
name|server
parameter_list|,
name|int
name|timeout
parameter_list|)
throws|throws
name|IOException
block|{
name|String
index|[]
name|sp
init|=
name|server
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|Socket
name|socket
init|=
operator|new
name|Socket
argument_list|(
name|sp
index|[
literal|0
index|]
argument_list|,
name|sp
operator|.
name|length
operator|>
literal|1
condition|?
name|Integer
operator|.
name|parseInt
argument_list|(
name|sp
index|[
literal|1
index|]
argument_list|)
else|:
literal|2181
argument_list|)
decl_stmt|;
name|socket
operator|.
name|setSoTimeout
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
name|socket
operator|.
name|getOutputStream
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|BufferedReader
name|in
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|socket
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"stat"
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|res
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|String
name|line
init|=
name|in
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
name|res
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|res
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|res
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|logRetrievedMsg
parameter_list|(
specifier|final
name|ZooKeeperWatcher
name|zkw
parameter_list|,
specifier|final
name|String
name|znode
parameter_list|,
specifier|final
name|byte
index|[]
name|data
parameter_list|,
specifier|final
name|boolean
name|watcherSet
parameter_list|)
block|{
if|if
condition|(
operator|!
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
return|return;
name|LOG
operator|.
name|debug
argument_list|(
name|zkw
operator|.
name|prefix
argument_list|(
literal|"Retrieved "
operator|+
operator|(
operator|(
name|data
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|data
operator|.
name|length
operator|)
operator|+
literal|" byte(s) of data from znode "
operator|+
name|znode
operator|+
operator|(
name|watcherSet
condition|?
literal|" and set watcher; "
else|:
literal|"; data="
operator|)
operator|+
operator|(
name|data
operator|==
literal|null
condition|?
literal|"null"
else|:
name|data
operator|.
name|length
operator|==
literal|0
condition|?
literal|"empty"
else|:
operator|(
name|znode
operator|.
name|startsWith
argument_list|(
name|zkw
operator|.
name|assignmentZNode
argument_list|)
condition|?
name|RegionTransitionData
operator|.
name|fromBytes
argument_list|(
name|data
argument_list|)
operator|.
name|toString
argument_list|()
else|:
name|StringUtils
operator|.
name|abbreviate
argument_list|(
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|data
argument_list|)
argument_list|,
literal|32
argument_list|)
operator|)
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

