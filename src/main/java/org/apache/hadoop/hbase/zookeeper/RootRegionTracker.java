begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Abortable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|catalog
operator|.
name|RootLocationEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * Tracks the root region server location node in zookeeper.  * Root region location is set by {@link RootLocationEditor} usually called  * out of<code>RegionServerServices</code>.  * This class has a watcher on the root location and notices changes.  */
end_comment

begin_class
specifier|public
class|class
name|RootRegionTracker
extends|extends
name|ZooKeeperNodeTracker
block|{
comment|/**    * Creates a root region location tracker.    *    *<p>After construction, use {@link #start} to kick off tracking.    *    * @param watcher    * @param abortable    */
specifier|public
name|RootRegionTracker
parameter_list|(
name|ZooKeeperWatcher
name|watcher
parameter_list|,
name|Abortable
name|abortable
parameter_list|)
block|{
name|super
argument_list|(
name|watcher
argument_list|,
name|watcher
operator|.
name|rootServerZNode
argument_list|,
name|abortable
argument_list|)
expr_stmt|;
block|}
comment|/**    * Checks if the root region location is available.    * @return true if root region location is available, false if not    */
specifier|public
name|boolean
name|isLocationAvailable
parameter_list|()
block|{
return|return
name|super
operator|.
name|getData
argument_list|()
operator|!=
literal|null
return|;
block|}
comment|/**    * Gets the root region location, if available.  Null if not.  Does not block.    * @return server name    * @throws InterruptedException     */
specifier|public
name|ServerName
name|getRootRegionLocation
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|byte
index|[]
name|data
init|=
name|super
operator|.
name|getData
argument_list|()
decl_stmt|;
return|return
name|data
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|ServerName
argument_list|(
name|dataToString
argument_list|(
name|data
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Gets the root region location, if available, and waits for up to the    * specified timeout if not immediately available.    * @param timeout maximum time to wait, in millis    * @return server name for server hosting root region formatted as per    * {@link ServerName}, or null if none available    * @throws InterruptedException if interrupted while waiting    */
specifier|public
name|ServerName
name|waitRootRegionLocation
parameter_list|(
name|long
name|timeout
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|String
name|str
init|=
name|dataToString
argument_list|(
name|super
operator|.
name|blockUntilAvailable
argument_list|(
name|timeout
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|str
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|ServerName
argument_list|(
name|str
argument_list|)
return|;
block|}
comment|/*    * @param data    * @return Returns null if<code>data</code> is null else converts passed data    * to a String instance.    */
specifier|private
specifier|static
name|String
name|dataToString
parameter_list|(
specifier|final
name|byte
index|[]
name|data
parameter_list|)
block|{
return|return
name|data
operator|==
literal|null
condition|?
literal|null
else|:
name|Bytes
operator|.
name|toString
argument_list|(
name|data
argument_list|)
return|;
block|}
block|}
end_class

end_unit

