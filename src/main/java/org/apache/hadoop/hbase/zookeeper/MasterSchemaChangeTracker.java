begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Abortable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|monitoring
operator|.
name|MonitoredTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|monitoring
operator|.
name|TaskMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Writables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_class
specifier|public
class|class
name|MasterSchemaChangeTracker
extends|extends
name|ZooKeeperNodeTracker
block|{
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MasterSchemaChangeTracker
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|MasterServices
name|masterServices
decl_stmt|;
comment|// Used by tests only. Do not change this.
specifier|private
specifier|volatile
name|int
name|sleepTimeMillis
init|=
literal|0
decl_stmt|;
comment|// schema changes pending more than this time will be timed out.
specifier|private
name|long
name|schemaChangeTimeoutMillis
init|=
literal|30000
decl_stmt|;
comment|/**    * Constructs a new ZK node tracker.    *<p/>    *<p>After construction, use {@link #start} to kick off tracking.    *    * @param watcher    * @param abortable    */
specifier|public
name|MasterSchemaChangeTracker
parameter_list|(
name|ZooKeeperWatcher
name|watcher
parameter_list|,
name|Abortable
name|abortable
parameter_list|,
name|MasterServices
name|masterServices
parameter_list|,
name|long
name|schemaChangeTimeoutMillis
parameter_list|)
block|{
name|super
argument_list|(
name|watcher
argument_list|,
name|watcher
operator|.
name|schemaZNode
argument_list|,
name|abortable
argument_list|)
expr_stmt|;
name|this
operator|.
name|masterServices
operator|=
name|masterServices
expr_stmt|;
name|this
operator|.
name|schemaChangeTimeoutMillis
operator|=
name|schemaChangeTimeoutMillis
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|()
block|{
try|try
block|{
name|watcher
operator|.
name|registerListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|tables
init|=
name|ZKUtil
operator|.
name|listChildrenNoWatch
argument_list|(
name|watcher
argument_list|,
name|watcher
operator|.
name|schemaZNode
argument_list|)
decl_stmt|;
name|processCompletedSchemaChanges
argument_list|(
name|tables
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"MasterSchemaChangeTracker startup failed."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|abortable
operator|.
name|abort
argument_list|(
literal|"MasterSchemaChangeTracker startup failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getCurrentTables
parameter_list|()
throws|throws
name|KeeperException
block|{
return|return
name|ZKUtil
operator|.
name|listChildrenNoWatch
argument_list|(
name|watcher
argument_list|,
name|watcher
operator|.
name|schemaZNode
argument_list|)
return|;
block|}
comment|/**    * When a primary master crashes and the secondary master takes over    * mid-flight during an alter process, the secondary should cleanup any completed    * schema changes not handled by the previous master.    * @param tables    * @throws KeeperException    */
specifier|private
name|void
name|processCompletedSchemaChanges
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|tables
parameter_list|)
throws|throws
name|KeeperException
block|{
if|if
condition|(
name|tables
operator|==
literal|null
operator|||
name|tables
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|msg
init|=
literal|"No current schema change in progress. Skipping cleanup"
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|msg
init|=
literal|"Master seeing following tables undergoing schema change "
operator|+
literal|"process. Tables = "
operator|+
name|tables
decl_stmt|;
name|MonitoredTask
name|status
init|=
name|TaskMonitor
operator|.
name|get
argument_list|()
operator|.
name|createStatus
argument_list|(
name|msg
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|table
range|:
name|tables
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Processing table = "
operator|+
name|table
argument_list|)
expr_stmt|;
name|status
operator|.
name|setStatus
argument_list|(
literal|"Processing table = "
operator|+
name|table
argument_list|)
expr_stmt|;
try|try
block|{
name|processTableNode
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|String
name|errmsg
init|=
literal|"IOException while processing completed schema changes."
operator|+
literal|" Cause = "
operator|+
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errmsg
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|status
operator|.
name|setStatus
argument_list|(
name|errmsg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Get current alter status for a table.    * @param tableName    * @return MasterAlterStatus    * @throws KeeperException    * @throws IOException    */
specifier|public
name|MasterAlterStatus
name|getMasterAlterStatus
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|IOException
block|{
name|String
name|path
init|=
name|getSchemaChangeNodePathForTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|byte
index|[]
name|state
init|=
name|ZKUtil
operator|.
name|getData
argument_list|(
name|watcher
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|==
literal|null
operator|||
name|state
operator|.
name|length
operator|<=
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|MasterAlterStatus
name|mas
init|=
operator|new
name|MasterAlterStatus
argument_list|()
decl_stmt|;
name|Writables
operator|.
name|getWritable
argument_list|(
name|state
argument_list|,
name|mas
argument_list|)
expr_stmt|;
return|return
name|mas
return|;
block|}
comment|/**    * Get RS specific alter status for a table& server    * @param tableName    * @param serverName    * @return Region Server's Schema alter status    * @throws KeeperException    * @throws IOException    */
specifier|private
name|SchemaChangeTracker
operator|.
name|SchemaAlterStatus
name|getRSSchemaAlterStatus
parameter_list|(
name|String
name|tableName
parameter_list|,
name|String
name|serverName
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|IOException
block|{
name|String
name|childPath
init|=
name|getSchemaChangeNodePathForTableAndServer
argument_list|(
name|tableName
argument_list|,
name|serverName
argument_list|)
decl_stmt|;
name|byte
index|[]
name|childData
init|=
name|ZKUtil
operator|.
name|getData
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|childPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|childData
operator|==
literal|null
operator|||
name|childData
operator|.
name|length
operator|<=
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|SchemaChangeTracker
operator|.
name|SchemaAlterStatus
name|sas
init|=
operator|new
name|SchemaChangeTracker
operator|.
name|SchemaAlterStatus
argument_list|()
decl_stmt|;
name|Writables
operator|.
name|getWritable
argument_list|(
name|childData
argument_list|,
name|sas
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Schema Status data for server = "
operator|+
name|serverName
operator|+
literal|" table = "
operator|+
name|tableName
operator|+
literal|" == "
operator|+
name|sas
argument_list|)
expr_stmt|;
return|return
name|sas
return|;
block|}
comment|/**    * Update the master's alter status based on all region server's response.    * @param servers    * @param tableName    * @throws IOException    */
specifier|private
name|void
name|updateMasterAlterStatus
parameter_list|(
name|MasterAlterStatus
name|mas
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|servers
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|IOException
throws|,
name|KeeperException
block|{
for|for
control|(
name|String
name|serverName
range|:
name|servers
control|)
block|{
name|SchemaChangeTracker
operator|.
name|SchemaAlterStatus
name|sas
init|=
name|getRSSchemaAlterStatus
argument_list|(
name|tableName
argument_list|,
name|serverName
argument_list|)
decl_stmt|;
if|if
condition|(
name|sas
operator|!=
literal|null
condition|)
block|{
name|mas
operator|.
name|update
argument_list|(
name|sas
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"processTableNodeWithState:Updated Master Alter Status = "
operator|+
name|mas
operator|+
literal|" for server = "
operator|+
name|serverName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"SchemaAlterStatus is NULL for table = "
operator|+
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * If schema alter is handled for this table, then delete all the ZK nodes    * created for this table.    * @param tableName    * @throws KeeperException    */
specifier|private
name|void
name|processTableNode
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"processTableNodeWithState. TableName = "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|servers
init|=
name|ZKUtil
operator|.
name|listChildrenAndWatchThem
argument_list|(
name|watcher
argument_list|,
name|getSchemaChangeNodePathForTable
argument_list|(
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
name|MasterAlterStatus
name|mas
init|=
name|getMasterAlterStatus
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|mas
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"MasterAlterStatus is NULL. Table = "
operator|+
name|tableName
argument_list|)
expr_stmt|;
return|return;
block|}
name|updateMasterAlterStatus
argument_list|(
name|mas
argument_list|,
name|servers
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Current Alter status = "
operator|+
name|mas
argument_list|)
expr_stmt|;
name|String
name|nodePath
init|=
name|getSchemaChangeNodePathForTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|ZKUtil
operator|.
name|updateExistingNodeData
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|nodePath
argument_list|,
name|Writables
operator|.
name|getBytes
argument_list|(
name|mas
argument_list|)
argument_list|,
name|getZKNodeVersion
argument_list|(
name|nodePath
argument_list|)
argument_list|)
expr_stmt|;
name|processAlterStatus
argument_list|(
name|mas
argument_list|,
name|tableName
argument_list|,
name|servers
argument_list|)
expr_stmt|;
block|}
comment|/**    * Evaluate the master alter status and determine the current status.    * @param alterStatus    * @param tableName    * @param servers    * @param status    */
specifier|private
name|void
name|processAlterStatus
parameter_list|(
name|MasterAlterStatus
name|alterStatus
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|servers
parameter_list|)
throws|throws
name|KeeperException
block|{
if|if
condition|(
name|alterStatus
operator|.
name|getNumberOfRegionsToProcess
argument_list|()
operator|==
name|alterStatus
operator|.
name|getNumberOfRegionsProcessed
argument_list|()
condition|)
block|{
comment|// schema change completed.
name|String
name|msg
init|=
literal|"All region servers have successfully processed the "
operator|+
literal|"schema changes for table = "
operator|+
name|tableName
operator|+
literal|" . Deleting the schema change node for table = "
operator|+
name|tableName
operator|+
literal|" Region servers processed the schema change"
operator|+
literal|" request = "
operator|+
name|alterStatus
operator|.
name|getProcessedHosts
argument_list|()
operator|+
literal|" Total number of regions = "
operator|+
name|alterStatus
operator|.
name|getNumberOfRegionsToProcess
argument_list|()
operator|+
literal|" Processed regions = "
operator|+
name|alterStatus
operator|.
name|getNumberOfRegionsProcessed
argument_list|()
decl_stmt|;
name|MonitoredTask
name|status
init|=
name|TaskMonitor
operator|.
name|get
argument_list|()
operator|.
name|createStatus
argument_list|(
literal|"Checking alter schema request status for table = "
operator|+
name|tableName
argument_list|)
decl_stmt|;
name|status
operator|.
name|markComplete
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|cleanProcessedTableNode
argument_list|(
name|getSchemaChangeNodePathForTable
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|alterStatus
operator|.
name|getErrorCause
argument_list|()
operator|!=
literal|null
operator|&&
name|alterStatus
operator|.
name|getErrorCause
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|msg
init|=
literal|"Alter schema change failed "
operator|+
literal|"for table = "
operator|+
name|tableName
operator|+
literal|" Number of online regions = "
operator|+
name|alterStatus
operator|.
name|getNumberOfRegionsToProcess
argument_list|()
operator|+
literal|" processed regions count = "
operator|+
name|alterStatus
operator|.
name|getNumberOfRegionsProcessed
argument_list|()
operator|+
literal|" Original list = "
operator|+
name|alterStatus
operator|.
name|hostsToProcess
operator|+
literal|" Processed servers = "
operator|+
name|servers
operator|+
literal|" Error Cause = "
operator|+
name|alterStatus
operator|.
name|getErrorCause
argument_list|()
decl_stmt|;
name|MonitoredTask
name|status
init|=
name|TaskMonitor
operator|.
name|get
argument_list|()
operator|.
name|createStatus
argument_list|(
literal|"Checking alter schema request status for table = "
operator|+
name|tableName
argument_list|)
decl_stmt|;
comment|// we have errors.
name|LOG
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|status
operator|.
name|abort
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|msg
init|=
literal|"Not all region servers have processed the schema changes"
operator|+
literal|"for table = "
operator|+
name|tableName
operator|+
literal|" Number of online regions = "
operator|+
name|alterStatus
operator|.
name|getNumberOfRegionsToProcess
argument_list|()
operator|+
literal|" processed regions count = "
operator|+
name|alterStatus
operator|.
name|getNumberOfRegionsProcessed
argument_list|()
operator|+
literal|" Original list = "
operator|+
name|alterStatus
operator|.
name|hostsToProcess
operator|+
literal|" Processed servers = "
operator|+
name|servers
operator|+
literal|" Alter STate = "
operator|+
name|alterStatus
operator|.
name|getCurrentAlterStatus
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
comment|// status.setStatus(msg);
block|}
block|}
block|}
comment|/**    * Check whether a in-flight schema change request has expired.    * @param tableName    * @return true is the schema change request expired.    * @throws IOException    */
specifier|private
name|boolean
name|hasSchemaChangeExpiredFor
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|IOException
throws|,
name|KeeperException
block|{
name|MasterAlterStatus
name|mas
init|=
name|getMasterAlterStatus
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|long
name|createdTimeStamp
init|=
name|mas
operator|.
name|getStamp
argument_list|()
decl_stmt|;
name|long
name|duration
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|createdTimeStamp
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Created TimeStamp = "
operator|+
name|createdTimeStamp
operator|+
literal|" duration = "
operator|+
name|duration
operator|+
literal|" Table = "
operator|+
name|tableName
operator|+
literal|" Master Alter Status = "
operator|+
name|mas
argument_list|)
expr_stmt|;
return|return
operator|(
name|duration
operator|>
name|schemaChangeTimeoutMillis
operator|)
return|;
block|}
comment|/**    * Handle failed and expired schema changes. We simply delete all the    * expired/failed schema change attempts. Why we should do this ?    * 1) Keeping the failed/expired schema change nodes longer prohibits any    *    future schema changes for the table.    * 2) Any lingering expired/failed schema change requests will prohibit the    *    load balancer from running.    */
specifier|public
name|void
name|handleFailedOrExpiredSchemaChanges
parameter_list|()
block|{
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|tables
init|=
name|getCurrentTables
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|table
range|:
name|tables
control|)
block|{
name|String
name|statmsg
init|=
literal|"Cleaning failed or expired schema change requests. "
operator|+
literal|"current tables undergoing "
operator|+
literal|"schema change process = "
operator|+
name|tables
decl_stmt|;
name|MonitoredTask
name|status
init|=
name|TaskMonitor
operator|.
name|get
argument_list|()
operator|.
name|createStatus
argument_list|(
name|statmsg
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|statmsg
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasSchemaChangeExpiredFor
argument_list|(
name|table
argument_list|)
condition|)
block|{
comment|// time out.. currently, we abandon the in-flight schema change due to
comment|// time out.
comment|// Here, there are couple of options to consider. One could be to
comment|// attempt a retry of the schema change and see if it succeeds, and
comment|// another could be to simply rollback the schema change effort and
comment|// see if it succeeds.
name|String
name|msg
init|=
literal|"Schema change for table = "
operator|+
name|table
operator|+
literal|" has expired."
operator|+
literal|" Schema change for this table has been in progress for "
operator|+
operator|+
name|schemaChangeTimeoutMillis
operator|+
literal|"Deleting the node now."
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|deleteNodeRecursively
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|getSchemaChangeNodePathForTable
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|msg
init|=
literal|"Schema change request is in progress for "
operator|+
literal|" table = "
operator|+
name|table
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|status
operator|.
name|setStatus
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"IOException during handleFailedExpiredSchemaChanges."
operator|+
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|TaskMonitor
operator|.
name|get
argument_list|()
operator|.
name|createStatus
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"KeeperException during handleFailedExpiredSchemaChanges."
operator|+
name|ke
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|ke
argument_list|)
expr_stmt|;
name|TaskMonitor
operator|.
name|get
argument_list|()
operator|.
name|createStatus
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Clean the nodes of completed schema change table.    * @param path    * @throws KeeperException    */
specifier|private
name|void
name|cleanProcessedTableNode
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|KeeperException
block|{
if|if
condition|(
name|sleepTimeMillis
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Master schema change tracker sleeping for "
operator|+
name|sleepTimeMillis
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepTimeMillis
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
name|ZKUtil
operator|.
name|deleteNodeRecursively
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Deleted all nodes for path "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
comment|/**    * Exclude a RS from schema change request (if applicable)    * We will exclude a RS from schema change request processing if 1) RS    * has online regions for the table AND 2) RS went down mid-flight    * during schema change process. We don't have to deal with RS going    * down mid-flight during a schema change as the online regions from    * the dead RS will get reassigned to some other RS and the    * process of reassign inherently takes care of the schema change as well.    * @param serverName    */
specifier|public
name|void
name|excludeRegionServerForSchemaChanges
parameter_list|(
name|String
name|serverName
parameter_list|)
block|{
try|try
block|{
name|MonitoredTask
name|status
init|=
name|TaskMonitor
operator|.
name|get
argument_list|()
operator|.
name|createStatus
argument_list|(
literal|"Processing schema change exclusion for region server = "
operator|+
name|serverName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|tables
init|=
name|ZKUtil
operator|.
name|listChildrenNoWatch
argument_list|(
name|watcher
argument_list|,
name|watcher
operator|.
name|schemaZNode
argument_list|)
decl_stmt|;
if|if
condition|(
name|tables
operator|==
literal|null
operator|||
name|tables
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|msg
init|=
literal|"No schema change in progress. Skipping exclusion for "
operator|+
literal|"server = "
operator|+
name|serverName
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|status
operator|.
name|setStatus
argument_list|(
name|msg
argument_list|)
expr_stmt|;
return|return ;
block|}
for|for
control|(
name|String
name|tableName
range|:
name|tables
control|)
block|{
name|excludeRegionServer
argument_list|(
name|tableName
argument_list|,
name|serverName
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"KeeperException during excludeRegionServerForSchemaChanges"
argument_list|,
name|ke
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"IOException during excludeRegionServerForSchemaChanges"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Check whether a schema change is in progress for a given table on a    * given RS.    * @param tableName    * @param serverName    * @return TRUE is this RS is currently processing a schema change request    * for the table.    * @throws KeeperException    */
specifier|private
name|boolean
name|isSchemaChangeApplicableFor
parameter_list|(
name|String
name|tableName
parameter_list|,
name|String
name|serverName
parameter_list|)
throws|throws
name|KeeperException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|servers
init|=
name|ZKUtil
operator|.
name|listChildrenAndWatchThem
argument_list|(
name|watcher
argument_list|,
name|getSchemaChangeNodePathForTable
argument_list|(
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|(
name|servers
operator|.
name|contains
argument_list|(
name|serverName
argument_list|)
operator|)
return|;
block|}
comment|/**    * Exclude a region server for a table (if applicable) from schema change processing.    * @param tableName    * @param serverName    * @param status    * @throws KeeperException    * @throws IOException    */
specifier|private
name|void
name|excludeRegionServer
parameter_list|(
name|String
name|tableName
parameter_list|,
name|String
name|serverName
parameter_list|,
name|MonitoredTask
name|status
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|IOException
block|{
if|if
condition|(
name|isSchemaChangeApplicableFor
argument_list|(
name|tableName
argument_list|,
name|serverName
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"Excluding RS "
operator|+
name|serverName
operator|+
literal|" from schema change process"
operator|+
literal|" for table = "
operator|+
name|tableName
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|status
operator|.
name|setStatus
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|SchemaChangeTracker
operator|.
name|SchemaAlterStatus
name|sas
init|=
name|getRSSchemaAlterStatus
argument_list|(
name|tableName
argument_list|,
name|serverName
argument_list|)
decl_stmt|;
if|if
condition|(
name|sas
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"SchemaAlterStatus is NULL for table = "
operator|+
name|tableName
operator|+
literal|" server = "
operator|+
name|serverName
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Set the status to IGNORED so we can process it accordingly.
name|sas
operator|.
name|setCurrentAlterStatus
argument_list|(
name|SchemaChangeTracker
operator|.
name|SchemaAlterStatus
operator|.
name|AlterState
operator|.
name|IGNORED
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Updating the current schema status to "
operator|+
name|sas
argument_list|)
expr_stmt|;
name|String
name|nodePath
init|=
name|getSchemaChangeNodePathForTableAndServer
argument_list|(
name|tableName
argument_list|,
name|serverName
argument_list|)
decl_stmt|;
name|ZKUtil
operator|.
name|updateExistingNodeData
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|nodePath
argument_list|,
name|Writables
operator|.
name|getBytes
argument_list|(
name|sas
argument_list|)
argument_list|,
name|getZKNodeVersion
argument_list|(
name|nodePath
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Skipping exclusion of RS "
operator|+
name|serverName
operator|+
literal|" from schema change process"
operator|+
literal|" for table = "
operator|+
name|tableName
operator|+
literal|" as it did not possess any online regions for the table"
argument_list|)
expr_stmt|;
block|}
name|processTableNode
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
specifier|private
name|int
name|getZKNodeVersion
parameter_list|(
name|String
name|nodePath
parameter_list|)
throws|throws
name|KeeperException
block|{
return|return
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|nodePath
argument_list|)
return|;
block|}
comment|/**    * Create a new schema change ZK node.    * @param tableName Table name that is getting altered    * @throws KeeperException    */
specifier|public
name|void
name|createSchemaChangeNode
parameter_list|(
name|String
name|tableName
parameter_list|,
name|int
name|numberOfRegions
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|IOException
block|{
name|MonitoredTask
name|status
init|=
name|TaskMonitor
operator|.
name|get
argument_list|()
operator|.
name|createStatus
argument_list|(
literal|"Creating schema change node for table = "
operator|+
name|tableName
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating schema change node for table = "
operator|+
name|tableName
operator|+
literal|" Path = "
operator|+
name|getSchemaChangeNodePathForTable
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|doesSchemaChangeNodeExists
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Schema change node already exists for table = "
operator|+
name|tableName
operator|+
literal|" Deleting the schema change node."
argument_list|)
expr_stmt|;
comment|// If we already see a schema change node for this table we wait till the previous
comment|// alter process is complete. Ideally, we need not wait and we could simply delete
comment|// existing schema change node for this table and create new one. But then the
comment|// RS cloud will not be able to process concurrent schema updates for the same table
comment|// as they will be working with same set of online regions for this table. Meaning the
comment|// second alter change will not see any online regions (as they were being closed and
comment|// re opened by the first change) and will miss the second one.
comment|// We either handle this at the RS level using explicit locks while processing a table
comment|// or do it here. I prefer doing it here as it seems much simpler and cleaner.
while|while
condition|(
name|doesSchemaChangeNodeExists
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|int
name|rsCount
init|=
name|ZKUtil
operator|.
name|getNumberOfChildren
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|watcher
operator|.
name|rsZNode
argument_list|)
decl_stmt|;
comment|// if number of online RS = 0, we should not do anything!
if|if
condition|(
name|rsCount
operator|<=
literal|0
condition|)
block|{
name|String
name|msg
init|=
literal|"Master is not seeing any online region servers. Aborting the "
operator|+
literal|"schema change processing by region servers."
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|status
operator|.
name|abort
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Master is seeing "
operator|+
name|rsCount
operator|+
literal|" region servers online before "
operator|+
literal|"the schema change process."
argument_list|)
expr_stmt|;
name|MasterAlterStatus
name|mas
init|=
operator|new
name|MasterAlterStatus
argument_list|(
name|numberOfRegions
argument_list|,
name|getActiveRegionServersAsString
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Master creating the master alter status = "
operator|+
name|mas
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|createSetData
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|getSchemaChangeNodePathForTable
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|Writables
operator|.
name|getBytes
argument_list|(
name|mas
argument_list|)
argument_list|)
expr_stmt|;
name|status
operator|.
name|markComplete
argument_list|(
literal|"Created the ZK node for schema change. Current Alter Status = "
operator|+
name|mas
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|listChildrenAndWatchThem
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|getSchemaChangeNodePathForTable
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|getActiveRegionServersAsString
parameter_list|()
block|{
name|StringBuffer
name|sbuf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|currentRS
init|=
name|masterServices
operator|.
name|getRegionServerTracker
argument_list|()
operator|.
name|getOnlineServers
argument_list|()
decl_stmt|;
for|for
control|(
name|ServerName
name|serverName
range|:
name|currentRS
control|)
block|{
name|sbuf
operator|.
name|append
argument_list|(
name|serverName
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|sbuf
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Current list of RS to process the schema change = "
operator|+
name|sbuf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|sbuf
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Create a new schema change ZK node.    * @param tableName    * @throws KeeperException    */
specifier|public
name|boolean
name|doesSchemaChangeNodeExists
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|KeeperException
block|{
return|return
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|watcher
argument_list|,
name|getSchemaChangeNodePathForTable
argument_list|(
name|tableName
argument_list|)
argument_list|)
operator|!=
operator|-
literal|1
return|;
block|}
comment|/**    * Check whether there are any schema change requests that are in progress now.    * We simply assume that a schema change is in progress if we see a ZK schema node for    * any table. We may revisit for fine grained checks such as check the current alter status    * et al, but it is not required now.    * @return    */
specifier|public
name|boolean
name|isSchemaChangeInProgress
parameter_list|()
block|{
try|try
block|{
name|int
name|schemaChangeCount
init|=
name|ZKUtil
operator|.
name|getNumberOfChildren
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|watcher
operator|.
name|schemaZNode
argument_list|)
decl_stmt|;
return|return
name|schemaChangeCount
operator|>
literal|0
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"KeeperException while getting current schema change progress."
argument_list|)
expr_stmt|;
comment|// What do we do now??? currently reporting as false.
block|}
return|return
literal|false
return|;
block|}
comment|/**    * We get notified when a RS processes/or completed the schema change request.    * The path will be of the format /hbase/schema/<table name>    * @param path full path of the node whose children have changed    */
annotation|@
name|Override
specifier|public
name|void
name|nodeChildrenChanged
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|String
name|tableName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
name|watcher
operator|.
name|schemaZNode
argument_list|)
operator|&&
operator|!
name|path
operator|.
name|equals
argument_list|(
name|watcher
operator|.
name|schemaZNode
argument_list|)
condition|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"NodeChildrenChanged Path = "
operator|+
name|path
argument_list|)
expr_stmt|;
name|tableName
operator|=
name|path
operator|.
name|substring
argument_list|(
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|"/"
argument_list|)
operator|+
literal|1
argument_list|,
name|path
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|processTableNode
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|TaskMonitor
operator|.
name|get
argument_list|()
operator|.
name|createStatus
argument_list|(
literal|"MasterSchemaChangeTracker: ZK exception while processing "
operator|+
literal|" nodeChildrenChanged() event for table = "
operator|+
name|tableName
operator|+
literal|" Cause = "
operator|+
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"MasterSchemaChangeTracker: Unexpected zk exception getting"
operator|+
literal|" schema change nodes"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|TaskMonitor
operator|.
name|get
argument_list|()
operator|.
name|createStatus
argument_list|(
literal|"MasterSchemaChangeTracker: ZK exception while processing "
operator|+
literal|" nodeChildrenChanged() event for table = "
operator|+
name|tableName
operator|+
literal|" Cause = "
operator|+
name|ioe
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"MasterSchemaChangeTracker: Unexpected IO exception getting"
operator|+
literal|" schema change nodes"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * We get notified as and when the RS cloud updates their ZK nodes with    * progress information. The path will be of the format    * /hbase/schema/<table name>/<RS host name>    * @param path    */
annotation|@
name|Override
specifier|public
name|void
name|nodeDataChanged
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|String
name|tableName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
name|watcher
operator|.
name|schemaZNode
argument_list|)
operator|&&
operator|!
name|path
operator|.
name|equals
argument_list|(
name|watcher
operator|.
name|schemaZNode
argument_list|)
condition|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"NodeDataChanged Path = "
operator|+
name|path
argument_list|)
expr_stmt|;
name|String
index|[]
name|paths
init|=
name|path
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|tableName
operator|=
name|paths
index|[
literal|3
index|]
expr_stmt|;
name|processTableNode
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|TaskMonitor
operator|.
name|get
argument_list|()
operator|.
name|createStatus
argument_list|(
literal|"MasterSchemaChangeTracker: ZK exception while processing "
operator|+
literal|" nodeDataChanged() event for table = "
operator|+
name|tableName
operator|+
literal|" Cause = "
operator|+
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"MasterSchemaChangeTracker: Unexpected zk exception getting"
operator|+
literal|" schema change nodes"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|TaskMonitor
operator|.
name|get
argument_list|()
operator|.
name|createStatus
argument_list|(
literal|"MasterSchemaChangeTracker: IO exception while processing "
operator|+
literal|" nodeDataChanged() event for table = "
operator|+
name|tableName
operator|+
literal|" Cause = "
operator|+
name|ioe
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"MasterSchemaChangeTracker: Unexpected IO exception getting"
operator|+
literal|" schema change nodes"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|String
name|getSchemaChangeNodePathForTable
parameter_list|(
name|String
name|tableName
parameter_list|)
block|{
return|return
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|watcher
operator|.
name|schemaZNode
argument_list|,
name|tableName
argument_list|)
return|;
block|}
comment|/**    * Used only for tests. Do not use this. See TestInstantSchemaChange for more details    * on how this is getting used. This is primarily used to delay the schema complete    * processing by master so that we can test some complex scenarios such as    * master failover.    * @param sleepTimeMillis    */
specifier|public
name|void
name|setSleepTimeMillis
parameter_list|(
name|int
name|sleepTimeMillis
parameter_list|)
block|{
name|this
operator|.
name|sleepTimeMillis
operator|=
name|sleepTimeMillis
expr_stmt|;
block|}
specifier|private
name|String
name|getSchemaChangeNodePathForTableAndServer
parameter_list|(
name|String
name|tableName
parameter_list|,
name|String
name|regionServerName
parameter_list|)
block|{
return|return
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|getSchemaChangeNodePathForTable
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|regionServerName
argument_list|)
return|;
block|}
comment|/**    * Holds the current alter state for a table. Alter state includes the    * current alter status (INPROCESS, FAILURE or SUCCESS (success is not getting    * used now.), timestamp of alter request, number of hosts online at the time    * of alter request, number of online regions to process for the schema change    * request, number of processed regions and a list of region servers that    * actually processed the schema change request.    *    * Master keeps track of schema change requests using the alter status and    * periodically updates the alter status based on RS cloud processings.    */
specifier|public
specifier|static
class|class
name|MasterAlterStatus
implements|implements
name|Writable
block|{
specifier|public
enum|enum
name|AlterState
block|{
name|INPROCESS
block|,
comment|// Inprocess alter
name|SUCCESS
block|,
comment|// completed alter
name|FAILURE
comment|// failure alter
block|}
specifier|private
name|AlterState
name|currentAlterStatus
decl_stmt|;
comment|// TimeStamp
specifier|private
name|long
name|stamp
decl_stmt|;
specifier|private
name|int
name|numberOfRegionsToProcess
decl_stmt|;
specifier|private
name|StringBuffer
name|errorCause
init|=
operator|new
name|StringBuffer
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
specifier|private
name|StringBuffer
name|processedHosts
init|=
operator|new
name|StringBuffer
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
specifier|private
name|String
name|hostsToProcess
decl_stmt|;
specifier|private
name|int
name|numberOfRegionsProcessed
init|=
literal|0
decl_stmt|;
specifier|public
name|MasterAlterStatus
parameter_list|()
block|{      }
specifier|public
name|MasterAlterStatus
parameter_list|(
name|int
name|numberOfRegions
parameter_list|,
name|String
name|activeHosts
parameter_list|)
block|{
name|this
operator|.
name|numberOfRegionsToProcess
operator|=
name|numberOfRegions
expr_stmt|;
name|this
operator|.
name|stamp
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|this
operator|.
name|currentAlterStatus
operator|=
name|AlterState
operator|.
name|INPROCESS
expr_stmt|;
comment|//this.rsToProcess = activeHosts;
name|this
operator|.
name|hostsToProcess
operator|=
name|activeHosts
expr_stmt|;
block|}
specifier|public
name|AlterState
name|getCurrentAlterStatus
parameter_list|()
block|{
return|return
name|currentAlterStatus
return|;
block|}
specifier|public
name|void
name|setCurrentAlterStatus
parameter_list|(
name|AlterState
name|currentAlterStatus
parameter_list|)
block|{
name|this
operator|.
name|currentAlterStatus
operator|=
name|currentAlterStatus
expr_stmt|;
block|}
specifier|public
name|long
name|getStamp
parameter_list|()
block|{
return|return
name|stamp
return|;
block|}
specifier|public
name|void
name|setStamp
parameter_list|(
name|long
name|stamp
parameter_list|)
block|{
name|this
operator|.
name|stamp
operator|=
name|stamp
expr_stmt|;
block|}
specifier|public
name|int
name|getNumberOfRegionsToProcess
parameter_list|()
block|{
return|return
name|numberOfRegionsToProcess
return|;
block|}
specifier|public
name|void
name|setNumberOfRegionsToProcess
parameter_list|(
name|int
name|numberOfRegionsToProcess
parameter_list|)
block|{
name|this
operator|.
name|numberOfRegionsToProcess
operator|=
name|numberOfRegionsToProcess
expr_stmt|;
block|}
specifier|public
name|int
name|getNumberOfRegionsProcessed
parameter_list|()
block|{
return|return
name|numberOfRegionsProcessed
return|;
block|}
specifier|public
name|void
name|setNumberOfRegionsProcessed
parameter_list|(
name|int
name|numberOfRegionsProcessed
parameter_list|)
block|{
name|this
operator|.
name|numberOfRegionsProcessed
operator|+=
name|numberOfRegionsProcessed
expr_stmt|;
block|}
specifier|public
name|String
name|getHostsToProcess
parameter_list|()
block|{
return|return
name|hostsToProcess
return|;
block|}
specifier|public
name|void
name|setHostsToProcess
parameter_list|(
name|String
name|hostsToProcess
parameter_list|)
block|{
name|this
operator|.
name|hostsToProcess
operator|=
name|hostsToProcess
expr_stmt|;
block|}
specifier|public
name|String
name|getErrorCause
parameter_list|()
block|{
return|return
name|errorCause
operator|==
literal|null
condition|?
literal|null
else|:
name|errorCause
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|setErrorCause
parameter_list|(
name|String
name|errorCause
parameter_list|)
block|{
if|if
condition|(
name|errorCause
operator|==
literal|null
operator|||
name|errorCause
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|<=
literal|0
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|this
operator|.
name|errorCause
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|errorCause
operator|=
operator|new
name|StringBuffer
argument_list|(
name|errorCause
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|errorCause
operator|.
name|append
argument_list|(
name|errorCause
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getProcessedHosts
parameter_list|()
block|{
return|return
name|processedHosts
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|setProcessedHosts
parameter_list|(
name|String
name|processedHosts
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|processedHosts
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|processedHosts
operator|=
operator|new
name|StringBuffer
argument_list|(
name|processedHosts
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|processedHosts
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|processedHosts
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Ignore or exempt a RS from schema change processing.      * Master will tweak the number of regions to process based on the      * number of online regions on the target RS and also remove the      * RS from list of hosts to process.      * @param schemaAlterStatus      */
specifier|private
name|void
name|ignoreRSForSchemaChange
parameter_list|(
name|SchemaChangeTracker
operator|.
name|SchemaAlterStatus
name|schemaAlterStatus
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removing RS "
operator|+
name|schemaAlterStatus
operator|.
name|getHostName
argument_list|()
operator|+
literal|" from schema change process."
argument_list|)
expr_stmt|;
name|hostsToProcess
operator|=
name|hostsToProcess
operator|.
name|replaceAll
argument_list|(
name|schemaAlterStatus
operator|.
name|getHostName
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|int
name|ignoreRegionsCount
init|=
name|schemaAlterStatus
operator|.
name|getNumberOfOnlineRegions
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Current number of regions processed = "
operator|+
name|this
operator|.
name|numberOfRegionsProcessed
operator|+
literal|" deducting ignored = "
operator|+
name|ignoreRegionsCount
operator|+
literal|" final = "
operator|+
operator|(
name|this
operator|.
name|numberOfRegionsToProcess
operator|-
name|ignoreRegionsCount
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|numberOfRegionsToProcess
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|numberOfRegionsToProcess
operator|-=
name|ignoreRegionsCount
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Number of regions to process is less than zero. This is odd"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Update the master alter status for this table based on RS alter status.      * @param schemaAlterStatus      */
specifier|public
name|void
name|update
parameter_list|(
name|SchemaChangeTracker
operator|.
name|SchemaAlterStatus
name|schemaAlterStatus
parameter_list|)
block|{
name|this
operator|.
name|setProcessedHosts
argument_list|(
name|schemaAlterStatus
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|SchemaChangeTracker
operator|.
name|SchemaAlterStatus
operator|.
name|AlterState
name|rsState
init|=
name|schemaAlterStatus
operator|.
name|getCurrentAlterStatus
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|rsState
condition|)
block|{
case|case
name|FAILURE
case|:
name|LOG
operator|.
name|debug
argument_list|(
literal|"Schema update failure Status = "
operator|+
name|schemaAlterStatus
argument_list|)
expr_stmt|;
name|this
operator|.
name|setCurrentAlterStatus
argument_list|(
name|MasterAlterStatus
operator|.
name|AlterState
operator|.
name|FAILURE
argument_list|)
expr_stmt|;
name|this
operator|.
name|setNumberOfRegionsProcessed
argument_list|(
name|schemaAlterStatus
operator|.
name|getNumberOfRegionsProcessed
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|setErrorCause
argument_list|(
name|schemaAlterStatus
operator|.
name|getErrorCause
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|SUCCESS
case|:
name|LOG
operator|.
name|debug
argument_list|(
literal|"Schema update SUCCESS Status = "
operator|+
name|schemaAlterStatus
argument_list|)
expr_stmt|;
name|this
operator|.
name|setNumberOfRegionsProcessed
argument_list|(
name|schemaAlterStatus
operator|.
name|getNumberOfRegionsProcessed
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|setCurrentAlterStatus
argument_list|(
name|MasterAlterStatus
operator|.
name|AlterState
operator|.
name|SUCCESS
argument_list|)
expr_stmt|;
break|break;
case|case
name|IGNORED
case|:
name|LOG
operator|.
name|debug
argument_list|(
literal|"Schema update IGNORED Updating regions to "
operator|+
literal|"process count. Status = "
operator|+
name|schemaAlterStatus
argument_list|)
expr_stmt|;
name|ignoreRSForSchemaChange
argument_list|(
name|schemaAlterStatus
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|currentAlterStatus
operator|=
name|AlterState
operator|.
name|valueOf
argument_list|(
name|in
operator|.
name|readUTF
argument_list|()
argument_list|)
expr_stmt|;
name|stamp
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|numberOfRegionsToProcess
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|hostsToProcess
operator|=
name|Bytes
operator|.
name|toString
argument_list|(
name|Bytes
operator|.
name|readByteArray
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|processedHosts
operator|=
operator|new
name|StringBuffer
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|Bytes
operator|.
name|readByteArray
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|errorCause
operator|=
operator|new
name|StringBuffer
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|Bytes
operator|.
name|readByteArray
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeUTF
argument_list|(
name|currentAlterStatus
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|stamp
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|numberOfRegionsToProcess
argument_list|)
expr_stmt|;
name|Bytes
operator|.
name|writeByteArray
argument_list|(
name|out
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|hostsToProcess
argument_list|)
argument_list|)
expr_stmt|;
name|Bytes
operator|.
name|writeByteArray
argument_list|(
name|out
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|processedHosts
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Bytes
operator|.
name|writeByteArray
argument_list|(
name|out
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|errorCause
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|" state= "
operator|+
name|currentAlterStatus
operator|+
literal|", ts= "
operator|+
name|stamp
operator|+
literal|", number of regions to process = "
operator|+
name|numberOfRegionsToProcess
operator|+
literal|", number of regions processed = "
operator|+
name|numberOfRegionsProcessed
operator|+
literal|", hosts = "
operator|+
name|hostsToProcess
operator|+
literal|" , processed hosts = "
operator|+
name|processedHosts
operator|+
literal|" , errorCause = "
operator|+
name|errorCause
return|;
block|}
block|}
block|}
end_class

end_unit

