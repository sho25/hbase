begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2011 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|SplitLogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|SplitLogWorker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * Common methods and attributes used by {@link SplitLogManager} and  * {@link SplitLogWorker}  */
end_comment

begin_class
specifier|public
class|class
name|ZKSplitLog
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ZKSplitLog
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_TIMEOUT
init|=
literal|25000
decl_stmt|;
comment|// 25 sec
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_ZK_RETRIES
init|=
literal|3
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_RESUBMIT
init|=
literal|3
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_UNASSIGNED_TIMEOUT
init|=
operator|(
literal|3
operator|*
literal|60
operator|*
literal|1000
operator|)
decl_stmt|;
comment|//3 min
comment|/**    * Gets the full path node name for the log file being split    * @param zkw zk reference    * @param filename log file name (only the basename)    */
specifier|public
specifier|static
name|String
name|getEncodedNodeName
parameter_list|(
name|ZooKeeperWatcher
name|zkw
parameter_list|,
name|String
name|filename
parameter_list|)
block|{
return|return
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|zkw
operator|.
name|splitLogZNode
argument_list|,
name|encode
argument_list|(
name|filename
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getFileName
parameter_list|(
name|String
name|node
parameter_list|)
block|{
name|String
name|basename
init|=
name|node
operator|.
name|substring
argument_list|(
name|node
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
return|return
name|decode
argument_list|(
name|basename
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|encode
parameter_list|(
name|String
name|s
parameter_list|)
block|{
try|try
block|{
return|return
name|URLEncoder
operator|.
name|encode
argument_list|(
name|s
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"URLENCODER doesn't support UTF-8"
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|String
name|decode
parameter_list|(
name|String
name|s
parameter_list|)
block|{
try|try
block|{
return|return
name|URLDecoder
operator|.
name|decode
argument_list|(
name|s
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"URLDecoder doesn't support UTF-8"
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|String
name|getRescanNode
parameter_list|(
name|ZooKeeperWatcher
name|zkw
parameter_list|)
block|{
return|return
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|zkw
operator|.
name|splitLogZNode
argument_list|,
literal|"RESCAN"
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isRescanNode
parameter_list|(
name|ZooKeeperWatcher
name|zkw
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|String
name|prefix
init|=
name|getRescanNode
argument_list|(
name|zkw
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|length
argument_list|()
operator|<=
name|prefix
operator|.
name|length
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|prefix
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|prefix
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|!=
name|path
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isTaskPath
parameter_list|(
name|ZooKeeperWatcher
name|zkw
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|String
name|dirname
init|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|dirname
operator|.
name|equals
argument_list|(
name|zkw
operator|.
name|splitLogZNode
argument_list|)
return|;
block|}
specifier|public
specifier|static
enum|enum
name|TaskState
block|{
name|TASK_UNASSIGNED
argument_list|(
literal|"unassigned"
argument_list|)
block|,
name|TASK_OWNED
argument_list|(
literal|"owned"
argument_list|)
block|,
name|TASK_RESIGNED
argument_list|(
literal|"resigned"
argument_list|)
block|,
name|TASK_DONE
argument_list|(
literal|"done"
argument_list|)
block|,
name|TASK_ERR
argument_list|(
literal|"err"
argument_list|)
block|;
specifier|private
specifier|final
name|byte
index|[]
name|state
decl_stmt|;
specifier|private
name|TaskState
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|state
operator|=
name|s
operator|.
name|getBytes
argument_list|()
expr_stmt|;
block|}
specifier|public
name|byte
index|[]
name|get
parameter_list|(
name|String
name|serverName
parameter_list|)
block|{
return|return
operator|(
name|Bytes
operator|.
name|add
argument_list|(
name|state
argument_list|,
literal|" "
operator|.
name|getBytes
argument_list|()
argument_list|,
name|serverName
operator|.
name|getBytes
argument_list|()
argument_list|)
operator|)
return|;
block|}
specifier|public
name|String
name|getWriterName
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
name|String
name|str
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|data
argument_list|)
decl_stmt|;
return|return
name|str
operator|.
name|substring
argument_list|(
name|str
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|+
literal|1
argument_list|)
return|;
block|}
comment|/**      * @param s      * @return True if {@link #state} is a prefix of s. False otherwise.      */
specifier|public
name|boolean
name|equals
parameter_list|(
name|byte
index|[]
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|.
name|length
operator|<
name|state
operator|.
name|length
condition|)
block|{
return|return
operator|(
literal|false
operator|)
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|state
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|state
index|[
name|i
index|]
operator|!=
name|s
index|[
name|i
index|]
condition|)
block|{
return|return
operator|(
literal|false
operator|)
return|;
block|}
block|}
return|return
operator|(
literal|true
operator|)
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|byte
index|[]
name|s
parameter_list|,
name|String
name|serverName
parameter_list|)
block|{
return|return
operator|(
name|Arrays
operator|.
name|equals
argument_list|(
name|s
argument_list|,
name|get
argument_list|(
name|serverName
argument_list|)
argument_list|)
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|new
name|String
argument_list|(
name|state
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
name|Path
name|getSplitLogDir
parameter_list|(
name|Path
name|rootdir
parameter_list|,
name|String
name|tmpname
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|rootdir
argument_list|,
literal|"splitlog"
argument_list|)
argument_list|,
name|tmpname
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Path
name|stripSplitLogTempDir
parameter_list|(
name|Path
name|rootdir
parameter_list|,
name|Path
name|file
parameter_list|)
block|{
name|int
name|skipDepth
init|=
name|rootdir
operator|.
name|depth
argument_list|()
operator|+
literal|2
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|components
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|10
argument_list|)
decl_stmt|;
do|do
block|{
name|components
operator|.
name|add
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|file
operator|=
name|file
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|file
operator|.
name|depth
argument_list|()
operator|>
name|skipDepth
condition|)
do|;
name|Path
name|ret
init|=
name|rootdir
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|components
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|ret
operator|=
operator|new
name|Path
argument_list|(
name|ret
argument_list|,
name|components
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
specifier|static
name|String
name|getSplitLogDirTmpComponent
parameter_list|(
name|String
name|worker
parameter_list|,
name|String
name|file
parameter_list|)
block|{
return|return
operator|(
name|worker
operator|+
literal|"_"
operator|+
name|ZKSplitLog
operator|.
name|encode
argument_list|(
name|file
argument_list|)
operator|)
return|;
block|}
specifier|public
specifier|static
name|void
name|markCorrupted
parameter_list|(
name|Path
name|rootdir
parameter_list|,
name|String
name|tmpname
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
block|{
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|getSplitLogDir
argument_list|(
name|rootdir
argument_list|,
name|tmpname
argument_list|)
argument_list|,
literal|"corrupt"
argument_list|)
decl_stmt|;
try|try
block|{
name|fs
operator|.
name|createNewFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not flag a log file as corrupted. Failed to create "
operator|+
name|file
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|isCorrupted
parameter_list|(
name|Path
name|rootdir
parameter_list|,
name|String
name|tmpname
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|getSplitLogDir
argument_list|(
name|rootdir
argument_list|,
name|tmpname
argument_list|)
argument_list|,
literal|"corrupt"
argument_list|)
decl_stmt|;
name|boolean
name|isCorrupt
decl_stmt|;
name|isCorrupt
operator|=
name|fs
operator|.
name|exists
argument_list|(
name|file
argument_list|)
expr_stmt|;
return|return
name|isCorrupt
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isCorruptFlagFile
parameter_list|(
name|Path
name|file
parameter_list|)
block|{
return|return
name|file
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"corrupt"
argument_list|)
return|;
block|}
specifier|public
specifier|static
class|class
name|Counters
block|{
comment|//SplitLogManager counters
specifier|public
specifier|static
name|AtomicLong
name|tot_mgr_log_split_batch_start
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|AtomicLong
name|tot_mgr_log_split_batch_success
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|AtomicLong
name|tot_mgr_log_split_batch_err
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|AtomicLong
name|tot_mgr_new_unexpected_hlogs
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|AtomicLong
name|tot_mgr_log_split_start
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|AtomicLong
name|tot_mgr_log_split_success
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|AtomicLong
name|tot_mgr_log_split_err
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|AtomicLong
name|tot_mgr_node_create_queued
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|AtomicLong
name|tot_mgr_node_create_result
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|AtomicLong
name|tot_mgr_node_already_exists
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|AtomicLong
name|tot_mgr_node_create_err
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|AtomicLong
name|tot_mgr_node_create_retry
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|AtomicLong
name|tot_mgr_get_data_queued
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|AtomicLong
name|tot_mgr_get_data_result
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|AtomicLong
name|tot_mgr_get_data_err
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|AtomicLong
name|tot_mgr_get_data_retry
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|AtomicLong
name|tot_mgr_node_delete_queued
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|AtomicLong
name|tot_mgr_node_delete_result
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|AtomicLong
name|tot_mgr_node_delete_err
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|AtomicLong
name|tot_mgr_resubmit
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|AtomicLong
name|tot_mgr_resubmit_failed
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|AtomicLong
name|tot_mgr_null_data
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|AtomicLong
name|tot_mgr_orphan_task_acquired
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|AtomicLong
name|tot_mgr_unacquired_orphan_done
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|AtomicLong
name|tot_mgr_resubmit_threshold_reached
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|AtomicLong
name|tot_mgr_missing_state_in_delete
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|AtomicLong
name|tot_mgr_heartbeat
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|AtomicLong
name|tot_mgr_rescan
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|AtomicLong
name|tot_mgr_rescan_deleted
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|AtomicLong
name|tot_mgr_task_deleted
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|AtomicLong
name|tot_mgr_resubmit_unassigned
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|AtomicLong
name|tot_mgr_relist_logdir
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// SplitLogWorker counters
specifier|public
specifier|static
name|AtomicLong
name|tot_wkr_failed_to_grab_task_no_data
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|AtomicLong
name|tot_wkr_failed_to_grab_task_exception
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|AtomicLong
name|tot_wkr_failed_to_grab_task_owned
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|AtomicLong
name|tot_wkr_failed_to_grab_task_lost_race
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|AtomicLong
name|tot_wkr_task_acquired
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|AtomicLong
name|tot_wkr_task_resigned
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|AtomicLong
name|tot_wkr_task_done
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|AtomicLong
name|tot_wkr_task_err
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|AtomicLong
name|tot_wkr_task_heartbeat
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|AtomicLong
name|tot_wkr_task_acquired_rescan
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|AtomicLong
name|tot_wkr_get_data_queued
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|AtomicLong
name|tot_wkr_get_data_result
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|AtomicLong
name|tot_wkr_get_data_retry
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|AtomicLong
name|tot_wkr_preempt_task
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|AtomicLong
name|tot_wkr_task_heartbeat_failed
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|AtomicLong
name|tot_wkr_final_transistion_failed
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|void
name|resetCounters
parameter_list|()
throws|throws
name|Exception
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|cl
init|=
operator|(
operator|new
name|Counters
argument_list|()
operator|)
operator|.
name|getClass
argument_list|()
decl_stmt|;
name|Field
index|[]
name|flds
init|=
name|cl
operator|.
name|getDeclaredFields
argument_list|()
decl_stmt|;
for|for
control|(
name|Field
name|fld
range|:
name|flds
control|)
block|{
operator|(
operator|(
name|AtomicLong
operator|)
name|fld
operator|.
name|get
argument_list|(
literal|null
argument_list|)
operator|)
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

