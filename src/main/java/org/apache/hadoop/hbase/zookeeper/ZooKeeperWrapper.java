begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2009 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|HBaseEventHandler
operator|.
name|HBaseEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|WatchedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooKeeper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooDefs
operator|.
name|Ids
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooKeeper
operator|.
name|States
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import

begin_comment
comment|/**  * Wraps a ZooKeeper instance and adds HBase specific functionality.  *  * This class provides methods to:  * - read/write/delete the root region location in ZooKeeper.  * - set/check out of safe mode flag.  *   * ------------------------------------------  * The following STATIC ZNodes are created:  * ------------------------------------------  * - parentZNode     : All the HBase directories are hosted under this parent   *                     node, default = "/hbase"  * - rsZNode         : This is the directory where the RS's create ephemeral   *                     nodes. The master watches these nodes, and their expiry   *                     indicates RS death. The default location is "/hbase/rs"  *   * ------------------------------------------  * The following DYNAMIC ZNodes are created:  * ------------------------------------------  * - rootRegionZNode     : Specifies the RS hosting root.  * - masterElectionZNode : ZNode used for election of the primary master when   *                         there are secondaries. All the masters race to write   *                         their addresses into this location, the one that   *                         succeeds is the primary. Others block.  * - clusterStateZNode   : Determines if the cluster is running. Its default   *                         location is "/hbase/shutdown". It always has a value   *                         of "up". If present with the valus, cluster is up   *                         and running. If deleted, the cluster is shutting   *                         down.  * - rgnsInTransitZNode  : All the nodes under this node are names of regions   *                         in transition. The first byte of the data for each   *                         of these nodes is the event type. This is used to   *                         deserialize the rest of the data.  */
end_comment

begin_class
specifier|public
class|class
name|ZooKeeperWrapper
implements|implements
name|Watcher
block|{
specifier|protected
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ZooKeeperWrapper
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// instances of the watcher
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|ZooKeeperWrapper
argument_list|>
name|INSTANCES
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ZooKeeperWrapper
argument_list|>
argument_list|()
decl_stmt|;
comment|// lock for ensuring a singleton per instance type
specifier|private
specifier|static
name|Lock
name|createLock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
comment|// name of this instance
specifier|private
name|String
name|instanceName
decl_stmt|;
comment|// TODO: Replace this with ZooKeeper constant when ZOOKEEPER-277 is resolved.
specifier|private
specifier|static
specifier|final
name|char
name|ZNODE_PATH_SEPARATOR
init|=
literal|'/'
decl_stmt|;
specifier|private
name|String
name|quorumServers
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|int
name|sessionTimeout
decl_stmt|;
specifier|private
name|ZooKeeper
name|zooKeeper
decl_stmt|;
comment|/*    * All the HBase directories are hosted under this parent    */
specifier|public
specifier|final
name|String
name|parentZNode
decl_stmt|;
comment|/*    * Specifies the RS hosting root    */
specifier|private
specifier|final
name|String
name|rootRegionZNode
decl_stmt|;
comment|/*     * This is the directory where the RS's create ephemeral nodes. The master     * watches these nodes, and their expiry indicates RS death.     */
specifier|private
specifier|final
name|String
name|rsZNode
decl_stmt|;
comment|/*    * ZNode used for election of the primary master when there are secondaries.     */
specifier|private
specifier|final
name|String
name|masterElectionZNode
decl_stmt|;
comment|/*    * State of the cluster - if up and running or shutting down    */
specifier|public
specifier|final
name|String
name|clusterStateZNode
decl_stmt|;
comment|/*    * Regions that are in transition    */
specifier|private
specifier|final
name|String
name|rgnsInTransitZNode
decl_stmt|;
comment|/*    * List of ZNodes in the unassgined region that are already being watched    */
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|unassignedZNodesWatched
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Watcher
argument_list|>
name|listeners
init|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Watcher
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
comment|// return the singleton given the name of the instance
specifier|public
specifier|static
name|ZooKeeperWrapper
name|getInstance
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|name
operator|=
name|getZookeeperClusterKey
argument_list|(
name|conf
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
name|INSTANCES
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|// creates only one instance
specifier|public
specifier|static
name|ZooKeeperWrapper
name|createInstance
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|getInstance
argument_list|(
name|conf
argument_list|,
name|name
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
name|getInstance
argument_list|(
name|conf
argument_list|,
name|name
argument_list|)
return|;
block|}
name|ZooKeeperWrapper
operator|.
name|createLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|getInstance
argument_list|(
name|conf
argument_list|,
name|name
argument_list|)
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|String
name|fullname
init|=
name|getZookeeperClusterKey
argument_list|(
name|conf
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|ZooKeeperWrapper
name|instance
init|=
operator|new
name|ZooKeeperWrapper
argument_list|(
name|conf
argument_list|,
name|fullname
argument_list|)
decl_stmt|;
name|INSTANCES
operator|.
name|put
argument_list|(
name|fullname
argument_list|,
name|instance
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"<"
operator|+
name|name
operator|+
literal|">"
operator|+
literal|"Error creating a ZooKeeperWrapper "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|createLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|getInstance
argument_list|(
name|conf
argument_list|,
name|name
argument_list|)
return|;
block|}
comment|/**    * Create a ZooKeeperWrapper. The Zookeeper wrapper listens to all messages    * from Zookeeper, and notifies all the listeners about all the messages. Any    * component can subscribe to these messages by adding itself as a listener,    * and remove itself from being a listener.    *    * @param conf HBaseConfiguration to read settings from.    * @throws IOException If a connection error occurs.    */
specifier|private
name|ZooKeeperWrapper
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|instanceName
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|instanceName
operator|=
name|instanceName
expr_stmt|;
name|Properties
name|properties
init|=
name|HQuorumPeer
operator|.
name|makeZKProps
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|quorumServers
operator|=
name|HQuorumPeer
operator|.
name|getZKQuorumServersString
argument_list|(
name|properties
argument_list|)
expr_stmt|;
if|if
condition|(
name|quorumServers
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not read quorum servers from "
operator|+
name|HConstants
operator|.
name|ZOOKEEPER_CONFIG_NAME
argument_list|)
throw|;
block|}
name|sessionTimeout
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"zookeeper.session.timeout"
argument_list|,
literal|60
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|reconnectToZk
argument_list|()
expr_stmt|;
name|parentZNode
operator|=
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_ZNODE_PARENT
argument_list|,
name|HConstants
operator|.
name|DEFAULT_ZOOKEEPER_ZNODE_PARENT
argument_list|)
expr_stmt|;
name|String
name|rootServerZNodeName
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"zookeeper.znode.rootserver"
argument_list|,
literal|"root-region-server"
argument_list|)
decl_stmt|;
name|String
name|rsZNodeName
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"zookeeper.znode.rs"
argument_list|,
literal|"rs"
argument_list|)
decl_stmt|;
name|String
name|masterAddressZNodeName
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"zookeeper.znode.master"
argument_list|,
literal|"master"
argument_list|)
decl_stmt|;
name|String
name|stateZNodeName
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"zookeeper.znode.state"
argument_list|,
literal|"shutdown"
argument_list|)
decl_stmt|;
name|String
name|regionsInTransitZNodeName
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"zookeeper.znode.regionInTransition"
argument_list|,
literal|"UNASSIGNED"
argument_list|)
decl_stmt|;
name|rootRegionZNode
operator|=
name|getZNode
argument_list|(
name|parentZNode
argument_list|,
name|rootServerZNodeName
argument_list|)
expr_stmt|;
name|rsZNode
operator|=
name|getZNode
argument_list|(
name|parentZNode
argument_list|,
name|rsZNodeName
argument_list|)
expr_stmt|;
name|rgnsInTransitZNode
operator|=
name|getZNode
argument_list|(
name|parentZNode
argument_list|,
name|regionsInTransitZNodeName
argument_list|)
expr_stmt|;
name|masterElectionZNode
operator|=
name|getZNode
argument_list|(
name|parentZNode
argument_list|,
name|masterAddressZNodeName
argument_list|)
expr_stmt|;
name|clusterStateZNode
operator|=
name|getZNode
argument_list|(
name|parentZNode
argument_list|,
name|stateZNodeName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|reconnectToZk
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Reconnecting to zookeeper"
argument_list|)
expr_stmt|;
if|if
condition|(
name|zooKeeper
operator|!=
literal|null
condition|)
block|{
name|zooKeeper
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"Closed existing zookeeper client"
argument_list|)
expr_stmt|;
block|}
name|zooKeeper
operator|=
operator|new
name|ZooKeeper
argument_list|(
name|quorumServers
argument_list|,
name|sessionTimeout
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"Connected to zookeeper again"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"Failed to create ZooKeeper object: "
operator|+
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"Error closing ZK connection: "
operator|+
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|synchronized
name|void
name|registerListener
parameter_list|(
name|Watcher
name|watcher
parameter_list|)
block|{
name|listeners
operator|.
name|add
argument_list|(
name|watcher
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|unregisterListener
parameter_list|(
name|Watcher
name|watcher
parameter_list|)
block|{
name|listeners
operator|.
name|remove
argument_list|(
name|watcher
argument_list|)
expr_stmt|;
block|}
comment|/**    * This is the primary ZK watcher    * @see org.apache.zookeeper.Watcher#process(org.apache.zookeeper.WatchedEvent)    */
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|process
parameter_list|(
name|WatchedEvent
name|event
parameter_list|)
block|{
for|for
control|(
name|Watcher
name|w
range|:
name|listeners
control|)
block|{
try|try
block|{
name|w
operator|.
name|process
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"ZK updates listener threw an exception in process()"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** @return String dump of everything in ZooKeeper. */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"ConstantConditions"
block|}
argument_list|)
specifier|public
name|String
name|dump
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\nHBase tree in ZooKeeper is rooted at "
argument_list|)
operator|.
name|append
argument_list|(
name|parentZNode
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n  Cluster up? "
argument_list|)
operator|.
name|append
argument_list|(
name|exists
argument_list|(
name|clusterStateZNode
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n  Master address: "
argument_list|)
operator|.
name|append
argument_list|(
name|readMasterAddress
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n  Region server holding ROOT: "
argument_list|)
operator|.
name|append
argument_list|(
name|readRootRegionLocation
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n  Region servers:"
argument_list|)
expr_stmt|;
for|for
control|(
name|HServerAddress
name|address
range|:
name|scanRSDirectory
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n    - "
argument_list|)
operator|.
name|append
argument_list|(
name|address
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\n  Quorum Server Statistics:"
argument_list|)
expr_stmt|;
name|String
index|[]
name|servers
init|=
name|quorumServers
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|server
range|:
name|servers
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n    - "
argument_list|)
operator|.
name|append
argument_list|(
name|server
argument_list|)
expr_stmt|;
try|try
block|{
name|String
index|[]
name|stat
init|=
name|getServerStats
argument_list|(
name|server
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|stat
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n        "
argument_list|)
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n        ERROR: "
argument_list|)
operator|.
name|append
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Gets the statistics from the given server. Uses a 1 minute timeout.    *    * @param server  The server to get the statistics from.    * @return The array of response strings.    * @throws IOException When the socket communication fails.    */
specifier|public
name|String
index|[]
name|getServerStats
parameter_list|(
name|String
name|server
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getServerStats
argument_list|(
name|server
argument_list|,
literal|60
operator|*
literal|1000
argument_list|)
return|;
block|}
comment|/**    * Gets the statistics from the given server.    *    * @param server  The server to get the statistics from.    * @param timeout  The socket timeout to use.    * @return The array of response strings.    * @throws IOException When the socket communication fails.    */
specifier|public
name|String
index|[]
name|getServerStats
parameter_list|(
name|String
name|server
parameter_list|,
name|int
name|timeout
parameter_list|)
throws|throws
name|IOException
block|{
name|String
index|[]
name|sp
init|=
name|server
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|Socket
name|socket
init|=
operator|new
name|Socket
argument_list|(
name|sp
index|[
literal|0
index|]
argument_list|,
name|sp
operator|.
name|length
operator|>
literal|1
condition|?
name|Integer
operator|.
name|parseInt
argument_list|(
name|sp
index|[
literal|1
index|]
argument_list|)
else|:
literal|2181
argument_list|)
decl_stmt|;
name|socket
operator|.
name|setSoTimeout
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
name|socket
operator|.
name|getOutputStream
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|BufferedReader
name|in
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|socket
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"stat"
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|res
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|String
name|line
init|=
name|in
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|line
operator|!=
literal|null
condition|)
name|res
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
else|else
break|break;
block|}
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|res
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|res
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|exists
parameter_list|(
name|String
name|znode
parameter_list|,
name|boolean
name|watch
parameter_list|)
block|{
try|try
block|{
return|return
name|zooKeeper
operator|.
name|exists
argument_list|(
name|getZNode
argument_list|(
name|parentZNode
argument_list|,
name|znode
argument_list|)
argument_list|,
name|watch
condition|?
name|this
else|:
literal|null
argument_list|)
operator|!=
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|SessionExpiredException
name|e
parameter_list|)
block|{
comment|// if the session has expired try to reconnect to ZK, then perform query
try|try
block|{
comment|// TODO: ZK-REFACTOR: We should not reconnect - we should just quit and restart.
name|reconnectToZk
argument_list|()
expr_stmt|;
return|return
name|zooKeeper
operator|.
name|exists
argument_list|(
name|getZNode
argument_list|(
name|parentZNode
argument_list|,
name|znode
argument_list|)
argument_list|,
name|watch
condition|?
name|this
else|:
literal|null
argument_list|)
operator|!=
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error reconnecting to zookeeper"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error reconnecting to zookeeper"
argument_list|,
name|e1
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error reading after reconnecting to zookeeper"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error reading after reconnecting to zookeeper"
argument_list|,
name|e1
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error reading after reconnecting to zookeeper"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error reading after reconnecting to zookeeper"
argument_list|,
name|e1
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/** @return ZooKeeper used by this wrapper. */
specifier|public
name|ZooKeeper
name|getZooKeeper
parameter_list|()
block|{
return|return
name|zooKeeper
return|;
block|}
comment|/**    * This is for testing KeeperException.SessionExpiredException.    * See HBASE-1232.    * @return long session ID of this ZooKeeper session.    */
specifier|public
name|long
name|getSessionID
parameter_list|()
block|{
return|return
name|zooKeeper
operator|.
name|getSessionId
argument_list|()
return|;
block|}
comment|/**    * This is for testing KeeperException.SessionExpiredException.    * See HBASE-1232.    * @return byte[] password of this ZooKeeper session.    */
specifier|public
name|byte
index|[]
name|getSessionPassword
parameter_list|()
block|{
return|return
name|zooKeeper
operator|.
name|getSessionPasswd
argument_list|()
return|;
block|}
comment|/** @return host:port list of quorum servers. */
specifier|public
name|String
name|getQuorumServers
parameter_list|()
block|{
return|return
name|quorumServers
return|;
block|}
comment|/** @return true if currently connected to ZooKeeper, false otherwise. */
specifier|public
name|boolean
name|isConnected
parameter_list|()
block|{
return|return
name|zooKeeper
operator|.
name|getState
argument_list|()
operator|==
name|States
operator|.
name|CONNECTED
return|;
block|}
comment|/**    * Read location of server storing root region.    * @return HServerAddress pointing to server serving root region or null if    *         there was a problem reading the ZNode.    */
specifier|public
name|HServerAddress
name|readRootRegionLocation
parameter_list|()
block|{
return|return
name|readAddress
argument_list|(
name|rootRegionZNode
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Read address of master server.    * @return HServerAddress of master server.    * @throws IOException if there's a problem reading the ZNode.    */
specifier|public
name|HServerAddress
name|readMasterAddressOrThrow
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|readAddressOrThrow
argument_list|(
name|masterElectionZNode
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Read master address and set a watch on it.    * @param watcher Watcher to set on master address ZNode if not null.    * @return HServerAddress of master or null if there was a problem reading the    *         ZNode. The watcher is set only if the result is not null.    */
specifier|public
name|HServerAddress
name|readMasterAddress
parameter_list|(
name|Watcher
name|watcher
parameter_list|)
block|{
return|return
name|readAddress
argument_list|(
name|masterElectionZNode
argument_list|,
name|watcher
argument_list|)
return|;
block|}
comment|/**    * Watch the state of the cluster, up or down    * @param watcher Watcher to set on cluster state node    */
specifier|public
name|void
name|setClusterStateWatch
parameter_list|()
block|{
try|try
block|{
name|zooKeeper
operator|.
name|exists
argument_list|(
name|clusterStateZNode
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"Failed to check on ZNode "
operator|+
name|clusterStateZNode
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"Failed to check on ZNode "
operator|+
name|clusterStateZNode
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Set the cluster state, up or down    * @param up True to write the node, false to delete it    * @return true if it worked, else it's false    */
specifier|public
name|boolean
name|setClusterState
parameter_list|(
name|boolean
name|up
parameter_list|)
block|{
if|if
condition|(
operator|!
name|ensureParentExists
argument_list|(
name|clusterStateZNode
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
if|if
condition|(
name|up
condition|)
block|{
name|byte
index|[]
name|data
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"up"
argument_list|)
decl_stmt|;
name|zooKeeper
operator|.
name|create
argument_list|(
name|clusterStateZNode
argument_list|,
name|data
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"State node wrote in ZooKeeper"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|zooKeeper
operator|.
name|delete
argument_list|(
name|clusterStateZNode
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"State node deleted in ZooKeeper"
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"Failed to set state node in ZooKeeper"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|code
argument_list|()
operator|==
name|KeeperException
operator|.
name|Code
operator|.
name|NODEEXISTS
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"State node exists."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"Failed to set state node in ZooKeeper"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Set a watcher on the master address ZNode. The watcher will be set unless    * an exception occurs with ZooKeeper.    * @param watcher Watcher to set on master address ZNode.    * @return true if watcher was set, false otherwise.    */
specifier|public
name|boolean
name|watchMasterAddress
parameter_list|(
name|Watcher
name|watcher
parameter_list|)
block|{
try|try
block|{
name|zooKeeper
operator|.
name|exists
argument_list|(
name|masterElectionZNode
argument_list|,
name|watcher
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"Failed to set watcher on ZNode "
operator|+
name|masterElectionZNode
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"Failed to set watcher on ZNode "
operator|+
name|masterElectionZNode
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"Set watcher on master address ZNode "
operator|+
name|masterElectionZNode
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
name|HServerAddress
name|readAddress
parameter_list|(
name|String
name|znode
parameter_list|,
name|Watcher
name|watcher
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"Trying to read "
operator|+
name|znode
argument_list|)
expr_stmt|;
return|return
name|readAddressOrThrow
argument_list|(
name|znode
argument_list|,
name|watcher
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"Failed to read "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|HServerAddress
name|readAddressOrThrow
parameter_list|(
name|String
name|znode
parameter_list|,
name|Watcher
name|watcher
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|data
decl_stmt|;
try|try
block|{
name|data
operator|=
name|zooKeeper
operator|.
name|getData
argument_list|(
name|znode
argument_list|,
name|watcher
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|String
name|addressString
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"Read ZNode "
operator|+
name|znode
operator|+
literal|" got "
operator|+
name|addressString
argument_list|)
expr_stmt|;
return|return
operator|new
name|HServerAddress
argument_list|(
name|addressString
argument_list|)
return|;
block|}
comment|/**    * Make sure this znode exists by creating it if it's missing    * @param znode full path to znode    * @return true if it works    */
specifier|public
name|boolean
name|ensureExists
parameter_list|(
specifier|final
name|String
name|znode
parameter_list|)
block|{
try|try
block|{
name|Stat
name|stat
init|=
name|zooKeeper
operator|.
name|exists
argument_list|(
name|znode
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|stat
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
name|zooKeeper
operator|.
name|create
argument_list|(
name|znode
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"Created ZNode "
operator|+
name|znode
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NodeExistsException
name|e
parameter_list|)
block|{
return|return
literal|true
return|;
comment|// ok, move on.
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|e
parameter_list|)
block|{
return|return
name|ensureParentExists
argument_list|(
name|znode
argument_list|)
operator|&&
name|ensureExists
argument_list|(
name|znode
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"Failed to create "
operator|+
name|znode
operator|+
literal|" -- check quorum servers, currently="
operator|+
name|this
operator|.
name|quorumServers
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"Failed to create "
operator|+
name|znode
operator|+
literal|" -- check quorum servers, currently="
operator|+
name|this
operator|.
name|quorumServers
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|ensureParentExists
parameter_list|(
specifier|final
name|String
name|znode
parameter_list|)
block|{
name|int
name|index
init|=
name|znode
operator|.
name|lastIndexOf
argument_list|(
name|ZNODE_PATH_SEPARATOR
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<=
literal|0
condition|)
block|{
comment|// Parent is root, which always exists.
return|return
literal|true
return|;
block|}
return|return
name|ensureExists
argument_list|(
name|znode
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Delete ZNode containing root region location.    * @return true if operation succeeded, false otherwise.    */
specifier|public
name|boolean
name|deleteRootRegionLocation
parameter_list|()
block|{
if|if
condition|(
operator|!
name|ensureParentExists
argument_list|(
name|rootRegionZNode
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
name|deleteZNode
argument_list|(
name|rootRegionZNode
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|e
parameter_list|)
block|{
return|return
literal|true
return|;
comment|// ok, move on.
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"Failed to delete "
operator|+
name|rootRegionZNode
operator|+
literal|": "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"Failed to delete "
operator|+
name|rootRegionZNode
operator|+
literal|": "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Unrecursive deletion of specified znode    * @param znode    * @throws KeeperException    * @throws InterruptedException    */
specifier|public
name|void
name|deleteZNode
parameter_list|(
name|String
name|znode
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|deleteZNode
argument_list|(
name|znode
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Optionnally recursive deletion of specified znode    * @param znode    * @param recursive    * @throws KeeperException    * @throws InterruptedException    */
specifier|public
name|void
name|deleteZNode
parameter_list|(
name|String
name|znode
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|recursive
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"deleteZNode get children for "
operator|+
name|znode
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|znodes
init|=
name|this
operator|.
name|zooKeeper
operator|.
name|getChildren
argument_list|(
name|znode
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|znodes
operator|!=
literal|null
operator|&&
name|znodes
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|String
name|child
range|:
name|znodes
control|)
block|{
name|String
name|childFullPath
init|=
name|getZNode
argument_list|(
name|znode
argument_list|,
name|child
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"deleteZNode recursive call "
operator|+
name|childFullPath
argument_list|)
expr_stmt|;
name|this
operator|.
name|deleteZNode
argument_list|(
name|childFullPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|this
operator|.
name|zooKeeper
operator|.
name|delete
argument_list|(
name|znode
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"Deleted ZNode "
operator|+
name|znode
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|createRootRegionLocation
parameter_list|(
name|String
name|address
parameter_list|)
block|{
name|byte
index|[]
name|data
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|address
argument_list|)
decl_stmt|;
try|try
block|{
name|zooKeeper
operator|.
name|create
argument_list|(
name|rootRegionZNode
argument_list|,
name|data
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"Created ZNode "
operator|+
name|rootRegionZNode
operator|+
literal|" with data "
operator|+
name|address
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"Failed to create root region in ZooKeeper: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"Failed to create root region in ZooKeeper: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|updateRootRegionLocation
parameter_list|(
name|String
name|address
parameter_list|)
block|{
name|byte
index|[]
name|data
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|address
argument_list|)
decl_stmt|;
try|try
block|{
name|zooKeeper
operator|.
name|setData
argument_list|(
name|rootRegionZNode
argument_list|,
name|data
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"SetData of ZNode "
operator|+
name|rootRegionZNode
operator|+
literal|" with "
operator|+
name|address
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"Failed to set root region location in ZooKeeper: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"Failed to set root region location in ZooKeeper: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Write root region location to ZooKeeper. If address is null, delete ZNode.    * containing root region location.    * @param address HServerAddress to write to ZK.    * @return true if operation succeeded, false otherwise.    */
specifier|public
name|boolean
name|writeRootRegionLocation
parameter_list|(
name|HServerAddress
name|address
parameter_list|)
block|{
if|if
condition|(
name|address
operator|==
literal|null
condition|)
block|{
return|return
name|deleteRootRegionLocation
argument_list|()
return|;
block|}
if|if
condition|(
operator|!
name|ensureParentExists
argument_list|(
name|rootRegionZNode
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|addressString
init|=
name|address
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|checkExistenceOf
argument_list|(
name|rootRegionZNode
argument_list|)
condition|)
block|{
return|return
name|updateRootRegionLocation
argument_list|(
name|addressString
argument_list|)
return|;
block|}
return|return
name|createRootRegionLocation
argument_list|(
name|addressString
argument_list|)
return|;
block|}
comment|/**    * Write address of master to ZooKeeper.    * @param address HServerAddress of master.    * @return true if operation succeeded, false otherwise.    */
specifier|public
name|boolean
name|writeMasterAddress
parameter_list|(
specifier|final
name|HServerAddress
name|address
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"Writing master address "
operator|+
name|address
operator|.
name|toString
argument_list|()
operator|+
literal|" to znode "
operator|+
name|masterElectionZNode
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ensureParentExists
argument_list|(
name|masterElectionZNode
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"Znode exists : "
operator|+
name|masterElectionZNode
argument_list|)
expr_stmt|;
name|String
name|addressStr
init|=
name|address
operator|.
name|toString
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|addressStr
argument_list|)
decl_stmt|;
try|try
block|{
name|zooKeeper
operator|.
name|create
argument_list|(
name|masterElectionZNode
argument_list|,
name|data
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|EPHEMERAL
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"Wrote master address "
operator|+
name|address
operator|+
literal|" to ZooKeeper"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"Failed to write master address "
operator|+
name|address
operator|+
literal|" to ZooKeeper"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"Failed to write master address "
operator|+
name|address
operator|+
literal|" to ZooKeeper"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Write in ZK this RS startCode and address.    * Ensures that the full path exists.    * @param info The RS info    * @return true if the location was written, false if it failed    */
specifier|public
name|boolean
name|writeRSLocation
parameter_list|(
name|HServerInfo
name|info
parameter_list|)
block|{
name|ensureExists
argument_list|(
name|rsZNode
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|info
operator|.
name|getServerAddress
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|znode
init|=
name|joinPath
argument_list|(
name|rsZNode
argument_list|,
name|info
operator|.
name|getServerName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|zooKeeper
operator|.
name|create
argument_list|(
name|znode
argument_list|,
name|data
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|EPHEMERAL
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"Created ZNode "
operator|+
name|znode
operator|+
literal|" with data "
operator|+
name|info
operator|.
name|getServerAddress
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"Failed to create "
operator|+
name|znode
operator|+
literal|" znode in ZooKeeper: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"Failed to create "
operator|+
name|znode
operator|+
literal|" znode in ZooKeeper: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Update the RS address and set a watcher on the znode    * @param info The RS info    * @param watcher The watcher to put on the znode    * @return true if the update is done, false if it failed    */
specifier|public
name|boolean
name|updateRSLocationGetWatch
parameter_list|(
name|HServerInfo
name|info
parameter_list|,
name|Watcher
name|watcher
parameter_list|)
block|{
name|byte
index|[]
name|data
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|info
operator|.
name|getServerAddress
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|znode
init|=
name|rsZNode
operator|+
name|ZNODE_PATH_SEPARATOR
operator|+
name|info
operator|.
name|getServerName
argument_list|()
decl_stmt|;
try|try
block|{
name|zooKeeper
operator|.
name|setData
argument_list|(
name|znode
argument_list|,
name|data
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"Updated ZNode "
operator|+
name|znode
operator|+
literal|" with data "
operator|+
name|info
operator|.
name|getServerAddress
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|zooKeeper
operator|.
name|getData
argument_list|(
name|znode
argument_list|,
name|watcher
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"Failed to update "
operator|+
name|znode
operator|+
literal|" znode in ZooKeeper: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"Failed to update "
operator|+
name|znode
operator|+
literal|" znode in ZooKeeper: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Scans the regions servers directory    * @return A list of server addresses    */
specifier|public
name|List
argument_list|<
name|HServerAddress
argument_list|>
name|scanRSDirectory
parameter_list|()
block|{
return|return
name|scanAddressDirectory
argument_list|(
name|rsZNode
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Scans the regions servers directory and sets a watch on each znode    * @param watcher a watch to use for each znode    * @return A list of server addresses    */
specifier|public
name|List
argument_list|<
name|HServerAddress
argument_list|>
name|scanRSDirectory
parameter_list|(
name|Watcher
name|watcher
parameter_list|)
block|{
return|return
name|scanAddressDirectory
argument_list|(
name|rsZNode
argument_list|,
name|watcher
argument_list|)
return|;
block|}
comment|/**    * Method used to make sure the region server directory is empty.    *    */
specifier|public
name|void
name|clearRSDirectory
parameter_list|()
block|{
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|nodes
init|=
name|zooKeeper
operator|.
name|getChildren
argument_list|(
name|rsZNode
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|node
range|:
name|nodes
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"Deleting node: "
operator|+
name|node
argument_list|)
expr_stmt|;
name|zooKeeper
operator|.
name|delete
argument_list|(
name|joinPath
argument_list|(
name|this
operator|.
name|rsZNode
argument_list|,
name|node
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"Failed to delete "
operator|+
name|rsZNode
operator|+
literal|" znodes in ZooKeeper: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"Failed to delete "
operator|+
name|rsZNode
operator|+
literal|" znodes in ZooKeeper: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @return the number of region server znodes in the RS directory    */
specifier|public
name|int
name|getRSDirectoryCount
parameter_list|()
block|{
name|Stat
name|stat
init|=
literal|null
decl_stmt|;
try|try
block|{
name|stat
operator|=
name|zooKeeper
operator|.
name|exists
argument_list|(
name|rsZNode
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Problem getting stats for "
operator|+
name|rsZNode
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Problem getting stats for "
operator|+
name|rsZNode
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|stat
operator|!=
literal|null
operator|)
condition|?
name|stat
operator|.
name|getNumChildren
argument_list|()
else|:
literal|0
return|;
block|}
specifier|private
name|boolean
name|checkExistenceOf
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|Stat
name|stat
init|=
literal|null
decl_stmt|;
try|try
block|{
name|stat
operator|=
name|zooKeeper
operator|.
name|exists
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"checking existence of "
operator|+
name|path
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"checking existence of "
operator|+
name|path
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|stat
operator|!=
literal|null
return|;
block|}
comment|/**    * Close this ZooKeeper session.    */
specifier|public
name|void
name|close
parameter_list|()
block|{
try|try
block|{
name|zooKeeper
operator|.
name|close
argument_list|()
expr_stmt|;
name|INSTANCES
operator|.
name|remove
argument_list|(
name|instanceName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"Closed connection with ZooKeeper; "
operator|+
name|this
operator|.
name|rootRegionZNode
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"Failed to close connection with ZooKeeper"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getZNode
parameter_list|(
name|String
name|parentZNode
parameter_list|,
name|String
name|znodeName
parameter_list|)
block|{
return|return
name|znodeName
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
name|ZNODE_PATH_SEPARATOR
condition|?
name|znodeName
else|:
name|joinPath
argument_list|(
name|parentZNode
argument_list|,
name|znodeName
argument_list|)
return|;
block|}
specifier|public
name|String
name|getZNodePathForHBase
parameter_list|(
name|String
name|znodeName
parameter_list|)
block|{
return|return
name|getZNode
argument_list|(
name|parentZNode
argument_list|,
name|znodeName
argument_list|)
return|;
block|}
specifier|private
name|String
name|joinPath
parameter_list|(
name|String
name|parent
parameter_list|,
name|String
name|child
parameter_list|)
block|{
return|return
name|parent
operator|+
name|ZNODE_PATH_SEPARATOR
operator|+
name|child
return|;
block|}
comment|/**    * Get the path of the masterElectionZNode    * @return the path to masterElectionZNode    */
specifier|public
name|String
name|getMasterElectionZNode
parameter_list|()
block|{
return|return
name|masterElectionZNode
return|;
block|}
comment|/**    * Get the path of the parent ZNode    * @return path of that znode    */
specifier|public
name|String
name|getParentZNode
parameter_list|()
block|{
return|return
name|parentZNode
return|;
block|}
comment|/**    * Scan a directory of address data.    * @param znode The parent node    * @param watcher The watcher to put on the found znodes, if not null    * @return The directory contents    */
specifier|public
name|List
argument_list|<
name|HServerAddress
argument_list|>
name|scanAddressDirectory
parameter_list|(
name|String
name|znode
parameter_list|,
name|Watcher
name|watcher
parameter_list|)
block|{
name|List
argument_list|<
name|HServerAddress
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|HServerAddress
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|nodes
init|=
name|this
operator|.
name|listZnodes
argument_list|(
name|znode
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodes
operator|==
literal|null
condition|)
block|{
return|return
name|list
return|;
block|}
for|for
control|(
name|String
name|node
range|:
name|nodes
control|)
block|{
name|String
name|path
init|=
name|joinPath
argument_list|(
name|znode
argument_list|,
name|node
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|readAddress
argument_list|(
name|path
argument_list|,
name|watcher
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
comment|/**    * List all znodes in the specified path    * @param znode path to list    * @return a list of all the znodes    */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listZnodes
parameter_list|(
name|String
name|znode
parameter_list|)
block|{
return|return
name|listZnodes
argument_list|(
name|znode
argument_list|,
name|this
argument_list|)
return|;
block|}
comment|/**    * List all znodes in the specified path and set a watcher on each    * @param znode path to list    * @param watcher watch to set, can be null    * @return a list of all the znodes    */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listZnodes
parameter_list|(
name|String
name|znode
parameter_list|,
name|Watcher
name|watcher
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|nodes
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|watcher
operator|==
literal|null
condition|)
block|{
name|watcher
operator|=
name|this
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|checkExistenceOf
argument_list|(
name|znode
argument_list|)
condition|)
block|{
name|nodes
operator|=
name|zooKeeper
operator|.
name|getChildren
argument_list|(
name|znode
argument_list|,
name|this
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|node
range|:
name|nodes
control|)
block|{
name|getDataAndWatch
argument_list|(
name|znode
argument_list|,
name|node
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"Failed to read "
operator|+
name|znode
operator|+
literal|" znode in ZooKeeper: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"Failed to read "
operator|+
name|znode
operator|+
literal|" znode in ZooKeeper: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|nodes
return|;
block|}
specifier|public
name|byte
index|[]
name|getData
parameter_list|(
name|String
name|parentZNode
parameter_list|,
name|String
name|znode
parameter_list|)
block|{
return|return
name|getDataAndWatch
argument_list|(
name|parentZNode
argument_list|,
name|znode
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|byte
index|[]
name|getDataAndWatch
parameter_list|(
name|String
name|parentZNode
parameter_list|,
name|String
name|znode
parameter_list|,
name|Watcher
name|watcher
parameter_list|)
block|{
name|byte
index|[]
name|data
init|=
literal|null
decl_stmt|;
try|try
block|{
name|String
name|path
init|=
name|joinPath
argument_list|(
name|parentZNode
argument_list|,
name|znode
argument_list|)
decl_stmt|;
comment|// TODO: ZK-REFACTOR: remove existance check?
if|if
condition|(
name|checkExistenceOf
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|data
operator|=
name|zooKeeper
operator|.
name|getData
argument_list|(
name|path
argument_list|,
name|watcher
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"Failed to read "
operator|+
name|znode
operator|+
literal|" znode in ZooKeeper: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"Failed to read "
operator|+
name|znode
operator|+
literal|" znode in ZooKeeper: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|data
return|;
block|}
comment|/**    * Write a znode and fail if it already exists    * @param parentPath parent path to the new znode    * @param child name of the znode    * @param strData data to insert    * @throws InterruptedException    * @throws KeeperException    */
specifier|public
name|void
name|writeZNode
parameter_list|(
name|String
name|parentPath
parameter_list|,
name|String
name|child
parameter_list|,
name|String
name|strData
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|KeeperException
block|{
name|writeZNode
argument_list|(
name|parentPath
argument_list|,
name|child
argument_list|,
name|strData
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Write (and optionally over-write) a znode    * @param parentPath parent path to the new znode    * @param child name of the znode    * @param strData data to insert    * @param failOnWrite true if an exception should be returned if the znode    * already exists, false if it should be overwritten    * @throws InterruptedException    * @throws KeeperException    */
specifier|public
name|void
name|writeZNode
parameter_list|(
name|String
name|parentPath
parameter_list|,
name|String
name|child
parameter_list|,
name|String
name|strData
parameter_list|,
name|boolean
name|failOnWrite
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|KeeperException
block|{
name|String
name|path
init|=
name|joinPath
argument_list|(
name|parentPath
argument_list|,
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ensureExists
argument_list|(
name|parentPath
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"unable to ensure parent exists: "
operator|+
name|parentPath
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|data
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|strData
argument_list|)
decl_stmt|;
name|Stat
name|stat
init|=
name|this
operator|.
name|zooKeeper
operator|.
name|exists
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|failOnWrite
operator|||
name|stat
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|zooKeeper
operator|.
name|create
argument_list|(
name|path
argument_list|,
name|data
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"Created "
operator|+
name|path
operator|+
literal|" with data "
operator|+
name|strData
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|zooKeeper
operator|.
name|setData
argument_list|(
name|path
argument_list|,
name|data
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"Updated "
operator|+
name|path
operator|+
literal|" with data "
operator|+
name|strData
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get the key to the ZK ensemble for this configuration without    * adding a name at the end    * @param conf Configuration to use to build the key    * @return ensemble key without a name    */
specifier|public
specifier|static
name|String
name|getZookeeperClusterKey
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|getZookeeperClusterKey
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Get the key to the ZK ensemble for this configuration and append    * a name at the end    * @param conf Configuration to use to build the key    * @param name Name that should be appended at the end if not empty or null    * @return ensemble key with a name (if any)    */
specifier|public
specifier|static
name|String
name|getZookeeperClusterKey
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|String
name|quorum
init|=
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_QUORUM
operator|.
name|replaceAll
argument_list|(
literal|"[\\t\\n\\x0B\\f\\r]"
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
name|quorum
argument_list|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_ZNODE_PARENT
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Get the znode that has all the regions in transition.    * @return path to znode    */
specifier|public
name|String
name|getRegionInTransitionZNode
parameter_list|()
block|{
return|return
name|this
operator|.
name|rgnsInTransitZNode
return|;
block|}
comment|/**    * Get the path of this region server's znode    * @return path to znode    */
specifier|public
name|String
name|getRsZNode
parameter_list|()
block|{
return|return
name|this
operator|.
name|rsZNode
return|;
block|}
specifier|public
name|void
name|deleteZNode
parameter_list|(
name|String
name|zNodeName
parameter_list|,
name|int
name|version
parameter_list|)
block|{
name|String
name|fullyQualifiedZNodeName
init|=
name|getZNode
argument_list|(
name|parentZNode
argument_list|,
name|zNodeName
argument_list|)
decl_stmt|;
try|try
block|{
name|zooKeeper
operator|.
name|delete
argument_list|(
name|fullyQualifiedZNodeName
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"Failed to delete ZNode "
operator|+
name|fullyQualifiedZNodeName
operator|+
literal|" in ZooKeeper"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"Failed to delete ZNode "
operator|+
name|fullyQualifiedZNodeName
operator|+
literal|" in ZooKeeper"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|createZNodeIfNotExists
parameter_list|(
name|String
name|zNodeName
parameter_list|)
block|{
return|return
name|createZNodeIfNotExists
argument_list|(
name|zNodeName
argument_list|,
literal|null
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
name|void
name|watchZNode
parameter_list|(
name|String
name|zNodeName
parameter_list|)
block|{
name|String
name|fullyQualifiedZNodeName
init|=
name|getZNode
argument_list|(
name|parentZNode
argument_list|,
name|zNodeName
argument_list|)
decl_stmt|;
try|try
block|{
name|zooKeeper
operator|.
name|exists
argument_list|(
name|fullyQualifiedZNodeName
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|zooKeeper
operator|.
name|getData
argument_list|(
name|fullyQualifiedZNodeName
argument_list|,
name|this
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|zooKeeper
operator|.
name|getChildren
argument_list|(
name|fullyQualifiedZNodeName
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"Failed to create ZNode "
operator|+
name|fullyQualifiedZNodeName
operator|+
literal|" in ZooKeeper"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"Failed to create ZNode "
operator|+
name|fullyQualifiedZNodeName
operator|+
literal|" in ZooKeeper"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|createZNodeIfNotExists
parameter_list|(
name|String
name|zNodeName
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|CreateMode
name|createMode
parameter_list|,
name|boolean
name|watch
parameter_list|)
block|{
name|String
name|fullyQualifiedZNodeName
init|=
name|getZNode
argument_list|(
name|parentZNode
argument_list|,
name|zNodeName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ensureParentExists
argument_list|(
name|fullyQualifiedZNodeName
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
comment|// create the znode
name|zooKeeper
operator|.
name|create
argument_list|(
name|fullyQualifiedZNodeName
argument_list|,
name|data
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|createMode
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"Created ZNode "
operator|+
name|fullyQualifiedZNodeName
operator|+
literal|" in ZooKeeper"
argument_list|)
expr_stmt|;
comment|// watch the znode for deletion, data change, creation of children
if|if
condition|(
name|watch
condition|)
block|{
name|watchZNode
argument_list|(
name|zNodeName
argument_list|)
expr_stmt|;
block|}
return|return
name|fullyQualifiedZNodeName
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"Failed to create ZNode "
operator|+
name|fullyQualifiedZNodeName
operator|+
literal|" in ZooKeeper"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"Failed to create ZNode "
operator|+
name|fullyQualifiedZNodeName
operator|+
literal|" in ZooKeeper"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|byte
index|[]
name|readZNode
parameter_list|(
name|String
name|znodeName
parameter_list|,
name|Stat
name|stat
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|data
decl_stmt|;
try|try
block|{
name|String
name|fullyQualifiedZNodeName
init|=
name|getZNode
argument_list|(
name|parentZNode
argument_list|,
name|znodeName
argument_list|)
decl_stmt|;
name|data
operator|=
name|zooKeeper
operator|.
name|getData
argument_list|(
name|fullyQualifiedZNodeName
argument_list|,
name|this
argument_list|,
name|stat
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|data
return|;
block|}
comment|// TODO: perhaps return the version number from this write?
specifier|public
name|boolean
name|writeZNode
parameter_list|(
name|String
name|znodeName
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|int
name|version
parameter_list|,
name|boolean
name|watch
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|String
name|fullyQualifiedZNodeName
init|=
name|getZNode
argument_list|(
name|parentZNode
argument_list|,
name|znodeName
argument_list|)
decl_stmt|;
name|zooKeeper
operator|.
name|setData
argument_list|(
name|fullyQualifiedZNodeName
argument_list|,
name|data
argument_list|,
name|version
argument_list|)
expr_stmt|;
if|if
condition|(
name|watch
condition|)
block|{
name|zooKeeper
operator|.
name|getData
argument_list|(
name|fullyQualifiedZNodeName
argument_list|,
name|this
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"Failed to write data to ZooKeeper"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"Failed to write data to ZooKeeper"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Given a region name and some data, this method creates a new the region     * znode data under the UNASSGINED znode with the data passed in. This method     * will not update data for existing znodes.    *     * @param regionName - encoded name of the region    * @param data - new serialized data to update the region znode    */
specifier|private
name|void
name|createUnassignedRegion
parameter_list|(
name|String
name|regionName
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
block|{
name|String
name|znode
init|=
name|getZNode
argument_list|(
name|getRegionInTransitionZNode
argument_list|()
argument_list|,
name|regionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
comment|// check if this node already exists -
comment|//   - it should not exist
comment|//   - if it does, it should be in the CLOSED state
if|if
condition|(
name|exists
argument_list|(
name|znode
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|Stat
name|stat
init|=
operator|new
name|Stat
argument_list|()
decl_stmt|;
name|byte
index|[]
name|oldData
init|=
literal|null
decl_stmt|;
try|try
block|{
name|oldData
operator|=
name|readZNode
argument_list|(
name|znode
argument_list|,
name|stat
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error reading data for "
operator|+
name|znode
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|oldData
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"While creating UNASSIGNED region "
operator|+
name|regionName
operator|+
literal|" exists with no data"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"While creating UNASSIGNED region "
operator|+
name|regionName
operator|+
literal|" exists, state = "
operator|+
operator|(
name|HBaseEventType
operator|.
name|fromByte
argument_list|(
name|oldData
index|[
literal|0
index|]
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating UNASSIGNED region "
operator|+
name|regionName
operator|+
literal|" with no data"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating UNASSIGNED region "
operator|+
name|regionName
operator|+
literal|" in state = "
operator|+
operator|(
name|HBaseEventType
operator|.
name|fromByte
argument_list|(
name|data
index|[
literal|0
index|]
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
synchronized|synchronized
init|(
name|unassignedZNodesWatched
init|)
block|{
name|unassignedZNodesWatched
operator|.
name|add
argument_list|(
name|znode
argument_list|)
expr_stmt|;
name|createZNodeIfNotExists
argument_list|(
name|znode
argument_list|,
name|data
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Given a region name and some data, this method updates the region znode     * data under the UNASSGINED znode with the latest data. This method will     * update the znode data only if it already exists.    *     * @param regionName - encoded name of the region    * @param data - new serialized data to update the region znode    */
specifier|public
name|void
name|updateUnassignedRegion
parameter_list|(
name|String
name|regionName
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
block|{
name|String
name|znode
init|=
name|getZNode
argument_list|(
name|getRegionInTransitionZNode
argument_list|()
argument_list|,
name|regionName
argument_list|)
decl_stmt|;
comment|// this is an update - make sure the node already exists
if|if
condition|(
operator|!
name|exists
argument_list|(
name|znode
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot update "
operator|+
name|znode
operator|+
literal|" - node does not exist"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
comment|// Check existing state for logging purposes.
name|Stat
name|stat
init|=
operator|new
name|Stat
argument_list|()
decl_stmt|;
name|byte
index|[]
name|oldData
init|=
literal|null
decl_stmt|;
try|try
block|{
name|oldData
operator|=
name|readZNode
argument_list|(
name|znode
argument_list|,
name|stat
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error reading data for "
operator|+
name|znode
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|oldData
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"While updating UNASSIGNED region "
operator|+
name|regionName
operator|+
literal|" - node exists with no data"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"While updating UNASSIGNED region "
operator|+
name|regionName
operator|+
literal|" exists, state = "
operator|+
operator|(
name|HBaseEventType
operator|.
name|fromByte
argument_list|(
name|oldData
index|[
literal|0
index|]
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
synchronized|synchronized
init|(
name|unassignedZNodesWatched
init|)
block|{
name|unassignedZNodesWatched
operator|.
name|add
argument_list|(
name|znode
argument_list|)
expr_stmt|;
try|try
block|{
name|writeZNode
argument_list|(
name|znode
argument_list|,
name|data
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error writing data for "
operator|+
name|znode
operator|+
literal|", could not update state to "
operator|+
operator|(
name|HBaseEventType
operator|.
name|fromByte
argument_list|(
name|data
index|[
literal|0
index|]
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * This method will create a new region in transition entry in ZK with the     * speficied data if none exists. If one already exists, it will update the     * data with whatever is passed in.    *     * @param regionName - encoded name of the region    * @param data - serialized data for the region znode    */
specifier|public
name|void
name|createOrUpdateUnassignedRegion
parameter_list|(
name|String
name|regionName
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
block|{
name|String
name|znode
init|=
name|getZNode
argument_list|(
name|getRegionInTransitionZNode
argument_list|()
argument_list|,
name|regionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|exists
argument_list|(
name|znode
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|updateUnassignedRegion
argument_list|(
name|regionName
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|createUnassignedRegion
argument_list|(
name|regionName
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|deleteUnassignedRegion
parameter_list|(
name|String
name|regionName
parameter_list|)
block|{
name|String
name|znode
init|=
name|getZNode
argument_list|(
name|getRegionInTransitionZNode
argument_list|()
argument_list|,
name|regionName
argument_list|)
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Deleting ZNode "
operator|+
name|znode
operator|+
literal|" in ZooKeeper as region is open..."
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|unassignedZNodesWatched
init|)
block|{
name|unassignedZNodesWatched
operator|.
name|remove
argument_list|(
name|znode
argument_list|)
expr_stmt|;
name|deleteZNode
argument_list|(
name|znode
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|SessionExpiredException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Zookeeper session has expired"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// if the session has expired try to reconnect to ZK, then perform query
try|try
block|{
comment|// TODO: ZK-REFACTOR: should just quit on reconnect??
name|reconnectToZk
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|unassignedZNodesWatched
init|)
block|{
name|unassignedZNodesWatched
operator|.
name|remove
argument_list|(
name|znode
argument_list|)
expr_stmt|;
name|deleteZNode
argument_list|(
name|znode
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error reconnecting to zookeeper"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error reconnecting to zookeeper"
argument_list|,
name|e1
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|SessionExpiredException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error reading after reconnecting to zookeeper"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error reading after reconnecting to zookeeper"
argument_list|,
name|e1
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error reading after reconnecting to zookeeper"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error reading after reconnecting to zookeeper"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error deleting region "
operator|+
name|regionName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error deleting region "
operator|+
name|regionName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Atomically adds a watch and reads data from the unwatched znodes in the     * UNASSGINED region. This works because the master is the only person     * deleting nodes.    * @param znode    * @return    */
specifier|public
name|List
argument_list|<
name|ZNodePathAndData
argument_list|>
name|watchAndGetNewChildren
parameter_list|(
name|String
name|znode
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|nodes
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|ZNodePathAndData
argument_list|>
name|newNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|ZNodePathAndData
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|checkExistenceOf
argument_list|(
name|znode
argument_list|)
condition|)
block|{
synchronized|synchronized
init|(
name|unassignedZNodesWatched
init|)
block|{
name|nodes
operator|=
name|zooKeeper
operator|.
name|getChildren
argument_list|(
name|znode
argument_list|,
name|this
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|node
range|:
name|nodes
control|)
block|{
name|String
name|znodePath
init|=
name|joinPath
argument_list|(
name|znode
argument_list|,
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|unassignedZNodesWatched
operator|.
name|contains
argument_list|(
name|znodePath
argument_list|)
condition|)
block|{
name|byte
index|[]
name|data
init|=
name|getDataAndWatch
argument_list|(
name|znode
argument_list|,
name|node
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|newNodes
operator|.
name|add
argument_list|(
operator|new
name|ZNodePathAndData
argument_list|(
name|znodePath
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|unassignedZNodesWatched
operator|.
name|add
argument_list|(
name|znodePath
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"Failed to read "
operator|+
name|znode
operator|+
literal|" znode in ZooKeeper: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"<"
operator|+
name|instanceName
operator|+
literal|">"
operator|+
literal|"Failed to read "
operator|+
name|znode
operator|+
literal|" znode in ZooKeeper: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|newNodes
return|;
block|}
specifier|public
specifier|static
class|class
name|ZNodePathAndData
block|{
specifier|private
name|String
name|zNodePath
decl_stmt|;
specifier|private
name|byte
index|[]
name|data
decl_stmt|;
specifier|public
name|ZNodePathAndData
parameter_list|(
name|String
name|zNodePath
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
block|{
name|this
operator|.
name|zNodePath
operator|=
name|zNodePath
expr_stmt|;
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
block|}
specifier|public
name|String
name|getzNodePath
parameter_list|()
block|{
return|return
name|zNodePath
return|;
block|}
specifier|public
name|byte
index|[]
name|getData
parameter_list|()
block|{
return|return
name|data
return|;
block|}
block|}
block|}
end_class

end_unit

