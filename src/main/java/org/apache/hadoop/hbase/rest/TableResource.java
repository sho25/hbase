begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Encoded
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|QueryParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ImmutableBytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|transform
operator|.
name|NullTransform
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|transform
operator|.
name|Transform
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_class
specifier|public
class|class
name|TableResource
extends|extends
name|ResourceBase
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TableResource
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * HCD attributes starting with this string are considered transform    * directives    */
specifier|private
specifier|static
specifier|final
name|String
name|DIRECTIVE_KEY
init|=
literal|"Transform$"
decl_stmt|;
comment|/**    * Transform directives are of the form<tt>&lt;qualifier&gt;:&lt;class&gt;</tt>    * where<tt>qualifier</tt> is a string for exact matching or '*' as a wildcard    * that will match anything; and<tt>class</tt> is either the fully qualified    * class name of a transform implementation or can be the short name of a    * transform in the<tt>org.apache.hadoop.hbase.rest.transform package</tt>.    */
specifier|private
specifier|static
specifier|final
name|Pattern
name|DIRECTIVE_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"([^\\:]+)\\:([^\\,]+)\\,?"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Transform
name|defaultTransform
init|=
operator|new
name|NullTransform
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Transform
argument_list|>
argument_list|>
argument_list|>
name|transformMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Transform
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|lastCheckedMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * @param table the table    * @param family the column family    * @param qualifier the column qualifier, or null    * @return the transformation specified for the given family or qualifier, if    * any, otherwise the default    */
specifier|static
name|Transform
name|getTransform
parameter_list|(
name|String
name|table
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|)
block|{
if|if
condition|(
name|qualifier
operator|==
literal|null
condition|)
block|{
name|qualifier
operator|=
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
expr_stmt|;
block|}
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Transform
argument_list|>
argument_list|>
name|familyMap
init|=
name|transformMap
operator|.
name|get
argument_list|(
name|table
argument_list|)
decl_stmt|;
if|if
condition|(
name|familyMap
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Transform
argument_list|>
name|columnMap
init|=
name|familyMap
operator|.
name|get
argument_list|(
name|family
argument_list|)
decl_stmt|;
if|if
condition|(
name|columnMap
operator|!=
literal|null
condition|)
block|{
name|Transform
name|t
init|=
name|columnMap
operator|.
name|get
argument_list|(
name|qualifier
argument_list|)
decl_stmt|;
comment|// check as necessary if there is a wildcard entry
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
name|t
operator|=
name|columnMap
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
expr_stmt|;
block|}
comment|// if we found something, return it, otherwise we will return the
comment|// default by falling through
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
return|return
name|t
return|;
block|}
block|}
block|}
return|return
name|defaultTransform
return|;
block|}
specifier|synchronized
specifier|static
name|void
name|setTransform
parameter_list|(
name|String
name|table
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|Transform
name|transform
parameter_list|)
block|{
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Transform
argument_list|>
argument_list|>
name|familyMap
init|=
name|transformMap
operator|.
name|get
argument_list|(
name|table
argument_list|)
decl_stmt|;
if|if
condition|(
name|familyMap
operator|==
literal|null
condition|)
block|{
name|familyMap
operator|=
operator|new
name|ConcurrentSkipListMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Transform
argument_list|>
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
expr_stmt|;
name|transformMap
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|familyMap
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Transform
argument_list|>
name|columnMap
init|=
name|familyMap
operator|.
name|get
argument_list|(
name|family
argument_list|)
decl_stmt|;
if|if
condition|(
name|columnMap
operator|==
literal|null
condition|)
block|{
name|columnMap
operator|=
operator|new
name|ConcurrentSkipListMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Transform
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
expr_stmt|;
name|familyMap
operator|.
name|put
argument_list|(
name|family
argument_list|,
name|columnMap
argument_list|)
expr_stmt|;
block|}
comment|// if transform is null, remove any existing entry
if|if
condition|(
name|transform
operator|!=
literal|null
condition|)
block|{
name|columnMap
operator|.
name|put
argument_list|(
name|qualifier
argument_list|,
name|transform
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|columnMap
operator|.
name|remove
argument_list|(
name|qualifier
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|table
decl_stmt|;
comment|/**    * Scan the table schema for transform directives. These are column family    * attributes containing a comma-separated list of elements of the form    *<tt>&lt;qualifier&gt;:&lt;transform-class&gt;</tt>, where qualifier    * can be a string for exact matching or '*' as a wildcard to match anything.    * The attribute key must begin with the string "Transform$".    */
name|void
name|scanTransformAttrs
parameter_list|()
throws|throws
name|IOException
block|{
name|HBaseAdmin
name|admin
init|=
operator|new
name|HBaseAdmin
argument_list|(
name|servlet
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
name|admin
operator|.
name|getTableDescriptor
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|table
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|HColumnDescriptor
name|hcd
range|:
name|htd
operator|.
name|getFamilies
argument_list|()
control|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|ImmutableBytesWritable
argument_list|>
name|e
range|:
name|hcd
operator|.
name|getValues
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// does the key start with the transform directive tag?
name|String
name|key
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|key
operator|.
name|startsWith
argument_list|(
name|DIRECTIVE_KEY
argument_list|)
condition|)
block|{
comment|// no, skip
continue|continue;
block|}
comment|// match a comma separated list of one or more directives
name|byte
index|[]
name|value
init|=
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|Matcher
name|m
init|=
name|DIRECTIVE_PATTERN
operator|.
name|matcher
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|value
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
name|byte
index|[]
name|qualifier
init|=
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
decl_stmt|;
name|String
name|s
init|=
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
operator|!
name|s
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
name|qualifier
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|boolean
name|retry
init|=
literal|false
decl_stmt|;
name|String
name|className
init|=
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
comment|// if a transform was previously configured for the qualifier,
comment|// this will simply replace it
name|setTransform
argument_list|(
name|table
argument_list|,
name|hcd
operator|.
name|getName
argument_list|()
argument_list|,
name|qualifier
argument_list|,
operator|(
name|Transform
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|ex
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|retry
condition|)
block|{
break|break;
block|}
name|retry
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|ex
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|retry
condition|)
block|{
break|break;
block|}
name|retry
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|retry
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|ex
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
name|className
operator|=
literal|"org.apache.hadoop.hbase.rest.transform."
operator|+
name|className
expr_stmt|;
name|retry
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
comment|/**    * Constructor    * @param table    * @throws IOException    */
specifier|public
name|TableResource
parameter_list|(
name|String
name|table
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|table
operator|=
name|table
expr_stmt|;
comment|// Scanning the table schema is too expensive to do for every operation.
comment|// Do it once per minute by default.
comment|// Setting hbase.rest.transform.check.interval to<= 0 disables rescanning.
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Long
name|lastChecked
init|=
name|lastCheckedMap
operator|.
name|get
argument_list|(
name|table
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastChecked
operator|!=
literal|null
condition|)
block|{
name|long
name|interval
init|=
name|servlet
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getLong
argument_list|(
literal|"hbase.rest.transform.check.interval"
argument_list|,
literal|60000
argument_list|)
decl_stmt|;
if|if
condition|(
name|interval
operator|>
literal|0
operator|&&
operator|(
name|now
operator|-
name|lastChecked
operator|.
name|longValue
argument_list|()
operator|)
operator|>
name|interval
condition|)
block|{
name|scanTransformAttrs
argument_list|()
expr_stmt|;
name|lastCheckedMap
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|now
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|scanTransformAttrs
argument_list|()
expr_stmt|;
name|lastCheckedMap
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|now
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** @return the table name */
name|String
name|getName
parameter_list|()
block|{
return|return
name|table
return|;
block|}
comment|/**    * @return true if the table exists    * @throws IOException    */
name|boolean
name|exists
parameter_list|()
throws|throws
name|IOException
block|{
name|HBaseAdmin
name|admin
init|=
operator|new
name|HBaseAdmin
argument_list|(
name|servlet
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|admin
operator|.
name|tableExists
argument_list|(
name|table
argument_list|)
return|;
block|}
comment|/**    * Apply any configured transformations to the value    * @param family    * @param qualifier    * @param value    * @param direction    * @return    * @throws IOException    */
name|byte
index|[]
name|transform
parameter_list|(
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|byte
index|[]
name|value
parameter_list|,
name|Transform
operator|.
name|Direction
name|direction
parameter_list|)
throws|throws
name|IOException
block|{
name|Transform
name|t
init|=
name|getTransform
argument_list|(
name|table
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
return|return
name|t
operator|.
name|transform
argument_list|(
name|value
argument_list|,
name|direction
argument_list|)
return|;
block|}
return|return
name|value
return|;
block|}
annotation|@
name|Path
argument_list|(
literal|"exists"
argument_list|)
specifier|public
name|ExistsResource
name|getExistsResource
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|ExistsResource
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Path
argument_list|(
literal|"regions"
argument_list|)
specifier|public
name|RegionsResource
name|getRegionsResource
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|RegionsResource
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Path
argument_list|(
literal|"scanner"
argument_list|)
specifier|public
name|ScannerResource
name|getScannerResource
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|ScannerResource
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Path
argument_list|(
literal|"schema"
argument_list|)
specifier|public
name|SchemaResource
name|getSchemaResource
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|SchemaResource
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Path
argument_list|(
literal|"{rowspec: .+}"
argument_list|)
specifier|public
name|RowResource
name|getRowResource
parameter_list|(
comment|// We need the @Encoded decorator so Jersey won't urldecode before
comment|// the RowSpec constructor has a chance to parse
specifier|final
annotation|@
name|PathParam
argument_list|(
literal|"rowspec"
argument_list|)
annotation|@
name|Encoded
name|String
name|rowspec
parameter_list|,
specifier|final
annotation|@
name|QueryParam
argument_list|(
literal|"v"
argument_list|)
name|String
name|versions
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|RowResource
argument_list|(
name|this
argument_list|,
name|rowspec
argument_list|,
name|versions
argument_list|)
return|;
block|}
block|}
end_class

end_unit

