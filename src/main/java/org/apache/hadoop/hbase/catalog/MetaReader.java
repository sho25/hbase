begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|catalog
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NotAllMetaRegionsOnlineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|HRegionInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Writables
import|;
end_import

begin_comment
comment|/**  * Reads region and assignment information from<code>.META.</code>.  *<p>  * Uses the {@link CatalogTracker} to obtain locations and connections to  * catalogs.  */
end_comment

begin_class
specifier|public
class|class
name|MetaReader
block|{
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|META_REGION_PREFIX
decl_stmt|;
static|static
block|{
comment|// Copy the prefix from FIRST_META_REGIONINFO into META_REGION_PREFIX.
comment|// FIRST_META_REGIONINFO == '.META.,,1'.  META_REGION_PREFIX == '.META.,'
name|int
name|len
init|=
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
operator|.
name|getRegionName
argument_list|()
operator|.
name|length
operator|-
literal|2
decl_stmt|;
name|META_REGION_PREFIX
operator|=
operator|new
name|byte
index|[
name|len
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
operator|.
name|getRegionName
argument_list|()
argument_list|,
literal|0
argument_list|,
name|META_REGION_PREFIX
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param ct    * @param tableName A user tablename or a .META. table name.    * @return Interface on to server hosting the<code>-ROOT-</code> or    *<code>.META.</code> regions.    * @throws NotAllMetaRegionsOnlineException    * @throws IOException    */
specifier|private
specifier|static
name|HRegionInterface
name|getCatalogRegionInterface
parameter_list|(
specifier|final
name|CatalogTracker
name|ct
parameter_list|,
specifier|final
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|NotAllMetaRegionsOnlineException
throws|,
name|IOException
block|{
return|return
name|Bytes
operator|.
name|equals
argument_list|(
name|HConstants
operator|.
name|META_TABLE_NAME
argument_list|,
name|tableName
argument_list|)
condition|?
name|ct
operator|.
name|waitForRootServerConnectionDefault
argument_list|()
else|:
name|ct
operator|.
name|waitForMetaServerConnectionDefault
argument_list|()
return|;
block|}
comment|/**    * @param tableName    * @return Returns region name to look in for regions for<code>tableName</code>;    * e.g. if we are looking for<code>.META.</code> regions, we need to look    * in the<code>-ROOT-</code> region, else if a user table, we need to look    * in the<code>.META.</code> region.    */
specifier|private
specifier|static
name|byte
index|[]
name|getCatalogRegionNameForTable
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|equals
argument_list|(
name|HConstants
operator|.
name|META_TABLE_NAME
argument_list|,
name|tableName
argument_list|)
condition|?
name|HRegionInfo
operator|.
name|ROOT_REGIONINFO
operator|.
name|getRegionName
argument_list|()
else|:
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
operator|.
name|getRegionName
argument_list|()
return|;
block|}
comment|/**    * @param regionName    * @return Returns region name to look in for<code>regionName</code>;    * e.g. if we are looking for<code>.META.,,1</code> region, we need to look    * in<code>-ROOT-</code> region, else if a user region, we need to look    * in the<code>.META.,,1</code> region.    */
specifier|private
specifier|static
name|byte
index|[]
name|getCatalogRegionNameForRegion
parameter_list|(
specifier|final
name|byte
index|[]
name|regionName
parameter_list|)
block|{
return|return
name|isMetaRegion
argument_list|(
name|regionName
argument_list|)
condition|?
name|HRegionInfo
operator|.
name|ROOT_REGIONINFO
operator|.
name|getRegionName
argument_list|()
else|:
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
operator|.
name|getRegionName
argument_list|()
return|;
block|}
comment|/**    * @param regionName    * @return True if<code>regionName</code> is from<code>.META.</code> table.    */
specifier|private
specifier|static
name|boolean
name|isMetaRegion
parameter_list|(
specifier|final
name|byte
index|[]
name|regionName
parameter_list|)
block|{
if|if
condition|(
name|regionName
operator|.
name|length
operator|<
name|META_REGION_PREFIX
operator|.
name|length
operator|+
literal|2
comment|/* ',', + '1' */
condition|)
block|{
comment|// Can't be meta table region.
return|return
literal|false
return|;
block|}
comment|// Compare the prefix of regionName.  If it matches META_REGION_PREFIX prefix,
comment|// then this is region from .META. table.
return|return
name|Bytes
operator|.
name|compareTo
argument_list|(
name|regionName
argument_list|,
literal|0
argument_list|,
name|META_REGION_PREFIX
operator|.
name|length
argument_list|,
name|META_REGION_PREFIX
argument_list|,
literal|0
argument_list|,
name|META_REGION_PREFIX
operator|.
name|length
argument_list|)
operator|==
literal|0
return|;
block|}
comment|/**    * Performs a full scan of<code>.META.</code>.    *<p>    * Returns a map of every region to it's currently assigned server, according    * to META.  If the region does not have an assignment it will have a null    * value in the map.    *    * @return map of regions to their currently assigned server    * @throws IOException    */
specifier|public
specifier|static
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
name|fullScan
parameter_list|(
name|CatalogTracker
name|catalogTracker
parameter_list|)
throws|throws
name|IOException
block|{
name|HRegionInterface
name|metaServer
init|=
name|catalogTracker
operator|.
name|waitForMetaServerConnectionDefault
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
name|allRegions
init|=
operator|new
name|TreeMap
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
argument_list|()
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
name|long
name|scannerid
init|=
name|metaServer
operator|.
name|openScanner
argument_list|(
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|scan
argument_list|)
decl_stmt|;
try|try
block|{
name|Result
name|data
decl_stmt|;
while|while
condition|(
operator|(
name|data
operator|=
name|metaServer
operator|.
name|next
argument_list|(
name|scannerid
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|data
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
name|region
init|=
name|metaRowToRegionPair
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|allRegions
operator|.
name|put
argument_list|(
name|region
operator|.
name|getFirst
argument_list|()
argument_list|,
name|region
operator|.
name|getSecond
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|metaServer
operator|.
name|close
argument_list|(
name|scannerid
argument_list|)
expr_stmt|;
block|}
return|return
name|allRegions
return|;
block|}
comment|/**    * Reads the location of META from ROOT.    * @param metaServer connection to server hosting ROOT    * @return location of META in ROOT, null if not available    * @throws IOException    */
specifier|public
specifier|static
name|HServerAddress
name|readMetaLocation
parameter_list|(
name|HRegionInterface
name|metaServer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|readLocation
argument_list|(
name|metaServer
argument_list|,
name|CatalogTracker
operator|.
name|ROOT_REGION
argument_list|,
name|CatalogTracker
operator|.
name|META_REGION
argument_list|)
return|;
block|}
comment|/**    * Reads the location of the specified region from META.    * @param catalogTracker    * @param regionName region to read location of    * @return location of region in META, null if not available    * @throws IOException    */
specifier|public
specifier|static
name|HServerAddress
name|readRegionLocation
parameter_list|(
name|CatalogTracker
name|catalogTracker
parameter_list|,
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isMetaRegion
argument_list|(
name|regionName
argument_list|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"See readMetaLocation"
argument_list|)
throw|;
return|return
name|readLocation
argument_list|(
name|catalogTracker
operator|.
name|waitForMetaServerConnectionDefault
argument_list|()
argument_list|,
name|CatalogTracker
operator|.
name|META_REGION
argument_list|,
name|regionName
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|HServerAddress
name|readLocation
parameter_list|(
name|HRegionInterface
name|metaServer
parameter_list|,
name|byte
index|[]
name|catalogRegionName
parameter_list|,
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
block|{
name|Result
name|r
init|=
literal|null
decl_stmt|;
try|try
block|{
name|r
operator|=
name|metaServer
operator|.
name|get
argument_list|(
name|catalogRegionName
argument_list|,
operator|new
name|Get
argument_list|(
name|regionName
argument_list|)
operator|.
name|addColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|SERVER_QUALIFIER
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|net
operator|.
name|ConnectException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Connection refused"
argument_list|)
condition|)
block|{
comment|// Treat this exception + message as unavailable catalog table. Catch it
comment|// and fall through to return a null
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IOException
operator|&&
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Connection reset by peer"
argument_list|)
condition|)
block|{
comment|// Treat this exception + message as unavailable catalog table. Catch it
comment|// and fall through to return a null
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
if|if
condition|(
name|r
operator|==
literal|null
operator|||
name|r
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|byte
index|[]
name|value
init|=
name|r
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|SERVER_QUALIFIER
argument_list|)
decl_stmt|;
return|return
operator|new
name|HServerAddress
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Gets the region info and assignment for the specified region from META.    * @param catalogTracker    * @param regionName    * @return region info and assignment from META, null if not available    * @throws IOException    */
specifier|public
specifier|static
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
name|getRegion
parameter_list|(
name|CatalogTracker
name|catalogTracker
parameter_list|,
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
name|byte
index|[]
name|meta
init|=
name|getCatalogRegionNameForRegion
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
name|Result
name|r
init|=
name|catalogTracker
operator|.
name|waitForMetaServerConnectionDefault
argument_list|()
operator|.
name|get
argument_list|(
name|meta
argument_list|,
name|get
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
operator|||
name|r
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|metaRowToRegionPair
argument_list|(
name|r
argument_list|)
return|;
block|}
comment|/**    * @param data A .META. table row.    * @return A pair of the regioninfo and the server address from<code>data</code>    * (or null for server address if no address set in .META.).    * @throws IOException    */
specifier|public
specifier|static
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
name|metaRowToRegionPair
parameter_list|(
name|Result
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|HRegionInfo
name|info
init|=
name|Writables
operator|.
name|getHRegionInfo
argument_list|(
name|data
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|REGIONINFO_QUALIFIER
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|value
init|=
name|data
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|SERVER_QUALIFIER
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|value
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|HServerAddress
name|server
init|=
operator|new
name|HServerAddress
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|value
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
argument_list|(
name|info
argument_list|,
name|server
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
argument_list|(
name|info
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
comment|/**    * Checks if the specified table exists.  Looks at the META table hosted on    * the specified server.    * @param metaServer server hosting meta    * @param tableName table to check    * @return true if the table exists in meta, false if not    * @throws IOException    */
specifier|public
specifier|static
name|boolean
name|tableExists
parameter_list|(
name|CatalogTracker
name|catalogTracker
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|tableName
operator|.
name|equals
argument_list|(
name|HTableDescriptor
operator|.
name|ROOT_TABLEDESC
operator|.
name|getNameAsString
argument_list|()
argument_list|)
operator|||
name|tableName
operator|.
name|equals
argument_list|(
name|HTableDescriptor
operator|.
name|META_TABLEDESC
operator|.
name|getNameAsString
argument_list|()
argument_list|)
condition|)
block|{
comment|// Catalog tables always exist.
return|return
literal|true
return|;
block|}
name|HRegionInterface
name|metaServer
init|=
name|catalogTracker
operator|.
name|waitForMetaServerConnectionDefault
argument_list|()
decl_stmt|;
name|byte
index|[]
name|firstRowInTable
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|tableName
operator|+
literal|",,"
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|firstRowInTable
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|REGIONINFO_QUALIFIER
argument_list|)
expr_stmt|;
name|long
name|scannerid
init|=
name|metaServer
operator|.
name|openScanner
argument_list|(
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|scan
argument_list|)
decl_stmt|;
try|try
block|{
name|Result
name|data
init|=
name|metaServer
operator|.
name|next
argument_list|(
name|scannerid
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
operator|&&
name|data
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|HRegionInfo
name|info
init|=
name|Writables
operator|.
name|getHRegionInfo
argument_list|(
name|data
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|REGIONINFO_QUALIFIER
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getNameAsString
argument_list|()
operator|.
name|equals
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
comment|// A region for this table already exists. Ergo table exists.
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
finally|finally
block|{
name|metaServer
operator|.
name|close
argument_list|(
name|scannerid
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Gets all of the regions of the specified table.    * @param catalogTracker    * @param tableName    * @return Ordered list of {@link HRegionInfo}.    * @throws IOException    */
specifier|public
specifier|static
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|getTableRegions
parameter_list|(
name|CatalogTracker
name|catalogTracker
parameter_list|,
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|ROOT_TABLE_NAME
argument_list|)
condition|)
block|{
comment|// If root, do a bit of special handling.
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|HRegionInfo
operator|.
name|ROOT_REGIONINFO
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
elseif|else
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|META_TABLE_NAME
argument_list|)
condition|)
block|{
comment|// Same for .META. table
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
comment|// Its a user table.
name|HRegionInterface
name|metaServer
init|=
name|getCatalogRegionInterface
argument_list|(
name|catalogTracker
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|tableString
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|byte
index|[]
name|firstRowInTable
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|tableString
operator|+
literal|",,"
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|firstRowInTable
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|REGIONINFO_QUALIFIER
argument_list|)
expr_stmt|;
name|long
name|scannerid
init|=
name|metaServer
operator|.
name|openScanner
argument_list|(
name|getCatalogRegionNameForTable
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|scan
argument_list|)
decl_stmt|;
try|try
block|{
name|Result
name|data
decl_stmt|;
while|while
condition|(
operator|(
name|data
operator|=
name|metaServer
operator|.
name|next
argument_list|(
name|scannerid
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|data
operator|!=
literal|null
operator|&&
name|data
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|HRegionInfo
name|info
init|=
name|Writables
operator|.
name|getHRegionInfo
argument_list|(
name|data
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|REGIONINFO_QUALIFIER
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getNameAsString
argument_list|()
operator|.
name|equals
argument_list|(
name|tableString
argument_list|)
condition|)
block|{
name|regions
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
return|return
name|regions
return|;
block|}
finally|finally
block|{
name|metaServer
operator|.
name|close
argument_list|(
name|scannerid
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @param catalogTracker    * @param tableName    * @return Return list of regioninfos and server addresses.    * @throws IOException    * @throws InterruptedException    */
specifier|public
specifier|static
name|List
argument_list|<
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
argument_list|>
name|getTableRegionsAndLocations
parameter_list|(
name|CatalogTracker
name|catalogTracker
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|byte
index|[]
name|tableNameBytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|tableNameBytes
argument_list|,
name|HConstants
operator|.
name|ROOT_TABLE_NAME
argument_list|)
condition|)
block|{
comment|// If root, do a bit of special handling.
name|HServerAddress
name|hsa
init|=
name|catalogTracker
operator|.
name|getRootLocation
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
argument_list|(
name|HRegionInfo
operator|.
name|ROOT_REGIONINFO
argument_list|,
name|hsa
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
name|HRegionInterface
name|metaServer
init|=
name|getCatalogRegionInterface
argument_list|(
name|catalogTracker
argument_list|,
name|tableNameBytes
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
argument_list|>
name|regions
init|=
operator|new
name|ArrayList
argument_list|<
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|byte
index|[]
name|firstRowInTable
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|tableName
operator|+
literal|",,"
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|firstRowInTable
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
name|long
name|scannerid
init|=
name|metaServer
operator|.
name|openScanner
argument_list|(
name|getCatalogRegionNameForTable
argument_list|(
name|tableNameBytes
argument_list|)
argument_list|,
name|scan
argument_list|)
decl_stmt|;
try|try
block|{
name|Result
name|data
decl_stmt|;
while|while
condition|(
operator|(
name|data
operator|=
name|metaServer
operator|.
name|next
argument_list|(
name|scannerid
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|data
operator|!=
literal|null
operator|&&
name|data
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
name|region
init|=
name|metaRowToRegionPair
argument_list|(
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|region
operator|.
name|getFirst
argument_list|()
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getNameAsString
argument_list|()
operator|.
name|equals
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|regions
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
return|return
name|regions
return|;
block|}
finally|finally
block|{
name|metaServer
operator|.
name|close
argument_list|(
name|scannerid
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @param catalogTracker    * @param hsi Server specification    * @return List of user regions installed on this server (does not include    * catalog regions).    * @throws IOException    */
specifier|public
specifier|static
name|NavigableMap
argument_list|<
name|HRegionInfo
argument_list|,
name|Result
argument_list|>
name|getServerUserRegions
parameter_list|(
name|CatalogTracker
name|catalogTracker
parameter_list|,
specifier|final
name|HServerInfo
name|hsi
parameter_list|)
throws|throws
name|IOException
block|{
name|HRegionInterface
name|metaServer
init|=
name|catalogTracker
operator|.
name|waitForMetaServerConnectionDefault
argument_list|()
decl_stmt|;
name|NavigableMap
argument_list|<
name|HRegionInfo
argument_list|,
name|Result
argument_list|>
name|hris
init|=
operator|new
name|TreeMap
argument_list|<
name|HRegionInfo
argument_list|,
name|Result
argument_list|>
argument_list|()
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
name|long
name|scannerid
init|=
name|metaServer
operator|.
name|openScanner
argument_list|(
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|scan
argument_list|)
decl_stmt|;
try|try
block|{
name|Result
name|result
decl_stmt|;
while|while
condition|(
operator|(
name|result
operator|=
name|metaServer
operator|.
name|next
argument_list|(
name|scannerid
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|result
operator|!=
literal|null
operator|&&
name|result
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
name|pair
init|=
name|metaRowToRegionPair
argument_list|(
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
name|pair
operator|.
name|getSecond
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|pair
operator|.
name|getSecond
argument_list|()
operator|.
name|equals
argument_list|(
name|hsi
operator|.
name|getServerAddress
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|hris
operator|.
name|put
argument_list|(
name|pair
operator|.
name|getFirst
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|hris
return|;
block|}
finally|finally
block|{
name|metaServer
operator|.
name|close
argument_list|(
name|scannerid
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

