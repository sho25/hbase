begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|catalog
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NotServingRegionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|HRegionInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Writables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_comment
comment|/**  * Reads region and assignment information from<code>.META.</code>.  */
end_comment

begin_class
specifier|public
class|class
name|MetaReader
block|{
comment|// TODO: Strip CatalogTracker from this class.  Its all over and in the end
comment|// its only used to get its Configuration so we can get associated
comment|// Connection.
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MetaReader
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|byte
index|[]
name|META_REGION_PREFIX
decl_stmt|;
static|static
block|{
comment|// Copy the prefix from FIRST_META_REGIONINFO into META_REGION_PREFIX.
comment|// FIRST_META_REGIONINFO == '.META.,,1'.  META_REGION_PREFIX == '.META.,'
name|int
name|len
init|=
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
operator|.
name|getRegionName
argument_list|()
operator|.
name|length
operator|-
literal|2
decl_stmt|;
name|META_REGION_PREFIX
operator|=
operator|new
name|byte
index|[
name|len
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
operator|.
name|getRegionName
argument_list|()
argument_list|,
literal|0
argument_list|,
name|META_REGION_PREFIX
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param regionName    * @return True if<code>regionName</code> is from<code>.META.</code> table.    */
specifier|private
specifier|static
name|boolean
name|isMetaRegion
parameter_list|(
specifier|final
name|byte
index|[]
name|regionName
parameter_list|)
block|{
if|if
condition|(
name|regionName
operator|.
name|length
operator|<
name|META_REGION_PREFIX
operator|.
name|length
operator|+
literal|2
comment|/* ',', + '1' */
condition|)
block|{
comment|// Can't be meta table region.
return|return
literal|false
return|;
block|}
comment|// Compare the prefix of regionName.  If it matches META_REGION_PREFIX prefix,
comment|// then this is region from .META. table.
return|return
name|Bytes
operator|.
name|equals
argument_list|(
name|regionName
argument_list|,
literal|0
argument_list|,
name|META_REGION_PREFIX
operator|.
name|length
argument_list|,
name|META_REGION_PREFIX
argument_list|,
literal|0
argument_list|,
name|META_REGION_PREFIX
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**    * Performs a full scan of<code>.META.</code>, skipping regions from any    * tables in the specified set of disabled tables.    * @param catalogTracker    * @param disabledTables set of disabled tables that will not be returned    * @return Returns a map of every region to it's currently assigned server,    * according to META.  If the region does not have an assignment it will have    * a null value in the map.    * @throws IOException    */
specifier|public
specifier|static
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|fullScan
parameter_list|(
name|CatalogTracker
name|catalogTracker
parameter_list|,
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|disabledTables
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|fullScan
argument_list|(
name|catalogTracker
argument_list|,
name|disabledTables
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Performs a full scan of<code>.META.</code>, skipping regions from any    * tables in the specified set of disabled tables.    * @param catalogTracker    * @param disabledTables set of disabled tables that will not be returned    * @param excludeOfflinedSplitParents If true, do not include offlined split    * parents in the return.    * @return Returns a map of every region to it's currently assigned server,    * according to META.  If the region does not have an assignment it will have    * a null value in the map.    * @throws IOException    */
specifier|public
specifier|static
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|fullScan
parameter_list|(
name|CatalogTracker
name|catalogTracker
parameter_list|,
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|disabledTables
parameter_list|,
specifier|final
name|boolean
name|excludeOfflinedSplitParents
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|regions
init|=
operator|new
name|TreeMap
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|()
decl_stmt|;
name|Visitor
name|v
init|=
operator|new
name|Visitor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|Result
name|r
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|r
operator|==
literal|null
operator|||
name|r
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|true
return|;
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|region
init|=
name|parseCatalogResult
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|region
operator|==
literal|null
condition|)
return|return
literal|true
return|;
name|HRegionInfo
name|hri
init|=
name|region
operator|.
name|getFirst
argument_list|()
decl_stmt|;
if|if
condition|(
name|disabledTables
operator|.
name|contains
argument_list|(
name|hri
operator|.
name|getTableNameAsString
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
comment|// Are we to include split parents in the list?
if|if
condition|(
name|excludeOfflinedSplitParents
operator|&&
name|hri
operator|.
name|isSplitParent
argument_list|()
condition|)
return|return
literal|true
return|;
name|regions
operator|.
name|put
argument_list|(
name|hri
argument_list|,
name|region
operator|.
name|getSecond
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|fullScan
argument_list|(
name|catalogTracker
argument_list|,
name|v
argument_list|)
expr_stmt|;
return|return
name|regions
return|;
block|}
comment|/**    * Performs a full scan of<code>.META.</code>.    * @return List of {@link Result}    * @throws IOException    */
specifier|public
specifier|static
name|List
argument_list|<
name|Result
argument_list|>
name|fullScan
parameter_list|(
name|CatalogTracker
name|catalogTracker
parameter_list|)
throws|throws
name|IOException
block|{
name|CollectAllVisitor
name|v
init|=
operator|new
name|CollectAllVisitor
argument_list|()
decl_stmt|;
name|fullScan
argument_list|(
name|catalogTracker
argument_list|,
name|v
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|v
operator|.
name|getResults
argument_list|()
return|;
block|}
comment|/**    * Performs a full scan of a<code>-ROOT-</code> table.    * @return List of {@link Result}    * @throws IOException    */
specifier|public
specifier|static
name|List
argument_list|<
name|Result
argument_list|>
name|fullScanOfRoot
parameter_list|(
name|CatalogTracker
name|catalogTracker
parameter_list|)
throws|throws
name|IOException
block|{
name|CollectAllVisitor
name|v
init|=
operator|new
name|CollectAllVisitor
argument_list|()
decl_stmt|;
name|fullScan
argument_list|(
name|catalogTracker
argument_list|,
name|v
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|v
operator|.
name|getResults
argument_list|()
return|;
block|}
comment|/**    * Performs a full scan of<code>.META.</code>.    * @param catalogTracker    * @param visitor Visitor invoked against each row.    * @throws IOException    */
specifier|public
specifier|static
name|void
name|fullScan
parameter_list|(
name|CatalogTracker
name|catalogTracker
parameter_list|,
specifier|final
name|Visitor
name|visitor
parameter_list|)
throws|throws
name|IOException
block|{
name|fullScan
argument_list|(
name|catalogTracker
argument_list|,
name|visitor
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Performs a full scan of<code>.META.</code>.    * @param catalogTracker    * @param visitor Visitor invoked against each row.    * @param startrow Where to start the scan. Pass null if want to begin scan    * at first row (The visitor will stop the Scan when its done so no need to    * pass a stoprow).    * @throws IOException    */
specifier|public
specifier|static
name|void
name|fullScan
parameter_list|(
name|CatalogTracker
name|catalogTracker
parameter_list|,
specifier|final
name|Visitor
name|visitor
parameter_list|,
specifier|final
name|byte
index|[]
name|startrow
parameter_list|)
throws|throws
name|IOException
block|{
name|fullScan
argument_list|(
name|catalogTracker
argument_list|,
name|visitor
argument_list|,
name|startrow
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Callers should call close on the returned {@link HTable} instance.    * @param catalogTracker We'll use this catalogtracker's connection    * @param tableName Table to get an {@link HTable} against.    * @return An {@link HTable} for<code>tableName</code>    * @throws IOException    */
specifier|private
specifier|static
name|HTable
name|getHTable
parameter_list|(
specifier|final
name|CatalogTracker
name|catalogTracker
parameter_list|,
specifier|final
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Passing the CatalogTracker's connection configuration ensures this
comment|// HTable instance uses the CatalogTracker's connection.
return|return
operator|new
name|HTable
argument_list|(
name|catalogTracker
operator|.
name|getConnection
argument_list|()
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|tableName
argument_list|)
return|;
block|}
comment|/**    * Callers should call close on the returned {@link HTable} instance.    * @param catalogTracker    * @param regionName    * @return    * @throws IOException    */
specifier|static
name|HTable
name|getCatalogHTable
parameter_list|(
specifier|final
name|CatalogTracker
name|catalogTracker
parameter_list|,
specifier|final
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|isMetaRegion
argument_list|(
name|regionName
argument_list|)
condition|?
name|getRootHTable
argument_list|(
name|catalogTracker
argument_list|)
else|:
name|getMetaHTable
argument_list|(
name|catalogTracker
argument_list|)
return|;
block|}
comment|/**    * Callers should call close on the returned {@link HTable} instance.    * @param ct    * @return An {@link HTable} for<code>.META.</code>    * @throws IOException    */
specifier|static
name|HTable
name|getMetaHTable
parameter_list|(
specifier|final
name|CatalogTracker
name|ct
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getHTable
argument_list|(
name|ct
argument_list|,
name|HConstants
operator|.
name|META_TABLE_NAME
argument_list|)
return|;
block|}
comment|/**    * Callers should call close on the returned {@link HTable} instance.    * @param ct    * @return An {@link HTable} for<code>-ROOT-</code>    * @throws IOException    */
specifier|static
name|HTable
name|getRootHTable
parameter_list|(
specifier|final
name|CatalogTracker
name|ct
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getHTable
argument_list|(
name|ct
argument_list|,
name|HConstants
operator|.
name|ROOT_TABLE_NAME
argument_list|)
return|;
block|}
comment|/**    * @param t Table to use (will be closed when done).    * @param g Get to run    * @throws IOException    */
specifier|private
specifier|static
name|Result
name|get
parameter_list|(
specifier|final
name|HTable
name|t
parameter_list|,
specifier|final
name|Get
name|g
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|t
operator|.
name|get
argument_list|(
name|g
argument_list|)
return|;
block|}
finally|finally
block|{
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Reads the location of META from ROOT.    * @param metaServer connection to server hosting ROOT    * @return location of META in ROOT where location, or null if not available    * @throws IOException    * @deprecated Does not retry; use {@link #readRegionLocation(CatalogTracker, byte[])    */
specifier|public
specifier|static
name|ServerName
name|readMetaLocation
parameter_list|(
name|HRegionInterface
name|metaServer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|readLocation
argument_list|(
name|metaServer
argument_list|,
name|CatalogTracker
operator|.
name|ROOT_REGION_NAME
argument_list|,
name|CatalogTracker
operator|.
name|META_REGION_NAME
argument_list|)
return|;
block|}
comment|/**    * Reads the location of the specified region    * @param catalogTracker    * @param regionName region whose location we are after    * @return location of region as a {@link ServerName} or null if not found    * @throws IOException    */
specifier|public
specifier|static
name|ServerName
name|readRegionLocation
parameter_list|(
name|CatalogTracker
name|catalogTracker
parameter_list|,
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
block|{
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|pair
init|=
name|getRegion
argument_list|(
name|catalogTracker
argument_list|,
name|regionName
argument_list|)
decl_stmt|;
return|return
operator|(
name|pair
operator|==
literal|null
operator|||
name|pair
operator|.
name|getSecond
argument_list|()
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|pair
operator|.
name|getSecond
argument_list|()
return|;
block|}
comment|// TODO: Remove when deprecated dependencies are removed.
specifier|private
specifier|static
name|ServerName
name|readLocation
parameter_list|(
name|HRegionInterface
name|metaServer
parameter_list|,
name|byte
index|[]
name|catalogRegionName
parameter_list|,
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
block|{
name|Result
name|r
init|=
literal|null
decl_stmt|;
try|try
block|{
name|r
operator|=
name|metaServer
operator|.
name|get
argument_list|(
name|catalogRegionName
argument_list|,
operator|new
name|Get
argument_list|(
name|regionName
argument_list|)
operator|.
name|addColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|SERVER_QUALIFIER
argument_list|)
operator|.
name|addColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|STARTCODE_QUALIFIER
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
name|e
parameter_list|)
block|{
comment|// Treat this exception + message as unavailable catalog table. Catch it
comment|// and fall through to return a null
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|net
operator|.
name|SocketException
name|e
parameter_list|)
block|{
comment|// Treat this exception + message as unavailable catalog table. Catch it
comment|// and fall through to return a null
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
name|IOException
name|ioe
init|=
name|re
operator|.
name|unwrapRemoteException
argument_list|()
decl_stmt|;
if|if
condition|(
name|ioe
operator|instanceof
name|NotServingRegionException
condition|)
block|{
comment|// Treat this NSRE as unavailable table.  Catch and fall through to
comment|// return null below
block|}
elseif|else
if|if
condition|(
name|ioe
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Server not running"
argument_list|)
condition|)
block|{
comment|// Treat as unavailable table.
block|}
else|else
block|{
throw|throw
name|re
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IOException
operator|&&
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Connection reset by peer"
argument_list|)
condition|)
block|{
comment|// Treat this exception + message as unavailable catalog table. Catch it
comment|// and fall through to return a null
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
if|if
condition|(
name|r
operator|==
literal|null
operator|||
name|r
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|getServerNameFromCatalogResult
argument_list|(
name|r
argument_list|)
return|;
block|}
comment|/**    * Gets the region info and assignment for the specified region.    * @param catalogTracker    * @param regionName Region to lookup.    * @return Location and HRegionInfo for<code>regionName</code>    * @throws IOException    */
specifier|public
specifier|static
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|getRegion
parameter_list|(
name|CatalogTracker
name|catalogTracker
parameter_list|,
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|get
argument_list|(
name|getCatalogHTable
argument_list|(
name|catalogTracker
argument_list|,
name|regionName
argument_list|)
argument_list|,
name|get
argument_list|)
decl_stmt|;
return|return
operator|(
name|r
operator|==
literal|null
operator|||
name|r
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
literal|null
else|:
name|parseCatalogResult
argument_list|(
name|r
argument_list|)
return|;
block|}
comment|/**    * Extract a {@link ServerName}    * For use on catalog table {@link Result}.    * @param r Result to pull from    * @return A ServerName instance or null if necessary fields not found or empty.    */
specifier|public
specifier|static
name|ServerName
name|getServerNameFromCatalogResult
parameter_list|(
specifier|final
name|Result
name|r
parameter_list|)
block|{
name|byte
index|[]
name|value
init|=
name|r
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|SERVER_QUALIFIER
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|length
operator|==
literal|0
condition|)
return|return
literal|null
return|;
name|String
name|hostAndPort
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|value
operator|=
name|r
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|STARTCODE_QUALIFIER
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|length
operator|==
literal|0
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|ServerName
argument_list|(
name|hostAndPort
argument_list|,
name|Bytes
operator|.
name|toLong
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Extract a HRegionInfo and ServerName.    * For use on catalog table {@link Result}.    * @param r Result to pull from    * @return A pair of the {@link HRegionInfo} and the {@link ServerName}    * (or null for server address if no address set in .META.).    * @throws IOException    */
specifier|public
specifier|static
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|parseCatalogResult
parameter_list|(
specifier|final
name|Result
name|r
parameter_list|)
throws|throws
name|IOException
block|{
name|HRegionInfo
name|info
init|=
name|parseHRegionInfoFromCatalogResult
argument_list|(
name|r
argument_list|,
name|HConstants
operator|.
name|REGIONINFO_QUALIFIER
argument_list|)
decl_stmt|;
name|ServerName
name|sn
init|=
name|getServerNameFromCatalogResult
argument_list|(
name|r
argument_list|)
decl_stmt|;
return|return
operator|new
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|(
name|info
argument_list|,
name|sn
argument_list|)
return|;
block|}
comment|/**    * Parse the content of the cell at {@link HConstants#CATALOG_FAMILY} and    *<code>qualifier</code> as an HRegionInfo and return it, or null.    * For use on catalog table {@link Result}.    * @param r Result instance to pull from.    * @param qualifier Column family qualifier -- either    * {@link HConstants#SPLITA_QUALIFIER}, {@link HConstants#SPLITB_QUALIFIER} or    * {@link HConstants#REGIONINFO_QUALIFIER}.    * @return An HRegionInfo instance or null.    * @throws IOException    */
specifier|public
specifier|static
name|HRegionInfo
name|parseHRegionInfoFromCatalogResult
parameter_list|(
specifier|final
name|Result
name|r
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|bytes
init|=
name|r
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|qualifier
argument_list|)
decl_stmt|;
if|if
condition|(
name|bytes
operator|==
literal|null
operator|||
name|bytes
operator|.
name|length
operator|<=
literal|0
condition|)
return|return
literal|null
return|;
return|return
name|Writables
operator|.
name|getHRegionInfoOrNull
argument_list|(
name|bytes
argument_list|)
return|;
block|}
comment|/**    * Checks if the specified table exists.  Looks at the META table hosted on    * the specified server.    * @param catalogTracker    * @param tableName table to check    * @return true if the table exists in meta, false if not    * @throws IOException    */
specifier|public
specifier|static
name|boolean
name|tableExists
parameter_list|(
name|CatalogTracker
name|catalogTracker
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|tableName
operator|.
name|equals
argument_list|(
name|HTableDescriptor
operator|.
name|ROOT_TABLEDESC
operator|.
name|getNameAsString
argument_list|()
argument_list|)
operator|||
name|tableName
operator|.
name|equals
argument_list|(
name|HTableDescriptor
operator|.
name|META_TABLEDESC
operator|.
name|getNameAsString
argument_list|()
argument_list|)
condition|)
block|{
comment|// Catalog tables always exist.
return|return
literal|true
return|;
block|}
specifier|final
name|byte
index|[]
name|tableNameBytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
comment|// Make a version of ResultCollectingVisitor that only collects the first
name|CollectingVisitor
argument_list|<
name|HRegionInfo
argument_list|>
name|visitor
init|=
operator|new
name|CollectingVisitor
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
block|{
specifier|private
name|HRegionInfo
name|current
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|Result
name|r
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|current
operator|=
name|parseHRegionInfoFromCatalogResult
argument_list|(
name|r
argument_list|,
name|HConstants
operator|.
name|REGIONINFO_QUALIFIER
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|current
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No serialized HRegionInfo in "
operator|+
name|r
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
name|isInsideTable
argument_list|(
name|this
operator|.
name|current
argument_list|,
name|tableNameBytes
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|current
operator|.
name|isSplitParent
argument_list|()
condition|)
return|return
literal|true
return|;
comment|// Else call super and add this Result to the collection.
name|super
operator|.
name|visit
argument_list|(
name|r
argument_list|)
expr_stmt|;
comment|// Stop collecting regions from table after we get one.
return|return
literal|false
return|;
block|}
annotation|@
name|Override
name|void
name|add
parameter_list|(
name|Result
name|r
parameter_list|)
block|{
comment|// Add the current HRI.
name|this
operator|.
name|results
operator|.
name|add
argument_list|(
name|this
operator|.
name|current
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|fullScan
argument_list|(
name|catalogTracker
argument_list|,
name|visitor
argument_list|,
name|getTableStartRowForMeta
argument_list|(
name|tableNameBytes
argument_list|)
argument_list|)
expr_stmt|;
comment|// If visitor has results>= 1 then table exists.
return|return
name|visitor
operator|.
name|getResults
argument_list|()
operator|.
name|size
argument_list|()
operator|>=
literal|1
return|;
block|}
comment|/**    * Gets all of the regions of the specified table.    * @param catalogTracker    * @param tableName    * @return Ordered list of {@link HRegionInfo}.    * @throws IOException    */
specifier|public
specifier|static
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|getTableRegions
parameter_list|(
name|CatalogTracker
name|catalogTracker
parameter_list|,
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getTableRegions
argument_list|(
name|catalogTracker
argument_list|,
name|tableName
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Gets all of the regions of the specified table.    * @param catalogTracker    * @param tableName    * @param excludeOfflinedSplitParents If true, do not include offlined split    * parents in the return.    * @return Ordered list of {@link HRegionInfo}.    * @throws IOException    */
specifier|public
specifier|static
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|getTableRegions
parameter_list|(
name|CatalogTracker
name|catalogTracker
parameter_list|,
name|byte
index|[]
name|tableName
parameter_list|,
specifier|final
name|boolean
name|excludeOfflinedSplitParents
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|result
operator|=
name|getTableRegionsAndLocations
argument_list|(
name|catalogTracker
argument_list|,
name|tableName
argument_list|,
name|excludeOfflinedSplitParents
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|getListOfHRegionInfos
argument_list|(
name|result
argument_list|)
return|;
block|}
specifier|static
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|getListOfHRegionInfos
parameter_list|(
specifier|final
name|List
argument_list|<
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|pairs
parameter_list|)
block|{
if|if
condition|(
name|pairs
operator|==
literal|null
operator|||
name|pairs
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|(
name|pairs
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|pair
range|:
name|pairs
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|pair
operator|.
name|getFirst
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * @param current    * @param tableName    * @return True if<code>current</code> tablename is equal to    *<code>tableName</code>    */
specifier|static
name|boolean
name|isInsideTable
parameter_list|(
specifier|final
name|HRegionInfo
name|current
parameter_list|,
specifier|final
name|byte
index|[]
name|tableName
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|equals
argument_list|(
name|tableName
argument_list|,
name|current
operator|.
name|getTableName
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * @param tableName    * @return Place to start Scan in<code>.META.</code> when passed a    *<code>tableName</code>; returns&lt;tableName&rt;&lt;,&rt;&lt;,&rt;    */
specifier|static
name|byte
index|[]
name|getTableStartRowForMeta
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|byte
index|[]
name|startRow
init|=
operator|new
name|byte
index|[
name|tableName
operator|.
name|length
operator|+
literal|2
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|tableName
argument_list|,
literal|0
argument_list|,
name|startRow
argument_list|,
literal|0
argument_list|,
name|tableName
operator|.
name|length
argument_list|)
expr_stmt|;
name|startRow
index|[
name|startRow
operator|.
name|length
operator|-
literal|2
index|]
operator|=
name|HRegionInfo
operator|.
name|DELIMITER
expr_stmt|;
name|startRow
index|[
name|startRow
operator|.
name|length
operator|-
literal|1
index|]
operator|=
name|HRegionInfo
operator|.
name|DELIMITER
expr_stmt|;
return|return
name|startRow
return|;
block|}
comment|/**    * This method creates a Scan object that will only scan catalog rows that    * belong to the specified table. It doesn't specify any columns.    * This is a better alternative to just using a start row and scan until    * it hits a new table since that requires parsing the HRI to get the table    * name.    * @param tableName bytes of table's name    * @return configured Scan object    */
specifier|public
specifier|static
name|Scan
name|getScanForTableName
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|String
name|strName
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
comment|// Start key is just the table name with delimiters
name|byte
index|[]
name|startKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|strName
operator|+
literal|",,"
argument_list|)
decl_stmt|;
comment|// Stop key appends the smallest possible char to the table name
name|byte
index|[]
name|stopKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|strName
operator|+
literal|" ,,"
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|startKey
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
name|stopKey
argument_list|)
expr_stmt|;
return|return
name|scan
return|;
block|}
comment|/**    * @param catalogTracker    * @param tableName    * @return Return list of regioninfos and server.    * @throws IOException    * @throws InterruptedException    */
specifier|public
specifier|static
name|List
argument_list|<
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|getTableRegionsAndLocations
parameter_list|(
name|CatalogTracker
name|catalogTracker
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|getTableRegionsAndLocations
argument_list|(
name|catalogTracker
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|tableName
argument_list|)
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * @param catalogTracker    * @param tableName    * @return Return list of regioninfos and server addresses.    * @throws IOException    * @throws InterruptedException    */
specifier|public
specifier|static
name|List
argument_list|<
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|getTableRegionsAndLocations
parameter_list|(
specifier|final
name|CatalogTracker
name|catalogTracker
parameter_list|,
specifier|final
name|byte
index|[]
name|tableName
parameter_list|,
specifier|final
name|boolean
name|excludeOfflinedSplitParents
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|ROOT_TABLE_NAME
argument_list|)
condition|)
block|{
comment|// If root, do a bit of special handling.
name|ServerName
name|serverName
init|=
name|catalogTracker
operator|.
name|getRootLocation
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|(
name|HRegionInfo
operator|.
name|ROOT_REGIONINFO
argument_list|,
name|serverName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
comment|// Make a version of CollectingVisitor that collects HRegionInfo and ServerAddress
name|CollectingVisitor
argument_list|<
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|visitor
init|=
operator|new
name|CollectingVisitor
argument_list|<
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|private
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|current
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|Result
name|r
parameter_list|)
throws|throws
name|IOException
block|{
name|HRegionInfo
name|hri
init|=
name|parseHRegionInfoFromCatalogResult
argument_list|(
name|r
argument_list|,
name|HConstants
operator|.
name|REGIONINFO_QUALIFIER
argument_list|)
decl_stmt|;
if|if
condition|(
name|hri
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No serialized HRegionInfo in "
operator|+
name|r
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
name|isInsideTable
argument_list|(
name|hri
argument_list|,
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|excludeOfflinedSplitParents
operator|&&
name|hri
operator|.
name|isSplitParent
argument_list|()
condition|)
return|return
literal|true
return|;
name|ServerName
name|sn
init|=
name|getServerNameFromCatalogResult
argument_list|(
name|r
argument_list|)
decl_stmt|;
comment|// Populate this.current so available when we call #add
name|this
operator|.
name|current
operator|=
operator|new
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|(
name|hri
argument_list|,
name|sn
argument_list|)
expr_stmt|;
comment|// Else call super and add this Result to the collection.
return|return
name|super
operator|.
name|visit
argument_list|(
name|r
argument_list|)
return|;
block|}
annotation|@
name|Override
name|void
name|add
parameter_list|(
name|Result
name|r
parameter_list|)
block|{
name|this
operator|.
name|results
operator|.
name|add
argument_list|(
name|this
operator|.
name|current
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|fullScan
argument_list|(
name|catalogTracker
argument_list|,
name|visitor
argument_list|,
name|getTableStartRowForMeta
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|Bytes
operator|.
name|equals
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|META_TABLE_NAME
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|visitor
operator|.
name|getResults
argument_list|()
return|;
block|}
comment|/**    * @param catalogTracker    * @param hsi Server specification    * @return List of user regions installed on this server (does not include    * catalog regions).    * @throws IOException    */
specifier|public
specifier|static
name|NavigableMap
argument_list|<
name|HRegionInfo
argument_list|,
name|Result
argument_list|>
name|getServerUserRegions
parameter_list|(
name|CatalogTracker
name|catalogTracker
parameter_list|,
specifier|final
name|ServerName
name|serverName
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|NavigableMap
argument_list|<
name|HRegionInfo
argument_list|,
name|Result
argument_list|>
name|hris
init|=
operator|new
name|TreeMap
argument_list|<
name|HRegionInfo
argument_list|,
name|Result
argument_list|>
argument_list|()
decl_stmt|;
comment|// Fill the above hris map with entries from .META. that have the passed
comment|// servername.
name|CollectingVisitor
argument_list|<
name|Result
argument_list|>
name|v
init|=
operator|new
name|CollectingVisitor
argument_list|<
name|Result
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
name|void
name|add
parameter_list|(
name|Result
name|r
parameter_list|)
block|{
if|if
condition|(
name|r
operator|==
literal|null
operator|||
name|r
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|ServerName
name|sn
init|=
name|getServerNameFromCatalogResult
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|sn
operator|!=
literal|null
operator|&&
name|sn
operator|.
name|equals
argument_list|(
name|serverName
argument_list|)
condition|)
name|this
operator|.
name|results
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|fullScan
argument_list|(
name|catalogTracker
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Result
argument_list|>
name|results
init|=
name|v
operator|.
name|getResults
argument_list|()
decl_stmt|;
if|if
condition|(
name|results
operator|!=
literal|null
operator|&&
operator|!
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Convert results to Map keyed by HRI
for|for
control|(
name|Result
name|r
range|:
name|results
control|)
block|{
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|p
init|=
name|parseCatalogResult
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
operator|&&
name|p
operator|.
name|getFirst
argument_list|()
operator|!=
literal|null
condition|)
name|hris
operator|.
name|put
argument_list|(
name|p
operator|.
name|getFirst
argument_list|()
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|hris
return|;
block|}
specifier|public
specifier|static
name|void
name|fullScanMetaAndPrint
parameter_list|(
specifier|final
name|CatalogTracker
name|catalogTracker
parameter_list|)
throws|throws
name|IOException
block|{
name|Visitor
name|v
init|=
operator|new
name|Visitor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|Result
name|r
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|r
operator|==
literal|null
operator|||
name|r
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|true
return|;
name|LOG
operator|.
name|info
argument_list|(
literal|"fullScanMetaAndPrint.Current Meta Row: "
operator|+
name|r
argument_list|)
expr_stmt|;
name|HRegionInfo
name|hrim
init|=
name|MetaEditor
operator|.
name|getHRegionInfo
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"fullScanMetaAndPrint.HRI Print= "
operator|+
name|hrim
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|fullScan
argument_list|(
name|catalogTracker
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
comment|/**    * Fully scan a given region, on a given server starting with given row.    * @param hRegionInterface region server    * @param visitor visitor    * @param regionName name of region    * @param startrow start row    * @throws IOException    * @deprecated Does not retry; use fullScan xxx instead.    x    */
specifier|public
specifier|static
name|void
name|fullScan
parameter_list|(
name|HRegionInterface
name|hRegionInterface
parameter_list|,
name|Visitor
name|visitor
parameter_list|,
specifier|final
name|byte
index|[]
name|regionName
parameter_list|,
name|byte
index|[]
name|startrow
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|hRegionInterface
operator|==
literal|null
condition|)
return|return;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
if|if
condition|(
name|startrow
operator|!=
literal|null
condition|)
name|scan
operator|.
name|setStartRow
argument_list|(
name|startrow
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
name|long
name|scannerid
init|=
name|hRegionInterface
operator|.
name|openScanner
argument_list|(
name|regionName
argument_list|,
name|scan
argument_list|)
decl_stmt|;
try|try
block|{
name|Result
name|data
decl_stmt|;
while|while
condition|(
operator|(
name|data
operator|=
name|hRegionInterface
operator|.
name|next
argument_list|(
name|scannerid
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|data
operator|.
name|isEmpty
argument_list|()
condition|)
name|visitor
operator|.
name|visit
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|hRegionInterface
operator|.
name|close
argument_list|(
name|scannerid
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
comment|/**    * Performs a full scan of a catalog table.    * @param catalogTracker    * @param visitor Visitor invoked against each row.    * @param startrow Where to start the scan. Pass null if want to begin scan    * at first row.    * @param scanRoot True if we are to scan<code>-ROOT-</code> rather than    *<code>.META.</code>, the default (pass false to scan .META.)    * @throws IOException    */
specifier|static
name|void
name|fullScan
parameter_list|(
name|CatalogTracker
name|catalogTracker
parameter_list|,
specifier|final
name|Visitor
name|visitor
parameter_list|,
specifier|final
name|byte
index|[]
name|startrow
parameter_list|,
specifier|final
name|boolean
name|scanRoot
parameter_list|)
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
if|if
condition|(
name|startrow
operator|!=
literal|null
condition|)
name|scan
operator|.
name|setStartRow
argument_list|(
name|startrow
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
name|HTable
name|metaTable
init|=
name|scanRoot
condition|?
name|getRootHTable
argument_list|(
name|catalogTracker
argument_list|)
else|:
name|getMetaHTable
argument_list|(
name|catalogTracker
argument_list|)
decl_stmt|;
name|ResultScanner
name|scanner
init|=
name|metaTable
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
try|try
block|{
name|Result
name|data
decl_stmt|;
while|while
condition|(
operator|(
name|data
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|data
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
comment|// Break if visit returns false.
if|if
condition|(
operator|!
name|visitor
operator|.
name|visit
argument_list|(
name|data
argument_list|)
condition|)
break|break;
block|}
block|}
finally|finally
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|metaTable
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return;
block|}
comment|/**    * Implementations 'visit' a catalog table row.    */
specifier|public
interface|interface
name|Visitor
block|{
comment|/**      * Visit the catalog table row.      * @param r A row from catalog table      * @return True if we are to proceed scanning the table, else false if      * we are to stop now.      */
specifier|public
name|boolean
name|visit
parameter_list|(
specifier|final
name|Result
name|r
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
comment|/**    * A {@link Visitor} that collects content out of passed {@link Result}.    */
specifier|static
specifier|abstract
class|class
name|CollectingVisitor
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Visitor
block|{
specifier|final
name|List
argument_list|<
name|T
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|Result
name|r
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|r
operator|==
literal|null
operator|||
name|r
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|true
return|;
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|abstract
name|void
name|add
parameter_list|(
name|Result
name|r
parameter_list|)
function_decl|;
comment|/**      * @return Collected results; wait till visits complete to collect all      * possible results      */
name|List
argument_list|<
name|T
argument_list|>
name|getResults
parameter_list|()
block|{
return|return
name|this
operator|.
name|results
return|;
block|}
block|}
comment|/**    * Collects all returned.    */
specifier|static
class|class
name|CollectAllVisitor
extends|extends
name|CollectingVisitor
argument_list|<
name|Result
argument_list|>
block|{
annotation|@
name|Override
name|void
name|add
parameter_list|(
name|Result
name|r
parameter_list|)
block|{
name|this
operator|.
name|results
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

