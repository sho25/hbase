begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|encoding
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ByteBufferUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|RawComparator
import|;
end_import

begin_comment
comment|/**  * Compress using bit fields to avoid repetitions of certain fields.  * Also compress the value and key size.  *  * Format:  *<ul>  *<li> 1 byte:    flag</li>  *<li> 1-4 bytes: key length</li>  *<li> 1-4 bytes: value length</li>  *<li> Key parts which are new (number of bytes varies)</li>  *<li> Value (number of bytes varies)</li>  *</ul>  *  * In worst case compressed KeyValue will be one byte longer than original.  */
end_comment

begin_class
specifier|public
class|class
name|BitsetKeyDeltaEncoder
extends|extends
name|BufferedDataBlockEncoder
block|{
comment|/* Constants used in flag byte */
specifier|static
specifier|final
name|int
name|SAME_ROW_FLAG
init|=
literal|1
decl_stmt|;
specifier|static
specifier|final
name|int
name|SAME_FAMILY_FLAG
init|=
literal|1
operator|<<
literal|1
decl_stmt|;
specifier|static
specifier|final
name|int
name|SAME_QUALIFIER_FLAG
init|=
literal|1
operator|<<
literal|2
decl_stmt|;
specifier|static
specifier|final
name|int
name|SAME_TYPE_FLAG
init|=
literal|1
operator|<<
literal|3
decl_stmt|;
specifier|static
specifier|final
name|int
name|VALUE_SIZE_MASK
init|=
operator|(
literal|1
operator|<<
literal|4
operator|)
operator||
operator|(
literal|1
operator|<<
literal|5
operator|)
decl_stmt|;
specifier|static
specifier|final
name|int
name|VALUE_SIZE_SHIFT
init|=
literal|4
decl_stmt|;
specifier|static
specifier|final
name|int
name|KEY_SIZE_MASK
init|=
operator|(
literal|1
operator|<<
literal|6
operator|)
operator||
operator|(
literal|1
operator|<<
literal|7
operator|)
decl_stmt|;
specifier|static
specifier|final
name|int
name|KEY_SIZE_SHIFT
init|=
literal|6
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|compressKeyValues
parameter_list|(
name|DataOutputStream
name|out
parameter_list|,
name|ByteBuffer
name|in
parameter_list|,
name|boolean
name|includesMemstoreTS
parameter_list|)
throws|throws
name|IOException
block|{
name|in
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|ByteBufferUtils
operator|.
name|putInt
argument_list|(
name|out
argument_list|,
name|in
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
name|CompressionState
name|state
init|=
operator|new
name|CompressionState
argument_list|()
decl_stmt|;
while|while
condition|(
name|in
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|compressSingleKeyValue
argument_list|(
name|state
argument_list|,
name|out
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|afterEncodingKeyValue
argument_list|(
name|in
argument_list|,
name|out
argument_list|,
name|includesMemstoreTS
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ByteBuffer
name|uncompressKeyValues
parameter_list|(
name|DataInputStream
name|in
parameter_list|,
name|int
name|allocHeaderLength
parameter_list|,
name|int
name|skipLastBytes
parameter_list|,
name|boolean
name|includesMemstoreTS
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|decompressedSize
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|ByteBuffer
name|buffer
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|decompressedSize
operator|+
name|allocHeaderLength
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|position
argument_list|(
name|allocHeaderLength
argument_list|)
expr_stmt|;
name|CompressionState
name|state
init|=
operator|new
name|CompressionState
argument_list|()
decl_stmt|;
while|while
condition|(
name|in
operator|.
name|available
argument_list|()
operator|>
name|skipLastBytes
condition|)
block|{
name|uncompressSingleKeyValue
argument_list|(
name|in
argument_list|,
name|buffer
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|afterDecodingKeyValue
argument_list|(
name|in
argument_list|,
name|buffer
argument_list|,
name|includesMemstoreTS
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|available
argument_list|()
operator|!=
name|skipLastBytes
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Read too much bytes."
argument_list|)
throw|;
block|}
return|return
name|buffer
return|;
block|}
specifier|private
name|void
name|uncompressSingleKeyValue
parameter_list|(
name|DataInputStream
name|in
parameter_list|,
name|ByteBuffer
name|buffer
parameter_list|,
name|CompressionState
name|state
parameter_list|)
throws|throws
name|IOException
throws|,
name|EncoderBufferTooSmallException
block|{
name|byte
name|flag
init|=
name|in
operator|.
name|readByte
argument_list|()
decl_stmt|;
comment|// Read key length
name|int
name|keyLengthFitInBytes
init|=
literal|1
operator|+
operator|(
operator|(
name|flag
operator|&
name|KEY_SIZE_MASK
operator|)
operator|>>>
name|KEY_SIZE_SHIFT
operator|)
decl_stmt|;
name|int
name|keyLength
init|=
name|ByteBufferUtils
operator|.
name|readCompressedInt
argument_list|(
name|in
argument_list|,
name|keyLengthFitInBytes
argument_list|)
decl_stmt|;
comment|// Read value length
name|int
name|valueLengthFitInBytes
init|=
literal|1
operator|+
operator|(
operator|(
name|flag
operator|&
name|VALUE_SIZE_MASK
operator|)
operator|>>>
name|VALUE_SIZE_SHIFT
operator|)
decl_stmt|;
name|int
name|valueLength
init|=
name|ByteBufferUtils
operator|.
name|readCompressedInt
argument_list|(
name|in
argument_list|,
name|valueLengthFitInBytes
argument_list|)
decl_stmt|;
comment|// Create buffer blob and put length and size there.
name|ByteBufferUtils
operator|.
name|ensureSpace
argument_list|(
name|buffer
argument_list|,
name|keyLength
operator|+
name|valueLength
operator|+
name|KeyValue
operator|.
name|ROW_OFFSET
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|putInt
argument_list|(
name|keyLength
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|putInt
argument_list|(
name|valueLength
argument_list|)
expr_stmt|;
name|int
name|prevElementOffset
init|=
name|state
operator|.
name|prevOffset
operator|+
name|KeyValue
operator|.
name|ROW_OFFSET
decl_stmt|;
name|int
name|prevRowOffset
init|=
name|prevElementOffset
decl_stmt|;
name|prevElementOffset
operator|+=
name|state
operator|.
name|rowLength
operator|+
name|KeyValue
operator|.
name|ROW_LENGTH_SIZE
expr_stmt|;
comment|// Read row
if|if
condition|(
name|state
operator|.
name|isFirst
argument_list|()
operator|||
operator|(
name|flag
operator|&
name|SAME_ROW_FLAG
operator|)
operator|==
literal|0
condition|)
block|{
name|state
operator|.
name|rowLength
operator|=
name|in
operator|.
name|readShort
argument_list|()
expr_stmt|;
name|buffer
operator|.
name|putShort
argument_list|(
name|state
operator|.
name|rowLength
argument_list|)
expr_stmt|;
name|ByteBufferUtils
operator|.
name|copyFromStream
argument_list|(
name|in
argument_list|,
name|buffer
argument_list|,
name|state
operator|.
name|rowLength
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ByteBufferUtils
operator|.
name|copyFromBuffer
argument_list|(
name|buffer
argument_list|,
name|buffer
argument_list|,
name|prevRowOffset
argument_list|,
name|state
operator|.
name|rowLength
operator|+
name|KeyValue
operator|.
name|ROW_LENGTH_SIZE
argument_list|)
expr_stmt|;
block|}
comment|// Read family
name|int
name|prevFamilyOffset
init|=
name|prevElementOffset
decl_stmt|;
name|prevElementOffset
operator|+=
name|state
operator|.
name|familyLength
operator|+
name|KeyValue
operator|.
name|FAMILY_LENGTH_SIZE
expr_stmt|;
if|if
condition|(
name|state
operator|.
name|isFirst
argument_list|()
operator|||
operator|(
name|flag
operator|&
name|SAME_FAMILY_FLAG
operator|)
operator|==
literal|0
condition|)
block|{
name|state
operator|.
name|familyLength
operator|=
name|in
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|buffer
operator|.
name|put
argument_list|(
name|state
operator|.
name|familyLength
argument_list|)
expr_stmt|;
name|ByteBufferUtils
operator|.
name|copyFromStream
argument_list|(
name|in
argument_list|,
name|buffer
argument_list|,
name|state
operator|.
name|familyLength
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ByteBufferUtils
operator|.
name|copyFromBuffer
argument_list|(
name|buffer
argument_list|,
name|buffer
argument_list|,
name|prevFamilyOffset
argument_list|,
name|state
operator|.
name|familyLength
operator|+
name|KeyValue
operator|.
name|FAMILY_LENGTH_SIZE
argument_list|)
expr_stmt|;
block|}
comment|// Read qualifier
if|if
condition|(
name|state
operator|.
name|isFirst
argument_list|()
operator|||
operator|(
name|flag
operator|&
name|SAME_QUALIFIER_FLAG
operator|)
operator|==
literal|0
condition|)
block|{
name|state
operator|.
name|qualifierLength
operator|=
name|keyLength
operator|-
name|state
operator|.
name|rowLength
operator|-
name|state
operator|.
name|familyLength
operator|-
name|KeyValue
operator|.
name|KEY_INFRASTRUCTURE_SIZE
expr_stmt|;
name|ByteBufferUtils
operator|.
name|copyFromStream
argument_list|(
name|in
argument_list|,
name|buffer
argument_list|,
name|state
operator|.
name|qualifierLength
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ByteBufferUtils
operator|.
name|copyFromBuffer
argument_list|(
name|buffer
argument_list|,
name|buffer
argument_list|,
name|prevElementOffset
argument_list|,
name|state
operator|.
name|qualifierLength
argument_list|)
expr_stmt|;
block|}
comment|// Read timestamp
name|ByteBufferUtils
operator|.
name|copyFromStream
argument_list|(
name|in
argument_list|,
name|buffer
argument_list|,
name|KeyValue
operator|.
name|TIMESTAMP_SIZE
argument_list|)
expr_stmt|;
comment|// Read type
if|if
condition|(
name|state
operator|.
name|isFirst
argument_list|()
operator|||
operator|(
name|flag
operator|&
name|SAME_TYPE_FLAG
operator|)
operator|==
literal|0
condition|)
block|{
name|state
operator|.
name|type
operator|=
name|in
operator|.
name|readByte
argument_list|()
expr_stmt|;
block|}
name|buffer
operator|.
name|put
argument_list|(
name|state
operator|.
name|type
argument_list|)
expr_stmt|;
comment|// Read value
name|state
operator|.
name|prevOffset
operator|=
name|buffer
operator|.
name|position
argument_list|()
operator|-
name|keyLength
operator|-
name|KeyValue
operator|.
name|ROW_OFFSET
expr_stmt|;
name|ByteBufferUtils
operator|.
name|copyFromStream
argument_list|(
name|in
argument_list|,
name|buffer
argument_list|,
name|valueLength
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|compressSingleKeyValue
parameter_list|(
name|CompressionState
name|state
parameter_list|,
name|OutputStream
name|out
parameter_list|,
name|ByteBuffer
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|kvPos
init|=
name|in
operator|.
name|position
argument_list|()
decl_stmt|;
name|int
name|keyLength
init|=
name|in
operator|.
name|getInt
argument_list|()
decl_stmt|;
name|int
name|valueLength
init|=
name|in
operator|.
name|getInt
argument_list|()
decl_stmt|;
name|byte
name|flags
init|=
literal|0
decl_stmt|;
comment|// Key length
name|int
name|keyLengthFitsInBytes
init|=
name|ByteBufferUtils
operator|.
name|intFitsIn
argument_list|(
name|keyLength
argument_list|)
decl_stmt|;
name|flags
operator||=
operator|(
name|keyLengthFitsInBytes
operator|-
literal|1
operator|)
operator|<<
name|KEY_SIZE_SHIFT
expr_stmt|;
comment|// Value length
name|int
name|valueLengthFitsInBytes
init|=
name|ByteBufferUtils
operator|.
name|intFitsIn
argument_list|(
name|valueLength
argument_list|)
decl_stmt|;
name|flags
operator||=
operator|(
name|valueLengthFitsInBytes
operator|-
literal|1
operator|)
operator|<<
name|VALUE_SIZE_SHIFT
expr_stmt|;
if|if
condition|(
name|state
operator|.
name|isFirst
argument_list|()
condition|)
block|{
name|ByteBufferUtils
operator|.
name|copyToStream
argument_list|(
name|out
argument_list|,
name|flags
argument_list|)
expr_stmt|;
name|writeKeyValueCompressedLengths
argument_list|(
name|out
argument_list|,
name|in
argument_list|,
name|keyLengthFitsInBytes
argument_list|,
name|valueLengthFitsInBytes
argument_list|)
expr_stmt|;
name|state
operator|.
name|readKey
argument_list|(
name|in
argument_list|,
name|keyLength
argument_list|,
name|valueLength
argument_list|)
expr_stmt|;
name|ByteBufferUtils
operator|.
name|copyToStream
argument_list|(
name|out
argument_list|,
name|in
argument_list|,
name|keyLength
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|in
operator|.
name|mark
argument_list|()
expr_stmt|;
comment|// beginning of the key
name|int
name|prevElementOffset
init|=
name|state
operator|.
name|prevOffset
operator|+
name|KeyValue
operator|.
name|ROW_OFFSET
operator|+
name|KeyValue
operator|.
name|ROW_LENGTH_SIZE
decl_stmt|;
comment|// Row same
name|short
name|rowLength
init|=
name|in
operator|.
name|getShort
argument_list|()
decl_stmt|;
name|int
name|prevRowOffset
init|=
name|prevElementOffset
decl_stmt|;
name|prevElementOffset
operator|+=
name|state
operator|.
name|rowLength
operator|+
name|KeyValue
operator|.
name|FAMILY_LENGTH_SIZE
expr_stmt|;
if|if
condition|(
name|ByteBufferUtils
operator|.
name|arePartsEqual
argument_list|(
name|in
argument_list|,
name|in
operator|.
name|position
argument_list|()
argument_list|,
name|rowLength
argument_list|,
name|prevRowOffset
argument_list|,
name|state
operator|.
name|rowLength
argument_list|)
condition|)
block|{
name|flags
operator||=
name|SAME_ROW_FLAG
expr_stmt|;
block|}
else|else
block|{
name|state
operator|.
name|rowLength
operator|=
name|rowLength
expr_stmt|;
block|}
name|ByteBufferUtils
operator|.
name|skip
argument_list|(
name|in
argument_list|,
name|rowLength
argument_list|)
expr_stmt|;
comment|// Family same
name|byte
name|familyLength
init|=
name|in
operator|.
name|get
argument_list|()
decl_stmt|;
name|int
name|prevFamilyOffset
init|=
name|prevElementOffset
decl_stmt|;
name|prevElementOffset
operator|+=
name|state
operator|.
name|familyLength
expr_stmt|;
if|if
condition|(
name|ByteBufferUtils
operator|.
name|arePartsEqual
argument_list|(
name|in
argument_list|,
name|in
operator|.
name|position
argument_list|()
argument_list|,
name|familyLength
argument_list|,
name|prevFamilyOffset
argument_list|,
name|state
operator|.
name|familyLength
argument_list|)
condition|)
block|{
name|flags
operator||=
name|SAME_FAMILY_FLAG
expr_stmt|;
block|}
else|else
block|{
name|state
operator|.
name|familyLength
operator|=
name|familyLength
expr_stmt|;
block|}
name|ByteBufferUtils
operator|.
name|skip
argument_list|(
name|in
argument_list|,
name|familyLength
argument_list|)
expr_stmt|;
comment|// Qualifier same
name|int
name|qualifierLength
init|=
name|keyLength
operator|-
name|rowLength
operator|-
name|familyLength
operator|-
name|KeyValue
operator|.
name|KEY_INFRASTRUCTURE_SIZE
decl_stmt|;
name|int
name|prevQualifierOffset
init|=
name|prevElementOffset
decl_stmt|;
if|if
condition|(
name|ByteBufferUtils
operator|.
name|arePartsEqual
argument_list|(
name|in
argument_list|,
name|in
operator|.
name|position
argument_list|()
argument_list|,
name|qualifierLength
argument_list|,
name|prevQualifierOffset
argument_list|,
name|state
operator|.
name|qualifierLength
argument_list|)
condition|)
block|{
name|flags
operator||=
name|SAME_QUALIFIER_FLAG
expr_stmt|;
block|}
else|else
block|{
name|state
operator|.
name|qualifierLength
operator|=
name|qualifierLength
expr_stmt|;
block|}
name|ByteBufferUtils
operator|.
name|skip
argument_list|(
name|in
argument_list|,
name|qualifierLength
operator|+
name|KeyValue
operator|.
name|TIMESTAMP_SIZE
argument_list|)
expr_stmt|;
comment|// Type same
name|byte
name|type
init|=
name|in
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|state
operator|.
name|type
condition|)
block|{
name|flags
operator||=
name|SAME_TYPE_FLAG
expr_stmt|;
block|}
else|else
block|{
name|state
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
comment|// write it
name|ByteBufferUtils
operator|.
name|copyToStream
argument_list|(
name|out
argument_list|,
name|flags
argument_list|)
expr_stmt|;
name|in
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// return to beginning of the key
name|writeKeyValueCompressedLengths
argument_list|(
name|out
argument_list|,
name|in
argument_list|,
name|keyLengthFitsInBytes
argument_list|,
name|valueLengthFitsInBytes
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|flags
operator|&
name|SAME_ROW_FLAG
operator|)
operator|==
literal|0
condition|)
block|{
name|ByteBufferUtils
operator|.
name|copyToStream
argument_list|(
name|out
argument_list|,
name|in
argument_list|,
name|rowLength
operator|+
name|KeyValue
operator|.
name|ROW_LENGTH_SIZE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ByteBufferUtils
operator|.
name|skip
argument_list|(
name|in
argument_list|,
name|rowLength
operator|+
name|KeyValue
operator|.
name|ROW_LENGTH_SIZE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|flags
operator|&
name|SAME_FAMILY_FLAG
operator|)
operator|==
literal|0
condition|)
block|{
name|ByteBufferUtils
operator|.
name|copyToStream
argument_list|(
name|out
argument_list|,
name|in
argument_list|,
name|familyLength
operator|+
name|KeyValue
operator|.
name|FAMILY_LENGTH_SIZE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ByteBufferUtils
operator|.
name|skip
argument_list|(
name|in
argument_list|,
name|familyLength
operator|+
name|KeyValue
operator|.
name|FAMILY_LENGTH_SIZE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|flags
operator|&
name|SAME_QUALIFIER_FLAG
operator|)
operator|==
literal|0
condition|)
block|{
name|ByteBufferUtils
operator|.
name|copyToStream
argument_list|(
name|out
argument_list|,
name|in
argument_list|,
name|qualifierLength
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ByteBufferUtils
operator|.
name|skip
argument_list|(
name|in
argument_list|,
name|qualifierLength
argument_list|)
expr_stmt|;
block|}
comment|// Timestamp is always different
name|ByteBufferUtils
operator|.
name|copyToStream
argument_list|(
name|out
argument_list|,
name|in
argument_list|,
name|KeyValue
operator|.
name|TIMESTAMP_SIZE
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|flags
operator|&
name|SAME_TYPE_FLAG
operator|)
operator|==
literal|0
condition|)
block|{
name|ByteBufferUtils
operator|.
name|copyToStream
argument_list|(
name|out
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
name|ByteBufferUtils
operator|.
name|skip
argument_list|(
name|in
argument_list|,
name|KeyValue
operator|.
name|TYPE_SIZE
argument_list|)
expr_stmt|;
block|}
comment|// Copy value
name|state
operator|.
name|prevOffset
operator|=
name|kvPos
expr_stmt|;
name|ByteBufferUtils
operator|.
name|copyToStream
argument_list|(
name|out
argument_list|,
name|in
argument_list|,
name|valueLength
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeKeyValueCompressedLengths
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|ByteBuffer
name|in
parameter_list|,
name|int
name|keyLengthFitsInBytes
parameter_list|,
name|int
name|valueLengthFitsInBytes
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|off
init|=
name|in
operator|.
name|position
argument_list|()
operator|-
name|KeyValue
operator|.
name|ROW_OFFSET
decl_stmt|;
name|ByteBufferUtils
operator|.
name|copyToStream
argument_list|(
name|out
argument_list|,
name|in
argument_list|,
name|off
operator|+
operator|(
literal|4
operator|-
name|keyLengthFitsInBytes
operator|)
argument_list|,
name|keyLengthFitsInBytes
argument_list|)
expr_stmt|;
name|off
operator|+=
name|KeyValue
operator|.
name|KEY_LENGTH_SIZE
expr_stmt|;
name|ByteBufferUtils
operator|.
name|copyToStream
argument_list|(
name|out
argument_list|,
name|in
argument_list|,
name|off
operator|+
operator|(
literal|4
operator|-
name|valueLengthFitsInBytes
operator|)
argument_list|,
name|valueLengthFitsInBytes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ByteBuffer
name|getFirstKeyInBlock
parameter_list|(
name|ByteBuffer
name|block
parameter_list|)
block|{
name|block
operator|.
name|mark
argument_list|()
expr_stmt|;
name|block
operator|.
name|position
argument_list|(
name|Bytes
operator|.
name|SIZEOF_INT
argument_list|)
expr_stmt|;
name|byte
name|flag
init|=
name|block
operator|.
name|get
argument_list|()
decl_stmt|;
name|int
name|keyLength
init|=
name|ByteBufferUtils
operator|.
name|readCompressedInt
argument_list|(
name|block
argument_list|,
literal|1
operator|+
operator|(
operator|(
name|flag
operator|&
name|KEY_SIZE_MASK
operator|)
operator|>>>
name|KEY_SIZE_SHIFT
operator|)
argument_list|)
decl_stmt|;
comment|// valueLength
name|ByteBufferUtils
operator|.
name|readCompressedInt
argument_list|(
name|block
argument_list|,
literal|1
operator|+
operator|(
operator|(
name|flag
operator|&
name|VALUE_SIZE_MASK
operator|)
operator|>>>
name|VALUE_SIZE_SHIFT
operator|)
argument_list|)
expr_stmt|;
name|int
name|pos
init|=
name|block
operator|.
name|position
argument_list|()
decl_stmt|;
name|block
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|block
operator|.
name|array
argument_list|()
argument_list|,
name|pos
argument_list|,
name|keyLength
argument_list|)
operator|.
name|slice
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|BitsetKeyDeltaEncoder
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|EncodedSeeker
name|createSeeker
parameter_list|(
name|RawComparator
argument_list|<
name|byte
index|[]
argument_list|>
name|comparator
parameter_list|,
specifier|final
name|boolean
name|includesMemstoreTS
parameter_list|)
block|{
return|return
operator|new
name|BufferedEncodedSeeker
argument_list|(
name|comparator
argument_list|)
block|{
specifier|private
name|int
name|familyLengthWithSize
decl_stmt|;
specifier|private
name|int
name|rowLengthWithSize
decl_stmt|;
specifier|private
name|void
name|decode
parameter_list|()
block|{
name|byte
name|type
init|=
literal|0
decl_stmt|;
comment|// Read key and value length
name|byte
name|flag
init|=
name|currentBuffer
operator|.
name|get
argument_list|()
decl_stmt|;
name|int
name|oldKeyLength
init|=
name|current
operator|.
name|keyLength
decl_stmt|;
name|int
name|keyLengthFitInBytes
init|=
literal|1
operator|+
operator|(
operator|(
name|flag
operator|&
name|KEY_SIZE_MASK
operator|)
operator|>>>
name|KEY_SIZE_SHIFT
operator|)
decl_stmt|;
name|current
operator|.
name|keyLength
operator|=
name|ByteBufferUtils
operator|.
name|readCompressedInt
argument_list|(
name|currentBuffer
argument_list|,
name|keyLengthFitInBytes
argument_list|)
expr_stmt|;
comment|// Read value length
name|int
name|valueLengthFitInBytes
init|=
literal|1
operator|+
operator|(
operator|(
name|flag
operator|&
name|VALUE_SIZE_MASK
operator|)
operator|>>>
name|VALUE_SIZE_SHIFT
operator|)
decl_stmt|;
name|current
operator|.
name|valueLength
operator|=
name|ByteBufferUtils
operator|.
name|readCompressedInt
argument_list|(
name|currentBuffer
argument_list|,
name|valueLengthFitInBytes
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldKeyLength
operator|!=
name|current
operator|.
name|keyLength
operator|&&
operator|(
name|flag
operator|&
name|SAME_TYPE_FLAG
operator|)
operator|!=
literal|0
condition|)
block|{
name|type
operator|=
name|current
operator|.
name|keyBuffer
index|[
name|oldKeyLength
operator|-
literal|1
index|]
expr_stmt|;
block|}
name|current
operator|.
name|lastCommonPrefix
operator|=
literal|0
expr_stmt|;
switch|switch
condition|(
name|flag
operator|&
operator|(
name|SAME_ROW_FLAG
operator||
name|SAME_FAMILY_FLAG
operator||
name|SAME_QUALIFIER_FLAG
operator|)
condition|)
block|{
case|case
name|SAME_ROW_FLAG
operator||
name|SAME_FAMILY_FLAG
operator||
name|SAME_QUALIFIER_FLAG
case|:
name|current
operator|.
name|lastCommonPrefix
operator|=
name|current
operator|.
name|keyLength
operator|-
name|familyLengthWithSize
operator|-
name|rowLengthWithSize
operator|-
comment|// will be added
name|KeyValue
operator|.
name|TIMESTAMP_TYPE_SIZE
expr_stmt|;
comment|//$FALL-THROUGH$
case|case
name|SAME_ROW_FLAG
operator||
name|SAME_FAMILY_FLAG
case|:
name|current
operator|.
name|lastCommonPrefix
operator|+=
name|familyLengthWithSize
operator|+
name|rowLengthWithSize
expr_stmt|;
comment|//$FALL-THROUGH$
case|case
literal|0
case|:
comment|// fall through
name|currentBuffer
operator|.
name|get
argument_list|(
name|current
operator|.
name|keyBuffer
argument_list|,
name|current
operator|.
name|lastCommonPrefix
argument_list|,
name|current
operator|.
name|keyLength
operator|-
name|current
operator|.
name|lastCommonPrefix
operator|-
name|Bytes
operator|.
name|SIZEOF_BYTE
argument_list|)
expr_stmt|;
break|break;
case|case
name|SAME_FAMILY_FLAG
case|:
comment|//$FALL-THROUGH$
case|case
name|SAME_FAMILY_FLAG
operator||
name|SAME_QUALIFIER_FLAG
case|:
comment|// find size of new row
name|currentBuffer
operator|.
name|get
argument_list|(
name|current
operator|.
name|keyBuffer
argument_list|,
literal|0
argument_list|,
name|Bytes
operator|.
name|SIZEOF_SHORT
argument_list|)
expr_stmt|;
name|int
name|oldRowLengthWithSize
init|=
name|rowLengthWithSize
decl_stmt|;
name|rowLengthWithSize
operator|=
name|Bytes
operator|.
name|toShort
argument_list|(
name|current
operator|.
name|keyBuffer
argument_list|)
operator|+
name|Bytes
operator|.
name|SIZEOF_SHORT
expr_stmt|;
comment|// move the column family and qualifier
name|int
name|moveLength
decl_stmt|;
if|if
condition|(
operator|(
name|flag
operator|&
name|SAME_QUALIFIER_FLAG
operator|)
operator|==
literal|0
condition|)
block|{
name|moveLength
operator|=
name|familyLengthWithSize
expr_stmt|;
block|}
else|else
block|{
name|moveLength
operator|=
name|current
operator|.
name|keyLength
operator|-
name|rowLengthWithSize
operator|-
name|KeyValue
operator|.
name|TIMESTAMP_TYPE_SIZE
expr_stmt|;
block|}
name|System
operator|.
name|arraycopy
argument_list|(
name|current
operator|.
name|keyBuffer
argument_list|,
name|oldRowLengthWithSize
argument_list|,
name|current
operator|.
name|keyBuffer
argument_list|,
name|rowLengthWithSize
argument_list|,
name|moveLength
argument_list|)
expr_stmt|;
comment|// copy row
name|currentBuffer
operator|.
name|get
argument_list|(
name|current
operator|.
name|keyBuffer
argument_list|,
name|Bytes
operator|.
name|SIZEOF_SHORT
argument_list|,
name|rowLengthWithSize
operator|-
name|Bytes
operator|.
name|SIZEOF_SHORT
argument_list|)
expr_stmt|;
comment|// copy qualifier and timestamp
if|if
condition|(
operator|(
name|flag
operator|&
name|SAME_QUALIFIER_FLAG
operator|)
operator|==
literal|0
condition|)
block|{
name|currentBuffer
operator|.
name|get
argument_list|(
name|current
operator|.
name|keyBuffer
argument_list|,
name|rowLengthWithSize
operator|+
name|familyLengthWithSize
argument_list|,
name|current
operator|.
name|keyLength
operator|-
name|rowLengthWithSize
operator|-
name|familyLengthWithSize
operator|-
name|Bytes
operator|.
name|SIZEOF_BYTE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|currentBuffer
operator|.
name|get
argument_list|(
name|current
operator|.
name|keyBuffer
argument_list|,
name|current
operator|.
name|keyLength
operator|-
name|KeyValue
operator|.
name|TIMESTAMP_TYPE_SIZE
argument_list|,
name|Bytes
operator|.
name|SIZEOF_LONG
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|SAME_QUALIFIER_FLAG
case|:
comment|//$FALL-THROUGH$
case|case
name|SAME_QUALIFIER_FLAG
operator||
name|SAME_ROW_FLAG
case|:
comment|//$FALL-THROUGH$
case|case
name|SAME_ROW_FLAG
case|:
comment|//$FALL-THROUGH$
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected flag!"
argument_list|)
throw|;
block|}
comment|// we need to save length for the first key
if|if
condition|(
operator|(
name|flag
operator|&
name|SAME_ROW_FLAG
operator|)
operator|==
literal|0
condition|)
block|{
name|rowLengthWithSize
operator|=
name|Bytes
operator|.
name|toShort
argument_list|(
name|current
operator|.
name|keyBuffer
argument_list|)
operator|+
name|Bytes
operator|.
name|SIZEOF_SHORT
expr_stmt|;
name|familyLengthWithSize
operator|=
name|current
operator|.
name|keyBuffer
index|[
name|rowLengthWithSize
index|]
operator|+
name|Bytes
operator|.
name|SIZEOF_BYTE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|flag
operator|&
name|SAME_FAMILY_FLAG
operator|)
operator|!=
literal|0
condition|)
block|{
name|familyLengthWithSize
operator|=
name|current
operator|.
name|keyBuffer
index|[
name|rowLengthWithSize
index|]
operator|+
name|Bytes
operator|.
name|SIZEOF_BYTE
expr_stmt|;
block|}
comment|// type
if|if
condition|(
operator|(
name|flag
operator|&
name|SAME_TYPE_FLAG
operator|)
operator|==
literal|0
condition|)
block|{
name|currentBuffer
operator|.
name|get
argument_list|(
name|current
operator|.
name|keyBuffer
argument_list|,
name|current
operator|.
name|keyLength
operator|-
name|Bytes
operator|.
name|SIZEOF_BYTE
argument_list|,
name|Bytes
operator|.
name|SIZEOF_BYTE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|oldKeyLength
operator|!=
name|current
operator|.
name|keyLength
condition|)
block|{
name|current
operator|.
name|keyBuffer
index|[
name|current
operator|.
name|keyLength
operator|-
name|Bytes
operator|.
name|SIZEOF_BYTE
index|]
operator|=
name|type
expr_stmt|;
block|}
comment|// value
name|current
operator|.
name|valueOffset
operator|=
name|currentBuffer
operator|.
name|position
argument_list|()
expr_stmt|;
name|ByteBufferUtils
operator|.
name|skip
argument_list|(
name|currentBuffer
argument_list|,
name|current
operator|.
name|valueLength
argument_list|)
expr_stmt|;
if|if
condition|(
name|includesMemstoreTS
condition|)
block|{
name|current
operator|.
name|memstoreTS
operator|=
name|ByteBufferUtils
operator|.
name|readVLong
argument_list|(
name|currentBuffer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|current
operator|.
name|memstoreTS
operator|=
literal|0
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|decodeNext
parameter_list|()
block|{
name|decode
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|decodeFirst
parameter_list|()
block|{
name|ByteBufferUtils
operator|.
name|skip
argument_list|(
name|currentBuffer
argument_list|,
name|Bytes
operator|.
name|SIZEOF_INT
argument_list|)
expr_stmt|;
name|decode
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

