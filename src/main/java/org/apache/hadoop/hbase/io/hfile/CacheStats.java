begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2011 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_comment
comment|/**  * Class that implements cache metrics.  */
end_comment

begin_class
specifier|public
class|class
name|CacheStats
block|{
comment|/** Sliding window statistics. The number of metric periods to include in    * sliding window hit ratio calculations.    */
specifier|static
specifier|final
name|int
name|DEFAULT_WINDOW_PERIODS
init|=
literal|5
decl_stmt|;
comment|/** The number of getBlock requests that were cache hits */
specifier|private
specifier|final
name|AtomicLong
name|hitCount
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|/**    * The number of getBlock requests that were cache hits, but only from    * requests that were set to use the block cache.  This is because all reads    * attempt to read from the block cache even if they will not put new blocks    * into the block cache.  See HBASE-2253 for more information.    */
specifier|private
specifier|final
name|AtomicLong
name|hitCachingCount
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|/** The number of getBlock requests that were cache misses */
specifier|private
specifier|final
name|AtomicLong
name|missCount
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|/**    * The number of getBlock requests that were cache misses, but only from    * requests that were set to use the block cache.    */
specifier|private
specifier|final
name|AtomicLong
name|missCachingCount
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|/** The number of times an eviction has occurred */
specifier|private
specifier|final
name|AtomicLong
name|evictionCount
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|/** The total number of blocks that have been evicted */
specifier|private
specifier|final
name|AtomicLong
name|evictedBlockCount
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|/** The number of metrics periods to include in window */
specifier|private
specifier|final
name|int
name|numPeriodsInWindow
decl_stmt|;
comment|/** Hit counts for each period in window */
specifier|private
specifier|final
name|long
index|[]
name|hitCounts
decl_stmt|;
comment|/** Caching hit counts for each period in window */
specifier|private
specifier|final
name|long
index|[]
name|hitCachingCounts
decl_stmt|;
comment|/** Access counts for each period in window */
specifier|private
specifier|final
name|long
index|[]
name|requestCounts
decl_stmt|;
comment|/** Caching access counts for each period in window */
specifier|private
specifier|final
name|long
index|[]
name|requestCachingCounts
decl_stmt|;
comment|/** Last hit count read */
specifier|private
name|long
name|lastHitCount
init|=
literal|0
decl_stmt|;
comment|/** Last hit caching count read */
specifier|private
name|long
name|lastHitCachingCount
init|=
literal|0
decl_stmt|;
comment|/** Last request count read */
specifier|private
name|long
name|lastRequestCount
init|=
literal|0
decl_stmt|;
comment|/** Last request caching count read */
specifier|private
name|long
name|lastRequestCachingCount
init|=
literal|0
decl_stmt|;
comment|/** Current window index (next to be updated) */
specifier|private
name|int
name|windowIndex
init|=
literal|0
decl_stmt|;
specifier|public
name|CacheStats
parameter_list|()
block|{
name|this
argument_list|(
name|DEFAULT_WINDOW_PERIODS
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CacheStats
parameter_list|(
name|int
name|numPeriodsInWindow
parameter_list|)
block|{
name|this
operator|.
name|numPeriodsInWindow
operator|=
name|numPeriodsInWindow
expr_stmt|;
name|this
operator|.
name|hitCounts
operator|=
name|initializeZeros
argument_list|(
name|numPeriodsInWindow
argument_list|)
expr_stmt|;
name|this
operator|.
name|hitCachingCounts
operator|=
name|initializeZeros
argument_list|(
name|numPeriodsInWindow
argument_list|)
expr_stmt|;
name|this
operator|.
name|requestCounts
operator|=
name|initializeZeros
argument_list|(
name|numPeriodsInWindow
argument_list|)
expr_stmt|;
name|this
operator|.
name|requestCachingCounts
operator|=
name|initializeZeros
argument_list|(
name|numPeriodsInWindow
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|miss
parameter_list|(
name|boolean
name|caching
parameter_list|)
block|{
name|missCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
if|if
condition|(
name|caching
condition|)
name|missCachingCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|hit
parameter_list|(
name|boolean
name|caching
parameter_list|)
block|{
name|hitCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
if|if
condition|(
name|caching
condition|)
name|hitCachingCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|evict
parameter_list|()
block|{
name|evictionCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|evicted
parameter_list|()
block|{
name|evictedBlockCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
specifier|public
name|long
name|getRequestCount
parameter_list|()
block|{
return|return
name|getHitCount
argument_list|()
operator|+
name|getMissCount
argument_list|()
return|;
block|}
specifier|public
name|long
name|getRequestCachingCount
parameter_list|()
block|{
return|return
name|getHitCachingCount
argument_list|()
operator|+
name|getMissCachingCount
argument_list|()
return|;
block|}
specifier|public
name|long
name|getMissCount
parameter_list|()
block|{
return|return
name|missCount
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|long
name|getMissCachingCount
parameter_list|()
block|{
return|return
name|missCachingCount
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|long
name|getHitCount
parameter_list|()
block|{
return|return
name|hitCount
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|long
name|getHitCachingCount
parameter_list|()
block|{
return|return
name|hitCachingCount
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|long
name|getEvictionCount
parameter_list|()
block|{
return|return
name|evictionCount
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|long
name|getEvictedCount
parameter_list|()
block|{
return|return
name|evictedBlockCount
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|double
name|getHitRatio
parameter_list|()
block|{
return|return
operator|(
operator|(
name|float
operator|)
name|getHitCount
argument_list|()
operator|/
operator|(
name|float
operator|)
name|getRequestCount
argument_list|()
operator|)
return|;
block|}
specifier|public
name|double
name|getHitCachingRatio
parameter_list|()
block|{
return|return
operator|(
operator|(
name|float
operator|)
name|getHitCachingCount
argument_list|()
operator|/
operator|(
name|float
operator|)
name|getRequestCachingCount
argument_list|()
operator|)
return|;
block|}
specifier|public
name|double
name|getMissRatio
parameter_list|()
block|{
return|return
operator|(
operator|(
name|float
operator|)
name|getMissCount
argument_list|()
operator|/
operator|(
name|float
operator|)
name|getRequestCount
argument_list|()
operator|)
return|;
block|}
specifier|public
name|double
name|getMissCachingRatio
parameter_list|()
block|{
return|return
operator|(
operator|(
name|float
operator|)
name|getMissCachingCount
argument_list|()
operator|/
operator|(
name|float
operator|)
name|getRequestCachingCount
argument_list|()
operator|)
return|;
block|}
specifier|public
name|double
name|evictedPerEviction
parameter_list|()
block|{
return|return
operator|(
operator|(
name|float
operator|)
name|getEvictedCount
argument_list|()
operator|/
operator|(
name|float
operator|)
name|getEvictionCount
argument_list|()
operator|)
return|;
block|}
specifier|public
name|void
name|rollMetricsPeriod
parameter_list|()
block|{
name|hitCounts
index|[
name|windowIndex
index|]
operator|=
name|getHitCount
argument_list|()
operator|-
name|lastHitCount
expr_stmt|;
name|lastHitCount
operator|=
name|getHitCount
argument_list|()
expr_stmt|;
name|hitCachingCounts
index|[
name|windowIndex
index|]
operator|=
name|getHitCachingCount
argument_list|()
operator|-
name|lastHitCachingCount
expr_stmt|;
name|lastHitCachingCount
operator|=
name|getHitCachingCount
argument_list|()
expr_stmt|;
name|requestCounts
index|[
name|windowIndex
index|]
operator|=
name|getRequestCount
argument_list|()
operator|-
name|lastRequestCount
expr_stmt|;
name|lastRequestCount
operator|=
name|getRequestCount
argument_list|()
expr_stmt|;
name|requestCachingCounts
index|[
name|windowIndex
index|]
operator|=
name|getRequestCachingCount
argument_list|()
operator|-
name|lastRequestCachingCount
expr_stmt|;
name|lastRequestCachingCount
operator|=
name|getRequestCachingCount
argument_list|()
expr_stmt|;
name|windowIndex
operator|=
operator|(
name|windowIndex
operator|+
literal|1
operator|)
operator|%
name|numPeriodsInWindow
expr_stmt|;
block|}
specifier|public
name|double
name|getHitRatioPastNPeriods
parameter_list|()
block|{
name|double
name|ratio
init|=
operator|(
operator|(
name|double
operator|)
name|sum
argument_list|(
name|hitCounts
argument_list|)
operator|/
operator|(
name|double
operator|)
name|sum
argument_list|(
name|requestCounts
argument_list|)
operator|)
decl_stmt|;
return|return
name|Double
operator|.
name|isNaN
argument_list|(
name|ratio
argument_list|)
condition|?
literal|0
else|:
name|ratio
return|;
block|}
specifier|public
name|double
name|getHitCachingRatioPastNPeriods
parameter_list|()
block|{
name|double
name|ratio
init|=
operator|(
operator|(
name|double
operator|)
name|sum
argument_list|(
name|hitCachingCounts
argument_list|)
operator|/
operator|(
name|double
operator|)
name|sum
argument_list|(
name|requestCachingCounts
argument_list|)
operator|)
decl_stmt|;
return|return
name|Double
operator|.
name|isNaN
argument_list|(
name|ratio
argument_list|)
condition|?
literal|0
else|:
name|ratio
return|;
block|}
specifier|private
specifier|static
name|long
name|sum
parameter_list|(
name|long
index|[]
name|counts
parameter_list|)
block|{
name|long
name|sum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|long
name|count
range|:
name|counts
control|)
name|sum
operator|+=
name|count
expr_stmt|;
return|return
name|sum
return|;
block|}
specifier|private
specifier|static
name|long
index|[]
name|initializeZeros
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|long
index|[]
name|zeros
init|=
operator|new
name|long
index|[
name|n
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|zeros
index|[
name|i
index|]
operator|=
literal|0L
expr_stmt|;
block|}
return|return
name|zeros
return|;
block|}
block|}
end_class

end_unit

