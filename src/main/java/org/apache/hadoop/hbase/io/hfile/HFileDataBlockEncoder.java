begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|encoding
operator|.
name|DataBlockEncoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|encoding
operator|.
name|HFileBlockEncodingContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|encoding
operator|.
name|HFileBlockDecodingContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|Compression
operator|.
name|Algorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreFile
import|;
end_import

begin_comment
comment|/**  * Controls what kind of data block encoding is used. If data block encoding is  * not set or the given block is not a data block (encoded or not), methods  * should just return the unmodified block.  */
end_comment

begin_interface
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
interface|interface
name|HFileDataBlockEncoder
block|{
comment|/**    * Converts a block from the on-disk format to the in-cache format. Called in    * the following cases:    *<ul>    *<li>After an encoded or unencoded data block is read from disk, but before    * it is put into the cache.</li>    *<li>To convert brand-new blocks to the in-cache format when doing    * cache-on-write.</li>    *</ul>    * @param block a block in an on-disk format (read from HFile or freshly    *          generated).    * @return non null block which is coded according to the settings.    */
specifier|public
name|HFileBlock
name|diskToCacheFormat
parameter_list|(
name|HFileBlock
name|block
parameter_list|,
name|boolean
name|isCompaction
parameter_list|)
function_decl|;
comment|/**    * Should be called before an encoded or unencoded data block is written to    * disk.    * @param in KeyValues next to each other    * @param encodingResult the encoded result    * @param blockType block type    * @throws IOException    */
specifier|public
name|void
name|beforeWriteToDisk
parameter_list|(
name|ByteBuffer
name|in
parameter_list|,
name|boolean
name|includesMemstoreTS
parameter_list|,
name|HFileBlockEncodingContext
name|encodingResult
parameter_list|,
name|BlockType
name|blockType
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Decides whether we should use a scanner over encoded blocks.    * @param isCompaction whether we are in a compaction.    * @return Whether to use encoded scanner.    */
specifier|public
name|boolean
name|useEncodedScanner
parameter_list|(
name|boolean
name|isCompaction
parameter_list|)
function_decl|;
comment|/**    * Save metadata in StoreFile which will be written to disk    * @param storeFileWriter writer for a given StoreFile    * @exception IOException on disk problems    */
specifier|public
name|void
name|saveMetadata
parameter_list|(
name|StoreFile
operator|.
name|Writer
name|storeFileWriter
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/** @return the on-disk data block encoding */
specifier|public
name|DataBlockEncoding
name|getEncodingOnDisk
parameter_list|()
function_decl|;
comment|/** @return the preferred in-cache data block encoding for normal reads */
specifier|public
name|DataBlockEncoding
name|getEncodingInCache
parameter_list|()
function_decl|;
comment|/**    * @return the effective in-cache data block encoding, taking into account    *         whether we are doing a compaction.    */
specifier|public
name|DataBlockEncoding
name|getEffectiveEncodingInCache
parameter_list|(
name|boolean
name|isCompaction
parameter_list|)
function_decl|;
comment|/**    * Create an encoder specific encoding context object for writing. And the    * encoding context should also perform compression if compressionAlgorithm is    * valid.    *    * @param compressionAlgorithm compression algorithm    * @param headerBytes header bytes    * @return a new {@link HFileBlockEncodingContext} object    */
specifier|public
name|HFileBlockEncodingContext
name|newOnDiskDataBlockEncodingContext
parameter_list|(
name|Algorithm
name|compressionAlgorithm
parameter_list|,
name|byte
index|[]
name|headerBytes
parameter_list|)
function_decl|;
comment|/**    * create a encoder specific decoding context for reading. And the    * decoding context should also do decompression if compressionAlgorithm    * is valid.    *    * @param compressionAlgorithm    * @return a new {@link HFileBlockDecodingContext} object    */
specifier|public
name|HFileBlockDecodingContext
name|newOnDiskDataBlockDecodingContext
parameter_list|(
name|Algorithm
name|compressionAlgorithm
parameter_list|)
function_decl|;
block|}
end_interface

end_unit

