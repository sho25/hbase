begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|encoding
operator|.
name|DataBlockEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|encoding
operator|.
name|DataBlockEncodings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|encoding
operator|.
name|DataBlockEncodings
operator|.
name|Algorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|server
operator|.
name|ByteBufferInputStream
import|;
end_import

begin_comment
comment|/**  * Do different kinds of data block encoding according to column family  * options.  */
end_comment

begin_class
specifier|public
class|class
name|HFileDataBlockEncoderImpl
implements|implements
name|HFileDataBlockEncoder
block|{
specifier|private
specifier|final
name|DataBlockEncodings
operator|.
name|Algorithm
name|onDisk
decl_stmt|;
specifier|private
specifier|final
name|DataBlockEncodings
operator|.
name|Algorithm
name|inCache
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|NO_ENCODED_SEEK
init|=
literal|false
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|encodedSeek
decl_stmt|;
comment|/**    * Do data block encoding as with specified options.    * @param onDisk What kind of data block encoding will be used before writing    *          HFileBlock to disk.    * @param inCache What kind of data block encoding will be used in block    *          cache.    * @param encodedSeek should we seek over encoded data blocks (true) or    *          decode blocks first and use normal seek operations (false)    */
specifier|public
name|HFileDataBlockEncoderImpl
parameter_list|(
name|Algorithm
name|onDisk
parameter_list|,
name|Algorithm
name|inCache
parameter_list|,
name|boolean
name|encodedSeek
parameter_list|)
block|{
name|this
operator|.
name|onDisk
operator|=
name|onDisk
operator|!=
literal|null
condition|?
name|onDisk
else|:
name|DataBlockEncodings
operator|.
name|Algorithm
operator|.
name|NONE
expr_stmt|;
name|this
operator|.
name|inCache
operator|=
name|inCache
operator|!=
literal|null
condition|?
name|inCache
else|:
name|DataBlockEncodings
operator|.
name|Algorithm
operator|.
name|NONE
expr_stmt|;
name|this
operator|.
name|encodedSeek
operator|=
name|encodedSeek
expr_stmt|;
block|}
comment|/**    * @return the data block encoding algorithm used on disk    */
specifier|public
name|DataBlockEncodings
operator|.
name|Algorithm
name|getOnDisk
parameter_list|()
block|{
return|return
name|onDisk
return|;
block|}
comment|/**    * @return the data block encoding algorithm used in the block cache    */
specifier|public
name|DataBlockEncodings
operator|.
name|Algorithm
name|getInCache
parameter_list|()
block|{
return|return
name|inCache
return|;
block|}
comment|/**    * @return whether we should do seek operations on encoded blocks    */
specifier|public
name|boolean
name|useEncodedSeek
parameter_list|()
block|{
return|return
name|encodedSeek
operator|&&
name|inCache
operator|!=
name|DataBlockEncodings
operator|.
name|Algorithm
operator|.
name|NONE
return|;
block|}
comment|// Preconditions: any HFileBlock format
comment|// Postconditions: HFileBlock not encoded
comment|//                 or encoded same format as inCache
annotation|@
name|Override
specifier|public
name|HFileBlock
name|afterReadFromDisk
parameter_list|(
name|HFileBlock
name|block
parameter_list|)
block|{
if|if
condition|(
name|ignoreBlock
argument_list|(
name|block
argument_list|)
condition|)
block|{
return|return
name|block
return|;
comment|// non DATA block, skip it
block|}
comment|// is already encoded in desired encoding
if|if
condition|(
name|block
operator|.
name|getBlockType
argument_list|()
operator|==
name|BlockType
operator|.
name|ENCODED_DATA
operator|&&
name|block
operator|.
name|getDataBlockEncodingId
argument_list|()
operator|==
name|inCache
operator|.
name|getId
argument_list|()
condition|)
block|{
return|return
name|block
return|;
block|}
comment|// decode if we need it
name|HFileBlock
name|decompressedBlock
decl_stmt|;
if|if
condition|(
name|block
operator|.
name|getBlockType
argument_list|()
operator|==
name|BlockType
operator|.
name|ENCODED_DATA
condition|)
block|{
name|decompressedBlock
operator|=
name|decodeDataBlock
argument_list|(
name|block
argument_list|,
literal|false
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|,
name|block
operator|.
name|doesIncludeMemstoreTS
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|decompressedBlock
operator|=
name|block
expr_stmt|;
block|}
comment|// check if we want to encode it here
if|if
condition|(
name|encodedSeek
operator|&&
name|inCache
operator|!=
name|DataBlockEncodings
operator|.
name|Algorithm
operator|.
name|NONE
operator|&&
name|onDisk
operator|!=
name|DataBlockEncodings
operator|.
name|Algorithm
operator|.
name|NONE
condition|)
block|{
return|return
name|encodeDataBlock
argument_list|(
name|decompressedBlock
argument_list|,
name|inCache
argument_list|,
name|block
operator|.
name|doesIncludeMemstoreTS
argument_list|()
argument_list|)
return|;
block|}
return|return
name|decompressedBlock
return|;
block|}
comment|/**    * Preconditions: HFileBlock not encoded or encoded in the {@link #inCache}    * format.    *<p>    * Postconditions:    *<ul>    *<li>if isCompaction is set and {@link #onDisk} is NONE there is no    * encoding</li>    *<li>if {@link #encodedSeek} is set there is same encoding as inCache    * Otherwise there is no encoding</li>    *</ul>    */
annotation|@
name|Override
specifier|public
name|HFileBlock
name|afterReadFromDiskAndPuttingInCache
parameter_list|(
name|HFileBlock
name|block
parameter_list|,
name|boolean
name|isCompaction
parameter_list|,
name|boolean
name|includesMemstoreTS
parameter_list|)
block|{
if|if
condition|(
name|ignoreBlock
argument_list|(
name|block
argument_list|)
condition|)
block|{
return|return
name|block
return|;
comment|// non DATA block, skip it
block|}
comment|// use decoded buffer in case of compaction
if|if
condition|(
name|dontEncodeBeforeCompaction
argument_list|(
name|isCompaction
argument_list|)
condition|)
block|{
if|if
condition|(
name|block
operator|.
name|getBlockType
argument_list|()
operator|!=
name|BlockType
operator|.
name|DATA
condition|)
block|{
return|return
name|decodeDataBlock
argument_list|(
name|block
argument_list|,
literal|true
argument_list|,
name|inCache
operator|.
name|getId
argument_list|()
argument_list|,
name|includesMemstoreTS
argument_list|)
return|;
block|}
return|return
name|block
return|;
block|}
if|if
condition|(
operator|!
name|encodedSeek
condition|)
block|{
comment|// we need to have it decoded in memory
if|if
condition|(
name|block
operator|.
name|getBlockType
argument_list|()
operator|!=
name|BlockType
operator|.
name|DATA
condition|)
block|{
return|return
name|decodeDataBlock
argument_list|(
name|block
argument_list|,
literal|true
argument_list|,
name|inCache
operator|.
name|getId
argument_list|()
argument_list|,
name|includesMemstoreTS
argument_list|)
return|;
block|}
return|return
name|block
return|;
block|}
comment|// got already data in desired format
if|if
condition|(
name|block
operator|.
name|getBlockType
argument_list|()
operator|==
name|BlockType
operator|.
name|ENCODED_DATA
operator|&&
name|block
operator|.
name|getDataBlockEncodingId
argument_list|()
operator|==
name|inCache
operator|.
name|getId
argument_list|()
condition|)
block|{
return|return
name|block
return|;
block|}
if|if
condition|(
name|block
operator|.
name|getBlockType
argument_list|()
operator|==
name|BlockType
operator|.
name|ENCODED_DATA
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unexpected encoding"
argument_list|)
throw|;
block|}
comment|// need to encode it
if|if
condition|(
name|inCache
operator|!=
name|DataBlockEncodings
operator|.
name|Algorithm
operator|.
name|NONE
condition|)
block|{
return|return
name|encodeDataBlock
argument_list|(
name|block
argument_list|,
name|inCache
argument_list|,
name|includesMemstoreTS
argument_list|)
return|;
block|}
return|return
name|block
return|;
block|}
comment|// Precondition: not encoded buffer
comment|// Postcondition: same encoding as onDisk
annotation|@
name|Override
specifier|public
name|Pair
argument_list|<
name|ByteBuffer
argument_list|,
name|BlockType
argument_list|>
name|beforeWriteToDisk
parameter_list|(
name|ByteBuffer
name|in
parameter_list|,
name|boolean
name|includesMemstoreTS
parameter_list|)
block|{
if|if
condition|(
name|onDisk
operator|==
name|DataBlockEncodings
operator|.
name|Algorithm
operator|.
name|NONE
condition|)
block|{
comment|// there is no need to encode the block before writing it to disk
return|return
operator|new
name|Pair
argument_list|<
name|ByteBuffer
argument_list|,
name|BlockType
argument_list|>
argument_list|(
name|in
argument_list|,
name|BlockType
operator|.
name|DATA
argument_list|)
return|;
block|}
name|ByteBuffer
name|encodedBuffer
init|=
name|encodeBufferToHFileBlockBuffer
argument_list|(
name|in
argument_list|,
name|onDisk
argument_list|,
name|includesMemstoreTS
argument_list|)
decl_stmt|;
return|return
operator|new
name|Pair
argument_list|<
name|ByteBuffer
argument_list|,
name|BlockType
argument_list|>
argument_list|(
name|encodedBuffer
argument_list|,
name|BlockType
operator|.
name|ENCODED_DATA
argument_list|)
return|;
block|}
comment|// Precondition: an unencoded block or the same encoding as inCache
comment|// Postcondition: same encoding as inCache
annotation|@
name|Override
specifier|public
name|HFileBlock
name|beforeBlockCache
parameter_list|(
name|HFileBlock
name|block
parameter_list|,
name|boolean
name|includesMemstoreTS
parameter_list|)
block|{
if|if
condition|(
name|ignoreBlock
argument_list|(
name|block
argument_list|)
condition|)
block|{
return|return
name|block
return|;
comment|// non DATA block skip it
block|}
if|if
condition|(
name|block
operator|.
name|getBlockType
argument_list|()
operator|==
name|BlockType
operator|.
name|ENCODED_DATA
condition|)
block|{
if|if
condition|(
name|block
operator|.
name|getDataBlockEncodingId
argument_list|()
operator|==
name|inCache
operator|.
name|getId
argument_list|()
condition|)
block|{
comment|// is already encoded in right format
return|return
name|block
return|;
block|}
comment|// expecting either the "in-cache" encoding or no encoding
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Expected the in-cache encoding ('%s') or no encoding, "
operator|+
literal|"but got encoding '%s'"
argument_list|,
name|inCache
operator|.
name|toString
argument_list|()
argument_list|,
name|DataBlockEncodings
operator|.
name|getNameFromId
argument_list|(
name|block
operator|.
name|getDataBlockEncodingId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|inCache
operator|!=
name|DataBlockEncodings
operator|.
name|Algorithm
operator|.
name|NONE
condition|)
block|{
comment|// encode data
name|HFileBlock
name|encodedBlock
init|=
name|encodeDataBlock
argument_list|(
name|block
argument_list|,
name|inCache
argument_list|,
name|includesMemstoreTS
argument_list|)
decl_stmt|;
name|block
operator|.
name|passSchemaMetricsTo
argument_list|(
name|encodedBlock
argument_list|)
expr_stmt|;
return|return
name|encodedBlock
return|;
block|}
return|return
name|block
return|;
block|}
comment|/**    * Precondition: same encoding as in inCache    *<p>    * Postcondition: if (isCompaction is set and {@link #onDisk} is not NONE) or    *                {@link #encodedSeek} is not set -> don't encode.    */
annotation|@
name|Override
specifier|public
name|HFileBlock
name|afterBlockCache
parameter_list|(
name|HFileBlock
name|block
parameter_list|,
name|boolean
name|isCompaction
parameter_list|,
name|boolean
name|includesMemstoreTS
parameter_list|)
block|{
if|if
condition|(
name|block
operator|==
literal|null
operator|||
name|ignoreBlock
argument_list|(
name|block
argument_list|)
condition|)
block|{
return|return
name|block
return|;
comment|// skip no DATA block
block|}
if|if
condition|(
name|inCache
operator|==
name|DataBlockEncodings
operator|.
name|Algorithm
operator|.
name|NONE
condition|)
block|{
comment|// no need of decoding
if|if
condition|(
name|block
operator|.
name|getBlockType
argument_list|()
operator|==
name|BlockType
operator|.
name|ENCODED_DATA
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Expected non-encoded data in cache."
argument_list|)
throw|;
block|}
return|return
name|block
return|;
block|}
if|if
condition|(
name|block
operator|.
name|getBlockType
argument_list|()
operator|!=
name|BlockType
operator|.
name|ENCODED_DATA
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Expected encoded data in cache."
argument_list|)
throw|;
block|}
if|if
condition|(
name|dontEncodeBeforeCompaction
argument_list|(
name|isCompaction
argument_list|)
condition|)
block|{
comment|// If we don't use dataBlockEncoding on disk,
comment|// we would also avoid using it for compactions.
comment|// That way we don't change disk format.
return|return
literal|null
return|;
block|}
if|if
condition|(
name|encodedSeek
condition|)
block|{
comment|// we use encoding in memory
return|return
name|block
return|;
block|}
return|return
name|decodeDataBlock
argument_list|(
name|block
argument_list|,
literal|true
argument_list|,
name|inCache
operator|.
name|getId
argument_list|()
argument_list|,
name|includesMemstoreTS
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|useEncodedScanner
parameter_list|(
name|boolean
name|isCompaction
parameter_list|)
block|{
if|if
condition|(
name|isCompaction
operator|&&
name|onDisk
operator|==
name|DataBlockEncodings
operator|.
name|Algorithm
operator|.
name|NONE
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|encodedSeek
operator|&&
name|inCache
operator|!=
name|DataBlockEncodings
operator|.
name|Algorithm
operator|.
name|NONE
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|saveMetadata
parameter_list|(
name|StoreFile
operator|.
name|Writer
name|storeFileWriter
parameter_list|)
throws|throws
name|IOException
block|{
name|storeFileWriter
operator|.
name|appendFileInfo
argument_list|(
name|StoreFile
operator|.
name|DATA_BLOCK_ENCODING
argument_list|,
name|onDisk
operator|.
name|getNameInBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|HFileBlock
name|decodeDataBlock
parameter_list|(
name|HFileBlock
name|block
parameter_list|,
name|boolean
name|verifyEncoding
parameter_list|,
name|short
name|expectedEncoderId
parameter_list|,
name|boolean
name|includesMemstoreTS
parameter_list|)
block|{
assert|assert
name|block
operator|.
name|getBlockType
argument_list|()
operator|==
name|BlockType
operator|.
name|ENCODED_DATA
assert|;
name|short
name|dataBlockEncoderId
init|=
name|block
operator|.
name|getDataBlockEncodingId
argument_list|()
decl_stmt|;
comment|// (optional) sanity check of encoder type
if|if
condition|(
name|verifyEncoding
operator|&&
name|expectedEncoderId
operator|!=
name|dataBlockEncoderId
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Expected encoding type '%d', but found '%d'"
argument_list|,
name|expectedEncoderId
argument_list|,
name|dataBlockEncoderId
argument_list|)
argument_list|)
throw|;
block|}
name|ByteBuffer
name|originalBuf
init|=
name|block
operator|.
name|getBufferReadOnly
argument_list|()
decl_stmt|;
name|ByteBuffer
name|withoutEncodedHeader
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|originalBuf
operator|.
name|array
argument_list|()
argument_list|,
name|originalBuf
operator|.
name|arrayOffset
argument_list|()
operator|+
name|HFileBlock
operator|.
name|ENCODED_HEADER_SIZE
argument_list|,
name|originalBuf
operator|.
name|limit
argument_list|()
operator|-
name|HFileBlock
operator|.
name|ENCODED_HEADER_SIZE
argument_list|)
operator|.
name|slice
argument_list|()
decl_stmt|;
name|ByteBufferInputStream
name|bbis
init|=
operator|new
name|ByteBufferInputStream
argument_list|(
name|withoutEncodedHeader
argument_list|)
decl_stmt|;
name|DataInputStream
name|dis
decl_stmt|;
name|ByteBuffer
name|newBuf
decl_stmt|;
name|DataBlockEncoder
name|dataBlockEncoder
init|=
literal|null
decl_stmt|;
try|try
block|{
name|dis
operator|=
operator|new
name|DataInputStream
argument_list|(
name|bbis
argument_list|)
expr_stmt|;
name|dataBlockEncoder
operator|=
name|DataBlockEncodings
operator|.
name|getDataBlockEncoderFromId
argument_list|(
name|dataBlockEncoderId
argument_list|)
expr_stmt|;
name|int
name|preReadLength
init|=
name|originalBuf
operator|.
name|limit
argument_list|()
operator|-
name|HFileBlock
operator|.
name|HEADER_SIZE
operator|-
name|block
operator|.
name|getUncompressedSizeWithoutHeader
argument_list|()
decl_stmt|;
comment|// Sometimes buffer is larger, because it also contains next's block
comment|// header. In that case we want to skip it.
name|newBuf
operator|=
name|dataBlockEncoder
operator|.
name|uncompressKeyValues
argument_list|(
name|dis
argument_list|,
name|HFileBlock
operator|.
name|HEADER_SIZE
argument_list|,
name|preReadLength
argument_list|,
name|includesMemstoreTS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Bug while decoding the block using '%s'"
argument_list|,
name|dataBlockEncoder
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// Create a decoded HFileBlock. Offset will be set later.
return|return
operator|new
name|HFileBlock
argument_list|(
name|BlockType
operator|.
name|DATA
argument_list|,
name|block
operator|.
name|getOnDiskSizeWithoutHeader
argument_list|()
argument_list|,
name|newBuf
operator|.
name|limit
argument_list|()
operator|-
name|HFileBlock
operator|.
name|HEADER_SIZE
argument_list|,
name|block
operator|.
name|getPrevBlockOffset
argument_list|()
argument_list|,
name|newBuf
argument_list|,
name|HFileBlock
operator|.
name|FILL_HEADER
argument_list|,
literal|0
argument_list|,
name|includesMemstoreTS
argument_list|)
return|;
block|}
specifier|private
name|ByteBuffer
name|encodeBufferToHFileBlockBuffer
parameter_list|(
name|ByteBuffer
name|in
parameter_list|,
name|DataBlockEncodings
operator|.
name|Algorithm
name|algo
parameter_list|,
name|boolean
name|includesMemstoreTS
parameter_list|)
block|{
name|ByteArrayOutputStream
name|encodedStream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|dataOut
init|=
operator|new
name|DataOutputStream
argument_list|(
name|encodedStream
argument_list|)
decl_stmt|;
name|DataBlockEncoder
name|encoder
init|=
name|algo
operator|.
name|getEncoder
argument_list|()
decl_stmt|;
try|try
block|{
name|encodedStream
operator|.
name|write
argument_list|(
name|HFileBlock
operator|.
name|DUMMY_HEADER
argument_list|)
expr_stmt|;
name|algo
operator|.
name|writeIdInBytes
argument_list|(
name|dataOut
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|compressKeyValues
argument_list|(
name|dataOut
argument_list|,
name|in
argument_list|,
name|includesMemstoreTS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Bug in data block encoder "
operator|+
literal|"'%s', it probably requested too much data"
argument_list|,
name|algo
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|encodedStream
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|HFileBlock
name|encodeDataBlock
parameter_list|(
name|HFileBlock
name|block
parameter_list|,
name|DataBlockEncodings
operator|.
name|Algorithm
name|algo
parameter_list|,
name|boolean
name|includesMemstoreTS
parameter_list|)
block|{
name|ByteBuffer
name|compressedBuffer
init|=
name|encodeBufferToHFileBlockBuffer
argument_list|(
name|block
operator|.
name|getBufferWithoutHeader
argument_list|()
argument_list|,
name|algo
argument_list|,
name|includesMemstoreTS
argument_list|)
decl_stmt|;
name|int
name|sizeWithoutHeader
init|=
name|compressedBuffer
operator|.
name|limit
argument_list|()
operator|-
name|HFileBlock
operator|.
name|HEADER_SIZE
decl_stmt|;
return|return
operator|new
name|HFileBlock
argument_list|(
name|BlockType
operator|.
name|ENCODED_DATA
argument_list|,
name|block
operator|.
name|getOnDiskSizeWithoutHeader
argument_list|()
argument_list|,
name|sizeWithoutHeader
argument_list|,
name|block
operator|.
name|getPrevBlockOffset
argument_list|()
argument_list|,
name|compressedBuffer
argument_list|,
name|HFileBlock
operator|.
name|FILL_HEADER
argument_list|,
name|block
operator|.
name|getOffset
argument_list|()
argument_list|,
name|includesMemstoreTS
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|ignoreBlock
parameter_list|(
name|HFileBlock
name|block
parameter_list|)
block|{
name|BlockType
name|type
init|=
name|block
operator|.
name|getBlockType
argument_list|()
decl_stmt|;
return|return
name|type
operator|!=
name|BlockType
operator|.
name|DATA
operator|&&
name|type
operator|!=
name|BlockType
operator|.
name|ENCODED_DATA
return|;
block|}
specifier|private
name|boolean
name|dontEncodeBeforeCompaction
parameter_list|(
name|boolean
name|isCompaction
parameter_list|)
block|{
return|return
name|isCompaction
operator|&&
name|onDisk
operator|==
name|DataBlockEncodings
operator|.
name|Algorithm
operator|.
name|NONE
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" onDisk='%s' inCache='%s' encodedSeek=%s"
argument_list|,
name|onDisk
operator|.
name|toString
argument_list|()
argument_list|,
name|inCache
operator|.
name|toString
argument_list|()
argument_list|,
name|encodedSeek
argument_list|)
return|;
block|}
block|}
end_class

end_unit

