begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|encoding
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * Provide access to all data block encoding algorithms. All of the algorithms  * are required to have unique id which should<b>NEVER</b> be changed. If you  * want to add a new algorithm/version, assign it a new id. Announce the new id  * in the HBase mailing list to prevent collisions.  */
end_comment

begin_enum
specifier|public
enum|enum
name|DataBlockEncoding
block|{
comment|/** Disable data block encoding. */
name|NONE
argument_list|(
literal|0
argument_list|,
literal|null
argument_list|)
block|,
comment|// id 1 is reserved for the BITSET algorithm to be added later
name|PREFIX
argument_list|(
literal|2
argument_list|,
operator|new
name|PrefixKeyDeltaEncoder
argument_list|()
argument_list|)
block|,
name|DIFF
argument_list|(
literal|3
argument_list|,
operator|new
name|DiffKeyDeltaEncoder
argument_list|()
argument_list|)
block|,
name|FAST_DIFF
argument_list|(
literal|4
argument_list|,
operator|new
name|FastDiffDeltaEncoder
argument_list|()
argument_list|)
block|;
specifier|private
specifier|final
name|short
name|id
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|idInBytes
decl_stmt|;
specifier|private
specifier|final
name|DataBlockEncoder
name|encoder
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|ID_SIZE
init|=
name|Bytes
operator|.
name|SIZEOF_SHORT
decl_stmt|;
comment|/** Maps data block encoding ids to enum instances. */
specifier|private
specifier|static
name|Map
argument_list|<
name|Short
argument_list|,
name|DataBlockEncoding
argument_list|>
name|idToEncoding
init|=
operator|new
name|HashMap
argument_list|<
name|Short
argument_list|,
name|DataBlockEncoding
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|DataBlockEncoding
name|algo
range|:
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|idToEncoding
operator|.
name|containsKey
argument_list|(
name|algo
operator|.
name|id
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Two data block encoder algorithms '%s' and '%s' have "
operator|+
literal|"the same id %d"
argument_list|,
name|idToEncoding
operator|.
name|get
argument_list|(
name|algo
operator|.
name|id
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|algo
operator|.
name|toString
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|algo
operator|.
name|id
argument_list|)
argument_list|)
throw|;
block|}
name|idToEncoding
operator|.
name|put
argument_list|(
name|algo
operator|.
name|id
argument_list|,
name|algo
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|DataBlockEncoding
parameter_list|(
name|int
name|id
parameter_list|,
name|DataBlockEncoder
name|encoder
parameter_list|)
block|{
if|if
condition|(
name|id
argument_list|<
name|Short
operator|.
name|MIN_VALUE
operator|||
name|id
argument_list|>
name|Short
operator|.
name|MAX_VALUE
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Data block encoding algorithm id is out of range: "
operator|+
name|id
argument_list|)
throw|;
block|}
name|this
operator|.
name|id
operator|=
operator|(
name|short
operator|)
name|id
expr_stmt|;
name|this
operator|.
name|idInBytes
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|this
operator|.
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|idInBytes
operator|.
name|length
operator|!=
name|ID_SIZE
condition|)
block|{
comment|// White this may seem redundant, if we accidentally serialize
comment|// the id as e.g. an int instead of a short, all encoders will break.
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected length of encoder ID byte "
operator|+
literal|"representation: "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|idInBytes
argument_list|)
argument_list|)
throw|;
block|}
name|this
operator|.
name|encoder
operator|=
name|encoder
expr_stmt|;
block|}
comment|/**    * @return name converted to bytes.    */
specifier|public
name|byte
index|[]
name|getNameInBytes
parameter_list|()
block|{
return|return
name|Bytes
operator|.
name|toBytes
argument_list|(
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * @return The id of a data block encoder.    */
specifier|public
name|short
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
comment|/**    * Writes id in bytes.    * @param stream where the id should be written.    */
specifier|public
name|void
name|writeIdInBytes
parameter_list|(
name|OutputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
name|stream
operator|.
name|write
argument_list|(
name|idInBytes
argument_list|)
expr_stmt|;
block|}
comment|/**    * Return new data block encoder for given algorithm type.    * @return data block encoder if algorithm is specified, null if none is    *         selected.    */
specifier|public
name|DataBlockEncoder
name|getEncoder
parameter_list|()
block|{
return|return
name|encoder
return|;
block|}
comment|/**    * Provide access to all data block encoders, even those which are not    * exposed in the enum. Useful for testing and benchmarking.    * @return list of all data block encoders.    */
specifier|public
specifier|static
name|List
argument_list|<
name|DataBlockEncoder
argument_list|>
name|getAllEncoders
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|DataBlockEncoder
argument_list|>
name|encoders
init|=
operator|new
name|ArrayList
argument_list|<
name|DataBlockEncoder
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|DataBlockEncoding
name|algo
range|:
name|values
argument_list|()
control|)
block|{
name|DataBlockEncoder
name|encoder
init|=
name|algo
operator|.
name|getEncoder
argument_list|()
decl_stmt|;
if|if
condition|(
name|encoder
operator|!=
literal|null
condition|)
block|{
name|encoders
operator|.
name|add
argument_list|(
name|encoder
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Add encoders that are only used in testing.
name|encoders
operator|.
name|add
argument_list|(
operator|new
name|CopyKeyDataBlockEncoder
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|encoders
return|;
block|}
comment|/**    * Find and create data block encoder for given id;    * @param encoderId id of data block encoder.    * @return Newly created data block encoder.    */
specifier|public
specifier|static
name|DataBlockEncoder
name|getDataBlockEncoderById
parameter_list|(
name|short
name|encoderId
parameter_list|)
block|{
if|if
condition|(
operator|!
name|idToEncoding
operator|.
name|containsKey
argument_list|(
name|encoderId
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"There is no data block encoder for given id '%d'"
argument_list|,
operator|(
name|int
operator|)
name|encoderId
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|idToEncoding
operator|.
name|get
argument_list|(
name|encoderId
argument_list|)
operator|.
name|getEncoder
argument_list|()
return|;
block|}
comment|/**    * Find and return the name of data block encoder for the given id.    * @param encoderId id of data block encoder    * @return name, same as used in options in column family    */
specifier|public
specifier|static
name|String
name|getNameFromId
parameter_list|(
name|short
name|encoderId
parameter_list|)
block|{
return|return
name|idToEncoding
operator|.
name|get
argument_list|(
name|encoderId
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Check if given encoder has this id.    * @param encoder encoder which id will be checked    * @param encoderId id which we except    * @return true if id is right for given encoder, false otherwise    * @exception IllegalArgumentException    *            thrown when there is no matching data block encoder    */
specifier|public
specifier|static
name|boolean
name|isCorrectEncoder
parameter_list|(
name|DataBlockEncoder
name|encoder
parameter_list|,
name|short
name|encoderId
parameter_list|)
block|{
if|if
condition|(
operator|!
name|idToEncoding
operator|.
name|containsKey
argument_list|(
name|encoderId
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"There is no data block encoder for given id '%d'"
argument_list|,
operator|(
name|int
operator|)
name|encoderId
argument_list|)
argument_list|)
throw|;
block|}
name|DataBlockEncoding
name|algorithm
init|=
name|idToEncoding
operator|.
name|get
argument_list|(
name|encoderId
argument_list|)
decl_stmt|;
return|return
name|algorithm
operator|.
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|encoder
operator|.
name|getClass
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|DataBlockEncoding
name|getEncodingById
parameter_list|(
name|short
name|dataBlockEncodingId
parameter_list|)
block|{
return|return
name|idToEncoding
operator|.
name|get
argument_list|(
name|dataBlockEncodingId
argument_list|)
return|;
block|}
block|}
end_enum

end_unit

