begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2011 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|slab
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|HeapSize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|BlockCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|BlockCacheColumnFamilySummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|CacheStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|Cacheable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|CacheableDeserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ClassSize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|MapEvictionListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|MapMaker
import|;
end_import

begin_comment
comment|/**  * SingleSizeCache is a slab allocated cache that caches elements up to a single  * size. It uses a slab allocator (Slab.java) to divide a direct bytebuffer,  * into evenly sized blocks. Any cached data will take up exactly 1 block. An  * exception will be thrown if the cached data cannot fit into the blockSize of  * this SingleSizeCache.  *  * Eviction and LRUness is taken care of by Guava's MapMaker, which creates a  * ConcurrentLinkedHashMap.  *  **/
end_comment

begin_class
specifier|public
class|class
name|SingleSizeCache
implements|implements
name|BlockCache
block|{
specifier|private
specifier|final
name|Slab
name|backingStore
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|CacheablePair
argument_list|>
name|backingMap
decl_stmt|;
specifier|private
specifier|final
name|int
name|numBlocks
decl_stmt|;
specifier|private
specifier|final
name|int
name|blockSize
decl_stmt|;
specifier|private
specifier|final
name|CacheStats
name|stats
decl_stmt|;
specifier|private
specifier|final
name|SlabItemEvictionWatcher
name|evictionWatcher
decl_stmt|;
specifier|private
name|AtomicLong
name|size
decl_stmt|;
specifier|private
name|AtomicLong
name|timeSinceLastAccess
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|long
name|CACHE_FIXED_OVERHEAD
init|=
name|ClassSize
operator|.
name|align
argument_list|(
operator|(
literal|2
operator|*
name|Bytes
operator|.
name|SIZEOF_INT
operator|)
operator|+
operator|(
literal|5
operator|*
name|ClassSize
operator|.
name|REFERENCE
operator|)
operator|+
operator|+
name|ClassSize
operator|.
name|OBJECT
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SingleSizeCache
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Default constructor. Specify the size of the blocks, number of blocks, and    * the SlabCache this cache will be assigned to.    *    *    * @param blockSize the size of each block, in bytes    *    * @param numBlocks the number of blocks of blockSize this cache will hold.    *    * @param master the SlabCache this SingleSlabCache is assigned to.    */
specifier|public
name|SingleSizeCache
parameter_list|(
name|int
name|blockSize
parameter_list|,
name|int
name|numBlocks
parameter_list|,
name|SlabItemEvictionWatcher
name|master
parameter_list|)
block|{
name|this
operator|.
name|blockSize
operator|=
name|blockSize
expr_stmt|;
name|this
operator|.
name|numBlocks
operator|=
name|numBlocks
expr_stmt|;
name|backingStore
operator|=
operator|new
name|Slab
argument_list|(
name|blockSize
argument_list|,
name|numBlocks
argument_list|)
expr_stmt|;
name|this
operator|.
name|stats
operator|=
operator|new
name|CacheStats
argument_list|()
expr_stmt|;
name|this
operator|.
name|evictionWatcher
operator|=
name|master
expr_stmt|;
name|this
operator|.
name|size
operator|=
operator|new
name|AtomicLong
argument_list|(
name|CACHE_FIXED_OVERHEAD
operator|+
name|backingStore
operator|.
name|heapSize
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|timeSinceLastAccess
operator|=
operator|new
name|AtomicLong
argument_list|()
expr_stmt|;
comment|// This evictionListener is called whenever the cache automatically evicts
comment|// something.
name|MapEvictionListener
argument_list|<
name|String
argument_list|,
name|CacheablePair
argument_list|>
name|listener
init|=
operator|new
name|MapEvictionListener
argument_list|<
name|String
argument_list|,
name|CacheablePair
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onEviction
parameter_list|(
name|String
name|key
parameter_list|,
name|CacheablePair
name|value
parameter_list|)
block|{
try|try
block|{
name|value
operator|.
name|evictionLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|timeSinceLastAccess
operator|.
name|set
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|value
operator|.
name|recentlyAccessed
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|backingStore
operator|.
name|free
argument_list|(
name|value
operator|.
name|serializedData
argument_list|)
expr_stmt|;
name|stats
operator|.
name|evict
argument_list|()
expr_stmt|;
comment|/**            * We may choose to run this cache alone, without the SlabCache on            * top, no evictionWatcher in that case            */
if|if
condition|(
name|evictionWatcher
operator|!=
literal|null
condition|)
block|{
name|evictionWatcher
operator|.
name|onEviction
argument_list|(
name|key
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|size
operator|.
name|addAndGet
argument_list|(
operator|-
literal|1
operator|*
name|value
operator|.
name|heapSize
argument_list|()
argument_list|)
expr_stmt|;
name|stats
operator|.
name|evicted
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|value
operator|.
name|evictionLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|backingMap
operator|=
operator|new
name|MapMaker
argument_list|()
operator|.
name|maximumSize
argument_list|(
name|numBlocks
operator|-
literal|1
argument_list|)
operator|.
name|evictionListener
argument_list|(
name|listener
argument_list|)
operator|.
name|makeMap
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|cacheBlock
parameter_list|(
name|String
name|blockName
parameter_list|,
name|Cacheable
name|toBeCached
parameter_list|)
block|{
name|ByteBuffer
name|storedBlock
decl_stmt|;
comment|/*      * Spinlock if empty, Guava Mapmaker guarantees that we will not store more      * items than the memory we have allocated, but the Slab Allocator may still      * be empty if we have not yet completed eviction      */
do|do
block|{
name|storedBlock
operator|=
name|backingStore
operator|.
name|alloc
argument_list|(
name|toBeCached
operator|.
name|getSerializedLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|storedBlock
operator|==
literal|null
condition|)
do|;
name|CacheablePair
name|newEntry
init|=
operator|new
name|CacheablePair
argument_list|(
name|toBeCached
operator|.
name|getDeserializer
argument_list|()
argument_list|,
name|storedBlock
argument_list|)
decl_stmt|;
name|CacheablePair
name|alreadyCached
init|=
name|backingMap
operator|.
name|putIfAbsent
argument_list|(
name|blockName
argument_list|,
name|newEntry
argument_list|)
decl_stmt|;
if|if
condition|(
name|alreadyCached
operator|!=
literal|null
condition|)
block|{
name|backingStore
operator|.
name|free
argument_list|(
name|storedBlock
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"already cached "
operator|+
name|blockName
argument_list|)
throw|;
block|}
name|toBeCached
operator|.
name|serialize
argument_list|(
name|storedBlock
argument_list|)
expr_stmt|;
name|newEntry
operator|.
name|recentlyAccessed
operator|.
name|set
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|size
operator|.
name|addAndGet
argument_list|(
name|newEntry
operator|.
name|heapSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Cacheable
name|getBlock
parameter_list|(
name|String
name|key
parameter_list|,
name|boolean
name|caching
parameter_list|)
block|{
name|CacheablePair
name|contentBlock
init|=
name|backingMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|contentBlock
operator|==
literal|null
condition|)
block|{
name|stats
operator|.
name|miss
argument_list|(
name|caching
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|stats
operator|.
name|hit
argument_list|(
name|caching
argument_list|)
expr_stmt|;
comment|// If lock cannot be obtained, that means we're undergoing eviction.
if|if
condition|(
name|contentBlock
operator|.
name|evictionLock
operator|.
name|readLock
argument_list|()
operator|.
name|tryLock
argument_list|()
condition|)
block|{
try|try
block|{
name|contentBlock
operator|.
name|recentlyAccessed
operator|.
name|set
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|contentBlock
operator|.
name|deserializer
operator|.
name|deserialize
argument_list|(
name|contentBlock
operator|.
name|serializedData
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Deserializer throwing ioexception, possibly deserializing wrong object buffer"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|contentBlock
operator|.
name|evictionLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Evicts the block    *    * @param key the key of the entry we are going to evict    * @return the evicted ByteBuffer    */
specifier|public
name|boolean
name|evictBlock
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|stats
operator|.
name|evict
argument_list|()
expr_stmt|;
name|CacheablePair
name|evictedBlock
init|=
name|backingMap
operator|.
name|remove
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|evictedBlock
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|evictedBlock
operator|.
name|evictionLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|backingStore
operator|.
name|free
argument_list|(
name|evictedBlock
operator|.
name|serializedData
argument_list|)
expr_stmt|;
name|evictionWatcher
operator|.
name|onEviction
argument_list|(
name|key
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|stats
operator|.
name|evicted
argument_list|()
expr_stmt|;
name|size
operator|.
name|addAndGet
argument_list|(
operator|-
literal|1
operator|*
name|evictedBlock
operator|.
name|heapSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|evictedBlock
operator|.
name|evictionLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|evictedBlock
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|logStats
parameter_list|()
block|{
name|long
name|milliseconds
init|=
operator|(
name|long
operator|)
name|this
operator|.
name|timeSinceLastAccess
operator|.
name|get
argument_list|()
operator|/
literal|1000000
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"For Slab of size "
operator|+
name|this
operator|.
name|blockSize
operator|+
literal|": "
operator|+
name|this
operator|.
name|getOccupiedSize
argument_list|()
operator|/
name|this
operator|.
name|blockSize
operator|+
literal|" occupied, out of a capacity of "
operator|+
name|this
operator|.
name|numBlocks
operator|+
literal|" blocks. HeapSize is "
operator|+
name|StringUtils
operator|.
name|humanReadableInt
argument_list|(
name|this
operator|.
name|heapSize
argument_list|()
argument_list|)
operator|+
literal|" bytes."
operator|+
literal|", "
operator|+
literal|"churnTime="
operator|+
name|StringUtils
operator|.
name|formatTime
argument_list|(
name|milliseconds
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Slab Stats: "
operator|+
literal|"accesses="
operator|+
name|stats
operator|.
name|getRequestCount
argument_list|()
operator|+
literal|", "
operator|+
literal|"hits="
operator|+
name|stats
operator|.
name|getHitCount
argument_list|()
operator|+
literal|", "
operator|+
literal|"hitRatio="
operator|+
operator|(
name|stats
operator|.
name|getHitCount
argument_list|()
operator|==
literal|0
condition|?
literal|"0"
else|:
operator|(
name|StringUtils
operator|.
name|formatPercent
argument_list|(
name|stats
operator|.
name|getHitRatio
argument_list|()
argument_list|,
literal|2
argument_list|)
operator|+
literal|"%, "
operator|)
operator|)
operator|+
literal|"cachingAccesses="
operator|+
name|stats
operator|.
name|getRequestCachingCount
argument_list|()
operator|+
literal|", "
operator|+
literal|"cachingHits="
operator|+
name|stats
operator|.
name|getHitCachingCount
argument_list|()
operator|+
literal|", "
operator|+
literal|"cachingHitsRatio="
operator|+
operator|(
name|stats
operator|.
name|getHitCachingCount
argument_list|()
operator|==
literal|0
condition|?
literal|"0"
else|:
operator|(
name|StringUtils
operator|.
name|formatPercent
argument_list|(
name|stats
operator|.
name|getHitCachingRatio
argument_list|()
argument_list|,
literal|2
argument_list|)
operator|+
literal|"%, "
operator|)
operator|)
operator|+
literal|"evictions="
operator|+
name|stats
operator|.
name|getEvictionCount
argument_list|()
operator|+
literal|", "
operator|+
literal|"evicted="
operator|+
name|stats
operator|.
name|getEvictedCount
argument_list|()
operator|+
literal|", "
operator|+
literal|"evictedPerRun="
operator|+
name|stats
operator|.
name|evictedPerEviction
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|backingStore
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
specifier|public
name|long
name|heapSize
parameter_list|()
block|{
return|return
name|this
operator|.
name|size
argument_list|()
operator|+
name|backingStore
operator|.
name|heapSize
argument_list|()
return|;
block|}
specifier|public
name|long
name|size
parameter_list|()
block|{
return|return
name|this
operator|.
name|blockSize
operator|*
name|this
operator|.
name|numBlocks
return|;
block|}
specifier|public
name|long
name|getFreeSize
parameter_list|()
block|{
return|return
name|backingStore
operator|.
name|getBlocksRemaining
argument_list|()
operator|*
name|blockSize
return|;
block|}
specifier|public
name|long
name|getOccupiedSize
parameter_list|()
block|{
return|return
operator|(
name|numBlocks
operator|-
name|backingStore
operator|.
name|getBlocksRemaining
argument_list|()
operator|)
operator|*
name|blockSize
return|;
block|}
specifier|public
name|long
name|getEvictedCount
parameter_list|()
block|{
return|return
name|stats
operator|.
name|getEvictedCount
argument_list|()
return|;
block|}
specifier|public
name|CacheStats
name|getStats
parameter_list|()
block|{
return|return
name|this
operator|.
name|stats
return|;
block|}
comment|/* Since its offheap, it doesn't matter if its in memory or not */
annotation|@
name|Override
specifier|public
name|void
name|cacheBlock
parameter_list|(
name|String
name|blockName
parameter_list|,
name|Cacheable
name|buf
parameter_list|,
name|boolean
name|inMemory
parameter_list|)
block|{
name|this
operator|.
name|cacheBlock
argument_list|(
name|blockName
argument_list|,
name|buf
argument_list|)
expr_stmt|;
block|}
comment|/*    * This is never called, as evictions are handled in the SlabCache layer,    * implemented in the event we want to use this as a standalone cache.    */
annotation|@
name|Override
specifier|public
name|int
name|evictBlocksByPrefix
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
name|int
name|evictedCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|e
range|:
name|backingMap
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|this
operator|.
name|evictBlock
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|evictedCount
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getCurrentSize
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
comment|/*    * Not implemented. Extremely costly to do this from the off heap cache, you'd    * need to copy every object on heap once    */
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|BlockCacheColumnFamilySummary
argument_list|>
name|getBlockCacheColumnFamilySummaries
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/* Just a pair class, holds a reference to the parent cacheable */
specifier|private
class|class
name|CacheablePair
implements|implements
name|HeapSize
block|{
specifier|final
name|CacheableDeserializer
argument_list|<
name|Cacheable
argument_list|>
name|deserializer
decl_stmt|;
specifier|final
name|ByteBuffer
name|serializedData
decl_stmt|;
specifier|final
name|ReentrantReadWriteLock
name|evictionLock
decl_stmt|;
name|AtomicLong
name|recentlyAccessed
decl_stmt|;
specifier|private
name|CacheablePair
parameter_list|(
name|CacheableDeserializer
argument_list|<
name|Cacheable
argument_list|>
name|deserializer
parameter_list|,
name|ByteBuffer
name|serializedData
parameter_list|)
block|{
name|this
operator|.
name|recentlyAccessed
operator|=
operator|new
name|AtomicLong
argument_list|()
expr_stmt|;
name|this
operator|.
name|deserializer
operator|=
name|deserializer
expr_stmt|;
name|this
operator|.
name|serializedData
operator|=
name|serializedData
expr_stmt|;
name|evictionLock
operator|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
expr_stmt|;
block|}
comment|/*      * Heapsize overhead of this is the default object overhead, the heapsize of      * the serialized object, and the cost of a reference to the bytebuffer,      * which is already accounted for in SingleSizeCache      */
annotation|@
name|Override
specifier|public
name|long
name|heapSize
parameter_list|()
block|{
return|return
name|ClassSize
operator|.
name|align
argument_list|(
name|ClassSize
operator|.
name|OBJECT
operator|+
name|ClassSize
operator|.
name|REFERENCE
operator|*
literal|3
operator|+
name|ClassSize
operator|.
name|REENTRANT_LOCK
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

