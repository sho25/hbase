begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|encoding
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ByteBufferUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|RawComparator
import|;
end_import

begin_comment
comment|/**  * Encoder similar to {@link DiffKeyDeltaEncoder} but supposedly faster.  *  * Compress using:  * - store size of common prefix  * - save column family once in the first KeyValue  * - use integer compression for key, value and prefix (128-bit encoding)  * - use bits to avoid duplication key length, value length  *   and type if it same as previous  * - store in 3 bits length of prefix timestamp  *    with previous KeyValue's timestamp  * - one bit which allow to omit value if it is the same  *  * Format:  * - 1 byte:    flag  * - 1-5 bytes: key length (only if FLAG_SAME_KEY_LENGTH is not set in flag)  * - 1-5 bytes: value length (only if FLAG_SAME_VALUE_LENGTH is not set in flag)  * - 1-5 bytes: prefix length  * - ... bytes: rest of the row (if prefix length is small enough)  * - ... bytes: qualifier (or suffix depending on prefix length)  * - 1-8 bytes: timestamp suffix  * - 1 byte:    type (only if FLAG_SAME_TYPE is not set in the flag)  * - ... bytes: value (only if FLAG_SAME_VALUE is not set in the flag)  *  */
end_comment

begin_class
specifier|public
class|class
name|FastDiffDeltaEncoder
extends|extends
name|BufferedDataBlockEncoder
block|{
specifier|final
name|int
name|MASK_TIMESTAMP_LENGTH
init|=
operator|(
literal|1
operator|<<
literal|0
operator|)
operator||
operator|(
literal|1
operator|<<
literal|1
operator|)
operator||
operator|(
literal|1
operator|<<
literal|2
operator|)
decl_stmt|;
specifier|final
name|int
name|SHIFT_TIMESTAMP_LENGTH
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|FLAG_SAME_KEY_LENGTH
init|=
literal|1
operator|<<
literal|3
decl_stmt|;
specifier|final
name|int
name|FLAG_SAME_VALUE_LENGTH
init|=
literal|1
operator|<<
literal|4
decl_stmt|;
specifier|final
name|int
name|FLAG_SAME_TYPE
init|=
literal|1
operator|<<
literal|5
decl_stmt|;
specifier|final
name|int
name|FLAG_SAME_VALUE
init|=
literal|1
operator|<<
literal|6
decl_stmt|;
specifier|private
specifier|static
class|class
name|FastDiffCompressionState
extends|extends
name|CompressionState
block|{
name|byte
index|[]
name|timestamp
init|=
operator|new
name|byte
index|[
name|KeyValue
operator|.
name|TIMESTAMP_SIZE
index|]
decl_stmt|;
name|int
name|prevTimestampOffset
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|readTimestamp
parameter_list|(
name|ByteBuffer
name|in
parameter_list|)
block|{
name|in
operator|.
name|get
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|copyFrom
parameter_list|(
name|CompressionState
name|state
parameter_list|)
block|{
name|super
operator|.
name|copyFrom
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|FastDiffCompressionState
name|state2
init|=
operator|(
name|FastDiffCompressionState
operator|)
name|state
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|state2
operator|.
name|timestamp
argument_list|,
literal|0
argument_list|,
name|timestamp
argument_list|,
literal|0
argument_list|,
name|KeyValue
operator|.
name|TIMESTAMP_SIZE
argument_list|)
expr_stmt|;
name|prevTimestampOffset
operator|=
name|state2
operator|.
name|prevTimestampOffset
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|compressSingleKeyValue
parameter_list|(
name|FastDiffCompressionState
name|previousState
parameter_list|,
name|FastDiffCompressionState
name|currentState
parameter_list|,
name|OutputStream
name|out
parameter_list|,
name|ByteBuffer
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|currentState
operator|.
name|prevOffset
operator|=
name|in
operator|.
name|position
argument_list|()
expr_stmt|;
name|int
name|keyLength
init|=
name|in
operator|.
name|getInt
argument_list|()
decl_stmt|;
name|int
name|valueOffset
init|=
name|currentState
operator|.
name|prevOffset
operator|+
name|keyLength
operator|+
name|KeyValue
operator|.
name|ROW_OFFSET
decl_stmt|;
name|int
name|valueLength
init|=
name|in
operator|.
name|getInt
argument_list|()
decl_stmt|;
name|byte
name|flag
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|previousState
operator|.
name|isFirst
argument_list|()
condition|)
block|{
comment|// copy the key, there is no common prefix with none
name|ByteBufferUtils
operator|.
name|copyToStream
argument_list|(
name|out
argument_list|,
name|flag
argument_list|)
expr_stmt|;
name|ByteBufferUtils
operator|.
name|putCompressedInt
argument_list|(
name|out
argument_list|,
name|keyLength
argument_list|)
expr_stmt|;
name|ByteBufferUtils
operator|.
name|putCompressedInt
argument_list|(
name|out
argument_list|,
name|valueLength
argument_list|)
expr_stmt|;
name|ByteBufferUtils
operator|.
name|putCompressedInt
argument_list|(
name|out
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|currentState
operator|.
name|readKey
argument_list|(
name|in
argument_list|,
name|keyLength
argument_list|,
name|valueLength
argument_list|)
expr_stmt|;
name|ByteBufferUtils
operator|.
name|copyToStream
argument_list|(
name|out
argument_list|,
name|in
argument_list|,
name|keyLength
operator|+
name|valueLength
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// find a common prefix and skip it
name|int
name|commonPrefix
init|=
name|ByteBufferUtils
operator|.
name|findCommonPrefix
argument_list|(
name|in
argument_list|,
name|in
operator|.
name|position
argument_list|()
argument_list|,
name|previousState
operator|.
name|prevOffset
operator|+
name|KeyValue
operator|.
name|ROW_OFFSET
argument_list|,
name|keyLength
operator|-
name|KeyValue
operator|.
name|TIMESTAMP_TYPE_SIZE
argument_list|)
decl_stmt|;
name|currentState
operator|.
name|readKey
argument_list|(
name|in
argument_list|,
name|keyLength
argument_list|,
name|valueLength
argument_list|,
name|commonPrefix
argument_list|,
name|previousState
argument_list|)
expr_stmt|;
if|if
condition|(
name|keyLength
operator|==
name|previousState
operator|.
name|keyLength
condition|)
block|{
name|flag
operator||=
name|FLAG_SAME_KEY_LENGTH
expr_stmt|;
block|}
if|if
condition|(
name|valueLength
operator|==
name|previousState
operator|.
name|valueLength
condition|)
block|{
name|flag
operator||=
name|FLAG_SAME_VALUE_LENGTH
expr_stmt|;
block|}
if|if
condition|(
name|currentState
operator|.
name|type
operator|==
name|previousState
operator|.
name|type
condition|)
block|{
name|flag
operator||=
name|FLAG_SAME_TYPE
expr_stmt|;
block|}
name|int
name|prefixTimestamp
init|=
name|findCommonTimestampPrefix
argument_list|(
name|currentState
argument_list|,
name|previousState
argument_list|)
decl_stmt|;
name|flag
operator||=
operator|(
name|prefixTimestamp
operator|)
operator|<<
name|SHIFT_TIMESTAMP_LENGTH
expr_stmt|;
if|if
condition|(
name|ByteBufferUtils
operator|.
name|arePartsEqual
argument_list|(
name|in
argument_list|,
name|previousState
operator|.
name|prevOffset
operator|+
name|previousState
operator|.
name|keyLength
operator|+
name|KeyValue
operator|.
name|ROW_OFFSET
argument_list|,
name|previousState
operator|.
name|valueLength
argument_list|,
name|valueOffset
argument_list|,
name|valueLength
argument_list|)
condition|)
block|{
name|flag
operator||=
name|FLAG_SAME_VALUE
expr_stmt|;
block|}
name|ByteBufferUtils
operator|.
name|copyToStream
argument_list|(
name|out
argument_list|,
name|flag
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|flag
operator|&
name|FLAG_SAME_KEY_LENGTH
operator|)
operator|==
literal|0
condition|)
block|{
name|ByteBufferUtils
operator|.
name|putCompressedInt
argument_list|(
name|out
argument_list|,
name|keyLength
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|flag
operator|&
name|FLAG_SAME_VALUE_LENGTH
operator|)
operator|==
literal|0
condition|)
block|{
name|ByteBufferUtils
operator|.
name|putCompressedInt
argument_list|(
name|out
argument_list|,
name|valueLength
argument_list|)
expr_stmt|;
block|}
name|ByteBufferUtils
operator|.
name|putCompressedInt
argument_list|(
name|out
argument_list|,
name|commonPrefix
argument_list|)
expr_stmt|;
name|ByteBufferUtils
operator|.
name|skip
argument_list|(
name|in
argument_list|,
name|commonPrefix
argument_list|)
expr_stmt|;
if|if
condition|(
name|commonPrefix
operator|<
name|currentState
operator|.
name|rowLength
operator|+
name|KeyValue
operator|.
name|ROW_LENGTH_SIZE
condition|)
block|{
name|ByteBufferUtils
operator|.
name|copyToStream
argument_list|(
name|out
argument_list|,
name|in
argument_list|,
name|currentState
operator|.
name|rowLength
operator|+
name|KeyValue
operator|.
name|ROW_LENGTH_SIZE
operator|-
name|commonPrefix
argument_list|)
expr_stmt|;
name|ByteBufferUtils
operator|.
name|skip
argument_list|(
name|in
argument_list|,
name|currentState
operator|.
name|familyLength
operator|+
name|KeyValue
operator|.
name|FAMILY_LENGTH_SIZE
argument_list|)
expr_stmt|;
name|ByteBufferUtils
operator|.
name|copyToStream
argument_list|(
name|out
argument_list|,
name|in
argument_list|,
name|currentState
operator|.
name|qualifierLength
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|restKeyLength
init|=
name|keyLength
operator|-
name|commonPrefix
operator|-
name|KeyValue
operator|.
name|TIMESTAMP_TYPE_SIZE
decl_stmt|;
name|ByteBufferUtils
operator|.
name|copyToStream
argument_list|(
name|out
argument_list|,
name|in
argument_list|,
name|restKeyLength
argument_list|)
expr_stmt|;
block|}
name|ByteBufferUtils
operator|.
name|skip
argument_list|(
name|in
argument_list|,
name|prefixTimestamp
argument_list|)
expr_stmt|;
name|ByteBufferUtils
operator|.
name|copyToStream
argument_list|(
name|out
argument_list|,
name|in
argument_list|,
name|KeyValue
operator|.
name|TIMESTAMP_SIZE
operator|-
name|prefixTimestamp
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|flag
operator|&
name|FLAG_SAME_TYPE
operator|)
operator|==
literal|0
condition|)
block|{
name|valueOffset
operator|-=
name|KeyValue
operator|.
name|TYPE_SIZE
expr_stmt|;
name|valueLength
operator|+=
name|KeyValue
operator|.
name|TYPE_SIZE
expr_stmt|;
block|}
name|ByteBufferUtils
operator|.
name|skip
argument_list|(
name|in
argument_list|,
name|KeyValue
operator|.
name|TYPE_SIZE
operator|+
name|currentState
operator|.
name|valueLength
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|flag
operator|&
name|FLAG_SAME_VALUE
operator|)
operator|==
literal|0
condition|)
block|{
name|ByteBufferUtils
operator|.
name|copyToStream
argument_list|(
name|out
argument_list|,
name|in
argument_list|,
name|valueOffset
argument_list|,
name|valueLength
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|(
name|flag
operator|&
name|FLAG_SAME_TYPE
operator|)
operator|==
literal|0
condition|)
block|{
name|ByteBufferUtils
operator|.
name|copyToStream
argument_list|(
name|out
argument_list|,
name|currentState
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|int
name|findCommonTimestampPrefix
parameter_list|(
name|FastDiffCompressionState
name|left
parameter_list|,
name|FastDiffCompressionState
name|right
parameter_list|)
block|{
name|int
name|prefixTimestamp
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|prefixTimestamp
operator|<
operator|(
name|KeyValue
operator|.
name|TIMESTAMP_SIZE
operator|-
literal|1
operator|)
operator|&&
name|left
operator|.
name|timestamp
index|[
name|prefixTimestamp
index|]
operator|==
name|right
operator|.
name|timestamp
index|[
name|prefixTimestamp
index|]
condition|)
block|{
name|prefixTimestamp
operator|++
expr_stmt|;
block|}
return|return
name|prefixTimestamp
return|;
comment|// has to be at most 7 bytes
block|}
specifier|private
name|void
name|uncompressSingleKeyValue
parameter_list|(
name|DataInputStream
name|source
parameter_list|,
name|ByteBuffer
name|buffer
parameter_list|,
name|FastDiffCompressionState
name|state
parameter_list|)
throws|throws
name|IOException
throws|,
name|EncoderBufferTooSmallException
block|{
name|byte
name|flag
init|=
name|source
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|int
name|prevKeyLength
init|=
name|state
operator|.
name|keyLength
decl_stmt|;
if|if
condition|(
operator|(
name|flag
operator|&
name|FLAG_SAME_KEY_LENGTH
operator|)
operator|==
literal|0
condition|)
block|{
name|state
operator|.
name|keyLength
operator|=
name|ByteBufferUtils
operator|.
name|readCompressedInt
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|flag
operator|&
name|FLAG_SAME_VALUE_LENGTH
operator|)
operator|==
literal|0
condition|)
block|{
name|state
operator|.
name|valueLength
operator|=
name|ByteBufferUtils
operator|.
name|readCompressedInt
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
name|int
name|commonLength
init|=
name|ByteBufferUtils
operator|.
name|readCompressedInt
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|ByteBufferUtils
operator|.
name|ensureSpace
argument_list|(
name|buffer
argument_list|,
name|state
operator|.
name|keyLength
operator|+
name|state
operator|.
name|valueLength
operator|+
name|KeyValue
operator|.
name|ROW_OFFSET
argument_list|)
expr_stmt|;
name|int
name|kvPos
init|=
name|buffer
operator|.
name|position
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|state
operator|.
name|isFirst
argument_list|()
condition|)
block|{
comment|// copy the prefix
name|int
name|common
decl_stmt|;
name|int
name|prevOffset
decl_stmt|;
if|if
condition|(
operator|(
name|flag
operator|&
name|FLAG_SAME_VALUE_LENGTH
operator|)
operator|==
literal|0
condition|)
block|{
name|buffer
operator|.
name|putInt
argument_list|(
name|state
operator|.
name|keyLength
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|putInt
argument_list|(
name|state
operator|.
name|valueLength
argument_list|)
expr_stmt|;
name|prevOffset
operator|=
name|state
operator|.
name|prevOffset
operator|+
name|KeyValue
operator|.
name|ROW_OFFSET
expr_stmt|;
name|common
operator|=
name|commonLength
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|(
name|flag
operator|&
name|FLAG_SAME_KEY_LENGTH
operator|)
operator|!=
literal|0
condition|)
block|{
name|prevOffset
operator|=
name|state
operator|.
name|prevOffset
expr_stmt|;
name|common
operator|=
name|commonLength
operator|+
name|KeyValue
operator|.
name|ROW_OFFSET
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|putInt
argument_list|(
name|state
operator|.
name|keyLength
argument_list|)
expr_stmt|;
name|prevOffset
operator|=
name|state
operator|.
name|prevOffset
operator|+
name|KeyValue
operator|.
name|KEY_LENGTH_SIZE
expr_stmt|;
name|common
operator|=
name|commonLength
operator|+
name|KeyValue
operator|.
name|KEY_LENGTH_SIZE
expr_stmt|;
block|}
block|}
name|ByteBufferUtils
operator|.
name|copyFromBuffer
argument_list|(
name|buffer
argument_list|,
name|buffer
argument_list|,
name|prevOffset
argument_list|,
name|common
argument_list|)
expr_stmt|;
comment|// copy the rest of the key from the buffer
name|int
name|keyRestLength
decl_stmt|;
if|if
condition|(
name|commonLength
operator|<
name|state
operator|.
name|rowLength
operator|+
name|KeyValue
operator|.
name|ROW_LENGTH_SIZE
condition|)
block|{
comment|// omit the family part of the key, it is always the same
name|int
name|rowWithSizeLength
decl_stmt|;
name|int
name|rowRestLength
decl_stmt|;
comment|// check length of row
if|if
condition|(
name|commonLength
operator|<
name|KeyValue
operator|.
name|ROW_LENGTH_SIZE
condition|)
block|{
comment|// not yet copied, do it now
name|ByteBufferUtils
operator|.
name|copyFromStream
argument_list|(
name|source
argument_list|,
name|buffer
argument_list|,
name|KeyValue
operator|.
name|ROW_LENGTH_SIZE
operator|-
name|commonLength
argument_list|)
expr_stmt|;
name|rowWithSizeLength
operator|=
name|buffer
operator|.
name|getShort
argument_list|(
name|buffer
operator|.
name|position
argument_list|()
operator|-
name|KeyValue
operator|.
name|ROW_LENGTH_SIZE
argument_list|)
operator|+
name|KeyValue
operator|.
name|ROW_LENGTH_SIZE
expr_stmt|;
name|rowRestLength
operator|=
name|rowWithSizeLength
operator|-
name|KeyValue
operator|.
name|ROW_LENGTH_SIZE
expr_stmt|;
block|}
else|else
block|{
comment|// already in kvBuffer, just read it
name|rowWithSizeLength
operator|=
name|buffer
operator|.
name|getShort
argument_list|(
name|kvPos
operator|+
name|KeyValue
operator|.
name|ROW_OFFSET
argument_list|)
operator|+
name|KeyValue
operator|.
name|ROW_LENGTH_SIZE
expr_stmt|;
name|rowRestLength
operator|=
name|rowWithSizeLength
operator|-
name|commonLength
expr_stmt|;
block|}
comment|// copy the rest of row
name|ByteBufferUtils
operator|.
name|copyFromStream
argument_list|(
name|source
argument_list|,
name|buffer
argument_list|,
name|rowRestLength
argument_list|)
expr_stmt|;
comment|// copy the column family
name|ByteBufferUtils
operator|.
name|copyFromBuffer
argument_list|(
name|buffer
argument_list|,
name|buffer
argument_list|,
name|state
operator|.
name|prevOffset
operator|+
name|KeyValue
operator|.
name|ROW_OFFSET
operator|+
name|KeyValue
operator|.
name|ROW_LENGTH_SIZE
operator|+
name|state
operator|.
name|rowLength
argument_list|,
name|state
operator|.
name|familyLength
operator|+
name|KeyValue
operator|.
name|FAMILY_LENGTH_SIZE
argument_list|)
expr_stmt|;
name|state
operator|.
name|rowLength
operator|=
call|(
name|short
call|)
argument_list|(
name|rowWithSizeLength
operator|-
name|KeyValue
operator|.
name|ROW_LENGTH_SIZE
argument_list|)
expr_stmt|;
name|keyRestLength
operator|=
name|state
operator|.
name|keyLength
operator|-
name|rowWithSizeLength
operator|-
name|state
operator|.
name|familyLength
operator|-
operator|(
name|KeyValue
operator|.
name|FAMILY_LENGTH_SIZE
operator|+
name|KeyValue
operator|.
name|TIMESTAMP_TYPE_SIZE
operator|)
expr_stmt|;
block|}
else|else
block|{
comment|// prevRowWithSizeLength is the same as on previous row
name|keyRestLength
operator|=
name|state
operator|.
name|keyLength
operator|-
name|commonLength
operator|-
name|KeyValue
operator|.
name|TIMESTAMP_TYPE_SIZE
expr_stmt|;
block|}
comment|// copy the rest of the key, after column family == column qualifier
name|ByteBufferUtils
operator|.
name|copyFromStream
argument_list|(
name|source
argument_list|,
name|buffer
argument_list|,
name|keyRestLength
argument_list|)
expr_stmt|;
comment|// copy timestamp
name|int
name|prefixTimestamp
init|=
operator|(
name|flag
operator|&
name|MASK_TIMESTAMP_LENGTH
operator|)
operator|>>>
name|SHIFT_TIMESTAMP_LENGTH
decl_stmt|;
name|ByteBufferUtils
operator|.
name|copyFromBuffer
argument_list|(
name|buffer
argument_list|,
name|buffer
argument_list|,
name|state
operator|.
name|prevTimestampOffset
argument_list|,
name|prefixTimestamp
argument_list|)
expr_stmt|;
name|state
operator|.
name|prevTimestampOffset
operator|=
name|buffer
operator|.
name|position
argument_list|()
operator|-
name|prefixTimestamp
expr_stmt|;
name|ByteBufferUtils
operator|.
name|copyFromStream
argument_list|(
name|source
argument_list|,
name|buffer
argument_list|,
name|KeyValue
operator|.
name|TIMESTAMP_SIZE
operator|-
name|prefixTimestamp
argument_list|)
expr_stmt|;
comment|// copy the type and value
if|if
condition|(
operator|(
name|flag
operator|&
name|FLAG_SAME_TYPE
operator|)
operator|!=
literal|0
condition|)
block|{
name|buffer
operator|.
name|put
argument_list|(
name|state
operator|.
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|flag
operator|&
name|FLAG_SAME_VALUE
operator|)
operator|!=
literal|0
condition|)
block|{
name|ByteBufferUtils
operator|.
name|copyFromBuffer
argument_list|(
name|buffer
argument_list|,
name|buffer
argument_list|,
name|state
operator|.
name|prevOffset
operator|+
name|KeyValue
operator|.
name|ROW_OFFSET
operator|+
name|prevKeyLength
argument_list|,
name|state
operator|.
name|valueLength
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ByteBufferUtils
operator|.
name|copyFromStream
argument_list|(
name|source
argument_list|,
name|buffer
argument_list|,
name|state
operator|.
name|valueLength
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|(
name|flag
operator|&
name|FLAG_SAME_VALUE
operator|)
operator|!=
literal|0
condition|)
block|{
name|ByteBufferUtils
operator|.
name|copyFromStream
argument_list|(
name|source
argument_list|,
name|buffer
argument_list|,
name|KeyValue
operator|.
name|TYPE_SIZE
argument_list|)
expr_stmt|;
name|ByteBufferUtils
operator|.
name|copyFromBuffer
argument_list|(
name|buffer
argument_list|,
name|buffer
argument_list|,
name|state
operator|.
name|prevOffset
operator|+
name|KeyValue
operator|.
name|ROW_OFFSET
operator|+
name|prevKeyLength
argument_list|,
name|state
operator|.
name|valueLength
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ByteBufferUtils
operator|.
name|copyFromStream
argument_list|(
name|source
argument_list|,
name|buffer
argument_list|,
name|state
operator|.
name|valueLength
operator|+
name|KeyValue
operator|.
name|TYPE_SIZE
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|type
operator|=
name|buffer
operator|.
name|get
argument_list|(
name|state
operator|.
name|prevTimestampOffset
operator|+
name|KeyValue
operator|.
name|TIMESTAMP_SIZE
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// is first element
name|buffer
operator|.
name|putInt
argument_list|(
name|state
operator|.
name|keyLength
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|putInt
argument_list|(
name|state
operator|.
name|valueLength
argument_list|)
expr_stmt|;
name|state
operator|.
name|prevTimestampOffset
operator|=
name|buffer
operator|.
name|position
argument_list|()
operator|+
name|state
operator|.
name|keyLength
operator|-
name|KeyValue
operator|.
name|TIMESTAMP_TYPE_SIZE
expr_stmt|;
name|ByteBufferUtils
operator|.
name|copyFromStream
argument_list|(
name|source
argument_list|,
name|buffer
argument_list|,
name|state
operator|.
name|keyLength
operator|+
name|state
operator|.
name|valueLength
argument_list|)
expr_stmt|;
name|state
operator|.
name|rowLength
operator|=
name|buffer
operator|.
name|getShort
argument_list|(
name|kvPos
operator|+
name|KeyValue
operator|.
name|ROW_OFFSET
argument_list|)
expr_stmt|;
name|state
operator|.
name|familyLength
operator|=
name|buffer
operator|.
name|get
argument_list|(
name|kvPos
operator|+
name|KeyValue
operator|.
name|ROW_OFFSET
operator|+
name|KeyValue
operator|.
name|ROW_LENGTH_SIZE
operator|+
name|state
operator|.
name|rowLength
argument_list|)
expr_stmt|;
name|state
operator|.
name|type
operator|=
name|buffer
operator|.
name|get
argument_list|(
name|state
operator|.
name|prevTimestampOffset
operator|+
name|KeyValue
operator|.
name|TIMESTAMP_SIZE
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|prevOffset
operator|=
name|kvPos
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|compressKeyValues
parameter_list|(
name|DataOutputStream
name|out
parameter_list|,
name|ByteBuffer
name|in
parameter_list|,
name|boolean
name|includesMemstoreTS
parameter_list|)
throws|throws
name|IOException
block|{
name|in
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|ByteBufferUtils
operator|.
name|putInt
argument_list|(
name|out
argument_list|,
name|in
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
name|FastDiffCompressionState
name|previousState
init|=
operator|new
name|FastDiffCompressionState
argument_list|()
decl_stmt|;
name|FastDiffCompressionState
name|currentState
init|=
operator|new
name|FastDiffCompressionState
argument_list|()
decl_stmt|;
while|while
condition|(
name|in
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|compressSingleKeyValue
argument_list|(
name|previousState
argument_list|,
name|currentState
argument_list|,
name|out
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|afterEncodingKeyValue
argument_list|(
name|in
argument_list|,
name|out
argument_list|,
name|includesMemstoreTS
argument_list|)
expr_stmt|;
comment|// swap previousState<-> currentState
name|FastDiffCompressionState
name|tmp
init|=
name|previousState
decl_stmt|;
name|previousState
operator|=
name|currentState
expr_stmt|;
name|currentState
operator|=
name|tmp
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ByteBuffer
name|uncompressKeyValues
parameter_list|(
name|DataInputStream
name|source
parameter_list|,
name|int
name|allocHeaderLength
parameter_list|,
name|int
name|skipLastBytes
parameter_list|,
name|boolean
name|includesMemstoreTS
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|decompressedSize
init|=
name|source
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|ByteBuffer
name|buffer
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|decompressedSize
operator|+
name|allocHeaderLength
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|position
argument_list|(
name|allocHeaderLength
argument_list|)
expr_stmt|;
name|FastDiffCompressionState
name|state
init|=
operator|new
name|FastDiffCompressionState
argument_list|()
decl_stmt|;
while|while
condition|(
name|source
operator|.
name|available
argument_list|()
operator|>
name|skipLastBytes
condition|)
block|{
name|uncompressSingleKeyValue
argument_list|(
name|source
argument_list|,
name|buffer
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|afterDecodingKeyValue
argument_list|(
name|source
argument_list|,
name|buffer
argument_list|,
name|includesMemstoreTS
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|source
operator|.
name|available
argument_list|()
operator|!=
name|skipLastBytes
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Read too much bytes."
argument_list|)
throw|;
block|}
return|return
name|buffer
return|;
block|}
annotation|@
name|Override
specifier|public
name|ByteBuffer
name|getFirstKeyInBlock
parameter_list|(
name|ByteBuffer
name|block
parameter_list|)
block|{
name|block
operator|.
name|mark
argument_list|()
expr_stmt|;
name|block
operator|.
name|position
argument_list|(
name|Bytes
operator|.
name|SIZEOF_INT
operator|+
name|Bytes
operator|.
name|SIZEOF_BYTE
argument_list|)
expr_stmt|;
name|int
name|keyLength
init|=
name|ByteBufferUtils
operator|.
name|readCompressedInt
argument_list|(
name|block
argument_list|)
decl_stmt|;
name|ByteBufferUtils
operator|.
name|readCompressedInt
argument_list|(
name|block
argument_list|)
expr_stmt|;
comment|// valueLength
name|ByteBufferUtils
operator|.
name|readCompressedInt
argument_list|(
name|block
argument_list|)
expr_stmt|;
comment|// commonLength
name|int
name|pos
init|=
name|block
operator|.
name|position
argument_list|()
decl_stmt|;
name|block
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|block
operator|.
name|array
argument_list|()
argument_list|,
name|pos
argument_list|,
name|keyLength
argument_list|)
operator|.
name|slice
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|FastDiffDeltaEncoder
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|EncodedSeeker
name|createSeeker
parameter_list|(
name|RawComparator
argument_list|<
name|byte
index|[]
argument_list|>
name|comparator
parameter_list|,
specifier|final
name|boolean
name|includesMemstoreTS
parameter_list|)
block|{
return|return
operator|new
name|BufferedEncodedSeeker
argument_list|(
name|comparator
argument_list|)
block|{
specifier|private
name|byte
index|[]
name|prevTimestampAndType
init|=
operator|new
name|byte
index|[
name|Bytes
operator|.
name|SIZEOF_LONG
operator|+
name|Bytes
operator|.
name|SIZEOF_BYTE
index|]
decl_stmt|;
specifier|private
name|int
name|rowLengthWithSize
decl_stmt|;
specifier|private
name|int
name|columnFamilyLengthWithSize
decl_stmt|;
specifier|private
name|void
name|decode
parameter_list|(
name|boolean
name|isFirst
parameter_list|)
block|{
name|byte
name|flag
init|=
name|currentBuffer
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|flag
operator|&
name|FLAG_SAME_KEY_LENGTH
operator|)
operator|==
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|isFirst
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|current
operator|.
name|keyBuffer
argument_list|,
name|current
operator|.
name|keyLength
operator|-
name|prevTimestampAndType
operator|.
name|length
argument_list|,
name|prevTimestampAndType
argument_list|,
literal|0
argument_list|,
name|prevTimestampAndType
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|current
operator|.
name|keyLength
operator|=
name|ByteBufferUtils
operator|.
name|readCompressedInt
argument_list|(
name|currentBuffer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|flag
operator|&
name|FLAG_SAME_VALUE_LENGTH
operator|)
operator|==
literal|0
condition|)
block|{
name|current
operator|.
name|valueLength
operator|=
name|ByteBufferUtils
operator|.
name|readCompressedInt
argument_list|(
name|currentBuffer
argument_list|)
expr_stmt|;
block|}
name|current
operator|.
name|lastCommonPrefix
operator|=
name|ByteBufferUtils
operator|.
name|readCompressedInt
argument_list|(
name|currentBuffer
argument_list|)
expr_stmt|;
name|current
operator|.
name|ensureSpaceForKey
argument_list|()
expr_stmt|;
if|if
condition|(
name|isFirst
condition|)
block|{
comment|// copy everything
name|currentBuffer
operator|.
name|get
argument_list|(
name|current
operator|.
name|keyBuffer
argument_list|,
name|current
operator|.
name|lastCommonPrefix
argument_list|,
name|current
operator|.
name|keyLength
operator|-
name|prevTimestampAndType
operator|.
name|length
argument_list|)
expr_stmt|;
name|rowLengthWithSize
operator|=
name|Bytes
operator|.
name|toShort
argument_list|(
name|current
operator|.
name|keyBuffer
argument_list|,
literal|0
argument_list|)
operator|+
name|Bytes
operator|.
name|SIZEOF_SHORT
expr_stmt|;
name|columnFamilyLengthWithSize
operator|=
name|current
operator|.
name|keyBuffer
index|[
name|rowLengthWithSize
index|]
operator|+
name|Bytes
operator|.
name|SIZEOF_BYTE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|current
operator|.
name|lastCommonPrefix
operator|<
name|Bytes
operator|.
name|SIZEOF_SHORT
condition|)
block|{
comment|// length of row is different, copy everything except family
comment|// copy the row size
name|int
name|oldRowLengthWithSize
init|=
name|rowLengthWithSize
decl_stmt|;
name|currentBuffer
operator|.
name|get
argument_list|(
name|current
operator|.
name|keyBuffer
argument_list|,
name|current
operator|.
name|lastCommonPrefix
argument_list|,
name|Bytes
operator|.
name|SIZEOF_SHORT
operator|-
name|current
operator|.
name|lastCommonPrefix
argument_list|)
expr_stmt|;
name|rowLengthWithSize
operator|=
name|Bytes
operator|.
name|toShort
argument_list|(
name|current
operator|.
name|keyBuffer
argument_list|,
literal|0
argument_list|)
operator|+
name|Bytes
operator|.
name|SIZEOF_SHORT
expr_stmt|;
comment|// move the column family
name|System
operator|.
name|arraycopy
argument_list|(
name|current
operator|.
name|keyBuffer
argument_list|,
name|oldRowLengthWithSize
argument_list|,
name|current
operator|.
name|keyBuffer
argument_list|,
name|rowLengthWithSize
argument_list|,
name|columnFamilyLengthWithSize
argument_list|)
expr_stmt|;
comment|// copy the rest of row
name|currentBuffer
operator|.
name|get
argument_list|(
name|current
operator|.
name|keyBuffer
argument_list|,
name|Bytes
operator|.
name|SIZEOF_SHORT
argument_list|,
name|rowLengthWithSize
operator|-
name|Bytes
operator|.
name|SIZEOF_SHORT
argument_list|)
expr_stmt|;
comment|// copy the qualifier
name|currentBuffer
operator|.
name|get
argument_list|(
name|current
operator|.
name|keyBuffer
argument_list|,
name|rowLengthWithSize
operator|+
name|columnFamilyLengthWithSize
argument_list|,
name|current
operator|.
name|keyLength
operator|-
name|rowLengthWithSize
operator|-
name|columnFamilyLengthWithSize
operator|-
name|prevTimestampAndType
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|current
operator|.
name|lastCommonPrefix
operator|<
name|rowLengthWithSize
condition|)
block|{
comment|// we have to copy part of row and qualifier,
comment|// but column family is in right place
comment|// before column family (rest of row)
name|currentBuffer
operator|.
name|get
argument_list|(
name|current
operator|.
name|keyBuffer
argument_list|,
name|current
operator|.
name|lastCommonPrefix
argument_list|,
name|rowLengthWithSize
operator|-
name|current
operator|.
name|lastCommonPrefix
argument_list|)
expr_stmt|;
comment|// after column family (qualifier)
name|currentBuffer
operator|.
name|get
argument_list|(
name|current
operator|.
name|keyBuffer
argument_list|,
name|rowLengthWithSize
operator|+
name|columnFamilyLengthWithSize
argument_list|,
name|current
operator|.
name|keyLength
operator|-
name|rowLengthWithSize
operator|-
name|columnFamilyLengthWithSize
operator|-
name|prevTimestampAndType
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// copy just the ending
name|currentBuffer
operator|.
name|get
argument_list|(
name|current
operator|.
name|keyBuffer
argument_list|,
name|current
operator|.
name|lastCommonPrefix
argument_list|,
name|current
operator|.
name|keyLength
operator|-
name|prevTimestampAndType
operator|.
name|length
operator|-
name|current
operator|.
name|lastCommonPrefix
argument_list|)
expr_stmt|;
block|}
comment|// timestamp
name|int
name|pos
init|=
name|current
operator|.
name|keyLength
operator|-
name|prevTimestampAndType
operator|.
name|length
decl_stmt|;
name|int
name|commonTimestampPrefix
init|=
operator|(
name|flag
operator|&
name|MASK_TIMESTAMP_LENGTH
operator|)
operator|>>>
name|SHIFT_TIMESTAMP_LENGTH
decl_stmt|;
if|if
condition|(
operator|(
name|flag
operator|&
name|FLAG_SAME_KEY_LENGTH
operator|)
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|prevTimestampAndType
argument_list|,
literal|0
argument_list|,
name|current
operator|.
name|keyBuffer
argument_list|,
name|pos
argument_list|,
name|commonTimestampPrefix
argument_list|)
expr_stmt|;
block|}
name|pos
operator|+=
name|commonTimestampPrefix
expr_stmt|;
name|currentBuffer
operator|.
name|get
argument_list|(
name|current
operator|.
name|keyBuffer
argument_list|,
name|pos
argument_list|,
name|Bytes
operator|.
name|SIZEOF_LONG
operator|-
name|commonTimestampPrefix
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|Bytes
operator|.
name|SIZEOF_LONG
operator|-
name|commonTimestampPrefix
expr_stmt|;
comment|// type
if|if
condition|(
operator|(
name|flag
operator|&
name|FLAG_SAME_TYPE
operator|)
operator|==
literal|0
condition|)
block|{
name|currentBuffer
operator|.
name|get
argument_list|(
name|current
operator|.
name|keyBuffer
argument_list|,
name|pos
argument_list|,
name|Bytes
operator|.
name|SIZEOF_BYTE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|flag
operator|&
name|FLAG_SAME_KEY_LENGTH
operator|)
operator|==
literal|0
condition|)
block|{
name|current
operator|.
name|keyBuffer
index|[
name|pos
index|]
operator|=
name|prevTimestampAndType
index|[
name|Bytes
operator|.
name|SIZEOF_LONG
index|]
expr_stmt|;
block|}
comment|// handle value
if|if
condition|(
operator|(
name|flag
operator|&
name|FLAG_SAME_VALUE
operator|)
operator|==
literal|0
condition|)
block|{
name|current
operator|.
name|valueOffset
operator|=
name|currentBuffer
operator|.
name|position
argument_list|()
expr_stmt|;
name|ByteBufferUtils
operator|.
name|skip
argument_list|(
name|currentBuffer
argument_list|,
name|current
operator|.
name|valueLength
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includesMemstoreTS
condition|)
block|{
name|current
operator|.
name|memstoreTS
operator|=
name|ByteBufferUtils
operator|.
name|readVLong
argument_list|(
name|currentBuffer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|current
operator|.
name|memstoreTS
operator|=
literal|0
expr_stmt|;
block|}
name|current
operator|.
name|nextKvOffset
operator|=
name|currentBuffer
operator|.
name|position
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|decodeFirst
parameter_list|()
block|{
name|ByteBufferUtils
operator|.
name|skip
argument_list|(
name|currentBuffer
argument_list|,
name|Bytes
operator|.
name|SIZEOF_INT
argument_list|)
expr_stmt|;
name|decode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|decodeNext
parameter_list|()
block|{
name|decode
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

