begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2011 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|monitoring
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ThreadInfo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ThreadMXBean
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|ThreadMonitoring
block|{
specifier|private
specifier|static
specifier|final
name|ThreadMXBean
name|threadBean
init|=
name|ManagementFactory
operator|.
name|getThreadMXBean
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|STACK_DEPTH
init|=
literal|20
decl_stmt|;
specifier|public
specifier|static
name|ThreadInfo
name|getThreadInfo
parameter_list|(
name|Thread
name|t
parameter_list|)
block|{
name|long
name|tid
init|=
name|t
operator|.
name|getId
argument_list|()
decl_stmt|;
return|return
name|threadBean
operator|.
name|getThreadInfo
argument_list|(
name|tid
argument_list|,
name|STACK_DEPTH
argument_list|)
return|;
block|}
comment|/**    * Format the given ThreadInfo object as a String.    * @param indent a prefix for each line, used for nested indentation    */
specifier|public
specifier|static
name|String
name|formatThreadInfo
parameter_list|(
name|ThreadInfo
name|threadInfo
parameter_list|,
name|String
name|indent
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|appendThreadInfo
argument_list|(
name|sb
argument_list|,
name|threadInfo
argument_list|,
name|indent
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Print all of the thread's information and stack traces.    *     * @param stream the stream to    *     */
specifier|public
specifier|static
name|void
name|appendThreadInfo
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|ThreadInfo
name|info
parameter_list|,
name|String
name|indent
parameter_list|)
block|{
name|boolean
name|contention
init|=
name|threadBean
operator|.
name|isThreadContentionMonitoringEnabled
argument_list|()
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|indent
argument_list|)
operator|.
name|append
argument_list|(
literal|"Inactive (perhaps exited while monitoring was done)\n"
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|taskName
init|=
name|getTaskName
argument_list|(
name|info
operator|.
name|getThreadId
argument_list|()
argument_list|,
name|info
operator|.
name|getThreadName
argument_list|()
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|indent
argument_list|)
operator|.
name|append
argument_list|(
literal|"Thread "
argument_list|)
operator|.
name|append
argument_list|(
name|taskName
argument_list|)
operator|.
name|append
argument_list|(
literal|":\n"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|State
name|state
init|=
name|info
operator|.
name|getThreadState
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|indent
argument_list|)
operator|.
name|append
argument_list|(
literal|"  State: "
argument_list|)
operator|.
name|append
argument_list|(
name|state
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|indent
argument_list|)
operator|.
name|append
argument_list|(
literal|"  Blocked count: "
argument_list|)
operator|.
name|append
argument_list|(
name|info
operator|.
name|getBlockedCount
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|indent
argument_list|)
operator|.
name|append
argument_list|(
literal|"  Waited count: "
argument_list|)
operator|.
name|append
argument_list|(
name|info
operator|.
name|getWaitedCount
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|contention
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|indent
argument_list|)
operator|.
name|append
argument_list|(
literal|"  Blocked time: "
operator|+
name|info
operator|.
name|getBlockedTime
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|indent
argument_list|)
operator|.
name|append
argument_list|(
literal|"  Waited time: "
operator|+
name|info
operator|.
name|getWaitedTime
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|state
operator|==
name|Thread
operator|.
name|State
operator|.
name|WAITING
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|indent
argument_list|)
operator|.
name|append
argument_list|(
literal|"  Waiting on "
argument_list|)
operator|.
name|append
argument_list|(
name|info
operator|.
name|getLockName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|state
operator|==
name|Thread
operator|.
name|State
operator|.
name|BLOCKED
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|indent
argument_list|)
operator|.
name|append
argument_list|(
literal|"  Blocked on "
argument_list|)
operator|.
name|append
argument_list|(
name|info
operator|.
name|getLockName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|indent
argument_list|)
operator|.
name|append
argument_list|(
literal|"  Blocked by "
argument_list|)
operator|.
name|append
argument_list|(
name|getTaskName
argument_list|(
name|info
operator|.
name|getLockOwnerId
argument_list|()
argument_list|,
name|info
operator|.
name|getLockOwnerName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|indent
argument_list|)
operator|.
name|append
argument_list|(
literal|"  Stack:"
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|StackTraceElement
name|frame
range|:
name|info
operator|.
name|getStackTrace
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|indent
argument_list|)
operator|.
name|append
argument_list|(
literal|"    "
argument_list|)
operator|.
name|append
argument_list|(
name|frame
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|String
name|getTaskName
parameter_list|(
name|long
name|id
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
return|return
name|Long
operator|.
name|toString
argument_list|(
name|id
argument_list|)
return|;
block|}
return|return
name|id
operator|+
literal|" ("
operator|+
name|name
operator|+
literal|")"
return|;
block|}
block|}
end_class

end_unit

