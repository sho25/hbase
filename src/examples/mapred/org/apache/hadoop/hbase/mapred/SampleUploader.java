begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|BatchUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|HbaseMapWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ImmutableBytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|MapReduceBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|OutputCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_comment
comment|/*  * Sample uploader.  *   * This is EXAMPLE code.  You will need to change it to work for your context.  *   * Uses TableReduce to put the data into hbase. Change the InputFormat to suit  * your data. Use the map to massage the input so it fits hbase.  Currently its  * just a pass-through map.  In the reduce, you need to output a row and a  * map of columns to cells.  Change map and reduce to suit your input.  *   *<p>The below is wired up to handle an input whose format is a text file  * which has a line format as follow:  *<pre>  * row columnname columndata  *</pre>  *   *<p>The table and columnfamily we're to insert into must preexist.  *   *<p>Do the following to start the MR job:  *<pre>  * ./bin/hadoop org.apache.hadoop.hbase.mapred.SampleUploader /tmp/input.txt TABLE_NAME  *</pre>  *   *<p>This code was written against hbase 0.1 branch.  */
end_comment

begin_class
specifier|public
class|class
name|SampleUploader
extends|extends
name|MapReduceBase
implements|implements
name|Mapper
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|,
name|ImmutableBytesWritable
argument_list|,
name|HbaseMapWritable
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
implements|,
name|Tool
block|{
specifier|private
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"SampleUploader"
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|public
name|JobConf
name|createSubmittableJob
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|JobConf
name|c
init|=
operator|new
name|JobConf
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|SampleUploader
operator|.
name|class
argument_list|)
decl_stmt|;
name|c
operator|.
name|setJobName
argument_list|(
name|NAME
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|c
argument_list|,
operator|new
name|Path
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|setMapperClass
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setMapOutputKeyClass
argument_list|(
name|ImmutableBytesWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|c
operator|.
name|setMapOutputValueClass
argument_list|(
name|HbaseMapWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|c
operator|.
name|setReducerClass
argument_list|(
name|TableUploader
operator|.
name|class
argument_list|)
expr_stmt|;
name|TableMapReduceUtil
operator|.
name|initTableReduceJob
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|,
name|TableUploader
operator|.
name|class
argument_list|,
name|c
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
specifier|public
name|void
name|map
parameter_list|(
name|LongWritable
name|k
parameter_list|,
name|Text
name|v
parameter_list|,
name|OutputCollector
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|HbaseMapWritable
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|output
parameter_list|,
name|Reporter
name|r
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Lines are space-delimited; first item is row, next the columnname and
comment|// then the third the cell value.
name|String
name|tmp
init|=
name|v
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|tmp
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|String
index|[]
name|splits
init|=
name|v
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
name|HbaseMapWritable
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|mw
init|=
operator|new
name|HbaseMapWritable
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|mw
operator|.
name|put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|splits
index|[
literal|1
index|]
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|splits
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|splits
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|r
operator|.
name|setStatus
argument_list|(
literal|"Map emitting "
operator|+
name|splits
index|[
literal|0
index|]
operator|+
literal|" for record "
operator|+
name|k
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|output
operator|.
name|collect
argument_list|(
operator|new
name|ImmutableBytesWritable
argument_list|(
name|row
argument_list|)
argument_list|,
name|mw
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|TableUploader
extends|extends
name|MapReduceBase
implements|implements
name|TableReduce
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|HbaseMapWritable
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
block|{
specifier|public
name|void
name|reduce
parameter_list|(
name|ImmutableBytesWritable
name|k
parameter_list|,
name|Iterator
argument_list|<
name|HbaseMapWritable
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|v
parameter_list|,
name|OutputCollector
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|BatchUpdate
argument_list|>
name|output
parameter_list|,
name|Reporter
name|r
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
name|v
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|r
operator|.
name|setStatus
argument_list|(
literal|"Reducer committing "
operator|+
name|k
argument_list|)
expr_stmt|;
name|BatchUpdate
name|bu
init|=
operator|new
name|BatchUpdate
argument_list|(
name|k
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|v
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|HbaseMapWritable
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|hmw
init|=
name|v
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|e
range|:
name|hmw
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|bu
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|output
operator|.
name|collect
argument_list|(
name|k
argument_list|,
name|bu
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|static
name|int
name|printUsage
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|NAME
operator|+
literal|"<input><table_name>"
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
specifier|public
name|int
name|run
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Make sure there are exactly 2 parameters left.
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ERROR: Wrong number of parameters: "
operator|+
name|args
operator|.
name|length
operator|+
literal|" instead of 2."
argument_list|)
expr_stmt|;
return|return
name|printUsage
argument_list|()
return|;
block|}
name|JobClient
operator|.
name|runJob
argument_list|(
name|createSubmittableJob
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|this
operator|.
name|conf
return|;
block|}
specifier|public
name|void
name|setConf
parameter_list|(
specifier|final
name|Configuration
name|c
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|c
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|errCode
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
operator|new
name|SampleUploader
argument_list|()
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|errCode
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

