begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|replication
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLogKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_class
specifier|public
class|class
name|TestReplicationSink
block|{
specifier|protected
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestReplicationSink
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|BATCH_SIZE
init|=
literal|10
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|SLEEP_TIME
init|=
literal|500
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|ReplicationSink
name|SINK
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|TABLE_NAME1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"table1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|TABLE_NAME2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"table2"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|FAM_NAME1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"info1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|FAM_NAME2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"info2"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|AtomicBoolean
name|STOPPER
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|HTable
name|table1
decl_stmt|;
specifier|private
specifier|static
name|HTable
name|table2
decl_stmt|;
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|Path
name|repLogPath
init|=
operator|new
name|Path
argument_list|(
name|TEST_UTIL
operator|.
name|getTestDir
argument_list|()
argument_list|,
name|ReplicationSink
operator|.
name|getRepLogPath
argument_list|(
literal|"test_rep_sink"
argument_list|)
argument_list|)
decl_stmt|;
name|SINK
operator|=
operator|new
name|ReplicationSink
argument_list|(
name|conf
argument_list|,
name|STOPPER
argument_list|,
name|TEST_UTIL
operator|.
name|getTestDir
argument_list|()
argument_list|,
name|TEST_UTIL
operator|.
name|getDFSCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|()
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|SINK
operator|.
name|start
argument_list|()
expr_stmt|;
name|table1
operator|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLE_NAME1
argument_list|,
name|FAM_NAME1
argument_list|)
expr_stmt|;
name|table2
operator|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLE_NAME2
argument_list|,
name|FAM_NAME2
argument_list|)
expr_stmt|;
block|}
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|STOPPER
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|table1
operator|=
name|TEST_UTIL
operator|.
name|truncateTable
argument_list|(
name|TABLE_NAME1
argument_list|)
expr_stmt|;
name|table2
operator|=
name|TEST_UTIL
operator|.
name|truncateTable
argument_list|(
name|TABLE_NAME2
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
block|}
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{}
annotation|@
name|Test
specifier|public
name|void
name|testBatchSink
parameter_list|()
throws|throws
name|Exception
block|{
name|HLog
operator|.
name|Entry
index|[]
name|entries
init|=
operator|new
name|HLog
operator|.
name|Entry
index|[
name|BATCH_SIZE
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|entries
index|[
name|i
index|]
operator|=
name|createEntry
argument_list|(
name|TABLE_NAME1
argument_list|,
name|i
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|)
expr_stmt|;
block|}
name|SINK
operator|.
name|replicateEntries
argument_list|(
name|entries
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|ResultScanner
name|scanRes
init|=
name|table1
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|scanRes
operator|.
name|next
argument_list|(
name|BATCH_SIZE
argument_list|)
operator|.
name|length
argument_list|,
name|BATCH_SIZE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMixedPutDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|HLog
operator|.
name|Entry
index|[]
name|entries
init|=
operator|new
name|HLog
operator|.
name|Entry
index|[
name|BATCH_SIZE
operator|/
literal|2
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|entries
index|[
name|i
operator|/
literal|2
index|]
operator|=
name|createEntry
argument_list|(
name|TABLE_NAME1
argument_list|,
name|i
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|)
expr_stmt|;
block|}
name|SINK
operator|.
name|replicateEntries
argument_list|(
name|entries
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
name|entries
operator|=
operator|new
name|HLog
operator|.
name|Entry
index|[
name|BATCH_SIZE
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|entries
index|[
name|i
index|]
operator|=
name|createEntry
argument_list|(
name|TABLE_NAME1
argument_list|,
name|i
argument_list|,
name|i
operator|%
literal|2
operator|!=
literal|0
condition|?
name|KeyValue
operator|.
name|Type
operator|.
name|Put
else|:
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteColumn
argument_list|)
expr_stmt|;
block|}
name|SINK
operator|.
name|replicateEntries
argument_list|(
name|entries
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|ResultScanner
name|scanRes
init|=
name|table1
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|BATCH_SIZE
operator|/
literal|2
argument_list|,
name|scanRes
operator|.
name|next
argument_list|(
name|BATCH_SIZE
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMixedPutTables
parameter_list|()
throws|throws
name|Exception
block|{
name|HLog
operator|.
name|Entry
index|[]
name|entries
init|=
operator|new
name|HLog
operator|.
name|Entry
index|[
name|BATCH_SIZE
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|entries
index|[
name|i
index|]
operator|=
name|createEntry
argument_list|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|?
name|TABLE_NAME2
else|:
name|TABLE_NAME1
argument_list|,
name|i
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|)
expr_stmt|;
block|}
name|SINK
operator|.
name|replicateEntries
argument_list|(
name|entries
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|ResultScanner
name|scanRes
init|=
name|table2
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
for|for
control|(
name|Result
name|res
range|:
name|scanRes
control|)
block|{
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|toInt
argument_list|(
name|res
operator|.
name|getRow
argument_list|()
argument_list|)
operator|%
literal|2
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMixedDeletes
parameter_list|()
throws|throws
name|Exception
block|{
name|HLog
operator|.
name|Entry
index|[]
name|entries
init|=
operator|new
name|HLog
operator|.
name|Entry
index|[
literal|3
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|entries
index|[
name|i
index|]
operator|=
name|createEntry
argument_list|(
name|TABLE_NAME1
argument_list|,
name|i
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|)
expr_stmt|;
block|}
name|SINK
operator|.
name|replicateEntries
argument_list|(
name|entries
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
name|entries
operator|=
operator|new
name|HLog
operator|.
name|Entry
index|[
literal|3
index|]
expr_stmt|;
name|entries
index|[
literal|0
index|]
operator|=
name|createEntry
argument_list|(
name|TABLE_NAME1
argument_list|,
literal|0
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteColumn
argument_list|)
expr_stmt|;
name|entries
index|[
literal|1
index|]
operator|=
name|createEntry
argument_list|(
name|TABLE_NAME1
argument_list|,
literal|1
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteFamily
argument_list|)
expr_stmt|;
name|entries
index|[
literal|2
index|]
operator|=
name|createEntry
argument_list|(
name|TABLE_NAME1
argument_list|,
literal|2
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteColumn
argument_list|)
expr_stmt|;
name|SINK
operator|.
name|replicateEntries
argument_list|(
name|entries
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|ResultScanner
name|scanRes
init|=
name|table1
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scanRes
operator|.
name|next
argument_list|(
literal|3
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRolling
parameter_list|()
throws|throws
name|Exception
block|{
name|testMixedDeletes
argument_list|()
expr_stmt|;
name|SINK
operator|.
name|rollLog
argument_list|()
expr_stmt|;
name|testMixedDeletes
argument_list|()
expr_stmt|;
name|SINK
operator|.
name|rollLog
argument_list|()
expr_stmt|;
name|testMixedPutTables
argument_list|()
expr_stmt|;
block|}
specifier|private
name|HLog
operator|.
name|Entry
name|createEntry
parameter_list|(
name|byte
index|[]
name|table
parameter_list|,
name|int
name|row
parameter_list|,
name|KeyValue
operator|.
name|Type
name|type
parameter_list|)
block|{
name|byte
index|[]
name|fam
init|=
name|Bytes
operator|.
name|equals
argument_list|(
name|table
argument_list|,
name|TABLE_NAME1
argument_list|)
condition|?
name|FAM_NAME1
else|:
name|FAM_NAME2
decl_stmt|;
name|byte
index|[]
name|rowBytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row
argument_list|)
decl_stmt|;
specifier|final
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|KeyValue
name|kv
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|getCode
argument_list|()
operator|==
name|KeyValue
operator|.
name|Type
operator|.
name|Put
operator|.
name|getCode
argument_list|()
condition|)
block|{
name|kv
operator|=
operator|new
name|KeyValue
argument_list|(
name|rowBytes
argument_list|,
name|fam
argument_list|,
name|fam
argument_list|,
name|now
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|getCode
argument_list|()
operator|==
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteColumn
operator|.
name|getCode
argument_list|()
condition|)
block|{
name|kv
operator|=
operator|new
name|KeyValue
argument_list|(
name|rowBytes
argument_list|,
name|fam
argument_list|,
name|fam
argument_list|,
name|now
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteColumn
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|getCode
argument_list|()
operator|==
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteFamily
operator|.
name|getCode
argument_list|()
condition|)
block|{
name|kv
operator|=
operator|new
name|KeyValue
argument_list|(
name|rowBytes
argument_list|,
name|fam
argument_list|,
literal|null
argument_list|,
name|now
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteFamily
argument_list|)
expr_stmt|;
block|}
name|HLogKey
name|key
init|=
operator|new
name|HLogKey
argument_list|(
name|table
argument_list|,
name|table
argument_list|,
name|now
argument_list|,
name|now
argument_list|)
decl_stmt|;
return|return
operator|new
name|HLog
operator|.
name|Entry
argument_list|(
name|key
argument_list|,
name|kv
argument_list|)
return|;
block|}
block|}
end_class

end_unit

