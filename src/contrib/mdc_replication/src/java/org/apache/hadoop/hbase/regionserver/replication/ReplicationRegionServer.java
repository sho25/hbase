begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|HBaseRPCProtocolVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|ReplicationRPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|ReplicationRegionInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|replication
operator|.
name|ReplicationHLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationZookeeperHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|MapWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_class
specifier|public
class|class
name|ReplicationRegionServer
extends|extends
name|HRegionServer
implements|implements
name|ReplicationRegionInterface
block|{
static|static
block|{
name|ReplicationRPC
operator|.
name|initialize
argument_list|()
expr_stmt|;
block|}
specifier|protected
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ReplicationRegionServer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ReplicationSource
name|replicationSource
decl_stmt|;
specifier|private
name|ReplicationSink
name|replicationSink
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isMaster
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|isReplicating
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ReplicationZookeeperHelper
name|zkHelper
decl_stmt|;
comment|/**    * Starts a HRegionServer at the default location    *    * @param conf    * @throws java.io.IOException    */
specifier|public
name|ReplicationRegionServer
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|zkHelper
operator|=
operator|new
name|ReplicationZookeeperHelper
argument_list|(
name|this
operator|.
name|getZooKeeperWrapper
argument_list|()
argument_list|,
name|this
operator|.
name|conf
argument_list|,
name|this
operator|.
name|isReplicating
argument_list|)
expr_stmt|;
name|this
operator|.
name|isMaster
operator|=
name|zkHelper
operator|.
name|isMaster
argument_list|()
expr_stmt|;
name|this
operator|.
name|replicationSink
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|replicationSource
operator|=
name|this
operator|.
name|isMaster
condition|?
operator|new
name|ReplicationSource
argument_list|(
name|this
argument_list|,
name|super
operator|.
name|stopRequested
argument_list|,
name|this
operator|.
name|isReplicating
argument_list|)
else|:
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|HLog
name|instantiateHLog
parameter_list|(
name|Path
name|logdir
parameter_list|)
throws|throws
name|IOException
block|{
name|HLog
name|newlog
init|=
operator|new
name|ReplicationHLog
argument_list|(
name|super
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|logdir
argument_list|,
name|conf
argument_list|,
name|super
operator|.
name|getLogRoller
argument_list|()
argument_list|,
name|this
operator|.
name|replicationSource
argument_list|)
decl_stmt|;
return|return
name|newlog
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|init
parameter_list|(
specifier|final
name|MapWritable
name|c
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|init
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|String
name|n
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|repLogPathStr
init|=
name|ReplicationSink
operator|.
name|getRepLogPath
argument_list|(
name|getHServerInfo
argument_list|()
operator|.
name|getServerName
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|repLogPath
init|=
operator|new
name|Path
argument_list|(
name|getRootDir
argument_list|()
argument_list|,
name|repLogPathStr
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|UncaughtExceptionHandler
name|handler
init|=
operator|new
name|Thread
operator|.
name|UncaughtExceptionHandler
argument_list|()
block|{
specifier|public
name|void
name|uncaughtException
parameter_list|(
specifier|final
name|Thread
name|t
parameter_list|,
specifier|final
name|Throwable
name|e
parameter_list|)
block|{
name|abort
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Set stop flag in "
operator|+
name|t
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|isMaster
condition|)
block|{
name|Threads
operator|.
name|setDaemonThreadRunning
argument_list|(
name|this
operator|.
name|replicationSource
argument_list|,
name|n
operator|+
literal|".replicationSource"
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|replicationSink
operator|=
operator|new
name|ReplicationSink
argument_list|(
name|conf
argument_list|,
name|super
operator|.
name|stopRequested
argument_list|,
name|repLogPath
argument_list|,
name|getFileSystem
argument_list|()
argument_list|,
name|getThreadWakeFrequency
argument_list|()
argument_list|)
expr_stmt|;
name|Threads
operator|.
name|setDaemonThreadRunning
argument_list|(
name|this
operator|.
name|replicationSink
argument_list|,
name|n
operator|+
literal|".replicationSink"
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|HRegion
name|instantiateRegion
parameter_list|(
specifier|final
name|HRegionInfo
name|regionInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|HRegion
name|r
init|=
operator|new
name|ReplicationRegion
argument_list|(
name|HTableDescriptor
operator|.
name|getTableDir
argument_list|(
name|super
operator|.
name|getRootDir
argument_list|()
argument_list|,
name|regionInfo
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|super
operator|.
name|hlog
argument_list|,
name|super
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|super
operator|.
name|conf
argument_list|,
name|regionInfo
argument_list|,
name|super
operator|.
name|getFlushRequester
argument_list|()
argument_list|,
name|this
operator|.
name|replicationSource
argument_list|)
decl_stmt|;
name|r
operator|.
name|initialize
argument_list|(
literal|null
argument_list|,
operator|new
name|Progressable
argument_list|()
block|{
specifier|public
name|void
name|progress
parameter_list|()
block|{
name|addProcessingMessage
argument_list|(
name|regionInfo
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|replicateLogEntries
parameter_list|(
name|HLog
operator|.
name|Entry
index|[]
name|entries
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|replicationSink
operator|.
name|replicateEntries
argument_list|(
name|entries
argument_list|)
expr_stmt|;
block|}
comment|/**    *    * @param protocol    * @param clientVersion    * @return    * @throws IOException    */
specifier|public
name|long
name|getProtocolVersion
parameter_list|(
specifier|final
name|String
name|protocol
parameter_list|,
specifier|final
name|long
name|clientVersion
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|protocol
operator|.
name|equals
argument_list|(
name|ReplicationRegionInterface
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|HBaseRPCProtocolVersion
operator|.
name|versionID
return|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown protocol to name node: "
operator|+
name|protocol
argument_list|)
throw|;
block|}
comment|/**    *    * @return    */
specifier|public
name|ReplicationZookeeperHelper
name|getZkHelper
parameter_list|()
block|{
return|return
name|zkHelper
return|;
block|}
specifier|protected
name|void
name|join
parameter_list|()
block|{
name|super
operator|.
name|join
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isMaster
condition|)
block|{
name|Threads
operator|.
name|shutdown
argument_list|(
name|this
operator|.
name|replicationSource
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Threads
operator|.
name|shutdown
argument_list|(
name|this
operator|.
name|replicationSink
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

