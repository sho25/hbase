begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Chore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|ReplicationRegionInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationConnectionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationZookeeperHelper
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_comment
comment|/**  * Class that handles the source of a replication stream  * Currently does not handle more than 1 slave  * For each slave cluster it selects a random number of peers  * using a replication ratio. For example, if replication ration = 0.1  * and slave cluster has 100 region servers, 10 will be selected.  */
end_comment

begin_class
specifier|public
class|class
name|ReplicationSource
extends|extends
name|Chore
implements|implements
name|HConstants
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ReplicationSource
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|LinkedBlockingQueue
argument_list|<
name|HLog
operator|.
name|Entry
argument_list|>
name|queue
init|=
operator|new
name|LinkedBlockingQueue
argument_list|<
name|HLog
operator|.
name|Entry
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|HLog
operator|.
name|Entry
argument_list|>
name|tempArray
init|=
operator|new
name|ArrayList
argument_list|<
name|HLog
operator|.
name|Entry
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|HLog
operator|.
name|Entry
index|[]
name|dummyArray
init|=
operator|new
name|HLog
operator|.
name|Entry
index|[
literal|0
index|]
decl_stmt|;
specifier|private
specifier|final
name|ReplicationConnectionManager
name|conn
decl_stmt|;
specifier|private
specifier|final
name|ReplicationZookeeperHelper
name|zkHelper
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|final
name|float
name|ratio
decl_stmt|;
specifier|private
specifier|final
name|Random
name|random
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|isReplicating
decl_stmt|;
specifier|private
name|List
argument_list|<
name|HServerAddress
argument_list|>
name|currentPeers
decl_stmt|;
comment|/**    * Constructor used by region servers    * @param server the region server specialized in replication    * @param stopper the atomic boolean to use to stop the cluster    * @param isReplicating the atomic boolean that starts/stops replication    * @throws IOException    */
specifier|public
name|ReplicationSource
parameter_list|(
specifier|final
name|ReplicationRegionServer
name|server
parameter_list|,
specifier|final
name|AtomicBoolean
name|stopper
parameter_list|,
specifier|final
name|AtomicBoolean
name|isReplicating
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|server
operator|.
name|getThreadWakeFrequency
argument_list|()
argument_list|,
name|stopper
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|server
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|this
operator|.
name|conn
operator|=
operator|new
name|ReplicationConnectionManager
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|zkHelper
operator|=
name|server
operator|.
name|getZkHelper
argument_list|()
expr_stmt|;
name|this
operator|.
name|ratio
operator|=
name|this
operator|.
name|conf
operator|.
name|getFloat
argument_list|(
literal|"replication.ratio"
argument_list|,
literal|0.1f
argument_list|)
expr_stmt|;
name|currentPeers
operator|=
operator|new
name|ArrayList
argument_list|<
name|HServerAddress
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|random
operator|=
operator|new
name|Random
argument_list|()
expr_stmt|;
name|this
operator|.
name|isReplicating
operator|=
name|isReplicating
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|initialChore
parameter_list|()
block|{
name|this
operator|.
name|chooseSinksForPeer
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|currentPeers
operator|.
name|size
argument_list|()
operator|>
literal|0
return|;
block|}
comment|/**    * Select a number of peers at random using the ratio. Mininum 1.    * @param index    */
specifier|private
name|void
name|chooseSinksForPeer
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|this
operator|.
name|currentPeers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|HServerAddress
argument_list|>
name|addresses
init|=
name|this
operator|.
name|zkHelper
operator|.
name|getPeersAddresses
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|HServerAddress
argument_list|>
name|mapOfAdr
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|HServerAddress
argument_list|>
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Considering "
operator|+
name|addresses
operator|.
name|size
argument_list|()
operator|+
literal|" rs, with ratio "
operator|+
name|ratio
argument_list|)
expr_stmt|;
name|int
name|nbPeers
init|=
call|(
name|int
call|)
argument_list|(
name|Math
operator|.
name|ceil
argument_list|(
name|addresses
operator|.
name|size
argument_list|()
operator|*
name|ratio
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Getting "
operator|+
name|nbPeers
operator|+
literal|" rs from peer cluster # "
operator|+
name|index
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nbPeers
condition|;
name|i
operator|++
control|)
block|{
name|HServerAddress
name|adr
init|=
name|addresses
operator|.
name|get
argument_list|(
name|this
operator|.
name|random
operator|.
name|nextInt
argument_list|(
name|addresses
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
name|mapOfAdr
operator|.
name|containsKey
argument_list|(
name|adr
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|adr
operator|=
name|addresses
operator|.
name|get
argument_list|(
name|this
operator|.
name|random
operator|.
name|nextInt
argument_list|(
name|addresses
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Choosing peer "
operator|+
name|adr
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|mapOfAdr
operator|.
name|put
argument_list|(
name|adr
operator|.
name|toString
argument_list|()
argument_list|,
name|adr
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|currentPeers
operator|.
name|addAll
argument_list|(
name|mapOfAdr
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Put a log entry in a replication queue if replication is enabled    * @param logEntry    */
specifier|public
name|void
name|enqueueLog
parameter_list|(
name|HLog
operator|.
name|Entry
name|logEntry
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|isReplicating
operator|.
name|get
argument_list|()
condition|)
block|{
name|this
operator|.
name|queue
operator|.
name|add
argument_list|(
name|logEntry
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|chore
parameter_list|()
block|{
while|while
condition|(
operator|!
name|super
operator|.
name|stop
operator|.
name|get
argument_list|()
condition|)
block|{
comment|// Drain the edits accumulated in the queue, select a node at random
comment|// and send the edits. If it fails, get a new set of nodes and chose
comment|// a new one to replicate to.
try|try
block|{
name|this
operator|.
name|queue
operator|.
name|drainTo
argument_list|(
name|this
operator|.
name|tempArray
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tempArray
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|HServerAddress
name|adr
init|=
name|currentPeers
operator|.
name|get
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|this
operator|.
name|currentPeers
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ReplicationRegionInterface
name|rrs
init|=
name|this
operator|.
name|conn
operator|.
name|getHRegionConnection
argument_list|(
name|adr
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Replicating "
operator|+
name|this
operator|.
name|tempArray
operator|.
name|size
argument_list|()
operator|+
literal|" to "
operator|+
name|adr
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|rrs
operator|.
name|replicateLogEntries
argument_list|(
name|this
operator|.
name|tempArray
operator|.
name|toArray
argument_list|(
name|dummyArray
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|tempArray
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
return|return;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to replicate, retrying with a new node"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// continue
block|}
comment|// Should wait in a backoff fashion?
comment|// make sure we don't retry with the same node
name|chooseSinksForPeer
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

