begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|WatchedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_comment
comment|/**  * This class servers as a helper for all things related to zookeeper  * in the replication contrib.  */
end_comment

begin_class
specifier|public
class|class
name|ReplicationZookeeperHelper
implements|implements
name|HConstants
implements|,
name|Watcher
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ReplicationZookeeperHelper
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ZooKeeperWrapper
name|zookeeperWrapper
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|ZooKeeperWrapper
argument_list|>
name|peerClusters
decl_stmt|;
specifier|private
specifier|final
name|String
name|replicationZNode
decl_stmt|;
specifier|private
specifier|final
name|String
name|peersZNode
decl_stmt|;
specifier|private
specifier|final
name|String
name|replicationStateNodeName
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isMaster
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|isReplicating
decl_stmt|;
comment|/**    * Constructor used by region servers    * @param zookeeperWrapper zkw to wrap    * @param conf conf to use    * @param isReplicating atomic boolean to start/stop replication    * @throws IOException    */
specifier|public
name|ReplicationZookeeperHelper
parameter_list|(
name|ZooKeeperWrapper
name|zookeeperWrapper
parameter_list|,
name|Configuration
name|conf
parameter_list|,
specifier|final
name|AtomicBoolean
name|isReplicating
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|zookeeperWrapper
operator|=
name|zookeeperWrapper
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|String
name|replicationZNodeName
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"zookeeper.znode.replication"
argument_list|,
literal|"replication"
argument_list|)
decl_stmt|;
name|String
name|peersZNodeName
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"zookeeper.znode.peers"
argument_list|,
literal|"peers"
argument_list|)
decl_stmt|;
name|String
name|repMasterZNodeName
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"zookeeper.znode.master"
argument_list|,
literal|"master"
argument_list|)
decl_stmt|;
name|this
operator|.
name|replicationStateNodeName
operator|=
name|conf
operator|.
name|get
argument_list|(
literal|"zookeeper.znode.state"
argument_list|,
literal|"state"
argument_list|)
expr_stmt|;
name|this
operator|.
name|peerClusters
operator|=
operator|new
name|ArrayList
argument_list|<
name|ZooKeeperWrapper
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|replicationZNode
operator|=
name|zookeeperWrapper
operator|.
name|getZNode
argument_list|(
name|zookeeperWrapper
operator|.
name|getParentZNode
argument_list|()
argument_list|,
name|replicationZNodeName
argument_list|)
expr_stmt|;
name|this
operator|.
name|peersZNode
operator|=
name|zookeeperWrapper
operator|.
name|getZNode
argument_list|(
name|replicationZNode
argument_list|,
name|peersZNodeName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|znodes
init|=
name|this
operator|.
name|zookeeperWrapper
operator|.
name|listZnodes
argument_list|(
name|this
operator|.
name|peersZNode
argument_list|,
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|znodes
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|znode
range|:
name|znodes
control|)
block|{
name|connectToPeer
argument_list|(
name|znode
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|address
init|=
name|this
operator|.
name|zookeeperWrapper
operator|.
name|getData
argument_list|(
name|this
operator|.
name|replicationZNode
argument_list|,
name|repMasterZNodeName
argument_list|)
decl_stmt|;
name|String
name|thisCluster
init|=
name|this
operator|.
name|conf
operator|.
name|get
argument_list|(
name|ZOOKEEPER_QUORUM
argument_list|)
operator|+
literal|":"
operator|+
name|this
operator|.
name|conf
operator|.
name|get
argument_list|(
literal|"hbase.zookeeper.property.clientPort"
argument_list|)
operator|+
literal|":"
operator|+
name|this
operator|.
name|conf
operator|.
name|get
argument_list|(
name|ZOOKEEPER_ZNODE_PARENT
argument_list|)
decl_stmt|;
name|this
operator|.
name|isMaster
operator|=
name|thisCluster
operator|.
name|equals
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"This cluster ("
operator|+
name|thisCluster
operator|+
literal|") is a "
operator|+
operator|(
name|this
operator|.
name|isMaster
condition|?
literal|"master"
else|:
literal|"slave"
operator|)
operator|+
literal|" for replication"
operator|+
literal|", compared with ("
operator|+
name|address
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|this
operator|.
name|isReplicating
operator|=
name|isReplicating
expr_stmt|;
name|setIsReplicating
argument_list|()
expr_stmt|;
block|}
comment|/**    * Returns all region servers from given peer    * @param clusterIndex the cluster to interrogate    * @return addresses of all region servers    */
specifier|public
name|List
argument_list|<
name|HServerAddress
argument_list|>
name|getPeersAddresses
parameter_list|(
name|int
name|clusterIndex
parameter_list|)
block|{
return|return
name|this
operator|.
name|peerClusters
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|?
literal|null
else|:
name|this
operator|.
name|peerClusters
operator|.
name|get
argument_list|(
name|clusterIndex
argument_list|)
operator|.
name|scanRSDirectory
argument_list|()
return|;
block|}
comment|// This method connects this cluster to another one and registers it
specifier|private
name|void
name|connectToPeer
parameter_list|(
name|String
name|znode
parameter_list|)
throws|throws
name|IOException
block|{
name|String
index|[]
name|quorum
init|=
name|this
operator|.
name|zookeeperWrapper
operator|.
name|getData
argument_list|(
name|this
operator|.
name|peersZNode
argument_list|,
name|znode
argument_list|)
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|quorum
operator|.
name|length
operator|==
literal|3
condition|)
block|{
name|Configuration
name|otherConf
init|=
operator|new
name|Configuration
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
name|otherConf
operator|.
name|set
argument_list|(
name|ZOOKEEPER_QUORUM
argument_list|,
name|quorum
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|otherConf
operator|.
name|set
argument_list|(
literal|"hbase.zookeeper.property.clientPort"
argument_list|,
name|quorum
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|otherConf
operator|.
name|set
argument_list|(
name|ZOOKEEPER_ZNODE_PARENT
argument_list|,
name|quorum
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|this
operator|.
name|peerClusters
operator|.
name|add
argument_list|(
operator|new
name|ZooKeeperWrapper
argument_list|(
name|otherConf
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Added new peer cluster "
operator|+
name|StringUtils
operator|.
name|arrayToString
argument_list|(
name|quorum
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Wrong format of cluster address: "
operator|+
name|this
operator|.
name|zookeeperWrapper
operator|.
name|getData
argument_list|(
name|this
operator|.
name|peersZNode
argument_list|,
name|znode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Tells if this cluster replicates or not    * @return    */
specifier|public
name|boolean
name|isMaster
parameter_list|()
block|{
return|return
name|isMaster
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|WatchedEvent
name|watchedEvent
parameter_list|)
block|{
name|Event
operator|.
name|EventType
name|type
init|=
name|watchedEvent
operator|.
name|getType
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
operator|(
literal|"Got event "
operator|+
name|type
operator|+
literal|" with path "
operator|+
name|watchedEvent
operator|.
name|getPath
argument_list|()
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|Event
operator|.
name|EventType
operator|.
name|NodeDataChanged
argument_list|)
condition|)
block|{
name|setIsReplicating
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * This reads the state znode for replication and sets the atomic boolean    */
specifier|private
name|void
name|setIsReplicating
parameter_list|()
block|{
name|String
name|value
init|=
name|this
operator|.
name|zookeeperWrapper
operator|.
name|getDataAndWatch
argument_list|(
name|this
operator|.
name|replicationZNode
argument_list|,
name|this
operator|.
name|replicationStateNodeName
argument_list|,
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|isReplicating
operator|.
name|set
argument_list|(
name|value
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Replication is now "
operator|+
operator|(
name|isReplicating
operator|.
name|get
argument_list|()
condition|?
literal|"started"
else|:
literal|"stopped"
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

