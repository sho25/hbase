begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2009 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|transactional
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClusterTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|TransactionalRegionInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|transactional
operator|.
name|TransactionalRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * Test the transaction functionality. This requires to run an  * {@link TransactionalRegionServer}.  */
end_comment

begin_class
specifier|public
class|class
name|TestTransactions
extends|extends
name|HBaseClusterTestCase
block|{
specifier|private
specifier|static
specifier|final
name|String
name|TABLE_NAME
init|=
literal|"table1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|FAMILY_COLON
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family:"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|QUAL_A
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|COL_A
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family:a"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ROW1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ROW2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row2"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ROW3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row3"
argument_list|)
decl_stmt|;
specifier|private
name|HBaseAdmin
name|admin
decl_stmt|;
specifier|private
name|TransactionalTable
name|table
decl_stmt|;
specifier|private
name|TransactionManager
name|transactionManager
decl_stmt|;
comment|/** constructor */
specifier|public
name|TestTransactions
parameter_list|()
block|{
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|REGION_SERVER_CLASS
argument_list|,
name|TransactionalRegionInterface
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|REGION_SERVER_IMPL
argument_list|,
name|TransactionalRegionServer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TABLE_NAME
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILY_COLON
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|=
operator|new
name|HBaseAdmin
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|table
operator|=
operator|new
name|TransactionalTable
argument_list|(
name|conf
argument_list|,
name|desc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|transactionManager
operator|=
operator|new
name|TransactionManager
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|writeInitalRow
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|writeInitalRow
parameter_list|()
throws|throws
name|IOException
block|{
name|table
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW1
argument_list|)
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUAL_A
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSimpleTransaction
parameter_list|()
throws|throws
name|IOException
throws|,
name|CommitUnsuccessfulException
block|{
name|TransactionState
name|transactionState
init|=
name|makeTransaction1
argument_list|()
decl_stmt|;
name|transactionManager
operator|.
name|tryCommit
argument_list|(
name|transactionState
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTwoTransactionsWithoutConflict
parameter_list|()
throws|throws
name|IOException
throws|,
name|CommitUnsuccessfulException
block|{
name|TransactionState
name|transactionState1
init|=
name|makeTransaction1
argument_list|()
decl_stmt|;
name|TransactionState
name|transactionState2
init|=
name|makeTransaction2
argument_list|()
decl_stmt|;
name|transactionManager
operator|.
name|tryCommit
argument_list|(
name|transactionState1
argument_list|)
expr_stmt|;
name|transactionManager
operator|.
name|tryCommit
argument_list|(
name|transactionState2
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|TestTwoTransactionsWithConflict
parameter_list|()
throws|throws
name|IOException
throws|,
name|CommitUnsuccessfulException
block|{
name|TransactionState
name|transactionState1
init|=
name|makeTransaction1
argument_list|()
decl_stmt|;
name|TransactionState
name|transactionState2
init|=
name|makeTransaction2
argument_list|()
decl_stmt|;
name|transactionManager
operator|.
name|tryCommit
argument_list|(
name|transactionState2
argument_list|)
expr_stmt|;
try|try
block|{
name|transactionManager
operator|.
name|tryCommit
argument_list|(
name|transactionState1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitUnsuccessfulException
name|e
parameter_list|)
block|{
comment|// Good
block|}
block|}
comment|// Read from ROW1,COL_A and put it in ROW2_COLA and ROW3_COLA
specifier|private
name|TransactionState
name|makeTransaction1
parameter_list|()
throws|throws
name|IOException
block|{
name|TransactionState
name|transactionState
init|=
name|transactionManager
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
name|Result
name|row1_A
init|=
name|table
operator|.
name|get
argument_list|(
name|transactionState
argument_list|,
operator|new
name|Get
argument_list|(
name|ROW1
argument_list|)
operator|.
name|addColumn
argument_list|(
name|COL_A
argument_list|)
argument_list|)
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW2
argument_list|)
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUAL_A
argument_list|,
name|row1_A
operator|.
name|getValue
argument_list|(
name|COL_A
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW3
argument_list|)
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUAL_A
argument_list|,
name|row1_A
operator|.
name|getValue
argument_list|(
name|COL_A
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|transactionState
return|;
block|}
comment|// Read ROW1,COL_A, increment its (integer) value, write back
specifier|private
name|TransactionState
name|makeTransaction2
parameter_list|()
throws|throws
name|IOException
block|{
name|TransactionState
name|transactionState
init|=
name|transactionManager
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
name|Result
name|row1_A
init|=
name|table
operator|.
name|get
argument_list|(
name|transactionState
argument_list|,
operator|new
name|Get
argument_list|(
name|ROW1
argument_list|)
operator|.
name|addColumn
argument_list|(
name|COL_A
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|value
init|=
name|Bytes
operator|.
name|toInt
argument_list|(
name|row1_A
operator|.
name|getValue
argument_list|(
name|COL_A
argument_list|)
argument_list|)
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW1
argument_list|)
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUAL_A
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|value
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|transactionState
return|;
block|}
block|}
end_class

end_unit

