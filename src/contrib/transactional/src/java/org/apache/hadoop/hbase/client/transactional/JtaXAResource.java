begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2009 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|transactional
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|transaction
operator|.
name|xa
operator|.
name|XAException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|transaction
operator|.
name|xa
operator|.
name|XAResource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|transaction
operator|.
name|xa
operator|.
name|Xid
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|TransactionalRegionInterface
import|;
end_import

begin_comment
comment|/**  * View hbase as a JTA transactional resource. This allows it to participate in  * transactions across multiple resources.  *   *   */
end_comment

begin_class
specifier|public
class|class
name|JtaXAResource
implements|implements
name|XAResource
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|JtaXAResource
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Xid
argument_list|,
name|TransactionState
argument_list|>
name|xidToTransactionState
init|=
operator|new
name|HashMap
argument_list|<
name|Xid
argument_list|,
name|TransactionState
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|TransactionManager
name|transactionManager
decl_stmt|;
specifier|private
name|ThreadLocal
argument_list|<
name|TransactionState
argument_list|>
name|threadLocalTransactionState
init|=
operator|new
name|ThreadLocal
argument_list|<
name|TransactionState
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|JtaXAResource
parameter_list|(
name|TransactionManager
name|transactionManager
parameter_list|)
block|{
name|this
operator|.
name|transactionManager
operator|=
name|transactionManager
expr_stmt|;
block|}
specifier|public
name|void
name|commit
parameter_list|(
name|Xid
name|xid
parameter_list|,
name|boolean
name|onePhase
parameter_list|)
throws|throws
name|XAException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"commit ["
operator|+
name|xid
operator|.
name|toString
argument_list|()
operator|+
literal|"] "
operator|+
operator|(
name|onePhase
condition|?
literal|"one phase"
else|:
literal|"two phase"
operator|)
argument_list|)
expr_stmt|;
name|TransactionState
name|state
init|=
name|xidToTransactionState
operator|.
name|remove
argument_list|(
name|xid
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XAException
argument_list|(
name|XAException
operator|.
name|XAER_NOTA
argument_list|)
throw|;
block|}
try|try
block|{
if|if
condition|(
name|onePhase
condition|)
block|{
name|transactionManager
operator|.
name|tryCommit
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|transactionManager
operator|.
name|doCommit
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|CommitUnsuccessfulException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XAException
argument_list|(
name|XAException
operator|.
name|XA_RBROLLBACK
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XAException
argument_list|(
name|XAException
operator|.
name|XA_RBPROTO
argument_list|)
throw|;
comment|// FIXME correct code?
block|}
finally|finally
block|{
name|threadLocalTransactionState
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|end
parameter_list|(
name|Xid
name|xid
parameter_list|,
name|int
name|flags
parameter_list|)
throws|throws
name|XAException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"end ["
operator|+
name|xid
operator|.
name|toString
argument_list|()
operator|+
literal|"] "
argument_list|)
expr_stmt|;
name|threadLocalTransactionState
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|forget
parameter_list|(
name|Xid
name|xid
parameter_list|)
throws|throws
name|XAException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"forget ["
operator|+
name|xid
operator|.
name|toString
argument_list|()
operator|+
literal|"] "
argument_list|)
expr_stmt|;
name|threadLocalTransactionState
operator|.
name|remove
argument_list|()
expr_stmt|;
name|TransactionState
name|state
init|=
name|xidToTransactionState
operator|.
name|remove
argument_list|(
name|xid
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|transactionManager
operator|.
name|abort
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
comment|// FIXME, should be an XAException?
block|}
block|}
block|}
specifier|public
name|int
name|getTransactionTimeout
parameter_list|()
throws|throws
name|XAException
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|boolean
name|isSameRM
parameter_list|(
name|XAResource
name|xares
parameter_list|)
throws|throws
name|XAException
block|{
if|if
condition|(
name|xares
operator|instanceof
name|JtaXAResource
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|int
name|prepare
parameter_list|(
name|Xid
name|xid
parameter_list|)
throws|throws
name|XAException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"prepare ["
operator|+
name|xid
operator|.
name|toString
argument_list|()
operator|+
literal|"] "
argument_list|)
expr_stmt|;
name|TransactionState
name|state
init|=
name|xidToTransactionState
operator|.
name|get
argument_list|(
name|xid
argument_list|)
decl_stmt|;
name|int
name|status
decl_stmt|;
try|try
block|{
name|status
operator|=
name|this
operator|.
name|transactionManager
operator|.
name|prepareCommit
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitUnsuccessfulException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XAException
argument_list|(
name|XAException
operator|.
name|XA_HEURRB
argument_list|)
throw|;
comment|// FIXME correct code?
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XAException
argument_list|(
name|XAException
operator|.
name|XA_RBPROTO
argument_list|)
throw|;
comment|// FIXME correct code?
block|}
switch|switch
condition|(
name|status
condition|)
block|{
case|case
name|TransactionalRegionInterface
operator|.
name|COMMIT_OK
case|:
return|return
name|XAResource
operator|.
name|XA_OK
return|;
case|case
name|TransactionalRegionInterface
operator|.
name|COMMIT_OK_READ_ONLY
case|:
return|return
name|XAResource
operator|.
name|XA_RDONLY
return|;
default|default:
throw|throw
operator|new
name|XAException
argument_list|(
name|XAException
operator|.
name|XA_RBPROTO
argument_list|)
throw|;
comment|// FIXME correct code?
block|}
block|}
specifier|public
name|Xid
index|[]
name|recover
parameter_list|(
name|int
name|flag
parameter_list|)
throws|throws
name|XAException
block|{
return|return
name|xidToTransactionState
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|Xid
index|[]
block|{}
argument_list|)
return|;
block|}
specifier|public
name|void
name|rollback
parameter_list|(
name|Xid
name|xid
parameter_list|)
throws|throws
name|XAException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"rollback ["
operator|+
name|xid
operator|.
name|toString
argument_list|()
operator|+
literal|"] "
argument_list|)
expr_stmt|;
name|forget
argument_list|(
name|xid
argument_list|)
expr_stmt|;
name|threadLocalTransactionState
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|setTransactionTimeout
parameter_list|(
name|int
name|seconds
parameter_list|)
throws|throws
name|XAException
block|{
return|return
literal|false
return|;
comment|// Currently not supported. (Only global lease time)
block|}
specifier|public
name|void
name|start
parameter_list|(
name|Xid
name|xid
parameter_list|,
name|int
name|flags
parameter_list|)
throws|throws
name|XAException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"start ["
operator|+
name|xid
operator|.
name|toString
argument_list|()
operator|+
literal|"] "
argument_list|)
expr_stmt|;
comment|// TODO, check flags
name|TransactionState
name|state
init|=
name|this
operator|.
name|transactionManager
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
name|threadLocalTransactionState
operator|.
name|set
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|xidToTransactionState
operator|.
name|put
argument_list|(
name|xid
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return the threadLocalTransaction state.    */
specifier|public
name|TransactionState
name|getThreadLocalTransactionState
parameter_list|()
block|{
return|return
name|threadLocalTransactionState
operator|.
name|get
argument_list|()
return|;
block|}
block|}
end_class

end_unit

