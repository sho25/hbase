begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2009 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|transactional
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|LeaseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|LeaseListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Leases
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Leases
operator|.
name|LeaseStillHeldException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|transactional
operator|.
name|UnknownTransactionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|TransactionalRegionInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|FlushRequester
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|InternalScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|KeyValueScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|transactional
operator|.
name|TransactionState
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_comment
comment|/**  * Regionserver which provides transactional support for atomic transactions.  * This is achieved with optimistic concurrency control (see  * http://www.seas.upenn.edu/~zives/cis650/papers/opt-cc.pdf). We keep track  * read and write sets for each transaction, and hold off on processing the  * writes. To decide to commit a transaction we check its read sets with all  * transactions that have committed while it was running for overlaps.  *<p>  * Because transactions can span multiple regions, all regions must agree to  * commit a transactions. The client side of this commit protocol is encoded in  * org.apache.hadoop.hbase.client.transactional.TransactionManger  *<p>  * In the event of an failure of the client mid-commit, (after we voted yes), we  * will have to consult the transaction log to determine the final decision of  * the transaction. This is not yet implemented.  */
end_comment

begin_class
specifier|public
class|class
name|TransactionalRegion
extends|extends
name|HRegion
block|{
specifier|private
specifier|static
specifier|final
name|String
name|OLD_TRANSACTION_FLUSH
init|=
literal|"hbase.transaction.flush"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_OLD_TRANSACTION_FLUSH
init|=
literal|100
decl_stmt|;
comment|// Do a flush if
comment|// we have this
comment|// many old
comment|// transactions..
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TransactionalRegion
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Collection of active transactions (PENDING) keyed by id.
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|TransactionState
argument_list|>
name|transactionsById
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|TransactionState
argument_list|>
argument_list|()
decl_stmt|;
comment|// Map of recent transactions that are COMMIT_PENDING or COMMITED keyed by
comment|// their sequence number
specifier|private
name|SortedMap
argument_list|<
name|Integer
argument_list|,
name|TransactionState
argument_list|>
name|commitedTransactionsBySequenceNumber
init|=
name|Collections
operator|.
name|synchronizedSortedMap
argument_list|(
operator|new
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|TransactionState
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
comment|// Collection of transactions that are COMMIT_PENDING
specifier|private
name|Set
argument_list|<
name|TransactionState
argument_list|>
name|commitPendingTransactions
init|=
name|Collections
operator|.
name|synchronizedSet
argument_list|(
operator|new
name|HashSet
argument_list|<
name|TransactionState
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|AtomicInteger
name|nextSequenceId
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
name|Object
name|commitCheckLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
name|THLog
name|hlog
decl_stmt|;
specifier|private
specifier|final
name|int
name|oldTransactionFlushTrigger
decl_stmt|;
specifier|private
specifier|final
name|Leases
name|transactionLeases
decl_stmt|;
comment|/**    * @param basedir    * @param log    * @param fs    * @param conf    * @param regionInfo    * @param flushListener    */
specifier|public
name|TransactionalRegion
parameter_list|(
specifier|final
name|Path
name|basedir
parameter_list|,
specifier|final
name|HLog
name|log
parameter_list|,
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|HBaseConfiguration
name|conf
parameter_list|,
specifier|final
name|HRegionInfo
name|regionInfo
parameter_list|,
specifier|final
name|FlushRequester
name|flushListener
parameter_list|,
specifier|final
name|Leases
name|transactionalLeases
parameter_list|)
block|{
name|super
argument_list|(
name|basedir
argument_list|,
name|log
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|,
name|regionInfo
argument_list|,
name|flushListener
argument_list|)
expr_stmt|;
name|this
operator|.
name|hlog
operator|=
operator|(
name|THLog
operator|)
name|log
expr_stmt|;
name|oldTransactionFlushTrigger
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|OLD_TRANSACTION_FLUSH
argument_list|,
name|DEFAULT_OLD_TRANSACTION_FLUSH
argument_list|)
expr_stmt|;
name|this
operator|.
name|transactionLeases
operator|=
name|transactionalLeases
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doReconstructionLog
parameter_list|(
specifier|final
name|Path
name|oldLogFile
parameter_list|,
specifier|final
name|long
name|minSeqId
parameter_list|,
specifier|final
name|long
name|maxSeqId
parameter_list|,
specifier|final
name|Progressable
name|reporter
parameter_list|)
throws|throws
name|UnsupportedEncodingException
throws|,
name|IOException
block|{
name|super
operator|.
name|doReconstructionLog
argument_list|(
name|oldLogFile
argument_list|,
name|minSeqId
argument_list|,
name|maxSeqId
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
name|THLogRecoveryManager
name|recoveryManager
init|=
operator|new
name|THLogRecoveryManager
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|KeyValue
argument_list|>
argument_list|>
name|commitedTransactionsById
init|=
name|recoveryManager
operator|.
name|getCommitsFromLog
argument_list|(
name|oldLogFile
argument_list|,
name|minSeqId
argument_list|,
name|reporter
argument_list|)
decl_stmt|;
if|if
condition|(
name|commitedTransactionsById
operator|!=
literal|null
operator|&&
name|commitedTransactionsById
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"found "
operator|+
name|commitedTransactionsById
operator|.
name|size
argument_list|()
operator|+
literal|" COMMITED transactions"
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|KeyValue
argument_list|>
argument_list|>
name|entry
range|:
name|commitedTransactionsById
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Writing "
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|" updates for transaction "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|KeyValue
name|b
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|b
operator|.
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|super
operator|.
name|put
argument_list|(
name|put
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// These are walled so they live forever
block|}
block|}
comment|// LOG.debug("Flushing cache"); // We must trigger a cache flush,
comment|// otherwise
comment|// we will would ignore the log on subsequent failure
comment|// if (!super.flushcache()) {
comment|// LOG.warn("Did not flush cache");
comment|// }
block|}
block|}
comment|/**    * We need to make sure that we don't complete a cache flush between running    * transactions. If we did, then we would not find all log messages needed to    * restore the transaction, as some of them would be before the last    * "complete" flush id.    */
annotation|@
name|Override
specifier|protected
name|long
name|getCompleteCacheFlushSequenceId
parameter_list|(
specifier|final
name|long
name|currentSequenceId
parameter_list|)
block|{
name|LinkedList
argument_list|<
name|TransactionState
argument_list|>
name|transactionStates
decl_stmt|;
synchronized|synchronized
init|(
name|transactionsById
init|)
block|{
name|transactionStates
operator|=
operator|new
name|LinkedList
argument_list|<
name|TransactionState
argument_list|>
argument_list|(
name|transactionsById
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|long
name|minPendingStartSequenceId
init|=
name|currentSequenceId
decl_stmt|;
for|for
control|(
name|TransactionState
name|transactionState
range|:
name|transactionStates
control|)
block|{
name|minPendingStartSequenceId
operator|=
name|Math
operator|.
name|min
argument_list|(
name|minPendingStartSequenceId
argument_list|,
name|transactionState
operator|.
name|getHLogStartSequenceId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|minPendingStartSequenceId
return|;
block|}
comment|/**    * @param transactionId    * @throws IOException    */
specifier|public
name|void
name|beginTransaction
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|)
throws|throws
name|IOException
block|{
name|checkClosing
argument_list|()
expr_stmt|;
name|String
name|key
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|transactionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|transactionsById
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|TransactionState
name|alias
init|=
name|getTransactionState
argument_list|(
name|transactionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|alias
operator|!=
literal|null
condition|)
block|{
name|alias
operator|.
name|setStatus
argument_list|(
name|Status
operator|.
name|ABORTED
argument_list|)
expr_stmt|;
name|retireTransaction
argument_list|(
name|alias
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|error
argument_list|(
literal|"Existing trasaction with id ["
operator|+
name|key
operator|+
literal|"] in region ["
operator|+
name|super
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Already exiting transaction id: "
operator|+
name|key
argument_list|)
throw|;
block|}
name|TransactionState
name|state
init|=
operator|new
name|TransactionState
argument_list|(
name|transactionId
argument_list|,
name|super
operator|.
name|getLog
argument_list|()
operator|.
name|getSequenceNumber
argument_list|()
argument_list|,
name|super
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
decl_stmt|;
name|state
operator|.
name|setStartSequenceNumber
argument_list|(
name|nextSequenceId
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TransactionState
argument_list|>
name|commitPendingCopy
init|=
operator|new
name|ArrayList
argument_list|<
name|TransactionState
argument_list|>
argument_list|(
name|commitPendingTransactions
argument_list|)
decl_stmt|;
for|for
control|(
name|TransactionState
name|commitPending
range|:
name|commitPendingCopy
control|)
block|{
name|state
operator|.
name|addTransactionToCheck
argument_list|(
name|commitPending
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|transactionsById
init|)
block|{
name|transactionsById
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|transactionLeases
operator|.
name|createLease
argument_list|(
name|getLeaseId
argument_list|(
name|transactionId
argument_list|)
argument_list|,
operator|new
name|TransactionLeaseListener
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LeaseStillHeldException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Lease still held for ["
operator|+
name|key
operator|+
literal|"] in region ["
operator|+
name|super
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Begining transaction "
operator|+
name|key
operator|+
literal|" in region "
operator|+
name|super
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|hlog
operator|.
name|writeStartToLog
argument_list|(
name|super
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|transactionId
argument_list|)
expr_stmt|;
name|maybeTriggerOldTransactionFlush
argument_list|()
expr_stmt|;
block|}
specifier|private
name|String
name|getLeaseId
parameter_list|(
name|long
name|transactionId
parameter_list|)
block|{
return|return
name|super
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
name|transactionId
return|;
block|}
specifier|public
name|Result
name|get
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|,
name|Get
name|get
parameter_list|)
throws|throws
name|IOException
block|{
name|checkClosing
argument_list|()
expr_stmt|;
name|TransactionState
name|state
init|=
name|getTransactionState
argument_list|(
name|transactionId
argument_list|)
decl_stmt|;
name|state
operator|.
name|addRead
argument_list|(
name|get
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|Result
name|superGet
init|=
name|super
operator|.
name|get
argument_list|(
name|get
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Result
name|localGet
init|=
name|state
operator|.
name|localGet
argument_list|(
name|get
argument_list|)
decl_stmt|;
if|if
condition|(
name|localGet
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Transactional get of something we've written in the same transaction "
operator|+
name|transactionId
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|mergedGet
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|localGet
operator|.
name|raw
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|superGet
operator|!=
literal|null
operator|&&
operator|!
name|superGet
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|KeyValue
name|kv
range|:
name|superGet
operator|.
name|raw
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|localGet
operator|.
name|containsColumn
argument_list|(
name|kv
operator|.
name|getFamily
argument_list|()
argument_list|,
name|kv
operator|.
name|getQualifier
argument_list|()
argument_list|)
condition|)
block|{
name|mergedGet
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
operator|new
name|Result
argument_list|(
name|mergedGet
argument_list|)
return|;
block|}
return|return
name|superGet
return|;
block|}
comment|/**    * Get a transactional scanner.    */
specifier|public
name|InternalScanner
name|getScanner
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|,
name|Scan
name|scan
parameter_list|)
throws|throws
name|IOException
block|{
name|checkClosing
argument_list|()
expr_stmt|;
name|TransactionState
name|state
init|=
name|getTransactionState
argument_list|(
name|transactionId
argument_list|)
decl_stmt|;
name|state
operator|.
name|addScan
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|scanners
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValueScanner
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|scanners
operator|.
name|add
argument_list|(
name|state
operator|.
name|getScanner
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|,
name|scanners
argument_list|)
return|;
block|}
comment|/**    * Add a write to the transaction. Does not get applied until commit process.    *     * @param transactionId    * @param put    * @throws IOException    */
specifier|public
name|void
name|put
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|,
specifier|final
name|Put
name|put
parameter_list|)
throws|throws
name|IOException
block|{
name|checkClosing
argument_list|()
expr_stmt|;
name|TransactionState
name|state
init|=
name|getTransactionState
argument_list|(
name|transactionId
argument_list|)
decl_stmt|;
name|state
operator|.
name|addWrite
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|this
operator|.
name|hlog
operator|.
name|writeUpdateToLog
argument_list|(
name|super
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|transactionId
argument_list|,
name|put
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add multiple writes to the transaction. Does not get applied until commit    * process.    *     * @param transactionId    * @param puts    * @throws IOException    */
specifier|public
name|void
name|put
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|,
specifier|final
name|Put
index|[]
name|puts
parameter_list|)
throws|throws
name|IOException
block|{
name|checkClosing
argument_list|()
expr_stmt|;
name|TransactionState
name|state
init|=
name|getTransactionState
argument_list|(
name|transactionId
argument_list|)
decl_stmt|;
for|for
control|(
name|Put
name|put
range|:
name|puts
control|)
block|{
name|state
operator|.
name|addWrite
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|this
operator|.
name|hlog
operator|.
name|writeUpdateToLog
argument_list|(
name|super
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|transactionId
argument_list|,
name|put
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Add a delete to the transaction. Does not get applied until commit process.    *     * @param transactionId    * @param delete    * @throws IOException    */
specifier|public
name|void
name|delete
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|,
name|Delete
name|delete
parameter_list|)
throws|throws
name|IOException
block|{
name|checkClosing
argument_list|()
expr_stmt|;
name|TransactionState
name|state
init|=
name|getTransactionState
argument_list|(
name|transactionId
argument_list|)
decl_stmt|;
name|state
operator|.
name|addDelete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|this
operator|.
name|hlog
operator|.
name|writeDeleteToLog
argument_list|(
name|super
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|transactionId
argument_list|,
name|delete
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param transactionId    * @return TransactionRegionInterface commit code    * @throws IOException    */
specifier|public
name|int
name|commitRequest
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|)
throws|throws
name|IOException
block|{
name|checkClosing
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|commitCheckLock
init|)
block|{
name|TransactionState
name|state
init|=
name|getTransactionState
argument_list|(
name|transactionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|==
literal|null
condition|)
block|{
return|return
name|TransactionalRegionInterface
operator|.
name|COMMIT_UNSUCESSFUL
return|;
block|}
if|if
condition|(
name|hasConflict
argument_list|(
name|state
argument_list|)
condition|)
block|{
name|state
operator|.
name|setStatus
argument_list|(
name|Status
operator|.
name|ABORTED
argument_list|)
expr_stmt|;
name|retireTransaction
argument_list|(
name|state
argument_list|)
expr_stmt|;
return|return
name|TransactionalRegionInterface
operator|.
name|COMMIT_UNSUCESSFUL
return|;
block|}
comment|// No conflicts, we can commit.
name|LOG
operator|.
name|trace
argument_list|(
literal|"No conflicts for transaction "
operator|+
name|transactionId
operator|+
literal|" found in region "
operator|+
name|super
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|". Voting for commit"
argument_list|)
expr_stmt|;
comment|// If there are writes we must keep record off the transaction
if|if
condition|(
name|state
operator|.
name|hasWrite
argument_list|()
condition|)
block|{
comment|// Order is important
name|state
operator|.
name|setStatus
argument_list|(
name|Status
operator|.
name|COMMIT_PENDING
argument_list|)
expr_stmt|;
name|commitPendingTransactions
operator|.
name|add
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|state
operator|.
name|setSequenceNumber
argument_list|(
name|nextSequenceId
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
expr_stmt|;
name|commitedTransactionsBySequenceNumber
operator|.
name|put
argument_list|(
name|state
operator|.
name|getSequenceNumber
argument_list|()
argument_list|,
name|state
argument_list|)
expr_stmt|;
return|return
name|TransactionalRegionInterface
operator|.
name|COMMIT_OK
return|;
block|}
comment|// Otherwise we were read-only and commitable, so we can forget it.
name|state
operator|.
name|setStatus
argument_list|(
name|Status
operator|.
name|COMMITED
argument_list|)
expr_stmt|;
name|retireTransaction
argument_list|(
name|state
argument_list|)
expr_stmt|;
return|return
name|TransactionalRegionInterface
operator|.
name|COMMIT_OK_READ_ONLY
return|;
block|}
block|}
comment|/**    * @param transactionId    * @return true if commit is successful    * @throws IOException    */
specifier|public
name|boolean
name|commitIfPossible
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|status
init|=
name|commitRequest
argument_list|(
name|transactionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|==
name|TransactionalRegionInterface
operator|.
name|COMMIT_OK
condition|)
block|{
name|commit
argument_list|(
name|transactionId
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|status
operator|==
name|TransactionalRegionInterface
operator|.
name|COMMIT_OK_READ_ONLY
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|hasConflict
parameter_list|(
specifier|final
name|TransactionState
name|state
parameter_list|)
block|{
comment|// Check transactions that were committed while we were running
for|for
control|(
name|int
name|i
init|=
name|state
operator|.
name|getStartSequenceNumber
argument_list|()
init|;
name|i
operator|<
name|nextSequenceId
operator|.
name|get
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|TransactionState
name|other
init|=
name|commitedTransactionsBySequenceNumber
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|other
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|state
operator|.
name|addTransactionToCheck
argument_list|(
name|other
argument_list|)
expr_stmt|;
block|}
return|return
name|state
operator|.
name|hasConflict
argument_list|()
return|;
block|}
comment|/**    * Commit the transaction.    *     * @param transactionId    * @throws IOException    */
specifier|public
name|void
name|commit
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|)
throws|throws
name|IOException
block|{
name|TransactionState
name|state
decl_stmt|;
try|try
block|{
name|state
operator|=
name|getTransactionState
argument_list|(
name|transactionId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownTransactionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Asked to commit unknown transaction: "
operator|+
name|transactionId
operator|+
literal|" in region "
operator|+
name|super
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO. Anything to handle here?
throw|throw
name|e
throw|;
block|}
if|if
condition|(
operator|!
name|state
operator|.
name|getStatus
argument_list|()
operator|.
name|equals
argument_list|(
name|Status
operator|.
name|COMMIT_PENDING
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Asked to commit a non pending transaction"
argument_list|)
expr_stmt|;
comment|// TODO. Anything to handle here?
throw|throw
operator|new
name|IOException
argument_list|(
literal|"commit failure"
argument_list|)
throw|;
block|}
name|commit
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
comment|/**    * Commit the transaction.    *     * @param transactionId    * @throws IOException    */
specifier|public
name|void
name|abort
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Not checking closing...
name|TransactionState
name|state
decl_stmt|;
try|try
block|{
name|state
operator|=
name|getTransactionState
argument_list|(
name|transactionId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownTransactionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Asked to abort unknown transaction ["
operator|+
name|transactionId
operator|+
literal|"] in region ["
operator|+
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|"], ignoring"
argument_list|)
expr_stmt|;
return|return;
block|}
name|state
operator|.
name|setStatus
argument_list|(
name|Status
operator|.
name|ABORTED
argument_list|)
expr_stmt|;
name|this
operator|.
name|hlog
operator|.
name|writeAbortToLog
argument_list|(
name|super
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|state
operator|.
name|getTransactionId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Following removes needed if we have voted
if|if
condition|(
name|state
operator|.
name|getSequenceNumber
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|commitedTransactionsBySequenceNumber
operator|.
name|remove
argument_list|(
name|state
operator|.
name|getSequenceNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|commitPendingTransactions
operator|.
name|remove
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|retireTransaction
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|commit
parameter_list|(
specifier|final
name|TransactionState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Commiting transaction: "
operator|+
name|state
operator|.
name|toString
argument_list|()
operator|+
literal|" to "
operator|+
name|super
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|hlog
operator|.
name|writeCommitToLog
argument_list|(
name|super
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|state
operator|.
name|getTransactionId
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Put
name|update
range|:
name|state
operator|.
name|getPuts
argument_list|()
control|)
block|{
name|this
operator|.
name|put
argument_list|(
name|update
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Don't need to WAL these
block|}
for|for
control|(
name|Delete
name|delete
range|:
name|state
operator|.
name|getDeleteSet
argument_list|()
control|)
block|{
name|this
operator|.
name|delete
argument_list|(
name|delete
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|setStatus
argument_list|(
name|Status
operator|.
name|COMMITED
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
operator|.
name|hasWrite
argument_list|()
operator|&&
operator|!
name|commitPendingTransactions
operator|.
name|remove
argument_list|(
name|state
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Commiting a non-query transaction that is not in commitPendingTransactions"
argument_list|)
expr_stmt|;
comment|// Something has gone really wrong.
throw|throw
operator|new
name|IOException
argument_list|(
literal|"commit failure"
argument_list|)
throw|;
block|}
name|retireTransaction
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|StoreFile
argument_list|>
name|close
parameter_list|(
name|boolean
name|abort
parameter_list|)
throws|throws
name|IOException
block|{
name|prepareToClose
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|commitPendingTransactions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Closing transactional region ["
operator|+
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|"], but still have ["
operator|+
name|commitPendingTransactions
operator|.
name|size
argument_list|()
operator|+
literal|"] transactions  that are pending commit."
argument_list|)
expr_stmt|;
comment|// TODO resolve from the Global Trx Log.
block|}
return|return
name|super
operator|.
name|close
argument_list|(
name|abort
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|prepareToSplit
parameter_list|()
block|{
name|prepareToClose
argument_list|()
expr_stmt|;
block|}
name|boolean
name|closing
init|=
literal|false
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|CLOSE_WAIT_ON_COMMIT_PENDING
init|=
literal|1000
decl_stmt|;
comment|/**    * Get ready to close.    *     */
name|void
name|prepareToClose
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Preparing to close region "
operator|+
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
name|closing
operator|=
literal|true
expr_stmt|;
while|while
condition|(
operator|!
name|commitPendingTransactions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Preparing to closing transactional region ["
operator|+
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|"], but still have ["
operator|+
name|commitPendingTransactions
operator|.
name|size
argument_list|()
operator|+
literal|"] transactions that are pending commit. Sleeping"
argument_list|)
expr_stmt|;
for|for
control|(
name|TransactionState
name|s
range|:
name|commitPendingTransactions
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"commit pending: "
operator|+
name|s
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|CLOSE_WAIT_ON_COMMIT_PENDING
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|void
name|checkClosing
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|closing
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"closing region, no more transaction allowed"
argument_list|)
throw|;
block|}
block|}
comment|// Cancel leases, and removed from lease lookup. This transaction may still
comment|// live in commitedTransactionsBySequenceNumber and commitPendingTransactions
specifier|private
name|void
name|retireTransaction
parameter_list|(
specifier|final
name|TransactionState
name|state
parameter_list|)
block|{
name|String
name|key
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|state
operator|.
name|getTransactionId
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|transactionLeases
operator|.
name|cancelLease
argument_list|(
name|getLeaseId
argument_list|(
name|state
operator|.
name|getTransactionId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LeaseException
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
name|transactionsById
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|TransactionState
name|getTransactionState
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|)
throws|throws
name|UnknownTransactionException
block|{
name|String
name|key
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|transactionId
argument_list|)
decl_stmt|;
name|TransactionState
name|state
init|=
literal|null
decl_stmt|;
name|state
operator|=
name|transactionsById
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Unknown transaction: ["
operator|+
name|key
operator|+
literal|"], region: ["
operator|+
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UnknownTransactionException
argument_list|(
literal|"transaction: ["
operator|+
name|key
operator|+
literal|"], region: ["
operator|+
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
try|try
block|{
name|transactionLeases
operator|.
name|renewLease
argument_list|(
name|getLeaseId
argument_list|(
name|transactionId
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LeaseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|state
return|;
block|}
specifier|private
name|void
name|maybeTriggerOldTransactionFlush
parameter_list|()
block|{
if|if
condition|(
name|commitedTransactionsBySequenceNumber
operator|.
name|size
argument_list|()
operator|>
name|oldTransactionFlushTrigger
condition|)
block|{
name|removeUnNeededCommitedTransactions
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Cleanup references to committed transactions that are no longer needed.    *     */
specifier|synchronized
name|void
name|removeUnNeededCommitedTransactions
parameter_list|()
block|{
name|Integer
name|minStartSeqNumber
init|=
name|getMinStartSequenceNumber
argument_list|()
decl_stmt|;
if|if
condition|(
name|minStartSeqNumber
operator|==
literal|null
condition|)
block|{
name|minStartSeqNumber
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
comment|// Remove all
block|}
name|int
name|numRemoved
init|=
literal|0
decl_stmt|;
comment|// Copy list to avoid conc update exception
for|for
control|(
name|Entry
argument_list|<
name|Integer
argument_list|,
name|TransactionState
argument_list|>
name|entry
range|:
operator|new
name|LinkedList
argument_list|<
name|Entry
argument_list|<
name|Integer
argument_list|,
name|TransactionState
argument_list|>
argument_list|>
argument_list|(
name|commitedTransactionsBySequenceNumber
operator|.
name|entrySet
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|>=
name|minStartSeqNumber
condition|)
block|{
break|break;
block|}
name|numRemoved
operator|=
name|numRemoved
operator|+
operator|(
name|commitedTransactionsBySequenceNumber
operator|.
name|remove
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|==
literal|null
condition|?
literal|0
else|:
literal|1
operator|)
expr_stmt|;
name|numRemoved
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|StringBuilder
name|debugMessage
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|numRemoved
operator|>
literal|0
condition|)
block|{
name|debugMessage
operator|.
name|append
argument_list|(
literal|"Removed ["
argument_list|)
operator|.
name|append
argument_list|(
name|numRemoved
argument_list|)
operator|.
name|append
argument_list|(
literal|"] commited transactions"
argument_list|)
expr_stmt|;
if|if
condition|(
name|minStartSeqNumber
operator|==
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|debugMessage
operator|.
name|append
argument_list|(
literal|"with any sequence number"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|debugMessage
operator|.
name|append
argument_list|(
literal|"with sequence lower than ["
argument_list|)
operator|.
name|append
argument_list|(
name|minStartSeqNumber
argument_list|)
operator|.
name|append
argument_list|(
literal|"]."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|commitedTransactionsBySequenceNumber
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|debugMessage
operator|.
name|append
argument_list|(
literal|" Still have ["
argument_list|)
operator|.
name|append
argument_list|(
name|commitedTransactionsBySequenceNumber
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"] left."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|debugMessage
operator|.
name|append
argument_list|(
literal|" None left."
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
name|debugMessage
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|commitedTransactionsBySequenceNumber
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|debugMessage
operator|.
name|append
argument_list|(
literal|"Could not remove any transactions, and still have "
argument_list|)
operator|.
name|append
argument_list|(
name|commitedTransactionsBySequenceNumber
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" left"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|debugMessage
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|Integer
name|getMinStartSequenceNumber
parameter_list|()
block|{
name|LinkedList
argument_list|<
name|TransactionState
argument_list|>
name|transactionStates
decl_stmt|;
synchronized|synchronized
init|(
name|transactionsById
init|)
block|{
name|transactionStates
operator|=
operator|new
name|LinkedList
argument_list|<
name|TransactionState
argument_list|>
argument_list|(
name|transactionsById
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Integer
name|min
init|=
literal|null
decl_stmt|;
for|for
control|(
name|TransactionState
name|transactionState
range|:
name|transactionStates
control|)
block|{
if|if
condition|(
name|min
operator|==
literal|null
operator|||
name|transactionState
operator|.
name|getStartSequenceNumber
argument_list|()
operator|<
name|min
condition|)
block|{
name|min
operator|=
name|transactionState
operator|.
name|getStartSequenceNumber
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|min
return|;
block|}
specifier|private
name|void
name|resolveTransactionFromLog
parameter_list|(
specifier|final
name|TransactionState
name|transactionState
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Global transaction log is not Implemented. (Optimisticly) assuming transaction commit!"
argument_list|)
expr_stmt|;
name|commit
argument_list|(
name|transactionState
argument_list|)
expr_stmt|;
comment|// throw new RuntimeException("Global transaction log is not Implemented");
block|}
specifier|private
specifier|static
specifier|final
name|int
name|MAX_COMMIT_PENDING_WAITS
init|=
literal|10
decl_stmt|;
specifier|private
class|class
name|TransactionLeaseListener
implements|implements
name|LeaseListener
block|{
specifier|private
specifier|final
name|String
name|transactionName
decl_stmt|;
name|TransactionLeaseListener
parameter_list|(
specifier|final
name|String
name|n
parameter_list|)
block|{
name|this
operator|.
name|transactionName
operator|=
name|n
expr_stmt|;
block|}
specifier|public
name|void
name|leaseExpired
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Transaction ["
operator|+
name|this
operator|.
name|transactionName
operator|+
literal|"] expired in region ["
operator|+
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|TransactionState
name|s
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|transactionsById
init|)
block|{
name|s
operator|=
name|transactionsById
operator|.
name|remove
argument_list|(
name|transactionName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unknown transaction expired "
operator|+
name|this
operator|.
name|transactionName
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|s
operator|.
name|getStatus
argument_list|()
condition|)
block|{
case|case
name|PENDING
case|:
name|s
operator|.
name|setStatus
argument_list|(
name|Status
operator|.
name|ABORTED
argument_list|)
expr_stmt|;
comment|// Other transactions may have a ref
break|break;
case|case
name|COMMIT_PENDING
case|:
name|LOG
operator|.
name|info
argument_list|(
literal|"Transaction "
operator|+
name|s
operator|.
name|getTransactionId
argument_list|()
operator|+
literal|" expired in COMMIT_PENDING state"
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|s
operator|.
name|getCommitPendingWaits
argument_list|()
operator|>
name|MAX_COMMIT_PENDING_WAITS
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Checking transaction status in transaction log"
argument_list|)
expr_stmt|;
name|resolveTransactionFromLog
argument_list|(
name|s
argument_list|)
expr_stmt|;
break|break;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"renewing lease and hoping for commit"
argument_list|)
expr_stmt|;
name|s
operator|.
name|incrementCommitPendingWaits
argument_list|()
expr_stmt|;
name|String
name|key
init|=
name|Long
operator|.
name|toString
argument_list|(
name|s
operator|.
name|getTransactionId
argument_list|()
argument_list|)
decl_stmt|;
name|transactionsById
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|s
argument_list|)
expr_stmt|;
try|try
block|{
name|transactionLeases
operator|.
name|createLease
argument_list|(
name|getLeaseId
argument_list|(
name|s
operator|.
name|getTransactionId
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LeaseStillHeldException
name|e
parameter_list|)
block|{
name|transactionLeases
operator|.
name|renewLease
argument_list|(
name|getLeaseId
argument_list|(
name|s
operator|.
name|getTransactionId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
break|break;
default|default:
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unexpected status on expired lease"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

