begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2009 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|transactional
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_class
specifier|public
class|class
name|HBaseBackedTransactionLogger
implements|implements
name|TransactionLogger
block|{
comment|/** The name of the transaction status table. */
specifier|public
specifier|static
specifier|final
name|String
name|TABLE_NAME
init|=
literal|"__GLOBAL_TRX_LOG__"
decl_stmt|;
comment|/**    * Column which holds the transaction status.    *     */
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|STATUS_FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Info"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|STATUS_QUALIFIER
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Status"
argument_list|)
decl_stmt|;
comment|/**    * Create the table.    *     * @throws IOException    *     */
specifier|public
specifier|static
name|void
name|createTable
parameter_list|()
throws|throws
name|IOException
block|{
name|HTableDescriptor
name|tableDesc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TABLE_NAME
argument_list|)
decl_stmt|;
name|tableDesc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|STATUS_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|HBaseAdmin
name|admin
init|=
operator|new
name|HBaseAdmin
argument_list|(
operator|new
name|HBaseConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|tableDesc
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|private
name|HTable
name|table
decl_stmt|;
specifier|public
name|HBaseBackedTransactionLogger
parameter_list|()
throws|throws
name|IOException
block|{
name|initTable
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|initTable
parameter_list|()
throws|throws
name|IOException
block|{
name|HBaseAdmin
name|admin
init|=
operator|new
name|HBaseAdmin
argument_list|(
operator|new
name|HBaseConfiguration
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|admin
operator|.
name|tableExists
argument_list|(
name|TABLE_NAME
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Table not created. Call createTable() first"
argument_list|)
throw|;
block|}
name|this
operator|.
name|table
operator|=
operator|new
name|HTable
argument_list|(
name|TABLE_NAME
argument_list|)
expr_stmt|;
block|}
specifier|public
name|long
name|createNewTransactionLog
parameter_list|()
block|{
name|long
name|id
decl_stmt|;
name|TransactionStatus
name|existing
decl_stmt|;
do|do
block|{
name|id
operator|=
name|random
operator|.
name|nextLong
argument_list|()
expr_stmt|;
name|existing
operator|=
name|getStatusForTransaction
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|existing
operator|!=
literal|null
condition|)
do|;
name|setStatusForTransaction
argument_list|(
name|id
argument_list|,
name|TransactionStatus
operator|.
name|PENDING
argument_list|)
expr_stmt|;
return|return
name|id
return|;
block|}
specifier|public
name|TransactionStatus
name|getStatusForTransaction
parameter_list|(
name|long
name|transactionId
parameter_list|)
block|{
try|try
block|{
name|Result
name|result
init|=
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|getRow
argument_list|(
name|transactionId
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
operator|||
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|byte
index|[]
name|statusValue
init|=
name|result
operator|.
name|getValue
argument_list|(
name|STATUS_FAMILY
argument_list|,
name|STATUS_QUALIFIER
argument_list|)
decl_stmt|;
if|if
condition|(
name|statusValue
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"No status cell for row "
operator|+
name|transactionId
argument_list|)
throw|;
block|}
name|String
name|statusString
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|statusValue
argument_list|)
decl_stmt|;
return|return
name|TransactionStatus
operator|.
name|valueOf
argument_list|(
name|statusString
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|byte
index|[]
name|getRow
parameter_list|(
name|long
name|transactionId
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
operator|+
name|transactionId
argument_list|)
return|;
block|}
specifier|public
name|void
name|setStatusForTransaction
parameter_list|(
name|long
name|transactionId
parameter_list|,
name|TransactionStatus
name|status
parameter_list|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|getRow
argument_list|(
name|transactionId
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|STATUS_FAMILY
argument_list|,
name|STATUS_QUALIFIER
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|status
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|forgetTransaction
parameter_list|(
name|long
name|transactionId
parameter_list|)
block|{
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|getRow
argument_list|(
name|transactionId
argument_list|)
argument_list|)
decl_stmt|;
name|delete
operator|.
name|deleteColumns
argument_list|(
name|STATUS_FAMILY
argument_list|,
name|STATUS_QUALIFIER
argument_list|)
expr_stmt|;
try|try
block|{
name|table
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

