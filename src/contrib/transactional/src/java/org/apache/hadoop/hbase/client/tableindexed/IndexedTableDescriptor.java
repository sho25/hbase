begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2008 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|tableindexed
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|ArrayWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|ObjectWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_class
specifier|public
class|class
name|IndexedTableDescriptor
block|{
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|INDEXES_KEY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"INDEXES"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|HTableDescriptor
name|baseTableDescriptor
decl_stmt|;
comment|// Key is indexId
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|IndexSpecification
argument_list|>
name|indexes
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|IndexSpecification
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|IndexedTableDescriptor
parameter_list|(
name|HTableDescriptor
name|baseTableDescriptor
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|baseTableDescriptor
operator|=
name|baseTableDescriptor
expr_stmt|;
name|readFromTable
argument_list|()
expr_stmt|;
block|}
specifier|public
name|HTableDescriptor
name|getBaseTableDescriptor
parameter_list|()
block|{
return|return
name|this
operator|.
name|baseTableDescriptor
return|;
block|}
specifier|private
name|void
name|readFromTable
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|bytes
init|=
name|baseTableDescriptor
operator|.
name|getValue
argument_list|(
name|INDEXES_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|bytes
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|ByteArrayInputStream
name|bais
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|DataInputStream
name|dis
init|=
operator|new
name|DataInputStream
argument_list|(
name|bais
argument_list|)
decl_stmt|;
name|IndexSpecificationArray
name|indexArray
init|=
operator|new
name|IndexSpecificationArray
argument_list|()
decl_stmt|;
name|indexArray
operator|.
name|readFields
argument_list|(
name|dis
argument_list|)
expr_stmt|;
for|for
control|(
name|Writable
name|index
range|:
name|indexArray
operator|.
name|getIndexSpecifications
argument_list|()
control|)
block|{
name|IndexSpecification
name|indexSpec
init|=
operator|(
name|IndexSpecification
operator|)
name|index
decl_stmt|;
name|indexes
operator|.
name|put
argument_list|(
name|indexSpec
operator|.
name|getIndexId
argument_list|()
argument_list|,
name|indexSpec
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|writeToTable
parameter_list|()
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|dos
init|=
operator|new
name|DataOutputStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|IndexSpecificationArray
name|indexArray
init|=
operator|new
name|IndexSpecificationArray
argument_list|(
name|indexes
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|IndexSpecification
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|indexArray
operator|.
name|write
argument_list|(
name|dos
argument_list|)
expr_stmt|;
name|dos
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|baseTableDescriptor
operator|.
name|setValue
argument_list|(
name|INDEXES_KEY
argument_list|,
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Collection
argument_list|<
name|IndexSpecification
argument_list|>
name|getIndexes
parameter_list|()
block|{
return|return
name|indexes
operator|.
name|values
argument_list|()
return|;
block|}
specifier|public
name|IndexSpecification
name|getIndex
parameter_list|(
name|String
name|indexId
parameter_list|)
block|{
return|return
name|indexes
operator|.
name|get
argument_list|(
name|indexId
argument_list|)
return|;
block|}
specifier|public
name|void
name|addIndex
parameter_list|(
name|IndexSpecification
name|index
parameter_list|)
block|{
name|indexes
operator|.
name|put
argument_list|(
name|index
operator|.
name|getIndexId
argument_list|()
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|writeToTable
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|removeIndex
parameter_list|(
name|String
name|indexId
parameter_list|)
block|{
name|indexes
operator|.
name|remove
argument_list|(
name|indexId
argument_list|)
expr_stmt|;
name|writeToTable
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|s
init|=
operator|new
name|StringBuilder
argument_list|(
name|baseTableDescriptor
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|indexes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|s
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|"INDEXES"
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|" => "
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|indexes
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|s
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

