begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2009 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|transactional
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NotServingRegionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HConnectionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|TransactionalRegionInterface
import|;
end_import

begin_comment
comment|/**  * Transaction Manager. Responsible for committing transactions.  *   */
end_comment

begin_class
specifier|public
class|class
name|TransactionManager
block|{
static|static
block|{
name|TransactionalRPC
operator|.
name|initialize
argument_list|()
expr_stmt|;
block|}
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TransactionManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|HConnection
name|connection
decl_stmt|;
specifier|private
specifier|final
name|TransactionLogger
name|transactionLogger
decl_stmt|;
specifier|private
name|JtaXAResource
name|xAResource
decl_stmt|;
comment|/**    * @param conf    */
specifier|public
name|TransactionManager
parameter_list|(
specifier|final
name|HBaseConfiguration
name|conf
parameter_list|)
block|{
name|this
argument_list|(
name|LocalTransactionLogger
operator|.
name|getInstance
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param transactionLogger    * @param conf    */
specifier|public
name|TransactionManager
parameter_list|(
specifier|final
name|TransactionLogger
name|transactionLogger
parameter_list|,
specifier|final
name|HBaseConfiguration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|transactionLogger
operator|=
name|transactionLogger
expr_stmt|;
name|connection
operator|=
name|HConnectionManager
operator|.
name|getConnection
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Called to start a transaction.    *     * @return new transaction state    */
specifier|public
name|TransactionState
name|beginTransaction
parameter_list|()
block|{
name|long
name|transactionId
init|=
name|transactionLogger
operator|.
name|createNewTransactionLog
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Begining transaction "
operator|+
name|transactionId
argument_list|)
expr_stmt|;
return|return
operator|new
name|TransactionState
argument_list|(
name|transactionId
argument_list|)
return|;
block|}
comment|/**    * Prepare to commit a transaction.    *     * @param transactionState    * @return commitStatusCode (see {@link TransactionalRegionInterface})    * @throws IOException    * @throws CommitUnsuccessfulException    */
specifier|public
name|int
name|prepareCommit
parameter_list|(
specifier|final
name|TransactionState
name|transactionState
parameter_list|)
throws|throws
name|CommitUnsuccessfulException
throws|,
name|IOException
block|{
name|boolean
name|allReadOnly
init|=
literal|true
decl_stmt|;
try|try
block|{
name|Iterator
argument_list|<
name|HRegionLocation
argument_list|>
name|locationIterator
init|=
name|transactionState
operator|.
name|getParticipatingRegions
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|locationIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|HRegionLocation
name|location
init|=
name|locationIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|TransactionalRegionInterface
name|transactionalRegionServer
init|=
operator|(
name|TransactionalRegionInterface
operator|)
name|connection
operator|.
name|getHRegionConnection
argument_list|(
name|location
operator|.
name|getServerAddress
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|commitStatus
init|=
name|transactionalRegionServer
operator|.
name|commitRequest
argument_list|(
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|transactionState
operator|.
name|getTransactionId
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|canCommit
init|=
literal|true
decl_stmt|;
switch|switch
condition|(
name|commitStatus
condition|)
block|{
case|case
name|TransactionalRegionInterface
operator|.
name|COMMIT_OK
case|:
name|allReadOnly
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|TransactionalRegionInterface
operator|.
name|COMMIT_OK_READ_ONLY
case|:
name|locationIterator
operator|.
name|remove
argument_list|()
expr_stmt|;
comment|// No need to doCommit for read-onlys
break|break;
case|case
name|TransactionalRegionInterface
operator|.
name|COMMIT_UNSUCESSFUL
case|:
name|canCommit
operator|=
literal|false
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|CommitUnsuccessfulException
argument_list|(
literal|"Unexpected return code from prepareCommit: "
operator|+
name|commitStatus
argument_list|)
throw|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Region ["
operator|+
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|"] votes "
operator|+
operator|(
name|canCommit
condition|?
literal|"to commit"
else|:
literal|"to abort"
operator|)
operator|+
literal|" transaction "
operator|+
name|transactionState
operator|.
name|getTransactionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|canCommit
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Aborting ["
operator|+
name|transactionState
operator|.
name|getTransactionId
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|abort
argument_list|(
name|transactionState
argument_list|,
name|location
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CommitUnsuccessfulException
argument_list|()
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Commit of transaction ["
operator|+
name|transactionState
operator|.
name|getTransactionId
argument_list|()
operator|+
literal|"] was unsucsessful"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// This happens on a NSRE that is triggered by a split
try|try
block|{
name|abort
argument_list|(
name|transactionState
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|abortException
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exeption durring abort"
argument_list|,
name|abortException
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|CommitUnsuccessfulException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|allReadOnly
condition|?
name|TransactionalRegionInterface
operator|.
name|COMMIT_OK_READ_ONLY
else|:
name|TransactionalRegionInterface
operator|.
name|COMMIT_OK
return|;
block|}
comment|/**    * Try and commit a transaction. This does both phases of the 2-phase protocol: prepare and commit.    *     * @param transactionState    * @throws IOException    * @throws CommitUnsuccessfulException    */
specifier|public
name|void
name|tryCommit
parameter_list|(
specifier|final
name|TransactionState
name|transactionState
parameter_list|)
throws|throws
name|CommitUnsuccessfulException
throws|,
name|IOException
block|{
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"atempting to commit trasaction: "
operator|+
name|transactionState
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|status
init|=
name|prepareCommit
argument_list|(
name|transactionState
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|==
name|TransactionalRegionInterface
operator|.
name|COMMIT_OK
condition|)
block|{
name|doCommit
argument_list|(
name|transactionState
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|status
operator|==
name|TransactionalRegionInterface
operator|.
name|COMMIT_OK_READ_ONLY
condition|)
block|{
name|transactionLogger
operator|.
name|forgetTransaction
argument_list|(
name|transactionState
operator|.
name|getTransactionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Committed transaction ["
operator|+
name|transactionState
operator|.
name|getTransactionId
argument_list|()
operator|+
literal|"] in ["
operator|+
operator|(
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
operator|)
operator|+
literal|"]ms"
argument_list|)
expr_stmt|;
block|}
comment|/** Do the commit. This is the 2nd phase of the 2-phase protocol.    *     * @param transactionState    * @throws CommitUnsuccessfulException    */
specifier|public
name|void
name|doCommit
parameter_list|(
specifier|final
name|TransactionState
name|transactionState
parameter_list|)
throws|throws
name|CommitUnsuccessfulException
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Commiting ["
operator|+
name|transactionState
operator|.
name|getTransactionId
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|transactionLogger
operator|.
name|setStatusForTransaction
argument_list|(
name|transactionState
operator|.
name|getTransactionId
argument_list|()
argument_list|,
name|TransactionLogger
operator|.
name|TransactionStatus
operator|.
name|COMMITTED
argument_list|)
expr_stmt|;
for|for
control|(
name|HRegionLocation
name|location
range|:
name|transactionState
operator|.
name|getParticipatingRegions
argument_list|()
control|)
block|{
name|TransactionalRegionInterface
name|transactionalRegionServer
init|=
operator|(
name|TransactionalRegionInterface
operator|)
name|connection
operator|.
name|getHRegionConnection
argument_list|(
name|location
operator|.
name|getServerAddress
argument_list|()
argument_list|)
decl_stmt|;
name|transactionalRegionServer
operator|.
name|commit
argument_list|(
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|transactionState
operator|.
name|getTransactionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Commit of transaction ["
operator|+
name|transactionState
operator|.
name|getTransactionId
argument_list|()
operator|+
literal|"] was unsucsessful"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// This happens on a NSRE that is triggered by a split
try|try
block|{
name|abort
argument_list|(
name|transactionState
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|abortException
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exeption durring abort"
argument_list|,
name|abortException
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|CommitUnsuccessfulException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|transactionLogger
operator|.
name|forgetTransaction
argument_list|(
name|transactionState
operator|.
name|getTransactionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Abort a s transaction.    *     * @param transactionState    * @throws IOException    */
specifier|public
name|void
name|abort
parameter_list|(
specifier|final
name|TransactionState
name|transactionState
parameter_list|)
throws|throws
name|IOException
block|{
name|abort
argument_list|(
name|transactionState
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|abort
parameter_list|(
specifier|final
name|TransactionState
name|transactionState
parameter_list|,
specifier|final
name|HRegionLocation
name|locationToIgnore
parameter_list|)
throws|throws
name|IOException
block|{
name|transactionLogger
operator|.
name|setStatusForTransaction
argument_list|(
name|transactionState
operator|.
name|getTransactionId
argument_list|()
argument_list|,
name|TransactionLogger
operator|.
name|TransactionStatus
operator|.
name|ABORTED
argument_list|)
expr_stmt|;
for|for
control|(
name|HRegionLocation
name|location
range|:
name|transactionState
operator|.
name|getParticipatingRegions
argument_list|()
control|)
block|{
if|if
condition|(
name|locationToIgnore
operator|!=
literal|null
operator|&&
name|location
operator|.
name|equals
argument_list|(
name|locationToIgnore
argument_list|)
condition|)
block|{
continue|continue;
block|}
try|try
block|{
name|TransactionalRegionInterface
name|transactionalRegionServer
init|=
operator|(
name|TransactionalRegionInterface
operator|)
name|connection
operator|.
name|getHRegionConnection
argument_list|(
name|location
operator|.
name|getServerAddress
argument_list|()
argument_list|)
decl_stmt|;
name|transactionalRegionServer
operator|.
name|abort
argument_list|(
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|transactionState
operator|.
name|getTransactionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownTransactionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Got unknown transaciton exception durring abort. Transaction: ["
operator|+
name|transactionState
operator|.
name|getTransactionId
argument_list|()
operator|+
literal|"], region: ["
operator|+
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|"]. Ignoring."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotServingRegionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Got NSRE durring abort. Transaction: ["
operator|+
name|transactionState
operator|.
name|getTransactionId
argument_list|()
operator|+
literal|"], region: ["
operator|+
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|"]. Ignoring."
argument_list|)
expr_stmt|;
block|}
block|}
name|transactionLogger
operator|.
name|forgetTransaction
argument_list|(
name|transactionState
operator|.
name|getTransactionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|JtaXAResource
name|getXAResource
parameter_list|()
block|{
if|if
condition|(
name|xAResource
operator|==
literal|null
condition|)
block|{
name|xAResource
operator|=
operator|new
name|JtaXAResource
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
return|return
name|xAResource
return|;
block|}
block|}
end_class

end_unit

