begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2009 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|stargate
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|stargate
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ScannerMessage
operator|.
name|Scanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_comment
comment|/**  * A representation of Scanner parameters.  */
end_comment

begin_class
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"Scanner"
argument_list|)
specifier|public
class|class
name|ScannerModel
implements|implements
name|IProtobufWrapper
implements|,
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|byte
index|[]
name|startRow
init|=
name|HConstants
operator|.
name|EMPTY_START_ROW
decl_stmt|;
specifier|private
name|byte
index|[]
name|endRow
init|=
name|HConstants
operator|.
name|EMPTY_END_ROW
decl_stmt|;
empty_stmt|;
specifier|private
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|int
name|batch
init|=
literal|1
decl_stmt|;
specifier|private
name|long
name|startTime
init|=
literal|0
decl_stmt|;
specifier|private
name|long
name|endTime
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
comment|/**    * Default constructor    */
specifier|public
name|ScannerModel
parameter_list|()
block|{}
comment|/**    * Constructor    * @param startRow the start key of the row-range    * @param endRow the end key of the row-range    * @param columns the columns to scan    * @param batch the number of values to return in batch    * @param endTime the upper bound on timestamps of values of interest    * (values with timestamps later than this are excluded)    */
specifier|public
name|ScannerModel
parameter_list|(
name|byte
index|[]
name|startRow
parameter_list|,
name|byte
index|[]
name|endRow
parameter_list|,
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
parameter_list|,
name|int
name|batch
parameter_list|,
name|long
name|endTime
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|startRow
operator|=
name|startRow
expr_stmt|;
name|this
operator|.
name|endRow
operator|=
name|endRow
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
name|this
operator|.
name|batch
operator|=
name|batch
expr_stmt|;
name|this
operator|.
name|endTime
operator|=
name|endTime
expr_stmt|;
block|}
comment|/**    * Constructor     * @param startRow the start key of the row-range    * @param endRow the end key of the row-range    * @param columns the columns to scan    * @param batch the number of values to return in batch    * @param startTime the lower bound on timestamps of values of interest    * (values with timestamps earlier than this are excluded)    * @param endTime the upper bound on timestamps of values of interest    * (values with timestamps later than this are excluded)    */
specifier|public
name|ScannerModel
parameter_list|(
name|byte
index|[]
name|startRow
parameter_list|,
name|byte
index|[]
name|endRow
parameter_list|,
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
parameter_list|,
name|int
name|batch
parameter_list|,
name|long
name|startTime
parameter_list|,
name|long
name|endTime
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|startRow
operator|=
name|startRow
expr_stmt|;
name|this
operator|.
name|endRow
operator|=
name|endRow
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
name|this
operator|.
name|batch
operator|=
name|batch
expr_stmt|;
name|this
operator|.
name|startTime
operator|=
name|startTime
expr_stmt|;
name|this
operator|.
name|endTime
operator|=
name|endTime
expr_stmt|;
block|}
comment|/**    * Add a column to the column set    * @param column the column name, as&lt;column&gt;(:&lt;qualifier&gt;)?    */
specifier|public
name|void
name|addColumn
parameter_list|(
name|byte
index|[]
name|column
parameter_list|)
block|{
name|columns
operator|.
name|add
argument_list|(
name|column
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return true if a start row was specified    */
specifier|public
name|boolean
name|hasStartRow
parameter_list|()
block|{
return|return
operator|!
name|Bytes
operator|.
name|equals
argument_list|(
name|startRow
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
return|;
block|}
comment|/**    * @return start row    */
annotation|@
name|XmlAttribute
specifier|public
name|byte
index|[]
name|getStartRow
parameter_list|()
block|{
return|return
name|startRow
return|;
block|}
comment|/**    * @return true if an end row was specified    */
specifier|public
name|boolean
name|hasEndRow
parameter_list|()
block|{
return|return
operator|!
name|Bytes
operator|.
name|equals
argument_list|(
name|endRow
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
return|;
block|}
comment|/**    * @return end row    */
annotation|@
name|XmlAttribute
specifier|public
name|byte
index|[]
name|getEndRow
parameter_list|()
block|{
return|return
name|endRow
return|;
block|}
comment|/**    * @return list of columns of interest, or empty for all    */
annotation|@
name|XmlAttribute
argument_list|(
name|name
operator|=
literal|"column"
argument_list|)
specifier|public
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|getColumns
parameter_list|()
block|{
return|return
name|columns
return|;
block|}
comment|/**    * @return the number of cells to return in batch    */
annotation|@
name|XmlAttribute
specifier|public
name|int
name|getBatch
parameter_list|()
block|{
return|return
name|batch
return|;
block|}
comment|/**    * @return the lower bound on timestamps of items of interest    */
annotation|@
name|XmlAttribute
specifier|public
name|long
name|getStartTime
parameter_list|()
block|{
return|return
name|startTime
return|;
block|}
comment|/**    * @return the upper bound on timestamps of items of interest    */
annotation|@
name|XmlAttribute
specifier|public
name|long
name|getEndTime
parameter_list|()
block|{
return|return
name|endTime
return|;
block|}
comment|/**    * @param startRow start row    */
specifier|public
name|void
name|setStartRow
parameter_list|(
name|byte
index|[]
name|startRow
parameter_list|)
block|{
name|this
operator|.
name|startRow
operator|=
name|startRow
expr_stmt|;
block|}
comment|/**    * @param endRow end row    */
specifier|public
name|void
name|setEndRow
parameter_list|(
name|byte
index|[]
name|endRow
parameter_list|)
block|{
name|this
operator|.
name|endRow
operator|=
name|endRow
expr_stmt|;
block|}
comment|/**    * @param batch the number of cells to return in batch    */
specifier|public
name|void
name|setBatch
parameter_list|(
name|int
name|batch
parameter_list|)
block|{
name|this
operator|.
name|batch
operator|=
name|batch
expr_stmt|;
block|}
comment|/**    * @param startTime the lower bound on timestamps of values of interest    */
specifier|public
name|void
name|setStartTime
parameter_list|(
name|long
name|startTime
parameter_list|)
block|{
name|this
operator|.
name|startTime
operator|=
name|startTime
expr_stmt|;
block|}
comment|/**    * @param endTime the upper bound on timestamps of values of interest    */
specifier|public
name|void
name|setEndTime
parameter_list|(
name|long
name|endTime
parameter_list|)
block|{
name|this
operator|.
name|endTime
operator|=
name|endTime
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|createProtobufOutput
parameter_list|()
block|{
name|Scanner
operator|.
name|Builder
name|builder
init|=
name|Scanner
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Bytes
operator|.
name|equals
argument_list|(
name|startRow
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
condition|)
block|{
name|builder
operator|.
name|setStartRow
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|startRow
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Bytes
operator|.
name|equals
argument_list|(
name|endRow
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
condition|)
block|{
name|builder
operator|.
name|setEndRow
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|endRow
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|byte
index|[]
name|column
range|:
name|columns
control|)
block|{
name|builder
operator|.
name|addColumns
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|column
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
if|if
condition|(
name|startTime
operator|!=
literal|0
condition|)
block|{
name|builder
operator|.
name|setStartTime
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|endTime
operator|!=
literal|0
condition|)
block|{
name|builder
operator|.
name|setEndTime
argument_list|(
name|endTime
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setBatch
argument_list|(
name|getBatch
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
operator|.
name|toByteArray
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|IProtobufWrapper
name|getObjectFromMessage
parameter_list|(
name|byte
index|[]
name|message
parameter_list|)
throws|throws
name|IOException
block|{
name|Scanner
operator|.
name|Builder
name|builder
init|=
name|Scanner
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|mergeFrom
argument_list|(
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|builder
operator|.
name|hasStartRow
argument_list|()
condition|)
block|{
name|startRow
operator|=
name|builder
operator|.
name|getStartRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|builder
operator|.
name|hasEndRow
argument_list|()
condition|)
block|{
name|endRow
operator|=
name|builder
operator|.
name|getEndRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|ByteString
name|column
range|:
name|builder
operator|.
name|getColumnsList
argument_list|()
control|)
block|{
name|addColumn
argument_list|(
name|column
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|builder
operator|.
name|hasBatch
argument_list|()
condition|)
block|{
name|batch
operator|=
name|builder
operator|.
name|getBatch
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|builder
operator|.
name|hasStartTime
argument_list|()
condition|)
block|{
name|startTime
operator|=
name|builder
operator|.
name|getStartTime
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|builder
operator|.
name|hasEndTime
argument_list|()
condition|)
block|{
name|endTime
operator|=
name|builder
operator|.
name|getEndTime
argument_list|()
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
block|}
end_class

end_unit

