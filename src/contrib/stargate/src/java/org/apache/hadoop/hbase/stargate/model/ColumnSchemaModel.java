begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2009 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|stargate
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAnyAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_class
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"ColumnSchema"
argument_list|)
annotation|@
name|XmlType
argument_list|(
name|propOrder
operator|=
block|{
literal|"name"
block|}
argument_list|)
specifier|public
class|class
name|ColumnSchemaModel
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|static
name|QName
name|BLOCKCACHE
init|=
operator|new
name|QName
argument_list|(
name|HColumnDescriptor
operator|.
name|BLOCKCACHE
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|QName
name|BLOCKSIZE
init|=
operator|new
name|QName
argument_list|(
name|HColumnDescriptor
operator|.
name|BLOCKSIZE
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|QName
name|BLOOMFILTER
init|=
operator|new
name|QName
argument_list|(
name|HColumnDescriptor
operator|.
name|BLOOMFILTER
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|QName
name|COMPRESSION
init|=
operator|new
name|QName
argument_list|(
name|HColumnDescriptor
operator|.
name|COMPRESSION
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|QName
name|IN_MEMORY
init|=
operator|new
name|QName
argument_list|(
name|HConstants
operator|.
name|IN_MEMORY
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|QName
name|TTL
init|=
operator|new
name|QName
argument_list|(
name|HColumnDescriptor
operator|.
name|TTL
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|QName
name|VERSIONS
init|=
operator|new
name|QName
argument_list|(
name|HConstants
operator|.
name|VERSIONS
argument_list|)
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|QName
argument_list|,
name|Object
argument_list|>
name|attrs
init|=
operator|new
name|HashMap
argument_list|<
name|QName
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|ColumnSchemaModel
parameter_list|()
block|{}
specifier|public
name|void
name|addAttribute
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|attrs
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
name|name
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getAttribute
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|attrs
operator|.
name|get
argument_list|(
operator|new
name|QName
argument_list|(
name|name
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * @return the column name    */
annotation|@
name|XmlAttribute
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**    * @return the map for holding unspecified (user) attributes    */
annotation|@
name|XmlAnyAttribute
specifier|public
name|Map
argument_list|<
name|QName
argument_list|,
name|Object
argument_list|>
name|getAny
parameter_list|()
block|{
return|return
name|attrs
return|;
block|}
comment|/**    * @param the table name    */
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
comment|/* (non-Javadoc)    * @see java.lang.Object#toString()    */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"{ NAME => '"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|QName
argument_list|,
name|Object
argument_list|>
name|e
range|:
name|attrs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" => '"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|" }"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|// getters and setters for common schema attributes
comment|// cannot be standard bean type getters and setters, otherwise this would
comment|// confuse JAXB
specifier|public
name|boolean
name|__getBlockcache
parameter_list|()
block|{
name|Object
name|o
init|=
name|attrs
operator|.
name|get
argument_list|(
name|BLOCKCACHE
argument_list|)
decl_stmt|;
return|return
name|o
operator|!=
literal|null
condition|?
name|Boolean
operator|.
name|valueOf
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
else|:
name|HColumnDescriptor
operator|.
name|DEFAULT_BLOCKCACHE
return|;
block|}
specifier|public
name|int
name|__getBlocksize
parameter_list|()
block|{
name|Object
name|o
init|=
name|attrs
operator|.
name|get
argument_list|(
name|BLOCKSIZE
argument_list|)
decl_stmt|;
return|return
name|o
operator|!=
literal|null
condition|?
name|Integer
operator|.
name|valueOf
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
else|:
name|HColumnDescriptor
operator|.
name|DEFAULT_BLOCKSIZE
return|;
block|}
specifier|public
name|boolean
name|__getBloomfilter
parameter_list|()
block|{
name|Object
name|o
init|=
name|attrs
operator|.
name|get
argument_list|(
name|BLOOMFILTER
argument_list|)
decl_stmt|;
return|return
name|o
operator|!=
literal|null
condition|?
name|Boolean
operator|.
name|valueOf
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
else|:
name|HColumnDescriptor
operator|.
name|DEFAULT_BLOOMFILTER
return|;
block|}
specifier|public
name|String
name|__getCompression
parameter_list|()
block|{
name|Object
name|o
init|=
name|attrs
operator|.
name|get
argument_list|(
name|COMPRESSION
argument_list|)
decl_stmt|;
return|return
name|o
operator|!=
literal|null
condition|?
name|o
operator|.
name|toString
argument_list|()
else|:
name|HColumnDescriptor
operator|.
name|DEFAULT_COMPRESSION
return|;
block|}
specifier|public
name|boolean
name|__getInMemory
parameter_list|()
block|{
name|Object
name|o
init|=
name|attrs
operator|.
name|get
argument_list|(
name|IN_MEMORY
argument_list|)
decl_stmt|;
return|return
name|o
operator|!=
literal|null
condition|?
name|Boolean
operator|.
name|valueOf
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
else|:
name|HColumnDescriptor
operator|.
name|DEFAULT_IN_MEMORY
return|;
block|}
specifier|public
name|int
name|__getTTL
parameter_list|()
block|{
name|Object
name|o
init|=
name|attrs
operator|.
name|get
argument_list|(
name|TTL
argument_list|)
decl_stmt|;
return|return
name|o
operator|!=
literal|null
condition|?
name|Integer
operator|.
name|valueOf
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
else|:
name|HColumnDescriptor
operator|.
name|DEFAULT_TTL
return|;
block|}
specifier|public
name|int
name|__getVersions
parameter_list|()
block|{
name|Object
name|o
init|=
name|attrs
operator|.
name|get
argument_list|(
name|VERSIONS
argument_list|)
decl_stmt|;
return|return
name|o
operator|!=
literal|null
condition|?
name|Integer
operator|.
name|valueOf
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
else|:
name|HColumnDescriptor
operator|.
name|DEFAULT_VERSIONS
return|;
block|}
specifier|public
name|void
name|__setBlocksize
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|attrs
operator|.
name|put
argument_list|(
name|BLOCKSIZE
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|__setBlockcache
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|attrs
operator|.
name|put
argument_list|(
name|BLOCKCACHE
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|__setBloomfilter
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|attrs
operator|.
name|put
argument_list|(
name|BLOOMFILTER
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|__setCompression
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|attrs
operator|.
name|put
argument_list|(
name|COMPRESSION
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|__setInMemory
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|attrs
operator|.
name|put
argument_list|(
name|IN_MEMORY
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|__setTTL
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|attrs
operator|.
name|put
argument_list|(
name|TTL
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|__setVersions
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|attrs
operator|.
name|put
argument_list|(
name|VERSIONS
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

