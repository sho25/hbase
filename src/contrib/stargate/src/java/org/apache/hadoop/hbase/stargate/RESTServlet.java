begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2009 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|stargate
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTableInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTablePool
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|server
operator|.
name|impl
operator|.
name|container
operator|.
name|servlet
operator|.
name|ServletAdaptor
import|;
end_import

begin_comment
comment|/**  * Singleton class encapsulating global REST servlet state and functions.  */
end_comment

begin_class
specifier|public
class|class
name|RESTServlet
extends|extends
name|ServletAdaptor
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_AGE
init|=
literal|60
operator|*
literal|60
operator|*
literal|4
decl_stmt|;
comment|// 4 hours
specifier|public
specifier|static
specifier|final
name|String
name|VERSION_STRING
init|=
literal|"0.0.1"
decl_stmt|;
specifier|private
specifier|static
name|RESTServlet
name|instance
decl_stmt|;
specifier|private
specifier|final
name|HBaseConfiguration
name|conf
decl_stmt|;
specifier|private
specifier|final
name|HTablePool
name|pool
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|maxAgeMap
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
comment|/**    * @return the RESTServlet singleton instance    * @throws IOException    */
specifier|public
specifier|synchronized
specifier|static
name|RESTServlet
name|getInstance
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
name|instance
operator|=
operator|new
name|RESTServlet
argument_list|()
expr_stmt|;
block|}
return|return
name|instance
return|;
block|}
comment|/**    * Constructor    * @throws IOException    */
specifier|public
name|RESTServlet
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|conf
operator|=
operator|new
name|HBaseConfiguration
argument_list|()
expr_stmt|;
name|this
operator|.
name|pool
operator|=
operator|new
name|HTablePool
argument_list|(
name|conf
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get a table pool for the given table.    * @return the table pool    */
specifier|protected
name|HTablePool
name|getTablePool
parameter_list|()
block|{
return|return
name|pool
return|;
block|}
comment|/**    * @return the servlet's global HBase configuration    */
specifier|protected
name|HBaseConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
comment|/**    * @param tableName the table name    * @return the maximum cache age suitable for use with this table, in    *  seconds    * @throws IOException    */
specifier|public
name|int
name|getMaxAge
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|Integer
name|i
init|=
name|maxAgeMap
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|!=
literal|null
condition|)
block|{
return|return
name|i
operator|.
name|intValue
argument_list|()
return|;
block|}
name|HTableInterface
name|table
init|=
name|pool
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
try|try
block|{
name|int
name|maxAge
init|=
name|DEFAULT_MAX_AGE
decl_stmt|;
for|for
control|(
name|HColumnDescriptor
name|family
range|:
name|table
operator|.
name|getTableDescriptor
argument_list|()
operator|.
name|getFamilies
argument_list|()
control|)
block|{
name|int
name|ttl
init|=
name|family
operator|.
name|getTimeToLive
argument_list|()
decl_stmt|;
if|if
condition|(
name|ttl
operator|<
literal|0
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|ttl
operator|<
name|maxAge
condition|)
block|{
name|maxAge
operator|=
name|ttl
expr_stmt|;
block|}
block|}
name|maxAgeMap
operator|.
name|put
argument_list|(
name|tableName
argument_list|,
name|maxAge
argument_list|)
expr_stmt|;
return|return
name|maxAge
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|putTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Signal that a previously calculated maximum cache age has been    * invalidated by a schema change.    * @param tableName the table name    */
specifier|public
name|void
name|invalidateMaxAge
parameter_list|(
name|String
name|tableName
parameter_list|)
block|{
name|maxAgeMap
operator|.
name|remove
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

