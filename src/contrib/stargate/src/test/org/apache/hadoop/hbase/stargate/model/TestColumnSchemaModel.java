begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2009 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|stargate
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_class
specifier|public
class|class
name|TestColumnSchemaModel
extends|extends
name|TestCase
block|{
specifier|protected
specifier|static
specifier|final
name|String
name|COLUMN_NAME
init|=
literal|"testcolumn"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|boolean
name|BLOCKCACHE
init|=
literal|true
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|BLOCKSIZE
init|=
literal|16384
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|boolean
name|BLOOMFILTER
init|=
literal|false
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|COMPRESSION
init|=
literal|"GZ"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|boolean
name|IN_MEMORY
init|=
literal|false
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|TTL
init|=
literal|86400
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|VERSIONS
init|=
literal|1
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|AS_XML
init|=
literal|"<ColumnSchema name=\"testcolumn\""
operator|+
literal|" BLOCKSIZE=\"16384\""
operator|+
literal|" BLOOMFILTER=\"false\""
operator|+
literal|" BLOCKCACHE=\"true\""
operator|+
literal|" COMPRESSION=\"GZ\""
operator|+
literal|" VERSIONS=\"1\""
operator|+
literal|" TTL=\"86400\""
operator|+
literal|" IN_MEMORY=\"false\"/>"
decl_stmt|;
specifier|private
name|JAXBContext
name|context
decl_stmt|;
specifier|public
name|TestColumnSchemaModel
parameter_list|()
throws|throws
name|JAXBException
block|{
name|super
argument_list|()
expr_stmt|;
name|context
operator|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|ColumnSchemaModel
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
name|ColumnSchemaModel
name|buildTestModel
parameter_list|()
block|{
name|ColumnSchemaModel
name|model
init|=
operator|new
name|ColumnSchemaModel
argument_list|()
decl_stmt|;
name|model
operator|.
name|setName
argument_list|(
name|COLUMN_NAME
argument_list|)
expr_stmt|;
name|model
operator|.
name|__setBlockcache
argument_list|(
name|BLOCKCACHE
argument_list|)
expr_stmt|;
name|model
operator|.
name|__setBlocksize
argument_list|(
name|BLOCKSIZE
argument_list|)
expr_stmt|;
name|model
operator|.
name|__setBloomfilter
argument_list|(
name|BLOOMFILTER
argument_list|)
expr_stmt|;
name|model
operator|.
name|__setCompression
argument_list|(
name|COMPRESSION
argument_list|)
expr_stmt|;
name|model
operator|.
name|__setInMemory
argument_list|(
name|IN_MEMORY
argument_list|)
expr_stmt|;
name|model
operator|.
name|__setTTL
argument_list|(
name|TTL
argument_list|)
expr_stmt|;
name|model
operator|.
name|__setVersions
argument_list|(
name|VERSIONS
argument_list|)
expr_stmt|;
return|return
name|model
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
name|String
name|toXML
parameter_list|(
name|ColumnSchemaModel
name|model
parameter_list|)
throws|throws
name|JAXBException
block|{
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|context
operator|.
name|createMarshaller
argument_list|()
operator|.
name|marshal
argument_list|(
name|model
argument_list|,
name|writer
argument_list|)
expr_stmt|;
return|return
name|writer
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|ColumnSchemaModel
name|fromXML
parameter_list|(
name|String
name|xml
parameter_list|)
throws|throws
name|JAXBException
block|{
return|return
operator|(
name|ColumnSchemaModel
operator|)
name|context
operator|.
name|createUnmarshaller
argument_list|()
operator|.
name|unmarshal
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|void
name|checkModel
parameter_list|(
name|ColumnSchemaModel
name|model
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|model
operator|.
name|getName
argument_list|()
argument_list|,
name|COLUMN_NAME
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|model
operator|.
name|__getBlockcache
argument_list|()
argument_list|,
name|BLOCKCACHE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|model
operator|.
name|__getBlocksize
argument_list|()
argument_list|,
name|BLOCKSIZE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|model
operator|.
name|__getBloomfilter
argument_list|()
argument_list|,
name|BLOOMFILTER
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|model
operator|.
name|__getCompression
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|COMPRESSION
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|model
operator|.
name|__getInMemory
argument_list|()
argument_list|,
name|IN_MEMORY
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|model
operator|.
name|__getTTL
argument_list|()
argument_list|,
name|TTL
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|model
operator|.
name|__getVersions
argument_list|()
argument_list|,
name|VERSIONS
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testBuildModel
parameter_list|()
throws|throws
name|Exception
block|{
name|checkModel
argument_list|(
name|buildTestModel
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testFromXML
parameter_list|()
throws|throws
name|Exception
block|{
name|checkModel
argument_list|(
name|fromXML
argument_list|(
name|AS_XML
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

