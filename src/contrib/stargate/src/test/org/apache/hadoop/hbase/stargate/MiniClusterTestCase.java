begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2009 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|stargate
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|LocalHBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MiniHBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MiniZooKeeperCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletHolder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|spi
operator|.
name|container
operator|.
name|servlet
operator|.
name|ServletContainer
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_class
specifier|public
class|class
name|MiniClusterTestCase
extends|extends
name|TestCase
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MiniClusterTestCase
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MIMETYPE_BINARY
init|=
literal|"application/octet-stream"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MIMETYPE_JSON
init|=
literal|"application/json"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MIMETYPE_PLAIN
init|=
literal|"text/plain"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MIMETYPE_PROTOBUF
init|=
literal|"application/x-protobuf"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MIMETYPE_XML
init|=
literal|"text/xml"
decl_stmt|;
comment|// use a nonstandard port
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_TEST_PORT
init|=
literal|38080
decl_stmt|;
specifier|protected
specifier|static
name|HBaseConfiguration
name|conf
init|=
operator|new
name|HBaseConfiguration
argument_list|()
decl_stmt|;
specifier|protected
specifier|static
name|MiniZooKeeperCluster
name|zooKeeperCluster
decl_stmt|;
specifier|protected
specifier|static
name|MiniHBaseCluster
name|hbaseCluster
decl_stmt|;
specifier|protected
specifier|static
name|MiniDFSCluster
name|dfsCluster
decl_stmt|;
specifier|protected
specifier|static
name|File
name|testDir
decl_stmt|;
specifier|protected
specifier|static
name|int
name|testServletPort
decl_stmt|;
specifier|protected
specifier|static
name|Server
name|server
decl_stmt|;
specifier|public
specifier|static
name|boolean
name|isMiniClusterRunning
parameter_list|()
block|{
return|return
name|server
operator|!=
literal|null
return|;
block|}
specifier|private
specifier|static
name|void
name|startDFS
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|dfsCluster
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"MiniDFSCluster already running"
argument_list|)
expr_stmt|;
return|return;
block|}
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"test.build.data"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"build/test/data"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|FileSystem
name|testFS
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|testFS
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|testFS
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|testDir
operator|=
operator|new
name|File
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|dfsCluster
operator|=
operator|new
name|MiniDFSCluster
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
operator|(
name|String
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
name|FileSystem
name|filesystem
init|=
name|dfsCluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.defaultFS"
argument_list|,
name|filesystem
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|parentdir
init|=
name|filesystem
operator|.
name|getHomeDirectory
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|HBASE_DIR
argument_list|,
name|parentdir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|filesystem
operator|.
name|mkdirs
argument_list|(
name|parentdir
argument_list|)
expr_stmt|;
name|FSUtils
operator|.
name|setVersion
argument_list|(
name|filesystem
argument_list|,
name|parentdir
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"started MiniDFSCluster in "
operator|+
name|testDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|stopDFS
parameter_list|()
block|{
if|if
condition|(
name|dfsCluster
operator|!=
literal|null
condition|)
try|try
block|{
name|dfsCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|dfsCluster
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|startZooKeeper
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|zooKeeperCluster
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"ZooKeeper already running"
argument_list|)
expr_stmt|;
return|return;
block|}
name|zooKeeperCluster
operator|=
operator|new
name|MiniZooKeeperCluster
argument_list|()
expr_stmt|;
name|zooKeeperCluster
operator|.
name|startup
argument_list|(
name|testDir
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"started "
operator|+
name|zooKeeperCluster
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|stopZooKeeper
parameter_list|()
block|{
if|if
condition|(
name|zooKeeperCluster
operator|!=
literal|null
condition|)
try|try
block|{
name|zooKeeperCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|zooKeeperCluster
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|startHBase
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|hbaseCluster
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"MiniHBaseCluster already running"
argument_list|)
expr_stmt|;
return|return;
block|}
name|hbaseCluster
operator|=
operator|new
name|MiniHBaseCluster
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// opening the META table ensures that cluster is running
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|HConstants
operator|.
name|META_TABLE_NAME
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"started MiniHBaseCluster"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|stopHBase
parameter_list|()
block|{
if|if
condition|(
name|hbaseCluster
operator|!=
literal|null
condition|)
try|try
block|{
for|for
control|(
name|LocalHBaseCluster
operator|.
name|RegionServerThread
name|regionThread
range|:
name|hbaseCluster
operator|.
name|getRegionThreads
argument_list|()
control|)
block|{
name|regionThread
operator|.
name|getRegionServer
argument_list|()
operator|.
name|abort
argument_list|()
expr_stmt|;
block|}
name|hbaseCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|hbaseCluster
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|startServletContainer
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"ServletContainer already running"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// set up the Jersey servlet container for Jetty
name|ServletHolder
name|sh
init|=
operator|new
name|ServletHolder
argument_list|(
name|ServletContainer
operator|.
name|class
argument_list|)
decl_stmt|;
name|sh
operator|.
name|setInitParameter
argument_list|(
literal|"com.sun.jersey.config.property.resourceConfigClass"
argument_list|,
name|ResourceConfig
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|sh
operator|.
name|setInitParameter
argument_list|(
literal|"com.sun.jersey.config.property.packages"
argument_list|,
literal|"jetty"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"configured "
operator|+
name|ServletContainer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// set up Jetty and run the embedded server
name|testServletPort
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"test.stargate.port"
argument_list|,
name|DEFAULT_TEST_PORT
argument_list|)
expr_stmt|;
name|server
operator|=
operator|new
name|Server
argument_list|(
name|testServletPort
argument_list|)
expr_stmt|;
name|server
operator|.
name|setSendServerVersion
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|server
operator|.
name|setSendDateHeader
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// set up context
name|Context
name|context
init|=
operator|new
name|Context
argument_list|(
name|server
argument_list|,
literal|"/"
argument_list|,
name|Context
operator|.
name|SESSIONS
argument_list|)
decl_stmt|;
name|context
operator|.
name|addServlet
argument_list|(
name|sh
argument_list|,
literal|"/*"
argument_list|)
expr_stmt|;
comment|// start the server
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"started "
operator|+
name|server
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" on port "
operator|+
name|testServletPort
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|stopServletContainer
parameter_list|()
block|{
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
try|try
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
name|server
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|startMiniCluster
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|startDFS
argument_list|()
expr_stmt|;
name|startZooKeeper
argument_list|()
expr_stmt|;
name|startHBase
argument_list|()
expr_stmt|;
name|startServletContainer
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|stopServletContainer
argument_list|()
expr_stmt|;
name|stopHBase
argument_list|()
expr_stmt|;
name|stopZooKeeper
argument_list|()
expr_stmt|;
name|stopDFS
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
specifier|static
name|void
name|stopMiniCluster
parameter_list|()
block|{
name|stopServletContainer
argument_list|()
expr_stmt|;
name|stopHBase
argument_list|()
expr_stmt|;
name|stopZooKeeper
argument_list|()
expr_stmt|;
name|stopDFS
argument_list|()
expr_stmt|;
block|}
class|class
name|MiniClusterShutdownThread
extends|extends
name|Thread
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|stopMiniCluster
argument_list|()
expr_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"test.build.data"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"build/test/data"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// start the mini cluster if it is not running yet
if|if
condition|(
operator|!
name|isMiniClusterRunning
argument_list|()
condition|)
block|{
name|startMiniCluster
argument_list|()
expr_stmt|;
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|addShutdownHook
argument_list|(
operator|new
name|MiniClusterShutdownThread
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// tell HttpClient to dump request and response headers into the test
comment|// log at DEBUG level
name|Logger
operator|.
name|getLogger
argument_list|(
literal|"httpclient.wire.header"
argument_list|)
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

