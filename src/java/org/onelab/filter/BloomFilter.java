begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright (c) 2005, European Commission project OneLab under contract 034819 (http://www.one-lab.org)  * All rights reserved.  * Redistribution and use in source and binary forms, with or   * without modification, are permitted provided that the following   * conditions are met:  *  - Redistributions of source code must retain the above copyright   *    notice, this list of conditions and the following disclaimer.  *  - Redistributions in binary form must reproduce the above copyright   *    notice, this list of conditions and the following disclaimer in   *    the documentation and/or other materials provided with the distribution.  *  - Neither the name of the University Catholique de Louvain - UCL  *    nor the names of its contributors may be used to endorse or   *    promote products derived from this software without specific prior   *    written permission.  *      * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS   * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS   * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE   * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,   * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;   * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT   * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN   * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   * POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_package
package|package
name|org
operator|.
name|onelab
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Implements a<i>Bloom filter</i>, as defined by Bloom in 1970.  *<p>  * The Bloom filter is a data structure that was introduced in 1970 and that has been adopted by   * the networking research community in the past decade thanks to the bandwidth efficiencies that it  * offers for the transmission of set membership information between networked hosts.  A sender encodes   * the information into a bit vector, the Bloom filter, that is more compact than a conventional   * representation. Computation and space costs for construction are linear in the number of elements.    * The receiver uses the filter to test whether various elements are members of the set. Though the   * filter will occasionally return a false positive, it will never return a false negative. When creating   * the filter, the sender can choose its desired point in a trade-off between the false positive rate and the size.   *   * contract<a href="http://www.one-lab.org">European Commission One-Lab Project 034819</a>.  *  * @version 1.0 - 2 Feb. 07  *   * @see org.onelab.filter.Filter The general behavior of a filter  *   * @see<a href="http://portal.acm.org/citation.cfm?id=362692&dl=ACM&coll=portal">Space/Time Trade-Offs in Hash Coding with Allowable Errors</a>  */
end_comment

begin_class
specifier|public
class|class
name|BloomFilter
extends|extends
name|Filter
block|{
comment|/** The bit vector. */
name|boolean
index|[]
name|vector
decl_stmt|;
comment|/** Default constructor - use with readFields */
specifier|public
name|BloomFilter
parameter_list|()
block|{}
comment|/**    * Constructor    * @param vectorSize The vector size of<i>this</i> filter.    * @param nbHash The number of hash function to consider.    */
specifier|public
name|BloomFilter
parameter_list|(
name|int
name|vectorSize
parameter_list|,
name|int
name|nbHash
parameter_list|)
block|{
name|super
argument_list|(
name|vectorSize
argument_list|,
name|nbHash
argument_list|)
expr_stmt|;
name|vector
operator|=
operator|new
name|boolean
index|[
name|this
operator|.
name|vectorSize
index|]
expr_stmt|;
block|}
comment|//end constructor
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|Key
name|key
parameter_list|)
block|{
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"key cannot be null"
argument_list|)
throw|;
block|}
name|int
index|[]
name|h
init|=
name|hash
operator|.
name|hash
argument_list|(
name|key
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nbHash
condition|;
name|i
operator|++
control|)
block|{
name|vector
index|[
name|h
index|[
name|i
index|]
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|//end add()
annotation|@
name|Override
specifier|public
name|void
name|and
parameter_list|(
name|Filter
name|filter
parameter_list|)
block|{
if|if
condition|(
name|filter
operator|==
literal|null
operator|||
operator|!
operator|(
name|filter
operator|instanceof
name|BloomFilter
operator|)
operator|||
name|filter
operator|.
name|vectorSize
operator|!=
name|this
operator|.
name|vectorSize
operator|||
name|filter
operator|.
name|nbHash
operator|!=
name|this
operator|.
name|nbHash
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"filters cannot be and-ed"
argument_list|)
throw|;
block|}
name|BloomFilter
name|bf
init|=
operator|(
name|BloomFilter
operator|)
name|filter
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vectorSize
condition|;
name|i
operator|++
control|)
block|{
name|this
operator|.
name|vector
index|[
name|i
index|]
operator|&=
name|bf
operator|.
name|vector
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
comment|//end and()
annotation|@
name|Override
specifier|public
name|boolean
name|membershipTest
parameter_list|(
name|Key
name|key
parameter_list|)
block|{
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"key cannot be null"
argument_list|)
throw|;
block|}
name|int
index|[]
name|h
init|=
name|hash
operator|.
name|hash
argument_list|(
name|key
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nbHash
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|vector
index|[
name|h
index|[
name|i
index|]
index|]
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|//end memberhsipTest()
annotation|@
name|Override
specifier|public
name|void
name|not
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vectorSize
condition|;
name|i
operator|++
control|)
block|{
name|vector
index|[
name|i
index|]
operator|=
operator|!
name|vector
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
comment|//end not()
annotation|@
name|Override
specifier|public
name|void
name|or
parameter_list|(
name|Filter
name|filter
parameter_list|)
block|{
if|if
condition|(
name|filter
operator|==
literal|null
operator|||
operator|!
operator|(
name|filter
operator|instanceof
name|BloomFilter
operator|)
operator|||
name|filter
operator|.
name|vectorSize
operator|!=
name|this
operator|.
name|vectorSize
operator|||
name|filter
operator|.
name|nbHash
operator|!=
name|this
operator|.
name|nbHash
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"filters cannot be or-ed"
argument_list|)
throw|;
block|}
name|BloomFilter
name|bf
init|=
operator|(
name|BloomFilter
operator|)
name|filter
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vectorSize
condition|;
name|i
operator|++
control|)
block|{
name|this
operator|.
name|vector
index|[
name|i
index|]
operator||=
name|bf
operator|.
name|vector
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
comment|//end or()
annotation|@
name|Override
specifier|public
name|void
name|xor
parameter_list|(
name|Filter
name|filter
parameter_list|)
block|{
if|if
condition|(
name|filter
operator|==
literal|null
operator|||
operator|!
operator|(
name|filter
operator|instanceof
name|BloomFilter
operator|)
operator|||
name|filter
operator|.
name|vectorSize
operator|!=
name|this
operator|.
name|vectorSize
operator|||
name|filter
operator|.
name|nbHash
operator|!=
name|this
operator|.
name|nbHash
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"filters cannot be xor-ed"
argument_list|)
throw|;
block|}
name|BloomFilter
name|bf
init|=
operator|(
name|BloomFilter
operator|)
name|filter
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vectorSize
condition|;
name|i
operator|++
control|)
block|{
name|this
operator|.
name|vector
index|[
name|i
index|]
operator|=
operator|(
name|this
operator|.
name|vector
index|[
name|i
index|]
operator|&&
operator|!
name|bf
operator|.
name|vector
index|[
name|i
index|]
operator|)
operator|||
operator|(
operator|!
name|this
operator|.
name|vector
index|[
name|i
index|]
operator|&&
name|bf
operator|.
name|vector
index|[
name|i
index|]
operator|)
expr_stmt|;
block|}
block|}
comment|//and xor()
comment|/** Returns a String representation of<i>this</i> Bloom filter. */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|res
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vectorSize
condition|;
name|i
operator|++
control|)
block|{
name|res
operator|.
name|append
argument_list|(
name|vector
index|[
name|i
index|]
condition|?
literal|"1"
else|:
literal|"0"
argument_list|)
expr_stmt|;
block|}
return|return
name|res
operator|.
name|toString
argument_list|()
return|;
block|}
comment|//end toString()
comment|/** Returns a shallow copy of<i>this</i> Bloom filter. */
annotation|@
name|Override
specifier|public
name|Object
name|clone
parameter_list|()
block|{
name|BloomFilter
name|bf
init|=
operator|new
name|BloomFilter
argument_list|(
name|vectorSize
argument_list|,
name|nbHash
argument_list|)
decl_stmt|;
name|bf
operator|.
name|or
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|bf
return|;
block|}
comment|//end clone()
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|this
operator|.
name|compareTo
argument_list|(
name|o
argument_list|)
operator|==
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|super
operator|.
name|hashCode
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vector
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|^=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|vector
index|[
name|i
index|]
argument_list|)
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|// Writable
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vector
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
name|vector
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|vector
operator|=
operator|new
name|boolean
index|[
name|vectorSize
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vector
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|vector
index|[
name|i
index|]
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Comparable
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|int
name|result
init|=
name|super
operator|.
name|compareTo
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|BloomFilter
name|other
init|=
operator|(
name|BloomFilter
operator|)
name|o
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|result
operator|==
literal|0
operator|&&
name|i
operator|<
name|vector
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|=
operator|(
name|vector
index|[
name|i
index|]
operator|==
name|other
operator|.
name|vector
index|[
name|i
index|]
condition|?
literal|0
else|:
operator|(
name|vector
index|[
name|i
index|]
condition|?
literal|1
else|:
operator|-
literal|1
operator|)
operator|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|// end compareTo
block|}
end_class

begin_comment
comment|//end class
end_comment

end_unit

