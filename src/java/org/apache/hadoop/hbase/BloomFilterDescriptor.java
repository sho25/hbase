begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_comment
comment|/**   * Supplied as a parameter to HColumnDescriptor to specify what kind of  * bloom filter to use for a column, and its configuration parameters.  *   * There is no way to automatically determine the vector size and the number of  * hash functions to use. In particular, bloom filters are very sensitive to the  * number of elements inserted into them. For HBase, the number of entries  * depends on the size of the data stored in the column. Currently the default  * region size is 64MB, so the number of entries is approximately   * 64MB / (average value size for column).  *   * If m denotes the number of bits in the Bloom filter (vectorSize),  * n denotes the number of elements inserted into the Bloom filter and  * k represents the number of hash functions used (nbHash), then according to  * Broder and Mitzenmacher,  *   * ( http://www.eecs.harvard.edu/~michaelm/NEWWORK/postscripts/BloomFilterSurvey.pdf )  *   * the probability of false positives is minimized when k is approximately  * m/n ln(2).  *   */
end_comment

begin_class
specifier|public
class|class
name|BloomFilterDescriptor
implements|implements
name|WritableComparable
block|{
specifier|private
specifier|static
specifier|final
name|double
name|DEFAULT_NUMBER_OF_HASH_FUNCTIONS
init|=
literal|4.0
decl_stmt|;
comment|/*    * Specify the kind of bloom filter that will be instantiated    */
comment|/** The type of bloom filter */
specifier|public
specifier|static
enum|enum
name|BloomFilterType
block|{
comment|/**<i>Bloom filter</i>, as defined by Bloom in 1970. */
name|BLOOMFILTER
block|,
comment|/**      *<i>Counting Bloom filter</i>, as defined by Fan et al. in a ToN 2000 paper.      */
name|COUNTING_BLOOMFILTER
block|,
comment|/**      *<i>Retouched Bloom filter</i>, as defined in the CoNEXT 2006 paper.      */
name|RETOUCHED_BLOOMFILTER
block|}
comment|/** Default constructor - used in conjunction with Writable */
specifier|public
name|BloomFilterDescriptor
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**    * Creates a BloomFilterDescriptor for the specified type of filter, fixes    * the number of hash functions to 4 and computes a vector size using:    *     * vectorSize = ceil((4 * n) / ln(2))    *     * @param type    * @param numberOfEntries    */
specifier|public
name|BloomFilterDescriptor
parameter_list|(
specifier|final
name|BloomFilterType
name|type
parameter_list|,
specifier|final
name|int
name|numberOfEntries
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|BLOOMFILTER
case|:
case|case
name|COUNTING_BLOOMFILTER
case|:
case|case
name|RETOUCHED_BLOOMFILTER
case|:
name|this
operator|.
name|filterType
operator|=
name|type
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid bloom filter type: "
operator|+
name|type
argument_list|)
throw|;
block|}
name|this
operator|.
name|nbHash
operator|=
operator|(
name|int
operator|)
name|DEFAULT_NUMBER_OF_HASH_FUNCTIONS
expr_stmt|;
name|this
operator|.
name|vectorSize
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
operator|(
name|DEFAULT_NUMBER_OF_HASH_FUNCTIONS
operator|*
operator|(
literal|1.0
operator|*
name|numberOfEntries
operator|)
operator|)
operator|/
name|Math
operator|.
name|log
argument_list|(
literal|2.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param type The kind of bloom filter to use.    * @param vectorSize The vector size of<i>this</i> filter.    * @param nbHash The number of hash functions to consider.    */
specifier|public
name|BloomFilterDescriptor
parameter_list|(
specifier|final
name|BloomFilterType
name|type
parameter_list|,
specifier|final
name|int
name|vectorSize
parameter_list|,
specifier|final
name|int
name|nbHash
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|BLOOMFILTER
case|:
case|case
name|COUNTING_BLOOMFILTER
case|:
case|case
name|RETOUCHED_BLOOMFILTER
case|:
name|this
operator|.
name|filterType
operator|=
name|type
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid bloom filter type: "
operator|+
name|type
argument_list|)
throw|;
block|}
name|this
operator|.
name|vectorSize
operator|=
name|vectorSize
expr_stmt|;
name|this
operator|.
name|nbHash
operator|=
name|nbHash
expr_stmt|;
block|}
name|BloomFilterType
name|filterType
decl_stmt|;
name|int
name|vectorSize
decl_stmt|;
name|int
name|nbHash
decl_stmt|;
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|value
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|filterType
condition|)
block|{
case|case
name|BLOOMFILTER
case|:
name|value
operator|.
name|append
argument_list|(
literal|"standard"
argument_list|)
expr_stmt|;
break|break;
case|case
name|COUNTING_BLOOMFILTER
case|:
name|value
operator|.
name|append
argument_list|(
literal|"counting"
argument_list|)
expr_stmt|;
break|break;
case|case
name|RETOUCHED_BLOOMFILTER
case|:
name|value
operator|.
name|append
argument_list|(
literal|"retouched"
argument_list|)
expr_stmt|;
block|}
name|value
operator|.
name|append
argument_list|(
literal|"(vector size="
argument_list|)
expr_stmt|;
name|value
operator|.
name|append
argument_list|(
name|vectorSize
argument_list|)
expr_stmt|;
name|value
operator|.
name|append
argument_list|(
literal|", number hashes="
argument_list|)
expr_stmt|;
name|value
operator|.
name|append
argument_list|(
name|nbHash
argument_list|)
expr_stmt|;
name|value
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|value
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|compareTo
argument_list|(
name|obj
argument_list|)
operator|==
literal|0
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|this
operator|.
name|filterType
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|^=
name|Integer
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|vectorSize
argument_list|)
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|^=
name|Integer
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|nbHash
argument_list|)
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
comment|// Writable
comment|/** {@inheritDoc} */
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|ordinal
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|this
operator|.
name|filterType
operator|=
name|BloomFilterType
operator|.
name|values
argument_list|()
index|[
name|ordinal
index|]
expr_stmt|;
name|vectorSize
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|nbHash
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|filterType
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|vectorSize
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|nbHash
argument_list|)
expr_stmt|;
block|}
comment|// Comparable
comment|/** {@inheritDoc} */
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|BloomFilterDescriptor
name|other
init|=
operator|(
name|BloomFilterDescriptor
operator|)
name|o
decl_stmt|;
name|int
name|result
init|=
name|this
operator|.
name|filterType
operator|.
name|ordinal
argument_list|()
operator|-
name|other
operator|.
name|filterType
operator|.
name|ordinal
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|0
condition|)
block|{
name|result
operator|=
name|this
operator|.
name|vectorSize
operator|-
name|other
operator|.
name|vectorSize
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|==
literal|0
condition|)
block|{
name|result
operator|=
name|this
operator|.
name|nbHash
operator|-
name|other
operator|.
name|nbHash
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

