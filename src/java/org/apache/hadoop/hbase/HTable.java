begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|RowFilterInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|StopRowFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|WhileMatchRowFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|BatchUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|HbaseMapWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ImmutableBytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Writables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_comment
comment|/**  * Used to communicate with a single HBase table  */
end_comment

begin_class
specifier|public
class|class
name|HTable
implements|implements
name|HConstants
block|{
specifier|protected
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|HConnection
name|connection
decl_stmt|;
specifier|protected
specifier|final
name|Text
name|tableName
decl_stmt|;
specifier|protected
specifier|final
name|long
name|pause
decl_stmt|;
specifier|protected
specifier|final
name|int
name|numRetries
decl_stmt|;
specifier|protected
name|Random
name|rand
decl_stmt|;
specifier|protected
name|AtomicReference
argument_list|<
name|BatchUpdate
argument_list|>
name|batch
decl_stmt|;
specifier|protected
specifier|volatile
name|boolean
name|tableDoesNotExist
decl_stmt|;
comment|// For row mutation operations
comment|/**    * Creates an object to access a HBase table    *     * @param conf configuration object    * @param tableName name of the table    * @throws IOException    */
specifier|public
name|HTable
parameter_list|(
name|HBaseConfiguration
name|conf
parameter_list|,
name|Text
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|connection
operator|=
name|HConnectionManager
operator|.
name|getConnection
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|pause
operator|=
name|conf
operator|.
name|getLong
argument_list|(
literal|"hbase.client.pause"
argument_list|,
literal|10
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|this
operator|.
name|numRetries
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.client.retries.number"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|this
operator|.
name|rand
operator|=
operator|new
name|Random
argument_list|()
expr_stmt|;
name|this
operator|.
name|batch
operator|=
operator|new
name|AtomicReference
argument_list|<
name|BatchUpdate
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|connection
operator|.
name|locateRegion
argument_list|(
name|tableName
argument_list|,
name|EMPTY_START_ROW
argument_list|)
expr_stmt|;
block|}
comment|/**    * Find region location hosting passed row using cached info    * @param row Row to find.    * @return Location of row.    */
name|HRegionLocation
name|getRegionLocation
parameter_list|(
name|Text
name|row
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|this
operator|.
name|connection
operator|.
name|locateRegion
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|row
argument_list|)
return|;
block|}
comment|/**    * Find region location hosting passed row    * @param row Row to find.    * @param reload If true do not use cache, otherwise bypass.    * @return Location of row.    */
name|HRegionLocation
name|getRegionLocation
parameter_list|(
name|Text
name|row
parameter_list|,
name|boolean
name|reload
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|reload
condition|?
name|this
operator|.
name|connection
operator|.
name|relocateRegion
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|row
argument_list|)
else|:
name|this
operator|.
name|connection
operator|.
name|locateRegion
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|)
return|;
block|}
comment|/** @return the connection */
specifier|public
name|HConnection
name|getConnection
parameter_list|()
block|{
return|return
name|connection
return|;
block|}
comment|/**    * Verifies that no update is in progress    */
specifier|public
specifier|synchronized
name|void
name|checkUpdateInProgress
parameter_list|()
block|{
name|updateInProgress
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/*    * Checks to see if an update is in progress    *     * @param updateMustBeInProgress    *    If true, an update must be in progress. An IllegalStateException will be    *    thrown if not.    *        *    If false, an update must not be in progress. An IllegalStateException    *    will be thrown if an update is in progress.    */
specifier|private
name|void
name|updateInProgress
parameter_list|(
name|boolean
name|updateMustBeInProgress
parameter_list|)
block|{
if|if
condition|(
name|updateMustBeInProgress
condition|)
block|{
if|if
condition|(
name|batch
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"no update in progress"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|batch
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"update in progress"
argument_list|)
throw|;
block|}
block|}
block|}
comment|/** @return the table name */
specifier|public
name|Text
name|getTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
return|;
block|}
comment|/**    * @return table metadata     * @throws IOException    */
specifier|public
name|HTableDescriptor
name|getMetadata
parameter_list|()
throws|throws
name|IOException
block|{
name|HTableDescriptor
index|[]
name|metas
init|=
name|this
operator|.
name|connection
operator|.
name|listTables
argument_list|()
decl_stmt|;
name|HTableDescriptor
name|result
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|metas
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|metas
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
condition|)
block|{
name|result
operator|=
name|metas
index|[
name|i
index|]
expr_stmt|;
break|break;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**    * Gets the starting row key for every region in the currently open table    * @return Array of region starting row keys    * @throws IOException    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"null"
argument_list|)
specifier|public
name|Text
index|[]
name|getStartKeys
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Text
argument_list|>
name|keyList
init|=
operator|new
name|ArrayList
argument_list|<
name|Text
argument_list|>
argument_list|()
decl_stmt|;
name|long
name|scannerId
init|=
operator|-
literal|1L
decl_stmt|;
name|Text
name|startRow
init|=
operator|new
name|Text
argument_list|(
name|tableName
operator|.
name|toString
argument_list|()
operator|+
literal|",,999999999999999"
argument_list|)
decl_stmt|;
name|HRegionLocation
name|metaLocation
init|=
literal|null
decl_stmt|;
name|HRegionInterface
name|server
decl_stmt|;
comment|// scan over the each meta region
do|do
block|{
try|try
block|{
comment|// turn the start row into a location
name|metaLocation
operator|=
name|connection
operator|.
name|locateRegion
argument_list|(
name|META_TABLE_NAME
argument_list|,
name|startRow
argument_list|)
expr_stmt|;
comment|// connect to the server hosting the .META. region
name|server
operator|=
name|connection
operator|.
name|getHRegionConnection
argument_list|(
name|metaLocation
operator|.
name|getServerAddress
argument_list|()
argument_list|)
expr_stmt|;
comment|// open a scanner over the meta region
name|scannerId
operator|=
name|server
operator|.
name|openScanner
argument_list|(
name|metaLocation
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|COLUMN_FAMILY_ARRAY
argument_list|,
name|tableName
argument_list|,
name|LATEST_TIMESTAMP
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// iterate through the scanner, accumulating unique table names
name|SCANNER_LOOP
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|HbaseMapWritable
name|values
init|=
name|server
operator|.
name|next
argument_list|(
name|scannerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|==
literal|null
operator|||
name|values
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
break|break;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Writable
argument_list|,
name|Writable
argument_list|>
name|e
range|:
name|values
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|HStoreKey
name|key
init|=
operator|(
name|HStoreKey
operator|)
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|getColumn
argument_list|()
operator|.
name|equals
argument_list|(
name|COL_REGIONINFO
argument_list|)
condition|)
block|{
name|HRegionInfo
name|info
init|=
operator|new
name|HRegionInfo
argument_list|()
decl_stmt|;
name|info
operator|=
operator|(
name|HRegionInfo
operator|)
name|Writables
operator|.
name|getWritable
argument_list|(
operator|(
operator|(
name|ImmutableBytesWritable
operator|)
name|e
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|get
argument_list|()
argument_list|,
name|info
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|info
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
condition|)
block|{
break|break
name|SCANNER_LOOP
break|;
block|}
if|if
condition|(
name|info
operator|.
name|isOffline
argument_list|()
condition|)
block|{
continue|continue
name|SCANNER_LOOP
continue|;
block|}
if|if
condition|(
name|info
operator|.
name|isSplit
argument_list|()
condition|)
block|{
continue|continue
name|SCANNER_LOOP
continue|;
block|}
name|keyList
operator|.
name|add
argument_list|(
name|info
operator|.
name|getStartKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// close that remote scanner
name|server
operator|.
name|close
argument_list|(
name|scannerId
argument_list|)
expr_stmt|;
comment|// advance the startRow to the end key of the current region
name|startRow
operator|=
name|metaLocation
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEndKey
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// need retry logic?
throw|throw
name|e
throw|;
block|}
block|}
do|while
condition|(
name|startRow
operator|.
name|compareTo
argument_list|(
name|EMPTY_START_ROW
argument_list|)
operator|!=
literal|0
condition|)
do|;
name|Text
index|[]
name|arr
init|=
operator|new
name|Text
index|[
name|keyList
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keyList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|arr
index|[
name|i
index|]
operator|=
name|keyList
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|arr
return|;
block|}
comment|/**     * Get a single value for the specified row and column    *    * @param row row key    * @param column column name    * @return value for specified row/column    * @throws IOException    */
specifier|public
name|byte
index|[]
name|get
parameter_list|(
name|Text
name|row
parameter_list|,
specifier|final
name|Text
name|column
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getRegionServerWithRetries
argument_list|(
operator|new
name|ServerCallable
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|row
argument_list|)
block|{
specifier|public
name|byte
index|[]
name|call
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|server
operator|.
name|get
argument_list|(
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|row
argument_list|,
name|column
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**     * Get the specified number of versions of the specified row and column    *     * @param row         - row key    * @param column      - column name    * @param numVersions - number of versions to retrieve    * @return            - array byte values    * @throws IOException    */
specifier|public
name|byte
index|[]
index|[]
name|get
parameter_list|(
specifier|final
name|Text
name|row
parameter_list|,
specifier|final
name|Text
name|column
parameter_list|,
specifier|final
name|int
name|numVersions
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
index|[]
name|values
init|=
literal|null
decl_stmt|;
name|values
operator|=
name|getRegionServerWithRetries
argument_list|(
operator|new
name|ServerCallable
argument_list|<
name|byte
index|[]
index|[]
argument_list|>
argument_list|(
name|row
argument_list|)
block|{
specifier|public
name|byte
index|[]
index|[]
name|call
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|server
operator|.
name|get
argument_list|(
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|numVersions
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
condition|)
block|{
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|bytes
init|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|bytes
operator|.
name|add
argument_list|(
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|bytes
operator|.
name|toArray
argument_list|(
operator|new
name|byte
index|[
name|values
operator|.
name|length
index|]
index|[]
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**     * Get the specified number of versions of the specified row and column with    * the specified timestamp.    *    * @param row         - row key    * @param column      - column name    * @param timestamp   - timestamp    * @param numVersions - number of versions to retrieve    * @return            - array of values that match the above criteria    * @throws IOException    */
specifier|public
name|byte
index|[]
index|[]
name|get
parameter_list|(
specifier|final
name|Text
name|row
parameter_list|,
specifier|final
name|Text
name|column
parameter_list|,
specifier|final
name|long
name|timestamp
parameter_list|,
specifier|final
name|int
name|numVersions
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
index|[]
name|values
init|=
literal|null
decl_stmt|;
name|values
operator|=
name|getRegionServerWithRetries
argument_list|(
operator|new
name|ServerCallable
argument_list|<
name|byte
index|[]
index|[]
argument_list|>
argument_list|(
name|row
argument_list|)
block|{
specifier|public
name|byte
index|[]
index|[]
name|call
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|server
operator|.
name|get
argument_list|(
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|timestamp
argument_list|,
name|numVersions
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
condition|)
block|{
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|bytes
init|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|bytes
operator|.
name|add
argument_list|(
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|bytes
operator|.
name|toArray
argument_list|(
operator|new
name|byte
index|[
name|values
operator|.
name|length
index|]
index|[]
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**     * Get all the data for the specified row at the latest timestamp    *     * @param row row key    * @return Map of columns to values.  Map is empty if row does not exist.    * @throws IOException    */
specifier|public
name|SortedMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|getRow
parameter_list|(
name|Text
name|row
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getRow
argument_list|(
name|row
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
return|;
block|}
comment|/**     * Get all the data for the specified row at a specified timestamp    *     * @param row row key    * @param ts timestamp    * @return Map of columns to values.  Map is empty if row does not exist.    * @throws IOException    */
specifier|public
name|SortedMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|getRow
parameter_list|(
specifier|final
name|Text
name|row
parameter_list|,
specifier|final
name|long
name|ts
parameter_list|)
throws|throws
name|IOException
block|{
name|HbaseMapWritable
name|value
init|=
literal|null
decl_stmt|;
name|value
operator|=
name|getRegionServerWithRetries
argument_list|(
operator|new
name|ServerCallable
argument_list|<
name|HbaseMapWritable
argument_list|>
argument_list|(
name|row
argument_list|)
block|{
specifier|public
name|HbaseMapWritable
name|call
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|server
operator|.
name|getRow
argument_list|(
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|row
argument_list|,
name|ts
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|SortedMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|results
init|=
operator|new
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|value
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Writable
argument_list|,
name|Writable
argument_list|>
name|e
range|:
name|value
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|HStoreKey
name|key
init|=
operator|(
name|HStoreKey
operator|)
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|results
operator|.
name|put
argument_list|(
name|key
operator|.
name|getColumn
argument_list|()
argument_list|,
operator|(
operator|(
name|ImmutableBytesWritable
operator|)
name|e
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|results
return|;
block|}
comment|/**     * Get a scanner on the current table starting at the specified row.    * Return the specified columns.    *    * @param columns columns to scan. If column name is a column family, all    * columns of the specified column family are returned.  Its also possible    * to pass a regex in the column qualifier. A column qualifier is judged to    * be a regex if it contains at least one of the following characters:    *<code>\+|^&*$[]]}{)(</code>.    * @param startRow starting row in table to scan    * @return scanner    * @throws IOException    */
specifier|public
name|HScannerInterface
name|obtainScanner
parameter_list|(
name|Text
index|[]
name|columns
parameter_list|,
name|Text
name|startRow
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|obtainScanner
argument_list|(
name|columns
argument_list|,
name|startRow
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**     * Get a scanner on the current table starting at the specified row.    * Return the specified columns.    *    * @param columns columns to scan. If column name is a column family, all    * columns of the specified column family are returned.  Its also possible    * to pass a regex in the column qualifier. A column qualifier is judged to    * be a regex if it contains at least one of the following characters:    *<code>\+|^&*$[]]}{)(</code>.    * @param startRow starting row in table to scan    * @param timestamp only return results whose timestamp<= this value    * @return scanner    * @throws IOException    */
specifier|public
name|HScannerInterface
name|obtainScanner
parameter_list|(
name|Text
index|[]
name|columns
parameter_list|,
name|Text
name|startRow
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|obtainScanner
argument_list|(
name|columns
argument_list|,
name|startRow
argument_list|,
name|timestamp
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**     * Get a scanner on the current table starting at the specified row.    * Return the specified columns.    *    * @param columns columns to scan. If column name is a column family, all    * columns of the specified column family are returned.  Its also possible    * to pass a regex in the column qualifier. A column qualifier is judged to    * be a regex if it contains at least one of the following characters:    *<code>\+|^&*$[]]}{)(</code>.    * @param startRow starting row in table to scan    * @param filter a row filter using row-key regexp and/or column data filter.    * @return scanner    * @throws IOException    */
specifier|public
name|HScannerInterface
name|obtainScanner
parameter_list|(
name|Text
index|[]
name|columns
parameter_list|,
name|Text
name|startRow
parameter_list|,
name|RowFilterInterface
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|obtainScanner
argument_list|(
name|columns
argument_list|,
name|startRow
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|filter
argument_list|)
return|;
block|}
comment|/**     * Get a scanner on the current table starting at the specified row and    * ending just before<code>stopRow<code>.    * Return the specified columns.    *    * @param columns columns to scan. If column name is a column family, all    * columns of the specified column family are returned.  Its also possible    * to pass a regex in the column qualifier. A column qualifier is judged to    * be a regex if it contains at least one of the following characters:    *<code>\+|^&*$[]]}{)(</code>.    * @param startRow starting row in table to scan    * @param stopRow Row to stop scanning on. Once we hit this row we stop    * returning values; i.e. we return the row before this one but not the    *<code>stopRow</code> itself.    * @return scanner    * @throws IOException    */
specifier|public
name|HScannerInterface
name|obtainScanner
parameter_list|(
specifier|final
name|Text
index|[]
name|columns
parameter_list|,
specifier|final
name|Text
name|startRow
parameter_list|,
specifier|final
name|Text
name|stopRow
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|obtainScanner
argument_list|(
name|columns
argument_list|,
name|startRow
argument_list|,
name|stopRow
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
return|;
block|}
comment|/**     * Get a scanner on the current table starting at the specified row and    * ending just before<code>stopRow<code>.    * Return the specified columns.    *    * @param columns columns to scan. If column name is a column family, all    * columns of the specified column family are returned.  Its also possible    * to pass a regex in the column qualifier. A column qualifier is judged to    * be a regex if it contains at least one of the following characters:    *<code>\+|^&*$[]]}{)(</code>.    * @param startRow starting row in table to scan    * @param stopRow Row to stop scanning on. Once we hit this row we stop    * returning values; i.e. we return the row before this one but not the    *<code>stopRow</code> itself.    * @param timestamp only return results whose timestamp<= this value    * @return scanner    * @throws IOException    */
specifier|public
name|HScannerInterface
name|obtainScanner
parameter_list|(
specifier|final
name|Text
index|[]
name|columns
parameter_list|,
specifier|final
name|Text
name|startRow
parameter_list|,
specifier|final
name|Text
name|stopRow
parameter_list|,
specifier|final
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|obtainScanner
argument_list|(
name|columns
argument_list|,
name|startRow
argument_list|,
name|timestamp
argument_list|,
operator|new
name|WhileMatchRowFilter
argument_list|(
operator|new
name|StopRowFilter
argument_list|(
name|stopRow
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**     * Get a scanner on the current table starting at the specified row.    * Return the specified columns.    *    * @param columns columns to scan. If column name is a column family, all    * columns of the specified column family are returned.  Its also possible    * to pass a regex in the column qualifier. A column qualifier is judged to    * be a regex if it contains at least one of the following characters:    *<code>\+|^&*$[]]}{)(</code>.    * @param startRow starting row in table to scan    * @param timestamp only return results whose timestamp<= this value    * @param filter a row filter using row-key regexp and/or column data filter.    * @return scanner    * @throws IOException    */
specifier|public
name|HScannerInterface
name|obtainScanner
parameter_list|(
name|Text
index|[]
name|columns
parameter_list|,
name|Text
name|startRow
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|RowFilterInterface
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|ClientScanner
argument_list|(
name|columns
argument_list|,
name|startRow
argument_list|,
name|timestamp
argument_list|,
name|filter
argument_list|)
return|;
block|}
comment|/**     * Start an atomic row insertion/update.  No changes are committed until the     * call to commit() returns. A call to abort() will abandon any updates in    * progress.    *     *<p>    * Example:    *<br>    *<pre><span style="font-family: monospace;">    * long lockid = table.startUpdate(new Text(article.getName()));    * for (File articleInfo: article.listFiles(new NonDirectories())) {    *   String article = null;    *   try {    *     DataInputStream in = new DataInputStream(new FileInputStream(articleInfo));    *     article = in.readUTF();    *   } catch (IOException e) {    *     // Input error - abandon update    *     table.abort(lockid);    *     throw e;    *   }    *   try {    *     table.put(lockid, columnName(articleInfo.getName()), article.getBytes());    *   } catch (RuntimeException e) {    *     // Put failed - abandon update    *     table.abort(lockid);    *     throw e;    *   }    * }    * table.commit(lockid);    *</span></pre>    *    *     * @param row Name of row to start update against.  Note, choose row names    * with care.  Rows are sorted lexicographically (comparison is done    * using {@link Text#compareTo(Object)}.  If your keys are numeric,    * lexicographic sorting means that 46 sorts AFTER 450 (If you want to use    * numerics for keys, zero-pad).    * @return Row lock id..    * @see #commit(long)    * @see #commit(long, long)    * @see #abort(long)    */
annotation|@
name|Deprecated
specifier|public
specifier|synchronized
name|long
name|startUpdate
parameter_list|(
specifier|final
name|Text
name|row
parameter_list|)
block|{
name|updateInProgress
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|batch
operator|.
name|set
argument_list|(
operator|new
name|BatchUpdate
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
comment|/**     * Update a value for the specified column.    * Runs {@link #abort(long)} if exception thrown.    *    * @param lockid lock id returned from startUpdate    * @param column column whose value is being set    * @param val new value for column.  Cannot be null.    */
annotation|@
name|Deprecated
specifier|public
name|void
name|put
parameter_list|(
name|long
name|lockid
parameter_list|,
name|Text
name|column
parameter_list|,
name|byte
name|val
index|[]
parameter_list|)
block|{
if|if
condition|(
name|lockid
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid lock id!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"value cannot be null"
argument_list|)
throw|;
block|}
name|updateInProgress
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|batch
operator|.
name|get
argument_list|()
operator|.
name|put
argument_list|(
name|column
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
comment|/**     * Update a value for the specified column.    * Runs {@link #abort(long)} if exception thrown.    *    * @param lockid lock id returned from startUpdate    * @param column column whose value is being set    * @param val new value for column.  Cannot be null.    * @throws IOException throws this if the writable can't be    * converted into a byte array     */
annotation|@
name|Deprecated
specifier|public
name|void
name|put
parameter_list|(
name|long
name|lockid
parameter_list|,
name|Text
name|column
parameter_list|,
name|Writable
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|put
argument_list|(
name|lockid
argument_list|,
name|column
argument_list|,
name|Writables
operator|.
name|getBytes
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**     * Delete the value for a column.    * Deletes the cell whose row/column/commit-timestamp match those of the    * delete.    * @param lockid lock id returned from startUpdate    * @param column name of column whose value is to be deleted    */
annotation|@
name|Deprecated
specifier|public
name|void
name|delete
parameter_list|(
name|long
name|lockid
parameter_list|,
name|Text
name|column
parameter_list|)
block|{
if|if
condition|(
name|lockid
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid lock id!"
argument_list|)
throw|;
block|}
name|updateInProgress
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|batch
operator|.
name|get
argument_list|()
operator|.
name|delete
argument_list|(
name|column
argument_list|)
expr_stmt|;
block|}
comment|/**     * Delete all cells that match the passed row and column.    * @param row Row to update    * @param column name of column whose value is to be deleted    * @throws IOException     */
specifier|public
name|void
name|deleteAll
parameter_list|(
specifier|final
name|Text
name|row
parameter_list|,
specifier|final
name|Text
name|column
parameter_list|)
throws|throws
name|IOException
block|{
name|deleteAll
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|LATEST_TIMESTAMP
argument_list|)
expr_stmt|;
block|}
comment|/**     * Delete all cells that match the passed row and column and whose    * timestamp is equal-to or older than the passed timestamp.    * @param row Row to update    * @param column name of column whose value is to be deleted    * @param ts Delete all cells of the same timestamp or older.    * @throws IOException     */
specifier|public
name|void
name|deleteAll
parameter_list|(
specifier|final
name|Text
name|row
parameter_list|,
specifier|final
name|Text
name|column
parameter_list|,
specifier|final
name|long
name|ts
parameter_list|)
throws|throws
name|IOException
block|{
name|getRegionServerWithRetries
argument_list|(
operator|new
name|ServerCallable
argument_list|<
name|Boolean
argument_list|>
argument_list|(
name|row
argument_list|)
block|{
specifier|public
name|Boolean
name|call
parameter_list|()
throws|throws
name|IOException
block|{
name|server
operator|.
name|deleteAll
argument_list|(
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|ts
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Completely delete the row's cells of the same timestamp or older.    *    * @param row Key of the row you want to completely delete.    * @param ts Timestamp of cells to delete    * @throws IOException    */
specifier|public
name|void
name|deleteAll
parameter_list|(
specifier|final
name|Text
name|row
parameter_list|,
specifier|final
name|long
name|ts
parameter_list|)
throws|throws
name|IOException
block|{
name|getRegionServerWithRetries
argument_list|(
operator|new
name|ServerCallable
argument_list|<
name|Boolean
argument_list|>
argument_list|(
name|row
argument_list|)
block|{
specifier|public
name|Boolean
name|call
parameter_list|()
throws|throws
name|IOException
block|{
name|server
operator|.
name|deleteAll
argument_list|(
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|row
argument_list|,
name|ts
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Completely delete the row's cells.    *    * @param row Key of the row you want to completely delete.    * @throws IOException    */
specifier|public
name|void
name|deleteAll
parameter_list|(
specifier|final
name|Text
name|row
parameter_list|)
throws|throws
name|IOException
block|{
name|deleteAll
argument_list|(
name|row
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
expr_stmt|;
block|}
comment|/**    * Delete all cells for a row with matching column family with timestamps    * less than or equal to<i>timestamp</i>.    *    * @param row The row to operate on    * @param family The column family to match    * @param timestamp Timestamp to match    * @throws IOException    */
specifier|public
name|void
name|deleteFamily
parameter_list|(
specifier|final
name|Text
name|row
parameter_list|,
specifier|final
name|Text
name|family
parameter_list|,
specifier|final
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOException
block|{
name|getRegionServerWithRetries
argument_list|(
operator|new
name|ServerCallable
argument_list|<
name|Boolean
argument_list|>
argument_list|(
name|row
argument_list|)
block|{
specifier|public
name|Boolean
name|call
parameter_list|()
throws|throws
name|IOException
block|{
name|server
operator|.
name|deleteFamily
argument_list|(
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Delete all cells for a row with matching column family at all timestamps.    *    * @param row The row to operate on    * @param family The column family to match    * @throws IOException    */
specifier|public
name|void
name|deleteFamily
parameter_list|(
specifier|final
name|Text
name|row
parameter_list|,
specifier|final
name|Text
name|family
parameter_list|)
throws|throws
name|IOException
block|{
name|deleteFamily
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
expr_stmt|;
block|}
comment|/**     * Abort a row mutation.    *     * This method should be called only when an update has been started and it    * is determined that the update should not be committed.    *     * Releases resources being held by the update in progress.    *    * @param lockid lock id returned from startUpdate    */
annotation|@
name|Deprecated
specifier|public
specifier|synchronized
name|void
name|abort
parameter_list|(
name|long
name|lockid
parameter_list|)
block|{
if|if
condition|(
name|lockid
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid lock id!"
argument_list|)
throw|;
block|}
name|batch
operator|.
name|set
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**     * Finalize a row mutation.    *     * When this method is specified, we pass the server a value that says use    * the 'latest' timestamp.  If we are doing a put, on the server-side, cells    * will be given the servers's current timestamp.  If the we are commiting    * deletes, then delete removes the most recently modified cell of stipulated    * column.    *     * @see #commit(long, long)    *     * @param lockid lock id returned from startUpdate    * @throws IOException    */
annotation|@
name|Deprecated
specifier|public
name|void
name|commit
parameter_list|(
name|long
name|lockid
parameter_list|)
throws|throws
name|IOException
block|{
name|commit
argument_list|(
name|lockid
argument_list|,
name|LATEST_TIMESTAMP
argument_list|)
expr_stmt|;
block|}
comment|/**     * Finalize a row mutation and release any resources associated with the update.    *     * @param lockid lock id returned from startUpdate    * @param timestamp time to associate with the change    * @throws IOException    */
annotation|@
name|Deprecated
specifier|public
name|void
name|commit
parameter_list|(
name|long
name|lockid
parameter_list|,
specifier|final
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOException
block|{
name|updateInProgress
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|lockid
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid lock id!"
argument_list|)
throw|;
block|}
try|try
block|{
name|batch
operator|.
name|get
argument_list|()
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|commit
argument_list|(
name|batch
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|batch
operator|.
name|set
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Commit a BatchUpdate to the table.    */
specifier|public
specifier|synchronized
name|void
name|commit
parameter_list|(
specifier|final
name|BatchUpdate
name|batchUpdate
parameter_list|)
throws|throws
name|IOException
block|{
name|getRegionServerWithRetries
argument_list|(
operator|new
name|ServerCallable
argument_list|<
name|Boolean
argument_list|>
argument_list|(
name|batchUpdate
operator|.
name|getRow
argument_list|()
argument_list|)
block|{
specifier|public
name|Boolean
name|call
parameter_list|()
throws|throws
name|IOException
block|{
name|server
operator|.
name|batchUpdate
argument_list|(
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|batchUpdate
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Implements the scanner interface for the HBase client.    * If there are multiple regions in a table, this scanner will iterate    * through them all.    */
specifier|protected
class|class
name|ClientScanner
implements|implements
name|HScannerInterface
block|{
specifier|private
specifier|final
name|Text
name|EMPTY_COLUMN
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
specifier|private
name|Text
index|[]
name|columns
decl_stmt|;
specifier|private
name|Text
name|startRow
decl_stmt|;
specifier|private
name|long
name|scanTime
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"hiding"
argument_list|)
specifier|private
name|boolean
name|closed
decl_stmt|;
specifier|private
name|HRegionLocation
name|currentRegionLocation
decl_stmt|;
specifier|private
name|HRegionInterface
name|server
decl_stmt|;
specifier|private
name|long
name|scannerId
decl_stmt|;
specifier|private
name|RowFilterInterface
name|filter
decl_stmt|;
specifier|protected
name|ClientScanner
parameter_list|(
name|Text
index|[]
name|columns
parameter_list|,
name|Text
name|startRow
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|RowFilterInterface
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating scanner over "
operator|+
name|tableName
operator|+
literal|" starting at key "
operator|+
name|startRow
argument_list|)
expr_stmt|;
comment|// defaults
name|this
operator|.
name|closed
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|server
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|scannerId
operator|=
operator|-
literal|1L
expr_stmt|;
comment|// save off the simple parameters
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
name|this
operator|.
name|startRow
operator|=
name|startRow
expr_stmt|;
name|this
operator|.
name|scanTime
operator|=
name|timestamp
expr_stmt|;
comment|// save the filter, and make sure that the filter applies to the data
comment|// we're expecting to pull back
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
if|if
condition|(
name|filter
operator|!=
literal|null
condition|)
block|{
name|filter
operator|.
name|validate
argument_list|(
name|columns
argument_list|)
expr_stmt|;
block|}
name|nextScanner
argument_list|()
expr_stmt|;
block|}
comment|/*      * Gets a scanner for the next region.      * Returns false if there are no more scanners.      */
specifier|private
name|boolean
name|nextScanner
parameter_list|()
throws|throws
name|IOException
block|{
comment|// close the previous scanner if it's open
if|if
condition|(
name|this
operator|.
name|scannerId
operator|!=
operator|-
literal|1L
condition|)
block|{
name|this
operator|.
name|server
operator|.
name|close
argument_list|(
name|this
operator|.
name|scannerId
argument_list|)
expr_stmt|;
name|this
operator|.
name|scannerId
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
comment|// if we're at the end of the table, then close and return false
comment|// to stop iterating
if|if
condition|(
name|this
operator|.
name|currentRegionLocation
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Advancing forward from region "
operator|+
name|this
operator|.
name|currentRegionLocation
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|currentRegionLocation
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEndKey
argument_list|()
operator|==
literal|null
operator|||
name|this
operator|.
name|currentRegionLocation
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEndKey
argument_list|()
operator|.
name|equals
argument_list|(
name|EMPTY_TEXT
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"We're at the end of the region, returning."
argument_list|)
expr_stmt|;
name|close
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
name|HRegionLocation
name|oldLocation
init|=
name|this
operator|.
name|currentRegionLocation
decl_stmt|;
name|Text
name|localStartKey
init|=
name|oldLocation
operator|==
literal|null
condition|?
name|startRow
else|:
name|oldLocation
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEndKey
argument_list|()
decl_stmt|;
comment|// advance to the region that starts with the current region's end key
name|LOG
operator|.
name|debug
argument_list|(
literal|"Advancing internal scanner to startKey "
operator|+
name|localStartKey
argument_list|)
expr_stmt|;
name|this
operator|.
name|currentRegionLocation
operator|=
name|getRegionLocation
argument_list|(
name|localStartKey
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"New region: "
operator|+
name|this
operator|.
name|currentRegionLocation
argument_list|)
expr_stmt|;
try|try
block|{
for|for
control|(
name|int
name|tries
init|=
literal|0
init|;
name|tries
operator|<
name|numRetries
condition|;
name|tries
operator|++
control|)
block|{
comment|// connect to the server
name|server
operator|=
name|connection
operator|.
name|getHRegionConnection
argument_list|(
name|this
operator|.
name|currentRegionLocation
operator|.
name|getServerAddress
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
comment|// open a scanner on the region server starting at the
comment|// beginning of the region
name|scannerId
operator|=
name|server
operator|.
name|openScanner
argument_list|(
name|this
operator|.
name|currentRegionLocation
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|this
operator|.
name|columns
argument_list|,
name|localStartKey
argument_list|,
name|scanTime
argument_list|,
name|filter
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|RemoteException
condition|)
block|{
name|e
operator|=
name|RemoteExceptionHandler
operator|.
name|decodeRemoteException
argument_list|(
operator|(
name|RemoteException
operator|)
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tries
operator|==
name|numRetries
operator|-
literal|1
condition|)
block|{
comment|// No more tries
throw|throw
name|e
throw|;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|pause
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
comment|// continue
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"reloading table servers because: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|currentRegionLocation
operator|=
name|getRegionLocation
argument_list|(
name|localStartKey
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|RemoteException
condition|)
block|{
name|e
operator|=
name|RemoteExceptionHandler
operator|.
name|decodeRemoteException
argument_list|(
operator|(
name|RemoteException
operator|)
name|e
argument_list|)
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
return|return
literal|true
return|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|boolean
name|next
parameter_list|(
name|HStoreKey
name|key
parameter_list|,
name|SortedMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|results
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|closed
condition|)
block|{
return|return
literal|false
return|;
block|}
name|HbaseMapWritable
name|values
init|=
literal|null
decl_stmt|;
comment|// Clear the results so we don't inherit any values from any previous
comment|// calls to next.
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
do|do
block|{
name|values
operator|=
name|server
operator|.
name|next
argument_list|(
name|scannerId
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|values
operator|!=
literal|null
operator|&&
name|values
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|&&
name|nextScanner
argument_list|()
condition|)
do|;
if|if
condition|(
name|values
operator|!=
literal|null
operator|&&
name|values
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Writable
argument_list|,
name|Writable
argument_list|>
name|e
range|:
name|values
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|HStoreKey
name|k
init|=
operator|(
name|HStoreKey
operator|)
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|key
operator|.
name|setRow
argument_list|(
name|k
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|key
operator|.
name|setVersion
argument_list|(
name|k
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|key
operator|.
name|setColumn
argument_list|(
name|EMPTY_COLUMN
argument_list|)
expr_stmt|;
name|results
operator|.
name|put
argument_list|(
name|k
operator|.
name|getColumn
argument_list|()
argument_list|,
operator|(
operator|(
name|ImmutableBytesWritable
operator|)
name|e
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|values
operator|==
literal|null
condition|?
literal|false
else|:
name|values
operator|.
name|size
argument_list|()
operator|!=
literal|0
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|scannerId
operator|!=
operator|-
literal|1L
condition|)
block|{
try|try
block|{
name|server
operator|.
name|close
argument_list|(
name|scannerId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|RemoteException
condition|)
block|{
name|e
operator|=
name|RemoteExceptionHandler
operator|.
name|decodeRemoteException
argument_list|(
operator|(
name|RemoteException
operator|)
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|e
operator|instanceof
name|NotServingRegionException
operator|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
name|scannerId
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
name|server
operator|=
literal|null
expr_stmt|;
name|closed
operator|=
literal|true
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|HStoreKey
argument_list|,
name|SortedMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|HStoreKey
argument_list|,
name|SortedMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
argument_list|>
argument_list|()
block|{
name|HStoreKey
name|key
init|=
literal|null
decl_stmt|;
name|SortedMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|value
init|=
literal|null
decl_stmt|;
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
name|boolean
name|hasNext
init|=
literal|false
decl_stmt|;
try|try
block|{
name|this
operator|.
name|key
operator|=
operator|new
name|HStoreKey
argument_list|()
expr_stmt|;
name|this
operator|.
name|value
operator|=
operator|new
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|()
expr_stmt|;
name|hasNext
operator|=
name|ClientScanner
operator|.
name|this
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|hasNext
return|;
block|}
specifier|public
name|Entry
argument_list|<
name|HStoreKey
argument_list|,
name|SortedMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|next
parameter_list|()
block|{
return|return
operator|new
name|Map
operator|.
name|Entry
argument_list|<
name|HStoreKey
argument_list|,
name|SortedMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|HStoreKey
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
specifier|public
name|SortedMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
specifier|public
name|SortedMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|setValue
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|SortedMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
block|}
comment|/**    * Inherits from Callable, used to define the particular actions you would    * like to take with retry logic.    */
specifier|protected
specifier|abstract
class|class
name|ServerCallable
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Callable
argument_list|<
name|T
argument_list|>
block|{
name|HRegionLocation
name|location
decl_stmt|;
name|HRegionInterface
name|server
decl_stmt|;
name|Text
name|row
decl_stmt|;
specifier|protected
name|ServerCallable
parameter_list|(
name|Text
name|row
parameter_list|)
block|{
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
block|}
name|void
name|instantiateServer
parameter_list|(
name|boolean
name|reload
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|location
operator|=
name|getRegionLocation
argument_list|(
name|row
argument_list|,
name|reload
argument_list|)
expr_stmt|;
name|this
operator|.
name|server
operator|=
name|connection
operator|.
name|getHRegionConnection
argument_list|(
name|location
operator|.
name|getServerAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Pass in a ServerCallable with your particular bit of logic defined and     * this method will manage the process of doing retries with timed waits     * and refinds of missing regions.    */
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|T
name|getRegionServerWithRetries
parameter_list|(
name|ServerCallable
argument_list|<
name|T
argument_list|>
name|callable
parameter_list|)
throws|throws
name|IOException
throws|,
name|RuntimeException
block|{
for|for
control|(
name|int
name|tries
init|=
literal|0
init|;
name|tries
operator|<
name|numRetries
condition|;
name|tries
operator|++
control|)
block|{
try|try
block|{
name|callable
operator|.
name|instantiateServer
argument_list|(
name|tries
operator|!=
literal|0
argument_list|)
expr_stmt|;
return|return
name|callable
operator|.
name|call
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|RemoteException
condition|)
block|{
name|e
operator|=
name|RemoteExceptionHandler
operator|.
name|decodeRemoteException
argument_list|(
operator|(
name|RemoteException
operator|)
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tries
operator|==
name|numRetries
operator|-
literal|1
condition|)
block|{
throw|throw
name|e
throw|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"reloading table servers because: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|pause
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// continue
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Deprecated
specifier|public
name|void
name|close
parameter_list|()
block|{
comment|// do nothing...
block|}
block|}
end_class

end_unit

