begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReferenceArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|RowFilterInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|BatchUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|KeyedData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_comment
comment|/**  * Used to communicate with a single HBase table  */
end_comment

begin_class
specifier|public
class|class
name|HTable
implements|implements
name|HConstants
block|{
specifier|protected
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|HConnection
name|connection
decl_stmt|;
specifier|protected
specifier|final
name|Text
name|tableName
decl_stmt|;
specifier|protected
specifier|final
name|long
name|pause
decl_stmt|;
specifier|protected
specifier|final
name|int
name|numRetries
decl_stmt|;
specifier|protected
name|Random
name|rand
decl_stmt|;
specifier|protected
specifier|volatile
name|SortedMap
argument_list|<
name|Text
argument_list|,
name|HRegionLocation
argument_list|>
name|tableServers
decl_stmt|;
specifier|protected
name|BatchUpdate
name|batch
decl_stmt|;
comment|// For row mutation operations
specifier|protected
specifier|volatile
name|long
name|currentLockId
decl_stmt|;
specifier|protected
specifier|volatile
name|Text
name|currentRegion
decl_stmt|;
specifier|protected
specifier|volatile
name|HRegionInterface
name|currentServer
decl_stmt|;
specifier|protected
specifier|volatile
name|long
name|clientid
decl_stmt|;
specifier|protected
specifier|volatile
name|boolean
name|closed
decl_stmt|;
specifier|protected
name|void
name|checkClosed
parameter_list|()
block|{
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"table is closed"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Creates an object to access a HBase table    *     * @param conf configuration object    * @param tableName name of the table    * @throws IOException    */
specifier|public
name|HTable
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Text
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|closed
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|connection
operator|=
name|HConnectionManager
operator|.
name|getConnection
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|pause
operator|=
name|conf
operator|.
name|getLong
argument_list|(
literal|"hbase.client.pause"
argument_list|,
literal|30
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|this
operator|.
name|numRetries
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.client.retries.number"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|this
operator|.
name|rand
operator|=
operator|new
name|Random
argument_list|()
expr_stmt|;
name|tableServers
operator|=
name|connection
operator|.
name|getTableServers
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|this
operator|.
name|batch
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|currentLockId
operator|=
operator|-
literal|1L
expr_stmt|;
name|closed
operator|=
literal|false
expr_stmt|;
block|}
comment|/**    * Find region location hosting passed row using cached info    * @param row Row to find.    * @return Location of row.    */
name|HRegionLocation
name|getRegionLocation
parameter_list|(
name|Text
name|row
parameter_list|)
block|{
name|checkClosed
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableServers
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Must open table first"
argument_list|)
throw|;
block|}
comment|// Only one server will have the row we are looking for
name|Text
name|serverKey
init|=
operator|(
name|this
operator|.
name|tableServers
operator|.
name|containsKey
argument_list|(
name|row
argument_list|)
operator|)
condition|?
name|row
else|:
name|this
operator|.
name|tableServers
operator|.
name|headMap
argument_list|(
name|row
argument_list|)
operator|.
name|lastKey
argument_list|()
decl_stmt|;
return|return
name|this
operator|.
name|tableServers
operator|.
name|get
argument_list|(
name|serverKey
argument_list|)
return|;
block|}
comment|/** @return the connection */
specifier|public
name|HConnection
name|getConnection
parameter_list|()
block|{
name|checkClosed
argument_list|()
expr_stmt|;
return|return
name|connection
return|;
block|}
comment|/**    * Releases resources associated with this table. After calling close(), all    * other methods will throw an IllegalStateException    */
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
block|{
name|closed
operator|=
literal|true
expr_stmt|;
name|tableServers
operator|=
literal|null
expr_stmt|;
name|batch
operator|=
literal|null
expr_stmt|;
name|currentLockId
operator|=
operator|-
literal|1L
expr_stmt|;
name|currentRegion
operator|=
literal|null
expr_stmt|;
name|currentServer
operator|=
literal|null
expr_stmt|;
name|clientid
operator|=
operator|-
literal|1L
expr_stmt|;
name|connection
operator|.
name|close
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verifies that no update is in progress    */
specifier|public
specifier|synchronized
name|void
name|checkUpdateInProgress
parameter_list|()
block|{
if|if
condition|(
name|batch
operator|!=
literal|null
operator|||
name|currentLockId
operator|!=
operator|-
literal|1L
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"update in progress"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Text
name|getTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
return|;
block|}
comment|/**    * Gets the starting row key for every region in the currently open table    * @return Array of region starting row keys    */
specifier|public
name|Text
index|[]
name|getStartKeys
parameter_list|()
block|{
name|checkClosed
argument_list|()
expr_stmt|;
name|Text
index|[]
name|keys
init|=
operator|new
name|Text
index|[
name|tableServers
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Text
name|key
range|:
name|tableServers
operator|.
name|keySet
argument_list|()
control|)
block|{
name|keys
index|[
name|i
operator|++
index|]
operator|=
name|key
expr_stmt|;
block|}
return|return
name|keys
return|;
block|}
comment|/**     * Get a single value for the specified row and column    *    * @param row row key    * @param column column name    * @return value for specified row/column    * @throws IOException    */
specifier|public
name|byte
index|[]
name|get
parameter_list|(
name|Text
name|row
parameter_list|,
name|Text
name|column
parameter_list|)
throws|throws
name|IOException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
name|byte
index|[]
name|value
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|tries
init|=
literal|0
init|;
name|tries
operator|<
name|numRetries
condition|;
name|tries
operator|++
control|)
block|{
name|HRegionLocation
name|r
init|=
name|getRegionLocation
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|HRegionInterface
name|server
init|=
name|connection
operator|.
name|getHRegionConnection
argument_list|(
name|r
operator|.
name|getServerAddress
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|value
operator|=
name|server
operator|.
name|get
argument_list|(
name|r
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|row
argument_list|,
name|column
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|tries
operator|==
name|numRetries
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|RemoteException
condition|)
block|{
name|e
operator|=
name|RemoteExceptionHandler
operator|.
name|decodeRemoteException
argument_list|(
operator|(
name|RemoteException
operator|)
name|e
argument_list|)
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
name|tableServers
operator|=
name|connection
operator|.
name|reloadTableServers
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|this
operator|.
name|pause
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|x
parameter_list|)
block|{
comment|// continue
block|}
block|}
return|return
name|value
return|;
block|}
comment|/**     * Get the specified number of versions of the specified row and column    *     * @param row         - row key    * @param column      - column name    * @param numVersions - number of versions to retrieve    * @return            - array byte values    * @throws IOException    */
specifier|public
name|byte
index|[]
index|[]
name|get
parameter_list|(
name|Text
name|row
parameter_list|,
name|Text
name|column
parameter_list|,
name|int
name|numVersions
parameter_list|)
throws|throws
name|IOException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
name|byte
index|[]
index|[]
name|values
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|tries
init|=
literal|0
init|;
name|tries
operator|<
name|numRetries
condition|;
name|tries
operator|++
control|)
block|{
name|HRegionLocation
name|r
init|=
name|getRegionLocation
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|HRegionInterface
name|server
init|=
name|connection
operator|.
name|getHRegionConnection
argument_list|(
name|r
operator|.
name|getServerAddress
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|values
operator|=
name|server
operator|.
name|get
argument_list|(
name|r
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|numVersions
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|tries
operator|==
name|numRetries
operator|-
literal|1
condition|)
block|{
comment|// No more tries
if|if
condition|(
name|e
operator|instanceof
name|RemoteException
condition|)
block|{
name|e
operator|=
name|RemoteExceptionHandler
operator|.
name|decodeRemoteException
argument_list|(
operator|(
name|RemoteException
operator|)
name|e
argument_list|)
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
name|tableServers
operator|=
name|connection
operator|.
name|reloadTableServers
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|this
operator|.
name|pause
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|x
parameter_list|)
block|{
comment|// continue
block|}
block|}
if|if
condition|(
name|values
operator|!=
literal|null
condition|)
block|{
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|bytes
init|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|bytes
operator|.
name|add
argument_list|(
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|bytes
operator|.
name|toArray
argument_list|(
operator|new
name|byte
index|[
name|values
operator|.
name|length
index|]
index|[]
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**     * Get the specified number of versions of the specified row and column with    * the specified timestamp.    *    * @param row         - row key    * @param column      - column name    * @param timestamp   - timestamp    * @param numVersions - number of versions to retrieve    * @return            - array of values that match the above criteria    * @throws IOException    */
specifier|public
name|byte
index|[]
index|[]
name|get
parameter_list|(
name|Text
name|row
parameter_list|,
name|Text
name|column
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|int
name|numVersions
parameter_list|)
throws|throws
name|IOException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
name|byte
index|[]
index|[]
name|values
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|tries
init|=
literal|0
init|;
name|tries
operator|<
name|numRetries
condition|;
name|tries
operator|++
control|)
block|{
name|HRegionLocation
name|r
init|=
name|getRegionLocation
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|HRegionInterface
name|server
init|=
name|connection
operator|.
name|getHRegionConnection
argument_list|(
name|r
operator|.
name|getServerAddress
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|values
operator|=
name|server
operator|.
name|get
argument_list|(
name|r
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|timestamp
argument_list|,
name|numVersions
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|tries
operator|==
name|numRetries
operator|-
literal|1
condition|)
block|{
comment|// No more tries
if|if
condition|(
name|e
operator|instanceof
name|RemoteException
condition|)
block|{
name|e
operator|=
name|RemoteExceptionHandler
operator|.
name|decodeRemoteException
argument_list|(
operator|(
name|RemoteException
operator|)
name|e
argument_list|)
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
name|tableServers
operator|=
name|connection
operator|.
name|reloadTableServers
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|this
operator|.
name|pause
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|x
parameter_list|)
block|{
comment|// continue
block|}
block|}
if|if
condition|(
name|values
operator|!=
literal|null
condition|)
block|{
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|bytes
init|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|bytes
operator|.
name|add
argument_list|(
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|bytes
operator|.
name|toArray
argument_list|(
operator|new
name|byte
index|[
name|values
operator|.
name|length
index|]
index|[]
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**     * Get all the data for the specified row    *     * @param row         - row key    * @return            - map of colums to values    * @throws IOException    */
specifier|public
name|SortedMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|getRow
parameter_list|(
name|Text
name|row
parameter_list|)
throws|throws
name|IOException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
name|KeyedData
index|[]
name|value
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|tries
init|=
literal|0
init|;
name|tries
operator|<
name|numRetries
condition|;
name|tries
operator|++
control|)
block|{
name|HRegionLocation
name|r
init|=
name|getRegionLocation
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|HRegionInterface
name|server
init|=
name|connection
operator|.
name|getHRegionConnection
argument_list|(
name|r
operator|.
name|getServerAddress
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|value
operator|=
name|server
operator|.
name|getRow
argument_list|(
name|r
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|row
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|tries
operator|==
name|numRetries
operator|-
literal|1
condition|)
block|{
comment|// No more tries
if|if
condition|(
name|e
operator|instanceof
name|RemoteException
condition|)
block|{
name|e
operator|=
name|RemoteExceptionHandler
operator|.
name|decodeRemoteException
argument_list|(
operator|(
name|RemoteException
operator|)
name|e
argument_list|)
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
name|tableServers
operator|=
name|connection
operator|.
name|reloadTableServers
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|this
operator|.
name|pause
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|x
parameter_list|)
block|{
comment|// continue
block|}
block|}
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|results
init|=
operator|new
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|value
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|value
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|results
operator|.
name|put
argument_list|(
name|value
index|[
name|i
index|]
operator|.
name|getKey
argument_list|()
operator|.
name|getColumn
argument_list|()
argument_list|,
name|value
index|[
name|i
index|]
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|results
return|;
block|}
comment|/**     * Get a scanner on the current table starting at the specified row.    * Return the specified columns.    *    * @param columns array of columns to return    * @param startRow starting row in table to scan    * @return scanner    * @throws IOException    */
specifier|public
name|HScannerInterface
name|obtainScanner
parameter_list|(
name|Text
index|[]
name|columns
parameter_list|,
name|Text
name|startRow
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|obtainScanner
argument_list|(
name|columns
argument_list|,
name|startRow
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**     * Get a scanner on the current table starting at the specified row.    * Return the specified columns.    *    * @param columns array of columns to return    * @param startRow starting row in table to scan    * @param timestamp only return results whose timestamp<= this value    * @return scanner    * @throws IOException    */
specifier|public
name|HScannerInterface
name|obtainScanner
parameter_list|(
name|Text
index|[]
name|columns
parameter_list|,
name|Text
name|startRow
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|obtainScanner
argument_list|(
name|columns
argument_list|,
name|startRow
argument_list|,
name|timestamp
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**     * Get a scanner on the current table starting at the specified row.    * Return the specified columns.    *    * @param columns array of columns to return    * @param startRow starting row in table to scan    * @param filter a row filter using row-key regexp and/or column data filter.    * @return scanner    * @throws IOException    */
specifier|public
name|HScannerInterface
name|obtainScanner
parameter_list|(
name|Text
index|[]
name|columns
parameter_list|,
name|Text
name|startRow
parameter_list|,
name|RowFilterInterface
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|obtainScanner
argument_list|(
name|columns
argument_list|,
name|startRow
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|filter
argument_list|)
return|;
block|}
comment|/**     * Get a scanner on the current table starting at the specified row.    * Return the specified columns.    *    * @param columns array of columns to return    * @param startRow starting row in table to scan    * @param timestamp only return results whose timestamp<= this value    * @param filter a row filter using row-key regexp and/or column data filter.    * @return scanner    * @throws IOException    */
specifier|public
name|HScannerInterface
name|obtainScanner
parameter_list|(
name|Text
index|[]
name|columns
parameter_list|,
name|Text
name|startRow
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|RowFilterInterface
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
return|return
operator|new
name|ClientScanner
argument_list|(
name|columns
argument_list|,
name|startRow
argument_list|,
name|timestamp
argument_list|,
name|filter
argument_list|)
return|;
block|}
comment|/**     * Start a batch of row insertions/updates.    *     * No changes are committed until the call to commitBatchUpdate returns.    * A call to abortBatchUpdate will abandon the entire batch.    *    * @param row name of row to be updated    * @return lockid to be used in subsequent put, delete and commit calls    */
specifier|public
specifier|synchronized
name|long
name|startBatchUpdate
parameter_list|(
specifier|final
name|Text
name|row
parameter_list|)
block|{
name|checkClosed
argument_list|()
expr_stmt|;
name|checkUpdateInProgress
argument_list|()
expr_stmt|;
name|batch
operator|=
operator|new
name|BatchUpdate
argument_list|()
expr_stmt|;
return|return
name|batch
operator|.
name|startUpdate
argument_list|(
name|row
argument_list|)
return|;
block|}
comment|/**     * Abort a batch mutation    * @param lockid lock id returned by startBatchUpdate    */
specifier|public
specifier|synchronized
name|void
name|abortBatch
parameter_list|(
specifier|final
name|long
name|lockid
parameter_list|)
block|{
name|checkClosed
argument_list|()
expr_stmt|;
if|if
condition|(
name|batch
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"no batch update in progress"
argument_list|)
throw|;
block|}
if|if
condition|(
name|batch
operator|.
name|getLockid
argument_list|()
operator|!=
name|lockid
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid lock id "
operator|+
name|lockid
argument_list|)
throw|;
block|}
name|batch
operator|=
literal|null
expr_stmt|;
block|}
comment|/**     * Finalize a batch mutation    *    * @param lockid lock id returned by startBatchUpdate    * @throws IOException    */
specifier|public
name|void
name|commitBatch
parameter_list|(
specifier|final
name|long
name|lockid
parameter_list|)
throws|throws
name|IOException
block|{
name|commitBatch
argument_list|(
name|lockid
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**     * Finalize a batch mutation    *    * @param lockid lock id returned by startBatchUpdate    * @param timestamp time to associate with all the changes    * @throws IOException    */
specifier|public
specifier|synchronized
name|void
name|commitBatch
parameter_list|(
specifier|final
name|long
name|lockid
parameter_list|,
specifier|final
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
if|if
condition|(
name|batch
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"no batch update in progress"
argument_list|)
throw|;
block|}
if|if
condition|(
name|batch
operator|.
name|getLockid
argument_list|()
operator|!=
name|lockid
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid lock id "
operator|+
name|lockid
argument_list|)
throw|;
block|}
try|try
block|{
for|for
control|(
name|int
name|tries
init|=
literal|0
init|;
name|tries
operator|<
name|numRetries
condition|;
name|tries
operator|++
control|)
block|{
name|HRegionLocation
name|r
init|=
name|getRegionLocation
argument_list|(
name|batch
operator|.
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
name|HRegionInterface
name|server
init|=
name|connection
operator|.
name|getHRegionConnection
argument_list|(
name|r
operator|.
name|getServerAddress
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|server
operator|.
name|batchUpdate
argument_list|(
name|r
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|timestamp
argument_list|,
name|batch
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|tries
operator|<
name|numRetries
operator|-
literal|1
condition|)
block|{
name|tableServers
operator|=
name|connection
operator|.
name|reloadTableServers
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|e
operator|instanceof
name|RemoteException
condition|)
block|{
name|e
operator|=
name|RemoteExceptionHandler
operator|.
name|decodeRemoteException
argument_list|(
operator|(
name|RemoteException
operator|)
name|e
argument_list|)
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|pause
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{         }
block|}
block|}
finally|finally
block|{
name|batch
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**     * Start an atomic row insertion/update.  No changes are committed until the     * call to commit() returns. A call to abort() will abandon any updates in progress.    *    * Callers to this method are given a lease for each unique lockid; before the    * lease expires, either abort() or commit() must be called. If it is not     * called, the system will automatically call abort() on the client's behalf.    *    * The client can gain extra time with a call to renewLease().    * Start an atomic row insertion or update    *     * @param row Name of row to start update against.    * @return Row lockid.    * @throws IOException    */
specifier|public
specifier|synchronized
name|long
name|startUpdate
parameter_list|(
specifier|final
name|Text
name|row
parameter_list|)
throws|throws
name|IOException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
name|checkUpdateInProgress
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|tries
init|=
literal|0
init|;
name|tries
operator|<
name|numRetries
condition|;
name|tries
operator|++
control|)
block|{
name|IOException
name|e
init|=
literal|null
decl_stmt|;
name|HRegionLocation
name|info
init|=
name|getRegionLocation
argument_list|(
name|row
argument_list|)
decl_stmt|;
try|try
block|{
name|currentServer
operator|=
name|connection
operator|.
name|getHRegionConnection
argument_list|(
name|info
operator|.
name|getServerAddress
argument_list|()
argument_list|)
expr_stmt|;
name|currentRegion
operator|=
name|info
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
expr_stmt|;
name|clientid
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
name|currentLockId
operator|=
name|currentServer
operator|.
name|startUpdate
argument_list|(
name|currentRegion
argument_list|,
name|clientid
argument_list|,
name|row
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|e
operator|=
name|ex
expr_stmt|;
block|}
if|if
condition|(
name|tries
operator|<
name|numRetries
operator|-
literal|1
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|this
operator|.
name|pause
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{         }
try|try
block|{
name|tableServers
operator|=
name|connection
operator|.
name|reloadTableServers
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|e
operator|=
name|ex
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|e
operator|instanceof
name|RemoteException
condition|)
block|{
name|e
operator|=
name|RemoteExceptionHandler
operator|.
name|decodeRemoteException
argument_list|(
operator|(
name|RemoteException
operator|)
name|e
argument_list|)
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
return|return
name|currentLockId
return|;
block|}
comment|/**     * Change a value for the specified column.    * Runs {@link #abort(long)} if exception thrown.    *    * @param lockid lock id returned from startUpdate    * @param column column whose value is being set    * @param val new value for column    * @throws IOException    */
specifier|public
name|void
name|put
parameter_list|(
name|long
name|lockid
parameter_list|,
name|Text
name|column
parameter_list|,
name|byte
name|val
index|[]
parameter_list|)
throws|throws
name|IOException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"value cannot be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|batch
operator|!=
literal|null
condition|)
block|{
name|batch
operator|.
name|put
argument_list|(
name|lockid
argument_list|,
name|column
argument_list|,
name|val
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|lockid
operator|!=
name|currentLockId
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid lockid"
argument_list|)
throw|;
block|}
try|try
block|{
name|this
operator|.
name|currentServer
operator|.
name|put
argument_list|(
name|this
operator|.
name|currentRegion
argument_list|,
name|this
operator|.
name|clientid
argument_list|,
name|lockid
argument_list|,
name|column
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|currentServer
operator|.
name|abort
argument_list|(
name|this
operator|.
name|currentRegion
argument_list|,
name|this
operator|.
name|clientid
argument_list|,
name|lockid
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e2
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e2
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|currentServer
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|currentRegion
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|RemoteException
condition|)
block|{
name|e
operator|=
name|RemoteExceptionHandler
operator|.
name|decodeRemoteException
argument_list|(
operator|(
name|RemoteException
operator|)
name|e
argument_list|)
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
comment|/**     * Delete the value for a column    *    * @param lockid              - lock id returned from startUpdate    * @param column              - name of column whose value is to be deleted    * @throws IOException    */
specifier|public
name|void
name|delete
parameter_list|(
name|long
name|lockid
parameter_list|,
name|Text
name|column
parameter_list|)
throws|throws
name|IOException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
if|if
condition|(
name|batch
operator|!=
literal|null
condition|)
block|{
name|batch
operator|.
name|delete
argument_list|(
name|lockid
argument_list|,
name|column
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|lockid
operator|!=
name|currentLockId
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid lockid"
argument_list|)
throw|;
block|}
try|try
block|{
name|this
operator|.
name|currentServer
operator|.
name|delete
argument_list|(
name|this
operator|.
name|currentRegion
argument_list|,
name|this
operator|.
name|clientid
argument_list|,
name|lockid
argument_list|,
name|column
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|currentServer
operator|.
name|abort
argument_list|(
name|this
operator|.
name|currentRegion
argument_list|,
name|this
operator|.
name|clientid
argument_list|,
name|lockid
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e2
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e2
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|currentServer
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|currentRegion
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|RemoteException
condition|)
block|{
name|e
operator|=
name|RemoteExceptionHandler
operator|.
name|decodeRemoteException
argument_list|(
operator|(
name|RemoteException
operator|)
name|e
argument_list|)
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
comment|/**     * Abort a row mutation    *    * @param lockid              - lock id returned from startUpdate    * @throws IOException    */
specifier|public
specifier|synchronized
name|void
name|abort
parameter_list|(
name|long
name|lockid
parameter_list|)
throws|throws
name|IOException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
if|if
condition|(
name|batch
operator|!=
literal|null
condition|)
block|{
name|abortBatch
argument_list|(
name|lockid
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|lockid
operator|!=
name|currentLockId
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid lockid"
argument_list|)
throw|;
block|}
try|try
block|{
try|try
block|{
name|this
operator|.
name|currentServer
operator|.
name|abort
argument_list|(
name|this
operator|.
name|currentRegion
argument_list|,
name|this
operator|.
name|clientid
argument_list|,
name|lockid
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|currentServer
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|currentRegion
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|RemoteException
condition|)
block|{
name|e
operator|=
name|RemoteExceptionHandler
operator|.
name|decodeRemoteException
argument_list|(
operator|(
name|RemoteException
operator|)
name|e
argument_list|)
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
finally|finally
block|{
name|currentLockId
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
block|}
comment|/**     * Finalize a row mutation    *    * @param lockid              - lock id returned from startUpdate    * @throws IOException    */
specifier|public
name|void
name|commit
parameter_list|(
name|long
name|lockid
parameter_list|)
throws|throws
name|IOException
block|{
name|commit
argument_list|(
name|lockid
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**     * Finalize a row mutation    *    * @param lockid              - lock id returned from startUpdate    * @param timestamp           - time to associate with the change    * @throws IOException    */
specifier|public
specifier|synchronized
name|void
name|commit
parameter_list|(
name|long
name|lockid
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
if|if
condition|(
name|batch
operator|!=
literal|null
condition|)
block|{
name|commitBatch
argument_list|(
name|lockid
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|lockid
operator|!=
name|currentLockId
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid lockid"
argument_list|)
throw|;
block|}
try|try
block|{
try|try
block|{
name|this
operator|.
name|currentServer
operator|.
name|commit
argument_list|(
name|this
operator|.
name|currentRegion
argument_list|,
name|this
operator|.
name|clientid
argument_list|,
name|lockid
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|currentServer
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|currentRegion
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|RemoteException
condition|)
block|{
name|e
operator|=
name|RemoteExceptionHandler
operator|.
name|decodeRemoteException
argument_list|(
operator|(
name|RemoteException
operator|)
name|e
argument_list|)
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
finally|finally
block|{
name|currentLockId
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
block|}
comment|/**    * Renew lease on update    *     * @param lockid              - lock id returned from startUpdate    * @throws IOException    */
specifier|public
specifier|synchronized
name|void
name|renewLease
parameter_list|(
name|long
name|lockid
parameter_list|)
throws|throws
name|IOException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
if|if
condition|(
name|batch
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|lockid
operator|!=
name|currentLockId
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid lockid"
argument_list|)
throw|;
block|}
try|try
block|{
name|this
operator|.
name|currentServer
operator|.
name|renewLease
argument_list|(
name|lockid
argument_list|,
name|this
operator|.
name|clientid
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|currentServer
operator|.
name|abort
argument_list|(
name|this
operator|.
name|currentRegion
argument_list|,
name|this
operator|.
name|clientid
argument_list|,
name|lockid
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e2
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e2
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|currentServer
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|currentRegion
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|RemoteException
condition|)
block|{
name|e
operator|=
name|RemoteExceptionHandler
operator|.
name|decodeRemoteException
argument_list|(
operator|(
name|RemoteException
operator|)
name|e
argument_list|)
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
comment|/**    * Implements the scanner interface for the HBase client.    * If there are multiple regions in a table, this scanner will iterate    * through them all.    */
specifier|protected
class|class
name|ClientScanner
implements|implements
name|HScannerInterface
block|{
specifier|private
specifier|final
name|Text
name|EMPTY_COLUMN
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
specifier|private
name|Text
index|[]
name|columns
decl_stmt|;
specifier|private
name|Text
name|startRow
decl_stmt|;
specifier|private
name|long
name|scanTime
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"hiding"
argument_list|)
specifier|private
name|boolean
name|closed
decl_stmt|;
specifier|private
name|AtomicReferenceArray
argument_list|<
name|HRegionLocation
argument_list|>
name|regions
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"hiding"
argument_list|)
specifier|private
name|int
name|currentRegion
decl_stmt|;
specifier|private
name|HRegionInterface
name|server
decl_stmt|;
specifier|private
name|long
name|scannerId
decl_stmt|;
specifier|private
name|RowFilterInterface
name|filter
decl_stmt|;
specifier|private
name|void
name|loadRegions
parameter_list|()
block|{
name|checkClosed
argument_list|()
expr_stmt|;
name|Text
name|firstServer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|startRow
operator|==
literal|null
operator|||
name|this
operator|.
name|startRow
operator|.
name|getLength
argument_list|()
operator|==
literal|0
condition|)
block|{
name|firstServer
operator|=
name|tableServers
operator|.
name|firstKey
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tableServers
operator|.
name|containsKey
argument_list|(
name|startRow
argument_list|)
condition|)
block|{
name|firstServer
operator|=
name|startRow
expr_stmt|;
block|}
else|else
block|{
name|firstServer
operator|=
name|tableServers
operator|.
name|headMap
argument_list|(
name|startRow
argument_list|)
operator|.
name|lastKey
argument_list|()
expr_stmt|;
block|}
name|Collection
argument_list|<
name|HRegionLocation
argument_list|>
name|info
init|=
name|tableServers
operator|.
name|tailMap
argument_list|(
name|firstServer
argument_list|)
operator|.
name|values
argument_list|()
decl_stmt|;
name|this
operator|.
name|regions
operator|=
operator|new
name|AtomicReferenceArray
argument_list|<
name|HRegionLocation
argument_list|>
argument_list|(
name|info
operator|.
name|toArray
argument_list|(
operator|new
name|HRegionLocation
index|[
name|info
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|ClientScanner
parameter_list|(
name|Text
index|[]
name|columns
parameter_list|,
name|Text
name|startRow
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|RowFilterInterface
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
name|this
operator|.
name|startRow
operator|=
name|startRow
expr_stmt|;
name|this
operator|.
name|scanTime
operator|=
name|timestamp
expr_stmt|;
name|this
operator|.
name|closed
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
if|if
condition|(
name|filter
operator|!=
literal|null
condition|)
block|{
name|filter
operator|.
name|validate
argument_list|(
name|columns
argument_list|)
expr_stmt|;
block|}
name|loadRegions
argument_list|()
expr_stmt|;
name|this
operator|.
name|currentRegion
operator|=
operator|-
literal|1
expr_stmt|;
name|this
operator|.
name|server
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|scannerId
operator|=
operator|-
literal|1L
expr_stmt|;
name|nextScanner
argument_list|()
expr_stmt|;
block|}
comment|/*      * Gets a scanner for the next region.      * Returns false if there are no more scanners.      */
specifier|private
name|boolean
name|nextScanner
parameter_list|()
throws|throws
name|IOException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|scannerId
operator|!=
operator|-
literal|1L
condition|)
block|{
name|this
operator|.
name|server
operator|.
name|close
argument_list|(
name|this
operator|.
name|scannerId
argument_list|)
expr_stmt|;
name|this
operator|.
name|scannerId
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
name|this
operator|.
name|currentRegion
operator|+=
literal|1
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|currentRegion
operator|==
name|this
operator|.
name|regions
operator|.
name|length
argument_list|()
condition|)
block|{
name|close
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
try|try
block|{
for|for
control|(
name|int
name|tries
init|=
literal|0
init|;
name|tries
operator|<
name|numRetries
condition|;
name|tries
operator|++
control|)
block|{
name|HRegionLocation
name|r
init|=
name|this
operator|.
name|regions
operator|.
name|get
argument_list|(
name|currentRegion
argument_list|)
decl_stmt|;
name|this
operator|.
name|server
operator|=
name|connection
operator|.
name|getHRegionConnection
argument_list|(
name|r
operator|.
name|getServerAddress
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|this
operator|.
name|filter
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|scannerId
operator|=
name|this
operator|.
name|server
operator|.
name|openScanner
argument_list|(
name|r
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|this
operator|.
name|columns
argument_list|,
name|currentRegion
operator|==
literal|0
condition|?
name|this
operator|.
name|startRow
else|:
name|EMPTY_START_ROW
argument_list|,
name|scanTime
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|scannerId
operator|=
name|this
operator|.
name|server
operator|.
name|openScanner
argument_list|(
name|r
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|this
operator|.
name|columns
argument_list|,
name|currentRegion
operator|==
literal|0
condition|?
name|this
operator|.
name|startRow
else|:
name|EMPTY_START_ROW
argument_list|,
name|scanTime
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|tries
operator|==
name|numRetries
operator|-
literal|1
condition|)
block|{
comment|// No more tries
if|if
condition|(
name|e
operator|instanceof
name|RemoteException
condition|)
block|{
name|e
operator|=
name|RemoteExceptionHandler
operator|.
name|decodeRemoteException
argument_list|(
operator|(
name|RemoteException
operator|)
name|e
argument_list|)
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
name|tableServers
operator|=
name|connection
operator|.
name|reloadTableServers
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|loadRegions
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|RemoteException
condition|)
block|{
name|e
operator|=
name|RemoteExceptionHandler
operator|.
name|decodeRemoteException
argument_list|(
operator|(
name|RemoteException
operator|)
name|e
argument_list|)
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|boolean
name|next
parameter_list|(
name|HStoreKey
name|key
parameter_list|,
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|results
parameter_list|)
throws|throws
name|IOException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|closed
condition|)
block|{
return|return
literal|false
return|;
block|}
name|KeyedData
index|[]
name|values
init|=
literal|null
decl_stmt|;
do|do
block|{
name|values
operator|=
name|this
operator|.
name|server
operator|.
name|next
argument_list|(
name|this
operator|.
name|scannerId
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|values
operator|!=
literal|null
operator|&&
name|values
operator|.
name|length
operator|==
literal|0
operator|&&
name|nextScanner
argument_list|()
condition|)
do|;
if|if
condition|(
name|values
operator|!=
literal|null
operator|&&
name|values
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|key
operator|.
name|setRow
argument_list|(
name|values
index|[
name|i
index|]
operator|.
name|getKey
argument_list|()
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|key
operator|.
name|setVersion
argument_list|(
name|values
index|[
name|i
index|]
operator|.
name|getKey
argument_list|()
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|key
operator|.
name|setColumn
argument_list|(
name|EMPTY_COLUMN
argument_list|)
expr_stmt|;
name|results
operator|.
name|put
argument_list|(
name|values
index|[
name|i
index|]
operator|.
name|getKey
argument_list|()
operator|.
name|getColumn
argument_list|()
argument_list|,
name|values
index|[
name|i
index|]
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|values
operator|==
literal|null
condition|?
literal|false
else|:
name|values
operator|.
name|length
operator|!=
literal|0
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|scannerId
operator|!=
operator|-
literal|1L
condition|)
block|{
name|this
operator|.
name|server
operator|.
name|close
argument_list|(
name|this
operator|.
name|scannerId
argument_list|)
expr_stmt|;
name|this
operator|.
name|scannerId
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
name|this
operator|.
name|server
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|closed
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

