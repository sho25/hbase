begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * Implementation of RowFilterInterface that represents a set of RowFilters  * which will be evaluated with a specified boolean operator AND/OR. Since you  * can use RowFilterSets as children of RowFilterSet, you can create a  * hierarchy of filters to be evaluated.  */
end_comment

begin_class
specifier|public
class|class
name|RowFilterSet
implements|implements
name|RowFilterInterface
block|{
enum|enum
name|Operator
block|{
name|AND
block|,
name|OR
block|}
specifier|private
name|Operator
name|operator
init|=
name|Operator
operator|.
name|AND
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|RowFilterInterface
argument_list|>
name|filters
init|=
operator|new
name|HashSet
argument_list|<
name|RowFilterInterface
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Default constructor, filters nothing. Required though for RPC    * deserialization.    */
specifier|public
name|RowFilterSet
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**    * Constructor that takes a set of RowFilters. The default operator AND is    * assumed.    *     * @param rowFilters    */
specifier|public
name|RowFilterSet
parameter_list|(
specifier|final
name|Set
argument_list|<
name|RowFilterInterface
argument_list|>
name|rowFilters
parameter_list|)
block|{
name|this
operator|.
name|filters
operator|=
name|rowFilters
expr_stmt|;
block|}
comment|/**    * Constructor that takes a set of RowFilters and an operator.    *     * @param operator Operator to process filter set with.    * @param rowFilters Set of row filters.    */
specifier|public
name|RowFilterSet
parameter_list|(
specifier|final
name|Operator
name|operator
parameter_list|,
specifier|final
name|Set
argument_list|<
name|RowFilterInterface
argument_list|>
name|rowFilters
parameter_list|)
block|{
name|this
operator|.
name|filters
operator|=
name|rowFilters
expr_stmt|;
name|this
operator|.
name|operator
operator|=
name|operator
expr_stmt|;
block|}
comment|/**    *     * {@inheritDoc}    */
specifier|public
name|void
name|validate
parameter_list|(
specifier|final
name|Text
index|[]
name|columns
parameter_list|)
block|{
for|for
control|(
name|RowFilterInterface
name|filter
range|:
name|filters
control|)
block|{
name|filter
operator|.
name|validate
argument_list|(
name|columns
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    *     * {@inheritDoc}    */
specifier|public
name|void
name|reset
parameter_list|()
block|{
for|for
control|(
name|RowFilterInterface
name|filter
range|:
name|filters
control|)
block|{
name|filter
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    *     * {@inheritDoc}    */
specifier|public
name|void
name|acceptedRow
parameter_list|(
specifier|final
name|Text
name|key
parameter_list|)
block|{
for|for
control|(
name|RowFilterInterface
name|filter
range|:
name|filters
control|)
block|{
name|filter
operator|.
name|acceptedRow
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    *     * {@inheritDoc}    */
specifier|public
name|boolean
name|filterAllRemaining
parameter_list|()
block|{
name|boolean
name|result
init|=
name|operator
operator|==
name|Operator
operator|.
name|OR
decl_stmt|;
for|for
control|(
name|RowFilterInterface
name|filter
range|:
name|filters
control|)
block|{
if|if
condition|(
name|operator
operator|==
name|Operator
operator|.
name|AND
condition|)
block|{
if|if
condition|(
name|filter
operator|.
name|filterAllRemaining
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|operator
operator|==
name|Operator
operator|.
name|OR
condition|)
block|{
if|if
condition|(
operator|!
name|filter
operator|.
name|filterAllRemaining
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**    *     * {@inheritDoc}    */
specifier|public
name|boolean
name|filter
parameter_list|(
specifier|final
name|Text
name|rowKey
parameter_list|)
block|{
name|boolean
name|result
init|=
name|operator
operator|==
name|Operator
operator|.
name|OR
decl_stmt|;
for|for
control|(
name|RowFilterInterface
name|filter
range|:
name|filters
control|)
block|{
if|if
condition|(
name|operator
operator|==
name|Operator
operator|.
name|AND
condition|)
block|{
if|if
condition|(
name|filter
operator|.
name|filterAllRemaining
argument_list|()
operator|||
name|filter
operator|.
name|filter
argument_list|(
name|rowKey
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|operator
operator|==
name|Operator
operator|.
name|OR
condition|)
block|{
if|if
condition|(
operator|!
name|filter
operator|.
name|filterAllRemaining
argument_list|()
operator|&&
operator|!
name|filter
operator|.
name|filter
argument_list|(
name|rowKey
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**    *     * {@inheritDoc}    */
specifier|public
name|boolean
name|filter
parameter_list|(
specifier|final
name|Text
name|rowKey
parameter_list|,
specifier|final
name|Text
name|colKey
parameter_list|,
specifier|final
name|byte
index|[]
name|data
parameter_list|)
block|{
name|boolean
name|result
init|=
name|operator
operator|==
name|Operator
operator|.
name|OR
decl_stmt|;
for|for
control|(
name|RowFilterInterface
name|filter
range|:
name|filters
control|)
block|{
if|if
condition|(
name|operator
operator|==
name|Operator
operator|.
name|AND
condition|)
block|{
if|if
condition|(
name|filter
operator|.
name|filterAllRemaining
argument_list|()
operator|||
name|filter
operator|.
name|filter
argument_list|(
name|rowKey
argument_list|,
name|colKey
argument_list|,
name|data
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|operator
operator|==
name|Operator
operator|.
name|OR
condition|)
block|{
if|if
condition|(
operator|!
name|filter
operator|.
name|filterAllRemaining
argument_list|()
operator|&&
operator|!
name|filter
operator|.
name|filter
argument_list|(
name|rowKey
argument_list|,
name|colKey
argument_list|,
name|data
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**    *     * {@inheritDoc}    */
specifier|public
name|boolean
name|filterNotNull
parameter_list|(
specifier|final
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|columns
parameter_list|)
block|{
name|boolean
name|result
init|=
name|operator
operator|==
name|Operator
operator|.
name|OR
decl_stmt|;
for|for
control|(
name|RowFilterInterface
name|filter
range|:
name|filters
control|)
block|{
if|if
condition|(
name|operator
operator|==
name|Operator
operator|.
name|AND
condition|)
block|{
if|if
condition|(
name|filter
operator|.
name|filterAllRemaining
argument_list|()
operator|||
name|filter
operator|.
name|filterNotNull
argument_list|(
name|columns
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|operator
operator|==
name|Operator
operator|.
name|OR
condition|)
block|{
if|if
condition|(
operator|!
name|filter
operator|.
name|filterAllRemaining
argument_list|()
operator|&&
operator|!
name|filter
operator|.
name|filterNotNull
argument_list|(
name|columns
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**    *     * {@inheritDoc}    */
specifier|public
name|void
name|readFields
parameter_list|(
specifier|final
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
name|opByte
init|=
name|in
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|operator
operator|=
name|Operator
operator|.
name|values
argument_list|()
index|[
name|opByte
index|]
expr_stmt|;
name|int
name|size
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|>
literal|0
condition|)
block|{
name|filters
operator|=
operator|new
name|HashSet
argument_list|<
name|RowFilterInterface
argument_list|>
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|String
name|className
init|=
name|in
operator|.
name|readUTF
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
decl_stmt|;
name|RowFilterInterface
name|filter
decl_stmt|;
name|filter
operator|=
operator|(
name|RowFilterInterface
operator|)
name|clazz
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|filter
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|filters
operator|.
name|add
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to deserialize RowFilterInterface."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to deserialize RowFilterInterface."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to deserialize RowFilterInterface."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    *     * {@inheritDoc}    */
specifier|public
name|void
name|write
parameter_list|(
specifier|final
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeByte
argument_list|(
name|operator
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|filters
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|RowFilterInterface
name|filter
range|:
name|filters
control|)
block|{
name|out
operator|.
name|writeUTF
argument_list|(
name|filter
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|filter
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

