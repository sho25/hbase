begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLineParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|GnuParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|OptionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|GenericOptionsParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HScannerInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HStoreKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MasterNotRunningException
import|;
end_import

begin_comment
comment|/**  * Perform a file system upgrade to convert older file layouts to that  * supported by HADOOP-2478  */
end_comment

begin_class
specifier|public
class|class
name|Migrate
extends|extends
name|Configured
implements|implements
name|Tool
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Migrate
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OLD_PREFIX
init|=
literal|"hregion_"
decl_stmt|;
specifier|private
specifier|final
name|HBaseConfiguration
name|conf
decl_stmt|;
comment|/** Action to take when an extra file is found */
specifier|private
specifier|static
enum|enum
name|EXTRA_FILES
block|{
comment|/** Stop conversion */
name|ABORT
block|,
comment|/** print a warning message, but otherwise ignore */
name|IGNORE
block|,
comment|/** delete extra files */
name|DELETE
block|,
comment|/** prompt for disposition of extra files */
name|PROMPT
block|}
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|EXTRA_FILES
argument_list|>
name|options
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|EXTRA_FILES
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|options
operator|.
name|put
argument_list|(
literal|"abort"
argument_list|,
name|EXTRA_FILES
operator|.
name|ABORT
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"ignore"
argument_list|,
name|EXTRA_FILES
operator|.
name|IGNORE
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"delete"
argument_list|,
name|EXTRA_FILES
operator|.
name|DELETE
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"prompt"
argument_list|,
name|EXTRA_FILES
operator|.
name|PROMPT
argument_list|)
expr_stmt|;
block|}
specifier|private
name|EXTRA_FILES
name|logFiles
init|=
name|EXTRA_FILES
operator|.
name|ABORT
decl_stmt|;
specifier|private
name|EXTRA_FILES
name|otherFiles
init|=
name|EXTRA_FILES
operator|.
name|IGNORE
decl_stmt|;
specifier|private
name|BufferedReader
name|reader
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|references
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|/** default constructor */
specifier|public
name|Migrate
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|HBaseConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param conf    */
specifier|public
name|Migrate
parameter_list|(
name|HBaseConfiguration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.client.retries.number"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|parseArgs
argument_list|(
name|args
argument_list|)
expr_stmt|;
try|try
block|{
name|HBaseAdmin
name|admin
init|=
operator|new
name|HBaseAdmin
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|admin
operator|.
name|isMasterRunning
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"HBase cluster must be off-line while being upgraded"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|MasterNotRunningException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// get DFS handle
name|Path
name|rootdir
init|=
name|fs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
comment|// get path for instance
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|HBASE_DIR
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_DIR
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// See if there is a file system version file
if|if
condition|(
name|FSUtils
operator|.
name|checkVersion
argument_list|(
name|fs
argument_list|,
name|rootdir
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"file system is at current level, no upgrade necessary"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|// check for "extra" files and for old upgradable regions
name|extraFiles
argument_list|(
name|fs
argument_list|,
name|rootdir
argument_list|)
expr_stmt|;
comment|// find root region
name|Path
name|rootRegion
init|=
operator|new
name|Path
argument_list|(
name|rootdir
argument_list|,
name|OLD_PREFIX
operator|+
name|HRegionInfo
operator|.
name|rootRegionInfo
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|rootRegion
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"cannot find root region "
operator|+
name|rootRegion
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|processRegionDir
argument_list|(
name|fs
argument_list|,
name|rootdir
argument_list|,
name|HConstants
operator|.
name|ROOT_TABLE_NAME
argument_list|,
name|rootRegion
argument_list|)
expr_stmt|;
name|scanRootRegion
argument_list|(
name|fs
argument_list|,
name|rootdir
argument_list|)
expr_stmt|;
comment|// scan for left over regions
name|extraRegions
argument_list|(
name|fs
argument_list|,
name|rootdir
argument_list|)
expr_stmt|;
comment|// set file system version
name|FSUtils
operator|.
name|setVersion
argument_list|(
name|fs
argument_list|,
name|rootdir
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
specifier|private
name|void
name|extraFiles
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|rootdir
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
index|[]
name|stats
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|rootdir
argument_list|)
decl_stmt|;
if|if
condition|(
name|stats
operator|==
literal|null
operator|||
name|stats
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No files found under root directory "
operator|+
name|rootdir
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stats
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
name|stats
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|name
operator|.
name|startsWith
argument_list|(
name|OLD_PREFIX
argument_list|)
condition|)
block|{
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"log_"
argument_list|)
condition|)
block|{
name|String
name|message
init|=
literal|"unrecovered region server log file "
operator|+
name|name
decl_stmt|;
name|extraFile
argument_list|(
name|logFiles
argument_list|,
name|message
argument_list|,
name|fs
argument_list|,
name|stats
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|message
init|=
literal|"unrecognized file "
operator|+
name|name
decl_stmt|;
name|extraFile
argument_list|(
name|otherFiles
argument_list|,
name|message
argument_list|,
name|fs
argument_list|,
name|stats
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|String
name|regionName
init|=
name|name
operator|.
name|substring
argument_list|(
name|OLD_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|Integer
operator|.
name|parseInt
argument_list|(
name|regionName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|extraFile
argument_list|(
name|otherFiles
argument_list|,
literal|"old region format can not be converted: "
operator|+
name|name
argument_list|,
name|fs
argument_list|,
name|stats
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|extraFile
parameter_list|(
name|EXTRA_FILES
name|action
parameter_list|,
name|String
name|message
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|action
operator|==
name|EXTRA_FILES
operator|.
name|ABORT
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|message
operator|+
literal|" aborting"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|action
operator|==
name|EXTRA_FILES
operator|.
name|IGNORE
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|message
operator|+
literal|" ignoring"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|action
operator|==
name|EXTRA_FILES
operator|.
name|DELETE
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|message
operator|+
literal|" deleting"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// logFiles == EXTRA_FILES.PROMPT
name|String
name|response
init|=
name|prompt
argument_list|(
name|message
operator|+
literal|" delete? [y/n]"
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|startsWith
argument_list|(
literal|"Y"
argument_list|)
operator|||
name|response
operator|.
name|startsWith
argument_list|(
literal|"y"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|message
operator|+
literal|" deleting"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|processRegionDir
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|rootdir
parameter_list|,
name|Text
name|tableName
parameter_list|,
name|Path
name|oldPath
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Create directory where table will live
name|Path
name|tableDir
init|=
operator|new
name|Path
argument_list|(
name|rootdir
argument_list|,
name|tableName
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|tableDir
argument_list|)
expr_stmt|;
comment|// Move the old region directory under the table directory
name|Path
name|newPath
init|=
operator|new
name|Path
argument_list|(
name|tableDir
argument_list|,
name|oldPath
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
name|OLD_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|oldPath
argument_list|,
name|newPath
argument_list|)
expr_stmt|;
name|processRegionSubDirs
argument_list|(
name|fs
argument_list|,
name|newPath
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|processRegionSubDirs
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|newPath
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|newName
init|=
name|newPath
operator|.
name|getName
argument_list|()
decl_stmt|;
name|FileStatus
index|[]
name|children
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|newPath
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|child
init|=
name|children
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|children
index|[
name|i
index|]
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|processRegionSubDirs
argument_list|(
name|fs
argument_list|,
name|children
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// Rename old compaction directories
if|if
condition|(
name|child
operator|.
name|startsWith
argument_list|(
name|OLD_PREFIX
argument_list|)
condition|)
block|{
name|fs
operator|.
name|rename
argument_list|(
name|children
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|newPath
argument_list|,
name|child
operator|.
name|substring
argument_list|(
name|OLD_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|newName
operator|.
name|compareTo
argument_list|(
literal|"mapfiles"
argument_list|)
operator|==
literal|0
condition|)
block|{
comment|// Check to see if this mapfile is a reference
if|if
condition|(
name|HStore
operator|.
name|isReference
argument_list|(
name|children
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
comment|// Keep track of references in case we come across a region
comment|// that we can't otherwise account for.
name|references
operator|.
name|add
argument_list|(
name|child
operator|.
name|substring
argument_list|(
name|child
operator|.
name|indexOf
argument_list|(
literal|"."
argument_list|)
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|private
name|void
name|scanRootRegion
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|rootdir
parameter_list|)
throws|throws
name|IOException
block|{
name|HLog
name|log
init|=
operator|new
name|HLog
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|rootdir
argument_list|,
name|HConstants
operator|.
name|HREGION_LOGDIR_NAME
argument_list|)
argument_list|,
name|conf
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Open root region so we can scan it
name|HRegion
name|rootRegion
init|=
operator|new
name|HRegion
argument_list|(
operator|new
name|Path
argument_list|(
name|rootdir
argument_list|,
name|HConstants
operator|.
name|ROOT_TABLE_NAME
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|log
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|,
name|HRegionInfo
operator|.
name|rootRegionInfo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|HScannerInterface
name|rootScanner
init|=
name|rootRegion
operator|.
name|getScanner
argument_list|(
name|HConstants
operator|.
name|COL_REGIONINFO_ARRAY
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|HStoreKey
name|key
init|=
operator|new
name|HStoreKey
argument_list|()
decl_stmt|;
name|SortedMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|results
init|=
operator|new
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|rootScanner
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|results
argument_list|)
condition|)
block|{
name|HRegionInfo
name|info
init|=
name|Writables
operator|.
name|getHRegionInfoOrNull
argument_list|(
name|results
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|COL_REGIONINFO
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"region info is null for row "
operator|+
name|key
operator|.
name|getRow
argument_list|()
operator|+
literal|" in table "
operator|+
name|HConstants
operator|.
name|ROOT_TABLE_NAME
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// First move the meta region to where it should be and rename
comment|// subdirectories as necessary
name|processRegionDir
argument_list|(
name|fs
argument_list|,
name|rootdir
argument_list|,
name|HConstants
operator|.
name|META_TABLE_NAME
argument_list|,
operator|new
name|Path
argument_list|(
name|rootdir
argument_list|,
name|OLD_PREFIX
operator|+
name|info
operator|.
name|getEncodedName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now scan and process the meta table
name|scanMetaRegion
argument_list|(
name|fs
argument_list|,
name|rootdir
argument_list|,
name|log
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|rootScanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|rootRegion
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|log
operator|.
name|closeAndDelete
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|scanMetaRegion
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|rootdir
parameter_list|,
name|HLog
name|log
parameter_list|,
name|HRegionInfo
name|info
parameter_list|)
throws|throws
name|IOException
block|{
name|HRegion
name|metaRegion
init|=
operator|new
name|HRegion
argument_list|(
operator|new
name|Path
argument_list|(
name|rootdir
argument_list|,
name|info
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|log
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|,
name|info
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|HScannerInterface
name|metaScanner
init|=
name|metaRegion
operator|.
name|getScanner
argument_list|(
name|HConstants
operator|.
name|COL_REGIONINFO_ARRAY
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|HStoreKey
name|key
init|=
operator|new
name|HStoreKey
argument_list|()
decl_stmt|;
name|SortedMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|results
init|=
operator|new
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|metaScanner
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|results
argument_list|)
condition|)
block|{
name|HRegionInfo
name|region
init|=
name|Writables
operator|.
name|getHRegionInfoOrNull
argument_list|(
name|results
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|COL_REGIONINFO
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|region
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"region info is null for row "
operator|+
name|key
operator|.
name|getRow
argument_list|()
operator|+
literal|" in table "
operator|+
name|HConstants
operator|.
name|META_TABLE_NAME
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// Move the region to where it should be and rename
comment|// subdirectories as necessary
name|processRegionDir
argument_list|(
name|fs
argument_list|,
name|rootdir
argument_list|,
name|region
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|rootdir
argument_list|,
name|OLD_PREFIX
operator|+
name|region
operator|.
name|getEncodedName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|metaScanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|metaRegion
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|extraRegions
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|rootdir
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
index|[]
name|stats
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|rootdir
argument_list|)
decl_stmt|;
if|if
condition|(
name|stats
operator|==
literal|null
operator|||
name|stats
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No files found under root directory "
operator|+
name|rootdir
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stats
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
name|stats
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|OLD_PREFIX
argument_list|)
condition|)
block|{
name|String
name|encodedName
init|=
name|name
operator|.
name|substring
argument_list|(
name|OLD_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|message
decl_stmt|;
if|if
condition|(
name|references
operator|.
name|contains
argument_list|(
name|encodedName
argument_list|)
condition|)
block|{
name|message
operator|=
literal|"region not in meta table but other regions reference it "
operator|+
name|name
expr_stmt|;
block|}
else|else
block|{
name|message
operator|=
literal|"region not in meta table and no other regions reference it "
operator|+
name|name
expr_stmt|;
block|}
name|extraFile
argument_list|(
name|otherFiles
argument_list|,
name|message
argument_list|,
name|fs
argument_list|,
name|stats
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"static-access"
argument_list|)
specifier|private
name|void
name|parseArgs
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|Options
name|opts
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|Option
name|logFiles
init|=
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"abort|ignore|delete|prompt"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"disposition of unrecovered region server logs: {abort|ignore|delete|prompt}"
argument_list|)
operator|.
name|create
argument_list|(
literal|"logfiles"
argument_list|)
decl_stmt|;
name|Option
name|extraFiles
init|=
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"abort|ignore|delete|prompt"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"disposition of 'extra' files: {abort|ignore|delete|prompt}"
argument_list|)
operator|.
name|create
argument_list|(
literal|"extrafiles"
argument_list|)
decl_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|logFiles
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|extraFiles
argument_list|)
expr_stmt|;
name|CommandLineParser
name|parser
init|=
operator|new
name|GnuParser
argument_list|()
decl_stmt|;
try|try
block|{
name|CommandLine
name|commandLine
init|=
name|parser
operator|.
name|parse
argument_list|(
name|opts
argument_list|,
name|args
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|commandLine
operator|.
name|hasOption
argument_list|(
literal|"log-files"
argument_list|)
condition|)
block|{
name|this
operator|.
name|logFiles
operator|=
name|options
operator|.
name|get
argument_list|(
name|commandLine
operator|.
name|getOptionValue
argument_list|(
literal|"log-files"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|commandLine
operator|.
name|hasOption
argument_list|(
literal|"extra-files"
argument_list|)
condition|)
block|{
name|this
operator|.
name|otherFiles
operator|=
name|options
operator|.
name|get
argument_list|(
name|commandLine
operator|.
name|getOptionValue
argument_list|(
literal|"extra-files"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"options parsing failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|HelpFormatter
name|formatter
init|=
operator|new
name|HelpFormatter
argument_list|()
decl_stmt|;
name|formatter
operator|.
name|printHelp
argument_list|(
literal|"options are: "
argument_list|,
name|opts
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|synchronized
name|String
name|prompt
parameter_list|(
name|String
name|prompt
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|prompt
operator|+
literal|"> "
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
name|reader
operator|==
literal|null
condition|)
block|{
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|System
operator|.
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
return|return
name|reader
operator|.
name|readLine
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Main program    *     * @param args command line arguments    */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|Tool
name|t
init|=
operator|new
name|Migrate
argument_list|()
decl_stmt|;
name|GenericOptionsParser
name|hadoopOpts
init|=
operator|new
name|GenericOptionsParser
argument_list|(
name|t
operator|.
name|getConf
argument_list|()
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|int
name|status
init|=
literal|0
decl_stmt|;
try|try
block|{
name|status
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|t
argument_list|,
name|hadoopOpts
operator|.
name|getRemainingArgs
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"exiting due to error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|status
operator|=
operator|-
literal|1
expr_stmt|;
block|}
name|System
operator|.
name|exit
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

