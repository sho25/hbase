begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|OptionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|GenericOptionsParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MasterNotRunningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HStore
import|;
end_import

begin_comment
comment|/**  * Perform a file system upgrade to convert older file layouts to that  * supported by HADOOP-2478, and then to the form supported by HBASE-69  */
end_comment

begin_class
specifier|public
class|class
name|Migrate
extends|extends
name|Configured
implements|implements
name|Tool
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Migrate
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OLD_PREFIX
init|=
literal|"hregion_"
decl_stmt|;
specifier|private
specifier|final
name|HBaseConfiguration
name|conf
decl_stmt|;
name|FileSystem
name|fs
decl_stmt|;
name|Path
name|rootdir
decl_stmt|;
name|MetaUtils
name|utils
decl_stmt|;
comment|/** Action to take when an extra file or unrecoverd log file is found */
specifier|private
specifier|static
name|String
name|ACTIONS
init|=
literal|"abort|ignore|delete|prompt"
decl_stmt|;
specifier|private
specifier|static
enum|enum
name|ACTION
block|{
comment|/** Stop conversion */
name|ABORT
block|,
comment|/** print a warning message, but otherwise ignore */
name|IGNORE
block|,
comment|/** delete extra files */
name|DELETE
block|,
comment|/** prompt for disposition of extra files */
name|PROMPT
block|}
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ACTION
argument_list|>
name|options
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ACTION
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|options
operator|.
name|put
argument_list|(
literal|"abort"
argument_list|,
name|ACTION
operator|.
name|ABORT
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"ignore"
argument_list|,
name|ACTION
operator|.
name|IGNORE
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"delete"
argument_list|,
name|ACTION
operator|.
name|DELETE
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"prompt"
argument_list|,
name|ACTION
operator|.
name|PROMPT
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|readOnly
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|migrationNeeded
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|newRootRegion
init|=
literal|false
decl_stmt|;
specifier|private
name|ACTION
name|otherFiles
init|=
name|ACTION
operator|.
name|IGNORE
decl_stmt|;
specifier|private
name|BufferedReader
name|reader
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|references
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|/** default constructor */
specifier|public
name|Migrate
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|HBaseConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param conf    */
specifier|public
name|Migrate
parameter_list|(
name|HBaseConfiguration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
if|if
condition|(
name|parseArgs
argument_list|(
name|args
argument_list|)
operator|!=
literal|0
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
comment|// Validate root directory path
name|Path
name|rd
init|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|HBASE_DIR
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Validate root directory path
name|FSUtils
operator|.
name|validateRootPath
argument_list|(
name|rd
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Not starting migration because the root directory path '"
operator|+
name|rd
operator|.
name|toString
argument_list|()
operator|+
literal|"' is not valid. Check the setting of the"
operator|+
literal|" configuration parameter '"
operator|+
name|HConstants
operator|.
name|HBASE_DIR
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
literal|"fs.default.name"
argument_list|,
name|rd
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Verify file system is up.
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// get DFS handle
name|LOG
operator|.
name|info
argument_list|(
literal|"Verifying that file system is available..."
argument_list|)
expr_stmt|;
name|FSUtils
operator|.
name|checkFileSystemAvailable
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"File system is not available"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
comment|// Verify HBase is down
name|LOG
operator|.
name|info
argument_list|(
literal|"Verifying that HBase is not running..."
argument_list|)
expr_stmt|;
try|try
block|{
name|HBaseAdmin
operator|.
name|checkHBaseAvailable
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|fatal
argument_list|(
literal|"HBase cluster must be off-line."
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
catch|catch
parameter_list|(
name|MasterNotRunningException
name|e
parameter_list|)
block|{
comment|// Expected. Ignore.
block|}
try|try
block|{
comment|// Initialize MetaUtils and and get the root of the HBase installation
name|this
operator|.
name|utils
operator|=
operator|new
name|MetaUtils
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|rootdir
operator|=
name|utils
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting upgrade"
operator|+
operator|(
name|readOnly
condition|?
literal|" check"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
comment|// See if there is a file system version file
name|String
name|version
init|=
name|FSUtils
operator|.
name|getVersion
argument_list|(
name|fs
argument_list|,
name|rootdir
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|!=
literal|null
operator|&&
name|version
operator|.
name|compareTo
argument_list|(
name|HConstants
operator|.
name|FILE_SYSTEM_VERSION
argument_list|)
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No upgrade necessary."
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|// Get contents of root directory
name|FileStatus
index|[]
name|rootFiles
init|=
name|getRootDirFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|version
operator|==
literal|null
condition|)
block|{
name|migrateFromNoVersion
argument_list|(
name|rootFiles
argument_list|)
expr_stmt|;
name|migrateToV2
argument_list|(
name|rootFiles
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|version
operator|.
name|compareTo
argument_list|(
literal|"0.1"
argument_list|)
operator|==
literal|0
condition|)
block|{
name|migrateToV2
argument_list|(
name|rootFiles
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|version
operator|.
name|compareTo
argument_list|(
literal|"2"
argument_list|)
operator|==
literal|0
condition|)
block|{
comment|// Nothing to do (yet)
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unrecognized version: "
operator|+
name|version
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|readOnly
condition|)
block|{
comment|// set file system version
name|LOG
operator|.
name|info
argument_list|(
literal|"Setting file system version."
argument_list|)
expr_stmt|;
name|FSUtils
operator|.
name|setVersion
argument_list|(
name|fs
argument_list|,
name|rootdir
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Upgrade successful."
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|migrationNeeded
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Upgrade needed."
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Upgrade"
operator|+
operator|(
name|readOnly
condition|?
literal|" check"
else|:
literal|""
operator|)
operator|+
literal|" failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|utils
operator|!=
literal|null
operator|&&
name|utils
operator|.
name|isInitialized
argument_list|()
condition|)
block|{
name|utils
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|migrateFromNoVersion
parameter_list|(
name|FileStatus
index|[]
name|rootFiles
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No file system version found. Checking to see if file system "
operator|+
literal|"is at revision 0.1"
argument_list|)
expr_stmt|;
comment|// check to see if new root region dir exists
name|checkNewRootRegionDirExists
argument_list|()
expr_stmt|;
comment|// check for unrecovered region server log files
name|checkForUnrecoveredLogFiles
argument_list|(
name|rootFiles
argument_list|)
expr_stmt|;
comment|// check for "extra" files and for old upgradable regions
name|extraFiles
argument_list|(
name|rootFiles
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|newRootRegion
condition|)
block|{
comment|// find root region
name|String
name|rootRegion
init|=
name|OLD_PREFIX
operator|+
name|HRegionInfo
operator|.
name|ROOT_REGIONINFO
operator|.
name|getEncodedName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|rootdir
argument_list|,
name|rootRegion
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot find root region "
operator|+
name|rootRegion
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|readOnly
condition|)
block|{
name|migrationNeeded
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|migrateRegionDir
argument_list|(
name|HConstants
operator|.
name|ROOT_TABLE_NAME
argument_list|,
name|rootRegion
argument_list|)
expr_stmt|;
name|scanRootRegion
argument_list|()
expr_stmt|;
comment|// scan for left over regions
name|extraRegions
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|migrateToV2
parameter_list|(
name|FileStatus
index|[]
name|rootFiles
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Checking to see if file system is at revision 2."
argument_list|)
expr_stmt|;
name|checkForUnrecoveredLogFiles
argument_list|(
name|rootFiles
argument_list|)
expr_stmt|;
block|}
specifier|private
name|FileStatus
index|[]
name|getRootDirFiles
parameter_list|()
throws|throws
name|IOException
block|{
name|FileStatus
index|[]
name|stats
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|rootdir
argument_list|)
decl_stmt|;
if|if
condition|(
name|stats
operator|==
literal|null
operator|||
name|stats
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No files found under root directory "
operator|+
name|rootdir
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|stats
return|;
block|}
specifier|private
name|void
name|checkNewRootRegionDirExists
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|rootRegionDir
init|=
name|HRegion
operator|.
name|getRegionDir
argument_list|(
name|rootdir
argument_list|,
name|HRegionInfo
operator|.
name|ROOT_REGIONINFO
argument_list|)
decl_stmt|;
name|newRootRegion
operator|=
name|fs
operator|.
name|exists
argument_list|(
name|rootRegionDir
argument_list|)
expr_stmt|;
name|migrationNeeded
operator|=
operator|!
name|newRootRegion
expr_stmt|;
block|}
specifier|private
name|void
name|checkForUnrecoveredLogFiles
parameter_list|(
name|FileStatus
index|[]
name|rootFiles
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|unrecoveredLogs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rootFiles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
name|rootFiles
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"log_"
argument_list|)
condition|)
block|{
name|unrecoveredLogs
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|unrecoveredLogs
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"There are "
operator|+
name|unrecoveredLogs
operator|.
name|size
argument_list|()
operator|+
literal|" unrecovered region server logs. Please uninstall this version of "
operator|+
literal|"HBase, re-install the previous version, start your cluster and "
operator|+
literal|"shut it down cleanly, so that all region server logs are recovered"
operator|+
literal|" and deleted."
argument_list|)
throw|;
block|}
block|}
comment|// Check for files that should not be there or should be migrated
specifier|private
name|void
name|extraFiles
parameter_list|(
name|FileStatus
index|[]
name|stats
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stats
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
name|stats
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|OLD_PREFIX
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|newRootRegion
condition|)
block|{
comment|// We need to migrate if the new root region directory doesn't exist
name|migrationNeeded
operator|=
literal|true
expr_stmt|;
name|String
name|regionName
init|=
name|name
operator|.
name|substring
argument_list|(
name|OLD_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|Integer
operator|.
name|parseInt
argument_list|(
name|regionName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|extraFile
argument_list|(
name|otherFiles
argument_list|,
literal|"Old region format can not be upgraded: "
operator|+
name|name
argument_list|,
name|stats
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Since the new root region directory exists, we assume that this
comment|// directory is not necessary
name|extraFile
argument_list|(
name|otherFiles
argument_list|,
literal|"Old region directory found: "
operator|+
name|name
argument_list|,
name|stats
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// File name does not start with "hregion_"
if|if
condition|(
operator|!
name|newRootRegion
condition|)
block|{
comment|// new root region directory does not exist. This is an extra file
name|String
name|message
init|=
literal|"Unrecognized file "
operator|+
name|name
decl_stmt|;
name|extraFile
argument_list|(
name|otherFiles
argument_list|,
name|message
argument_list|,
name|stats
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|extraFile
parameter_list|(
name|ACTION
name|action
parameter_list|,
name|String
name|message
parameter_list|,
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|action
operator|==
name|ACTION
operator|.
name|ABORT
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|message
operator|+
literal|" aborting"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|action
operator|==
name|ACTION
operator|.
name|IGNORE
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|message
operator|+
literal|" ignoring"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|action
operator|==
name|ACTION
operator|.
name|DELETE
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|message
operator|+
literal|" deleting"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|p
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// ACTION.PROMPT
name|String
name|response
init|=
name|prompt
argument_list|(
name|message
operator|+
literal|" delete? [y/n]"
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|startsWith
argument_list|(
literal|"Y"
argument_list|)
operator|||
name|response
operator|.
name|startsWith
argument_list|(
literal|"y"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|message
operator|+
literal|" deleting"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|p
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|void
name|migrateRegionDir
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|,
name|String
name|oldPath
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Create directory where table will live
name|Path
name|tableDir
init|=
operator|new
name|Path
argument_list|(
name|rootdir
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|tableDir
argument_list|)
expr_stmt|;
comment|// Move the old region directory under the table directory
name|Path
name|newPath
init|=
operator|new
name|Path
argument_list|(
name|tableDir
argument_list|,
name|oldPath
operator|.
name|substring
argument_list|(
name|OLD_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
name|rootdir
argument_list|,
name|oldPath
argument_list|)
argument_list|,
name|newPath
argument_list|)
expr_stmt|;
name|processRegionSubDirs
argument_list|(
name|fs
argument_list|,
name|newPath
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|processRegionSubDirs
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|newPath
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|newName
init|=
name|newPath
operator|.
name|getName
argument_list|()
decl_stmt|;
name|FileStatus
index|[]
name|children
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|newPath
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|child
init|=
name|children
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|children
index|[
name|i
index|]
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|processRegionSubDirs
argument_list|(
name|fs
argument_list|,
name|children
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// Rename old compaction directories
if|if
condition|(
name|child
operator|.
name|startsWith
argument_list|(
name|OLD_PREFIX
argument_list|)
condition|)
block|{
name|fs
operator|.
name|rename
argument_list|(
name|children
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|newPath
argument_list|,
name|child
operator|.
name|substring
argument_list|(
name|OLD_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|newName
operator|.
name|compareTo
argument_list|(
literal|"mapfiles"
argument_list|)
operator|==
literal|0
condition|)
block|{
comment|// Check to see if this mapfile is a reference
if|if
condition|(
name|HStore
operator|.
name|isReference
argument_list|(
name|children
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
comment|// Keep track of references in case we come across a region
comment|// that we can't otherwise account for.
name|references
operator|.
name|add
argument_list|(
name|child
operator|.
name|substring
argument_list|(
name|child
operator|.
name|indexOf
argument_list|(
literal|"."
argument_list|)
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|private
name|void
name|scanRootRegion
parameter_list|()
throws|throws
name|IOException
block|{
name|utils
operator|.
name|scanRootRegion
argument_list|(
operator|new
name|MetaUtils
operator|.
name|ScannerListener
argument_list|()
block|{
specifier|public
name|boolean
name|processRow
parameter_list|(
name|HRegionInfo
name|info
parameter_list|)
throws|throws
name|IOException
block|{
comment|// First move the meta region to where it should be and rename
comment|// subdirectories as necessary
name|migrateRegionDir
argument_list|(
name|HConstants
operator|.
name|META_TABLE_NAME
argument_list|,
name|OLD_PREFIX
operator|+
name|info
operator|.
name|getEncodedName
argument_list|()
argument_list|)
expr_stmt|;
name|utils
operator|.
name|scanMetaRegion
argument_list|(
name|info
argument_list|,
operator|new
name|MetaUtils
operator|.
name|ScannerListener
argument_list|()
block|{
specifier|public
name|boolean
name|processRow
parameter_list|(
name|HRegionInfo
name|tableInfo
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Move the region to where it should be and rename
comment|// subdirectories as necessary
name|migrateRegionDir
argument_list|(
name|tableInfo
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|OLD_PREFIX
operator|+
name|tableInfo
operator|.
name|getEncodedName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|extraRegions
parameter_list|()
throws|throws
name|IOException
block|{
name|FileStatus
index|[]
name|stats
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|rootdir
argument_list|)
decl_stmt|;
if|if
condition|(
name|stats
operator|==
literal|null
operator|||
name|stats
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No files found under root directory "
operator|+
name|rootdir
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stats
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
name|stats
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|OLD_PREFIX
argument_list|)
condition|)
block|{
name|String
name|encodedName
init|=
name|name
operator|.
name|substring
argument_list|(
name|OLD_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|message
decl_stmt|;
if|if
condition|(
name|references
operator|.
name|contains
argument_list|(
name|encodedName
argument_list|)
condition|)
block|{
name|message
operator|=
literal|"Region not in meta table but other regions reference it "
operator|+
name|name
expr_stmt|;
block|}
else|else
block|{
name|message
operator|=
literal|"Region not in meta table and no other regions reference it "
operator|+
name|name
expr_stmt|;
block|}
name|extraFile
argument_list|(
name|otherFiles
argument_list|,
name|message
argument_list|,
name|stats
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"static-access"
argument_list|)
specifier|private
name|int
name|parseArgs
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|Options
name|opts
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|Option
name|extraFiles
init|=
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
name|ACTIONS
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"disposition of 'extra' files: {abort|ignore|delete|prompt}"
argument_list|)
operator|.
name|create
argument_list|(
literal|"extrafiles"
argument_list|)
decl_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|extraFiles
argument_list|)
expr_stmt|;
name|GenericOptionsParser
name|parser
init|=
operator|new
name|GenericOptionsParser
argument_list|(
name|this
operator|.
name|getConf
argument_list|()
argument_list|,
name|opts
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|String
index|[]
name|remainingArgs
init|=
name|parser
operator|.
name|getRemainingArgs
argument_list|()
decl_stmt|;
if|if
condition|(
name|remainingArgs
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
name|usage
argument_list|()
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|remainingArgs
index|[
literal|0
index|]
operator|.
name|compareTo
argument_list|(
literal|"check"
argument_list|)
operator|==
literal|0
condition|)
block|{
name|this
operator|.
name|readOnly
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|remainingArgs
index|[
literal|0
index|]
operator|.
name|compareTo
argument_list|(
literal|"upgrade"
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|usage
argument_list|()
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|readOnly
condition|)
block|{
name|this
operator|.
name|otherFiles
operator|=
name|ACTION
operator|.
name|IGNORE
expr_stmt|;
block|}
else|else
block|{
name|CommandLine
name|commandLine
init|=
name|parser
operator|.
name|getCommandLine
argument_list|()
decl_stmt|;
name|ACTION
name|action
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|commandLine
operator|.
name|hasOption
argument_list|(
literal|"extrafiles"
argument_list|)
condition|)
block|{
name|action
operator|=
name|options
operator|.
name|get
argument_list|(
name|commandLine
operator|.
name|getOptionValue
argument_list|(
literal|"extrafiles"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|action
operator|==
literal|null
condition|)
block|{
name|usage
argument_list|()
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|this
operator|.
name|otherFiles
operator|=
name|action
expr_stmt|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|private
name|void
name|usage
parameter_list|()
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: bin/hbase migrate { check | upgrade } [options]\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  check                            perform upgrade checks only."
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  upgrade                          perform upgrade checks and modify hbase.\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  Options are:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"    -extrafiles={abort|ignore|delete|prompt}"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"                                   action to take if \"extra\" files are found.\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"    -conf<configuration file>     specify an application configuration file"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"    -D<property=value>            use value for given property"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"    -fs<local|namenode:port>      specify a namenode"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|synchronized
name|String
name|prompt
parameter_list|(
name|String
name|prompt
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|prompt
operator|+
literal|"> "
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
name|reader
operator|==
literal|null
condition|)
block|{
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|System
operator|.
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
return|return
name|reader
operator|.
name|readLine
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Main program    *     * @param args command line arguments    */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|int
name|status
init|=
literal|0
decl_stmt|;
try|try
block|{
name|status
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|Migrate
argument_list|()
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"exiting due to error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|status
operator|=
operator|-
literal|1
expr_stmt|;
block|}
name|System
operator|.
name|exit
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

