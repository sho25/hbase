begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|StatusHttpServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|http
operator|.
name|HttpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|http
operator|.
name|SocketListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|http
operator|.
name|handler
operator|.
name|ResourceHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|WebApplicationContext
import|;
end_import

begin_comment
comment|/**  * Create a Jetty embedded server to answer http requests. The primary goal  * is to serve up status information for the server.  * There are three contexts:  *   "/stacks/" -> points to stack trace  *   "/static/" -> points to common static files (src/webapps/static)  *   "/" -> the jsp server code from (src/webapps/<name>)  */
end_comment

begin_class
specifier|public
class|class
name|InfoServer
block|{
comment|// Bulk of this class is copied from
comment|// {@link org.apache.hadoop.mapred.StatusHttpServer}.  StatusHttpServer
comment|// is not amenable to subclassing.  It keeps webAppContext inaccessible
comment|// and will find webapps only in the jar the class StatusHttpServer was
comment|// loaded from.
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|InfoServer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|Server
name|webServer
decl_stmt|;
specifier|private
name|SocketListener
name|listener
decl_stmt|;
specifier|private
name|boolean
name|findPort
decl_stmt|;
specifier|private
name|WebApplicationContext
name|webAppContext
decl_stmt|;
comment|/**    * Create a status server on the given port.    * The jsp scripts are taken from src/webapps/<code>name<code>.    * @param name The name of the server    * @param port The port to use on the server    * @param findPort whether the server should start at the given port and     * increment by 1 until it finds a free port.    */
specifier|public
name|InfoServer
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|bindAddress
parameter_list|,
name|int
name|port
parameter_list|,
name|boolean
name|findPort
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|webServer
operator|=
operator|new
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|Server
argument_list|()
expr_stmt|;
name|this
operator|.
name|findPort
operator|=
name|findPort
expr_stmt|;
name|this
operator|.
name|listener
operator|=
operator|new
name|SocketListener
argument_list|()
expr_stmt|;
name|this
operator|.
name|listener
operator|.
name|setPort
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|this
operator|.
name|listener
operator|.
name|setHost
argument_list|(
name|bindAddress
argument_list|)
expr_stmt|;
name|this
operator|.
name|webServer
operator|.
name|addListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
comment|// Set up the context for "/static/*"
name|String
name|appDir
init|=
name|getWebAppsPath
argument_list|()
decl_stmt|;
comment|// Set up the context for "/logs/" if "hadoop.log.dir" property is defined.
name|String
name|logDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"hadoop.log.dir"
argument_list|)
decl_stmt|;
if|if
condition|(
name|logDir
operator|!=
literal|null
condition|)
block|{
name|HttpContext
name|logContext
init|=
operator|new
name|HttpContext
argument_list|()
decl_stmt|;
name|logContext
operator|.
name|setContextPath
argument_list|(
literal|"/logs/*"
argument_list|)
expr_stmt|;
name|logContext
operator|.
name|setResourceBase
argument_list|(
name|logDir
argument_list|)
expr_stmt|;
name|logContext
operator|.
name|addHandler
argument_list|(
operator|new
name|ResourceHandler
argument_list|()
argument_list|)
expr_stmt|;
name|webServer
operator|.
name|addContext
argument_list|(
name|logContext
argument_list|)
expr_stmt|;
block|}
name|HttpContext
name|staticContext
init|=
operator|new
name|HttpContext
argument_list|()
decl_stmt|;
name|staticContext
operator|.
name|setContextPath
argument_list|(
literal|"/static/*"
argument_list|)
expr_stmt|;
name|staticContext
operator|.
name|setResourceBase
argument_list|(
name|appDir
operator|+
literal|"/static"
argument_list|)
expr_stmt|;
name|staticContext
operator|.
name|addHandler
argument_list|(
operator|new
name|ResourceHandler
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|webServer
operator|.
name|addContext
argument_list|(
name|staticContext
argument_list|)
expr_stmt|;
comment|// set up the context for "/" jsp files
name|String
name|webappDir
init|=
literal|null
decl_stmt|;
try|try
block|{
name|webappDir
operator|=
name|getWebAppsPath
argument_list|(
literal|"webapps"
operator|+
name|File
operator|.
name|separator
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// Retry.  Resource may be inside jar on a windows machine.
name|webappDir
operator|=
name|getWebAppsPath
argument_list|(
literal|"webapps/"
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|webAppContext
operator|=
name|this
operator|.
name|webServer
operator|.
name|addWebApplication
argument_list|(
literal|"/"
argument_list|,
name|webappDir
argument_list|)
expr_stmt|;
name|addServlet
argument_list|(
literal|"stacks"
argument_list|,
literal|"/stacks"
argument_list|,
name|StatusHttpServer
operator|.
name|StackServlet
operator|.
name|class
argument_list|)
expr_stmt|;
name|addServlet
argument_list|(
literal|"logLevel"
argument_list|,
literal|"/logLevel"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|log
operator|.
name|LogLevel
operator|.
name|Servlet
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set a value in the webapp context. These values are available to the jsp    * pages as "application.getAttribute(name)".    * @param name The name of the attribute    * @param value The value of the attribute    */
specifier|public
name|void
name|setAttribute
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|this
operator|.
name|webAppContext
operator|.
name|setAttribute
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add a servlet in the server.    * @param name The name of the servlet (can be passed as null)    * @param pathSpec The path spec for the servlet    * @param servletClass The servlet class    */
specifier|public
parameter_list|<
name|T
extends|extends
name|HttpServlet
parameter_list|>
name|void
name|addServlet
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|pathSpec
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|servletClass
parameter_list|)
block|{
name|WebApplicationContext
name|context
init|=
name|webAppContext
decl_stmt|;
try|try
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|context
operator|.
name|addServlet
argument_list|(
name|pathSpec
argument_list|,
name|servletClass
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|context
operator|.
name|addServlet
argument_list|(
name|name
argument_list|,
name|pathSpec
argument_list|,
name|servletClass
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|ex
parameter_list|)
block|{
throw|throw
name|makeRuntimeException
argument_list|(
literal|"Problem instantiating class"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|ex
parameter_list|)
block|{
throw|throw
name|makeRuntimeException
argument_list|(
literal|"Problem instantiating class"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|ex
parameter_list|)
block|{
throw|throw
name|makeRuntimeException
argument_list|(
literal|"Problem instantiating class"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|RuntimeException
name|makeRuntimeException
parameter_list|(
name|String
name|msg
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|RuntimeException
name|result
init|=
operator|new
name|RuntimeException
argument_list|(
name|msg
argument_list|)
decl_stmt|;
if|if
condition|(
name|cause
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|initCause
argument_list|(
name|cause
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Get the value in the webapp context.    * @param name The name of the attribute    * @return The value of the attribute    */
specifier|public
name|Object
name|getAttribute
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|this
operator|.
name|webAppContext
operator|.
name|getAttribute
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**    * Get the pathname to the<code>webapps</code> files.    * @return the pathname as a URL    */
specifier|private
specifier|static
name|String
name|getWebAppsPath
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getWebAppsPath
argument_list|(
literal|"webapps"
argument_list|)
return|;
block|}
comment|/**    * Get the pathname to the<code>patch</code> files.    * @param path Path to find.    * @return the pathname as a URL    */
specifier|private
specifier|static
name|String
name|getWebAppsPath
parameter_list|(
specifier|final
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|URL
name|url
init|=
name|InfoServer
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"webapps not found in CLASSPATH"
argument_list|)
throw|;
return|return
name|url
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Get the port that the server is on    * @return the port    */
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|this
operator|.
name|listener
operator|.
name|getPort
argument_list|()
return|;
block|}
specifier|public
name|void
name|setThreads
parameter_list|(
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|)
block|{
name|this
operator|.
name|listener
operator|.
name|setMinThreads
argument_list|(
name|min
argument_list|)
expr_stmt|;
name|this
operator|.
name|listener
operator|.
name|setMaxThreads
argument_list|(
name|max
argument_list|)
expr_stmt|;
block|}
comment|/**    * Start the server. Does not wait for the server to start.    */
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|this
operator|.
name|webServer
operator|.
name|start
argument_list|()
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|mortbay
operator|.
name|util
operator|.
name|MultiException
name|ex
parameter_list|)
block|{
comment|// look for the multi exception containing a bind exception,
comment|// in that case try the next port number.
name|boolean
name|needNewPort
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ex
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|Exception
name|sub
init|=
name|ex
operator|.
name|getException
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|sub
operator|instanceof
name|java
operator|.
name|net
operator|.
name|BindException
condition|)
block|{
name|needNewPort
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|findPort
operator|||
operator|!
name|needNewPort
condition|)
block|{
throw|throw
name|ex
throw|;
block|}
name|this
operator|.
name|listener
operator|.
name|setPort
argument_list|(
name|listener
operator|.
name|getPort
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
name|ie
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|IOException
name|ie
init|=
operator|new
name|IOException
argument_list|(
literal|"Problem starting http server"
argument_list|)
decl_stmt|;
name|ie
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|ie
throw|;
block|}
block|}
comment|/**    * stop the server    */
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|this
operator|.
name|webServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

