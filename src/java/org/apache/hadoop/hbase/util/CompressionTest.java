begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2009 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_comment
comment|/**  * Compression validation test.  Checks compression is working.  Be sure to run  * on every node in your cluster.  */
end_comment

begin_class
specifier|public
class|class
name|CompressionTest
block|{
specifier|protected
specifier|static
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|".hfile-comp-test"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|void
name|usage
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Usage: CompressionTest HDFS_PATH none|gz|lzo"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
name|DistributedFileSystem
name|openConnection
parameter_list|(
name|String
name|urlString
parameter_list|)
throws|throws
name|java
operator|.
name|net
operator|.
name|URISyntaxException
throws|,
name|java
operator|.
name|io
operator|.
name|IOException
block|{
name|URI
name|dfsUri
init|=
operator|new
name|URI
argument_list|(
name|urlString
argument_list|)
decl_stmt|;
name|Configuration
name|dfsConf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|DistributedFileSystem
name|dfs
init|=
operator|new
name|DistributedFileSystem
argument_list|()
decl_stmt|;
name|dfs
operator|.
name|initialize
argument_list|(
name|dfsUri
argument_list|,
name|dfsConf
argument_list|)
expr_stmt|;
return|return
name|dfs
return|;
block|}
specifier|protected
specifier|static
name|boolean
name|closeConnection
parameter_list|(
name|DistributedFileSystem
name|dfs
parameter_list|)
block|{
if|if
condition|(
name|dfs
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|dfs
operator|.
name|close
argument_list|()
expr_stmt|;
name|dfs
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|dfs
operator|==
literal|null
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|2
condition|)
name|usage
argument_list|()
expr_stmt|;
try|try
block|{
name|DistributedFileSystem
name|dfs
init|=
name|openConnection
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|HFile
operator|.
name|Writer
name|writer
init|=
operator|new
name|HFile
operator|.
name|Writer
argument_list|(
name|dfs
argument_list|,
name|path
argument_list|,
name|HFile
operator|.
name|DEFAULT_BLOCKSIZE
argument_list|,
name|args
index|[
literal|1
index|]
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testkey"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testval"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|appendFileInfo
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"infokey"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"infoval"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|HFile
operator|.
name|Reader
name|reader
init|=
operator|new
name|HFile
operator|.
name|Reader
argument_list|(
name|dfs
argument_list|,
name|path
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|reader
operator|.
name|loadFileInfo
argument_list|()
expr_stmt|;
name|byte
index|[]
name|key
init|=
name|reader
operator|.
name|getFirstKey
argument_list|()
decl_stmt|;
name|boolean
name|rc
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|key
argument_list|)
operator|.
name|equals
argument_list|(
literal|"testkey"
argument_list|)
decl_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dfs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|closeConnection
argument_list|(
name|dfs
argument_list|)
expr_stmt|;
if|if
condition|(
name|rc
condition|)
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"FAILED"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

