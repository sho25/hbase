begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2008 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HScannerInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HStoreKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_comment
comment|/**  * Contains utility methods for manipulating HBase meta tables  */
end_comment

begin_class
specifier|public
class|class
name|MetaUtils
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MetaUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|HBaseConfiguration
name|conf
decl_stmt|;
name|boolean
name|initialized
decl_stmt|;
specifier|private
name|FileSystem
name|fs
decl_stmt|;
specifier|private
name|Path
name|rootdir
decl_stmt|;
specifier|private
name|HLog
name|log
decl_stmt|;
specifier|private
name|HRegion
name|rootRegion
decl_stmt|;
specifier|private
name|ConcurrentHashMap
argument_list|<
name|Text
argument_list|,
name|HRegion
argument_list|>
name|metaRegions
decl_stmt|;
comment|/** Default constructor */
specifier|public
name|MetaUtils
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|HBaseConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** @param conf HBaseConfiguration */
specifier|public
name|MetaUtils
parameter_list|(
name|HBaseConfiguration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.client.retries.number"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|initialized
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|rootRegion
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|metaRegions
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Text
argument_list|,
name|HRegion
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/**    * Verifies that DFS is available and that HBase is off-line.    *     * @return Path of root directory of HBase installation    * @throws IOException    */
specifier|public
name|Path
name|initialize
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
name|this
operator|.
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
comment|// get DFS handle
comment|// Get root directory of HBase installation
name|this
operator|.
name|rootdir
operator|=
name|fs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|this
operator|.
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|HBASE_DIR
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|rootdir
argument_list|)
condition|)
block|{
name|String
name|message
init|=
literal|"HBase root directory "
operator|+
name|rootdir
operator|.
name|toString
argument_list|()
operator|+
literal|" does not exist."
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|message
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|message
argument_list|)
throw|;
block|}
name|this
operator|.
name|log
operator|=
operator|new
name|HLog
argument_list|(
name|this
operator|.
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|this
operator|.
name|fs
operator|.
name|getHomeDirectory
argument_list|()
argument_list|,
name|HConstants
operator|.
name|HREGION_LOGDIR_NAME
operator|+
literal|"_"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|,
name|this
operator|.
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|initialized
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|this
operator|.
name|rootdir
return|;
block|}
comment|/** @return true if initialization completed successfully */
specifier|public
name|boolean
name|isInitialized
parameter_list|()
block|{
return|return
name|this
operator|.
name|initialized
return|;
block|}
comment|/** @return the HLog */
specifier|public
name|HLog
name|getLog
parameter_list|()
block|{
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Must call initialize method first."
argument_list|)
throw|;
block|}
return|return
name|this
operator|.
name|log
return|;
block|}
comment|/**    * @return HRegion for root region    * @throws IOException    */
specifier|public
name|HRegion
name|getRootRegion
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Must call initialize method first."
argument_list|)
throw|;
block|}
if|if
condition|(
name|this
operator|.
name|rootRegion
operator|==
literal|null
condition|)
block|{
name|openRootRegion
argument_list|()
expr_stmt|;
block|}
return|return
name|this
operator|.
name|rootRegion
return|;
block|}
comment|/**    * Open or return cached opened meta region    *     * @param metaInfo HRegionInfo for meta region    * @return meta HRegion    * @throws IOException    */
specifier|public
name|HRegion
name|getMetaRegion
parameter_list|(
name|HRegionInfo
name|metaInfo
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Must call initialize method first."
argument_list|)
throw|;
block|}
name|HRegion
name|meta
init|=
name|metaRegions
operator|.
name|get
argument_list|(
name|metaInfo
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|meta
operator|==
literal|null
condition|)
block|{
name|meta
operator|=
name|openMetaRegion
argument_list|(
name|metaInfo
argument_list|)
expr_stmt|;
name|metaRegions
operator|.
name|put
argument_list|(
name|metaInfo
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|meta
argument_list|)
expr_stmt|;
block|}
return|return
name|meta
return|;
block|}
comment|/** Closes root region if open. Also closes and deletes the HLog. */
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|rootRegion
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|this
operator|.
name|rootRegion
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"closing root region"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|rootRegion
operator|=
literal|null
expr_stmt|;
block|}
block|}
try|try
block|{
for|for
control|(
name|HRegion
name|r
range|:
name|metaRegions
operator|.
name|values
argument_list|()
control|)
block|{
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"closing meta region"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|metaRegions
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|this
operator|.
name|log
operator|.
name|rollWriter
argument_list|()
expr_stmt|;
name|this
operator|.
name|log
operator|.
name|closeAndDelete
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"closing HLog"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|log
operator|=
literal|null
expr_stmt|;
block|}
name|this
operator|.
name|initialized
operator|=
literal|false
expr_stmt|;
block|}
comment|/**    * Used by scanRootRegion and scanMetaRegion to call back the caller so it    * can process the data for a row.    */
specifier|public
interface|interface
name|ScannerListener
block|{
comment|/**      * Callback so client of scanner can process row contents      *       * @param info HRegionInfo for row      * @return false to terminate the scan      * @throws IOException      */
specifier|public
name|boolean
name|processRow
parameter_list|(
name|HRegionInfo
name|info
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
comment|/**    * Scans the root region. For every meta region found, calls the listener with    * the HRegionInfo of the meta region.    *     * @param listener method to be called for each meta region found    * @throws IOException    */
specifier|public
name|void
name|scanRootRegion
parameter_list|(
name|ScannerListener
name|listener
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Must call initialize method first."
argument_list|)
throw|;
block|}
comment|// Open root region so we can scan it
if|if
condition|(
name|this
operator|.
name|rootRegion
operator|==
literal|null
condition|)
block|{
name|openRootRegion
argument_list|()
expr_stmt|;
block|}
name|HScannerInterface
name|rootScanner
init|=
name|rootRegion
operator|.
name|getScanner
argument_list|(
name|HConstants
operator|.
name|COL_REGIONINFO_ARRAY
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|HStoreKey
name|key
init|=
operator|new
name|HStoreKey
argument_list|()
decl_stmt|;
name|SortedMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|results
init|=
operator|new
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|rootScanner
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|results
argument_list|)
condition|)
block|{
name|HRegionInfo
name|info
init|=
name|Writables
operator|.
name|getHRegionInfoOrNull
argument_list|(
name|results
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|COL_REGIONINFO
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"region info is null for row "
operator|+
name|key
operator|.
name|getRow
argument_list|()
operator|+
literal|" in table "
operator|+
name|HConstants
operator|.
name|ROOT_TABLE_NAME
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|listener
operator|.
name|processRow
argument_list|(
name|info
argument_list|)
condition|)
block|{
break|break;
block|}
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|rootScanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Scans a meta region. For every region found, calls the listener with    * the HRegionInfo of the region.    *     * @param metaRegionInfo HRegionInfo for meta region    * @param listener method to be called for each meta region found    * @throws IOException    */
specifier|public
name|void
name|scanMetaRegion
parameter_list|(
name|HRegionInfo
name|metaRegionInfo
parameter_list|,
name|ScannerListener
name|listener
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Must call initialize method first."
argument_list|)
throw|;
block|}
comment|// Open meta region so we can scan it
name|HRegion
name|metaRegion
init|=
name|openMetaRegion
argument_list|(
name|metaRegionInfo
argument_list|)
decl_stmt|;
name|HScannerInterface
name|metaScanner
init|=
name|metaRegion
operator|.
name|getScanner
argument_list|(
name|HConstants
operator|.
name|COL_REGIONINFO_ARRAY
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|HStoreKey
name|key
init|=
operator|new
name|HStoreKey
argument_list|()
decl_stmt|;
name|SortedMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|results
init|=
operator|new
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|metaScanner
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|results
argument_list|)
condition|)
block|{
name|HRegionInfo
name|info
init|=
name|Writables
operator|.
name|getHRegionInfoOrNull
argument_list|(
name|results
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|COL_REGIONINFO
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"region info is null for row "
operator|+
name|key
operator|.
name|getRow
argument_list|()
operator|+
literal|" in table "
operator|+
name|HConstants
operator|.
name|META_TABLE_NAME
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|listener
operator|.
name|processRow
argument_list|(
name|info
argument_list|)
condition|)
block|{
break|break;
block|}
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|metaScanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|openRootRegion
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|rootRegion
operator|=
name|HRegion
operator|.
name|openHRegion
argument_list|(
name|HRegionInfo
operator|.
name|rootRegionInfo
argument_list|,
name|this
operator|.
name|rootdir
argument_list|,
name|this
operator|.
name|log
argument_list|,
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|rootRegion
operator|.
name|compactStores
argument_list|()
expr_stmt|;
block|}
specifier|private
name|HRegion
name|openMetaRegion
parameter_list|(
name|HRegionInfo
name|metaInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|HRegion
name|meta
init|=
name|HRegion
operator|.
name|openHRegion
argument_list|(
name|metaInfo
argument_list|,
name|this
operator|.
name|rootdir
argument_list|,
name|this
operator|.
name|log
argument_list|,
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
name|meta
operator|.
name|compactStores
argument_list|()
expr_stmt|;
return|return
name|meta
return|;
block|}
comment|/**    * Set a single region on/offline.    * This is a tool to repair tables that have offlined tables in their midst.    * Can happen on occasion.  Use at your own risk.  Call from a bit of java    * or jython script.  This method is 'expensive' in that it creates a    * {@link HTable} instance per invocation to go against<code>.META.</code>    * @param c A configuration that has its<code>hbase.master</code>    * properly set.    * @param row Row in the catalog .META. table whose HRegionInfo's offline    * status we want to change.    * @param onlineOffline Pass<code>true</code> to online the region.    * @throws IOException    */
specifier|public
specifier|static
name|void
name|changeOnlineStatus
parameter_list|(
specifier|final
name|HBaseConfiguration
name|c
parameter_list|,
specifier|final
name|Text
name|row
parameter_list|,
specifier|final
name|boolean
name|onlineOffline
parameter_list|)
throws|throws
name|IOException
block|{
name|HTable
name|t
init|=
operator|new
name|HTable
argument_list|(
name|c
argument_list|,
name|HConstants
operator|.
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
name|Cell
name|cell
init|=
name|t
operator|.
name|get
argument_list|(
name|row
argument_list|,
name|HConstants
operator|.
name|COL_REGIONINFO
argument_list|)
decl_stmt|;
comment|// Throws exception if null.
name|HRegionInfo
name|info
init|=
name|Writables
operator|.
name|getHRegionInfo
argument_list|(
name|cell
argument_list|)
decl_stmt|;
name|long
name|id
init|=
name|t
operator|.
name|startUpdate
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|info
operator|.
name|setOffline
argument_list|(
name|onlineOffline
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|HConstants
operator|.
name|COL_REGIONINFO
argument_list|,
name|Writables
operator|.
name|getBytes
argument_list|(
name|info
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|delete
argument_list|(
name|id
argument_list|,
name|HConstants
operator|.
name|COL_SERVER
argument_list|)
expr_stmt|;
name|t
operator|.
name|delete
argument_list|(
name|id
argument_list|,
name|HConstants
operator|.
name|COL_STARTCODE
argument_list|)
expr_stmt|;
name|t
operator|.
name|commit
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

