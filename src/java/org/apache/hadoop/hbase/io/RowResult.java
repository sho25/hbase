begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2008 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|descriptors
operator|.
name|RestCell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|exception
operator|.
name|HBaseRestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|serializer
operator|.
name|IRestSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|serializer
operator|.
name|ISerializable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Writables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|agilejson
operator|.
name|TOJSON
import|;
end_import

begin_comment
comment|/**  * Holds row name and then a map of columns to cells.  * @deprecated As of hbase 0.20.0, replaced by new Get/Put/Delete/Result-based API.  */
end_comment

begin_class
specifier|public
class|class
name|RowResult
implements|implements
name|Writable
implements|,
name|SortedMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Cell
argument_list|>
implements|,
name|Comparable
argument_list|<
name|RowResult
argument_list|>
implements|,
name|ISerializable
block|{
specifier|private
name|byte
index|[]
name|row
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|HbaseMapWritable
argument_list|<
name|byte
index|[]
argument_list|,
name|Cell
argument_list|>
name|cells
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|COL_REGIONINFO
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"info:regioninfo"
argument_list|)
decl_stmt|;
comment|/** default constructor for writable */
specifier|public
name|RowResult
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|,
operator|new
name|HbaseMapWritable
argument_list|<
name|byte
index|[]
argument_list|,
name|Cell
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a RowResult from a row and Cell map    * @param row    * @param m    */
specifier|public
name|RowResult
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|HbaseMapWritable
argument_list|<
name|byte
index|[]
argument_list|,
name|Cell
argument_list|>
name|m
parameter_list|)
block|{
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|cells
operator|=
name|m
expr_stmt|;
block|}
comment|/**    * Get the row for this RowResult    * @return the row    */
annotation|@
name|TOJSON
argument_list|(
name|base64
operator|=
literal|true
argument_list|)
specifier|public
name|byte
index|[]
name|getRow
parameter_list|()
block|{
return|return
name|row
return|;
block|}
comment|//
comment|// Map interface
comment|//
specifier|public
name|Cell
name|put
parameter_list|(
name|byte
index|[]
name|key
parameter_list|,
name|Cell
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"RowResult is read-only!"
argument_list|)
throw|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|putAll
parameter_list|(
name|Map
name|map
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"RowResult is read-only!"
argument_list|)
throw|;
block|}
specifier|public
name|Cell
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|this
operator|.
name|cells
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|public
name|Cell
name|remove
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"RowResult is read-only!"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|containsKey
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|cells
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/**    * Check if the key can be found in this RowResult    * @param key    * @return true if key id found, false if not    */
specifier|public
name|boolean
name|containsKey
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|cells
operator|.
name|containsKey
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|containsValue
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Don't support containsValue!"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|cells
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|cells
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"RowResult is read-only!"
argument_list|)
throw|;
block|}
specifier|public
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|keySet
parameter_list|()
block|{
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|result
init|=
operator|new
name|TreeSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|w
range|:
name|cells
operator|.
name|keySet
argument_list|()
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|w
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|Cell
argument_list|>
argument_list|>
name|entrySet
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|this
operator|.
name|cells
operator|.
name|entrySet
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * This method used solely for the REST serialization    *     * @return Cells    */
annotation|@
name|TOJSON
specifier|public
name|RestCell
index|[]
name|getCells
parameter_list|()
block|{
name|RestCell
index|[]
name|restCells
init|=
operator|new
name|RestCell
index|[
name|this
operator|.
name|cells
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|Cell
argument_list|>
name|entry
range|:
name|this
operator|.
name|cells
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|restCells
index|[
name|i
index|]
operator|=
operator|new
name|RestCell
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
return|return
name|restCells
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|Cell
argument_list|>
name|values
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|Cell
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Writable
name|w
range|:
name|cells
operator|.
name|values
argument_list|()
control|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|(
name|Cell
operator|)
name|w
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Get the Cell that corresponds to column    * @param column    * @return the Cell    */
specifier|public
name|Cell
name|get
parameter_list|(
name|byte
index|[]
name|column
parameter_list|)
block|{
return|return
name|this
operator|.
name|cells
operator|.
name|get
argument_list|(
name|column
argument_list|)
return|;
block|}
comment|/**    * Get the Cell that corresponds to column, using a String key    * @param key    * @return the Cell    */
specifier|public
name|Cell
name|get
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Get a cell using seperate family, columnQualifier arguments.    * @param family    * @param columnQualifier    * @return    */
specifier|public
name|Cell
name|get
parameter_list|(
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|columnQualifier
parameter_list|)
block|{
return|return
name|get
argument_list|(
name|Bytes
operator|.
name|add
argument_list|(
name|family
argument_list|,
name|KeyValue
operator|.
name|COLUMN_FAMILY_DELIM_ARRAY
argument_list|,
name|columnQualifier
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Comparator
operator|<
condition|?
name|super
name|byte
index|[]
operator|>
name|comparator
argument_list|()
block|{
return|return
name|this
operator|.
name|cells
operator|.
name|comparator
argument_list|()
return|;
block|}
specifier|public
name|byte
index|[]
name|firstKey
parameter_list|()
block|{
return|return
name|this
operator|.
name|cells
operator|.
name|firstKey
argument_list|()
return|;
block|}
specifier|public
name|SortedMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Cell
argument_list|>
name|headMap
parameter_list|(
name|byte
index|[]
name|toKey
parameter_list|)
block|{
return|return
name|this
operator|.
name|cells
operator|.
name|headMap
argument_list|(
name|toKey
argument_list|)
return|;
block|}
specifier|public
name|byte
index|[]
name|lastKey
parameter_list|()
block|{
return|return
name|this
operator|.
name|cells
operator|.
name|lastKey
argument_list|()
return|;
block|}
specifier|public
name|SortedMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Cell
argument_list|>
name|subMap
parameter_list|(
name|byte
index|[]
name|fromKey
parameter_list|,
name|byte
index|[]
name|toKey
parameter_list|)
block|{
return|return
name|this
operator|.
name|cells
operator|.
name|subMap
argument_list|(
name|fromKey
argument_list|,
name|toKey
argument_list|)
return|;
block|}
specifier|public
name|SortedMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Cell
argument_list|>
name|tailMap
parameter_list|(
name|byte
index|[]
name|fromKey
parameter_list|)
block|{
return|return
name|this
operator|.
name|cells
operator|.
name|tailMap
argument_list|(
name|fromKey
argument_list|)
return|;
block|}
comment|/**    * Row entry.    */
specifier|public
class|class
name|Entry
implements|implements
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|Cell
argument_list|>
block|{
specifier|private
specifier|final
name|byte
index|[]
name|column
decl_stmt|;
specifier|private
specifier|final
name|Cell
name|cell
decl_stmt|;
name|Entry
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|Cell
name|cell
parameter_list|)
block|{
name|this
operator|.
name|column
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|cell
operator|=
name|cell
expr_stmt|;
block|}
specifier|public
name|Cell
name|setValue
parameter_list|(
name|Cell
name|c
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"RowResult is read-only!"
argument_list|)
throw|;
block|}
specifier|public
name|byte
index|[]
name|getKey
parameter_list|()
block|{
return|return
name|column
return|;
block|}
specifier|public
name|Cell
name|getValue
parameter_list|()
block|{
return|return
name|cell
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"row="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|this
operator|.
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", cells={"
argument_list|)
expr_stmt|;
name|boolean
name|moreThanOne
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|Cell
argument_list|>
name|e
range|:
name|this
operator|.
name|cells
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|moreThanOne
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|moreThanOne
operator|=
literal|true
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"(column="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", timestamp="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getTimestamp
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", value="
argument_list|)
expr_stmt|;
name|byte
index|[]
name|v
init|=
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|this
operator|.
name|COL_REGIONINFO
argument_list|)
condition|)
block|{
try|try
block|{
name|sb
operator|.
name|append
argument_list|(
name|Writables
operator|.
name|getHRegionInfo
argument_list|(
name|v
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|ioe
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/* (non-Javadoc)    * @see org.apache.hadoop.hbase.rest.xml.IOutputXML#toXML()    */
specifier|public
name|void
name|restSerialize
parameter_list|(
name|IRestSerializer
name|serializer
parameter_list|)
throws|throws
name|HBaseRestException
block|{
name|serializer
operator|.
name|serializeRowResult
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param l    * @return    * TODO: This is the glue between old way of doing things and the new.    * Herein we are converting our clean KeyValues to old RowResult.    */
specifier|public
specifier|static
name|RowResult
index|[]
name|createRowResultArray
parameter_list|(
specifier|final
name|List
argument_list|<
name|List
argument_list|<
name|KeyValue
argument_list|>
argument_list|>
name|l
parameter_list|)
block|{
name|RowResult
index|[]
name|results
init|=
operator|new
name|RowResult
index|[
name|l
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvl
range|:
name|l
control|)
block|{
name|results
index|[
name|i
operator|++
index|]
operator|=
name|createRowResult
argument_list|(
name|kvl
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
comment|/**    * @param results    * @return    * TODO: This is the glue between old way of doing things and the new.    * Herein we are converting our clean KeyValues to old RowResult.    */
specifier|public
specifier|static
name|RowResult
name|createRowResult
parameter_list|(
specifier|final
name|List
argument_list|<
name|KeyValue
argument_list|>
name|results
parameter_list|)
block|{
if|if
condition|(
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|HbaseMapWritable
argument_list|<
name|byte
index|[]
argument_list|,
name|Cell
argument_list|>
name|cells
init|=
name|Cell
operator|.
name|createCells
argument_list|(
name|results
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row
init|=
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRow
argument_list|()
decl_stmt|;
return|return
operator|new
name|RowResult
argument_list|(
name|row
argument_list|,
name|cells
argument_list|)
return|;
block|}
comment|//
comment|// Writable
comment|//
specifier|public
name|void
name|readFields
parameter_list|(
specifier|final
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|row
operator|=
name|Bytes
operator|.
name|readByteArray
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|cells
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
specifier|final
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|Bytes
operator|.
name|writeByteArray
argument_list|(
name|out
argument_list|,
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
name|this
operator|.
name|cells
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// Comparable
comment|//
comment|/**    *  Comparing this RowResult with another one by    *  comparing the row in it.    *  @param o the RowResult Object to compare to    *  @return the compare number    */
specifier|public
name|int
name|compareTo
parameter_list|(
name|RowResult
name|o
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|row
argument_list|,
name|o
operator|.
name|getRow
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

