begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2008 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_class
specifier|public
class|class
name|RowResult
implements|implements
name|Writable
implements|,
name|Map
argument_list|<
name|Text
argument_list|,
name|Cell
argument_list|>
block|{
specifier|protected
name|Text
name|row
decl_stmt|;
specifier|protected
name|HbaseMapWritable
name|cells
decl_stmt|;
comment|/**    * Used by Writable    */
specifier|public
name|RowResult
parameter_list|()
block|{
name|row
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
name|cells
operator|=
operator|new
name|HbaseMapWritable
argument_list|()
expr_stmt|;
block|}
comment|/**    * Create a RowResult from a row and Cell map    */
specifier|public
name|RowResult
parameter_list|(
specifier|final
name|Text
name|row
parameter_list|,
specifier|final
name|HbaseMapWritable
name|hbw
parameter_list|)
block|{
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|cells
operator|=
name|hbw
expr_stmt|;
block|}
comment|/**    * Get the row for this RowResult    */
specifier|public
name|Text
name|getRow
parameter_list|()
block|{
return|return
name|row
return|;
block|}
comment|//
comment|// Map interface
comment|//
specifier|public
name|Cell
name|put
parameter_list|(
name|Text
name|key
parameter_list|,
name|Cell
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"RowResult is read-only!"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|putAll
parameter_list|(
name|Map
name|map
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"RowResult is read-only!"
argument_list|)
throw|;
block|}
specifier|public
name|Cell
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
operator|(
name|Cell
operator|)
name|cells
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|public
name|Cell
name|remove
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"RowResult is read-only!"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|containsKey
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|cells
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|containsValue
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Don't support containsValue!"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|cells
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|cells
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"RowResult is read-only!"
argument_list|)
throw|;
block|}
specifier|public
name|Set
argument_list|<
name|Text
argument_list|>
name|keySet
parameter_list|()
block|{
name|Set
argument_list|<
name|Text
argument_list|>
name|result
init|=
operator|new
name|HashSet
argument_list|<
name|Text
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Writable
name|w
range|:
name|cells
operator|.
name|keySet
argument_list|()
control|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|(
name|Text
operator|)
name|w
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Text
argument_list|,
name|Cell
argument_list|>
argument_list|>
name|entrySet
parameter_list|()
block|{
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Text
argument_list|,
name|Cell
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|HashSet
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Text
argument_list|,
name|Cell
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Writable
argument_list|,
name|Writable
argument_list|>
name|e
range|:
name|cells
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|Entry
argument_list|(
operator|(
name|Text
operator|)
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|Cell
operator|)
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|Cell
argument_list|>
name|values
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|Cell
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Writable
name|w
range|:
name|cells
operator|.
name|values
argument_list|()
control|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|(
name|Cell
operator|)
name|w
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Get the Cell that corresponds to column    */
specifier|public
name|Cell
name|get
parameter_list|(
name|Text
name|column
parameter_list|)
block|{
return|return
operator|(
name|Cell
operator|)
name|cells
operator|.
name|get
argument_list|(
name|column
argument_list|)
return|;
block|}
specifier|public
class|class
name|Entry
implements|implements
name|Map
operator|.
name|Entry
argument_list|<
name|Text
argument_list|,
name|Cell
argument_list|>
block|{
specifier|private
name|Text
name|row
decl_stmt|;
specifier|private
name|Cell
name|cell
decl_stmt|;
name|Entry
parameter_list|(
name|Text
name|row
parameter_list|,
name|Cell
name|cell
parameter_list|)
block|{
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|cell
operator|=
name|cell
expr_stmt|;
block|}
specifier|public
name|Cell
name|setValue
parameter_list|(
name|Cell
name|c
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"RowResult is read-only!"
argument_list|)
throw|;
block|}
specifier|public
name|Text
name|getKey
parameter_list|()
block|{
return|return
name|row
return|;
block|}
specifier|public
name|Cell
name|getValue
parameter_list|()
block|{
return|return
name|cell
return|;
block|}
block|}
comment|//
comment|// Writable
comment|//
specifier|public
name|void
name|readFields
parameter_list|(
specifier|final
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|row
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|cells
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
specifier|final
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|row
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|cells
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

