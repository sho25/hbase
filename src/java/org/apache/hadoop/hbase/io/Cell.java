begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2008 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|exception
operator|.
name|HBaseRestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|serializer
operator|.
name|IRestSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|serializer
operator|.
name|ISerializable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|agilejson
operator|.
name|TOJSON
import|;
end_import

begin_comment
comment|/**  * Cell - Used to transport a cell value (byte[]) and the timestamp it was  * stored with together as a result for get and getRow methods. This promotes  * the timestamp of a cell to a first-class value, making it easy to take note  * of temporal data. Cell is used all the way from HStore up to HTable.  */
end_comment

begin_class
specifier|public
class|class
name|Cell
implements|implements
name|Writable
implements|,
name|Iterable
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
implements|,
name|ISerializable
block|{
specifier|protected
specifier|final
name|SortedMap
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
name|valueMap
init|=
operator|new
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|Long
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Long
name|l1
parameter_list|,
name|Long
name|l2
parameter_list|)
block|{
return|return
name|l2
operator|.
name|compareTo
argument_list|(
name|l1
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|/** For Writable compatibility */
specifier|public
name|Cell
parameter_list|()
block|{   }
comment|/**    * Create a new Cell with a given value and timestamp. Used by HStore.    *     * @param value    * @param timestamp    */
specifier|public
name|Cell
parameter_list|(
name|String
name|value
parameter_list|,
name|long
name|timestamp
parameter_list|)
block|{
name|this
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|value
argument_list|)
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a new Cell with a given value and timestamp. Used by HStore.    *     * @param value    * @param timestamp    */
specifier|public
name|Cell
parameter_list|(
name|byte
index|[]
name|value
parameter_list|,
name|long
name|timestamp
parameter_list|)
block|{
name|valueMap
operator|.
name|put
argument_list|(
name|timestamp
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a new Cell with a given value and timestamp. Used by HStore.    *     * @param bb    * @param timestamp    */
specifier|public
name|Cell
parameter_list|(
specifier|final
name|ByteBuffer
name|bb
parameter_list|,
name|long
name|timestamp
parameter_list|)
block|{
name|this
operator|.
name|valueMap
operator|.
name|put
argument_list|(
name|timestamp
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|bb
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param vals    *          array of values    * @param ts    *          array of timestamps    */
specifier|public
name|Cell
parameter_list|(
name|String
index|[]
name|vals
parameter_list|,
name|long
index|[]
name|ts
parameter_list|)
block|{
name|this
argument_list|(
name|Bytes
operator|.
name|toByteArrays
argument_list|(
name|vals
argument_list|)
argument_list|,
name|ts
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param vals    *          array of values    * @param ts    *          array of timestamps    */
specifier|public
name|Cell
parameter_list|(
name|byte
index|[]
index|[]
name|vals
parameter_list|,
name|long
index|[]
name|ts
parameter_list|)
block|{
if|if
condition|(
name|vals
operator|.
name|length
operator|!=
name|ts
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"number of values must be the same as the number of timestamps"
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vals
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|valueMap
operator|.
name|put
argument_list|(
name|ts
index|[
name|i
index|]
argument_list|,
name|vals
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** @return the current cell's value */
annotation|@
name|TOJSON
argument_list|(
name|base64
operator|=
literal|true
argument_list|)
specifier|public
name|byte
index|[]
name|getValue
parameter_list|()
block|{
return|return
name|valueMap
operator|.
name|get
argument_list|(
name|valueMap
operator|.
name|firstKey
argument_list|()
argument_list|)
return|;
block|}
comment|/** @return the current cell's timestamp */
annotation|@
name|TOJSON
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|valueMap
operator|.
name|firstKey
argument_list|()
return|;
block|}
comment|/** @return the number of values this cell holds */
specifier|public
name|int
name|getNumValues
parameter_list|()
block|{
return|return
name|valueMap
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**    * Add values and timestamps of another cell into this cell    *     * @param c    *          Cell    */
specifier|public
name|void
name|mergeCell
parameter_list|(
name|Cell
name|c
parameter_list|)
block|{
name|valueMap
operator|.
name|putAll
argument_list|(
name|c
operator|.
name|valueMap
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add a new timestamp and value to this cell    *     * @param val    *          value    * @param ts    *          timestamp    */
specifier|public
name|void
name|add
parameter_list|(
name|byte
index|[]
name|val
parameter_list|,
name|long
name|ts
parameter_list|)
block|{
name|valueMap
operator|.
name|put
argument_list|(
name|ts
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|valueMap
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
literal|"timestamp="
operator|+
name|getTimestamp
argument_list|()
operator|+
literal|", value="
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|getValue
argument_list|()
argument_list|)
return|;
block|}
name|StringBuilder
name|s
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"{ "
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
range|:
name|valueMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|s
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|append
argument_list|(
literal|"[timestamp="
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|", value="
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|s
operator|.
name|append
argument_list|(
literal|" }"
argument_list|)
expr_stmt|;
return|return
name|s
operator|.
name|toString
argument_list|()
return|;
block|}
comment|//
comment|// Writable
comment|//
specifier|public
name|void
name|readFields
parameter_list|(
specifier|final
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|nvalues
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nvalues
condition|;
name|i
operator|++
control|)
block|{
name|long
name|timestamp
init|=
name|in
operator|.
name|readLong
argument_list|()
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|readByteArray
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|valueMap
operator|.
name|put
argument_list|(
name|timestamp
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|write
parameter_list|(
specifier|final
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|valueMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
range|:
name|valueMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|Bytes
operator|.
name|writeByteArray
argument_list|(
name|out
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|//
comment|// Iterable
comment|//
specifier|public
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|CellIterator
argument_list|()
return|;
block|}
specifier|private
class|class
name|CellIterator
implements|implements
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
block|{
specifier|private
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|it
decl_stmt|;
name|CellIterator
parameter_list|()
block|{
name|it
operator|=
name|valueMap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|it
operator|.
name|hasNext
argument_list|()
return|;
block|}
specifier|public
name|Entry
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
name|next
parameter_list|()
block|{
return|return
name|it
operator|.
name|next
argument_list|()
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
throws|throws
name|UnsupportedOperationException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"remove is not supported"
argument_list|)
throw|;
block|}
block|}
comment|/*    * (non-Javadoc)    *     * @see    * org.apache.hadoop.hbase.rest.serializer.ISerializable#restSerialize(org    * .apache.hadoop.hbase.rest.serializer.IRestSerializer)    */
specifier|public
name|void
name|restSerialize
parameter_list|(
name|IRestSerializer
name|serializer
parameter_list|)
throws|throws
name|HBaseRestException
block|{
name|serializer
operator|.
name|serializeCell
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

