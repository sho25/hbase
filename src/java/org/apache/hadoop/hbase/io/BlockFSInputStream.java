begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2008 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PositionedReadable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Seekable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|SoftValueMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataInputBuffer
import|;
end_import

begin_comment
comment|/**  * An implementation of {@link FSInputStream} that reads the stream in blocks  * of a fixed, configurable size. The blocks are stored in a memory-sensitive cache.  */
end_comment

begin_class
specifier|public
class|class
name|BlockFSInputStream
extends|extends
name|FSInputStream
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|BlockFSInputStream
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|InputStream
name|in
decl_stmt|;
specifier|private
specifier|final
name|long
name|fileLength
decl_stmt|;
specifier|private
specifier|final
name|int
name|blockSize
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
name|blocks
decl_stmt|;
specifier|private
name|boolean
name|closed
decl_stmt|;
specifier|private
name|DataInputBuffer
name|blockStream
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
specifier|private
name|long
name|blockEnd
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|long
name|pos
init|=
literal|0
decl_stmt|;
comment|/**    * @param in    * @param fileLength    * @param blockSize the size of each block in bytes.    */
specifier|public
name|BlockFSInputStream
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|long
name|fileLength
parameter_list|,
name|int
name|blockSize
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|in
operator|instanceof
name|Seekable
operator|)
operator|||
operator|!
operator|(
name|in
operator|instanceof
name|PositionedReadable
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"In is not an instance of Seekable or PositionedReadable"
argument_list|)
throw|;
block|}
name|this
operator|.
name|fileLength
operator|=
name|fileLength
expr_stmt|;
name|this
operator|.
name|blockSize
operator|=
name|blockSize
expr_stmt|;
comment|// a memory-sensitive map that has soft references to values
name|this
operator|.
name|blocks
operator|=
operator|new
name|SoftValueMap
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|()
block|{
specifier|private
name|long
name|hits
decl_stmt|,
name|misses
decl_stmt|;
specifier|public
name|byte
index|[]
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|byte
index|[]
name|value
init|=
name|super
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|misses
operator|++
expr_stmt|;
block|}
else|else
block|{
name|hits
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
operator|&&
operator|(
operator|(
name|hits
operator|+
name|misses
operator|)
operator|%
literal|10000
operator|)
operator|==
literal|0
condition|)
block|{
name|long
name|hitRate
init|=
operator|(
literal|100
operator|*
name|hits
operator|)
operator|/
operator|(
name|hits
operator|+
name|misses
operator|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Hit rate for cache "
operator|+
name|hashCode
argument_list|()
operator|+
literal|": "
operator|+
name|hitRate
operator|+
literal|"%"
argument_list|)
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
block|}
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|long
name|getPos
parameter_list|()
block|{
return|return
name|pos
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|int
name|available
parameter_list|()
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|fileLength
operator|-
name|pos
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|seek
parameter_list|(
name|long
name|targetPos
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|targetPos
operator|>
name|fileLength
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot seek after EOF"
argument_list|)
throw|;
block|}
name|pos
operator|=
name|targetPos
expr_stmt|;
name|blockEnd
operator|=
operator|-
literal|1
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|public
specifier|synchronized
name|boolean
name|seekToNewSource
parameter_list|(
name|long
name|targetPos
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Stream closed"
argument_list|)
throw|;
block|}
name|int
name|result
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|pos
operator|<
name|fileLength
condition|)
block|{
if|if
condition|(
name|pos
operator|>
name|blockEnd
condition|)
block|{
name|blockSeekTo
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|blockStream
operator|.
name|read
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|>=
literal|0
condition|)
block|{
name|pos
operator|++
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|int
name|read
parameter_list|(
name|byte
name|buf
index|[]
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Stream closed"
argument_list|)
throw|;
block|}
if|if
condition|(
name|pos
operator|<
name|fileLength
condition|)
block|{
if|if
condition|(
name|pos
operator|>
name|blockEnd
condition|)
block|{
name|blockSeekTo
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
name|int
name|realLen
init|=
name|Math
operator|.
name|min
argument_list|(
name|len
argument_list|,
call|(
name|int
call|)
argument_list|(
name|blockEnd
operator|-
name|pos
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|result
init|=
name|blockStream
operator|.
name|read
argument_list|(
name|buf
argument_list|,
name|off
argument_list|,
name|realLen
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|>=
literal|0
condition|)
block|{
name|pos
operator|+=
name|result
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
specifier|private
specifier|synchronized
name|void
name|blockSeekTo
parameter_list|(
name|long
name|target
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|targetBlock
init|=
name|target
operator|/
name|blockSize
decl_stmt|;
name|long
name|targetBlockStart
init|=
name|targetBlock
operator|*
name|blockSize
decl_stmt|;
name|long
name|targetBlockEnd
init|=
name|Math
operator|.
name|min
argument_list|(
name|targetBlockStart
operator|+
name|blockSize
argument_list|,
name|fileLength
argument_list|)
operator|-
literal|1
decl_stmt|;
name|long
name|blockLength
init|=
name|targetBlockEnd
operator|-
name|targetBlockStart
operator|+
literal|1
decl_stmt|;
name|long
name|offsetIntoBlock
init|=
name|target
operator|-
name|targetBlockStart
decl_stmt|;
name|byte
index|[]
name|block
init|=
name|blocks
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|targetBlockStart
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|block
operator|==
literal|null
condition|)
block|{
name|block
operator|=
operator|new
name|byte
index|[
name|blockSize
index|]
expr_stmt|;
operator|(
operator|(
name|PositionedReadable
operator|)
name|in
operator|)
operator|.
name|readFully
argument_list|(
name|targetBlockStart
argument_list|,
name|block
argument_list|,
literal|0
argument_list|,
operator|(
name|int
operator|)
name|blockLength
argument_list|)
expr_stmt|;
name|blocks
operator|.
name|put
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|targetBlockStart
argument_list|)
argument_list|,
name|block
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|pos
operator|=
name|target
expr_stmt|;
name|this
operator|.
name|blockEnd
operator|=
name|targetBlockEnd
expr_stmt|;
name|this
operator|.
name|blockStream
operator|.
name|reset
argument_list|(
name|block
argument_list|,
operator|(
name|int
operator|)
name|offsetIntoBlock
argument_list|,
call|(
name|int
call|)
argument_list|(
name|blockLength
operator|-
name|offsetIntoBlock
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Stream closed"
argument_list|)
throw|;
block|}
if|if
condition|(
name|blockStream
operator|!=
literal|null
condition|)
block|{
name|blockStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|blockStream
operator|=
literal|null
expr_stmt|;
block|}
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
name|closed
operator|=
literal|true
expr_stmt|;
block|}
comment|/**    * We don't support marks.    */
annotation|@
name|Override
specifier|public
name|boolean
name|markSupported
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|public
name|void
name|mark
parameter_list|(
name|int
name|readLimit
parameter_list|)
block|{
comment|// Do nothing
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Mark not supported"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

