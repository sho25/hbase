begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2008 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HStoreKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|Reference
operator|.
name|Range
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Writables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_comment
comment|/**  * A facade for a {@link org.apache.hadoop.io.MapFile.Reader} that serves up  * either the top or bottom half of a MapFile where 'bottom' is the first half  * of the file containing the keys that sort lowest and 'top' is the second half  * of the file with keys that sort greater than those of the bottom half.  * The top includes the split files midkey, of the key that follows if it does  * not exist in the file.  *   *<p>This type works in tandem with the {@link Reference} type.  This class  * is used reading while Reference is used writing.  *   *<p>This file is not splitable.  Calls to {@link #midKey()} return null.  */
end_comment

begin_comment
comment|//TODO should be fixed generic warnings from MapFile methods
end_comment

begin_class
specifier|public
class|class
name|HalfMapFileReader
extends|extends
name|HBaseMapFile
operator|.
name|HBaseReader
block|{
specifier|private
specifier|final
name|boolean
name|top
decl_stmt|;
specifier|private
specifier|final
name|HStoreKey
name|midkey
decl_stmt|;
specifier|private
name|boolean
name|firstNextCall
init|=
literal|true
decl_stmt|;
comment|/**    * @param fs    * @param dirName    * @param conf    * @param r    * @param mk    * @param hri    * @throws IOException    */
specifier|public
name|HalfMapFileReader
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|String
name|dirName
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|Range
name|r
parameter_list|,
specifier|final
name|WritableComparable
argument_list|<
name|HStoreKey
argument_list|>
name|mk
parameter_list|,
specifier|final
name|HRegionInfo
name|hri
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|fs
argument_list|,
name|dirName
argument_list|,
name|conf
argument_list|,
name|r
argument_list|,
name|mk
argument_list|,
literal|false
argument_list|,
name|hri
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param fs    * @param dirName    * @param conf    * @param r    * @param mk    * @param blockCacheEnabled    * @param hri    * @throws IOException    */
specifier|public
name|HalfMapFileReader
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|String
name|dirName
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|Range
name|r
parameter_list|,
specifier|final
name|WritableComparable
argument_list|<
name|HStoreKey
argument_list|>
name|mk
parameter_list|,
specifier|final
name|boolean
name|blockCacheEnabled
parameter_list|,
specifier|final
name|HRegionInfo
name|hri
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|fs
argument_list|,
name|dirName
argument_list|,
name|conf
argument_list|,
name|blockCacheEnabled
argument_list|,
name|hri
argument_list|)
expr_stmt|;
comment|// This is not actual midkey for this half-file; its just border
comment|// around which we split top and bottom.  Have to look in files to find
comment|// actual last and first keys for bottom and top halves.  Half-files don't
comment|// have an actual midkey themselves. No midkey is how we indicate file is
comment|// not splittable.
name|this
operator|.
name|midkey
operator|=
operator|new
name|HStoreKey
argument_list|(
operator|(
name|HStoreKey
operator|)
name|mk
argument_list|)
expr_stmt|;
comment|// Is it top or bottom half?
name|this
operator|.
name|top
operator|=
name|Reference
operator|.
name|isTopFileRegion
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
comment|/*    * Check key is not bleeding into wrong half of the file.    * @param key    * @throws IOException    */
specifier|private
name|void
name|checkKey
parameter_list|(
specifier|final
name|WritableComparable
argument_list|<
name|HStoreKey
argument_list|>
name|key
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|top
condition|)
block|{
if|if
condition|(
name|key
operator|.
name|compareTo
argument_list|(
name|midkey
argument_list|)
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Illegal Access: Key is less than midKey of "
operator|+
literal|"backing mapfile"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|compareTo
argument_list|(
name|midkey
argument_list|)
operator|>=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Illegal Access: Key is greater than or equal "
operator|+
literal|"to midKey of backing mapfile"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|finalKey
parameter_list|(
name|WritableComparable
name|key
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|top
condition|)
block|{
name|super
operator|.
name|finalKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Writable
name|value
init|=
operator|new
name|ImmutableBytesWritable
argument_list|()
decl_stmt|;
name|WritableComparable
name|found
init|=
name|super
operator|.
name|getClosest
argument_list|(
name|midkey
argument_list|,
name|value
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Writables
operator|.
name|copyWritable
argument_list|(
name|found
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
specifier|synchronized
name|Writable
name|get
parameter_list|(
name|WritableComparable
name|key
parameter_list|,
name|Writable
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|checkKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
specifier|synchronized
name|WritableComparable
name|getClosest
parameter_list|(
name|WritableComparable
name|key
parameter_list|,
name|Writable
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|WritableComparable
name|closest
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|top
condition|)
block|{
comment|// If top, the lowest possible key is first key.  Do not have to check
comment|// what comes back from super getClosest.  Will return exact match or
comment|// greater.
name|closest
operator|=
operator|(
name|key
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|midkey
argument_list|)
operator|<
literal|0
operator|)
condition|?
name|this
operator|.
name|midkey
else|:
name|super
operator|.
name|getClosest
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// We're serving bottom of the file.
if|if
condition|(
name|key
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|midkey
argument_list|)
operator|<
literal|0
condition|)
block|{
comment|// Check key is within range for bottom.
name|closest
operator|=
name|super
operator|.
name|getClosest
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
comment|// midkey was made against largest store file at time of split. Smaller
comment|// store files could have anything in them.  Check return value is
comment|// not beyond the midkey (getClosest returns exact match or next after)
if|if
condition|(
name|closest
operator|!=
literal|null
operator|&&
name|closest
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|midkey
argument_list|)
operator|>=
literal|0
condition|)
block|{
comment|// Don't let this value out.
name|closest
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|// Else, key is> midkey so let out closest = null.
block|}
return|return
name|closest
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
specifier|synchronized
name|WritableComparable
name|midKey
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Returns null to indicate file is not splitable.
return|return
literal|null
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
specifier|synchronized
name|boolean
name|next
parameter_list|(
name|WritableComparable
name|key
parameter_list|,
name|Writable
name|val
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|firstNextCall
condition|)
block|{
name|firstNextCall
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|top
condition|)
block|{
comment|// Seek to midkey.  Midkey may not exist in this file.  That should be
comment|// fine.  Then we'll either be positioned at end or start of file.
name|WritableComparable
name|nearest
init|=
name|getClosest
argument_list|(
name|this
operator|.
name|midkey
argument_list|,
name|val
argument_list|)
decl_stmt|;
comment|// Now copy the midkey into the passed key.
if|if
condition|(
name|nearest
operator|!=
literal|null
condition|)
block|{
name|Writables
operator|.
name|copyWritable
argument_list|(
name|nearest
argument_list|,
name|key
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
name|boolean
name|result
init|=
name|super
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|top
operator|&&
name|key
operator|.
name|compareTo
argument_list|(
name|midkey
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|result
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|top
condition|)
block|{
name|firstNextCall
operator|=
literal|true
expr_stmt|;
return|return;
block|}
name|super
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
specifier|synchronized
name|boolean
name|seek
parameter_list|(
name|WritableComparable
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|checkKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|seek
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
end_class

end_unit

