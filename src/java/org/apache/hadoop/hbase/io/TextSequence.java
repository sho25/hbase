begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparator
import|;
end_import

begin_comment
comment|/**  * As CharSequence is to String, so is TextSequence to {@link Text}  * (except a TextSequence is a Text whereas a String is a CharSequence). Use  * when you want to conserve on object creation.  *   *<p>Use with care. If danger that the passed in {@link Text} instance can  * change during the life of this TextSequence, concretize this TextSequence  * by calling {@link #toText()}.  *   *<p>Equals considers a Text equal if the TextSequence brackets the same bytes.  *   *<p>TODO: Should this be an Interface as CharSequence is?  */
end_comment

begin_class
specifier|public
class|class
name|TextSequence
extends|extends
name|Text
block|{
specifier|private
name|Text
name|delegatee
decl_stmt|;
specifier|private
name|int
name|start
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|end
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
name|TextSequence
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|delegatee
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
block|}
specifier|public
name|TextSequence
parameter_list|(
specifier|final
name|Text
name|d
parameter_list|)
block|{
name|this
argument_list|(
name|d
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TextSequence
parameter_list|(
specifier|final
name|Text
name|d
parameter_list|,
specifier|final
name|int
name|s
parameter_list|)
block|{
name|this
argument_list|(
name|d
argument_list|,
name|s
argument_list|,
name|d
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TextSequence
parameter_list|(
specifier|final
name|Text
name|d
parameter_list|,
specifier|final
name|int
name|s
parameter_list|,
specifier|final
name|int
name|e
parameter_list|)
block|{
name|this
operator|.
name|delegatee
operator|=
name|d
expr_stmt|;
if|if
condition|(
name|s
operator|<
literal|0
operator|||
name|s
operator|>=
name|d
operator|.
name|getLength
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Nonsensical start position "
operator|+
name|s
argument_list|)
throw|;
block|}
name|this
operator|.
name|start
operator|=
name|s
expr_stmt|;
if|if
condition|(
name|e
operator|==
operator|-
literal|1
condition|)
block|{
name|this
operator|.
name|end
operator|=
name|this
operator|.
name|delegatee
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|<=
literal|0
operator|||
name|e
operator|>
name|d
operator|.
name|getLength
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Nonsensical start position "
operator|+
name|s
argument_list|)
throw|;
block|}
else|else
block|{
name|this
operator|.
name|end
operator|=
name|e
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|charAt
parameter_list|(
name|int
name|position
parameter_list|)
block|{
if|if
condition|(
name|position
operator|+
name|this
operator|.
name|start
operator|>
name|this
operator|.
name|end
operator|||
name|position
operator|+
name|this
operator|.
name|start
operator|<
name|this
operator|.
name|start
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
name|this
operator|.
name|delegatee
operator|.
name|charAt
argument_list|(
name|start
operator|+
name|position
argument_list|)
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|TextSequence
condition|)
block|{
name|TextSequence
name|that
init|=
operator|(
name|TextSequence
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|this
operator|==
name|that
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|WritableComparator
operator|.
name|compareBytes
argument_list|(
name|this
operator|.
name|delegatee
operator|.
name|getBytes
argument_list|()
argument_list|,
name|this
operator|.
name|start
argument_list|,
name|this
operator|.
name|getLength
argument_list|()
argument_list|,
name|that
operator|.
name|delegatee
operator|.
name|getBytes
argument_list|()
argument_list|,
name|that
operator|.
name|start
argument_list|,
name|that
operator|.
name|getLength
argument_list|()
argument_list|)
return|;
block|}
comment|// Presume type is Text as super method does.
name|Text
name|that
init|=
operator|(
name|Text
operator|)
name|o
decl_stmt|;
return|return
name|WritableComparator
operator|.
name|compareBytes
argument_list|(
name|this
operator|.
name|delegatee
operator|.
name|getBytes
argument_list|()
argument_list|,
name|this
operator|.
name|start
argument_list|,
name|this
operator|.
name|getLength
argument_list|()
argument_list|,
name|that
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|that
operator|.
name|getLength
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|compareTo
argument_list|(
name|o
argument_list|)
operator|==
literal|0
return|;
block|}
specifier|public
name|int
name|find
parameter_list|(
name|String
name|what
parameter_list|,
name|int
name|s
parameter_list|)
block|{
return|return
name|this
operator|.
name|delegatee
operator|.
name|find
argument_list|(
name|what
argument_list|,
name|this
operator|.
name|start
operator|+
name|s
argument_list|)
operator|-
name|this
operator|.
name|start
return|;
block|}
specifier|public
name|int
name|find
parameter_list|(
name|String
name|what
parameter_list|)
block|{
return|return
name|find
argument_list|(
name|what
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|public
name|byte
index|[]
name|getBytes
parameter_list|()
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|getLength
argument_list|()
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|this
operator|.
name|delegatee
operator|.
name|getBytes
argument_list|()
argument_list|,
name|this
operator|.
name|start
argument_list|,
name|b
argument_list|,
literal|0
argument_list|,
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|b
return|;
block|}
comment|/**    * @return A new Text instance made from the bytes this TextSequence covers.    */
specifier|public
name|Text
name|toText
parameter_list|()
block|{
return|return
operator|new
name|Text
argument_list|(
name|getBytes
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
name|this
operator|.
name|end
operator|==
operator|-
literal|1
condition|?
name|this
operator|.
name|delegatee
operator|.
name|getLength
argument_list|()
else|:
name|this
operator|.
name|end
operator|-
name|this
operator|.
name|start
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hash
init|=
literal|1
decl_stmt|;
name|byte
index|[]
name|b
init|=
name|this
operator|.
name|delegatee
operator|.
name|getBytes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|this
operator|.
name|start
init|,
name|length
init|=
name|getLength
argument_list|()
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
name|hash
operator|=
operator|(
literal|31
operator|*
name|hash
operator|)
operator|+
name|b
index|[
name|i
index|]
expr_stmt|;
return|return
name|hash
return|;
block|}
specifier|public
name|void
name|set
parameter_list|(
name|byte
index|[]
name|utf8
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|this
operator|.
name|delegatee
operator|.
name|set
argument_list|(
name|utf8
argument_list|,
name|start
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|set
parameter_list|(
name|byte
index|[]
name|utf8
parameter_list|)
block|{
name|this
operator|.
name|delegatee
operator|.
name|set
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|set
parameter_list|(
name|String
name|string
parameter_list|)
block|{
name|this
operator|.
name|delegatee
operator|.
name|set
argument_list|(
name|string
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|set
parameter_list|(
name|Text
name|other
parameter_list|)
block|{
name|this
operator|.
name|delegatee
operator|.
name|set
argument_list|(
name|other
argument_list|)
expr_stmt|;
name|this
operator|.
name|start
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|end
operator|=
name|other
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|this
operator|.
name|delegatee
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
name|this
operator|.
name|start
argument_list|,
name|this
operator|.
name|end
argument_list|)
return|;
block|}
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|start
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|this
operator|.
name|end
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|this
operator|.
name|delegatee
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|this
operator|.
name|start
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|this
operator|.
name|end
argument_list|)
expr_stmt|;
name|this
operator|.
name|delegatee
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

