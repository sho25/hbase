begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|SequenceFile
operator|.
name|CompressionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataInputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|DefaultCodec
import|;
end_import

begin_comment
comment|/** A file-based map from keys to values.  *  *<p>This is copy of Hadoop SequenceFile brought local so we can fix bugs;  * e.g. hbase-1097</p>  *   *<p>A map is a directory containing two files, the<code>data</code> file,  * containing all keys and values in the map, and a smaller<code>index</code>  * file, containing a fraction of the keys.  The fraction is determined by  * {@link Writer#getIndexInterval()}.  *  *<p>The index file is read entirely into memory.  Thus key implementations  * should try to keep themselves small.  *  *<p>Map files are created by adding entries in-order.  To maintain a large  * database, perform updates by copying the previous version of a database and  * merging in a sorted change list, to create a new version of the database in  * a new file.  Sorting large change lists can be done with {@link  * SequenceFile.Sorter}.  */
end_comment

begin_class
specifier|public
class|class
name|MapFile
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MapFile
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** The name of the index file. */
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_FILE_NAME
init|=
literal|"index"
decl_stmt|;
comment|/** The name of the data file. */
specifier|public
specifier|static
specifier|final
name|String
name|DATA_FILE_NAME
init|=
literal|"data"
decl_stmt|;
specifier|protected
name|MapFile
parameter_list|()
block|{}
comment|// no public ctor
comment|/** Writes a new map. */
specifier|public
specifier|static
class|class
name|Writer
implements|implements
name|java
operator|.
name|io
operator|.
name|Closeable
block|{
specifier|private
name|SequenceFile
operator|.
name|Writer
name|data
decl_stmt|;
specifier|private
name|SequenceFile
operator|.
name|Writer
name|index
decl_stmt|;
specifier|final
specifier|private
specifier|static
name|String
name|INDEX_INTERVAL
init|=
literal|"io.map.index.interval"
decl_stmt|;
specifier|private
name|int
name|indexInterval
init|=
literal|128
decl_stmt|;
specifier|private
name|long
name|size
decl_stmt|;
specifier|private
name|LongWritable
name|position
init|=
operator|new
name|LongWritable
argument_list|()
decl_stmt|;
comment|// the following fields are used only for checking key order
specifier|private
name|WritableComparator
name|comparator
decl_stmt|;
specifier|private
name|DataInputBuffer
name|inBuf
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
specifier|private
name|DataOutputBuffer
name|outBuf
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
specifier|private
name|WritableComparable
name|lastKey
decl_stmt|;
comment|/** Create the named map for keys of the named class. */
specifier|public
name|Writer
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|String
name|dirName
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|WritableComparable
argument_list|>
name|keyClass
parameter_list|,
name|Class
name|valClass
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|dirName
argument_list|,
name|WritableComparator
operator|.
name|get
argument_list|(
name|keyClass
argument_list|)
argument_list|,
name|valClass
argument_list|,
name|SequenceFile
operator|.
name|getCompressionType
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Create the named map for keys of the named class. */
specifier|public
name|Writer
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|String
name|dirName
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|WritableComparable
argument_list|>
name|keyClass
parameter_list|,
name|Class
name|valClass
parameter_list|,
name|CompressionType
name|compress
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|dirName
argument_list|,
name|WritableComparator
operator|.
name|get
argument_list|(
name|keyClass
argument_list|)
argument_list|,
name|valClass
argument_list|,
name|compress
argument_list|,
name|progress
argument_list|)
expr_stmt|;
block|}
comment|/** Create the named map for keys of the named class. */
specifier|public
name|Writer
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|String
name|dirName
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|WritableComparable
argument_list|>
name|keyClass
parameter_list|,
name|Class
name|valClass
parameter_list|,
name|CompressionType
name|compress
parameter_list|,
name|CompressionCodec
name|codec
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|dirName
argument_list|,
name|WritableComparator
operator|.
name|get
argument_list|(
name|keyClass
argument_list|)
argument_list|,
name|valClass
argument_list|,
name|compress
argument_list|,
name|codec
argument_list|,
name|progress
argument_list|)
expr_stmt|;
block|}
comment|/** Create the named map for keys of the named class. */
specifier|public
name|Writer
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|String
name|dirName
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|WritableComparable
argument_list|>
name|keyClass
parameter_list|,
name|Class
name|valClass
parameter_list|,
name|CompressionType
name|compress
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|dirName
argument_list|,
name|WritableComparator
operator|.
name|get
argument_list|(
name|keyClass
argument_list|)
argument_list|,
name|valClass
argument_list|,
name|compress
argument_list|)
expr_stmt|;
block|}
comment|/** Create the named map using the named key comparator. */
specifier|public
name|Writer
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|String
name|dirName
parameter_list|,
name|WritableComparator
name|comparator
parameter_list|,
name|Class
name|valClass
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|dirName
argument_list|,
name|comparator
argument_list|,
name|valClass
argument_list|,
name|SequenceFile
operator|.
name|getCompressionType
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Create the named map using the named key comparator. */
specifier|public
name|Writer
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|String
name|dirName
parameter_list|,
name|WritableComparator
name|comparator
parameter_list|,
name|Class
name|valClass
parameter_list|,
name|SequenceFile
operator|.
name|CompressionType
name|compress
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|dirName
argument_list|,
name|comparator
argument_list|,
name|valClass
argument_list|,
name|compress
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/** Create the named map using the named key comparator. */
specifier|public
name|Writer
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|String
name|dirName
parameter_list|,
name|WritableComparator
name|comparator
parameter_list|,
name|Class
name|valClass
parameter_list|,
name|SequenceFile
operator|.
name|CompressionType
name|compress
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|dirName
argument_list|,
name|comparator
argument_list|,
name|valClass
argument_list|,
name|compress
argument_list|,
operator|new
name|DefaultCodec
argument_list|()
argument_list|,
name|progress
argument_list|)
expr_stmt|;
block|}
comment|/** Create the named map using the named key comparator. */
specifier|public
name|Writer
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|String
name|dirName
parameter_list|,
name|WritableComparator
name|comparator
parameter_list|,
name|Class
name|valClass
parameter_list|,
name|SequenceFile
operator|.
name|CompressionType
name|compress
parameter_list|,
name|CompressionCodec
name|codec
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|indexInterval
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|INDEX_INTERVAL
argument_list|,
name|this
operator|.
name|indexInterval
argument_list|)
expr_stmt|;
name|this
operator|.
name|comparator
operator|=
name|comparator
expr_stmt|;
name|this
operator|.
name|lastKey
operator|=
name|comparator
operator|.
name|newKey
argument_list|()
expr_stmt|;
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
name|dirName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Mkdirs failed to create directory "
operator|+
name|dir
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|Path
name|dataFile
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|DATA_FILE_NAME
argument_list|)
decl_stmt|;
name|Path
name|indexFile
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|INDEX_FILE_NAME
argument_list|)
decl_stmt|;
name|Class
name|keyClass
init|=
name|comparator
operator|.
name|getKeyClass
argument_list|()
decl_stmt|;
name|this
operator|.
name|data
operator|=
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|,
name|dataFile
argument_list|,
name|keyClass
argument_list|,
name|valClass
argument_list|,
name|compress
argument_list|,
name|codec
argument_list|,
name|progress
argument_list|)
expr_stmt|;
name|this
operator|.
name|index
operator|=
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|,
name|indexFile
argument_list|,
name|keyClass
argument_list|,
name|LongWritable
operator|.
name|class
argument_list|,
name|CompressionType
operator|.
name|BLOCK
argument_list|,
name|progress
argument_list|)
expr_stmt|;
block|}
comment|/** The number of entries that are added before an index entry is added.*/
specifier|public
name|int
name|getIndexInterval
parameter_list|()
block|{
return|return
name|indexInterval
return|;
block|}
comment|/** Sets the index interval.      * @see #getIndexInterval()      */
specifier|public
name|void
name|setIndexInterval
parameter_list|(
name|int
name|interval
parameter_list|)
block|{
name|indexInterval
operator|=
name|interval
expr_stmt|;
block|}
comment|/** Sets the index interval and stores it in conf      * @see #getIndexInterval()      */
specifier|public
specifier|static
name|void
name|setIndexInterval
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|interval
parameter_list|)
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|INDEX_INTERVAL
argument_list|,
name|interval
argument_list|)
expr_stmt|;
block|}
comment|/** Close the map. */
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|data
operator|.
name|close
argument_list|()
expr_stmt|;
name|index
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** Append a key/value pair to the map.  The key must be greater or equal      * to the previous key added to the map. */
specifier|public
specifier|synchronized
name|void
name|append
parameter_list|(
name|WritableComparable
name|key
parameter_list|,
name|Writable
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|checkKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|size
operator|%
name|indexInterval
operator|==
literal|0
condition|)
block|{
comment|// add an index entry
name|position
operator|.
name|set
argument_list|(
name|data
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// point to current eof
name|index
operator|.
name|append
argument_list|(
name|key
argument_list|,
name|position
argument_list|)
expr_stmt|;
block|}
name|data
operator|.
name|append
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
comment|// append key/value to data
name|size
operator|++
expr_stmt|;
block|}
specifier|private
name|void
name|checkKey
parameter_list|(
name|WritableComparable
name|key
parameter_list|)
throws|throws
name|IOException
block|{
comment|// check that keys are well-ordered
if|if
condition|(
name|size
operator|!=
literal|0
operator|&&
name|comparator
operator|.
name|compare
argument_list|(
name|lastKey
argument_list|,
name|key
argument_list|)
operator|>
literal|0
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"key out of order: "
operator|+
name|key
operator|+
literal|" after "
operator|+
name|lastKey
argument_list|)
throw|;
comment|// update lastKey with a copy of key by writing and reading
name|outBuf
operator|.
name|reset
argument_list|()
expr_stmt|;
name|key
operator|.
name|write
argument_list|(
name|outBuf
argument_list|)
expr_stmt|;
comment|// write new key
name|inBuf
operator|.
name|reset
argument_list|(
name|outBuf
operator|.
name|getData
argument_list|()
argument_list|,
name|outBuf
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|lastKey
operator|.
name|readFields
argument_list|(
name|inBuf
argument_list|)
expr_stmt|;
comment|// read into lastKey
block|}
block|}
comment|/** Provide access to an existing map. */
specifier|public
specifier|static
class|class
name|Reader
implements|implements
name|java
operator|.
name|io
operator|.
name|Closeable
block|{
comment|/** Number of index entries to skip between each entry.  Zero by default.      * Setting this to values larger than zero can facilitate opening large map      * files using less memory. */
specifier|private
name|int
name|INDEX_SKIP
init|=
literal|0
decl_stmt|;
specifier|private
name|WritableComparator
name|comparator
decl_stmt|;
specifier|private
name|WritableComparable
name|nextKey
decl_stmt|;
specifier|private
name|long
name|seekPosition
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|int
name|seekIndex
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|long
name|firstPosition
decl_stmt|;
comment|// the data, on disk
specifier|private
name|SequenceFile
operator|.
name|Reader
name|data
decl_stmt|;
specifier|private
name|SequenceFile
operator|.
name|Reader
name|index
decl_stmt|;
comment|// whether the index Reader was closed
specifier|private
name|boolean
name|indexClosed
init|=
literal|false
decl_stmt|;
comment|// the index, in memory
specifier|private
name|int
name|count
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|WritableComparable
index|[]
name|keys
decl_stmt|;
specifier|private
name|long
index|[]
name|positions
decl_stmt|;
comment|/** Returns the class of keys in this file. */
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getKeyClass
parameter_list|()
block|{
return|return
name|data
operator|.
name|getKeyClass
argument_list|()
return|;
block|}
comment|/** Returns the class of values in this file. */
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getValueClass
parameter_list|()
block|{
return|return
name|data
operator|.
name|getValueClass
argument_list|()
return|;
block|}
comment|/** Construct a map reader for the named map.*/
specifier|public
name|Reader
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|dirName
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|fs
argument_list|,
name|dirName
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|INDEX_SKIP
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"io.map.index.skip"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/** Construct a map reader for the named map using the named comparator.*/
specifier|public
name|Reader
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|dirName
parameter_list|,
name|WritableComparator
name|comparator
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|fs
argument_list|,
name|dirName
argument_list|,
name|comparator
argument_list|,
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Hook to allow subclasses to defer opening streams until further      * initialization is complete.      * @see #createDataFileReader(FileSystem, Path, Configuration)      */
specifier|protected
name|Reader
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|dirName
parameter_list|,
name|WritableComparator
name|comparator
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|boolean
name|open
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|open
condition|)
block|{
name|open
argument_list|(
name|fs
argument_list|,
name|dirName
argument_list|,
name|comparator
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
specifier|synchronized
name|void
name|open
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|dirName
parameter_list|,
name|WritableComparator
name|comparator
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
name|dirName
argument_list|)
decl_stmt|;
name|Path
name|dataFile
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|DATA_FILE_NAME
argument_list|)
decl_stmt|;
name|Path
name|indexFile
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|INDEX_FILE_NAME
argument_list|)
decl_stmt|;
comment|// open the data
name|this
operator|.
name|data
operator|=
name|createDataFileReader
argument_list|(
name|fs
argument_list|,
name|dataFile
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|firstPosition
operator|=
name|data
operator|.
name|getPosition
argument_list|()
expr_stmt|;
if|if
condition|(
name|comparator
operator|==
literal|null
condition|)
name|this
operator|.
name|comparator
operator|=
name|WritableComparator
operator|.
name|get
argument_list|(
name|data
operator|.
name|getKeyClass
argument_list|()
operator|.
name|asSubclass
argument_list|(
name|WritableComparable
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|this
operator|.
name|comparator
operator|=
name|comparator
expr_stmt|;
comment|// open the index
name|this
operator|.
name|index
operator|=
operator|new
name|SequenceFile
operator|.
name|Reader
argument_list|(
name|fs
argument_list|,
name|indexFile
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**      * Override this method to specialize the type of      * {@link SequenceFile.Reader} returned.      */
specifier|protected
name|SequenceFile
operator|.
name|Reader
name|createDataFileReader
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|dataFile
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|SequenceFile
operator|.
name|Reader
argument_list|(
name|fs
argument_list|,
name|dataFile
argument_list|,
name|conf
argument_list|)
return|;
block|}
specifier|private
name|void
name|readIndex
parameter_list|()
throws|throws
name|IOException
block|{
comment|// read the index entirely into memory
if|if
condition|(
name|this
operator|.
name|keys
operator|!=
literal|null
condition|)
return|return;
name|this
operator|.
name|count
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|keys
operator|=
operator|new
name|WritableComparable
index|[
literal|1024
index|]
expr_stmt|;
name|this
operator|.
name|positions
operator|=
operator|new
name|long
index|[
literal|1024
index|]
expr_stmt|;
try|try
block|{
name|int
name|skip
init|=
name|INDEX_SKIP
decl_stmt|;
name|LongWritable
name|position
init|=
operator|new
name|LongWritable
argument_list|()
decl_stmt|;
name|WritableComparable
name|lastKey
init|=
literal|null
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|WritableComparable
name|k
init|=
name|comparator
operator|.
name|newKey
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|index
operator|.
name|next
argument_list|(
name|k
argument_list|,
name|position
argument_list|)
condition|)
break|break;
comment|// check order to make sure comparator is compatible
if|if
condition|(
name|lastKey
operator|!=
literal|null
operator|&&
name|comparator
operator|.
name|compare
argument_list|(
name|lastKey
argument_list|,
name|k
argument_list|)
operator|>
literal|0
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"key out of order: "
operator|+
name|k
operator|+
literal|" after "
operator|+
name|lastKey
argument_list|)
throw|;
name|lastKey
operator|=
name|k
expr_stmt|;
if|if
condition|(
name|skip
operator|>
literal|0
condition|)
block|{
name|skip
operator|--
expr_stmt|;
continue|continue;
comment|// skip this entry
block|}
else|else
block|{
name|skip
operator|=
name|INDEX_SKIP
expr_stmt|;
comment|// reset skip
block|}
if|if
condition|(
name|count
operator|==
name|keys
operator|.
name|length
condition|)
block|{
comment|// time to grow arrays
name|int
name|newLength
init|=
operator|(
name|keys
operator|.
name|length
operator|*
literal|3
operator|)
operator|/
literal|2
decl_stmt|;
name|WritableComparable
index|[]
name|newKeys
init|=
operator|new
name|WritableComparable
index|[
name|newLength
index|]
decl_stmt|;
name|long
index|[]
name|newPositions
init|=
operator|new
name|long
index|[
name|newLength
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|keys
argument_list|,
literal|0
argument_list|,
name|newKeys
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|positions
argument_list|,
literal|0
argument_list|,
name|newPositions
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|keys
operator|=
name|newKeys
expr_stmt|;
name|positions
operator|=
name|newPositions
expr_stmt|;
block|}
name|keys
index|[
name|count
index|]
operator|=
name|k
expr_stmt|;
name|positions
index|[
name|count
index|]
operator|=
name|position
operator|.
name|get
argument_list|()
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unexpected EOF reading "
operator|+
name|index
operator|+
literal|" at entry #"
operator|+
name|count
operator|+
literal|".  Ignoring."
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|indexClosed
operator|=
literal|true
expr_stmt|;
name|index
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Re-positions the reader before its first key. */
specifier|public
specifier|synchronized
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|data
operator|.
name|seek
argument_list|(
name|firstPosition
argument_list|)
expr_stmt|;
block|}
comment|/** Get the key at approximately the middle of the file.      *       * @throws IOException      */
specifier|public
specifier|synchronized
name|WritableComparable
name|midKey
parameter_list|()
throws|throws
name|IOException
block|{
name|readIndex
argument_list|()
expr_stmt|;
name|int
name|pos
init|=
operator|(
operator|(
name|count
operator|-
literal|1
operator|)
operator|/
literal|2
operator|)
decl_stmt|;
comment|// middle of the index
if|if
condition|(
name|pos
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"MapFile empty"
argument_list|)
throw|;
block|}
return|return
name|keys
index|[
name|pos
index|]
return|;
block|}
comment|/** Reads the final key from the file.      *      * @param key key to read into      */
specifier|public
specifier|synchronized
name|void
name|finalKey
parameter_list|(
name|WritableComparable
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|originalPosition
init|=
name|data
operator|.
name|getPosition
argument_list|()
decl_stmt|;
comment|// save position
try|try
block|{
name|readIndex
argument_list|()
expr_stmt|;
comment|// make sure index is valid
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
name|data
operator|.
name|seek
argument_list|(
name|positions
index|[
name|count
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// skip to last indexed entry
block|}
else|else
block|{
name|reset
argument_list|()
expr_stmt|;
comment|// start at the beginning
block|}
while|while
condition|(
name|data
operator|.
name|next
argument_list|(
name|key
argument_list|)
condition|)
block|{}
comment|// scan to eof
block|}
finally|finally
block|{
name|data
operator|.
name|seek
argument_list|(
name|originalPosition
argument_list|)
expr_stmt|;
comment|// restore position
block|}
block|}
comment|/** Positions the reader at the named key, or if none such exists, at the      * first entry after the named key.  Returns true iff the named key exists      * in this map.      */
specifier|public
specifier|synchronized
name|boolean
name|seek
parameter_list|(
name|WritableComparable
name|key
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|seekInternal
argument_list|(
name|key
argument_list|)
operator|==
literal|0
return|;
block|}
comment|/**       * Positions the reader at the named key, or if none such exists, at the      * first entry after the named key.      *      * @return  0   - exact match found      *< 0 - positioned at next record      *          1   - no more records in file      */
specifier|private
specifier|synchronized
name|int
name|seekInternal
parameter_list|(
name|WritableComparable
name|key
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|seekInternal
argument_list|(
name|key
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**       * Positions the reader at the named key, or if none such exists, at the      * key that falls just before or just after dependent on how the      *<code>before</code> parameter is set.      *       * @param before - IF true, and<code>key</code> does not exist, position      * file at entry that falls just before<code>key</code>.  Otherwise,      * position file at record that sorts just after.      * @return  0   - exact match found      *< 0 - positioned at next record      *          1   - no more records in file      */
specifier|private
specifier|synchronized
name|int
name|seekInternal
parameter_list|(
name|WritableComparable
name|key
parameter_list|,
specifier|final
name|boolean
name|before
parameter_list|)
throws|throws
name|IOException
block|{
name|readIndex
argument_list|()
expr_stmt|;
comment|// make sure index is read
if|if
condition|(
name|seekIndex
operator|!=
operator|-
literal|1
comment|// seeked before
operator|&&
name|seekIndex
operator|+
literal|1
operator|<
name|count
operator|&&
name|comparator
operator|.
name|compare
argument_list|(
name|key
argument_list|,
name|keys
index|[
name|seekIndex
operator|+
literal|1
index|]
argument_list|)
operator|<
literal|0
comment|// before next indexed
operator|&&
name|comparator
operator|.
name|compare
argument_list|(
name|key
argument_list|,
name|nextKey
argument_list|)
operator|>=
literal|0
condition|)
block|{
comment|// but after last seeked
comment|// do nothing
block|}
else|else
block|{
name|seekIndex
operator|=
name|binarySearch
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|seekIndex
operator|<
literal|0
condition|)
comment|// decode insertion point
name|seekIndex
operator|=
operator|-
name|seekIndex
operator|-
literal|2
expr_stmt|;
if|if
condition|(
name|seekIndex
operator|==
operator|-
literal|1
condition|)
comment|// belongs before first entry
name|seekPosition
operator|=
name|firstPosition
expr_stmt|;
comment|// use beginning of file
else|else
name|seekPosition
operator|=
name|positions
index|[
name|seekIndex
index|]
expr_stmt|;
comment|// else use index
block|}
name|data
operator|.
name|seek
argument_list|(
name|seekPosition
argument_list|)
expr_stmt|;
if|if
condition|(
name|nextKey
operator|==
literal|null
condition|)
name|nextKey
operator|=
name|comparator
operator|.
name|newKey
argument_list|()
expr_stmt|;
comment|// If we're looking for the key before, we need to keep track
comment|// of the position we got the current key as well as the position
comment|// of the key before it.
name|long
name|prevPosition
init|=
operator|-
literal|1
decl_stmt|;
name|long
name|curPosition
init|=
name|seekPosition
decl_stmt|;
while|while
condition|(
name|data
operator|.
name|next
argument_list|(
name|nextKey
argument_list|)
condition|)
block|{
name|int
name|c
init|=
name|comparator
operator|.
name|compare
argument_list|(
name|key
argument_list|,
name|nextKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|<=
literal|0
condition|)
block|{
comment|// at or beyond desired
if|if
condition|(
name|before
operator|&&
name|c
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|prevPosition
operator|==
operator|-
literal|1
condition|)
block|{
comment|// We're on the first record of this index block
comment|// and we've already passed the search key. Therefore
comment|// we must be at the beginning of the file, so seek
comment|// to the beginning of this block and return c
name|data
operator|.
name|seek
argument_list|(
name|curPosition
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// We have a previous record to back up to
name|data
operator|.
name|seek
argument_list|(
name|prevPosition
argument_list|)
expr_stmt|;
name|data
operator|.
name|next
argument_list|(
name|nextKey
argument_list|)
expr_stmt|;
comment|// now that we've rewound, the search key must be greater than this key
return|return
literal|1
return|;
block|}
block|}
return|return
name|c
return|;
block|}
if|if
condition|(
name|before
condition|)
block|{
name|prevPosition
operator|=
name|curPosition
expr_stmt|;
name|curPosition
operator|=
name|data
operator|.
name|getPosition
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|1
return|;
block|}
specifier|private
name|int
name|binarySearch
parameter_list|(
name|WritableComparable
name|key
parameter_list|)
block|{
name|int
name|low
init|=
literal|0
decl_stmt|;
name|int
name|high
init|=
name|count
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|low
operator|<=
name|high
condition|)
block|{
name|int
name|mid
init|=
operator|(
name|low
operator|+
name|high
operator|)
operator|>>>
literal|1
decl_stmt|;
name|WritableComparable
name|midVal
init|=
name|keys
index|[
name|mid
index|]
decl_stmt|;
name|int
name|cmp
init|=
name|comparator
operator|.
name|compare
argument_list|(
name|midVal
argument_list|,
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|<
literal|0
condition|)
name|low
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
elseif|else
if|if
condition|(
name|cmp
operator|>
literal|0
condition|)
name|high
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
else|else
return|return
name|mid
return|;
comment|// key found
block|}
return|return
operator|-
operator|(
name|low
operator|+
literal|1
operator|)
return|;
comment|// key not found.
block|}
comment|/** Read the next key/value pair in the map into<code>key</code> and      *<code>val</code>.  Returns true if such a pair exists and false when at      * the end of the map */
specifier|public
specifier|synchronized
name|boolean
name|next
parameter_list|(
name|WritableComparable
name|key
parameter_list|,
name|Writable
name|val
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|data
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
return|;
block|}
comment|/** Return the value for the named key, or null if none exists. */
specifier|public
specifier|synchronized
name|Writable
name|get
parameter_list|(
name|WritableComparable
name|key
parameter_list|,
name|Writable
name|val
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|seek
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|data
operator|.
name|getCurrentValue
argument_list|(
name|val
argument_list|)
expr_stmt|;
return|return
name|val
return|;
block|}
else|else
return|return
literal|null
return|;
block|}
comment|/**       * Finds the record that is the closest match to the specified key.      * Returns<code>key</code> or if it does not exist, at the first entry      * after the named key.      *  -     * @param key       - key that we're trying to find -     * @param val       - data value if key is found -     * @return          - the key that was the closest match or null if eof.      */
specifier|public
specifier|synchronized
name|WritableComparable
name|getClosest
parameter_list|(
name|WritableComparable
name|key
parameter_list|,
name|Writable
name|val
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getClosest
argument_list|(
name|key
argument_list|,
name|val
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**       * Finds the record that is the closest match to the specified key.      *       * @param key       - key that we're trying to find      * @param val       - data value if key is found      * @param before    - IF true, and<code>key</code> does not exist, return      * the first entry that falls just before the<code>key</code>.  Otherwise,      * return the record that sorts just after.      * @return          - the key that was the closest match or null if eof.      */
specifier|public
specifier|synchronized
name|WritableComparable
name|getClosest
parameter_list|(
name|WritableComparable
name|key
parameter_list|,
name|Writable
name|val
parameter_list|,
specifier|final
name|boolean
name|before
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|c
init|=
name|seekInternal
argument_list|(
name|key
argument_list|,
name|before
argument_list|)
decl_stmt|;
comment|// If we didn't get an exact match, and we ended up in the wrong
comment|// direction relative to the query key, return null since we
comment|// must be at the beginning or end of the file.
if|if
condition|(
operator|(
operator|!
name|before
operator|&&
name|c
operator|>
literal|0
operator|)
operator|||
operator|(
name|before
operator|&&
name|c
operator|<
literal|0
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|data
operator|.
name|getCurrentValue
argument_list|(
name|val
argument_list|)
expr_stmt|;
return|return
name|nextKey
return|;
block|}
comment|/** Close the map. */
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|indexClosed
condition|)
block|{
name|index
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|data
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Renames an existing map directory. */
specifier|public
specifier|static
name|void
name|rename
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|oldName
parameter_list|,
name|String
name|newName
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|oldDir
init|=
operator|new
name|Path
argument_list|(
name|oldName
argument_list|)
decl_stmt|;
name|Path
name|newDir
init|=
operator|new
name|Path
argument_list|(
name|newName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|rename
argument_list|(
name|oldDir
argument_list|,
name|newDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not rename "
operator|+
name|oldDir
operator|+
literal|" to "
operator|+
name|newDir
argument_list|)
throw|;
block|}
block|}
comment|/** Deletes the named map file. */
specifier|public
specifier|static
name|void
name|delete
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Path
name|data
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|DATA_FILE_NAME
argument_list|)
decl_stmt|;
name|Path
name|index
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|INDEX_FILE_NAME
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|data
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|index
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * This method attempts to fix a corrupt MapFile by re-creating its index.    * @param fs filesystem    * @param dir directory containing the MapFile data and index    * @param keyClass key class (has to be a subclass of Writable)    * @param valueClass value class (has to be a subclass of Writable)    * @param dryrun do not perform any changes, just report what needs to be done    * @return number of valid entries in this MapFile, or -1 if no fixing was needed    * @throws Exception    */
specifier|public
specifier|static
name|long
name|fix
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|dir
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|keyClass
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|valueClass
parameter_list|,
name|boolean
name|dryrun
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|dr
init|=
operator|(
name|dryrun
condition|?
literal|"[DRY RUN ] "
else|:
literal|""
operator|)
decl_stmt|;
name|Path
name|data
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|DATA_FILE_NAME
argument_list|)
decl_stmt|;
name|Path
name|index
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|INDEX_FILE_NAME
argument_list|)
decl_stmt|;
name|int
name|indexInterval
init|=
literal|128
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|data
argument_list|)
condition|)
block|{
comment|// there's nothing we can do to fix this!
throw|throw
operator|new
name|Exception
argument_list|(
name|dr
operator|+
literal|"Missing data file in "
operator|+
name|dir
operator|+
literal|", impossible to fix this."
argument_list|)
throw|;
block|}
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|index
argument_list|)
condition|)
block|{
comment|// no fixing needed
return|return
operator|-
literal|1
return|;
block|}
name|SequenceFile
operator|.
name|Reader
name|dataReader
init|=
operator|new
name|SequenceFile
operator|.
name|Reader
argument_list|(
name|fs
argument_list|,
name|data
argument_list|,
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dataReader
operator|.
name|getKeyClass
argument_list|()
operator|.
name|equals
argument_list|(
name|keyClass
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
name|dr
operator|+
literal|"Wrong key class in "
operator|+
name|dir
operator|+
literal|", expected"
operator|+
name|keyClass
operator|.
name|getName
argument_list|()
operator|+
literal|", got "
operator|+
name|dataReader
operator|.
name|getKeyClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|dataReader
operator|.
name|getValueClass
argument_list|()
operator|.
name|equals
argument_list|(
name|valueClass
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
name|dr
operator|+
literal|"Wrong value class in "
operator|+
name|dir
operator|+
literal|", expected"
operator|+
name|valueClass
operator|.
name|getName
argument_list|()
operator|+
literal|", got "
operator|+
name|dataReader
operator|.
name|getValueClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|long
name|cnt
init|=
literal|0L
decl_stmt|;
name|Writable
name|key
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|keyClass
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Writable
name|value
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|valueClass
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|SequenceFile
operator|.
name|Writer
name|indexWriter
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|dryrun
condition|)
name|indexWriter
operator|=
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|,
name|index
argument_list|,
name|keyClass
argument_list|,
name|LongWritable
operator|.
name|class
argument_list|)
expr_stmt|;
try|try
block|{
name|long
name|pos
init|=
literal|0L
decl_stmt|;
name|LongWritable
name|position
init|=
operator|new
name|LongWritable
argument_list|()
decl_stmt|;
while|while
condition|(
name|dataReader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
condition|)
block|{
name|cnt
operator|++
expr_stmt|;
if|if
condition|(
name|cnt
operator|%
name|indexInterval
operator|==
literal|0
condition|)
block|{
name|position
operator|.
name|set
argument_list|(
name|pos
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dryrun
condition|)
name|indexWriter
operator|.
name|append
argument_list|(
name|key
argument_list|,
name|position
argument_list|)
expr_stmt|;
block|}
name|pos
operator|=
name|dataReader
operator|.
name|getPosition
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// truncated data file. swallow it.
block|}
name|dataReader
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|dryrun
condition|)
name|indexWriter
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|cnt
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|usage
init|=
literal|"Usage: MapFile inFile outFile"
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|usage
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
name|in
init|=
name|args
index|[
literal|0
index|]
decl_stmt|;
name|String
name|out
init|=
name|args
index|[
literal|1
index|]
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|MapFile
operator|.
name|Reader
name|reader
init|=
operator|new
name|MapFile
operator|.
name|Reader
argument_list|(
name|fs
argument_list|,
name|in
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|MapFile
operator|.
name|Writer
name|writer
init|=
operator|new
name|MapFile
operator|.
name|Writer
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|out
argument_list|,
name|reader
operator|.
name|getKeyClass
argument_list|()
operator|.
name|asSubclass
argument_list|(
name|WritableComparable
operator|.
name|class
argument_list|)
argument_list|,
name|reader
operator|.
name|getValueClass
argument_list|()
argument_list|)
decl_stmt|;
name|WritableComparable
name|key
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|reader
operator|.
name|getKeyClass
argument_list|()
operator|.
name|asSubclass
argument_list|(
name|WritableComparable
operator|.
name|class
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Writable
name|value
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|reader
operator|.
name|getValueClass
argument_list|()
operator|.
name|asSubclass
argument_list|(
name|Writable
operator|.
name|class
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
condition|)
comment|// copy all entries
name|writer
operator|.
name|append
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

