begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_comment
comment|/**  * Wraps an array of KeyedData items as a Writable. The array elements  * may be null.  */
end_comment

begin_class
specifier|public
class|class
name|KeyedDataArrayWritable
implements|implements
name|Writable
block|{
specifier|private
specifier|final
specifier|static
name|KeyedData
name|NULL_KEYEDDATA
init|=
operator|new
name|KeyedData
argument_list|()
decl_stmt|;
specifier|private
name|KeyedData
index|[]
name|m_data
decl_stmt|;
comment|/**    * Make a record of length 0    */
specifier|public
name|KeyedDataArrayWritable
parameter_list|()
block|{
name|m_data
operator|=
operator|new
name|KeyedData
index|[
literal|0
index|]
expr_stmt|;
block|}
comment|/** @return the array of KeyedData */
specifier|public
name|KeyedData
index|[]
name|get
parameter_list|()
block|{
return|return
name|m_data
return|;
block|}
comment|/**    * Sets the KeyedData array    *     * @param data array of KeyedData    */
specifier|public
name|void
name|set
parameter_list|(
name|KeyedData
index|[]
name|data
parameter_list|)
block|{
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"KeyedData[] cannot be null"
argument_list|)
throw|;
block|}
name|m_data
operator|=
name|data
expr_stmt|;
block|}
comment|// Writable
comment|/** {@inheritDoc} */
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|len
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|m_data
operator|=
operator|new
name|KeyedData
index|[
name|len
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|m_data
index|[
name|i
index|]
operator|=
operator|new
name|KeyedData
argument_list|()
expr_stmt|;
name|m_data
index|[
name|i
index|]
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** {@inheritDoc} */
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|len
init|=
name|m_data
operator|.
name|length
decl_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|len
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|m_data
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|m_data
index|[
name|i
index|]
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|NULL_KEYEDDATA
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

