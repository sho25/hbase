begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HStoreKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|MapWritable
implements|implements
name|Writable
implements|,
name|Map
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
block|{
specifier|private
name|String
name|keyClass
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|valueClass
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|mapClass
init|=
literal|null
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
name|instance
init|=
literal|null
decl_stmt|;
comment|/**    * Default constructor used by writable    */
specifier|public
name|MapWritable
parameter_list|()
block|{}
comment|/**    * @param keyClass the class of the keys    * @param valueClass the class of the values    * @param instance the Map to be wrapped in this Writable    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|MapWritable
parameter_list|(
name|Class
name|keyClass
parameter_list|,
name|Class
name|valueClass
parameter_list|,
name|Map
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
name|instance
parameter_list|)
block|{
name|this
operator|.
name|keyClass
operator|=
name|keyClass
operator|.
name|getName
argument_list|()
expr_stmt|;
name|this
operator|.
name|valueClass
operator|=
name|valueClass
operator|.
name|getName
argument_list|()
expr_stmt|;
name|this
operator|.
name|instance
operator|=
name|instance
expr_stmt|;
name|this
operator|.
name|mapClass
operator|=
name|instance
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|checkInitialized
parameter_list|()
block|{
if|if
condition|(
name|keyClass
operator|==
literal|null
operator|||
name|valueClass
operator|==
literal|null
operator|||
name|mapClass
operator|==
literal|null
operator|||
name|instance
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"object has not been properly initialized"
argument_list|)
throw|;
block|}
block|}
comment|/** {@inheritDoc} */
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|checkInitialized
argument_list|()
expr_stmt|;
name|instance
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|boolean
name|containsKey
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|checkInitialized
argument_list|()
expr_stmt|;
return|return
name|instance
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|boolean
name|containsValue
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|checkInitialized
argument_list|()
expr_stmt|;
return|return
name|instance
operator|.
name|containsValue
argument_list|(
name|value
argument_list|)
return|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
argument_list|>
name|entrySet
parameter_list|()
block|{
name|checkInitialized
argument_list|()
expr_stmt|;
return|return
name|instance
operator|.
name|entrySet
argument_list|()
return|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|Writable
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|checkInitialized
argument_list|()
expr_stmt|;
return|return
name|instance
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/**    * Returns the value to which this map maps the specified key    * @param key    * @return value associated with specified key    */
specifier|public
name|Writable
name|get
parameter_list|(
name|WritableComparable
name|key
parameter_list|)
block|{
name|checkInitialized
argument_list|()
expr_stmt|;
return|return
name|instance
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
name|checkInitialized
argument_list|()
expr_stmt|;
return|return
name|instance
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|Set
argument_list|<
name|WritableComparable
argument_list|>
name|keySet
parameter_list|()
block|{
name|checkInitialized
argument_list|()
expr_stmt|;
return|return
name|instance
operator|.
name|keySet
argument_list|()
return|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|Writable
name|put
parameter_list|(
name|WritableComparable
name|key
parameter_list|,
name|Writable
name|value
parameter_list|)
block|{
name|checkInitialized
argument_list|()
expr_stmt|;
return|return
name|instance
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|void
name|putAll
parameter_list|(
name|Map
argument_list|<
name|?
extends|extends
name|WritableComparable
argument_list|,
name|?
extends|extends
name|Writable
argument_list|>
name|t
parameter_list|)
block|{
name|checkInitialized
argument_list|()
expr_stmt|;
name|instance
operator|.
name|putAll
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|Writable
name|remove
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|checkInitialized
argument_list|()
expr_stmt|;
return|return
name|instance
operator|.
name|remove
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/**    * Removes the mapping for this key from this map if it is present    * @param key    * @return value corresponding to key    */
specifier|public
name|Writable
name|remove
parameter_list|(
name|WritableComparable
name|key
parameter_list|)
block|{
name|checkInitialized
argument_list|()
expr_stmt|;
return|return
name|instance
operator|.
name|remove
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|int
name|size
parameter_list|()
block|{
name|checkInitialized
argument_list|()
expr_stmt|;
return|return
name|instance
operator|.
name|size
argument_list|()
return|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|Collection
argument_list|<
name|Writable
argument_list|>
name|values
parameter_list|()
block|{
name|checkInitialized
argument_list|()
expr_stmt|;
return|return
name|instance
operator|.
name|values
argument_list|()
return|;
block|}
comment|// Writable
comment|/** {@inheritDoc} */
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|checkInitialized
argument_list|()
expr_stmt|;
name|out
operator|.
name|writeUTF
argument_list|(
name|mapClass
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeUTF
argument_list|(
name|keyClass
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeUTF
argument_list|(
name|valueClass
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|instance
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
name|e
range|:
name|instance
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** {@inheritDoc} */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|mapClass
operator|=
name|in
operator|.
name|readUTF
argument_list|()
expr_stmt|;
name|keyClass
operator|=
name|in
operator|.
name|readUTF
argument_list|()
expr_stmt|;
name|valueClass
operator|=
name|in
operator|.
name|readUTF
argument_list|()
expr_stmt|;
name|instance
operator|=
operator|(
name|Map
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
operator|)
name|objectFactory
argument_list|(
name|mapClass
argument_list|)
expr_stmt|;
name|int
name|entries
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|entries
condition|;
name|i
operator|++
control|)
block|{
name|WritableComparable
name|key
init|=
operator|(
name|WritableComparable
operator|)
name|objectFactory
argument_list|(
name|keyClass
argument_list|)
decl_stmt|;
name|key
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|Writable
name|value
init|=
operator|(
name|Writable
operator|)
name|objectFactory
argument_list|(
name|valueClass
argument_list|)
decl_stmt|;
name|value
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|instance
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Object
name|objectFactory
parameter_list|(
name|String
name|className
parameter_list|)
throws|throws
name|IOException
block|{
name|Object
name|o
init|=
literal|null
decl_stmt|;
name|String
name|exceptionMessage
init|=
literal|null
decl_stmt|;
try|try
block|{
name|o
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|exceptionMessage
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
name|exceptionMessage
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
name|exceptionMessage
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|exceptionMessage
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"error instantiating "
operator|+
name|className
operator|+
literal|" because "
operator|+
name|exceptionMessage
argument_list|)
throw|;
block|}
block|}
return|return
name|o
return|;
block|}
comment|/**    * A simple main program to test this class.    *     * @param args not used    * @throws IOException    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|HStoreKey
index|[]
name|keys
init|=
block|{
operator|new
name|HStoreKey
argument_list|(
operator|new
name|Text
argument_list|(
literal|"row1"
argument_list|)
argument_list|,
name|HConstants
operator|.
name|COL_REGIONINFO
argument_list|)
block|,
operator|new
name|HStoreKey
argument_list|(
operator|new
name|Text
argument_list|(
literal|"row2"
argument_list|)
argument_list|,
name|HConstants
operator|.
name|COL_SERVER
argument_list|)
block|,
operator|new
name|HStoreKey
argument_list|(
operator|new
name|Text
argument_list|(
literal|"row3"
argument_list|)
argument_list|,
name|HConstants
operator|.
name|COL_STARTCODE
argument_list|)
block|}
decl_stmt|;
name|ImmutableBytesWritable
index|[]
name|values
init|=
block|{
operator|new
name|ImmutableBytesWritable
argument_list|(
literal|"value1"
operator|.
name|getBytes
argument_list|()
argument_list|)
block|,
operator|new
name|ImmutableBytesWritable
argument_list|(
literal|"value2"
operator|.
name|getBytes
argument_list|()
argument_list|)
block|,
operator|new
name|ImmutableBytesWritable
argument_list|(
literal|"value3"
operator|.
name|getBytes
argument_list|()
argument_list|)
block|}
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|MapWritable
name|inMap
init|=
operator|new
name|MapWritable
argument_list|(
name|HStoreKey
operator|.
name|class
argument_list|,
name|ImmutableBytesWritable
operator|.
name|class
argument_list|,
operator|(
name|Map
operator|)
operator|new
name|TreeMap
argument_list|<
name|HStoreKey
argument_list|,
name|ImmutableBytesWritable
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|inMap
operator|.
name|put
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|,
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|ByteArrayOutputStream
name|bytes
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutput
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
try|try
block|{
name|inMap
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|MapWritable
name|outMap
init|=
operator|new
name|MapWritable
argument_list|()
decl_stmt|;
name|DataInput
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|outMap
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
if|if
condition|(
name|outMap
operator|.
name|size
argument_list|()
operator|!=
name|inMap
operator|.
name|size
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"outMap.size()="
operator|+
name|outMap
operator|.
name|size
argument_list|()
operator|+
literal|" != "
operator|+
literal|"inMap.size()="
operator|+
name|inMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
name|e
range|:
name|inMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|outMap
operator|.
name|containsKey
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"outMap does not contain key "
operator|+
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|(
operator|(
name|WritableComparable
operator|)
name|outMap
operator|.
name|get
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
operator|)
operator|.
name|compareTo
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"output value for "
operator|+
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" != input value"
argument_list|)
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"it worked!"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

