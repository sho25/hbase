begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
import|;
end_import

begin_comment
comment|/**  * A table split corresponds to a key range [low, high)  */
end_comment

begin_class
specifier|public
class|class
name|TableSplit
implements|implements
name|InputSplit
block|{
specifier|private
name|Text
name|m_tableName
decl_stmt|;
specifier|private
name|Text
name|m_startRow
decl_stmt|;
specifier|private
name|Text
name|m_endRow
decl_stmt|;
comment|/** default constructor */
specifier|public
name|TableSplit
parameter_list|()
block|{
name|m_tableName
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
name|m_startRow
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
name|m_endRow
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
block|}
comment|/**    * Constructor    * @param tableName    * @param startRow    * @param endRow    */
specifier|public
name|TableSplit
parameter_list|(
name|Text
name|tableName
parameter_list|,
name|Text
name|startRow
parameter_list|,
name|Text
name|endRow
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|m_tableName
operator|.
name|set
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|m_startRow
operator|.
name|set
argument_list|(
name|startRow
argument_list|)
expr_stmt|;
name|m_endRow
operator|.
name|set
argument_list|(
name|endRow
argument_list|)
expr_stmt|;
block|}
comment|/** @return table name */
specifier|public
name|Text
name|getTableName
parameter_list|()
block|{
return|return
name|m_tableName
return|;
block|}
comment|/** @return starting row key */
specifier|public
name|Text
name|getStartRow
parameter_list|()
block|{
return|return
name|m_startRow
return|;
block|}
comment|/** @return end row key */
specifier|public
name|Text
name|getEndRow
parameter_list|()
block|{
return|return
name|m_endRow
return|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|long
name|getLength
parameter_list|()
block|{
comment|// Not clear how to obtain this... seems to be used only for sorting splits
return|return
literal|0
return|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|String
index|[]
name|getLocations
parameter_list|()
block|{
comment|// Return a random node from the cluster for now
return|return
operator|new
name|String
index|[]
block|{ }
return|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|m_tableName
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|m_startRow
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|m_endRow
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|m_tableName
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|m_startRow
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|m_endRow
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|m_tableName
operator|+
literal|","
operator|+
name|m_startRow
operator|+
literal|","
operator|+
name|m_endRow
return|;
block|}
block|}
end_class

end_unit

