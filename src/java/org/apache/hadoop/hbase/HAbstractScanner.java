begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataInputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_comment
comment|/*******************************************************************************  * Abstract base class that implements the HScannerInterface.  * Used by the concrete HMemcacheScanner and HStoreScanners  ******************************************************************************/
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|HAbstractScanner
implements|implements
name|HScannerInterface
block|{
comment|// Pattern to determine if a column key is a regex
specifier|private
specifier|static
name|Pattern
name|isRegexPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^.*[\\\\+|^&*$\\[\\]\\}{)(]+.*$"
argument_list|)
decl_stmt|;
comment|// The kind of match we are doing on a column:
specifier|private
specifier|static
enum|enum
name|MATCH_TYPE
block|{
name|FAMILY_ONLY
block|,
comment|// Just check the column family name
name|REGEX
block|,
comment|// Column family + matches regex
name|SIMPLE
comment|// Literal matching
block|}
empty_stmt|;
comment|// This class provides column matching functions that are more sophisticated
comment|// than a simple string compare. There are three types of matching:
comment|// 1. Match on the column family name only
comment|// 2. Match on the column family + column key regex
comment|// 3. Simple match: compare column family + column key literally
specifier|private
class|class
name|ColumnMatcher
block|{
specifier|private
name|MATCH_TYPE
name|matchType
decl_stmt|;
specifier|private
name|String
name|family
decl_stmt|;
specifier|private
name|Pattern
name|columnMatcher
decl_stmt|;
specifier|private
name|Text
name|col
decl_stmt|;
name|ColumnMatcher
parameter_list|(
name|Text
name|col
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|column
init|=
name|col
operator|.
name|toString
argument_list|()
decl_stmt|;
try|try
block|{
name|int
name|colpos
init|=
name|column
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|colpos
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Column name has no family indicator."
argument_list|)
throw|;
block|}
name|String
name|columnkey
init|=
name|column
operator|.
name|substring
argument_list|(
name|colpos
argument_list|)
decl_stmt|;
if|if
condition|(
name|columnkey
operator|==
literal|null
operator|||
name|columnkey
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|this
operator|.
name|matchType
operator|=
name|MATCH_TYPE
operator|.
name|FAMILY_ONLY
expr_stmt|;
name|this
operator|.
name|family
operator|=
name|column
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|colpos
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isRegexPattern
operator|.
name|matcher
argument_list|(
name|columnkey
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
name|this
operator|.
name|matchType
operator|=
name|MATCH_TYPE
operator|.
name|REGEX
expr_stmt|;
name|this
operator|.
name|columnMatcher
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|column
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|matchType
operator|=
name|MATCH_TYPE
operator|.
name|SIMPLE
expr_stmt|;
name|this
operator|.
name|col
operator|=
name|col
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Column: "
operator|+
name|column
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|// Matching method
name|boolean
name|matches
parameter_list|(
name|Text
name|col
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|matchType
operator|==
name|MATCH_TYPE
operator|.
name|SIMPLE
condition|)
block|{
return|return
name|col
operator|.
name|equals
argument_list|(
name|this
operator|.
name|col
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|matchType
operator|==
name|MATCH_TYPE
operator|.
name|FAMILY_ONLY
condition|)
block|{
return|return
name|col
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
name|this
operator|.
name|family
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|matchType
operator|==
name|MATCH_TYPE
operator|.
name|REGEX
condition|)
block|{
return|return
name|this
operator|.
name|columnMatcher
operator|.
name|matcher
argument_list|(
name|col
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid match type: "
operator|+
name|this
operator|.
name|matchType
argument_list|)
throw|;
block|}
block|}
block|}
specifier|protected
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|Vector
argument_list|<
name|ColumnMatcher
argument_list|>
argument_list|>
name|okCols
decl_stmt|;
comment|// Holds matchers for each column family
specifier|protected
name|boolean
name|scannerClosed
init|=
literal|false
decl_stmt|;
comment|// True when scanning is done
specifier|protected
name|HStoreKey
name|keys
index|[]
decl_stmt|;
comment|// Keys retrieved from the sources
specifier|protected
name|BytesWritable
name|vals
index|[]
decl_stmt|;
comment|// Values that correspond to those keys
specifier|protected
name|long
name|timestamp
decl_stmt|;
comment|// The timestamp to match entries against
specifier|protected
name|DataOutputBuffer
name|outbuf
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
specifier|protected
name|DataInputBuffer
name|inbuf
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
comment|/** Constructor for abstract base class */
name|HAbstractScanner
parameter_list|(
name|long
name|timestamp
parameter_list|,
name|Text
index|[]
name|targetCols
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|this
operator|.
name|okCols
operator|=
operator|new
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|Vector
argument_list|<
name|ColumnMatcher
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|targetCols
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Text
name|family
init|=
name|HStoreKey
operator|.
name|extractFamily
argument_list|(
name|targetCols
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|Vector
argument_list|<
name|ColumnMatcher
argument_list|>
name|matchers
init|=
name|okCols
operator|.
name|get
argument_list|(
name|family
argument_list|)
decl_stmt|;
if|if
condition|(
name|matchers
operator|==
literal|null
condition|)
block|{
name|matchers
operator|=
operator|new
name|Vector
argument_list|<
name|ColumnMatcher
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|matchers
operator|.
name|add
argument_list|(
operator|new
name|ColumnMatcher
argument_list|(
name|targetCols
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|okCols
operator|.
name|put
argument_list|(
name|family
argument_list|,
name|matchers
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * For a particular column i, find all the matchers defined for the column.    * Compare the column family and column key using the matchers. The first one    * that matches returns true. If no matchers are successful, return false.    *     * @param i index into the keys array    * @return true  - if any of the matchers for the column match the column family    *                 and the column key.    *                     * @throws IOException    */
name|boolean
name|columnMatch
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|Text
name|column
init|=
name|keys
index|[
name|i
index|]
operator|.
name|getColumn
argument_list|()
decl_stmt|;
name|Text
name|family
init|=
name|HStoreKey
operator|.
name|extractFamily
argument_list|(
name|column
argument_list|)
decl_stmt|;
name|Vector
argument_list|<
name|ColumnMatcher
argument_list|>
name|matchers
init|=
name|okCols
operator|.
name|get
argument_list|(
name|family
argument_list|)
decl_stmt|;
if|if
condition|(
name|matchers
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|m
init|=
literal|0
init|;
name|m
operator|<
name|matchers
operator|.
name|size
argument_list|()
condition|;
name|m
operator|++
control|)
block|{
if|if
condition|(
name|matchers
operator|.
name|get
argument_list|(
name|m
argument_list|)
operator|.
name|matches
argument_list|(
name|column
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * If the user didn't want to start scanning at the first row, this method    * seeks to the requested row.    */
specifier|abstract
name|boolean
name|findFirstRow
parameter_list|(
name|int
name|i
parameter_list|,
name|Text
name|firstRow
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/** The concrete implementations provide a mechanism to find the next set of values */
specifier|abstract
name|boolean
name|getNext
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/** Mechanism used by concrete implementation to shut down a particular scanner */
specifier|abstract
name|void
name|closeSubScanner
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/** Mechanism used to shut down the whole scan */
specifier|public
specifier|abstract
name|void
name|close
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**    * Get the next set of values for this scanner.    *     * @param key - The key that matched    * @param results - all the results for that key.    * @return - true if a match was found    *     * @see org.apache.hadoop.hbase.HScannerInterface#next(org.apache.hadoop.hbase.HStoreKey, java.util.TreeMap)    */
specifier|public
name|boolean
name|next
parameter_list|(
name|HStoreKey
name|key
parameter_list|,
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|results
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Find the next row label (and timestamp)
name|Text
name|chosenRow
init|=
literal|null
decl_stmt|;
name|long
name|chosenTimestamp
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
while|while
condition|(
operator|(
name|keys
index|[
name|i
index|]
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|columnMatch
argument_list|(
name|i
argument_list|)
operator|)
operator|&&
operator|(
name|keys
index|[
name|i
index|]
operator|.
name|getTimestamp
argument_list|()
operator|<=
name|this
operator|.
name|timestamp
operator|)
operator|&&
operator|(
operator|(
name|chosenRow
operator|==
literal|null
operator|)
operator|||
operator|(
name|keys
index|[
name|i
index|]
operator|.
name|getRow
argument_list|()
operator|.
name|compareTo
argument_list|(
name|chosenRow
argument_list|)
operator|<
literal|0
operator|)
operator|||
operator|(
operator|(
name|keys
index|[
name|i
index|]
operator|.
name|getRow
argument_list|()
operator|.
name|compareTo
argument_list|(
name|chosenRow
argument_list|)
operator|==
literal|0
operator|)
operator|&&
operator|(
name|keys
index|[
name|i
index|]
operator|.
name|getTimestamp
argument_list|()
operator|>
name|chosenTimestamp
operator|)
operator|)
operator|)
condition|)
block|{
name|chosenRow
operator|=
operator|new
name|Text
argument_list|(
name|keys
index|[
name|i
index|]
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|chosenTimestamp
operator|=
name|keys
index|[
name|i
index|]
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Grab all the values that match this row/timestamp
name|boolean
name|insertedItem
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|chosenRow
operator|!=
literal|null
condition|)
block|{
name|key
operator|.
name|setRow
argument_list|(
name|chosenRow
argument_list|)
expr_stmt|;
name|key
operator|.
name|setVersion
argument_list|(
name|chosenTimestamp
argument_list|)
expr_stmt|;
name|key
operator|.
name|setColumn
argument_list|(
operator|new
name|Text
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// Fetch the data
while|while
condition|(
operator|(
name|keys
index|[
name|i
index|]
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|keys
index|[
name|i
index|]
operator|.
name|getRow
argument_list|()
operator|.
name|compareTo
argument_list|(
name|chosenRow
argument_list|)
operator|==
literal|0
operator|)
operator|&&
operator|(
name|keys
index|[
name|i
index|]
operator|.
name|getTimestamp
argument_list|()
operator|==
name|chosenTimestamp
operator|)
condition|)
block|{
if|if
condition|(
name|columnMatch
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|outbuf
operator|.
name|reset
argument_list|()
expr_stmt|;
name|vals
index|[
name|i
index|]
operator|.
name|write
argument_list|(
name|outbuf
argument_list|)
expr_stmt|;
name|byte
name|byteresults
index|[]
init|=
name|outbuf
operator|.
name|getData
argument_list|()
decl_stmt|;
name|inbuf
operator|.
name|reset
argument_list|(
name|byteresults
argument_list|,
name|outbuf
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|BytesWritable
name|tmpval
init|=
operator|new
name|BytesWritable
argument_list|()
decl_stmt|;
name|tmpval
operator|.
name|readFields
argument_list|(
name|inbuf
argument_list|)
expr_stmt|;
name|results
operator|.
name|put
argument_list|(
operator|new
name|Text
argument_list|(
name|keys
index|[
name|i
index|]
operator|.
name|getColumn
argument_list|()
argument_list|)
argument_list|,
name|tmpval
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|insertedItem
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|getNext
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|closeSubScanner
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Advance the current scanner beyond the chosen row, to
comment|// a valid timestamp, so we're ready next time.
while|while
condition|(
operator|(
name|keys
index|[
name|i
index|]
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|(
name|keys
index|[
name|i
index|]
operator|.
name|getRow
argument_list|()
operator|.
name|compareTo
argument_list|(
name|chosenRow
argument_list|)
operator|<=
literal|0
operator|)
operator|||
operator|(
name|keys
index|[
name|i
index|]
operator|.
name|getTimestamp
argument_list|()
operator|>
name|this
operator|.
name|timestamp
operator|)
operator|||
operator|(
operator|!
name|columnMatch
argument_list|(
name|i
argument_list|)
operator|)
operator|)
condition|)
block|{
name|getNext
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|insertedItem
return|;
block|}
block|}
end_class

end_unit

