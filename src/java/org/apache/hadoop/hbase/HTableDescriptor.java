begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_comment
comment|/**  * HTableDescriptor contains various facts about an HTable, like  * column families, maximum number of column versions, etc.  */
end_comment

begin_class
specifier|public
class|class
name|HTableDescriptor
implements|implements
name|WritableComparable
block|{
name|Text
name|name
decl_stmt|;
name|int
name|maxVersions
decl_stmt|;
name|TreeSet
argument_list|<
name|Text
argument_list|>
name|families
init|=
operator|new
name|TreeSet
argument_list|<
name|Text
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Legal table names can only contain 'word characters':    * i.e.<code>[a-zA-Z_0-9]</code>.    *     * Lets be restrictive until a reason to be otherwise.    */
specifier|private
specifier|static
specifier|final
name|Pattern
name|LEGAL_TABLE_NAME
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"[\\w-]+"
argument_list|)
decl_stmt|;
comment|/**    * Legal family names can only contain 'word characters' and    * end in a colon.    */
specifier|private
specifier|static
specifier|final
name|Pattern
name|LEGAL_FAMILY_NAME
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\w+:"
argument_list|)
decl_stmt|;
specifier|public
name|HTableDescriptor
parameter_list|()
block|{
name|this
operator|.
name|name
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
name|this
operator|.
name|families
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**    * Constructor.    * @param name Table name.    * @param maxVersions Number of versions of a column to keep.    * @throws IllegalArgumentException if passed a table name    * that is made of other than 'word' characters: i.e.    *<code>[a-zA-Z_0-9]    */
specifier|public
name|HTableDescriptor
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|maxVersions
parameter_list|)
block|{
name|Matcher
name|m
init|=
name|LEGAL_TABLE_NAME
operator|.
name|matcher
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|==
literal|null
operator|||
operator|!
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Table names can only "
operator|+
literal|"contain 'word characters': i.e. [a-zA-Z_0-9"
argument_list|)
throw|;
block|}
if|if
condition|(
name|maxVersions
operator|<=
literal|0
condition|)
block|{
comment|// TODO: Allow maxVersion of 0 to be the way you say
comment|// "Keep all versions".  Until there is support, consider
comment|// 0 -- or< 0 -- a configuration error.
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Maximum versions "
operator|+
literal|"must be positive"
argument_list|)
throw|;
block|}
name|this
operator|.
name|name
operator|=
operator|new
name|Text
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxVersions
operator|=
name|maxVersions
expr_stmt|;
block|}
specifier|public
name|Text
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|int
name|getMaxVersions
parameter_list|()
block|{
return|return
name|maxVersions
return|;
block|}
comment|/**    * Add a column family.    * @param family Column family name to add.  Column family names    * must end in a<code>:</code>    * @throws IllegalArgumentException if passed a table name    * that is made of other than 'word' characters: i.e.    *<code>[a-zA-Z_0-9]    */
specifier|public
name|void
name|addFamily
parameter_list|(
name|Text
name|family
parameter_list|)
block|{
name|String
name|familyStr
init|=
name|family
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Matcher
name|m
init|=
name|LEGAL_FAMILY_NAME
operator|.
name|matcher
argument_list|(
name|familyStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|==
literal|null
operator|||
operator|!
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Family names can "
operator|+
literal|"only contain 'word characters' and must end with a "
operator|+
literal|"':'"
argument_list|)
throw|;
block|}
name|families
operator|.
name|add
argument_list|(
name|family
argument_list|)
expr_stmt|;
block|}
comment|/** Do we contain a given column? */
specifier|public
name|boolean
name|hasFamily
parameter_list|(
name|Text
name|family
parameter_list|)
block|{
return|return
name|families
operator|.
name|contains
argument_list|(
name|family
argument_list|)
return|;
block|}
comment|/** All the column families in this table. */
specifier|public
name|TreeSet
argument_list|<
name|Text
argument_list|>
name|families
parameter_list|()
block|{
return|return
name|families
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"name: "
operator|+
name|this
operator|.
name|name
operator|.
name|toString
argument_list|()
operator|+
literal|", maxVersions: "
operator|+
name|this
operator|.
name|maxVersions
operator|+
literal|", families: "
operator|+
name|this
operator|.
name|families
return|;
block|}
comment|//////////////////////////////////////////////////////////////////////////////
comment|// Writable
comment|//////////////////////////////////////////////////////////////////////////////
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|name
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|maxVersions
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|families
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Text
argument_list|>
name|it
init|=
name|families
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|it
operator|.
name|next
argument_list|()
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|name
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxVersions
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|int
name|numCols
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|families
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numCols
condition|;
name|i
operator|++
control|)
block|{
name|Text
name|t
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|t
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|families
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
comment|//////////////////////////////////////////////////////////////////////////////
comment|// Comparable
comment|//////////////////////////////////////////////////////////////////////////////
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|HTableDescriptor
name|htd
init|=
operator|(
name|HTableDescriptor
operator|)
name|o
decl_stmt|;
name|int
name|result
init|=
name|name
operator|.
name|compareTo
argument_list|(
name|htd
operator|.
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|0
condition|)
block|{
name|result
operator|=
name|maxVersions
operator|-
name|htd
operator|.
name|maxVersions
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|==
literal|0
condition|)
block|{
name|result
operator|=
name|families
operator|.
name|size
argument_list|()
operator|-
name|htd
operator|.
name|families
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|==
literal|0
condition|)
block|{
name|Iterator
argument_list|<
name|Text
argument_list|>
name|it2
init|=
name|htd
operator|.
name|families
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Text
argument_list|>
name|it
init|=
name|families
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Text
name|family1
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Text
name|family2
init|=
name|it2
operator|.
name|next
argument_list|()
decl_stmt|;
name|result
operator|=
name|family1
operator|.
name|compareTo
argument_list|(
name|family2
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
return|return
name|result
return|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

