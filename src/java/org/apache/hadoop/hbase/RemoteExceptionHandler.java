begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_comment
comment|/**   * An immutable class which contains a static method for handling  * org.apache.hadoop.ipc.RemoteException exceptions.  */
end_comment

begin_class
specifier|public
class|class
name|RemoteExceptionHandler
block|{
specifier|private
name|RemoteExceptionHandler
parameter_list|()
block|{}
comment|// not instantiable
comment|/**    * Converts org.apache.hadoop.ipc.RemoteException into original exception,    * if possible.    *     * @param e original exception    * @throws IOException    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
name|void
name|handleRemoteException
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
throws|throws
name|IOException
block|{
name|Exception
name|ex
init|=
name|e
decl_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|RemoteException
condition|)
block|{
name|RemoteException
name|r
init|=
operator|(
name|RemoteException
operator|)
name|e
decl_stmt|;
name|Class
name|c
init|=
literal|null
decl_stmt|;
try|try
block|{
name|c
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|r
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|x
parameter_list|)
block|{
throw|throw
name|r
throw|;
block|}
name|Constructor
name|ctor
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Class
index|[]
name|parameterTypes
init|=
block|{
name|String
operator|.
name|class
block|}
decl_stmt|;
name|ctor
operator|=
name|c
operator|.
name|getConstructor
argument_list|(
name|parameterTypes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|x
parameter_list|)
block|{
throw|throw
name|r
throw|;
block|}
try|try
block|{
name|Object
index|[]
name|arguments
init|=
block|{
name|r
operator|.
name|getMessage
argument_list|()
block|}
decl_stmt|;
name|ex
operator|=
operator|(
name|Exception
operator|)
name|ctor
operator|.
name|newInstance
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|x
parameter_list|)
block|{
throw|throw
name|r
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|x
parameter_list|)
block|{
throw|throw
name|r
throw|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|x
parameter_list|)
block|{
throw|throw
name|r
throw|;
block|}
block|}
if|if
condition|(
name|ex
operator|instanceof
name|IOException
condition|)
block|{
name|IOException
name|io
init|=
operator|(
name|IOException
operator|)
name|ex
decl_stmt|;
throw|throw
name|io
throw|;
block|}
elseif|else
if|if
condition|(
name|ex
operator|instanceof
name|RuntimeException
condition|)
block|{
name|RuntimeException
name|re
init|=
operator|(
name|RuntimeException
operator|)
name|ex
decl_stmt|;
throw|throw
name|re
throw|;
block|}
else|else
block|{
name|AssertionError
name|a
init|=
operator|new
name|AssertionError
argument_list|(
literal|"unexpected exception"
argument_list|)
decl_stmt|;
name|a
operator|.
name|initCause
argument_list|(
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|a
throw|;
block|}
block|}
block|}
end_class

end_unit

