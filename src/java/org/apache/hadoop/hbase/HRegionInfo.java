begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_comment
comment|/**  * HRegion information.  * Contains HRegion id, start and end keys, a reference to this  * HRegions' table descriptor, etc.  */
end_comment

begin_class
specifier|public
class|class
name|HRegionInfo
implements|implements
name|WritableComparable
block|{
specifier|public
name|Text
name|regionName
decl_stmt|;
specifier|public
name|long
name|regionId
decl_stmt|;
specifier|public
name|Text
name|startKey
decl_stmt|;
specifier|public
name|Text
name|endKey
decl_stmt|;
specifier|public
name|boolean
name|offLine
decl_stmt|;
specifier|public
name|HTableDescriptor
name|tableDesc
decl_stmt|;
specifier|public
name|HRegionInfo
parameter_list|()
block|{
name|this
operator|.
name|regionId
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|tableDesc
operator|=
operator|new
name|HTableDescriptor
argument_list|()
expr_stmt|;
name|this
operator|.
name|startKey
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
name|this
operator|.
name|endKey
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
name|this
operator|.
name|regionName
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
name|this
operator|.
name|offLine
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|HRegionInfo
parameter_list|(
specifier|final
name|byte
index|[]
name|serializedBytes
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|()
expr_stmt|;
name|readFields
argument_list|(
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|serializedBytes
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|HRegionInfo
parameter_list|(
name|long
name|regionId
parameter_list|,
name|HTableDescriptor
name|tableDesc
parameter_list|,
name|Text
name|startKey
parameter_list|,
name|Text
name|endKey
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|this
operator|.
name|regionId
operator|=
name|regionId
expr_stmt|;
if|if
condition|(
name|tableDesc
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"tableDesc cannot be null"
argument_list|)
throw|;
block|}
name|this
operator|.
name|tableDesc
operator|=
name|tableDesc
expr_stmt|;
name|this
operator|.
name|startKey
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
if|if
condition|(
name|startKey
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|startKey
operator|.
name|set
argument_list|(
name|startKey
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|endKey
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
if|if
condition|(
name|endKey
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|endKey
operator|.
name|set
argument_list|(
name|endKey
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|regionName
operator|=
operator|new
name|Text
argument_list|(
name|tableDesc
operator|.
name|getName
argument_list|()
operator|+
literal|"_"
operator|+
operator|(
name|startKey
operator|==
literal|null
condition|?
literal|""
else|:
name|startKey
operator|.
name|toString
argument_list|()
operator|)
operator|+
literal|"_"
operator|+
name|regionId
argument_list|)
expr_stmt|;
name|this
operator|.
name|offLine
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"regionname: "
operator|+
name|this
operator|.
name|regionName
operator|.
name|toString
argument_list|()
operator|+
literal|", startKey:<"
operator|+
name|this
operator|.
name|startKey
operator|.
name|toString
argument_list|()
operator|+
literal|">, tableDesc: {"
operator|+
name|this
operator|.
name|tableDesc
operator|.
name|toString
argument_list|()
operator|+
literal|"}"
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|this
operator|.
name|compareTo
argument_list|(
name|o
argument_list|)
operator|==
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|this
operator|.
name|regionName
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|^=
name|Long
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|regionId
argument_list|)
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|^=
name|this
operator|.
name|startKey
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|^=
name|this
operator|.
name|endKey
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|^=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|offLine
argument_list|)
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|^=
name|this
operator|.
name|tableDesc
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
comment|//////////////////////////////////////////////////////////////////////////////
comment|// Writable
comment|//////////////////////////////////////////////////////////////////////////////
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|regionId
argument_list|)
expr_stmt|;
name|tableDesc
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|startKey
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|endKey
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|regionName
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|offLine
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|regionId
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableDesc
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|startKey
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|endKey
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|regionName
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|offLine
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
block|}
comment|//////////////////////////////////////////////////////////////////////////////
comment|// Comparable
comment|//////////////////////////////////////////////////////////////////////////////
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|HRegionInfo
name|other
init|=
operator|(
name|HRegionInfo
operator|)
name|o
decl_stmt|;
return|return
name|regionName
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|regionName
argument_list|)
return|;
block|}
block|}
end_class

end_unit

