begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|JenkinsHash
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|VersionedWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_comment
comment|/**  * HRegion information.  * Contains HRegion id, start and end keys, a reference to this  * HRegions' table descriptor, etc.  */
end_comment

begin_class
specifier|public
class|class
name|HRegionInfo
extends|extends
name|VersionedWritable
implements|implements
name|WritableComparable
block|{
specifier|private
specifier|final
name|byte
name|VERSION
init|=
literal|0
decl_stmt|;
comment|/**    * @param regionName    * @return the encodedName    */
specifier|public
specifier|static
name|int
name|encodeRegionName
parameter_list|(
specifier|final
name|byte
index|[]
name|regionName
parameter_list|)
block|{
return|return
name|Math
operator|.
name|abs
argument_list|(
name|JenkinsHash
operator|.
name|hash
argument_list|(
name|regionName
argument_list|,
name|regionName
operator|.
name|length
argument_list|,
literal|0
argument_list|)
argument_list|)
return|;
block|}
comment|/** delimiter used between portions of a region name */
specifier|public
specifier|static
specifier|final
name|int
name|DELIMITER
init|=
literal|','
decl_stmt|;
comment|/** HRegionInfo for root region */
specifier|public
specifier|static
specifier|final
name|HRegionInfo
name|ROOT_REGIONINFO
init|=
operator|new
name|HRegionInfo
argument_list|(
literal|0L
argument_list|,
name|HTableDescriptor
operator|.
name|ROOT_TABLEDESC
argument_list|)
decl_stmt|;
comment|/** HRegionInfo for first meta region */
specifier|public
specifier|static
specifier|final
name|HRegionInfo
name|FIRST_META_REGIONINFO
init|=
operator|new
name|HRegionInfo
argument_list|(
literal|1L
argument_list|,
name|HTableDescriptor
operator|.
name|META_TABLEDESC
argument_list|)
decl_stmt|;
specifier|private
name|byte
index|[]
name|endKey
init|=
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
decl_stmt|;
specifier|private
name|boolean
name|offLine
init|=
literal|false
decl_stmt|;
specifier|private
name|long
name|regionId
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|byte
index|[]
name|regionName
init|=
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
decl_stmt|;
specifier|private
name|String
name|regionNameStr
init|=
literal|""
decl_stmt|;
specifier|private
name|boolean
name|split
init|=
literal|false
decl_stmt|;
specifier|private
name|byte
index|[]
name|startKey
init|=
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
decl_stmt|;
specifier|protected
name|HTableDescriptor
name|tableDesc
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|hashCode
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|NO_HASH
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
specifier|volatile
name|int
name|encodedName
init|=
name|NO_HASH
decl_stmt|;
specifier|private
name|void
name|setHashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|this
operator|.
name|regionName
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|^=
name|this
operator|.
name|regionId
expr_stmt|;
name|result
operator|^=
name|this
operator|.
name|startKey
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|^=
name|this
operator|.
name|endKey
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|^=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|offLine
argument_list|)
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|^=
name|this
operator|.
name|tableDesc
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|this
operator|.
name|hashCode
operator|=
name|result
expr_stmt|;
block|}
comment|/**    * Private constructor used constructing HRegionInfo for the catalog root and    * first meta regions    */
specifier|private
name|HRegionInfo
parameter_list|(
name|long
name|regionId
parameter_list|,
name|HTableDescriptor
name|tableDesc
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|regionId
operator|=
name|regionId
expr_stmt|;
name|this
operator|.
name|tableDesc
operator|=
name|tableDesc
expr_stmt|;
name|this
operator|.
name|regionName
operator|=
name|createRegionName
argument_list|(
name|tableDesc
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
name|regionId
argument_list|)
expr_stmt|;
name|this
operator|.
name|regionNameStr
operator|=
name|Bytes
operator|.
name|toString
argument_list|(
name|this
operator|.
name|regionName
argument_list|)
expr_stmt|;
name|setHashCode
argument_list|()
expr_stmt|;
block|}
comment|/** Default constructor - creates empty object */
specifier|public
name|HRegionInfo
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableDesc
operator|=
operator|new
name|HTableDescriptor
argument_list|()
expr_stmt|;
block|}
comment|/**    * Construct HRegionInfo with explicit parameters    *     * @param tableDesc the table descriptor    * @param startKey first key in region    * @param endKey end of key range    * @throws IllegalArgumentException    */
specifier|public
name|HRegionInfo
parameter_list|(
specifier|final
name|HTableDescriptor
name|tableDesc
parameter_list|,
specifier|final
name|byte
index|[]
name|startKey
parameter_list|,
specifier|final
name|byte
index|[]
name|endKey
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|this
argument_list|(
name|tableDesc
argument_list|,
name|startKey
argument_list|,
name|endKey
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Construct HRegionInfo with explicit parameters    *     * @param tableDesc the table descriptor    * @param startKey first key in region    * @param endKey end of key range    * @param split true if this region has split and we have daughter regions    * regions that may or may not hold references to this region.    * @throws IllegalArgumentException    */
specifier|public
name|HRegionInfo
parameter_list|(
name|HTableDescriptor
name|tableDesc
parameter_list|,
specifier|final
name|byte
index|[]
name|startKey
parameter_list|,
specifier|final
name|byte
index|[]
name|endKey
parameter_list|,
specifier|final
name|boolean
name|split
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|this
argument_list|(
name|tableDesc
argument_list|,
name|startKey
argument_list|,
name|endKey
argument_list|,
name|split
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Construct HRegionInfo with explicit parameters    *     * @param tableDesc the table descriptor    * @param startKey first key in region    * @param endKey end of key range    * @param split true if this region has split and we have daughter regions    * regions that may or may not hold references to this region.    * @param regionid Region id to use.    * @throws IllegalArgumentException    */
specifier|public
name|HRegionInfo
parameter_list|(
name|HTableDescriptor
name|tableDesc
parameter_list|,
specifier|final
name|byte
index|[]
name|startKey
parameter_list|,
specifier|final
name|byte
index|[]
name|endKey
parameter_list|,
specifier|final
name|boolean
name|split
parameter_list|,
specifier|final
name|long
name|regionid
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|super
argument_list|()
expr_stmt|;
if|if
condition|(
name|tableDesc
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"tableDesc cannot be null"
argument_list|)
throw|;
block|}
name|this
operator|.
name|offLine
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|regionId
operator|=
name|regionid
expr_stmt|;
name|this
operator|.
name|regionName
operator|=
name|createRegionName
argument_list|(
name|tableDesc
operator|.
name|getName
argument_list|()
argument_list|,
name|startKey
argument_list|,
name|regionId
argument_list|)
expr_stmt|;
name|this
operator|.
name|regionNameStr
operator|=
name|Bytes
operator|.
name|toString
argument_list|(
name|this
operator|.
name|regionName
argument_list|)
expr_stmt|;
name|this
operator|.
name|split
operator|=
name|split
expr_stmt|;
name|this
operator|.
name|endKey
operator|=
name|endKey
operator|==
literal|null
condition|?
name|HConstants
operator|.
name|EMPTY_END_ROW
else|:
name|endKey
operator|.
name|clone
argument_list|()
expr_stmt|;
name|this
operator|.
name|startKey
operator|=
name|startKey
operator|==
literal|null
condition|?
name|HConstants
operator|.
name|EMPTY_START_ROW
else|:
name|startKey
operator|.
name|clone
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableDesc
operator|=
name|tableDesc
expr_stmt|;
name|setHashCode
argument_list|()
expr_stmt|;
block|}
comment|/**    * Costruct a copy of another HRegionInfo    *     * @param other    */
specifier|public
name|HRegionInfo
parameter_list|(
name|HRegionInfo
name|other
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|endKey
operator|=
name|other
operator|.
name|getEndKey
argument_list|()
expr_stmt|;
name|this
operator|.
name|offLine
operator|=
name|other
operator|.
name|isOffline
argument_list|()
expr_stmt|;
name|this
operator|.
name|regionId
operator|=
name|other
operator|.
name|getRegionId
argument_list|()
expr_stmt|;
name|this
operator|.
name|regionName
operator|=
name|other
operator|.
name|getRegionName
argument_list|()
expr_stmt|;
name|this
operator|.
name|regionNameStr
operator|=
name|Bytes
operator|.
name|toString
argument_list|(
name|this
operator|.
name|regionName
argument_list|)
expr_stmt|;
name|this
operator|.
name|split
operator|=
name|other
operator|.
name|isSplit
argument_list|()
expr_stmt|;
name|this
operator|.
name|startKey
operator|=
name|other
operator|.
name|getStartKey
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableDesc
operator|=
name|other
operator|.
name|getTableDesc
argument_list|()
expr_stmt|;
name|this
operator|.
name|hashCode
operator|=
name|other
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|this
operator|.
name|encodedName
operator|=
name|other
operator|.
name|getEncodedName
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|byte
index|[]
name|createRegionName
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
name|startKey
parameter_list|,
specifier|final
name|long
name|regionid
parameter_list|)
block|{
return|return
name|createRegionName
argument_list|(
name|tableName
argument_list|,
name|startKey
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|regionid
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Make a region name of passed parameters.    * @param tableName    * @param startKey Can be null    * @param id Region id.    * @return Region name made of passed tableName, startKey and id    */
specifier|public
specifier|static
name|byte
index|[]
name|createRegionName
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
name|startKey
parameter_list|,
specifier|final
name|String
name|id
parameter_list|)
block|{
return|return
name|createRegionName
argument_list|(
name|tableName
argument_list|,
name|startKey
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|id
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Make a region name of passed parameters.    * @param tableName    * @param startKey Can be null    * @param id Region id    * @return Region name made of passed tableName, startKey and id    */
specifier|public
specifier|static
name|byte
index|[]
name|createRegionName
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
name|startKey
parameter_list|,
specifier|final
name|byte
index|[]
name|id
parameter_list|)
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|tableName
operator|.
name|length
operator|+
literal|2
operator|+
name|id
operator|.
name|length
operator|+
operator|(
name|startKey
operator|==
literal|null
condition|?
literal|0
else|:
name|startKey
operator|.
name|length
operator|)
index|]
decl_stmt|;
name|int
name|offset
init|=
name|tableName
operator|.
name|length
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|tableName
argument_list|,
literal|0
argument_list|,
name|b
argument_list|,
literal|0
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|b
index|[
name|offset
operator|++
index|]
operator|=
name|DELIMITER
expr_stmt|;
if|if
condition|(
name|startKey
operator|!=
literal|null
operator|&&
name|startKey
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|startKey
argument_list|,
literal|0
argument_list|,
name|b
argument_list|,
name|offset
argument_list|,
name|startKey
operator|.
name|length
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|startKey
operator|.
name|length
expr_stmt|;
block|}
name|b
index|[
name|offset
operator|++
index|]
operator|=
name|DELIMITER
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|id
argument_list|,
literal|0
argument_list|,
name|b
argument_list|,
name|offset
argument_list|,
name|id
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|b
return|;
block|}
comment|/** @return the endKey */
specifier|public
name|byte
index|[]
name|getEndKey
parameter_list|()
block|{
return|return
name|endKey
return|;
block|}
comment|/** @return the regionId */
specifier|public
name|long
name|getRegionId
parameter_list|()
block|{
return|return
name|regionId
return|;
block|}
comment|/**    * @return the regionName as an array of bytes.    * @see #getRegionNameAsString()    */
specifier|public
name|byte
index|[]
name|getRegionName
parameter_list|()
block|{
return|return
name|regionName
return|;
block|}
comment|/**    * @return Region name as a String for use in logging, etc.    */
specifier|public
name|String
name|getRegionNameAsString
parameter_list|()
block|{
return|return
name|this
operator|.
name|regionNameStr
return|;
block|}
comment|/** @return the encoded region name */
specifier|public
specifier|synchronized
name|int
name|getEncodedName
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|encodedName
operator|==
name|NO_HASH
condition|)
block|{
name|this
operator|.
name|encodedName
operator|=
name|encodeRegionName
argument_list|(
name|this
operator|.
name|regionName
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|encodedName
return|;
block|}
comment|/** @return the startKey */
specifier|public
name|byte
index|[]
name|getStartKey
parameter_list|()
block|{
return|return
name|startKey
return|;
block|}
comment|/** @return the tableDesc */
specifier|public
name|HTableDescriptor
name|getTableDesc
parameter_list|()
block|{
return|return
name|tableDesc
return|;
block|}
comment|/**    * @param newDesc new table descriptor to use    */
specifier|public
name|void
name|setTableDesc
parameter_list|(
name|HTableDescriptor
name|newDesc
parameter_list|)
block|{
name|this
operator|.
name|tableDesc
operator|=
name|newDesc
expr_stmt|;
block|}
comment|/** @return true if this is the root region */
specifier|public
name|boolean
name|isRootRegion
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableDesc
operator|.
name|isRootRegion
argument_list|()
return|;
block|}
comment|/** @return true if this is the meta table */
specifier|public
name|boolean
name|isMetaTable
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableDesc
operator|.
name|isMetaTable
argument_list|()
return|;
block|}
comment|/** @return true if this region is a meta region */
specifier|public
name|boolean
name|isMetaRegion
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableDesc
operator|.
name|isMetaRegion
argument_list|()
return|;
block|}
comment|/**    * @return True if has been split and has daughters.    */
specifier|public
name|boolean
name|isSplit
parameter_list|()
block|{
return|return
name|this
operator|.
name|split
return|;
block|}
comment|/**    * @param split set split status    */
specifier|public
name|void
name|setSplit
parameter_list|(
name|boolean
name|split
parameter_list|)
block|{
name|this
operator|.
name|split
operator|=
name|split
expr_stmt|;
block|}
comment|/**    * @return True if this region is offline.    */
specifier|public
name|boolean
name|isOffline
parameter_list|()
block|{
return|return
name|this
operator|.
name|offLine
return|;
block|}
comment|/**    * @param offLine set online - offline status    */
specifier|public
name|void
name|setOffline
parameter_list|(
name|boolean
name|offLine
parameter_list|)
block|{
name|this
operator|.
name|offLine
operator|=
name|offLine
expr_stmt|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"REGION => {"
operator|+
name|HConstants
operator|.
name|NAME
operator|+
literal|" => '"
operator|+
name|this
operator|.
name|regionNameStr
operator|+
literal|"', STARTKEY => '"
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|this
operator|.
name|startKey
argument_list|)
operator|+
literal|"', ENDKEY => '"
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|this
operator|.
name|endKey
argument_list|)
operator|+
literal|"', ENCODED => "
operator|+
name|getEncodedName
argument_list|()
operator|+
literal|","
operator|+
operator|(
name|isOffline
argument_list|()
condition|?
literal|" OFFLINE => true,"
else|:
literal|""
operator|)
operator|+
operator|(
name|isSplit
argument_list|()
condition|?
literal|" SPLIT => true,"
else|:
literal|""
operator|)
operator|+
literal|" TABLE => {"
operator|+
name|this
operator|.
name|tableDesc
operator|.
name|toString
argument_list|()
operator|+
literal|"}"
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|this
operator|.
name|compareTo
argument_list|(
name|o
argument_list|)
operator|==
literal|0
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|this
operator|.
name|hashCode
return|;
block|}
comment|/** @return the object version number */
annotation|@
name|Override
specifier|public
name|byte
name|getVersion
parameter_list|()
block|{
return|return
name|VERSION
return|;
block|}
comment|//
comment|// Writable
comment|//
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|Bytes
operator|.
name|writeByteArray
argument_list|(
name|out
argument_list|,
name|endKey
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|offLine
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|regionId
argument_list|)
expr_stmt|;
name|Bytes
operator|.
name|writeByteArray
argument_list|(
name|out
argument_list|,
name|regionName
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|split
argument_list|)
expr_stmt|;
name|Bytes
operator|.
name|writeByteArray
argument_list|(
name|out
argument_list|,
name|startKey
argument_list|)
expr_stmt|;
name|tableDesc
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|hashCode
argument_list|)
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|endKey
operator|=
name|Bytes
operator|.
name|readByteArray
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|offLine
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|this
operator|.
name|regionId
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|this
operator|.
name|regionName
operator|=
name|Bytes
operator|.
name|readByteArray
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|regionNameStr
operator|=
name|Bytes
operator|.
name|toString
argument_list|(
name|this
operator|.
name|regionName
argument_list|)
expr_stmt|;
name|this
operator|.
name|split
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|this
operator|.
name|startKey
operator|=
name|Bytes
operator|.
name|readByteArray
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableDesc
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|hashCode
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
block|}
comment|//
comment|// Comparable
comment|//
comment|/**    * {@inheritDoc}    */
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|HRegionInfo
name|other
init|=
operator|(
name|HRegionInfo
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|other
operator|==
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
comment|// Are regions of same table?
name|int
name|result
init|=
name|this
operator|.
name|tableDesc
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|tableDesc
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
return|return
name|result
return|;
block|}
comment|// Compare start keys.
name|result
operator|=
name|Bytes
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|startKey
argument_list|,
name|other
operator|.
name|startKey
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
return|return
name|result
return|;
block|}
comment|// Compare end keys.
return|return
name|Bytes
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|endKey
argument_list|,
name|other
operator|.
name|endKey
argument_list|)
return|;
block|}
block|}
end_class

end_unit

