begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_comment
comment|/**  * HRegion information.  * Contains HRegion id, start and end keys, a reference to this  * HRegions' table descriptor, etc.  */
end_comment

begin_class
specifier|public
class|class
name|HRegionInfo
implements|implements
name|WritableComparable
block|{
comment|/** delimiter used between portions of a region name */
specifier|public
specifier|static
specifier|final
name|char
name|DELIMITER
init|=
literal|','
decl_stmt|;
comment|/**    * Extracts table name prefix from a region name.    * Presumes region names are ASCII characters only.    * @param regionName A region name.    * @return The table prefix of a region name.    */
specifier|public
specifier|static
name|Text
name|getTableNameFromRegionName
parameter_list|(
specifier|final
name|Text
name|regionName
parameter_list|)
block|{
name|int
name|index
init|=
operator|-
literal|1
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|regionName
operator|.
name|getBytes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bytes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|(
operator|(
name|char
operator|)
name|bytes
index|[
name|i
index|]
operator|)
operator|==
name|DELIMITER
condition|)
block|{
name|index
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|index
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|regionName
operator|.
name|toString
argument_list|()
operator|+
literal|" does not "
operator|+
literal|"contain "
operator|+
name|DELIMITER
operator|+
literal|" character"
argument_list|)
throw|;
block|}
name|byte
index|[]
name|tableName
init|=
operator|new
name|byte
index|[
name|index
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|tableName
argument_list|,
literal|0
argument_list|,
name|index
argument_list|)
expr_stmt|;
return|return
operator|new
name|Text
argument_list|(
name|tableName
argument_list|)
return|;
block|}
name|Text
name|regionName
decl_stmt|;
name|long
name|regionId
decl_stmt|;
name|Text
name|startKey
decl_stmt|;
name|Text
name|endKey
decl_stmt|;
name|boolean
name|offLine
decl_stmt|;
name|boolean
name|split
decl_stmt|;
name|HTableDescriptor
name|tableDesc
decl_stmt|;
comment|/** Default constructor - creates empty object */
specifier|public
name|HRegionInfo
parameter_list|()
block|{
name|this
operator|.
name|regionId
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|tableDesc
operator|=
operator|new
name|HTableDescriptor
argument_list|()
expr_stmt|;
name|this
operator|.
name|startKey
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
name|this
operator|.
name|endKey
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
name|this
operator|.
name|regionName
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
name|this
operator|.
name|offLine
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|split
operator|=
literal|false
expr_stmt|;
block|}
comment|/**    * Construct a HRegionInfo object from byte array    *     * @param serializedBytes    * @throws IOException    */
specifier|public
name|HRegionInfo
parameter_list|(
specifier|final
name|byte
index|[]
name|serializedBytes
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|()
expr_stmt|;
name|readFields
argument_list|(
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|serializedBytes
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Construct HRegionInfo with explicit parameters    *     * @param regionId the region id    * @param tableDesc the table descriptor    * @param startKey first key in region    * @param endKey end of key range    * @throws IllegalArgumentException    */
specifier|public
name|HRegionInfo
parameter_list|(
name|long
name|regionId
parameter_list|,
name|HTableDescriptor
name|tableDesc
parameter_list|,
name|Text
name|startKey
parameter_list|,
name|Text
name|endKey
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|this
argument_list|(
name|regionId
argument_list|,
name|tableDesc
argument_list|,
name|startKey
argument_list|,
name|endKey
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Construct HRegionInfo with explicit parameters    *     * @param regionId the region id    * @param tableDesc the table descriptor    * @param startKey first key in region    * @param endKey end of key range    * @param split true if this region has split and we have daughter regions    * regions that may or may not hold references to this region.    * @throws IllegalArgumentException    */
specifier|public
name|HRegionInfo
parameter_list|(
name|long
name|regionId
parameter_list|,
name|HTableDescriptor
name|tableDesc
parameter_list|,
name|Text
name|startKey
parameter_list|,
name|Text
name|endKey
parameter_list|,
specifier|final
name|boolean
name|split
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|this
operator|.
name|regionId
operator|=
name|regionId
expr_stmt|;
if|if
condition|(
name|tableDesc
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"tableDesc cannot be null"
argument_list|)
throw|;
block|}
name|this
operator|.
name|tableDesc
operator|=
name|tableDesc
expr_stmt|;
name|this
operator|.
name|startKey
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
if|if
condition|(
name|startKey
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|startKey
operator|.
name|set
argument_list|(
name|startKey
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|endKey
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
if|if
condition|(
name|endKey
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|endKey
operator|.
name|set
argument_list|(
name|endKey
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|regionName
operator|=
operator|new
name|Text
argument_list|(
name|tableDesc
operator|.
name|getName
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
name|DELIMITER
operator|+
operator|(
name|startKey
operator|==
literal|null
condition|?
literal|""
else|:
name|startKey
operator|.
name|toString
argument_list|()
operator|)
operator|+
name|DELIMITER
operator|+
name|regionId
argument_list|)
expr_stmt|;
name|this
operator|.
name|offLine
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|split
operator|=
name|split
expr_stmt|;
block|}
comment|/** @return the endKey */
specifier|public
name|Text
name|getEndKey
parameter_list|()
block|{
return|return
name|endKey
return|;
block|}
comment|/** @return the regionId */
specifier|public
name|long
name|getRegionId
parameter_list|()
block|{
return|return
name|regionId
return|;
block|}
comment|/** @return the regionName */
specifier|public
name|Text
name|getRegionName
parameter_list|()
block|{
return|return
name|regionName
return|;
block|}
comment|/** @return the startKey */
specifier|public
name|Text
name|getStartKey
parameter_list|()
block|{
return|return
name|startKey
return|;
block|}
comment|/** @return the tableDesc */
specifier|public
name|HTableDescriptor
name|getTableDesc
parameter_list|()
block|{
return|return
name|tableDesc
return|;
block|}
comment|/**    * @return True if has been split and has daughters.    */
specifier|public
name|boolean
name|isSplit
parameter_list|()
block|{
return|return
name|this
operator|.
name|split
return|;
block|}
comment|/**    * @return True if this region is offline.    */
specifier|public
name|boolean
name|isOffline
parameter_list|()
block|{
return|return
name|this
operator|.
name|offLine
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"regionname: "
operator|+
name|this
operator|.
name|regionName
operator|.
name|toString
argument_list|()
operator|+
literal|", startKey:<"
operator|+
name|this
operator|.
name|startKey
operator|.
name|toString
argument_list|()
operator|+
literal|">,"
operator|+
operator|(
name|isOffline
argument_list|()
condition|?
literal|" offline: true,"
else|:
literal|""
operator|)
operator|+
operator|(
name|isSplit
argument_list|()
condition|?
literal|" split: true,"
else|:
literal|""
operator|)
operator|+
literal|" tableDesc: {"
operator|+
name|this
operator|.
name|tableDesc
operator|.
name|toString
argument_list|()
operator|+
literal|"}"
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|this
operator|.
name|compareTo
argument_list|(
name|o
argument_list|)
operator|==
literal|0
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|this
operator|.
name|regionName
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|^=
name|Long
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|regionId
argument_list|)
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|^=
name|this
operator|.
name|startKey
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|^=
name|this
operator|.
name|endKey
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|^=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|offLine
argument_list|)
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|^=
name|this
operator|.
name|tableDesc
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
comment|//
comment|// Writable
comment|//
comment|/**    * {@inheritDoc}    */
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|regionId
argument_list|)
expr_stmt|;
name|tableDesc
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|startKey
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|endKey
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|regionName
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|offLine
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|split
argument_list|)
expr_stmt|;
block|}
comment|/**    * {@inheritDoc}    */
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|regionId
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableDesc
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|startKey
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|endKey
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|regionName
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|offLine
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|this
operator|.
name|split
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
block|}
comment|//
comment|// Comparable
comment|//
comment|/**    * {@inheritDoc}    */
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|HRegionInfo
name|other
init|=
operator|(
name|HRegionInfo
operator|)
name|o
decl_stmt|;
comment|// Are regions of same table?
name|int
name|result
init|=
name|this
operator|.
name|tableDesc
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|tableDesc
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
return|return
name|result
return|;
block|}
comment|// Compare start keys.
name|result
operator|=
name|this
operator|.
name|startKey
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|startKey
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
return|return
name|result
return|;
block|}
comment|// Compare end keys.
return|return
name|this
operator|.
name|endKey
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|endKey
argument_list|)
return|;
block|}
block|}
end_class

end_unit

