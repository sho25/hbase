begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2006-7 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_comment
comment|/*******************************************************************************  * HServerAddress is a "label" for a HBase server that combines the host  * name and port number.  ******************************************************************************/
end_comment

begin_class
specifier|public
class|class
name|HServerAddress
implements|implements
name|Writable
block|{
specifier|private
name|InetSocketAddress
name|address
decl_stmt|;
specifier|private
name|String
name|stringValue
decl_stmt|;
specifier|public
name|HServerAddress
parameter_list|()
block|{
name|this
operator|.
name|address
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|stringValue
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|HServerAddress
parameter_list|(
name|InetSocketAddress
name|address
parameter_list|)
block|{
name|this
operator|.
name|address
operator|=
name|address
expr_stmt|;
name|this
operator|.
name|stringValue
operator|=
operator|new
name|String
argument_list|(
name|address
operator|.
name|getAddress
argument_list|()
operator|.
name|getHostAddress
argument_list|()
operator|+
literal|":"
operator|+
name|address
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|HServerAddress
parameter_list|(
name|String
name|hostAndPort
parameter_list|)
block|{
name|int
name|colonIndex
init|=
name|hostAndPort
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|colonIndex
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Not a host:port pair: "
operator|+
name|hostAndPort
argument_list|)
throw|;
block|}
name|String
name|host
init|=
name|hostAndPort
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|colonIndex
argument_list|)
decl_stmt|;
name|int
name|port
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|hostAndPort
operator|.
name|substring
argument_list|(
name|colonIndex
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|this
operator|.
name|address
operator|=
operator|new
name|InetSocketAddress
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|this
operator|.
name|stringValue
operator|=
operator|new
name|String
argument_list|(
name|hostAndPort
argument_list|)
expr_stmt|;
block|}
specifier|public
name|HServerAddress
parameter_list|(
name|String
name|bindAddress
parameter_list|,
name|int
name|port
parameter_list|)
block|{
name|this
operator|.
name|address
operator|=
operator|new
name|InetSocketAddress
argument_list|(
name|bindAddress
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|this
operator|.
name|stringValue
operator|=
operator|new
name|String
argument_list|(
name|bindAddress
operator|+
literal|":"
operator|+
name|port
argument_list|)
expr_stmt|;
block|}
specifier|public
name|HServerAddress
parameter_list|(
name|HServerAddress
name|other
parameter_list|)
block|{
name|String
name|bindAddress
init|=
name|other
operator|.
name|getBindAddress
argument_list|()
decl_stmt|;
name|int
name|port
init|=
name|other
operator|.
name|getPort
argument_list|()
decl_stmt|;
name|address
operator|=
operator|new
name|InetSocketAddress
argument_list|(
name|bindAddress
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|stringValue
operator|=
operator|new
name|String
argument_list|(
name|bindAddress
operator|+
literal|":"
operator|+
name|port
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getBindAddress
parameter_list|()
block|{
return|return
name|address
operator|.
name|getAddress
argument_list|()
operator|.
name|getHostAddress
argument_list|()
return|;
block|}
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|address
operator|.
name|getPort
argument_list|()
return|;
block|}
specifier|public
name|InetSocketAddress
name|getInetSocketAddress
parameter_list|()
block|{
return|return
name|address
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|(
name|stringValue
operator|==
literal|null
condition|?
literal|""
else|:
name|stringValue
operator|)
return|;
block|}
comment|//////////////////////////////////////////////////////////////////////////////
comment|// Writable
comment|//////////////////////////////////////////////////////////////////////////////
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|bindAddress
init|=
name|in
operator|.
name|readUTF
argument_list|()
decl_stmt|;
name|int
name|port
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|bindAddress
operator|==
literal|null
operator|||
name|bindAddress
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|address
operator|=
literal|null
expr_stmt|;
name|stringValue
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|address
operator|=
operator|new
name|InetSocketAddress
argument_list|(
name|bindAddress
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|stringValue
operator|=
name|bindAddress
operator|+
literal|":"
operator|+
name|port
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|address
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeUTF
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeUTF
argument_list|(
name|address
operator|.
name|getAddress
argument_list|()
operator|.
name|getHostAddress
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|address
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

