begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|// temporary until I change all the classes that depend on HClient.
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|RowFilterInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * The HClient class is deprecated and is now implemented entirely in terms of  * the classes that replace it:  *<ul>  *<li>HConnection which manages connections to a a single HBase instance</li>  *<li>HTable which accesses one table (to access multiple tables, you create  * multiple HTable instances</li>  *<li>HBaseAdmin which performs administrative functions for a single HBase  * instance</li>  *</ul>  *<p>  * HClient continues to be supported in the short term to give users a chance  * to migrate to the use of HConnection, HTable and HBaseAdmin. Any new API  * features which are added will be added to these three classes and will not  * be supported in HClient.  */
end_comment

begin_class
annotation|@
name|Deprecated
specifier|public
class|class
name|HClient
implements|implements
name|HConstants
block|{
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|protected
name|AtomicReference
argument_list|<
name|HConnection
argument_list|>
name|connection
decl_stmt|;
specifier|protected
name|AtomicReference
argument_list|<
name|HBaseAdmin
argument_list|>
name|admin
decl_stmt|;
specifier|protected
name|AtomicReference
argument_list|<
name|HTable
argument_list|>
name|table
decl_stmt|;
comment|/**     * Creates a new HClient    * @param conf - Configuration object    */
specifier|public
name|HClient
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|connection
operator|=
operator|new
name|AtomicReference
argument_list|<
name|HConnection
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|admin
operator|=
operator|new
name|AtomicReference
argument_list|<
name|HBaseAdmin
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|table
operator|=
operator|new
name|AtomicReference
argument_list|<
name|HTable
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/* Lazily creates a HConnection */
specifier|private
specifier|synchronized
name|HConnection
name|getHConnection
parameter_list|()
block|{
name|HConnection
name|conn
init|=
name|connection
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|conn
operator|==
literal|null
condition|)
block|{
name|conn
operator|=
name|HConnectionManager
operator|.
name|getConnection
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|connection
operator|.
name|set
argument_list|(
name|conn
argument_list|)
expr_stmt|;
block|}
return|return
name|conn
return|;
block|}
comment|/* Lazily creates a HBaseAdmin */
specifier|private
specifier|synchronized
name|HBaseAdmin
name|getHBaseAdmin
parameter_list|()
throws|throws
name|MasterNotRunningException
block|{
name|getHConnection
argument_list|()
expr_stmt|;
comment|// ensure we have a connection
name|HBaseAdmin
name|adm
init|=
name|admin
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|adm
operator|==
literal|null
condition|)
block|{
name|adm
operator|=
operator|new
name|HBaseAdmin
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|admin
operator|.
name|set
argument_list|(
name|adm
argument_list|)
expr_stmt|;
block|}
return|return
name|adm
return|;
block|}
comment|/**    * Find region location hosting passed row using cached info    * @param row Row to find.    * @return Location of row.    */
specifier|protected
name|HRegionLocation
name|getRegionLocation
parameter_list|(
name|Text
name|row
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|table
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Must open table first"
argument_list|)
throw|;
block|}
return|return
name|table
operator|.
name|get
argument_list|()
operator|.
name|getRegionLocation
argument_list|(
name|row
argument_list|)
return|;
block|}
comment|/**     * Establishes a connection to the region server at the specified address.    * @param regionServer - the server to connect to    * @throws IOException    */
specifier|protected
name|HRegionInterface
name|getHRegionConnection
parameter_list|(
name|HServerAddress
name|regionServer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getHConnection
argument_list|()
operator|.
name|getHRegionConnection
argument_list|(
name|regionServer
argument_list|)
return|;
block|}
comment|/**    * @return - true if the master server is running    */
specifier|public
name|boolean
name|isMasterRunning
parameter_list|()
block|{
return|return
name|getHConnection
argument_list|()
operator|.
name|isMasterRunning
argument_list|()
return|;
block|}
comment|//
comment|// Administrative methods
comment|//
comment|/**    * Creates a new table    *     * @param desc table descriptor for table    *     * @throws IllegalArgumentException if the table name is reserved    * @throws MasterNotRunningException if master is not running    * @throws NoServerForRegionException if root region is not being served    * @throws TableExistsException if table already exists (If concurrent    * threads, the table may have been created between test-for-existence    * and attempt-at-creation).    * @throws IOException    */
specifier|public
name|void
name|createTable
parameter_list|(
name|HTableDescriptor
name|desc
parameter_list|)
throws|throws
name|IOException
block|{
name|getHBaseAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a new table but does not block and wait for it to come online.    *     * @param desc table descriptor for table    *     * @throws IllegalArgumentException if the table name is reserved    * @throws MasterNotRunningException if master is not running    * @throws NoServerForRegionException if root region is not being served    * @throws TableExistsException if table already exists (If concurrent    * threads, the table may have been created between test-for-existence    * and attempt-at-creation).    * @throws IOException    */
specifier|public
name|void
name|createTableAsync
parameter_list|(
name|HTableDescriptor
name|desc
parameter_list|)
throws|throws
name|IOException
block|{
name|getHBaseAdmin
argument_list|()
operator|.
name|createTableAsync
argument_list|(
name|desc
argument_list|)
expr_stmt|;
block|}
comment|/**    * Deletes a table    *     * @param tableName name of table to delete    * @throws IOException    */
specifier|public
name|void
name|deleteTable
parameter_list|(
name|Text
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|getHBaseAdmin
argument_list|()
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
comment|/**    * Brings a table on-line (enables it)    *     * @param tableName name of the table    * @throws IOException    */
specifier|public
name|void
name|enableTable
parameter_list|(
name|Text
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|getHBaseAdmin
argument_list|()
operator|.
name|enableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
comment|/**    * Disables a table (takes it off-line) If it is being served, the master    * will tell the servers to stop serving it.    *     * @param tableName name of table    * @throws IOException    */
specifier|public
name|void
name|disableTable
parameter_list|(
name|Text
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|getHBaseAdmin
argument_list|()
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param tableName Table to check.    * @return True if table exists already.    * @throws MasterNotRunningException    */
specifier|public
name|boolean
name|tableExists
parameter_list|(
specifier|final
name|Text
name|tableName
parameter_list|)
throws|throws
name|MasterNotRunningException
block|{
return|return
name|getHBaseAdmin
argument_list|()
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
return|;
block|}
comment|/**    * Add a column to an existing table    *     * @param tableName name of the table to add column to    * @param column column descriptor of column to be added    * @throws IOException    */
specifier|public
name|void
name|addColumn
parameter_list|(
name|Text
name|tableName
parameter_list|,
name|HColumnDescriptor
name|column
parameter_list|)
throws|throws
name|IOException
block|{
name|getHBaseAdmin
argument_list|()
operator|.
name|addColumn
argument_list|(
name|tableName
argument_list|,
name|column
argument_list|)
expr_stmt|;
block|}
comment|/**    * Delete a column from a table    *     * @param tableName name of table    * @param columnName name of column to be deleted    * @throws IOException    */
specifier|public
name|void
name|deleteColumn
parameter_list|(
name|Text
name|tableName
parameter_list|,
name|Text
name|columnName
parameter_list|)
throws|throws
name|IOException
block|{
name|getHBaseAdmin
argument_list|()
operator|.
name|deleteColumn
argument_list|(
name|tableName
argument_list|,
name|columnName
argument_list|)
expr_stmt|;
block|}
comment|/**     * Shuts down the HBase instance     * @throws IOException    */
specifier|public
name|void
name|shutdown
parameter_list|()
throws|throws
name|IOException
block|{
name|getHBaseAdmin
argument_list|()
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|//////////////////////////////////////////////////////////////////////////////
comment|// Client API
comment|//////////////////////////////////////////////////////////////////////////////
comment|/**    * Loads information so that a table can be manipulated.    *     * @param tableName the table to be located    * @throws IOException if the table can not be located after retrying    */
specifier|public
specifier|synchronized
name|void
name|openTable
parameter_list|(
name|Text
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|HTable
name|table
init|=
name|this
operator|.
name|table
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|checkUpdateInProgress
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|table
operator|.
name|set
argument_list|(
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Gets the starting row key for every region in the currently open table    * @return Array of region starting row keys    */
specifier|public
name|Text
index|[]
name|getStartKeys
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|table
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Must open table first"
argument_list|)
throw|;
block|}
return|return
name|table
operator|.
name|get
argument_list|()
operator|.
name|getStartKeys
argument_list|()
return|;
block|}
comment|/**    * List all the userspace tables.  In other words, scan the META table.    *    * If we wanted this to be really fast, we could implement a special    * catalog table that just contains table names and their descriptors.    * Right now, it only exists as part of the META table's region info.    *    * @return - returns an array of HTableDescriptors     * @throws IOException    */
specifier|public
name|HTableDescriptor
index|[]
name|listTables
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getHConnection
argument_list|()
operator|.
name|listTables
argument_list|()
return|;
block|}
comment|/**     * Get a single value for the specified row and column    *    * @param row row key    * @param column column name    * @return value for specified row/column    * @throws IOException    */
specifier|public
name|byte
index|[]
name|get
parameter_list|(
name|Text
name|row
parameter_list|,
name|Text
name|column
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|table
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Must open table first"
argument_list|)
throw|;
block|}
return|return
name|this
operator|.
name|table
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
return|;
block|}
comment|/**     * Get the specified number of versions of the specified row and column    *     * @param row         - row key    * @param column      - column name    * @param numVersions - number of versions to retrieve    * @return            - array byte values    * @throws IOException    */
specifier|public
name|byte
index|[]
index|[]
name|get
parameter_list|(
name|Text
name|row
parameter_list|,
name|Text
name|column
parameter_list|,
name|int
name|numVersions
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|table
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Must open table first"
argument_list|)
throw|;
block|}
return|return
name|this
operator|.
name|table
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|numVersions
argument_list|)
return|;
block|}
comment|/**     * Get the specified number of versions of the specified row and column with    * the specified timestamp.    *    * @param row         - row key    * @param column      - column name    * @param timestamp   - timestamp    * @param numVersions - number of versions to retrieve    * @return            - array of values that match the above criteria    * @throws IOException    */
specifier|public
name|byte
index|[]
index|[]
name|get
parameter_list|(
name|Text
name|row
parameter_list|,
name|Text
name|column
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|int
name|numVersions
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|table
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Must open table first"
argument_list|)
throw|;
block|}
return|return
name|this
operator|.
name|table
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|timestamp
argument_list|,
name|numVersions
argument_list|)
return|;
block|}
comment|/**     * Get all the data for the specified row    *     * @param row         - row key    * @return            - map of colums to values    * @throws IOException    */
specifier|public
name|SortedMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|getRow
parameter_list|(
name|Text
name|row
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|table
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Must open table first"
argument_list|)
throw|;
block|}
return|return
name|this
operator|.
name|table
operator|.
name|get
argument_list|()
operator|.
name|getRow
argument_list|(
name|row
argument_list|)
return|;
block|}
comment|/**     * Get a scanner on the current table starting at the specified row.    * Return the specified columns.    *    * @param columns array of columns to return    * @param startRow starting row in table to scan    * @return scanner    * @throws IOException    */
specifier|public
name|HScannerInterface
name|obtainScanner
parameter_list|(
name|Text
index|[]
name|columns
parameter_list|,
name|Text
name|startRow
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|obtainScanner
argument_list|(
name|columns
argument_list|,
name|startRow
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**     * Get a scanner on the current table starting at the specified row.    * Return the specified columns.    *    * @param columns array of columns to return    * @param startRow starting row in table to scan    * @param timestamp only return results whose timestamp<= this value    * @return scanner    * @throws IOException    */
specifier|public
name|HScannerInterface
name|obtainScanner
parameter_list|(
name|Text
index|[]
name|columns
parameter_list|,
name|Text
name|startRow
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|obtainScanner
argument_list|(
name|columns
argument_list|,
name|startRow
argument_list|,
name|timestamp
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**     * Get a scanner on the current table starting at the specified row.    * Return the specified columns.    *    * @param columns array of columns to return    * @param startRow starting row in table to scan    * @param filter a row filter using row-key regexp and/or column data filter.    * @return scanner    * @throws IOException    */
specifier|public
name|HScannerInterface
name|obtainScanner
parameter_list|(
name|Text
index|[]
name|columns
parameter_list|,
name|Text
name|startRow
parameter_list|,
name|RowFilterInterface
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|obtainScanner
argument_list|(
name|columns
argument_list|,
name|startRow
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|filter
argument_list|)
return|;
block|}
comment|/**     * Get a scanner on the current table starting at the specified row.    * Return the specified columns.    *    * @param columns array of columns to return    * @param startRow starting row in table to scan    * @param timestamp only return results whose timestamp<= this value    * @param filter a row filter using row-key regexp and/or column data filter.    * @return scanner    * @throws IOException    */
specifier|public
name|HScannerInterface
name|obtainScanner
parameter_list|(
name|Text
index|[]
name|columns
parameter_list|,
name|Text
name|startRow
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|RowFilterInterface
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|table
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Must open table first"
argument_list|)
throw|;
block|}
return|return
name|this
operator|.
name|table
operator|.
name|get
argument_list|()
operator|.
name|obtainScanner
argument_list|(
name|columns
argument_list|,
name|startRow
argument_list|,
name|timestamp
argument_list|,
name|filter
argument_list|)
return|;
block|}
comment|/**     * Start a batch of row insertions/updates.    *     * No changes are committed until the call to commitBatchUpdate returns.    * A call to abortBatchUpdate will abandon the entire batch.    *    * @param row name of row to be updated    * @return lockid to be used in subsequent put, delete and commit calls    */
specifier|public
name|long
name|startBatchUpdate
parameter_list|(
specifier|final
name|Text
name|row
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|table
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Must open table first"
argument_list|)
throw|;
block|}
return|return
name|this
operator|.
name|table
operator|.
name|get
argument_list|()
operator|.
name|startUpdate
argument_list|(
name|row
argument_list|)
return|;
block|}
comment|/**     * Abort a batch mutation    * @param lockid lock id returned by startBatchUpdate    */
specifier|public
name|void
name|abortBatch
parameter_list|(
specifier|final
name|long
name|lockid
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|table
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Must open table first"
argument_list|)
throw|;
block|}
name|this
operator|.
name|table
operator|.
name|get
argument_list|()
operator|.
name|abort
argument_list|(
name|lockid
argument_list|)
expr_stmt|;
block|}
comment|/**     * Finalize a batch mutation    *    * @param lockid lock id returned by startBatchUpdate    * @throws IOException    */
specifier|public
name|void
name|commitBatch
parameter_list|(
specifier|final
name|long
name|lockid
parameter_list|)
throws|throws
name|IOException
block|{
name|commitBatch
argument_list|(
name|lockid
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**     * Finalize a batch mutation    *    * @param lockid lock id returned by startBatchUpdate    * @param timestamp time to associate with all the changes    * @throws IOException    */
specifier|public
name|void
name|commitBatch
parameter_list|(
specifier|final
name|long
name|lockid
parameter_list|,
specifier|final
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|table
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Must open table first"
argument_list|)
throw|;
block|}
name|this
operator|.
name|table
operator|.
name|get
argument_list|()
operator|.
name|commit
argument_list|(
name|lockid
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
comment|/**     * Start an atomic row insertion/update.  No changes are committed until the     * call to commit() returns. A call to abort() will abandon any updates in progress.    *    * Callers to this method are given a lease for each unique lockid; before the    * lease expires, either abort() or commit() must be called. If it is not     * called, the system will automatically call abort() on the client's behalf.    *    * The client can gain extra time with a call to renewLease().    * Start an atomic row insertion or update    *     * @param row Name of row to start update against.    * @return Row lockid.    */
specifier|public
name|long
name|startUpdate
parameter_list|(
specifier|final
name|Text
name|row
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|table
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Must open table first"
argument_list|)
throw|;
block|}
return|return
name|this
operator|.
name|table
operator|.
name|get
argument_list|()
operator|.
name|startUpdate
argument_list|(
name|row
argument_list|)
return|;
block|}
comment|/**     * Change a value for the specified column.    * Runs {@link #abort(long)} if exception thrown.    *    * @param lockid lock id returned from startUpdate    * @param column column whose value is being set    * @param val new value for column    */
specifier|public
name|void
name|put
parameter_list|(
name|long
name|lockid
parameter_list|,
name|Text
name|column
parameter_list|,
name|byte
name|val
index|[]
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|table
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Must open table first"
argument_list|)
throw|;
block|}
name|this
operator|.
name|table
operator|.
name|get
argument_list|()
operator|.
name|put
argument_list|(
name|lockid
argument_list|,
name|column
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
comment|/**     * Delete the value for a column    *    * @param lockid              - lock id returned from startUpdate    * @param column              - name of column whose value is to be deleted    */
specifier|public
name|void
name|delete
parameter_list|(
name|long
name|lockid
parameter_list|,
name|Text
name|column
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|table
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Must open table first"
argument_list|)
throw|;
block|}
name|this
operator|.
name|table
operator|.
name|get
argument_list|()
operator|.
name|delete
argument_list|(
name|lockid
argument_list|,
name|column
argument_list|)
expr_stmt|;
block|}
comment|/**     * Abort a row mutation    *    * @param lockid              - lock id returned from startUpdate    */
specifier|public
name|void
name|abort
parameter_list|(
name|long
name|lockid
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|table
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Must open table first"
argument_list|)
throw|;
block|}
name|this
operator|.
name|table
operator|.
name|get
argument_list|()
operator|.
name|abort
argument_list|(
name|lockid
argument_list|)
expr_stmt|;
block|}
comment|/**     * Finalize a row mutation    *    * @param lockid              - lock id returned from startUpdate    * @throws IOException    */
specifier|public
name|void
name|commit
parameter_list|(
name|long
name|lockid
parameter_list|)
throws|throws
name|IOException
block|{
name|commit
argument_list|(
name|lockid
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**     * Finalize a row mutation    *    * @param lockid              - lock id returned from startUpdate    * @param timestamp           - time to associate with the change    * @throws IOException    */
specifier|public
name|void
name|commit
parameter_list|(
name|long
name|lockid
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|table
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Must open table first"
argument_list|)
throw|;
block|}
name|this
operator|.
name|table
operator|.
name|get
argument_list|()
operator|.
name|commit
argument_list|(
name|lockid
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
comment|/**    * Renew lease on update    *     * @param lockid              - lock id returned from startUpdate    */
specifier|public
name|void
name|renewLease
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|long
name|lockid
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|table
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Must open table first"
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|printUsage
parameter_list|()
block|{
name|printUsage
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|printUsage
parameter_list|(
specifier|final
name|String
name|message
parameter_list|)
block|{
if|if
condition|(
name|message
operator|!=
literal|null
operator|&&
name|message
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" [--master=host:port]<command><args>"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Options:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" master       Specify host and port of HBase "
operator|+
literal|"cluster master. If not present,"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"              address is read from configuration."
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Commands:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" shutdown     Shutdown the HBase cluster."
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" createTable  Create named table."
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" deleteTable  Delete named table."
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" listTables   List all tables."
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Example Usage:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" % java "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" shutdown"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" % java "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" createTable webcrawl contents: anchors: 10"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|printCreateTableUsage
parameter_list|(
specifier|final
name|String
name|message
parameter_list|)
block|{
if|if
condition|(
name|message
operator|!=
literal|null
operator|&&
name|message
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" [options] createTable<name><colfamily1> ...<max_versions>"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Example Usage:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" % java "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" createTable testtable column_x column_y column_z 3"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|printDeleteTableUsage
parameter_list|(
specifier|final
name|String
name|message
parameter_list|)
block|{
if|if
condition|(
name|message
operator|!=
literal|null
operator|&&
name|message
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" [options] deleteTable<name>"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Example Usage:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" % java "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" deleteTable testtable"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Process command-line args.    * @param args - command arguments    * @return 0 if successful -1 otherwise    */
specifier|public
name|int
name|doCommandLine
parameter_list|(
specifier|final
name|String
name|args
index|[]
parameter_list|)
block|{
comment|// TODO: Better cmd-line processing
comment|// (but hopefully something not as painful as cli options).
name|int
name|errCode
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|1
condition|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
return|return
name|errCode
return|;
block|}
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|cmd
init|=
name|args
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-h"
argument_list|)
operator|||
name|cmd
operator|.
name|startsWith
argument_list|(
literal|"--h"
argument_list|)
condition|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
name|errCode
operator|=
literal|0
expr_stmt|;
break|break;
block|}
specifier|final
name|String
name|masterArgKey
init|=
literal|"--master="
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|startsWith
argument_list|(
name|masterArgKey
argument_list|)
condition|)
block|{
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|MASTER_ADDRESS
argument_list|,
name|cmd
operator|.
name|substring
argument_list|(
name|masterArgKey
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"shutdown"
argument_list|)
condition|)
block|{
name|shutdown
argument_list|()
expr_stmt|;
name|errCode
operator|=
literal|0
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"listTables"
argument_list|)
condition|)
block|{
name|HTableDescriptor
index|[]
name|tables
init|=
name|listTables
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|ii
init|=
literal|0
init|;
name|ii
operator|<
name|tables
operator|.
name|length
condition|;
name|ii
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|tables
index|[
name|ii
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|errCode
operator|=
literal|0
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"createTable"
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|+
literal|2
operator|>
name|args
operator|.
name|length
condition|)
block|{
name|printCreateTableUsage
argument_list|(
literal|"Error: Supply a table name,"
operator|+
literal|" at least one column family, and maximum versions"
argument_list|)
expr_stmt|;
name|errCode
operator|=
literal|1
expr_stmt|;
break|break;
block|}
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|args
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
decl_stmt|;
name|boolean
name|addedFamily
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|ii
init|=
name|i
operator|+
literal|2
init|;
name|ii
operator|<
operator|(
name|args
operator|.
name|length
operator|-
literal|1
operator|)
condition|;
name|ii
operator|++
control|)
block|{
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|args
index|[
name|ii
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|addedFamily
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|addedFamily
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Must supply at least one "
operator|+
literal|"column family"
argument_list|)
throw|;
block|}
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|errCode
operator|=
literal|0
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"deleteTable"
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|+
literal|1
operator|>
name|args
operator|.
name|length
condition|)
block|{
name|printDeleteTableUsage
argument_list|(
literal|"Error: Must supply a table name"
argument_list|)
expr_stmt|;
name|errCode
operator|=
literal|1
expr_stmt|;
break|break;
block|}
name|deleteTable
argument_list|(
operator|new
name|Text
argument_list|(
name|args
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|errCode
operator|=
literal|0
expr_stmt|;
break|break;
block|}
name|printUsage
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
name|errCode
return|;
block|}
comment|/**    * @return the configuration for this client    */
specifier|protected
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
comment|/**    * Main program    * @param args    */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
specifier|final
name|String
name|args
index|[]
parameter_list|)
block|{
name|Configuration
name|c
init|=
operator|new
name|HBaseConfiguration
argument_list|()
decl_stmt|;
name|int
name|errCode
init|=
operator|(
operator|new
name|HClient
argument_list|(
name|c
argument_list|)
operator|)
operator|.
name|doCommandLine
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|errCode
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

