begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shell
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shell
operator|.
name|algebra
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**  * This class represents a substitute command.  */
end_comment

begin_class
specifier|public
class|class
name|SubstituteCommand
extends|extends
name|BasicCommand
block|{
specifier|private
name|String
name|key
decl_stmt|;
specifier|private
name|String
name|chainKey
decl_stmt|;
specifier|private
name|String
name|operation
decl_stmt|;
specifier|private
name|String
name|condition
decl_stmt|;
specifier|public
name|SubstituteCommand
parameter_list|(
name|Writer
name|o
parameter_list|)
block|{
name|super
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ReturnMsg
name|execute
parameter_list|(
name|HBaseConfiguration
name|conf
parameter_list|)
block|{
name|VariableRef
name|formula
init|=
operator|new
name|VariableRef
argument_list|(
name|operation
argument_list|,
name|condition
argument_list|)
decl_stmt|;
name|VariablesPool
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|chainKey
argument_list|,
name|formula
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|setInput
parameter_list|(
name|String
name|input
parameter_list|)
block|{
name|this
operator|.
name|operation
operator|=
literal|"table"
expr_stmt|;
name|this
operator|.
name|condition
operator|=
name|input
expr_stmt|;
block|}
specifier|public
name|void
name|setKey
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
block|}
specifier|public
name|void
name|setChainKey
parameter_list|(
name|String
name|chainKey
parameter_list|)
block|{
name|this
operator|.
name|chainKey
operator|=
name|chainKey
expr_stmt|;
block|}
specifier|public
name|void
name|setOperation
parameter_list|(
name|String
name|operation
parameter_list|)
block|{
name|this
operator|.
name|operation
operator|=
name|operation
expr_stmt|;
block|}
specifier|public
name|void
name|setCondition
parameter_list|(
name|String
name|condition
parameter_list|)
block|{
name|this
operator|.
name|condition
operator|=
name|condition
expr_stmt|;
block|}
specifier|public
name|void
name|resetVariableRelation
parameter_list|(
name|String
name|r1
parameter_list|,
name|String
name|r2
parameter_list|)
block|{
name|setChainKey
argument_list|(
name|r1
argument_list|)
expr_stmt|;
name|String
name|tableName
init|=
name|VariablesPool
operator|.
name|get
argument_list|(
name|r1
argument_list|)
operator|.
name|get
argument_list|(
literal|null
argument_list|)
operator|.
name|getArgument
argument_list|()
decl_stmt|;
name|VariableRef
name|formula
init|=
operator|new
name|VariableRef
argument_list|(
name|Constants
operator|.
name|JOIN_SECOND_RELATION
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|VariablesPool
operator|.
name|put
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|,
name|formula
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|CommandType
name|getCommandType
parameter_list|()
block|{
return|return
name|CommandType
operator|.
name|SHELL
return|;
block|}
block|}
end_class

end_unit

