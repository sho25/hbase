begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shell
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_class
specifier|public
class|class
name|DeleteCommand
extends|extends
name|BasicCommand
block|{
name|String
name|table
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|condition
decl_stmt|;
specifier|public
name|ReturnMsg
name|execute
parameter_list|(
name|HClient
name|client
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|table
operator|==
literal|null
operator|||
name|condition
operator|==
literal|null
condition|)
return|return
operator|new
name|ReturnMsg
argument_list|(
literal|0
argument_list|,
literal|"Syntax error : Please check 'Delete' syntax."
argument_list|)
return|;
try|try
block|{
name|client
operator|.
name|openTable
argument_list|(
operator|new
name|Text
argument_list|(
name|this
operator|.
name|table
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|lockId
init|=
name|client
operator|.
name|startUpdate
argument_list|(
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|getColumn
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|delete
argument_list|(
name|lockId
argument_list|,
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Set
argument_list|<
name|Text
argument_list|>
name|keySet
init|=
name|client
operator|.
name|getRow
argument_list|(
name|getRow
argument_list|()
argument_list|)
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|Text
index|[]
name|columnKey
init|=
name|keySet
operator|.
name|toArray
argument_list|(
operator|new
name|Text
index|[
name|keySet
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columnKey
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|client
operator|.
name|delete
argument_list|(
name|lockId
argument_list|,
name|columnKey
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|client
operator|.
name|commit
argument_list|(
name|lockId
argument_list|)
expr_stmt|;
return|return
operator|new
name|ReturnMsg
argument_list|(
literal|1
argument_list|,
literal|"1 deleted successfully. "
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
operator|new
name|ReturnMsg
argument_list|(
literal|0
argument_list|,
literal|"error msg : "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
name|void
name|setTable
parameter_list|(
name|String
name|table
parameter_list|)
block|{
name|this
operator|.
name|table
operator|=
name|table
expr_stmt|;
block|}
specifier|public
name|void
name|setCondition
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|cond
parameter_list|)
block|{
name|this
operator|.
name|condition
operator|=
name|cond
expr_stmt|;
block|}
specifier|public
name|Text
name|getRow
parameter_list|()
block|{
return|return
operator|new
name|Text
argument_list|(
name|this
operator|.
name|condition
operator|.
name|get
argument_list|(
literal|"row"
argument_list|)
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Text
name|getColumn
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|condition
operator|.
name|containsKey
argument_list|(
literal|"column"
argument_list|)
condition|)
block|{
return|return
operator|new
name|Text
argument_list|(
name|this
operator|.
name|condition
operator|.
name|get
argument_list|(
literal|"column"
argument_list|)
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

