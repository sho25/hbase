begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shell
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_class
specifier|public
class|class
name|HelpCommand
extends|extends
name|BasicCommand
block|{
specifier|private
name|String
name|argument
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|HEADER
init|=
operator|new
name|String
index|[]
block|{
literal|"Command"
block|,
literal|"Description"
block|,
literal|"Example"
block|}
decl_stmt|;
comment|/** application name */
specifier|public
specifier|static
specifier|final
name|String
name|APP_NAME
init|=
literal|"Hbase Shell"
decl_stmt|;
comment|/** version of the code */
specifier|public
specifier|static
specifier|final
name|String
name|APP_VERSION
init|=
literal|"0.0.2"
decl_stmt|;
comment|/** help contents map */
specifier|public
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|help
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|TableFormatter
name|formatter
decl_stmt|;
specifier|public
name|HelpCommand
parameter_list|(
specifier|final
name|Writer
name|o
parameter_list|,
specifier|final
name|TableFormatter
name|f
parameter_list|)
block|{
name|super
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|this
operator|.
name|help
operator|.
name|putAll
argument_list|(
name|load
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|formatter
operator|=
name|f
expr_stmt|;
block|}
specifier|public
name|ReturnMsg
name|execute
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|HBaseConfiguration
name|conf
parameter_list|)
block|{
try|try
block|{
name|printHelp
argument_list|(
name|this
operator|.
name|argument
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|setArgument
parameter_list|(
name|String
name|argument
parameter_list|)
block|{
name|this
operator|.
name|argument
operator|=
name|argument
expr_stmt|;
block|}
comment|/**    * add help contents    */
specifier|private
name|Map
operator|<
condition|?
then|extends
name|String
operator|,
operator|?
expr|extends
name|String
index|[]
operator|>
name|load
argument_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|load
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
argument_list|()
block|;
name|load
operator|.
name|put
argument_list|(
literal|"SHOW"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Show information about selected title"
block|,
literal|"SHOW TABLES[or substitution variable name];"
block|}
argument_list|)
block|;
name|load
operator|.
name|put
argument_list|(
literal|"FS"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Hadoop FsShell; entering a lone 'FS;' "
operator|+
literal|"will emit usage"
block|,
literal|"FS [-option] arguments..;"
block|}
argument_list|)
block|;
name|load
operator|.
name|put
argument_list|(
literal|"JAR"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Hadoop RunJar util"
block|,
literal|"JAR jarFile [mainClass] arguments...;"
block|}
argument_list|)
block|;
name|load
operator|.
name|put
argument_list|(
literal|"CLEAR"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Clear the screen"
block|,
literal|"CLEAR;"
block|}
argument_list|)
block|;
name|load
operator|.
name|put
argument_list|(
literal|"DESCRIBE"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Print table information"
block|,
literal|"[DESCRIBE|DESC] table_name;"
block|}
argument_list|)
block|;
name|load
operator|.
name|put
argument_list|(
literal|"CREATE"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Create tables"
block|,
literal|"CREATE TABLE table_name (column_family_name [MAX_VERSIONS=n] "
operator|+
literal|"[MAX_LENGTH=n] [COMPRESSION=NONE|RECORD|BLOCK] [IN_MEMORY] "
operator|+
literal|"[BLOOMFILTER=NONE|BLOOMFILTER|COUNTING_BLOOMFILTER|RETOUCHED_BLOOMFILTER "
operator|+
literal|"VECTOR_SIZE=n NUM_HASH=n], "
operator|+
literal|"...)"
block|}
argument_list|)
block|;
name|load
operator|.
name|put
argument_list|(
literal|"DROP"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Drop tables"
block|,
literal|"DROP TABLE table_name [, table_name] ...;"
block|}
argument_list|)
block|;
name|load
operator|.
name|put
argument_list|(
literal|"INSERT"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Insert values into table"
block|,
literal|"INSERT INTO table_name (column_name, ...) "
operator|+
literal|"VALUES ('value', ...) WHERE row='row_key';"
block|}
argument_list|)
block|;
name|load
operator|.
name|put
argument_list|(
literal|"DELETE"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Delete table data"
block|,
literal|"DELETE {column_name, [, column_name] ... | *} FROM table_name "
operator|+
literal|"WHERE row='row-key';"
block|}
argument_list|)
block|;
name|load
operator|.
name|put
argument_list|(
literal|"SELECT"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Select values from table"
block|,
literal|"SELECT {column_name, [, column_name] ... | *} FROM table_name "
operator|+
literal|"[WHERE row='row_key' | STARTING FROM 'row-key'] "
operator|+
literal|"[NUM_VERSIONS = version_count] "
operator|+
literal|"[TIMESTAMP 'timestamp'] "
operator|+
literal|"[LIMIT = row_count] "
operator|+
literal|"[INTO FILE 'file_name'];"
block|}
argument_list|)
block|;
name|load
operator|.
name|put
argument_list|(
literal|"ALTER"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Alter structure of table"
block|,
literal|"ALTER TABLE table_name ADD column_spec | "
operator|+
literal|"ADD (column_spec, column_spec, ...) | "
operator|+
literal|"CHANGE column_family column_spec | "
operator|+
literal|"DROP column_family_name | "
operator|+
literal|"CHANGE column_spec;"
block|}
argument_list|)
block|;
name|load
operator|.
name|put
argument_list|(
literal|"EXIT"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Exit shell"
block|,
literal|"EXIT;"
block|}
argument_list|)
block|;
return|return
name|load
return|;
block|}
comment|/**    * Print out the program version.    *     * @throws IOException    */
specifier|public
name|void
name|printVersion
parameter_list|()
throws|throws
name|IOException
block|{
name|println
argument_list|(
name|APP_NAME
operator|+
literal|", "
operator|+
name|APP_VERSION
operator|+
literal|" version.\n"
operator|+
literal|"Copyright (c) 2007 by udanax, "
operator|+
literal|"licensed to Apache Software Foundation.\n"
operator|+
literal|"Type 'help;' for usage.\n"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|printHelp
parameter_list|(
specifier|final
name|String
name|cmd
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|println
argument_list|(
literal|"Type 'help COMMAND;' to see command-specific usage."
argument_list|)
expr_stmt|;
name|printHelp
argument_list|(
name|this
operator|.
name|help
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|this
operator|.
name|help
operator|.
name|containsKey
argument_list|(
name|cmd
operator|.
name|toUpperCase
argument_list|()
argument_list|)
condition|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|m
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
name|cmd
operator|.
name|toUpperCase
argument_list|()
argument_list|,
name|this
operator|.
name|help
operator|.
name|get
argument_list|(
name|cmd
operator|.
name|toUpperCase
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|printHelp
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|println
argument_list|(
literal|"Unknown Command : Type 'help;' for usage."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|printHelp
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|m
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|formatter
operator|.
name|header
argument_list|(
name|HEADER
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|e
range|:
name|m
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
index|[]
name|value
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|this
operator|.
name|formatter
operator|.
name|row
argument_list|(
operator|new
name|String
index|[]
block|{
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|toUpperCase
argument_list|()
block|,
name|value
index|[
literal|0
index|]
block|,
name|value
index|[
literal|1
index|]
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Value has too many elements:"
operator|+
name|value
argument_list|)
throw|;
block|}
block|}
name|this
operator|.
name|formatter
operator|.
name|footer
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
name|HBaseConfiguration
name|conf
init|=
operator|new
name|HBaseConfiguration
argument_list|()
decl_stmt|;
name|Writer
name|out
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|System
operator|.
name|out
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|TableFormatterFactory
name|tff
init|=
operator|new
name|TableFormatterFactory
argument_list|(
name|out
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|HelpCommand
name|cmd
init|=
operator|new
name|HelpCommand
argument_list|(
name|out
argument_list|,
name|tff
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|cmd
operator|.
name|setArgument
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|execute
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setArgument
argument_list|(
literal|"select"
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|execute
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

