begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shell
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_comment
comment|/**  * Takes the lowest-common-denominator {@link Writer} doing its own printlns,  * etc.  * @see<a href="http://wiki.apache.org/lucene-hadoop/Hbase/HbaseShell">HBaseShell</a>  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|BasicCommand
implements|implements
name|Command
implements|,
name|CommandFactory
block|{
specifier|private
specifier|final
name|Writer
name|out
decl_stmt|;
specifier|public
specifier|final
name|String
name|LINE_SEPARATOR
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
comment|// Shutdown constructor.
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
name|BasicCommand
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructor    * @param o A Writer.    */
specifier|public
name|BasicCommand
parameter_list|(
specifier|final
name|Writer
name|o
parameter_list|)
block|{
name|this
operator|.
name|out
operator|=
name|o
expr_stmt|;
block|}
specifier|public
name|BasicCommand
name|getBasicCommand
parameter_list|()
block|{
return|return
name|this
return|;
block|}
comment|/** basic commands are their own factories. */
specifier|public
name|Command
name|getCommand
parameter_list|()
block|{
return|return
name|this
return|;
block|}
specifier|protected
name|String
name|extractErrMsg
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|int
name|index
init|=
name|msg
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|int
name|eofIndex
init|=
name|msg
operator|.
name|indexOf
argument_list|(
literal|"\n"
argument_list|)
decl_stmt|;
return|return
name|msg
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|,
name|eofIndex
argument_list|)
return|;
block|}
specifier|protected
name|String
name|extractErrMsg
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
name|extractErrMsg
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Appends, if it does not exist, a delimiter (colon)     * at the end of the column name.    */
specifier|protected
name|String
name|appendDelimiter
parameter_list|(
name|String
name|column
parameter_list|)
block|{
return|return
operator|(
operator|!
name|column
operator|.
name|endsWith
argument_list|(
name|FAMILY_INDICATOR
argument_list|)
operator|&&
name|column
operator|.
name|indexOf
argument_list|(
name|FAMILY_INDICATOR
argument_list|)
operator|==
operator|-
literal|1
operator|)
condition|?
name|column
operator|+
name|FAMILY_INDICATOR
else|:
name|column
return|;
block|}
comment|/**    * @return Writer to use outputting.    */
specifier|public
name|Writer
name|getOut
parameter_list|()
block|{
return|return
name|this
operator|.
name|out
return|;
block|}
specifier|public
name|void
name|print
parameter_list|(
specifier|final
name|String
name|msg
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|out
operator|.
name|write
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|println
parameter_list|(
specifier|final
name|String
name|msg
parameter_list|)
throws|throws
name|IOException
block|{
name|print
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|print
argument_list|(
name|LINE_SEPARATOR
argument_list|)
expr_stmt|;
name|this
operator|.
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|CommandType
name|getCommandType
parameter_list|()
block|{
return|return
name|CommandType
operator|.
name|SELECT
return|;
block|}
block|}
end_class

end_unit

