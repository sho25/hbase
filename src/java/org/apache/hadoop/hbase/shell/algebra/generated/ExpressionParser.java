begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* Generated By:JavaCC: Do not edit this line. ExpressionParser.java */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shell
operator|.
name|algebra
operator|.
name|generated
package|;
end_package

begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ImmutableBytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|MapWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_comment
comment|/**  * Parsing command line.  */
end_comment

begin_class
specifier|public
class|class
name|ExpressionParser
implements|implements
name|ExpressionParserConstants
block|{
name|HBaseConfiguration
name|conf
init|=
operator|new
name|HBaseConfiguration
argument_list|()
decl_stmt|;
specifier|private
name|String
name|expression
decl_stmt|;
specifier|private
name|String
name|joinKeyColumn
decl_stmt|;
specifier|private
name|String
name|secondRelation
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|unionSet
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|intersectionSet
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|SortedMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|secondValue
init|=
literal|null
decl_stmt|;
specifier|public
name|ExpressionParser
parameter_list|(
specifier|final
name|String
name|expression
parameter_list|)
block|{
name|this
argument_list|(
call|(
name|Reader
call|)
argument_list|(
operator|new
name|StringReader
argument_list|(
name|expression
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|expression
operator|=
name|expression
expr_stmt|;
block|}
specifier|public
name|String
name|getExpression
parameter_list|()
block|{
return|return
name|this
operator|.
name|expression
return|;
block|}
specifier|final
specifier|public
name|void
name|booleanExpressionParse
parameter_list|()
throws|throws
name|ParseException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|temp
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|temp
operator|=
name|booleanTerm
argument_list|()
expr_stmt|;
name|label_1
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|AND
case|:
case|case
name|OR
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|0
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_1
break|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|AND
case|:
name|jj_consume_token
argument_list|(
name|AND
argument_list|)
expr_stmt|;
if|if
condition|(
name|temp
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|e
range|:
name|temp
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|newList
init|=
name|intersectionSet
operator|.
name|get
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|newList
operator|!=
literal|null
condition|)
block|{
name|newList
operator|.
name|addAll
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newList
operator|=
name|e
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
name|intersectionSet
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|newList
argument_list|)
expr_stmt|;
block|}
block|}
name|temp
operator|=
name|booleanTerm
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|e
range|:
name|temp
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|newList
init|=
name|intersectionSet
operator|.
name|get
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|newList
operator|!=
literal|null
condition|)
block|{
name|newList
operator|.
name|addAll
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newList
operator|=
name|e
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
name|intersectionSet
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|newList
argument_list|)
expr_stmt|;
block|}
name|temp
operator|=
literal|null
expr_stmt|;
break|break;
case|case
name|OR
case|:
name|jj_consume_token
argument_list|(
name|OR
argument_list|)
expr_stmt|;
if|if
condition|(
name|temp
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|e
range|:
name|temp
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|newList
init|=
name|unionSet
operator|.
name|get
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|newList
operator|!=
literal|null
condition|)
block|{
name|newList
operator|.
name|addAll
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newList
operator|=
name|e
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
name|unionSet
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|newList
argument_list|)
expr_stmt|;
block|}
block|}
name|temp
operator|=
name|booleanTerm
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|e
range|:
name|temp
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|newList
init|=
name|unionSet
operator|.
name|get
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|newList
operator|!=
literal|null
condition|)
block|{
name|newList
operator|.
name|addAll
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newList
operator|=
name|e
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
name|unionSet
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|newList
argument_list|)
expr_stmt|;
block|}
name|temp
operator|=
literal|null
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|1
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
if|if
condition|(
name|temp
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|e
range|:
name|temp
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|newList
init|=
name|unionSet
operator|.
name|get
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|newList
operator|!=
literal|null
condition|)
block|{
name|newList
operator|.
name|addAll
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newList
operator|=
name|e
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
name|unionSet
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|newList
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|final
specifier|public
name|void
name|joinExpressionParse
parameter_list|()
throws|throws
name|ParseException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|temp
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|indexJoinCondition
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|BOOL
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ID
case|:
case|case
name|INTEGER_LITERAL
case|:
name|temp
operator|=
name|booleanTerm
argument_list|()
expr_stmt|;
name|label_2
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|AND
case|:
case|case
name|OR
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|2
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_2
break|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|AND
case|:
name|jj_consume_token
argument_list|(
name|AND
argument_list|)
expr_stmt|;
if|if
condition|(
name|temp
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|e
range|:
name|temp
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|newList
init|=
name|intersectionSet
operator|.
name|get
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|newList
operator|!=
literal|null
condition|)
block|{
name|newList
operator|.
name|addAll
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newList
operator|=
name|e
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
name|intersectionSet
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|newList
argument_list|)
expr_stmt|;
block|}
block|}
name|temp
operator|=
name|booleanTerm
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|e
range|:
name|temp
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|newList
init|=
name|intersectionSet
operator|.
name|get
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|newList
operator|!=
literal|null
condition|)
block|{
name|newList
operator|.
name|addAll
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newList
operator|=
name|e
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
name|intersectionSet
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|newList
argument_list|)
expr_stmt|;
block|}
name|temp
operator|=
literal|null
expr_stmt|;
break|break;
case|case
name|OR
case|:
name|jj_consume_token
argument_list|(
name|OR
argument_list|)
expr_stmt|;
if|if
condition|(
name|temp
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|e
range|:
name|temp
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|newList
init|=
name|unionSet
operator|.
name|get
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|newList
operator|!=
literal|null
condition|)
block|{
name|newList
operator|.
name|addAll
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newList
operator|=
name|e
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
name|unionSet
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|newList
argument_list|)
expr_stmt|;
block|}
block|}
name|temp
operator|=
name|booleanTerm
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|e
range|:
name|temp
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|newList
init|=
name|unionSet
operator|.
name|get
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|newList
operator|!=
literal|null
condition|)
block|{
name|newList
operator|.
name|addAll
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newList
operator|=
name|e
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
name|unionSet
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|newList
argument_list|)
expr_stmt|;
block|}
name|temp
operator|=
literal|null
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|3
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
if|if
condition|(
name|temp
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|e
range|:
name|temp
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|newList
init|=
name|unionSet
operator|.
name|get
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|newList
operator|!=
literal|null
condition|)
block|{
name|newList
operator|.
name|addAll
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newList
operator|=
name|e
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
name|unionSet
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|newList
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|4
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
block|}
specifier|final
specifier|public
name|void
name|indexJoinCondition
parameter_list|()
throws|throws
name|ParseException
block|{
name|Token
name|firstR
init|=
literal|null
decl_stmt|;
name|Token
name|joinKey
init|=
literal|null
decl_stmt|;
name|Token
name|secondR
init|=
literal|null
decl_stmt|;
name|firstR
operator|=
name|jj_consume_token
argument_list|(
name|ID
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|DOT
argument_list|)
expr_stmt|;
name|joinKey
operator|=
name|jj_consume_token
argument_list|(
name|ID
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|EQUALS
argument_list|)
expr_stmt|;
name|secondR
operator|=
name|jj_consume_token
argument_list|(
name|ID
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|DOT
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|joinKeyColumn
operator|=
name|joinKey
operator|.
name|image
operator|.
name|toString
argument_list|()
expr_stmt|;
name|secondRelation
operator|=
name|secondR
operator|.
name|image
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
specifier|final
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|booleanTerm
parameter_list|()
throws|throws
name|ParseException
block|{
name|Token
name|tSearchName
init|=
literal|null
decl_stmt|;
name|Token
name|tComparator
init|=
literal|null
decl_stmt|;
name|Token
name|tFirst
init|=
literal|null
decl_stmt|;
name|Token
name|tSecond
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|valueList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|comparand
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ID
case|:
name|tSearchName
operator|=
name|jj_consume_token
argument_list|(
name|ID
argument_list|)
expr_stmt|;
break|break;
case|case
name|INTEGER_LITERAL
case|:
name|tSearchName
operator|=
name|jj_consume_token
argument_list|(
name|INTEGER_LITERAL
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|5
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|DOT
case|:
name|jj_consume_token
argument_list|(
name|DOT
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ID
case|:
name|tFirst
operator|=
name|jj_consume_token
argument_list|(
name|ID
argument_list|)
expr_stmt|;
break|break;
case|case
name|INTEGER_LITERAL
case|:
name|tFirst
operator|=
name|jj_consume_token
argument_list|(
name|INTEGER_LITERAL
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|6
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|7
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|EQUALS
case|:
name|tComparator
operator|=
name|jj_consume_token
argument_list|(
name|EQUALS
argument_list|)
expr_stmt|;
break|break;
case|case
name|LCOMP
case|:
name|tComparator
operator|=
name|jj_consume_token
argument_list|(
name|LCOMP
argument_list|)
expr_stmt|;
break|break;
case|case
name|LCOMPE
case|:
name|tComparator
operator|=
name|jj_consume_token
argument_list|(
name|LCOMPE
argument_list|)
expr_stmt|;
break|break;
case|case
name|RCOMPE
case|:
name|tComparator
operator|=
name|jj_consume_token
argument_list|(
name|RCOMPE
argument_list|)
expr_stmt|;
break|break;
case|case
name|RCOMP
case|:
name|tComparator
operator|=
name|jj_consume_token
argument_list|(
name|RCOMP
argument_list|)
expr_stmt|;
break|break;
case|case
name|IN
case|:
name|tComparator
operator|=
name|jj_consume_token
argument_list|(
name|IN
argument_list|)
expr_stmt|;
break|break;
case|case
name|NOTIN
case|:
name|tComparator
operator|=
name|jj_consume_token
argument_list|(
name|NOTIN
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|8
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
name|comparand
operator|=
name|getValueList
argument_list|()
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|DOT
case|:
name|jj_consume_token
argument_list|(
name|DOT
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ID
case|:
name|tSecond
operator|=
name|jj_consume_token
argument_list|(
name|ID
argument_list|)
expr_stmt|;
break|break;
case|case
name|INTEGER_LITERAL
case|:
name|tSecond
operator|=
name|jj_consume_token
argument_list|(
name|INTEGER_LITERAL
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|9
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|10
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
if|if
condition|(
name|tFirst
operator|==
literal|null
operator|&&
name|tSecond
operator|==
literal|null
condition|)
block|{
name|valueList
operator|.
name|add
argument_list|(
name|tComparator
operator|.
name|image
operator|.
name|toString
argument_list|()
operator|+
literal|" "
operator|+
name|comparand
argument_list|)
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
name|tSearchName
operator|.
name|image
operator|.
name|toString
argument_list|()
argument_list|,
name|valueList
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tFirst
operator|!=
literal|null
operator|&&
name|tSecond
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|tSearchName
operator|.
name|image
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|secondRelation
argument_list|)
condition|)
block|{
name|valueList
operator|.
name|add
argument_list|(
name|tComparator
operator|.
name|image
operator|.
name|toString
argument_list|()
operator|+
literal|" "
operator|+
name|secondValue
operator|.
name|get
argument_list|(
operator|new
name|Text
argument_list|(
name|tSearchName
operator|.
name|image
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
name|tFirst
operator|.
name|image
operator|.
name|toString
argument_list|()
argument_list|,
name|valueList
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|valueList
operator|.
name|add
argument_list|(
name|tComparator
operator|.
name|image
operator|.
name|toString
argument_list|()
operator|+
literal|" "
operator|+
name|tSecond
operator|.
name|image
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
name|tFirst
operator|.
name|image
operator|.
name|toString
argument_list|()
argument_list|,
name|valueList
argument_list|)
expr_stmt|;
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|result
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|String
name|getValueList
parameter_list|()
throws|throws
name|ParseException
block|{
name|Token
name|tComparand
init|=
literal|null
decl_stmt|;
name|Token
name|tList
init|=
literal|null
decl_stmt|;
name|String
name|result
init|=
literal|""
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ID
case|:
name|tComparand
operator|=
name|jj_consume_token
argument_list|(
name|ID
argument_list|)
expr_stmt|;
break|break;
case|case
name|INTEGER_LITERAL
case|:
name|tComparand
operator|=
name|jj_consume_token
argument_list|(
name|INTEGER_LITERAL
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|11
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
name|result
operator|=
name|tComparand
operator|.
name|image
operator|.
name|toString
argument_list|()
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|BAR
case|:
name|jj_consume_token
argument_list|(
name|BAR
argument_list|)
expr_stmt|;
name|label_3
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ID
case|:
case|case
name|INTEGER_LITERAL
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|12
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_3
break|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ID
case|:
name|tList
operator|=
name|jj_consume_token
argument_list|(
name|ID
argument_list|)
expr_stmt|;
break|break;
case|case
name|INTEGER_LITERAL
case|:
name|tList
operator|=
name|jj_consume_token
argument_list|(
name|INTEGER_LITERAL
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|13
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
name|result
operator|+=
literal|"|"
operator|+
name|tList
operator|.
name|image
operator|.
name|toString
argument_list|()
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|BAR
case|:
name|jj_consume_token
argument_list|(
name|BAR
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|14
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|15
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|result
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|boolean
name|checkConstraints
parameter_list|(
name|MapWritable
name|data
parameter_list|)
throws|throws
name|ParseException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|record
init|=
name|getComparisonObject
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|boolean
name|result
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|intersectionSet
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|&&
name|unionSet
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|data
operator|==
literal|null
operator|||
name|record
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|result
return|;
comment|// return false if data is null.
block|}
if|if
condition|(
name|intersectionSet
operator|.
name|size
argument_list|()
operator|==
name|record
operator|.
name|size
argument_list|()
condition|)
block|{
name|result
operator|=
name|booleanCompare
argument_list|(
name|intersectionSet
argument_list|,
name|record
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|unionSet
operator|.
name|size
argument_list|()
operator|==
name|record
operator|.
name|size
argument_list|()
condition|)
block|{
name|result
operator|=
name|booleanCompare
argument_list|(
name|unionSet
argument_list|,
name|record
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|getCompareResult
argument_list|(
name|record
argument_list|)
expr_stmt|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|result
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getComparisonObject
parameter_list|(
name|MapWritable
name|data
parameter_list|)
throws|throws
name|ParseException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Writable
argument_list|,
name|Writable
argument_list|>
name|e
range|:
name|data
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|cKey
init|=
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|val
init|=
operator|new
name|String
argument_list|(
operator|(
operator|(
name|ImmutableBytesWritable
operator|)
name|e
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|intersectionSet
operator|.
name|containsKey
argument_list|(
name|cKey
argument_list|)
operator|||
name|unionSet
operator|.
name|containsKey
argument_list|(
name|cKey
argument_list|)
condition|)
block|{
name|result
operator|.
name|put
argument_list|(
name|cKey
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|result
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|MapWritable
name|getJoinColumns
parameter_list|(
name|MapWritable
name|value
parameter_list|,
name|int
name|numCols
parameter_list|,
name|String
name|secondRelation
parameter_list|)
throws|throws
name|ParseException
block|{
name|MapWritable
name|appendValue
init|=
operator|new
name|MapWritable
argument_list|()
decl_stmt|;
name|String
name|joinKey
init|=
literal|null
decl_stmt|;
name|this
operator|.
name|secondRelation
operator|=
name|secondRelation
expr_stmt|;
if|if
condition|(
name|numCols
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Writable
argument_list|,
name|Writable
argument_list|>
name|e
range|:
name|value
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Text
name|column
init|=
operator|(
name|Text
operator|)
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numCols
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|column
operator|.
name|equals
argument_list|(
operator|new
name|Text
argument_list|(
name|joinKeyColumn
argument_list|)
argument_list|)
condition|)
block|{
name|joinKey
operator|=
operator|new
name|String
argument_list|(
operator|(
operator|(
name|ImmutableBytesWritable
operator|)
name|e
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
comment|//If joinKey is null, just return.
if|if
condition|(
name|joinKey
operator|==
literal|null
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|appendValue
return|;
block|}
block|}
try|try
block|{
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
operator|new
name|Text
argument_list|(
name|secondRelation
argument_list|)
argument_list|)
decl_stmt|;
name|secondValue
operator|=
name|table
operator|.
name|getRow
argument_list|(
operator|new
name|Text
argument_list|(
name|joinKey
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|e
range|:
name|secondValue
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|appendValue
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
operator|new
name|ImmutableBytesWritable
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|appendValue
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|boolean
name|getCompareResult
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|record
parameter_list|)
throws|throws
name|ParseException
block|{
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|(
name|booleanCompare
argument_list|(
name|intersectionSet
argument_list|,
name|record
argument_list|,
literal|true
argument_list|)
operator|&&
name|booleanCompare
argument_list|(
name|unionSet
argument_list|,
name|record
argument_list|,
literal|false
argument_list|)
operator|)
condition|?
literal|true
else|:
literal|false
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|boolean
name|booleanCompare
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|expression
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|record
parameter_list|,
name|boolean
name|isIntersection
parameter_list|)
throws|throws
name|ParseException
block|{
name|boolean
name|negative
init|=
literal|true
decl_stmt|;
name|boolean
name|positive
init|=
literal|false
decl_stmt|;
try|try
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|e
range|:
name|expression
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|valueList
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|recordValueList
init|=
name|record
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
index|[]
name|term
init|=
name|valueList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
name|String
name|comparator
init|=
name|term
index|[
literal|0
index|]
decl_stmt|;
name|String
name|comparand
init|=
name|term
index|[
literal|1
index|]
decl_stmt|;
switch|switch
condition|(
name|comparator
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
condition|)
block|{
case|case
literal|'>'
case|:
if|if
condition|(
name|isSecond
argument_list|(
name|comparator
argument_list|,
literal|"="
argument_list|)
condition|)
block|{
if|if
condition|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|comparand
argument_list|)
operator|>
name|Integer
operator|.
name|parseInt
argument_list|(
name|recordValueList
argument_list|)
condition|)
block|{
name|negative
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|positive
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|comparand
argument_list|)
operator|>
name|Integer
operator|.
name|parseInt
argument_list|(
name|recordValueList
argument_list|)
operator|||
name|comparand
operator|.
name|equals
argument_list|(
name|recordValueList
argument_list|)
condition|)
block|{
name|negative
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|positive
operator|=
literal|true
expr_stmt|;
block|}
block|}
break|break;
case|case
literal|'<'
case|:
if|if
condition|(
name|isSecond
argument_list|(
name|comparator
argument_list|,
literal|"="
argument_list|)
condition|)
block|{
if|if
condition|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|comparand
argument_list|)
operator|<
name|Integer
operator|.
name|parseInt
argument_list|(
name|recordValueList
argument_list|)
condition|)
name|negative
operator|=
literal|false
expr_stmt|;
else|else
name|positive
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|comparand
argument_list|)
operator|<
name|Integer
operator|.
name|parseInt
argument_list|(
name|recordValueList
argument_list|)
operator|||
name|comparand
operator|.
name|equals
argument_list|(
name|recordValueList
argument_list|)
condition|)
name|negative
operator|=
literal|false
expr_stmt|;
else|else
name|positive
operator|=
literal|true
expr_stmt|;
block|}
break|break;
case|case
literal|'!'
case|:
if|if
condition|(
name|isSecond
argument_list|(
name|comparator
argument_list|,
literal|"!"
argument_list|)
condition|)
block|{
name|boolean
name|checkBool
init|=
literal|true
decl_stmt|;
name|String
index|[]
name|coms
init|=
name|comparand
operator|.
name|split
argument_list|(
literal|"[|]"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|coms
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|URLDecoder
operator|.
name|decode
argument_list|(
name|coms
index|[
name|j
index|]
argument_list|,
literal|"UTF-8"
argument_list|)
operator|.
name|equals
argument_list|(
name|recordValueList
argument_list|)
condition|)
block|{
name|checkBool
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|checkBool
condition|)
block|{
name|negative
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|positive
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|comparand
operator|.
name|equals
argument_list|(
name|recordValueList
argument_list|)
condition|)
name|negative
operator|=
literal|false
expr_stmt|;
else|else
name|positive
operator|=
literal|true
expr_stmt|;
block|}
break|break;
case|case
literal|'='
case|:
if|if
condition|(
name|isSecond
argument_list|(
name|comparator
argument_list|,
literal|"="
argument_list|)
condition|)
block|{
name|boolean
name|checkBool
init|=
literal|true
decl_stmt|;
name|String
index|[]
name|coms
init|=
name|comparand
operator|.
name|split
argument_list|(
literal|"[|]"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|coms
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|URLDecoder
operator|.
name|decode
argument_list|(
name|coms
index|[
name|j
index|]
argument_list|,
literal|"UTF-8"
argument_list|)
operator|.
name|equals
argument_list|(
name|recordValueList
argument_list|)
condition|)
block|{
name|checkBool
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|checkBool
condition|)
block|{
name|negative
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|positive
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|comparand
operator|.
name|equals
argument_list|(
name|recordValueList
argument_list|)
condition|)
name|negative
operator|=
literal|false
expr_stmt|;
else|else
name|positive
operator|=
literal|true
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|boolean
name|result
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|isIntersection
condition|)
block|{
name|result
operator|=
name|negative
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|positive
expr_stmt|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|result
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|boolean
name|isSecond
parameter_list|(
name|String
name|comparator
parameter_list|,
name|String
name|string
parameter_list|)
throws|throws
name|ParseException
block|{
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|(
name|comparator
operator|.
name|length
argument_list|()
operator|==
literal|2
operator|&&
name|string
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
name|comparator
operator|.
name|charAt
argument_list|(
literal|1
argument_list|)
operator|)
condition|?
literal|true
else|:
literal|false
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|public
name|ExpressionParserTokenManager
name|token_source
decl_stmt|;
name|SimpleCharStream
name|jj_input_stream
decl_stmt|;
specifier|public
name|Token
name|token
decl_stmt|,
name|jj_nt
decl_stmt|;
specifier|private
name|int
name|jj_ntk
decl_stmt|;
specifier|private
name|int
name|jj_gen
decl_stmt|;
specifier|final
specifier|private
name|int
index|[]
name|jj_la1
init|=
operator|new
name|int
index|[
literal|16
index|]
decl_stmt|;
specifier|static
specifier|private
name|int
index|[]
name|jj_la1_0
decl_stmt|;
static|static
block|{
name|jj_la1_0
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|jj_la1_0
parameter_list|()
block|{
name|jj_la1_0
operator|=
operator|new
name|int
index|[]
block|{
literal|0xc0
block|,
literal|0xc0
block|,
literal|0xc0
block|,
literal|0xc0
block|,
literal|0xc0000
block|,
literal|0xc0000
block|,
literal|0xc0000
block|,
literal|0x100
block|,
literal|0xfe00
block|,
literal|0xc0000
block|,
literal|0x100
block|,
literal|0xc0000
block|,
literal|0xc0000
block|,
literal|0xc0000
block|,
literal|0x10000
block|,
literal|0x10000
block|,}
expr_stmt|;
block|}
specifier|public
name|ExpressionParser
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|stream
parameter_list|)
block|{
name|this
argument_list|(
name|stream
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ExpressionParser
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|stream
parameter_list|,
name|String
name|encoding
parameter_list|)
block|{
try|try
block|{
name|jj_input_stream
operator|=
operator|new
name|SimpleCharStream
argument_list|(
name|stream
argument_list|,
name|encoding
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|token_source
operator|=
operator|new
name|ExpressionParserTokenManager
argument_list|(
name|jj_input_stream
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|16
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
specifier|public
name|void
name|ReInit
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|stream
parameter_list|)
block|{
name|ReInit
argument_list|(
name|stream
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|ReInit
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|stream
parameter_list|,
name|String
name|encoding
parameter_list|)
block|{
try|try
block|{
name|jj_input_stream
operator|.
name|ReInit
argument_list|(
name|stream
argument_list|,
name|encoding
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|token_source
operator|.
name|ReInit
argument_list|(
name|jj_input_stream
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|16
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
specifier|public
name|ExpressionParser
parameter_list|(
name|java
operator|.
name|io
operator|.
name|Reader
name|stream
parameter_list|)
block|{
name|jj_input_stream
operator|=
operator|new
name|SimpleCharStream
argument_list|(
name|stream
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|token_source
operator|=
operator|new
name|ExpressionParserTokenManager
argument_list|(
name|jj_input_stream
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|16
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
specifier|public
name|void
name|ReInit
parameter_list|(
name|java
operator|.
name|io
operator|.
name|Reader
name|stream
parameter_list|)
block|{
name|jj_input_stream
operator|.
name|ReInit
argument_list|(
name|stream
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|token_source
operator|.
name|ReInit
argument_list|(
name|jj_input_stream
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|16
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
specifier|public
name|ExpressionParser
parameter_list|(
name|ExpressionParserTokenManager
name|tm
parameter_list|)
block|{
name|token_source
operator|=
name|tm
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|16
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
specifier|public
name|void
name|ReInit
parameter_list|(
name|ExpressionParserTokenManager
name|tm
parameter_list|)
block|{
name|token_source
operator|=
name|tm
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|16
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
specifier|final
specifier|private
name|Token
name|jj_consume_token
parameter_list|(
name|int
name|kind
parameter_list|)
throws|throws
name|ParseException
block|{
name|Token
name|oldToken
decl_stmt|;
if|if
condition|(
operator|(
name|oldToken
operator|=
name|token
operator|)
operator|.
name|next
operator|!=
literal|null
condition|)
name|token
operator|=
name|token
operator|.
name|next
expr_stmt|;
else|else
name|token
operator|=
name|token
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|token
operator|.
name|kind
operator|==
name|kind
condition|)
block|{
name|jj_gen
operator|++
expr_stmt|;
return|return
name|token
return|;
block|}
name|token
operator|=
name|oldToken
expr_stmt|;
name|jj_kind
operator|=
name|kind
expr_stmt|;
throw|throw
name|generateParseException
argument_list|()
throw|;
block|}
specifier|final
specifier|public
name|Token
name|getNextToken
parameter_list|()
block|{
if|if
condition|(
name|token
operator|.
name|next
operator|!=
literal|null
condition|)
name|token
operator|=
name|token
operator|.
name|next
expr_stmt|;
else|else
name|token
operator|=
name|token
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|++
expr_stmt|;
return|return
name|token
return|;
block|}
specifier|final
specifier|public
name|Token
name|getToken
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Token
name|t
init|=
name|token
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|index
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|t
operator|.
name|next
operator|!=
literal|null
condition|)
name|t
operator|=
name|t
operator|.
name|next
expr_stmt|;
else|else
name|t
operator|=
name|t
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
expr_stmt|;
block|}
return|return
name|t
return|;
block|}
specifier|final
specifier|private
name|int
name|jj_ntk
parameter_list|()
block|{
if|if
condition|(
operator|(
name|jj_nt
operator|=
name|token
operator|.
name|next
operator|)
operator|==
literal|null
condition|)
return|return
operator|(
name|jj_ntk
operator|=
operator|(
name|token
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
operator|)
operator|.
name|kind
operator|)
return|;
else|else
return|return
operator|(
name|jj_ntk
operator|=
name|jj_nt
operator|.
name|kind
operator|)
return|;
block|}
specifier|private
name|java
operator|.
name|util
operator|.
name|Vector
name|jj_expentries
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|Vector
argument_list|()
decl_stmt|;
specifier|private
name|int
index|[]
name|jj_expentry
decl_stmt|;
specifier|private
name|int
name|jj_kind
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
name|ParseException
name|generateParseException
parameter_list|()
block|{
name|jj_expentries
operator|.
name|removeAllElements
argument_list|()
expr_stmt|;
name|boolean
index|[]
name|la1tokens
init|=
operator|new
name|boolean
index|[
literal|24
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|24
condition|;
name|i
operator|++
control|)
block|{
name|la1tokens
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|jj_kind
operator|>=
literal|0
condition|)
block|{
name|la1tokens
index|[
name|jj_kind
index|]
operator|=
literal|true
expr_stmt|;
name|jj_kind
operator|=
operator|-
literal|1
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|16
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|jj_la1
index|[
name|i
index|]
operator|==
name|jj_gen
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|32
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|jj_la1_0
index|[
name|i
index|]
operator|&
operator|(
literal|1
operator|<<
name|j
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|la1tokens
index|[
name|j
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|24
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|la1tokens
index|[
name|i
index|]
condition|)
block|{
name|jj_expentry
operator|=
operator|new
name|int
index|[
literal|1
index|]
expr_stmt|;
name|jj_expentry
index|[
literal|0
index|]
operator|=
name|i
expr_stmt|;
name|jj_expentries
operator|.
name|addElement
argument_list|(
name|jj_expentry
argument_list|)
expr_stmt|;
block|}
block|}
name|int
index|[]
index|[]
name|exptokseq
init|=
operator|new
name|int
index|[
name|jj_expentries
operator|.
name|size
argument_list|()
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_expentries
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|exptokseq
index|[
name|i
index|]
operator|=
operator|(
name|int
index|[]
operator|)
name|jj_expentries
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ParseException
argument_list|(
name|token
argument_list|,
name|exptokseq
argument_list|,
name|tokenImage
argument_list|)
return|;
block|}
specifier|final
specifier|public
name|void
name|enable_tracing
parameter_list|()
block|{   }
specifier|final
specifier|public
name|void
name|disable_tracing
parameter_list|()
block|{   }
block|}
end_class

end_unit

