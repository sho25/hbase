begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shell
operator|.
name|algebra
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_comment
comment|/**  * Perform a index join using MapReduce.  */
end_comment

begin_class
specifier|public
class|class
name|IndexJoin
extends|extends
name|RelationalOperation
block|{
specifier|public
name|IndexJoin
parameter_list|(
name|HBaseConfiguration
name|conf
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|condition
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|condition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|JobConf
name|getConf
parameter_list|()
throws|throws
name|IOException
throws|,
name|RuntimeException
block|{
name|String
name|secondRelation
init|=
name|condition
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|JOIN_SECOND_RELATION
argument_list|)
decl_stmt|;
name|HColumnDescriptor
index|[]
name|firstColumns
init|=
literal|null
decl_stmt|;
name|HColumnDescriptor
index|[]
name|secondColumns
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tables
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|tables
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
operator|new
name|Text
argument_list|(
name|input
argument_list|)
argument_list|)
condition|)
block|{
name|firstColumns
operator|=
name|tables
index|[
name|i
index|]
operator|.
name|getFamilies
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|HColumnDescriptor
index|[]
block|{}
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tables
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
operator|new
name|Text
argument_list|(
name|secondRelation
argument_list|)
argument_list|)
condition|)
block|{
name|secondColumns
operator|=
name|tables
index|[
name|i
index|]
operator|.
name|getFamilies
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|HColumnDescriptor
index|[]
block|{}
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|firstColumnsStr
init|=
literal|""
decl_stmt|;
name|String
name|secondColumnsStr
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|firstColumns
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|desc
operator|.
name|addFamily
argument_list|(
name|firstColumns
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|firstColumnsStr
operator|+=
name|firstColumns
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|+
literal|" "
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|secondColumns
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|desc
operator|.
name|addFamily
argument_list|(
name|secondColumns
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|secondColumnsStr
operator|+=
name|secondColumns
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|+
literal|" "
expr_stmt|;
block|}
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
comment|// create output table.
name|IndexJoinMap
operator|.
name|initJob
argument_list|(
name|input
argument_list|,
name|secondRelation
argument_list|,
name|firstColumnsStr
argument_list|,
name|secondColumnsStr
argument_list|,
name|condition
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|RELATIONAL_JOIN
argument_list|)
argument_list|,
name|IndexJoinMap
operator|.
name|class
argument_list|,
name|jobConf
argument_list|)
expr_stmt|;
name|IndexJoinReduce
operator|.
name|initJob
argument_list|(
name|output
argument_list|,
name|IndexJoinReduce
operator|.
name|class
argument_list|,
name|jobConf
argument_list|)
expr_stmt|;
return|return
name|jobConf
return|;
block|}
block|}
end_class

end_unit

