begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shell
operator|.
name|algebra
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConnectionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|ClusterStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_comment
comment|/**  * Represents the interface to an relational algebra operation like projection,  * selection, join, group.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|RelationalOperation
implements|implements
name|Operation
block|{
specifier|protected
name|JobConf
name|jobConf
decl_stmt|;
specifier|protected
name|HConnection
name|conn
decl_stmt|;
specifier|protected
name|HBaseAdmin
name|admin
decl_stmt|;
specifier|protected
name|JobClient
name|jobClient
decl_stmt|;
specifier|protected
name|HTableDescriptor
name|desc
decl_stmt|;
specifier|protected
name|String
name|input
decl_stmt|;
specifier|protected
name|String
name|output
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|condition
decl_stmt|;
specifier|protected
name|HTableDescriptor
index|[]
name|tables
decl_stmt|;
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|projSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Constructor    *     * @param conf    * @param statements    */
specifier|public
name|RelationalOperation
parameter_list|(
name|HBaseConfiguration
name|conf
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|statements
parameter_list|)
block|{
name|this
operator|.
name|jobConf
operator|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|conn
operator|=
name|HConnectionManager
operator|.
name|getConnection
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|condition
operator|=
name|statements
expr_stmt|;
name|this
operator|.
name|input
operator|=
name|statements
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|CONFIG_INPUT
argument_list|)
expr_stmt|;
name|this
operator|.
name|output
operator|=
name|statements
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|CONFIG_OUTPUT
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setJobName
argument_list|(
literal|"shell.mapred-"
operator|+
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|desc
operator|=
operator|new
name|HTableDescriptor
argument_list|(
name|output
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|admin
operator|=
operator|new
name|HBaseAdmin
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|jobClient
operator|=
operator|new
name|JobClient
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
name|tables
operator|=
name|conn
operator|.
name|listTables
argument_list|()
expr_stmt|;
name|ClusterStatus
name|cluster
init|=
name|jobClient
operator|.
name|getClusterStatus
argument_list|()
decl_stmt|;
name|jobConf
operator|.
name|setNumMapTasks
argument_list|(
name|cluster
operator|.
name|getMapTasks
argument_list|()
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setNumReduceTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Gets the input table column descriptor[]    *     * @return columns    */
specifier|public
name|HColumnDescriptor
index|[]
name|getInputColumnDescriptor
parameter_list|()
block|{
name|HColumnDescriptor
index|[]
name|columns
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tables
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|tables
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
operator|new
name|Text
argument_list|(
name|input
argument_list|)
argument_list|)
condition|)
block|{
name|columns
operator|=
name|tables
index|[
name|i
index|]
operator|.
name|getFamilies
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|HColumnDescriptor
index|[]
block|{}
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
return|return
name|columns
return|;
block|}
comment|/**    * Convert HColumnDescriptor[] to String    *     * @param columns    * @return columns string    */
specifier|public
name|String
name|getColumnStringArray
parameter_list|(
name|HColumnDescriptor
index|[]
name|columns
parameter_list|)
block|{
name|String
name|result
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|desc
operator|.
name|addFamily
argument_list|(
name|columns
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|result
operator|+=
name|columns
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|+
literal|" "
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Creates the output table    *     * @param columns    * @param columnString    * @throws IOException    */
specifier|public
name|void
name|outputTableCreate
parameter_list|(
name|HColumnDescriptor
index|[]
name|columns
parameter_list|,
name|String
name|columnString
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|columnString
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|projSet
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|desc
operator|.
name|addFamily
argument_list|(
name|columns
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|projSet
operator|.
name|contains
argument_list|(
name|columns
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|desc
operator|.
name|addFamily
argument_list|(
name|columns
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
name|String
index|[]
name|cols
init|=
name|columnString
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cols
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|cols
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
block|}
comment|/**    * Return the jobConf    */
specifier|public
name|JobConf
name|getConf
parameter_list|()
throws|throws
name|IOException
throws|,
name|RuntimeException
block|{
return|return
name|jobConf
return|;
block|}
comment|/**    * @return projection conditions    */
specifier|public
name|String
name|getProjColumns
parameter_list|()
block|{
return|return
name|condition
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|RELATIONAL_PROJECTION
argument_list|)
return|;
block|}
comment|/**    * @return selection conditions    */
specifier|public
name|String
name|getExpression
parameter_list|()
block|{
return|return
name|condition
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|RELATIONAL_SELECTION
argument_list|)
return|;
block|}
comment|/**    * @return group conditions    */
specifier|public
name|String
name|getGroupColumns
parameter_list|()
block|{
return|return
name|condition
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|RELATIONAL_GROUP
argument_list|)
return|;
block|}
specifier|public
name|Operation
name|getOperation
parameter_list|()
block|{
return|return
name|this
return|;
block|}
block|}
end_class

end_unit

