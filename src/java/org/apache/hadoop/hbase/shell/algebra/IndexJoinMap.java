begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shell
operator|.
name|algebra
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HStoreKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapred
operator|.
name|TableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapred
operator|.
name|TableOutputCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shell
operator|.
name|algebra
operator|.
name|generated
operator|.
name|ExpressionParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shell
operator|.
name|algebra
operator|.
name|generated
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|MapWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_comment
comment|/**  * An index join exploits the existence of an row index for one of the relations  * used in the join to find matching rows more quickly.  *   * Index join (using R2 row index) takes time O(i+m)/map function number.  */
end_comment

begin_class
specifier|public
class|class
name|IndexJoinMap
extends|extends
name|TableMap
block|{
name|ExpressionParser
name|expressionParser
decl_stmt|;
specifier|private
name|String
name|secondRelation
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JOIN_EXPRESSION
init|=
literal|"shell.mapred.join.expression"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SECOND_RELATION
init|=
literal|"shell.mapred.join.second.relation"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|FIRST_COLUMNS
init|=
literal|"shell.mapred.first.columns"
decl_stmt|;
specifier|private
name|Text
index|[]
name|first_columns
decl_stmt|;
comment|/** constructor */
specifier|public
name|IndexJoinMap
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**    * @param firstRelation R1    * @param secondRelation R2    * @param firstColumns (A 1,A 2,...,A n)    * @param secondColumns (B~1~,B~2~,...,B~m~)    * @param joinExpression join condition expression    * @param mapper mapper class    * @param job jobConf    */
specifier|public
specifier|static
name|void
name|initJob
parameter_list|(
name|String
name|firstRelation
parameter_list|,
name|String
name|secondRelation
parameter_list|,
name|String
name|firstColumns
parameter_list|,
name|String
name|secondColumns
parameter_list|,
name|String
name|joinExpression
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|TableMap
argument_list|>
name|mapper
parameter_list|,
name|JobConf
name|job
parameter_list|)
block|{
name|initJob
argument_list|(
name|firstRelation
argument_list|,
name|firstColumns
argument_list|,
name|mapper
argument_list|,
name|job
argument_list|)
expr_stmt|;
name|job
operator|.
name|set
argument_list|(
name|JOIN_EXPRESSION
argument_list|,
name|joinExpression
argument_list|)
expr_stmt|;
name|job
operator|.
name|set
argument_list|(
name|SECOND_RELATION
argument_list|,
name|secondRelation
argument_list|)
expr_stmt|;
name|job
operator|.
name|set
argument_list|(
name|FIRST_COLUMNS
argument_list|,
name|firstColumns
argument_list|)
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|job
parameter_list|)
block|{
name|super
operator|.
name|configure
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|secondRelation
operator|=
name|job
operator|.
name|get
argument_list|(
name|SECOND_RELATION
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|String
index|[]
name|cols
init|=
name|job
operator|.
name|get
argument_list|(
name|FIRST_COLUMNS
argument_list|,
literal|""
argument_list|)
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
name|first_columns
operator|=
operator|new
name|Text
index|[
name|cols
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cols
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|first_columns
index|[
name|i
index|]
operator|=
operator|new
name|Text
argument_list|(
name|cols
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|expressionParser
operator|=
operator|new
name|ExpressionParser
argument_list|(
name|job
operator|.
name|get
argument_list|(
name|JOIN_EXPRESSION
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|expressionParser
operator|.
name|joinExpressionParse
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|map
parameter_list|(
name|HStoreKey
name|key
parameter_list|,
name|MapWritable
name|value
parameter_list|,
name|TableOutputCollector
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|Text
name|tKey
init|=
name|key
operator|.
name|getRow
argument_list|()
decl_stmt|;
try|try
block|{
name|MapWritable
name|appendValue
init|=
name|expressionParser
operator|.
name|getJoinColumns
argument_list|(
name|value
argument_list|,
name|first_columns
operator|.
name|length
argument_list|,
name|secondRelation
argument_list|)
decl_stmt|;
if|if
condition|(
name|appendValue
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|value
operator|.
name|putAll
argument_list|(
name|appendValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|expressionParser
operator|.
name|checkConstraints
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|output
operator|.
name|collect
argument_list|(
name|tKey
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

