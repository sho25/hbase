begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shell
operator|.
name|algebra
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shell
operator|.
name|VariableRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shell
operator|.
name|VariablesPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_comment
comment|/**  * Each algebra operation can be evaluated one of several different algorithms.  *   * So, It should be query executor/optimizer later. And It will become the core  * module that regulates the query-performance of Hbase Shell.  *   * @see<a  *      href="http://wiki.apache.org/lucene-hadoop/Hbase/HbaseShell/Executor">Intergrated  *      query executor architecture</a>  */
end_comment

begin_class
specifier|public
class|class
name|OperationEvaluator
block|{
specifier|private
name|HBaseConfiguration
name|conf
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|condition
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|/** Constructor */
specifier|public
name|OperationEvaluator
parameter_list|(
name|HBaseConfiguration
name|conf
parameter_list|,
name|String
name|chainKey
parameter_list|,
name|String
name|output
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|String
name|chain
init|=
name|chainKey
decl_stmt|;
name|String
name|input
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|chain
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|VariableRef
argument_list|>
name|e
range|:
name|VariablesPool
operator|.
name|get
argument_list|(
name|chain
argument_list|)
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getKey
argument_list|()
operator|==
literal|null
condition|)
block|{
name|input
operator|=
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getArgument
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|condition
operator|.
name|put
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getOperation
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getArgument
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|chain
operator|=
name|e
operator|.
name|getKey
argument_list|()
expr_stmt|;
block|}
block|}
name|condition
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|CONFIG_INPUT
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|condition
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|CONFIG_OUTPUT
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the job configuration object for statements type    *     * @return JobConf    * @throws IOException    * @throws RuntimeException    */
specifier|public
name|JobConf
name|getJobConf
parameter_list|()
throws|throws
name|IOException
throws|,
name|RuntimeException
block|{
name|RelationalOperation
name|operation
decl_stmt|;
if|if
condition|(
name|condition
operator|.
name|containsKey
argument_list|(
name|Constants
operator|.
name|RELATIONAL_SELECTION
argument_list|)
condition|)
block|{
name|operation
operator|=
operator|new
name|Selection
argument_list|(
name|conf
argument_list|,
name|condition
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|condition
operator|.
name|containsKey
argument_list|(
name|Constants
operator|.
name|RELATIONAL_PROJECTION
argument_list|)
condition|)
block|{
name|operation
operator|=
operator|new
name|Projection
argument_list|(
name|conf
argument_list|,
name|condition
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|condition
operator|.
name|containsKey
argument_list|(
name|Constants
operator|.
name|RELATIONAL_JOIN
argument_list|)
condition|)
block|{
name|operation
operator|=
operator|new
name|IndexJoin
argument_list|(
name|conf
argument_list|,
name|condition
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|operation
operator|=
operator|new
name|DuplicateTable
argument_list|(
name|conf
argument_list|,
name|condition
argument_list|)
expr_stmt|;
block|}
return|return
name|operation
operator|.
name|getOperation
argument_list|()
operator|.
name|getConf
argument_list|()
return|;
block|}
block|}
end_class

end_unit

