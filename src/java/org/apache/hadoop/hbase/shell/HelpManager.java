begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shell
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Prints a usage message for the program to the given stream.  */
end_comment

begin_class
specifier|public
class|class
name|HelpManager
block|{
comment|/** application name */
specifier|public
specifier|static
specifier|final
name|String
name|APP_NAME
init|=
literal|"HBase Shell"
decl_stmt|;
comment|/** version of the code */
specifier|public
specifier|static
specifier|final
name|String
name|APP_VERSION
init|=
literal|"0.0.1"
decl_stmt|;
comment|/** help contents map */
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|help
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|HelpManager
parameter_list|()
block|{
name|help
operator|.
name|putAll
argument_list|(
name|HelpContents
operator|.
name|Load
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Print out the program version. */
specifier|public
name|void
name|printVersion
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\n"
operator|+
name|APP_NAME
operator|+
literal|", "
operator|+
name|APP_VERSION
operator|+
literal|" version.\n"
operator|+
literal|"Copyright (c) 2007 by udanax, "
operator|+
literal|"licensed to Apache Software Foundation.\n"
operator|+
literal|"Type 'help;' for usage.\n"
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|printHelp
parameter_list|(
name|String
name|cmd
parameter_list|)
block|{
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nType 'help<command>;' to see command-specific "
operator|+
literal|"usage.\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|helpMap
range|:
name|help
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|wrapping
argument_list|(
name|helpMap
operator|.
name|getKey
argument_list|()
argument_list|,
name|helpMap
operator|.
name|getValue
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|help
operator|.
name|containsKey
argument_list|(
name|cmd
operator|.
name|toUpperCase
argument_list|()
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|String
index|[]
name|msg
init|=
name|help
operator|.
name|get
argument_list|(
name|cmd
operator|.
name|toUpperCase
argument_list|()
argument_list|)
decl_stmt|;
name|wrapping
argument_list|(
name|cmd
operator|.
name|toUpperCase
argument_list|()
argument_list|,
name|msg
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Unknown Command : Type 'help' for usage."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|wrapping
parameter_list|(
name|String
name|cmd
parameter_list|,
name|String
index|[]
name|cmdType
parameter_list|,
name|boolean
name|example
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"%-10s"
argument_list|,
name|cmd
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmdType
index|[
literal|0
index|]
operator|.
name|length
argument_list|()
operator|>
literal|55
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|cmdType
index|[
literal|0
index|]
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|55
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"%13s"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|cmdType
index|[
literal|0
index|]
operator|.
name|substring
argument_list|(
literal|55
argument_list|,
name|cmdType
index|[
literal|1
index|]
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|cmdType
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|example
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\n>>> "
operator|+
name|cmdType
index|[
literal|1
index|]
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

