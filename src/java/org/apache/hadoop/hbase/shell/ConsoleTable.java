begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shell
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_comment
comment|/**  * Manufactures console table, but stupid.  */
end_comment

begin_class
specifier|public
class|class
name|ConsoleTable
block|{
specifier|private
specifier|static
name|PrintStream
name|out
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|sBar
init|=
literal|"+------+----------------------+"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|lBar
init|=
literal|"----------------------+----------------------+"
decl_stmt|;
static|static
block|{
try|try
block|{
name|out
operator|=
operator|new
name|PrintStream
argument_list|(
name|System
operator|.
name|out
argument_list|,
literal|true
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|printHead
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|out
operator|.
name|println
argument_list|(
name|sBar
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"| No.  | "
argument_list|)
expr_stmt|;
name|printCell
argument_list|(
name|name
argument_list|,
literal|" |"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|printFoot
parameter_list|()
block|{
name|out
operator|.
name|println
argument_list|(
name|sBar
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|printTable
parameter_list|(
name|int
name|count
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|out
operator|.
name|println
argument_list|(
name|sBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|length
argument_list|()
operator|>
literal|20
condition|)
block|{
name|int
name|interval
init|=
literal|20
decl_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"| "
argument_list|)
expr_stmt|;
name|out
operator|.
name|printf
argument_list|(
literal|"%-4s"
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|count
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|" | "
argument_list|)
expr_stmt|;
name|printCell
argument_list|(
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|interval
argument_list|)
argument_list|,
literal|" |"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|name
operator|.
name|length
argument_list|()
operator|/
name|interval
condition|;
name|i
operator|++
control|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"| "
argument_list|)
expr_stmt|;
name|out
operator|.
name|printf
argument_list|(
literal|"%-4s"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|" | "
argument_list|)
expr_stmt|;
name|int
name|end
init|=
operator|(
operator|(
name|interval
operator|*
name|i
operator|)
operator|+
name|interval
operator|+
name|interval
operator|)
decl_stmt|;
if|if
condition|(
name|end
operator|>
name|name
operator|.
name|length
argument_list|()
condition|)
block|{
name|printCell
argument_list|(
name|name
operator|.
name|substring
argument_list|(
name|end
operator|-
name|interval
argument_list|,
name|name
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
literal|" |"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|printCell
argument_list|(
name|name
operator|.
name|substring
argument_list|(
name|end
operator|-
name|interval
argument_list|,
name|end
argument_list|)
argument_list|,
literal|" |"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|out
operator|.
name|print
argument_list|(
literal|"| "
argument_list|)
expr_stmt|;
name|out
operator|.
name|printf
argument_list|(
literal|"%-4s"
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|count
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|" | "
argument_list|)
expr_stmt|;
name|printCell
argument_list|(
name|name
argument_list|,
literal|" |"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|selectHead
parameter_list|()
block|{
name|out
operator|.
name|println
argument_list|(
name|sBar
operator|+
name|lBar
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"| No.  | "
argument_list|)
expr_stmt|;
name|printCell
argument_list|(
literal|"Row"
argument_list|,
literal|" | "
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|printCell
argument_list|(
literal|"Column"
argument_list|,
literal|" | "
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|printCell
argument_list|(
literal|"Cell"
argument_list|,
literal|" | "
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|printLine
parameter_list|(
name|int
name|count
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|column
parameter_list|,
name|String
name|cellData
parameter_list|)
block|{
name|out
operator|.
name|println
argument_list|(
name|sBar
operator|+
name|lBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|key
operator|.
name|length
argument_list|()
operator|>
literal|20
operator|||
name|column
operator|.
name|length
argument_list|()
operator|>
literal|20
operator|||
name|cellData
operator|.
name|length
argument_list|()
operator|>
literal|20
condition|)
block|{
name|int
name|interval
init|=
literal|20
decl_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"| "
argument_list|)
expr_stmt|;
name|out
operator|.
name|printf
argument_list|(
literal|"%-4s"
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|count
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|" | "
argument_list|)
expr_stmt|;
name|printLongCell
argument_list|(
name|key
argument_list|,
name|interval
argument_list|)
expr_stmt|;
name|printLongCell
argument_list|(
name|column
argument_list|,
name|interval
argument_list|)
expr_stmt|;
name|printLongCell
argument_list|(
name|cellData
argument_list|,
name|interval
argument_list|)
expr_stmt|;
name|int
name|biggerStrLength
init|=
name|getBiggerInt
argument_list|(
operator|new
name|int
index|[]
block|{
name|key
operator|.
name|length
argument_list|()
block|,
name|column
operator|.
name|length
argument_list|()
block|,
name|cellData
operator|.
name|length
argument_list|()
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
operator|(
name|biggerStrLength
operator|/
name|interval
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"| "
argument_list|)
expr_stmt|;
name|out
operator|.
name|printf
argument_list|(
literal|"%-4s"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|" | "
argument_list|)
expr_stmt|;
name|int
name|end
init|=
operator|(
operator|(
name|interval
operator|*
name|i
operator|)
operator|+
name|interval
operator|+
name|interval
operator|)
decl_stmt|;
name|printLongCellData
argument_list|(
name|key
argument_list|,
name|end
argument_list|,
name|interval
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|printLongCellData
argument_list|(
name|column
argument_list|,
name|end
argument_list|,
name|interval
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|printLongCellData
argument_list|(
name|cellData
argument_list|,
name|end
argument_list|,
name|interval
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|out
operator|.
name|print
argument_list|(
literal|"| "
argument_list|)
expr_stmt|;
name|out
operator|.
name|printf
argument_list|(
literal|"%-4s"
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|count
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|" | "
argument_list|)
expr_stmt|;
name|printCell
argument_list|(
name|key
argument_list|,
literal|" | "
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|printCell
argument_list|(
name|column
argument_list|,
literal|" | "
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|printCell
argument_list|(
name|cellData
argument_list|,
literal|" |"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|printLongCellData
parameter_list|(
name|String
name|key
parameter_list|,
name|int
name|end
parameter_list|,
name|int
name|interval
parameter_list|,
name|boolean
name|newLine
parameter_list|)
block|{
if|if
condition|(
name|end
operator|>
name|key
operator|.
name|length
argument_list|()
condition|)
block|{
if|if
condition|(
name|key
operator|.
name|length
argument_list|()
operator|>
name|interval
operator|&&
name|end
operator|-
name|interval
operator|<
name|key
operator|.
name|length
argument_list|()
condition|)
block|{
name|out
operator|.
name|printf
argument_list|(
literal|"%-20s"
argument_list|,
name|key
operator|.
name|substring
argument_list|(
name|end
operator|-
name|interval
argument_list|,
name|key
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|printf
argument_list|(
literal|"%-20s"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|out
operator|.
name|printf
argument_list|(
literal|"%-20s"
argument_list|,
name|key
operator|.
name|substring
argument_list|(
name|end
operator|-
name|interval
argument_list|,
name|end
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|print
argument_list|(
literal|" | "
argument_list|)
expr_stmt|;
if|if
condition|(
name|newLine
condition|)
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|printLongCell
parameter_list|(
name|String
name|iKey
parameter_list|,
name|int
name|interval
parameter_list|)
block|{
if|if
condition|(
name|iKey
operator|.
name|length
argument_list|()
operator|>
literal|20
condition|)
name|printCell
argument_list|(
name|iKey
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|interval
argument_list|)
argument_list|,
literal|" | "
argument_list|,
literal|true
argument_list|)
expr_stmt|;
else|else
name|printCell
argument_list|(
name|iKey
argument_list|,
literal|" | "
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|printCell
parameter_list|(
name|String
name|data
parameter_list|,
name|String
name|end
parameter_list|,
name|boolean
name|newLine
parameter_list|)
block|{
name|out
operator|.
name|printf
argument_list|(
literal|"%-20s"
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|out
operator|.
name|printf
argument_list|(
name|end
argument_list|)
expr_stmt|;
if|if
condition|(
name|newLine
condition|)
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|int
name|getBiggerInt
parameter_list|(
name|int
index|[]
name|integers
parameter_list|)
block|{
name|int
name|result
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|integers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|integers
index|[
name|i
index|]
operator|>
name|result
condition|)
block|{
name|result
operator|=
name|integers
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|public
specifier|static
name|void
name|selectFoot
parameter_list|()
block|{
name|out
operator|.
name|println
argument_list|(
name|sBar
operator|+
name|lBar
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

