begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shell
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConnectionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * Alters tables.  */
end_comment

begin_class
specifier|public
class|class
name|AlterCommand
extends|extends
name|SchemaModificationCommand
block|{
specifier|public
enum|enum
name|OperationType
block|{
name|ADD
block|,
name|DROP
block|,
name|CHANGE
block|,
name|NOOP
block|}
specifier|private
name|OperationType
name|operationType
init|=
name|OperationType
operator|.
name|NOOP
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|columnSpecMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|String
name|tableName
decl_stmt|;
specifier|private
name|String
name|column
decl_stmt|;
comment|// column to be dropped
specifier|public
name|AlterCommand
parameter_list|(
name|Writer
name|o
parameter_list|)
block|{
name|super
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ReturnMsg
name|execute
parameter_list|(
name|HBaseConfiguration
name|conf
parameter_list|)
block|{
try|try
block|{
name|HConnection
name|conn
init|=
name|HConnectionManager
operator|.
name|getConnection
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|conn
operator|.
name|tableExists
argument_list|(
operator|new
name|Text
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
argument_list|)
condition|)
block|{
return|return
operator|new
name|ReturnMsg
argument_list|(
literal|0
argument_list|,
literal|"'"
operator|+
name|this
operator|.
name|tableName
operator|+
literal|"'"
operator|+
name|TABLE_NOT_FOUND
argument_list|)
return|;
block|}
name|HBaseAdmin
name|admin
init|=
operator|new
name|HBaseAdmin
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|columns
init|=
literal|null
decl_stmt|;
name|HColumnDescriptor
name|columnDesc
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|operationType
condition|)
block|{
case|case
name|ADD
case|:
name|disableTable
argument_list|(
name|admin
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|columns
operator|=
name|columnSpecMap
operator|.
name|keySet
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|c
range|:
name|columns
control|)
block|{
name|columnDesc
operator|=
name|getColumnDescriptor
argument_list|(
name|c
argument_list|,
name|columnSpecMap
operator|.
name|get
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|println
argument_list|(
literal|"Adding "
operator|+
name|c
operator|+
literal|" to "
operator|+
name|tableName
operator|+
literal|"... Please wait."
argument_list|)
expr_stmt|;
name|admin
operator|.
name|addColumn
argument_list|(
operator|new
name|Text
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|columnDesc
argument_list|)
expr_stmt|;
block|}
name|enableTable
argument_list|(
name|admin
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
break|break;
case|case
name|DROP
case|:
name|disableTable
argument_list|(
name|admin
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|println
argument_list|(
literal|"Dropping "
operator|+
name|column
operator|+
literal|" from "
operator|+
name|tableName
operator|+
literal|"... Please wait."
argument_list|)
expr_stmt|;
name|column
operator|=
name|appendDelimiter
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|admin
operator|.
name|deleteColumn
argument_list|(
operator|new
name|Text
argument_list|(
name|tableName
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
name|column
argument_list|)
argument_list|)
expr_stmt|;
name|enableTable
argument_list|(
name|admin
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
break|break;
case|case
name|CHANGE
case|:
comment|// Not yet supported
return|return
operator|new
name|ReturnMsg
argument_list|(
literal|0
argument_list|,
literal|""
operator|+
name|operationType
operator|+
literal|" is not yet supported."
argument_list|)
return|;
case|case
name|NOOP
case|:
return|return
operator|new
name|ReturnMsg
argument_list|(
literal|0
argument_list|,
literal|"Invalid operation type."
argument_list|)
return|;
block|}
return|return
operator|new
name|ReturnMsg
argument_list|(
literal|0
argument_list|,
literal|"Table altered successfully."
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
operator|new
name|ReturnMsg
argument_list|(
literal|0
argument_list|,
name|extractErrMsg
argument_list|(
name|e
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|private
name|void
name|disableTable
parameter_list|(
name|HBaseAdmin
name|admin
parameter_list|,
name|String
name|t
parameter_list|)
throws|throws
name|IOException
block|{
name|println
argument_list|(
literal|"Disabling "
operator|+
name|t
operator|+
literal|"... Please wait."
argument_list|)
expr_stmt|;
name|admin
operator|.
name|disableTable
argument_list|(
operator|new
name|Text
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|enableTable
parameter_list|(
name|HBaseAdmin
name|admin
parameter_list|,
name|String
name|t
parameter_list|)
throws|throws
name|IOException
block|{
name|println
argument_list|(
literal|"Enabling "
operator|+
name|t
operator|+
literal|"... Please wait."
argument_list|)
expr_stmt|;
name|admin
operator|.
name|enableTable
argument_list|(
operator|new
name|Text
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sets the table to be altered.    *     * @param t Table to be altered.    */
specifier|public
name|void
name|setTable
parameter_list|(
name|String
name|t
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|t
expr_stmt|;
block|}
comment|/**    * Adds a column specification.    *     * @param columnSpec Column specification    */
specifier|public
name|void
name|addColumnSpec
parameter_list|(
name|String
name|c
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|columnSpec
parameter_list|)
block|{
name|columnSpecMap
operator|.
name|put
argument_list|(
name|c
argument_list|,
name|columnSpec
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sets the column to be dropped. Only applicable to the DROP operation.    *     * @param c Column to be dropped.    */
specifier|public
name|void
name|setColumn
parameter_list|(
name|String
name|c
parameter_list|)
block|{
name|this
operator|.
name|column
operator|=
name|c
expr_stmt|;
block|}
comment|/**    * Sets the operation type of this alteration.    *     * @param operationType Operation type    * @see OperationType    */
specifier|public
name|void
name|setOperationType
parameter_list|(
name|OperationType
name|operationType
parameter_list|)
block|{
name|this
operator|.
name|operationType
operator|=
name|operationType
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|CommandType
name|getCommandType
parameter_list|()
block|{
return|return
name|CommandType
operator|.
name|DDL
return|;
block|}
block|}
end_class

end_unit

