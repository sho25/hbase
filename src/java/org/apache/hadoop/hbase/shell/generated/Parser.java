begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* Generated By:JavaCC: Do not edit this line. Parser.java */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shell
operator|.
name|generated
package|;
end_package

begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shell
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Parsing command line.  */
end_comment

begin_class
specifier|public
class|class
name|Parser
implements|implements
name|ParserConstants
block|{
specifier|private
name|String
name|QueryString
decl_stmt|;
specifier|public
name|Parser
parameter_list|(
name|String
name|query
parameter_list|)
block|{
name|this
argument_list|(
call|(
name|Reader
call|)
argument_list|(
operator|new
name|StringReader
argument_list|(
name|query
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|QueryString
operator|=
name|query
expr_stmt|;
block|}
specifier|public
name|String
name|getQueryStr
parameter_list|()
block|{
return|return
name|this
operator|.
name|QueryString
return|;
block|}
comment|/**  * Parses the given array of command line arguments.  */
specifier|final
specifier|public
name|Command
name|terminatedCommand
parameter_list|()
throws|throws
name|ParseException
block|{
name|Command
name|statement
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|HELP
case|:
case|case
name|ALTER
case|:
case|case
name|CLEAR
case|:
case|case
name|SHOW
case|:
case|case
name|DESCRIBE
case|:
case|case
name|DESC
case|:
case|case
name|CREATE
case|:
case|case
name|DROP
case|:
case|case
name|FS
case|:
case|case
name|JAR
case|:
case|case
name|EXIT
case|:
case|case
name|INSERT
case|:
case|case
name|DELETE
case|:
case|case
name|SELECT
case|:
case|case
name|ENABLE
case|:
case|case
name|DISABLE
case|:
case|case
literal|62
case|:
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|HELP
case|:
case|case
name|ALTER
case|:
case|case
name|CLEAR
case|:
case|case
name|SHOW
case|:
case|case
name|DESCRIBE
case|:
case|case
name|DESC
case|:
case|case
name|CREATE
case|:
case|case
name|DROP
case|:
case|case
name|FS
case|:
case|case
name|JAR
case|:
case|case
name|EXIT
case|:
case|case
name|INSERT
case|:
case|case
name|DELETE
case|:
case|case
name|SELECT
case|:
case|case
name|ENABLE
case|:
case|case
name|DISABLE
case|:
name|statement
operator|=
name|cmdStatement
argument_list|()
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|0
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|jj_consume_token
argument_list|(
literal|62
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0
case|:
name|jj_consume_token
argument_list|(
literal|0
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|1
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|statement
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|Command
name|cmdStatement
parameter_list|()
throws|throws
name|ParseException
block|{
name|Command
name|cmd
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|EXIT
case|:
name|cmd
operator|=
name|exitCommand
argument_list|()
expr_stmt|;
break|break;
case|case
name|HELP
case|:
name|cmd
operator|=
name|helpCommand
argument_list|()
expr_stmt|;
break|break;
case|case
name|SHOW
case|:
name|cmd
operator|=
name|showCommand
argument_list|()
expr_stmt|;
break|break;
case|case
name|DESCRIBE
case|:
case|case
name|DESC
case|:
name|cmd
operator|=
name|descCommand
argument_list|()
expr_stmt|;
break|break;
case|case
name|CREATE
case|:
name|cmd
operator|=
name|createCommand
argument_list|()
expr_stmt|;
break|break;
case|case
name|DROP
case|:
name|cmd
operator|=
name|dropCommand
argument_list|()
expr_stmt|;
break|break;
case|case
name|ALTER
case|:
name|cmd
operator|=
name|alterCommand
argument_list|()
expr_stmt|;
break|break;
case|case
name|INSERT
case|:
name|cmd
operator|=
name|insertCommand
argument_list|()
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|cmd
operator|=
name|deleteCommand
argument_list|()
expr_stmt|;
break|break;
case|case
name|SELECT
case|:
name|cmd
operator|=
name|selectCommand
argument_list|()
expr_stmt|;
break|break;
case|case
name|ENABLE
case|:
name|cmd
operator|=
name|enableCommand
argument_list|()
expr_stmt|;
break|break;
case|case
name|DISABLE
case|:
name|cmd
operator|=
name|disableCommand
argument_list|()
expr_stmt|;
break|break;
case|case
name|CLEAR
case|:
name|cmd
operator|=
name|clearCommand
argument_list|()
expr_stmt|;
break|break;
case|case
name|FS
case|:
name|cmd
operator|=
name|fsCommand
argument_list|()
expr_stmt|;
break|break;
case|case
name|JAR
case|:
name|cmd
operator|=
name|jarCommand
argument_list|()
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|2
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|cmd
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|ExitCommand
name|exitCommand
parameter_list|()
throws|throws
name|ParseException
block|{
name|ExitCommand
name|exit
init|=
operator|new
name|ExitCommand
argument_list|()
decl_stmt|;
name|jj_consume_token
argument_list|(
name|EXIT
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|exit
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|FsCommand
name|fsCommand
parameter_list|()
throws|throws
name|ParseException
block|{
name|Token
name|t
init|=
literal|null
decl_stmt|;
name|FsCommand
name|fs
init|=
operator|new
name|FsCommand
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|query
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|jj_consume_token
argument_list|(
name|FS
argument_list|)
expr_stmt|;
name|label_1
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ID
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|3
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_1
break|;
block|}
name|t
operator|=
name|jj_consume_token
argument_list|(
name|ID
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
name|t
operator|.
name|image
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|fs
operator|.
name|setQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|fs
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|JarCommand
name|jarCommand
parameter_list|()
throws|throws
name|ParseException
block|{
name|Token
name|t
init|=
literal|null
decl_stmt|;
name|JarCommand
name|jar
init|=
operator|new
name|JarCommand
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|query
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|jj_consume_token
argument_list|(
name|JAR
argument_list|)
expr_stmt|;
name|label_2
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ID
case|:
case|case
name|INTEGER_LITERAL
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|4
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_2
break|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ID
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|ID
argument_list|)
expr_stmt|;
break|break;
case|case
name|INTEGER_LITERAL
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|INTEGER_LITERAL
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|5
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
name|query
operator|.
name|add
argument_list|(
name|t
operator|.
name|image
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|jar
operator|.
name|setQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|jar
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|HelpCommand
name|helpCommand
parameter_list|()
throws|throws
name|ParseException
block|{
name|Token
name|t
init|=
literal|null
decl_stmt|;
name|HelpCommand
name|help
init|=
operator|new
name|HelpCommand
argument_list|()
decl_stmt|;
name|String
name|argument
init|=
literal|""
decl_stmt|;
name|jj_consume_token
argument_list|(
name|HELP
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ALTER
case|:
case|case
name|CLEAR
case|:
case|case
name|SHOW
case|:
case|case
name|DESCRIBE
case|:
case|case
name|CREATE
case|:
case|case
name|DROP
case|:
case|case
name|FS
case|:
case|case
name|JAR
case|:
case|case
name|EXIT
case|:
case|case
name|INSERT
case|:
case|case
name|DELETE
case|:
case|case
name|SELECT
case|:
case|case
name|ID
case|:
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|SHOW
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|SHOW
argument_list|)
expr_stmt|;
break|break;
case|case
name|DESCRIBE
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|DESCRIBE
argument_list|)
expr_stmt|;
break|break;
case|case
name|CREATE
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|CREATE
argument_list|)
expr_stmt|;
break|break;
case|case
name|DROP
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|DROP
argument_list|)
expr_stmt|;
break|break;
case|case
name|EXIT
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|EXIT
argument_list|)
expr_stmt|;
break|break;
case|case
name|INSERT
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|INSERT
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|DELETE
argument_list|)
expr_stmt|;
break|break;
case|case
name|SELECT
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|SELECT
argument_list|)
expr_stmt|;
break|break;
case|case
name|ALTER
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|ALTER
argument_list|)
expr_stmt|;
break|break;
case|case
name|CLEAR
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|CLEAR
argument_list|)
expr_stmt|;
break|break;
case|case
name|FS
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|FS
argument_list|)
expr_stmt|;
break|break;
case|case
name|JAR
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|JAR
argument_list|)
expr_stmt|;
break|break;
case|case
name|ID
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|ID
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|6
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
name|argument
operator|=
name|t
operator|.
name|image
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|7
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|help
operator|.
name|setArgument
argument_list|(
name|argument
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|help
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|ShowCommand
name|showCommand
parameter_list|()
throws|throws
name|ParseException
block|{
name|ShowCommand
name|show
init|=
operator|new
name|ShowCommand
argument_list|()
decl_stmt|;
name|String
name|argument
init|=
literal|null
decl_stmt|;
name|jj_consume_token
argument_list|(
name|SHOW
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ID
case|:
case|case
name|QUOTED_IDENTIFIER
case|:
case|case
name|STRING_LITERAL
case|:
name|argument
operator|=
name|Identifier
argument_list|()
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|8
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|show
operator|.
name|setArgument
argument_list|(
name|argument
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|show
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|DescCommand
name|descCommand
parameter_list|()
throws|throws
name|ParseException
block|{
name|DescCommand
name|desc
init|=
operator|new
name|DescCommand
argument_list|()
decl_stmt|;
name|String
name|argument
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|DESCRIBE
case|:
name|jj_consume_token
argument_list|(
name|DESCRIBE
argument_list|)
expr_stmt|;
break|break;
case|case
name|DESC
case|:
name|jj_consume_token
argument_list|(
name|DESC
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|9
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
name|argument
operator|=
name|Identifier
argument_list|()
expr_stmt|;
name|desc
operator|.
name|setArgument
argument_list|(
name|argument
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|desc
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|ColumnSpec
parameter_list|()
throws|throws
name|ParseException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|columnSpec
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|n
init|=
operator|-
literal|1
decl_stmt|;
name|Token
name|t
init|=
literal|null
decl_stmt|;
name|label_3
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|MAX_VERSIONS
case|:
case|case
name|MAX_LENGTH
case|:
case|case
name|COMPRESSION
case|:
case|case
name|IN_MEMORY
case|:
case|case
name|BLOOMFILTER
case|:
case|case
name|VECTOR_SIZE
case|:
case|case
name|NUM_HASH
case|:
case|case
name|NUM_ENTRIES
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|10
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_3
break|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|MAX_VERSIONS
case|:
name|jj_consume_token
argument_list|(
name|MAX_VERSIONS
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|EQUALS
argument_list|)
expr_stmt|;
name|n
operator|=
name|Number
argument_list|()
expr_stmt|;
name|columnSpec
operator|.
name|put
argument_list|(
literal|"MAX_VERSIONS"
argument_list|,
name|n
argument_list|)
expr_stmt|;
break|break;
case|case
name|MAX_LENGTH
case|:
name|jj_consume_token
argument_list|(
name|MAX_LENGTH
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|EQUALS
argument_list|)
expr_stmt|;
name|n
operator|=
name|Number
argument_list|()
expr_stmt|;
name|columnSpec
operator|.
name|put
argument_list|(
literal|"MAX_LENGTH"
argument_list|,
name|n
argument_list|)
expr_stmt|;
break|break;
case|case
name|COMPRESSION
case|:
name|jj_consume_token
argument_list|(
name|COMPRESSION
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|EQUALS
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|NONE
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|NONE
argument_list|)
expr_stmt|;
break|break;
case|case
name|BLOCK
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|BLOCK
argument_list|)
expr_stmt|;
break|break;
case|case
name|RECORD
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|RECORD
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|11
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
name|columnSpec
operator|.
name|put
argument_list|(
literal|"COMPRESSION"
argument_list|,
name|t
operator|.
name|image
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|IN_MEMORY
case|:
name|jj_consume_token
argument_list|(
name|IN_MEMORY
argument_list|)
expr_stmt|;
name|columnSpec
operator|.
name|put
argument_list|(
literal|"IN_MEMORY"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|BLOOMFILTER
case|:
name|jj_consume_token
argument_list|(
name|BLOOMFILTER
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|EQUALS
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|BLOOMFILTER
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|BLOOMFILTER
argument_list|)
expr_stmt|;
break|break;
case|case
name|COUNTING_BLOOMFILTER
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|COUNTING_BLOOMFILTER
argument_list|)
expr_stmt|;
break|break;
case|case
name|RETOUCHED_BLOOMFILTER
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|RETOUCHED_BLOOMFILTER
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|12
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
name|columnSpec
operator|.
name|put
argument_list|(
literal|"BLOOMFILTER"
argument_list|,
name|t
operator|.
name|image
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|VECTOR_SIZE
case|:
name|jj_consume_token
argument_list|(
name|VECTOR_SIZE
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|EQUALS
argument_list|)
expr_stmt|;
name|n
operator|=
name|Number
argument_list|()
expr_stmt|;
name|columnSpec
operator|.
name|put
argument_list|(
literal|"VECTOR_SIZE"
argument_list|,
name|n
argument_list|)
expr_stmt|;
break|break;
case|case
name|NUM_HASH
case|:
name|jj_consume_token
argument_list|(
name|NUM_HASH
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|EQUALS
argument_list|)
expr_stmt|;
name|n
operator|=
name|Number
argument_list|()
expr_stmt|;
name|columnSpec
operator|.
name|put
argument_list|(
literal|"NUM_HASH"
argument_list|,
name|n
argument_list|)
expr_stmt|;
break|break;
case|case
name|NUM_ENTRIES
case|:
name|jj_consume_token
argument_list|(
name|NUM_ENTRIES
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|EQUALS
argument_list|)
expr_stmt|;
name|n
operator|=
name|Number
argument_list|()
expr_stmt|;
name|columnSpec
operator|.
name|put
argument_list|(
literal|"NUM_ENTRIES"
argument_list|,
name|n
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|13
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|columnSpec
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|CreateCommand
name|createCommand
parameter_list|()
throws|throws
name|ParseException
block|{
name|CreateCommand
name|createCommand
init|=
operator|new
name|CreateCommand
argument_list|()
decl_stmt|;
name|String
name|table
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|columnSpec
init|=
literal|null
decl_stmt|;
name|String
name|column
init|=
literal|null
decl_stmt|;
name|jj_consume_token
argument_list|(
name|CREATE
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|TABLE
argument_list|)
expr_stmt|;
name|table
operator|=
name|Identifier
argument_list|()
expr_stmt|;
name|createCommand
operator|.
name|setTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|column
operator|=
name|Identifier
argument_list|()
expr_stmt|;
name|columnSpec
operator|=
name|ColumnSpec
argument_list|()
expr_stmt|;
name|createCommand
operator|.
name|addColumnSpec
argument_list|(
name|column
argument_list|,
name|columnSpec
argument_list|)
expr_stmt|;
name|label_4
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|COMMA
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|14
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_4
break|;
block|}
name|jj_consume_token
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|column
operator|=
name|Identifier
argument_list|()
expr_stmt|;
name|columnSpec
operator|=
name|ColumnSpec
argument_list|()
expr_stmt|;
name|createCommand
operator|.
name|addColumnSpec
argument_list|(
name|column
argument_list|,
name|columnSpec
argument_list|)
expr_stmt|;
block|}
name|jj_consume_token
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|createCommand
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|AlterCommand
name|alterCommand
parameter_list|()
throws|throws
name|ParseException
block|{
name|AlterCommand
name|alterCommand
init|=
operator|new
name|AlterCommand
argument_list|()
decl_stmt|;
name|String
name|table
init|=
literal|null
decl_stmt|;
name|String
name|column
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|columnSpec
init|=
literal|null
decl_stmt|;
name|jj_consume_token
argument_list|(
name|ALTER
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|TABLE
argument_list|)
expr_stmt|;
name|table
operator|=
name|Identifier
argument_list|()
expr_stmt|;
name|alterCommand
operator|.
name|setTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
if|if
condition|(
name|jj_2_1
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|jj_consume_token
argument_list|(
name|ADD
argument_list|)
expr_stmt|;
name|column
operator|=
name|Identifier
argument_list|()
expr_stmt|;
name|columnSpec
operator|=
name|ColumnSpec
argument_list|()
expr_stmt|;
name|alterCommand
operator|.
name|setOperationType
argument_list|(
name|AlterCommand
operator|.
name|OperationType
operator|.
name|ADD
argument_list|)
expr_stmt|;
name|alterCommand
operator|.
name|addColumnSpec
argument_list|(
name|column
argument_list|,
name|columnSpec
argument_list|)
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ADD
case|:
name|jj_consume_token
argument_list|(
name|ADD
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|alterCommand
operator|.
name|setOperationType
argument_list|(
name|AlterCommand
operator|.
name|OperationType
operator|.
name|ADD
argument_list|)
expr_stmt|;
name|column
operator|=
name|Identifier
argument_list|()
expr_stmt|;
name|columnSpec
operator|=
name|ColumnSpec
argument_list|()
expr_stmt|;
name|alterCommand
operator|.
name|addColumnSpec
argument_list|(
name|column
argument_list|,
name|columnSpec
argument_list|)
expr_stmt|;
name|label_5
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|COMMA
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|15
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_5
break|;
block|}
name|jj_consume_token
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|column
operator|=
name|Identifier
argument_list|()
expr_stmt|;
name|columnSpec
operator|=
name|ColumnSpec
argument_list|()
expr_stmt|;
name|alterCommand
operator|.
name|addColumnSpec
argument_list|(
name|column
argument_list|,
name|columnSpec
argument_list|)
expr_stmt|;
block|}
name|jj_consume_token
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
break|break;
case|case
name|DROP
case|:
name|jj_consume_token
argument_list|(
name|DROP
argument_list|)
expr_stmt|;
name|column
operator|=
name|Identifier
argument_list|()
expr_stmt|;
name|alterCommand
operator|.
name|setOperationType
argument_list|(
name|AlterCommand
operator|.
name|OperationType
operator|.
name|DROP
argument_list|)
expr_stmt|;
name|alterCommand
operator|.
name|setColumn
argument_list|(
name|column
argument_list|)
expr_stmt|;
break|break;
case|case
name|CHANGE
case|:
name|jj_consume_token
argument_list|(
name|CHANGE
argument_list|)
expr_stmt|;
name|column
operator|=
name|Identifier
argument_list|()
expr_stmt|;
name|columnSpec
operator|=
name|ColumnSpec
argument_list|()
expr_stmt|;
name|alterCommand
operator|.
name|setOperationType
argument_list|(
name|AlterCommand
operator|.
name|OperationType
operator|.
name|CHANGE
argument_list|)
expr_stmt|;
name|alterCommand
operator|.
name|addColumnSpec
argument_list|(
name|column
argument_list|,
name|columnSpec
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|16
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|alterCommand
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|DropCommand
name|dropCommand
parameter_list|()
throws|throws
name|ParseException
block|{
name|DropCommand
name|drop
init|=
operator|new
name|DropCommand
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|tableList
init|=
literal|null
decl_stmt|;
name|jj_consume_token
argument_list|(
name|DROP
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|TABLE
argument_list|)
expr_stmt|;
name|tableList
operator|=
name|TableList
argument_list|()
expr_stmt|;
name|drop
operator|.
name|setTableList
argument_list|(
name|tableList
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|drop
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|InsertCommand
name|insertCommand
parameter_list|()
throws|throws
name|ParseException
block|{
name|InsertCommand
name|in
init|=
operator|new
name|InsertCommand
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columnfamilies
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
literal|null
decl_stmt|;
name|String
name|table
init|=
literal|null
decl_stmt|;
name|Token
name|t
init|=
literal|null
decl_stmt|;
name|jj_consume_token
argument_list|(
name|INSERT
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|INTO
argument_list|)
expr_stmt|;
name|table
operator|=
name|Identifier
argument_list|()
expr_stmt|;
name|in
operator|.
name|setTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|columnfamilies
operator|=
name|getColumns
argument_list|()
expr_stmt|;
name|in
operator|.
name|setColumnfamilies
argument_list|(
name|columnfamilies
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|VALUES
argument_list|)
expr_stmt|;
name|values
operator|=
name|getLiteralValues
argument_list|()
expr_stmt|;
name|in
operator|.
name|setValues
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|WHERE
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|EQUALS
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|STRING_LITERAL
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|STRING_LITERAL
argument_list|)
expr_stmt|;
break|break;
case|case
name|QUOTED_IDENTIFIER
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|QUOTED_IDENTIFIER
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|17
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
name|in
operator|.
name|setRow
argument_list|(
name|t
operator|.
name|image
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|t
operator|.
name|image
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|in
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|DeleteCommand
name|deleteCommand
parameter_list|()
throws|throws
name|ParseException
block|{
name|DeleteCommand
name|deleteCommand
init|=
operator|new
name|DeleteCommand
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columnList
init|=
literal|null
decl_stmt|;
name|Token
name|t
init|=
literal|null
decl_stmt|;
name|String
name|table
init|=
literal|null
decl_stmt|;
name|jj_consume_token
argument_list|(
name|DELETE
argument_list|)
expr_stmt|;
name|columnList
operator|=
name|ColumnList
argument_list|()
expr_stmt|;
name|deleteCommand
operator|.
name|setColumnList
argument_list|(
name|columnList
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|FROM
argument_list|)
expr_stmt|;
name|table
operator|=
name|Identifier
argument_list|()
expr_stmt|;
name|deleteCommand
operator|.
name|setTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|WHERE
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|EQUALS
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|STRING_LITERAL
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|STRING_LITERAL
argument_list|)
expr_stmt|;
break|break;
case|case
name|QUOTED_IDENTIFIER
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|QUOTED_IDENTIFIER
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|18
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
name|deleteCommand
operator|.
name|setRow
argument_list|(
name|t
operator|.
name|image
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|t
operator|.
name|image
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|deleteCommand
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|SelectCommand
name|selectCommand
parameter_list|()
throws|throws
name|ParseException
block|{
name|SelectCommand
name|select
init|=
operator|new
name|SelectCommand
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columns
init|=
literal|null
decl_stmt|;
name|String
name|rowKey
init|=
literal|""
decl_stmt|;
name|String
name|timestamp
init|=
literal|null
decl_stmt|;
name|int
name|numVersion
init|=
literal|0
decl_stmt|;
name|String
name|tableName
init|=
literal|null
decl_stmt|;
name|int
name|limit
decl_stmt|;
name|jj_consume_token
argument_list|(
name|SELECT
argument_list|)
expr_stmt|;
name|columns
operator|=
name|ColumnList
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|FROM
argument_list|)
expr_stmt|;
name|tableName
operator|=
name|Identifier
argument_list|()
expr_stmt|;
name|select
operator|.
name|setColumns
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|select
operator|.
name|setTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|STARTING
case|:
case|case
name|WHERE
case|:
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|WHERE
case|:
name|jj_consume_token
argument_list|(
name|WHERE
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|EQUALS
argument_list|)
expr_stmt|;
name|select
operator|.
name|setWhere
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|STARTING
case|:
name|jj_consume_token
argument_list|(
name|STARTING
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|FROM
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|19
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
name|rowKey
operator|=
name|getStringLiteral
argument_list|()
expr_stmt|;
name|select
operator|.
name|setRowKey
argument_list|(
name|rowKey
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|20
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|TIMESTAMP
case|:
name|jj_consume_token
argument_list|(
name|TIMESTAMP
argument_list|)
expr_stmt|;
name|timestamp
operator|=
name|getStringLiteral
argument_list|()
expr_stmt|;
name|select
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|21
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|NUM_VERSIONS
case|:
name|jj_consume_token
argument_list|(
name|NUM_VERSIONS
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|EQUALS
argument_list|)
expr_stmt|;
name|numVersion
operator|=
name|Number
argument_list|()
expr_stmt|;
name|select
operator|.
name|setVersion
argument_list|(
name|numVersion
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|22
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|LIMIT
case|:
name|jj_consume_token
argument_list|(
name|LIMIT
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|EQUALS
argument_list|)
expr_stmt|;
name|limit
operator|=
name|Number
argument_list|()
expr_stmt|;
try|try
block|{
name|select
operator|.
name|setLimit
argument_list|(
name|limit
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|ce
parameter_list|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
name|generateParseException
argument_list|()
throw|;
block|}
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|23
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|select
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|EnableCommand
name|enableCommand
parameter_list|()
throws|throws
name|ParseException
block|{
name|EnableCommand
name|enableCommand
init|=
operator|new
name|EnableCommand
argument_list|()
decl_stmt|;
name|String
name|table
init|=
literal|null
decl_stmt|;
name|jj_consume_token
argument_list|(
name|ENABLE
argument_list|)
expr_stmt|;
name|table
operator|=
name|Identifier
argument_list|()
expr_stmt|;
name|enableCommand
operator|.
name|setTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|enableCommand
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|DisableCommand
name|disableCommand
parameter_list|()
throws|throws
name|ParseException
block|{
name|DisableCommand
name|disableCommand
init|=
operator|new
name|DisableCommand
argument_list|()
decl_stmt|;
name|String
name|table
init|=
literal|null
decl_stmt|;
name|jj_consume_token
argument_list|(
name|DISABLE
argument_list|)
expr_stmt|;
name|table
operator|=
name|Identifier
argument_list|()
expr_stmt|;
name|disableCommand
operator|.
name|setTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|disableCommand
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|ClearCommand
name|clearCommand
parameter_list|()
throws|throws
name|ParseException
block|{
name|ClearCommand
name|clear
init|=
operator|new
name|ClearCommand
argument_list|()
decl_stmt|;
name|jj_consume_token
argument_list|(
name|CLEAR
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|clear
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|////////////////////////////////////////////////
comment|// Utility expansion units...
specifier|final
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getLiteralValues
parameter_list|()
throws|throws
name|ParseException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|literal
init|=
literal|null
decl_stmt|;
name|jj_consume_token
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|literal
operator|=
name|getStringLiteral
argument_list|()
expr_stmt|;
if|if
condition|(
name|literal
operator|!=
literal|null
condition|)
name|values
operator|.
name|add
argument_list|(
name|literal
argument_list|)
expr_stmt|;
name|label_6
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|COMMA
case|:
case|case
name|ID
case|:
case|case
name|QUOTED_IDENTIFIER
case|:
case|case
name|STRING_LITERAL
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|24
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_6
break|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|COMMA
case|:
name|jj_consume_token
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|literal
operator|=
name|getStringLiteral
argument_list|()
expr_stmt|;
if|if
condition|(
name|literal
operator|!=
literal|null
condition|)
name|values
operator|.
name|add
argument_list|(
name|literal
argument_list|)
expr_stmt|;
break|break;
case|case
name|ID
case|:
case|case
name|QUOTED_IDENTIFIER
case|:
case|case
name|STRING_LITERAL
case|:
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ID
case|:
name|jj_consume_token
argument_list|(
name|ID
argument_list|)
expr_stmt|;
break|break;
case|case
name|STRING_LITERAL
case|:
name|jj_consume_token
argument_list|(
name|STRING_LITERAL
argument_list|)
expr_stmt|;
break|break;
case|case
name|QUOTED_IDENTIFIER
case|:
name|jj_consume_token
argument_list|(
name|QUOTED_IDENTIFIER
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|25
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
name|values
operator|.
name|removeAll
argument_list|(
name|values
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|26
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
name|jj_consume_token
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|values
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|String
name|getStringLiteral
parameter_list|()
throws|throws
name|ParseException
block|{
name|Token
name|s
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|STRING_LITERAL
case|:
name|s
operator|=
name|jj_consume_token
argument_list|(
name|STRING_LITERAL
argument_list|)
expr_stmt|;
break|break;
case|case
name|QUOTED_IDENTIFIER
case|:
name|s
operator|=
name|jj_consume_token
argument_list|(
name|QUOTED_IDENTIFIER
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|27
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
name|String
name|value
init|=
name|s
operator|.
name|image
operator|.
name|toString
argument_list|()
decl_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|value
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|value
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getColumns
parameter_list|()
throws|throws
name|ParseException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|literal
init|=
literal|null
decl_stmt|;
name|jj_consume_token
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|literal
operator|=
name|getColumn
argument_list|()
expr_stmt|;
if|if
condition|(
name|literal
operator|!=
literal|null
condition|)
name|values
operator|.
name|add
argument_list|(
name|literal
argument_list|)
expr_stmt|;
name|label_7
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|COMMA
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|28
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_7
break|;
block|}
name|jj_consume_token
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|literal
operator|=
name|getColumn
argument_list|()
expr_stmt|;
if|if
condition|(
name|literal
operator|!=
literal|null
condition|)
name|values
operator|.
name|add
argument_list|(
name|literal
argument_list|)
expr_stmt|;
block|}
name|jj_consume_token
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|values
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|String
name|getColumn
parameter_list|()
throws|throws
name|ParseException
block|{
name|Token
name|col
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ASTERISK
case|:
case|case
name|ID
case|:
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ID
case|:
name|col
operator|=
name|jj_consume_token
argument_list|(
name|ID
argument_list|)
expr_stmt|;
break|break;
case|case
name|ASTERISK
case|:
name|col
operator|=
name|jj_consume_token
argument_list|(
name|ASTERISK
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|29
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|col
operator|.
name|image
operator|.
name|toString
argument_list|()
return|;
block|}
break|break;
case|case
name|QUOTED_IDENTIFIER
case|:
case|case
name|STRING_LITERAL
case|:
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|QUOTED_IDENTIFIER
case|:
name|col
operator|=
name|jj_consume_token
argument_list|(
name|QUOTED_IDENTIFIER
argument_list|)
expr_stmt|;
break|break;
case|case
name|STRING_LITERAL
case|:
name|col
operator|=
name|jj_consume_token
argument_list|(
name|STRING_LITERAL
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|30
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|col
operator|.
name|image
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|col
operator|.
name|image
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|31
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|TableList
parameter_list|()
throws|throws
name|ParseException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|tableList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|table
init|=
literal|null
decl_stmt|;
name|table
operator|=
name|Identifier
argument_list|()
expr_stmt|;
name|tableList
operator|.
name|add
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|label_8
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|COMMA
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|32
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_8
break|;
block|}
name|jj_consume_token
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|table
operator|=
name|Identifier
argument_list|()
expr_stmt|;
name|tableList
operator|.
name|add
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|tableList
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|ColumnList
parameter_list|()
throws|throws
name|ParseException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|columnList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|column
init|=
literal|null
decl_stmt|;
name|column
operator|=
name|getColumn
argument_list|()
expr_stmt|;
if|if
condition|(
name|column
operator|!=
literal|null
condition|)
block|{
name|columnList
operator|.
name|add
argument_list|(
name|column
argument_list|)
expr_stmt|;
block|}
else|else
block|{
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|columnList
return|;
block|}
block|}
name|label_9
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|COMMA
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|33
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_9
break|;
block|}
name|jj_consume_token
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|column
operator|=
name|getColumn
argument_list|()
expr_stmt|;
name|columnList
operator|.
name|add
argument_list|(
name|column
argument_list|)
expr_stmt|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|columnList
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|int
name|Number
parameter_list|()
throws|throws
name|ParseException
block|{
name|Token
name|t
init|=
literal|null
decl_stmt|;
name|t
operator|=
name|jj_consume_token
argument_list|(
name|INTEGER_LITERAL
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|t
operator|.
name|image
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|String
name|Identifier
parameter_list|()
throws|throws
name|ParseException
block|{
name|Token
name|t
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ID
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|ID
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|t
operator|.
name|image
operator|.
name|toString
argument_list|()
return|;
block|}
break|break;
case|case
name|QUOTED_IDENTIFIER
case|:
case|case
name|STRING_LITERAL
case|:
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|QUOTED_IDENTIFIER
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|QUOTED_IDENTIFIER
argument_list|)
expr_stmt|;
break|break;
case|case
name|STRING_LITERAL
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|STRING_LITERAL
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|34
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|t
operator|.
name|image
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|t
operator|.
name|image
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|35
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_2_1
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
try|try
block|{
return|return
operator|!
name|jj_3_1
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|jj_save
argument_list|(
literal|0
argument_list|,
name|xla
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
specifier|private
name|boolean
name|jj_3R_11
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|ID
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3R_10
parameter_list|()
block|{
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_11
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_12
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3_1
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|ADD
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_3R_10
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3R_12
parameter_list|()
block|{
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|60
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|61
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|ParserTokenManager
name|token_source
decl_stmt|;
name|SimpleCharStream
name|jj_input_stream
decl_stmt|;
specifier|public
name|Token
name|token
decl_stmt|,
name|jj_nt
decl_stmt|;
specifier|private
name|int
name|jj_ntk
decl_stmt|;
specifier|private
name|Token
name|jj_scanpos
decl_stmt|,
name|jj_lastpos
decl_stmt|;
specifier|private
name|int
name|jj_la
decl_stmt|;
specifier|public
name|boolean
name|lookingAhead
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|jj_semLA
decl_stmt|;
specifier|private
name|int
name|jj_gen
decl_stmt|;
specifier|final
specifier|private
name|int
index|[]
name|jj_la1
init|=
operator|new
name|int
index|[
literal|36
index|]
decl_stmt|;
specifier|static
specifier|private
name|int
index|[]
name|jj_la1_0
decl_stmt|;
specifier|static
specifier|private
name|int
index|[]
name|jj_la1_1
decl_stmt|;
static|static
block|{
name|jj_la1_0
argument_list|()
expr_stmt|;
name|jj_la1_1
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|jj_la1_0
parameter_list|()
block|{
name|jj_la1_0
operator|=
operator|new
name|int
index|[]
block|{
literal|0x79ffe0
block|,
literal|0x79ffe1
block|,
literal|0x79ffe0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x19fbc0
block|,
literal|0x19fbc0
block|,
literal|0x0
block|,
literal|0x600
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x1000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x1800000
block|,
literal|0x1800000
block|,
literal|0x20000000
block|,
literal|0x40000000
block|,
literal|0x80000000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,}
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|jj_la1_1
parameter_list|()
block|{
name|jj_la1_1
operator|=
operator|new
name|int
index|[]
block|{
literal|0x0
block|,
literal|0x40000000
block|,
literal|0x0
block|,
literal|0x1000000
block|,
literal|0x3000000
block|,
literal|0x3000000
block|,
literal|0x1000000
block|,
literal|0x1000000
block|,
literal|0x31000000
block|,
literal|0x0
block|,
literal|0x398e00
block|,
literal|0x7000
block|,
literal|0x70000
block|,
literal|0x398e00
block|,
literal|0x4
block|,
literal|0x4
block|,
literal|0xc00000
block|,
literal|0x30000000
block|,
literal|0x30000000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x31000004
block|,
literal|0x31000000
block|,
literal|0x31000004
block|,
literal|0x30000000
block|,
literal|0x4
block|,
literal|0x1000100
block|,
literal|0x30000000
block|,
literal|0x31000100
block|,
literal|0x4
block|,
literal|0x4
block|,
literal|0x30000000
block|,
literal|0x31000000
block|,}
expr_stmt|;
block|}
specifier|final
specifier|private
name|JJCalls
index|[]
name|jj_2_rtns
init|=
operator|new
name|JJCalls
index|[
literal|1
index|]
decl_stmt|;
specifier|private
name|boolean
name|jj_rescan
init|=
literal|false
decl_stmt|;
specifier|private
name|int
name|jj_gc
init|=
literal|0
decl_stmt|;
specifier|public
name|Parser
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|stream
parameter_list|)
block|{
name|this
argument_list|(
name|stream
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Parser
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|stream
parameter_list|,
name|String
name|encoding
parameter_list|)
block|{
try|try
block|{
name|jj_input_stream
operator|=
operator|new
name|SimpleCharStream
argument_list|(
name|stream
argument_list|,
name|encoding
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|token_source
operator|=
operator|new
name|ParserTokenManager
argument_list|(
name|jj_input_stream
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|36
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_2_rtns
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|jj_2_rtns
index|[
name|i
index|]
operator|=
operator|new
name|JJCalls
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|ReInit
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|stream
parameter_list|)
block|{
name|ReInit
argument_list|(
name|stream
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|ReInit
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|stream
parameter_list|,
name|String
name|encoding
parameter_list|)
block|{
try|try
block|{
name|jj_input_stream
operator|.
name|ReInit
argument_list|(
name|stream
argument_list|,
name|encoding
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|token_source
operator|.
name|ReInit
argument_list|(
name|jj_input_stream
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|36
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_2_rtns
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|jj_2_rtns
index|[
name|i
index|]
operator|=
operator|new
name|JJCalls
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Parser
parameter_list|(
name|java
operator|.
name|io
operator|.
name|Reader
name|stream
parameter_list|)
block|{
name|jj_input_stream
operator|=
operator|new
name|SimpleCharStream
argument_list|(
name|stream
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|token_source
operator|=
operator|new
name|ParserTokenManager
argument_list|(
name|jj_input_stream
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|36
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_2_rtns
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|jj_2_rtns
index|[
name|i
index|]
operator|=
operator|new
name|JJCalls
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|ReInit
parameter_list|(
name|java
operator|.
name|io
operator|.
name|Reader
name|stream
parameter_list|)
block|{
name|jj_input_stream
operator|.
name|ReInit
argument_list|(
name|stream
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|token_source
operator|.
name|ReInit
argument_list|(
name|jj_input_stream
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|36
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_2_rtns
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|jj_2_rtns
index|[
name|i
index|]
operator|=
operator|new
name|JJCalls
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Parser
parameter_list|(
name|ParserTokenManager
name|tm
parameter_list|)
block|{
name|token_source
operator|=
name|tm
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|36
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_2_rtns
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|jj_2_rtns
index|[
name|i
index|]
operator|=
operator|new
name|JJCalls
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|ReInit
parameter_list|(
name|ParserTokenManager
name|tm
parameter_list|)
block|{
name|token_source
operator|=
name|tm
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|36
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_2_rtns
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|jj_2_rtns
index|[
name|i
index|]
operator|=
operator|new
name|JJCalls
argument_list|()
expr_stmt|;
block|}
specifier|final
specifier|private
name|Token
name|jj_consume_token
parameter_list|(
name|int
name|kind
parameter_list|)
throws|throws
name|ParseException
block|{
name|Token
name|oldToken
decl_stmt|;
if|if
condition|(
operator|(
name|oldToken
operator|=
name|token
operator|)
operator|.
name|next
operator|!=
literal|null
condition|)
name|token
operator|=
name|token
operator|.
name|next
expr_stmt|;
else|else
name|token
operator|=
name|token
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|token
operator|.
name|kind
operator|==
name|kind
condition|)
block|{
name|jj_gen
operator|++
expr_stmt|;
if|if
condition|(
operator|++
name|jj_gc
operator|>
literal|100
condition|)
block|{
name|jj_gc
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_2_rtns
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|JJCalls
name|c
init|=
name|jj_2_rtns
index|[
name|i
index|]
decl_stmt|;
while|while
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|c
operator|.
name|gen
operator|<
name|jj_gen
condition|)
name|c
operator|.
name|first
operator|=
literal|null
expr_stmt|;
name|c
operator|=
name|c
operator|.
name|next
expr_stmt|;
block|}
block|}
block|}
return|return
name|token
return|;
block|}
name|token
operator|=
name|oldToken
expr_stmt|;
name|jj_kind
operator|=
name|kind
expr_stmt|;
throw|throw
name|generateParseException
argument_list|()
throw|;
block|}
specifier|static
specifier|private
specifier|final
class|class
name|LookaheadSuccess
extends|extends
name|java
operator|.
name|lang
operator|.
name|Error
block|{ }
specifier|final
specifier|private
name|LookaheadSuccess
name|jj_ls
init|=
operator|new
name|LookaheadSuccess
argument_list|()
decl_stmt|;
specifier|final
specifier|private
name|boolean
name|jj_scan_token
parameter_list|(
name|int
name|kind
parameter_list|)
block|{
if|if
condition|(
name|jj_scanpos
operator|==
name|jj_lastpos
condition|)
block|{
name|jj_la
operator|--
expr_stmt|;
if|if
condition|(
name|jj_scanpos
operator|.
name|next
operator|==
literal|null
condition|)
block|{
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|jj_scanpos
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|jj_scanpos
operator|.
name|next
expr_stmt|;
block|}
block|}
else|else
block|{
name|jj_scanpos
operator|=
name|jj_scanpos
operator|.
name|next
expr_stmt|;
block|}
if|if
condition|(
name|jj_rescan
condition|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|Token
name|tok
init|=
name|token
decl_stmt|;
while|while
condition|(
name|tok
operator|!=
literal|null
operator|&&
name|tok
operator|!=
name|jj_scanpos
condition|)
block|{
name|i
operator|++
expr_stmt|;
name|tok
operator|=
name|tok
operator|.
name|next
expr_stmt|;
block|}
if|if
condition|(
name|tok
operator|!=
literal|null
condition|)
name|jj_add_error_token
argument_list|(
name|kind
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jj_scanpos
operator|.
name|kind
operator|!=
name|kind
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_la
operator|==
literal|0
operator|&&
name|jj_scanpos
operator|==
name|jj_lastpos
condition|)
throw|throw
name|jj_ls
throw|;
return|return
literal|false
return|;
block|}
specifier|final
specifier|public
name|Token
name|getNextToken
parameter_list|()
block|{
if|if
condition|(
name|token
operator|.
name|next
operator|!=
literal|null
condition|)
name|token
operator|=
name|token
operator|.
name|next
expr_stmt|;
else|else
name|token
operator|=
name|token
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|++
expr_stmt|;
return|return
name|token
return|;
block|}
specifier|final
specifier|public
name|Token
name|getToken
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Token
name|t
init|=
name|lookingAhead
condition|?
name|jj_scanpos
else|:
name|token
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|index
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|t
operator|.
name|next
operator|!=
literal|null
condition|)
name|t
operator|=
name|t
operator|.
name|next
expr_stmt|;
else|else
name|t
operator|=
name|t
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
expr_stmt|;
block|}
return|return
name|t
return|;
block|}
specifier|final
specifier|private
name|int
name|jj_ntk
parameter_list|()
block|{
if|if
condition|(
operator|(
name|jj_nt
operator|=
name|token
operator|.
name|next
operator|)
operator|==
literal|null
condition|)
return|return
operator|(
name|jj_ntk
operator|=
operator|(
name|token
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
operator|)
operator|.
name|kind
operator|)
return|;
else|else
return|return
operator|(
name|jj_ntk
operator|=
name|jj_nt
operator|.
name|kind
operator|)
return|;
block|}
specifier|private
name|java
operator|.
name|util
operator|.
name|Vector
name|jj_expentries
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|Vector
argument_list|()
decl_stmt|;
specifier|private
name|int
index|[]
name|jj_expentry
decl_stmt|;
specifier|private
name|int
name|jj_kind
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|int
index|[]
name|jj_lasttokens
init|=
operator|new
name|int
index|[
literal|100
index|]
decl_stmt|;
specifier|private
name|int
name|jj_endpos
decl_stmt|;
specifier|private
name|void
name|jj_add_error_token
parameter_list|(
name|int
name|kind
parameter_list|,
name|int
name|pos
parameter_list|)
block|{
if|if
condition|(
name|pos
operator|>=
literal|100
condition|)
return|return;
if|if
condition|(
name|pos
operator|==
name|jj_endpos
operator|+
literal|1
condition|)
block|{
name|jj_lasttokens
index|[
name|jj_endpos
operator|++
index|]
operator|=
name|kind
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|jj_endpos
operator|!=
literal|0
condition|)
block|{
name|jj_expentry
operator|=
operator|new
name|int
index|[
name|jj_endpos
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_endpos
condition|;
name|i
operator|++
control|)
block|{
name|jj_expentry
index|[
name|i
index|]
operator|=
name|jj_lasttokens
index|[
name|i
index|]
expr_stmt|;
block|}
name|boolean
name|exists
init|=
literal|false
decl_stmt|;
for|for
control|(
name|java
operator|.
name|util
operator|.
name|Enumeration
name|e
init|=
name|jj_expentries
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|int
index|[]
name|oldentry
init|=
operator|(
name|int
index|[]
operator|)
operator|(
name|e
operator|.
name|nextElement
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|oldentry
operator|.
name|length
operator|==
name|jj_expentry
operator|.
name|length
condition|)
block|{
name|exists
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_expentry
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|oldentry
index|[
name|i
index|]
operator|!=
name|jj_expentry
index|[
name|i
index|]
condition|)
block|{
name|exists
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|exists
condition|)
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|exists
condition|)
name|jj_expentries
operator|.
name|addElement
argument_list|(
name|jj_expentry
argument_list|)
expr_stmt|;
if|if
condition|(
name|pos
operator|!=
literal|0
condition|)
name|jj_lasttokens
index|[
operator|(
name|jj_endpos
operator|=
name|pos
operator|)
operator|-
literal|1
index|]
operator|=
name|kind
expr_stmt|;
block|}
block|}
specifier|public
name|ParseException
name|generateParseException
parameter_list|()
block|{
name|jj_expentries
operator|.
name|removeAllElements
argument_list|()
expr_stmt|;
name|boolean
index|[]
name|la1tokens
init|=
operator|new
name|boolean
index|[
literal|63
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|63
condition|;
name|i
operator|++
control|)
block|{
name|la1tokens
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|jj_kind
operator|>=
literal|0
condition|)
block|{
name|la1tokens
index|[
name|jj_kind
index|]
operator|=
literal|true
expr_stmt|;
name|jj_kind
operator|=
operator|-
literal|1
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|36
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|jj_la1
index|[
name|i
index|]
operator|==
name|jj_gen
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|32
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|jj_la1_0
index|[
name|i
index|]
operator|&
operator|(
literal|1
operator|<<
name|j
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|la1tokens
index|[
name|j
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|jj_la1_1
index|[
name|i
index|]
operator|&
operator|(
literal|1
operator|<<
name|j
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|la1tokens
index|[
literal|32
operator|+
name|j
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|63
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|la1tokens
index|[
name|i
index|]
condition|)
block|{
name|jj_expentry
operator|=
operator|new
name|int
index|[
literal|1
index|]
expr_stmt|;
name|jj_expentry
index|[
literal|0
index|]
operator|=
name|i
expr_stmt|;
name|jj_expentries
operator|.
name|addElement
argument_list|(
name|jj_expentry
argument_list|)
expr_stmt|;
block|}
block|}
name|jj_endpos
operator|=
literal|0
expr_stmt|;
name|jj_rescan_token
argument_list|()
expr_stmt|;
name|jj_add_error_token
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|int
index|[]
index|[]
name|exptokseq
init|=
operator|new
name|int
index|[
name|jj_expentries
operator|.
name|size
argument_list|()
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_expentries
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|exptokseq
index|[
name|i
index|]
operator|=
operator|(
name|int
index|[]
operator|)
name|jj_expentries
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ParseException
argument_list|(
name|token
argument_list|,
name|exptokseq
argument_list|,
name|tokenImage
argument_list|)
return|;
block|}
specifier|final
specifier|public
name|void
name|enable_tracing
parameter_list|()
block|{   }
specifier|final
specifier|public
name|void
name|disable_tracing
parameter_list|()
block|{   }
specifier|final
specifier|private
name|void
name|jj_rescan_token
parameter_list|()
block|{
name|jj_rescan
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|JJCalls
name|p
init|=
name|jj_2_rtns
index|[
name|i
index|]
decl_stmt|;
do|do
block|{
if|if
condition|(
name|p
operator|.
name|gen
operator|>
name|jj_gen
condition|)
block|{
name|jj_la
operator|=
name|p
operator|.
name|arg
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|p
operator|.
name|first
expr_stmt|;
switch|switch
condition|(
name|i
condition|)
block|{
case|case
literal|0
case|:
name|jj_3_1
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|p
operator|=
name|p
operator|.
name|next
expr_stmt|;
block|}
do|while
condition|(
name|p
operator|!=
literal|null
condition|)
do|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{ }
block|}
name|jj_rescan
operator|=
literal|false
expr_stmt|;
block|}
specifier|final
specifier|private
name|void
name|jj_save
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|xla
parameter_list|)
block|{
name|JJCalls
name|p
init|=
name|jj_2_rtns
index|[
name|index
index|]
decl_stmt|;
while|while
condition|(
name|p
operator|.
name|gen
operator|>
name|jj_gen
condition|)
block|{
if|if
condition|(
name|p
operator|.
name|next
operator|==
literal|null
condition|)
block|{
name|p
operator|=
name|p
operator|.
name|next
operator|=
operator|new
name|JJCalls
argument_list|()
expr_stmt|;
break|break;
block|}
name|p
operator|=
name|p
operator|.
name|next
expr_stmt|;
block|}
name|p
operator|.
name|gen
operator|=
name|jj_gen
operator|+
name|xla
operator|-
name|jj_la
expr_stmt|;
name|p
operator|.
name|first
operator|=
name|token
expr_stmt|;
name|p
operator|.
name|arg
operator|=
name|xla
expr_stmt|;
block|}
specifier|static
specifier|final
class|class
name|JJCalls
block|{
name|int
name|gen
decl_stmt|;
name|Token
name|first
decl_stmt|;
name|int
name|arg
decl_stmt|;
name|JJCalls
name|next
decl_stmt|;
block|}
block|}
end_class

end_unit

