begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* Generated By:JavaCC: Do not edit this line. Parser.java */
end_comment

begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shell
operator|.
name|generated
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shell
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Parsing command line.  */
end_comment

begin_class
specifier|public
class|class
name|Parser
implements|implements
name|ParserConstants
block|{
specifier|private
specifier|static
name|String
name|QueryString
decl_stmt|;
specifier|public
name|Parser
parameter_list|(
name|String
name|query
parameter_list|)
block|{
name|this
argument_list|(
call|(
name|Reader
call|)
argument_list|(
operator|new
name|StringReader
argument_list|(
name|query
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|QueryString
operator|=
name|query
expr_stmt|;
block|}
specifier|public
name|String
name|getQueryStr
parameter_list|()
block|{
return|return
name|this
operator|.
name|QueryString
return|;
block|}
comment|/**  * Parses the given array of command line arguments.  */
specifier|final
specifier|public
name|Command
name|terminatedCommand
parameter_list|()
throws|throws
name|ParseException
block|{
name|Command
name|statement
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|HELP
case|:
case|case
name|SHOW
case|:
case|case
name|DESCRIBE
case|:
case|case
name|CREATE
case|:
case|case
name|DROP
case|:
case|case
name|EXIT
case|:
case|case
name|INSERT
case|:
case|case
name|DELETE
case|:
case|case
name|SELECT
case|:
case|case
literal|35
case|:
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|HELP
case|:
case|case
name|SHOW
case|:
case|case
name|DESCRIBE
case|:
case|case
name|CREATE
case|:
case|case
name|DROP
case|:
case|case
name|EXIT
case|:
case|case
name|INSERT
case|:
case|case
name|DELETE
case|:
case|case
name|SELECT
case|:
name|statement
operator|=
name|cmdStatement
argument_list|()
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|0
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|jj_consume_token
argument_list|(
literal|35
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0
case|:
name|jj_consume_token
argument_list|(
literal|0
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|1
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|statement
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|Command
name|cmdStatement
parameter_list|()
throws|throws
name|ParseException
block|{
name|Command
name|cmd
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|EXIT
case|:
name|cmd
operator|=
name|exitCommand
argument_list|()
expr_stmt|;
break|break;
case|case
name|HELP
case|:
name|cmd
operator|=
name|helpCommand
argument_list|()
expr_stmt|;
break|break;
case|case
name|SHOW
case|:
name|cmd
operator|=
name|showCommand
argument_list|()
expr_stmt|;
break|break;
case|case
name|DESCRIBE
case|:
name|cmd
operator|=
name|descCommand
argument_list|()
expr_stmt|;
break|break;
case|case
name|CREATE
case|:
name|cmd
operator|=
name|createCommand
argument_list|()
expr_stmt|;
break|break;
case|case
name|DROP
case|:
name|cmd
operator|=
name|dropCommand
argument_list|()
expr_stmt|;
break|break;
case|case
name|INSERT
case|:
name|cmd
operator|=
name|insertCommand
argument_list|()
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|cmd
operator|=
name|deleteCommand
argument_list|()
expr_stmt|;
break|break;
case|case
name|SELECT
case|:
name|cmd
operator|=
name|selectCommand
argument_list|()
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|2
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|cmd
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|ExitCommand
name|exitCommand
parameter_list|()
throws|throws
name|ParseException
block|{
name|ExitCommand
name|exit
init|=
operator|new
name|ExitCommand
argument_list|()
decl_stmt|;
name|jj_consume_token
argument_list|(
name|EXIT
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|exit
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|HelpCommand
name|helpCommand
parameter_list|()
throws|throws
name|ParseException
block|{
name|Token
name|t
init|=
literal|null
decl_stmt|;
name|HelpCommand
name|help
init|=
operator|new
name|HelpCommand
argument_list|()
decl_stmt|;
name|String
name|argument
init|=
literal|""
decl_stmt|;
name|jj_consume_token
argument_list|(
name|HELP
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|SHOW
case|:
case|case
name|DESCRIBE
case|:
case|case
name|CREATE
case|:
case|case
name|DROP
case|:
case|case
name|EXIT
case|:
case|case
name|INSERT
case|:
case|case
name|DELETE
case|:
case|case
name|SELECT
case|:
case|case
name|ID
case|:
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|SHOW
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|SHOW
argument_list|)
expr_stmt|;
break|break;
case|case
name|DESCRIBE
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|DESCRIBE
argument_list|)
expr_stmt|;
break|break;
case|case
name|CREATE
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|CREATE
argument_list|)
expr_stmt|;
break|break;
case|case
name|DROP
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|DROP
argument_list|)
expr_stmt|;
break|break;
case|case
name|EXIT
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|EXIT
argument_list|)
expr_stmt|;
break|break;
case|case
name|INSERT
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|INSERT
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|DELETE
argument_list|)
expr_stmt|;
break|break;
case|case
name|SELECT
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|SELECT
argument_list|)
expr_stmt|;
break|break;
case|case
name|ID
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|ID
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|3
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
name|argument
operator|=
name|t
operator|.
name|image
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|4
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|help
operator|.
name|setArgument
argument_list|(
name|argument
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|help
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|ShowCommand
name|showCommand
parameter_list|()
throws|throws
name|ParseException
block|{
name|ShowCommand
name|show
init|=
operator|new
name|ShowCommand
argument_list|()
decl_stmt|;
name|String
name|argument
init|=
literal|null
decl_stmt|;
name|jj_consume_token
argument_list|(
name|SHOW
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ID
case|:
case|case
name|QUOTED_STRING
case|:
name|argument
operator|=
name|getString
argument_list|()
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|5
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|show
operator|.
name|setArgument
argument_list|(
name|argument
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|show
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|DescCommand
name|descCommand
parameter_list|()
throws|throws
name|ParseException
block|{
name|DescCommand
name|desc
init|=
operator|new
name|DescCommand
argument_list|()
decl_stmt|;
name|String
name|argument
init|=
literal|null
decl_stmt|;
name|jj_consume_token
argument_list|(
name|DESCRIBE
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ID
case|:
case|case
name|QUOTED_STRING
case|:
name|argument
operator|=
name|getString
argument_list|()
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|6
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|desc
operator|.
name|setArgument
argument_list|(
name|argument
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|desc
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|CreateCommand
name|createCommand
parameter_list|()
throws|throws
name|ParseException
block|{
name|CreateCommand
name|create
init|=
operator|new
name|CreateCommand
argument_list|()
decl_stmt|;
name|String
name|argument
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columnfamilies
init|=
literal|null
decl_stmt|;
name|int
name|limit
init|=
literal|1
decl_stmt|;
name|jj_consume_token
argument_list|(
name|CREATE
argument_list|)
expr_stmt|;
name|argument
operator|=
name|getString
argument_list|()
expr_stmt|;
name|create
operator|.
name|setTable
argument_list|(
name|argument
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|COLUMNFAMILIES
argument_list|)
expr_stmt|;
name|columnfamilies
operator|=
name|getLiteralValues
argument_list|()
expr_stmt|;
name|create
operator|.
name|setColumnfamilies
argument_list|(
name|columnfamilies
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|LIMIT
case|:
name|jj_consume_token
argument_list|(
name|LIMIT
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|EQUALS
argument_list|)
expr_stmt|;
name|limit
operator|=
name|getInt
argument_list|()
expr_stmt|;
try|try
block|{
name|create
operator|.
name|setLimit
argument_list|(
name|limit
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|ce
parameter_list|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
name|generateParseException
argument_list|()
throw|;
block|}
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|7
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|create
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|DropCommand
name|dropCommand
parameter_list|()
throws|throws
name|ParseException
block|{
name|DropCommand
name|drop
init|=
operator|new
name|DropCommand
argument_list|()
decl_stmt|;
name|String
name|argument
init|=
literal|null
decl_stmt|;
name|jj_consume_token
argument_list|(
name|DROP
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ID
case|:
case|case
name|QUOTED_STRING
case|:
name|argument
operator|=
name|getString
argument_list|()
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|8
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|drop
operator|.
name|setArgument
argument_list|(
name|argument
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|drop
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|InsertCommand
name|insertCommand
parameter_list|()
throws|throws
name|ParseException
block|{
name|InsertCommand
name|in
init|=
operator|new
name|InsertCommand
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|cond
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columnfamilies
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
literal|null
decl_stmt|;
name|String
name|table
init|=
literal|null
decl_stmt|;
name|jj_consume_token
argument_list|(
name|INSERT
argument_list|)
expr_stmt|;
name|table
operator|=
name|getString
argument_list|()
expr_stmt|;
name|in
operator|.
name|setTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|columnfamilies
operator|=
name|getLiteralValues
argument_list|()
expr_stmt|;
name|in
operator|.
name|setColumnfamilies
argument_list|(
name|columnfamilies
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|VALUES
argument_list|)
expr_stmt|;
name|values
operator|=
name|getLiteralValues
argument_list|()
expr_stmt|;
name|in
operator|.
name|setValues
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|WHERE
argument_list|)
expr_stmt|;
name|cond
operator|=
name|WhereClause
argument_list|()
expr_stmt|;
try|try
block|{
name|in
operator|.
name|setCondition
argument_list|(
name|cond
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|ce
parameter_list|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
name|generateParseException
argument_list|()
throw|;
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|in
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|DeleteCommand
name|deleteCommand
parameter_list|()
throws|throws
name|ParseException
block|{
name|DeleteCommand
name|del
init|=
operator|new
name|DeleteCommand
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|cond
init|=
literal|null
decl_stmt|;
name|String
name|argument
init|=
literal|null
decl_stmt|;
name|jj_consume_token
argument_list|(
name|DELETE
argument_list|)
expr_stmt|;
name|argument
operator|=
name|getString
argument_list|()
expr_stmt|;
name|del
operator|.
name|setTable
argument_list|(
name|argument
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|WHERE
argument_list|)
expr_stmt|;
name|cond
operator|=
name|WhereClause
argument_list|()
expr_stmt|;
try|try
block|{
name|del
operator|.
name|setCondition
argument_list|(
name|cond
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|ce
parameter_list|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
name|generateParseException
argument_list|()
throw|;
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|del
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|SelectCommand
name|selectCommand
parameter_list|()
throws|throws
name|ParseException
block|{
name|SelectCommand
name|select
init|=
operator|new
name|SelectCommand
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|cond
init|=
literal|null
decl_stmt|;
name|String
name|argument
init|=
literal|null
decl_stmt|;
name|int
name|limit
decl_stmt|;
name|jj_consume_token
argument_list|(
name|SELECT
argument_list|)
expr_stmt|;
name|argument
operator|=
name|getString
argument_list|()
expr_stmt|;
name|select
operator|.
name|setTable
argument_list|(
name|argument
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|WHERE
case|:
name|jj_consume_token
argument_list|(
name|WHERE
argument_list|)
expr_stmt|;
name|cond
operator|=
name|WhereClause
argument_list|()
expr_stmt|;
try|try
block|{
name|select
operator|.
name|setCondition
argument_list|(
name|cond
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|ce
parameter_list|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
name|generateParseException
argument_list|()
throw|;
block|}
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|9
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|LIMIT
case|:
name|jj_consume_token
argument_list|(
name|LIMIT
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|EQUALS
argument_list|)
expr_stmt|;
name|limit
operator|=
name|getInt
argument_list|()
expr_stmt|;
try|try
block|{
name|select
operator|.
name|setLimit
argument_list|(
name|limit
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|ce
parameter_list|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
name|generateParseException
argument_list|()
throw|;
block|}
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|10
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|select
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/** * TODO : expressions codes need more love. */
specifier|final
specifier|public
name|String
name|getString
parameter_list|()
throws|throws
name|ParseException
block|{
name|Token
name|t
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ID
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|ID
argument_list|)
expr_stmt|;
break|break;
case|case
name|QUOTED_STRING
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|QUOTED_STRING
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|11
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|t
operator|.
name|image
operator|.
name|toString
argument_list|()
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|int
name|getInt
parameter_list|()
throws|throws
name|ParseException
block|{
name|Token
name|t
init|=
literal|null
decl_stmt|;
name|t
operator|=
name|jj_consume_token
argument_list|(
name|NUM
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|t
operator|.
name|image
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|WhereClause
parameter_list|()
throws|throws
name|ParseException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|exception
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|putAll
argument_list|(
name|ConditionExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|pe
parameter_list|)
block|{
name|exception
operator|.
name|add
argument_list|(
name|pe
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
literal|"error"
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
name|label_1
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|AND
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|12
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_1
break|;
block|}
name|jj_consume_token
argument_list|(
name|AND
argument_list|)
expr_stmt|;
try|try
block|{
name|result
operator|.
name|putAll
argument_list|(
name|ConditionExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|pe
parameter_list|)
block|{
name|exception
operator|.
name|add
argument_list|(
name|pe
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
literal|"error"
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|result
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|ConditionExpression
parameter_list|()
throws|throws
name|ParseException
block|{
name|Token
name|tSearchName
decl_stmt|,
name|tComparator
decl_stmt|,
name|tComparand
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|tmp
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ROW
case|:
name|tSearchName
operator|=
name|jj_consume_token
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
break|break;
case|case
name|COLUMN
case|:
name|tSearchName
operator|=
name|jj_consume_token
argument_list|(
name|COLUMN
argument_list|)
expr_stmt|;
break|break;
case|case
name|TIME
case|:
name|tSearchName
operator|=
name|jj_consume_token
argument_list|(
name|TIME
argument_list|)
expr_stmt|;
break|break;
case|case
name|ID
case|:
name|tSearchName
operator|=
name|jj_consume_token
argument_list|(
name|ID
argument_list|)
expr_stmt|;
break|break;
case|case
name|VALUES
case|:
name|tSearchName
operator|=
name|jj_consume_token
argument_list|(
name|VALUES
argument_list|)
expr_stmt|;
break|break;
case|case
name|COLUMNFAMILIES
case|:
name|tSearchName
operator|=
name|jj_consume_token
argument_list|(
name|COLUMNFAMILIES
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|13
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|EQUALS
case|:
name|tComparator
operator|=
name|jj_consume_token
argument_list|(
name|EQUALS
argument_list|)
expr_stmt|;
break|break;
case|case
name|NOTEQUAL
case|:
name|tComparator
operator|=
name|jj_consume_token
argument_list|(
name|NOTEQUAL
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|14
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|QUOTED_STRING
case|:
name|tComparand
operator|=
name|jj_consume_token
argument_list|(
name|QUOTED_STRING
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
literal|"quoted string"
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|put
argument_list|(
literal|"error"
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|tmp
return|;
block|}
break|break;
case|case
name|STRING_LITERAL
case|:
name|tComparand
operator|=
name|jj_consume_token
argument_list|(
name|STRING_LITERAL
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
name|tComparator
operator|.
name|image
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
name|tComparand
operator|.
name|image
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|tComparand
operator|.
name|image
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|tSearchName
operator|.
name|image
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"row"
argument_list|)
operator|||
name|tSearchName
operator|.
name|image
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"column"
argument_list|)
operator|||
name|tSearchName
operator|.
name|image
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"time"
argument_list|)
condition|)
block|{
name|tmp
operator|.
name|put
argument_list|(
name|tSearchName
operator|.
name|image
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|values
operator|.
name|add
argument_list|(
name|tSearchName
operator|.
name|image
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|put
argument_list|(
literal|"error"
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|tmp
return|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|15
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getLiteralValues
parameter_list|()
throws|throws
name|ParseException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|literal
init|=
literal|null
decl_stmt|;
name|jj_consume_token
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|literal
operator|=
name|getStringLiteral
argument_list|()
expr_stmt|;
if|if
condition|(
name|literal
operator|!=
literal|null
condition|)
name|values
operator|.
name|add
argument_list|(
name|literal
argument_list|)
expr_stmt|;
name|label_2
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|COMMA
case|:
case|case
name|ID
case|:
case|case
name|STRING
case|:
case|case
name|QUOTED_STRING
case|:
case|case
name|STRING_LITERAL
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|16
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_2
break|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|COMMA
case|:
name|jj_consume_token
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|literal
operator|=
name|getStringLiteral
argument_list|()
expr_stmt|;
if|if
condition|(
name|literal
operator|!=
literal|null
condition|)
name|values
operator|.
name|add
argument_list|(
name|literal
argument_list|)
expr_stmt|;
break|break;
case|case
name|ID
case|:
case|case
name|STRING
case|:
case|case
name|QUOTED_STRING
case|:
case|case
name|STRING_LITERAL
case|:
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ID
case|:
name|jj_consume_token
argument_list|(
name|ID
argument_list|)
expr_stmt|;
break|break;
case|case
name|STRING_LITERAL
case|:
name|jj_consume_token
argument_list|(
name|STRING_LITERAL
argument_list|)
expr_stmt|;
break|break;
case|case
name|QUOTED_STRING
case|:
name|jj_consume_token
argument_list|(
name|QUOTED_STRING
argument_list|)
expr_stmt|;
break|break;
case|case
name|STRING
case|:
name|jj_consume_token
argument_list|(
name|STRING
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|17
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
name|values
operator|.
name|removeAll
argument_list|(
name|values
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|18
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
name|jj_consume_token
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|values
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|String
name|getStringLiteral
parameter_list|()
throws|throws
name|ParseException
block|{
name|Token
name|stringLiteral
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|STRING_LITERAL
case|:
name|stringLiteral
operator|=
name|jj_consume_token
argument_list|(
name|STRING_LITERAL
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|stringLiteral
operator|.
name|image
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|stringLiteral
operator|.
name|image
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
break|break;
case|case
name|QUOTED_STRING
case|:
name|jj_consume_token
argument_list|(
name|QUOTED_STRING
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
literal|null
return|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|19
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|public
name|ParserTokenManager
name|token_source
decl_stmt|;
name|SimpleCharStream
name|jj_input_stream
decl_stmt|;
specifier|public
name|Token
name|token
decl_stmt|,
name|jj_nt
decl_stmt|;
specifier|private
name|int
name|jj_ntk
decl_stmt|;
specifier|private
name|int
name|jj_gen
decl_stmt|;
specifier|final
specifier|private
name|int
index|[]
name|jj_la1
init|=
operator|new
name|int
index|[
literal|20
index|]
decl_stmt|;
specifier|static
specifier|private
name|int
index|[]
name|jj_la1_0
decl_stmt|;
specifier|static
specifier|private
name|int
index|[]
name|jj_la1_1
decl_stmt|;
static|static
block|{
name|jj_la1_0
argument_list|()
expr_stmt|;
name|jj_la1_1
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|jj_la1_0
parameter_list|()
block|{
name|jj_la1_0
operator|=
operator|new
name|int
index|[]
block|{
literal|0x3fe0
block|,
literal|0x3fe1
block|,
literal|0x3fe0
block|,
literal|0x40003fc0
block|,
literal|0x40003fc0
block|,
literal|0x40000000
block|,
literal|0x40000000
block|,
literal|0x100000
block|,
literal|0x40000000
block|,
literal|0x80000
block|,
literal|0x100000
block|,
literal|0x40000000
block|,
literal|0x200000
block|,
literal|0x4007c000
block|,
literal|0x18000000
block|,
literal|0x0
block|,
literal|0x40800000
block|,
literal|0x40000000
block|,
literal|0x40800000
block|,
literal|0x0
block|,}
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|jj_la1_1
parameter_list|()
block|{
name|jj_la1_1
operator|=
operator|new
name|int
index|[]
block|{
literal|0x0
block|,
literal|0x8
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x2
block|,
literal|0x2
block|,
literal|0x0
block|,
literal|0x2
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x2
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x6
block|,
literal|0x7
block|,
literal|0x7
block|,
literal|0x7
block|,
literal|0x6
block|,}
expr_stmt|;
block|}
specifier|public
name|Parser
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|stream
parameter_list|)
block|{
name|this
argument_list|(
name|stream
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Parser
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|stream
parameter_list|,
name|String
name|encoding
parameter_list|)
block|{
try|try
block|{
name|jj_input_stream
operator|=
operator|new
name|SimpleCharStream
argument_list|(
name|stream
argument_list|,
name|encoding
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|token_source
operator|=
operator|new
name|ParserTokenManager
argument_list|(
name|jj_input_stream
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
specifier|public
name|void
name|ReInit
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|stream
parameter_list|)
block|{
name|ReInit
argument_list|(
name|stream
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|ReInit
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|stream
parameter_list|,
name|String
name|encoding
parameter_list|)
block|{
try|try
block|{
name|jj_input_stream
operator|.
name|ReInit
argument_list|(
name|stream
argument_list|,
name|encoding
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|token_source
operator|.
name|ReInit
argument_list|(
name|jj_input_stream
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
specifier|public
name|Parser
parameter_list|(
name|java
operator|.
name|io
operator|.
name|Reader
name|stream
parameter_list|)
block|{
name|jj_input_stream
operator|=
operator|new
name|SimpleCharStream
argument_list|(
name|stream
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|token_source
operator|=
operator|new
name|ParserTokenManager
argument_list|(
name|jj_input_stream
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
specifier|public
name|void
name|ReInit
parameter_list|(
name|java
operator|.
name|io
operator|.
name|Reader
name|stream
parameter_list|)
block|{
name|jj_input_stream
operator|.
name|ReInit
argument_list|(
name|stream
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|token_source
operator|.
name|ReInit
argument_list|(
name|jj_input_stream
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
specifier|public
name|Parser
parameter_list|(
name|ParserTokenManager
name|tm
parameter_list|)
block|{
name|token_source
operator|=
name|tm
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
specifier|public
name|void
name|ReInit
parameter_list|(
name|ParserTokenManager
name|tm
parameter_list|)
block|{
name|token_source
operator|=
name|tm
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
specifier|final
specifier|private
name|Token
name|jj_consume_token
parameter_list|(
name|int
name|kind
parameter_list|)
throws|throws
name|ParseException
block|{
name|Token
name|oldToken
decl_stmt|;
if|if
condition|(
operator|(
name|oldToken
operator|=
name|token
operator|)
operator|.
name|next
operator|!=
literal|null
condition|)
name|token
operator|=
name|token
operator|.
name|next
expr_stmt|;
else|else
name|token
operator|=
name|token
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|token
operator|.
name|kind
operator|==
name|kind
condition|)
block|{
name|jj_gen
operator|++
expr_stmt|;
return|return
name|token
return|;
block|}
name|token
operator|=
name|oldToken
expr_stmt|;
name|jj_kind
operator|=
name|kind
expr_stmt|;
throw|throw
name|generateParseException
argument_list|()
throw|;
block|}
specifier|final
specifier|public
name|Token
name|getNextToken
parameter_list|()
block|{
if|if
condition|(
name|token
operator|.
name|next
operator|!=
literal|null
condition|)
name|token
operator|=
name|token
operator|.
name|next
expr_stmt|;
else|else
name|token
operator|=
name|token
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|++
expr_stmt|;
return|return
name|token
return|;
block|}
specifier|final
specifier|public
name|Token
name|getToken
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Token
name|t
init|=
name|token
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|index
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|t
operator|.
name|next
operator|!=
literal|null
condition|)
name|t
operator|=
name|t
operator|.
name|next
expr_stmt|;
else|else
name|t
operator|=
name|t
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
expr_stmt|;
block|}
return|return
name|t
return|;
block|}
specifier|final
specifier|private
name|int
name|jj_ntk
parameter_list|()
block|{
if|if
condition|(
operator|(
name|jj_nt
operator|=
name|token
operator|.
name|next
operator|)
operator|==
literal|null
condition|)
return|return
operator|(
name|jj_ntk
operator|=
operator|(
name|token
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
operator|)
operator|.
name|kind
operator|)
return|;
else|else
return|return
operator|(
name|jj_ntk
operator|=
name|jj_nt
operator|.
name|kind
operator|)
return|;
block|}
specifier|private
name|java
operator|.
name|util
operator|.
name|Vector
name|jj_expentries
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|Vector
argument_list|()
decl_stmt|;
specifier|private
name|int
index|[]
name|jj_expentry
decl_stmt|;
specifier|private
name|int
name|jj_kind
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
name|ParseException
name|generateParseException
parameter_list|()
block|{
name|jj_expentries
operator|.
name|removeAllElements
argument_list|()
expr_stmt|;
name|boolean
index|[]
name|la1tokens
init|=
operator|new
name|boolean
index|[
literal|36
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|36
condition|;
name|i
operator|++
control|)
block|{
name|la1tokens
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|jj_kind
operator|>=
literal|0
condition|)
block|{
name|la1tokens
index|[
name|jj_kind
index|]
operator|=
literal|true
expr_stmt|;
name|jj_kind
operator|=
operator|-
literal|1
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|jj_la1
index|[
name|i
index|]
operator|==
name|jj_gen
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|32
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|jj_la1_0
index|[
name|i
index|]
operator|&
operator|(
literal|1
operator|<<
name|j
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|la1tokens
index|[
name|j
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|jj_la1_1
index|[
name|i
index|]
operator|&
operator|(
literal|1
operator|<<
name|j
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|la1tokens
index|[
literal|32
operator|+
name|j
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|36
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|la1tokens
index|[
name|i
index|]
condition|)
block|{
name|jj_expentry
operator|=
operator|new
name|int
index|[
literal|1
index|]
expr_stmt|;
name|jj_expentry
index|[
literal|0
index|]
operator|=
name|i
expr_stmt|;
name|jj_expentries
operator|.
name|addElement
argument_list|(
name|jj_expentry
argument_list|)
expr_stmt|;
block|}
block|}
name|int
index|[]
index|[]
name|exptokseq
init|=
operator|new
name|int
index|[
name|jj_expentries
operator|.
name|size
argument_list|()
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_expentries
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|exptokseq
index|[
name|i
index|]
operator|=
operator|(
name|int
index|[]
operator|)
name|jj_expentries
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ParseException
argument_list|(
name|token
argument_list|,
name|exptokseq
argument_list|,
name|tokenImage
argument_list|)
return|;
block|}
specifier|final
specifier|public
name|void
name|enable_tracing
parameter_list|()
block|{   }
specifier|final
specifier|public
name|void
name|disable_tracing
parameter_list|()
block|{   }
block|}
end_class

end_unit

