begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2008 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|tableindexed
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HStoreKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|transactional
operator|.
name|TransactionalTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|RowFilterInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|HbaseMapWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|RowResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/** HTable extended with indexed support. */
end_comment

begin_class
specifier|public
class|class
name|IndexedTable
extends|extends
name|TransactionalTable
block|{
comment|// FIXME, these belong elsewhere
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|INDEX_COL_FAMILY_NAME
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"__INDEX__"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|INDEX_COL_FAMILY
init|=
name|Bytes
operator|.
name|add
argument_list|(
name|INDEX_COL_FAMILY_NAME
argument_list|,
operator|new
name|byte
index|[]
block|{
name|HStoreKey
operator|.
name|COLUMN_FAMILY_DELIMITER
block|}
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|INDEX_BASE_ROW_COLUMN
init|=
name|Bytes
operator|.
name|add
argument_list|(
name|INDEX_COL_FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ROW"
argument_list|)
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|IndexedTable
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|HTable
argument_list|>
name|indexIdToTable
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|HTable
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|IndexedTable
parameter_list|(
specifier|final
name|HBaseConfiguration
name|conf
parameter_list|,
specifier|final
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
for|for
control|(
name|IndexSpecification
name|spec
range|:
name|super
operator|.
name|getTableDescriptor
argument_list|()
operator|.
name|getIndexes
argument_list|()
control|)
block|{
name|indexIdToTable
operator|.
name|put
argument_list|(
name|spec
operator|.
name|getIndexId
argument_list|()
argument_list|,
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|spec
operator|.
name|getIndexedTableName
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Open up an indexed scanner. Results will come back in the indexed order,    * but will contain RowResults from the original table.    *     * @param indexId the id of the index to use    * @param indexStartRow (created from the IndexKeyGenerator)    * @param indexColumns in the index table    * @param indexFilter filter to run on the index'ed table. This can only use    * columns that have been added to the index.    * @param baseColumns from the original table    * @return scanner    * @throws IOException    * @throws IndexNotFoundException    */
specifier|public
name|Scanner
name|getIndexedScanner
parameter_list|(
name|String
name|indexId
parameter_list|,
specifier|final
name|byte
index|[]
name|indexStartRow
parameter_list|,
name|byte
index|[]
index|[]
name|indexColumns
parameter_list|,
specifier|final
name|RowFilterInterface
name|indexFilter
parameter_list|,
specifier|final
name|byte
index|[]
index|[]
name|baseColumns
parameter_list|)
throws|throws
name|IOException
throws|,
name|IndexNotFoundException
block|{
name|IndexSpecification
name|indexSpec
init|=
name|super
operator|.
name|getTableDescriptor
argument_list|()
operator|.
name|getIndex
argument_list|(
name|indexId
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexSpec
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IndexNotFoundException
argument_list|(
literal|"Index "
operator|+
name|indexId
operator|+
literal|" not defined in table "
operator|+
name|super
operator|.
name|getTableDescriptor
argument_list|()
operator|.
name|getNameAsString
argument_list|()
argument_list|)
throw|;
block|}
name|verifyIndexColumns
argument_list|(
name|indexColumns
argument_list|,
name|indexSpec
argument_list|)
expr_stmt|;
comment|// TODO, verify/remove index columns from baseColumns
name|HTable
name|indexTable
init|=
name|indexIdToTable
operator|.
name|get
argument_list|(
name|indexId
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|allIndexColumns
decl_stmt|;
if|if
condition|(
name|indexColumns
operator|!=
literal|null
condition|)
block|{
name|allIndexColumns
operator|=
operator|new
name|byte
index|[
name|indexColumns
operator|.
name|length
operator|+
literal|1
index|]
index|[]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|indexColumns
argument_list|,
literal|0
argument_list|,
name|allIndexColumns
argument_list|,
literal|0
argument_list|,
name|indexColumns
operator|.
name|length
argument_list|)
expr_stmt|;
name|allIndexColumns
index|[
name|indexColumns
operator|.
name|length
index|]
operator|=
name|INDEX_BASE_ROW_COLUMN
expr_stmt|;
block|}
else|else
block|{
name|byte
index|[]
index|[]
name|allColumns
init|=
name|indexSpec
operator|.
name|getAllColumns
argument_list|()
decl_stmt|;
name|allIndexColumns
operator|=
operator|new
name|byte
index|[
name|allColumns
operator|.
name|length
operator|+
literal|1
index|]
index|[]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|allColumns
argument_list|,
literal|0
argument_list|,
name|allIndexColumns
argument_list|,
literal|0
argument_list|,
name|allColumns
operator|.
name|length
argument_list|)
expr_stmt|;
name|allIndexColumns
index|[
name|allColumns
operator|.
name|length
index|]
operator|=
name|INDEX_BASE_ROW_COLUMN
expr_stmt|;
block|}
name|Scanner
name|indexScanner
init|=
name|indexTable
operator|.
name|getScanner
argument_list|(
name|allIndexColumns
argument_list|,
name|indexStartRow
argument_list|,
name|indexFilter
argument_list|)
decl_stmt|;
return|return
operator|new
name|ScannerWrapper
argument_list|(
name|indexScanner
argument_list|,
name|baseColumns
argument_list|)
return|;
block|}
specifier|private
name|void
name|verifyIndexColumns
parameter_list|(
name|byte
index|[]
index|[]
name|requestedColumns
parameter_list|,
name|IndexSpecification
name|indexSpec
parameter_list|)
block|{
if|if
condition|(
name|requestedColumns
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|byte
index|[]
name|requestedColumn
range|:
name|requestedColumns
control|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|indexColumn
range|:
name|indexSpec
operator|.
name|getAllColumns
argument_list|()
control|)
block|{
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|requestedColumn
argument_list|,
name|indexColumn
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Column ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|requestedColumn
argument_list|)
operator|+
literal|"] not in index "
operator|+
name|indexSpec
operator|.
name|getIndexId
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
class|class
name|ScannerWrapper
implements|implements
name|Scanner
block|{
specifier|private
name|Scanner
name|indexScanner
decl_stmt|;
specifier|private
name|byte
index|[]
index|[]
name|columns
decl_stmt|;
specifier|public
name|ScannerWrapper
parameter_list|(
name|Scanner
name|indexScanner
parameter_list|,
name|byte
index|[]
index|[]
name|columns
parameter_list|)
block|{
name|this
operator|.
name|indexScanner
operator|=
name|indexScanner
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|RowResult
name|next
parameter_list|()
throws|throws
name|IOException
block|{
name|RowResult
index|[]
name|result
init|=
name|next
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
operator|||
name|result
operator|.
name|length
operator|<
literal|1
condition|)
return|return
literal|null
return|;
return|return
name|result
index|[
literal|0
index|]
return|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|RowResult
index|[]
name|next
parameter_list|(
name|int
name|nbRows
parameter_list|)
throws|throws
name|IOException
block|{
name|RowResult
index|[]
name|indexResult
init|=
name|indexScanner
operator|.
name|next
argument_list|(
name|nbRows
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexResult
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|RowResult
index|[]
name|result
init|=
operator|new
name|RowResult
index|[
name|indexResult
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexResult
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|RowResult
name|row
init|=
name|indexResult
index|[
name|i
index|]
decl_stmt|;
name|byte
index|[]
name|baseRow
init|=
name|row
operator|.
name|get
argument_list|(
name|INDEX_BASE_ROW_COLUMN
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"next index row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|row
operator|.
name|getRow
argument_list|()
argument_list|)
operator|+
literal|"] -> base row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|baseRow
argument_list|)
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|HbaseMapWritable
argument_list|<
name|byte
index|[]
argument_list|,
name|Cell
argument_list|>
name|colValues
init|=
operator|new
name|HbaseMapWritable
argument_list|<
name|byte
index|[]
argument_list|,
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|columns
operator|!=
literal|null
operator|&&
name|columns
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Going to base table for remaining columns"
argument_list|)
expr_stmt|;
name|RowResult
name|baseResult
init|=
name|IndexedTable
operator|.
name|this
operator|.
name|getRow
argument_list|(
name|baseRow
argument_list|,
name|columns
argument_list|)
decl_stmt|;
if|if
condition|(
name|baseResult
operator|!=
literal|null
condition|)
block|{
name|colValues
operator|.
name|putAll
argument_list|(
name|baseResult
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|Cell
argument_list|>
name|entry
range|:
name|row
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|byte
index|[]
name|col
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|HStoreKey
operator|.
name|matchingFamily
argument_list|(
name|INDEX_COL_FAMILY_NAME
argument_list|,
name|col
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|colValues
operator|.
name|put
argument_list|(
name|col
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|result
index|[
name|i
index|]
operator|=
operator|new
name|RowResult
argument_list|(
name|baseRow
argument_list|,
name|colValues
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|void
name|close
parameter_list|()
block|{
name|indexScanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|Iterator
argument_list|<
name|RowResult
argument_list|>
name|iterator
parameter_list|()
block|{
comment|// FIXME, copied from HTable.ClientScanner. Extract this to common base
comment|// class?
return|return
operator|new
name|Iterator
argument_list|<
name|RowResult
argument_list|>
argument_list|()
block|{
name|RowResult
name|next
init|=
literal|null
decl_stmt|;
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
name|next
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|next
operator|=
name|ScannerWrapper
operator|.
name|this
operator|.
name|next
argument_list|()
expr_stmt|;
return|return
name|next
operator|!=
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|RowResult
name|next
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|RowResult
name|temp
init|=
name|next
decl_stmt|;
name|next
operator|=
literal|null
expr_stmt|;
return|return
name|temp
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
block|}
block|}
end_class

end_unit

