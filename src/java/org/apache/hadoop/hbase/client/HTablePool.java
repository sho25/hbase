begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2009 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * A simple pool of HTable instances.<p>  *  * Each HTablePool acts as a pool for all tables.  To use, instantiate an  * HTablePool and use {@link #getTable(String)} to get an HTable from the pool.  * Once you are done with it, return it to the pool with {@link #putTable(HTable)}.<p>  *  * A pool can be created with a<i>maxSize</i> which defines the most HTable  * references that will ever be retained for each table.  Otherwise the default  * is {@link Integer#MAX_VALUE}.<p>  */
end_comment

begin_class
specifier|public
class|class
name|HTablePool
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|LinkedList
argument_list|<
name|HTableInterface
argument_list|>
argument_list|>
name|tables
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LinkedList
argument_list|<
name|HTableInterface
argument_list|>
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|HBaseConfiguration
name|config
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxSize
decl_stmt|;
specifier|private
name|HTableInterfaceFactory
name|tableFactory
init|=
operator|new
name|HTableFactory
argument_list|()
decl_stmt|;
comment|/**    * Default Constructor.  Default HBaseConfiguration and no limit on pool size.    */
specifier|public
name|HTablePool
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|HBaseConfiguration
argument_list|()
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructor to set maximum versions and use the specified configuration.    * @param config configuration    * @param maxSize maximum number of references to keep for each table    */
specifier|public
name|HTablePool
parameter_list|(
name|HBaseConfiguration
name|config
parameter_list|,
name|int
name|maxSize
parameter_list|)
block|{
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
name|this
operator|.
name|maxSize
operator|=
name|maxSize
expr_stmt|;
block|}
specifier|public
name|HTablePool
parameter_list|(
name|HBaseConfiguration
name|config
parameter_list|,
name|int
name|maxSize
parameter_list|,
name|HTableInterfaceFactory
name|tableFactory
parameter_list|)
block|{
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
name|this
operator|.
name|maxSize
operator|=
name|maxSize
expr_stmt|;
name|this
operator|.
name|tableFactory
operator|=
name|tableFactory
expr_stmt|;
block|}
comment|/**    * Get a reference to the specified table from the pool.<p>    *    * Create a new one if one is not available.    * @param tableName    * @return a reference to the specified table    * @throws RuntimeException if there is a problem instantiating the HTable    */
specifier|public
name|HTableInterface
name|getTable
parameter_list|(
name|String
name|tableName
parameter_list|)
block|{
name|LinkedList
argument_list|<
name|HTableInterface
argument_list|>
name|queue
init|=
name|tables
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|queue
operator|==
literal|null
condition|)
block|{
name|queue
operator|=
operator|new
name|LinkedList
argument_list|<
name|HTableInterface
argument_list|>
argument_list|()
expr_stmt|;
name|tables
operator|.
name|put
argument_list|(
name|tableName
argument_list|,
name|queue
argument_list|)
expr_stmt|;
return|return
name|createHTable
argument_list|(
name|tableName
argument_list|)
return|;
block|}
name|HTableInterface
name|table
decl_stmt|;
synchronized|synchronized
init|(
name|queue
init|)
block|{
name|table
operator|=
name|queue
operator|.
name|poll
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|table
operator|==
literal|null
condition|)
block|{
return|return
name|createHTable
argument_list|(
name|tableName
argument_list|)
return|;
block|}
return|return
name|table
return|;
block|}
comment|/**    * Get a reference to the specified table from the pool.<p>    *    * Create a new one if one is not available.    * @param tableName    * @return a reference to the specified table    * @throws RuntimeException if there is a problem instantiating the HTable    */
specifier|public
name|HTableInterface
name|getTable
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
return|return
name|getTable
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|tableName
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Puts the specified HTable back into the pool.<p>    *    * If the pool already contains<i>maxSize</i> references to the table,    * then nothing happens.    * @param table    */
specifier|public
name|void
name|putTable
parameter_list|(
name|HTableInterface
name|table
parameter_list|)
block|{
name|LinkedList
argument_list|<
name|HTableInterface
argument_list|>
name|queue
init|=
name|tables
operator|.
name|get
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|queue
init|)
block|{
if|if
condition|(
name|queue
operator|.
name|size
argument_list|()
operator|>=
name|maxSize
condition|)
return|return;
name|queue
operator|.
name|add
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|HTableInterface
name|createHTable
parameter_list|(
name|String
name|tableName
parameter_list|)
block|{
return|return
name|this
operator|.
name|tableFactory
operator|.
name|createHTableInterface
argument_list|(
name|config
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|tableName
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

