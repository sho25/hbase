begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2009 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_comment
comment|/* using a stack instead of a FIFO might have some small positive performance    impact wrt. cache */
end_comment

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * A simple pool of HTable instances.  *<p>  * The default pool size is 10.  */
end_comment

begin_class
specifier|public
class|class
name|HTablePool
block|{
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|HTablePool
argument_list|>
name|poolMap
init|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|HTablePool
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|HBaseConfiguration
name|config
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|tableName
decl_stmt|;
specifier|private
specifier|final
name|Deque
argument_list|<
name|HTable
argument_list|>
name|pool
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxSize
decl_stmt|;
comment|/**    * Get a shared table pool.    * @param config    * @param tableName the table name    * @return the table pool    */
specifier|public
specifier|static
name|HTablePool
name|getPool
parameter_list|(
name|HBaseConfiguration
name|config
parameter_list|,
name|byte
index|[]
name|tableName
parameter_list|)
block|{
return|return
name|getPool
argument_list|(
name|config
argument_list|,
name|tableName
argument_list|,
literal|10
argument_list|)
return|;
block|}
comment|/**    * Get a shared table pool.    * @param tableName the table name    * @return the table pool    */
specifier|public
specifier|static
name|HTablePool
name|getPool
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
return|return
name|getPool
argument_list|(
operator|new
name|HBaseConfiguration
argument_list|()
argument_list|,
name|tableName
argument_list|,
literal|10
argument_list|)
return|;
block|}
comment|/**    * Get a shared table pool.    *<p>    * NOTE:<i>maxSize</i> is advisory. If the pool does not yet exist, a new    * shared pool will be allocated with<i>maxSize</i> as the size limit.    * However, if the shared pool already exists, and was created with a     * different (or default) value for<i>maxSize</i>, it will not be changed.    * @param config HBase configuration    * @param tableName the table name    * @param maxSize the maximum size of the pool    * @return the table pool    */
specifier|public
specifier|static
name|HTablePool
name|getPool
parameter_list|(
name|HBaseConfiguration
name|config
parameter_list|,
name|byte
index|[]
name|tableName
parameter_list|,
name|int
name|maxSize
parameter_list|)
block|{
synchronized|synchronized
init|(
name|poolMap
init|)
block|{
name|HTablePool
name|pool
init|=
name|poolMap
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|pool
operator|==
literal|null
condition|)
block|{
name|pool
operator|=
operator|new
name|HTablePool
argument_list|(
name|config
argument_list|,
name|tableName
argument_list|,
name|maxSize
argument_list|)
expr_stmt|;
name|poolMap
operator|.
name|put
argument_list|(
name|tableName
argument_list|,
name|pool
argument_list|)
expr_stmt|;
block|}
return|return
name|pool
return|;
block|}
block|}
comment|/**    * Constructor     * @param config HBase configuration    * @param tableName the table name    * @param maxSize maximum pool size    */
specifier|public
name|HTablePool
parameter_list|(
name|HBaseConfiguration
name|config
parameter_list|,
name|byte
index|[]
name|tableName
parameter_list|,
name|int
name|maxSize
parameter_list|)
block|{
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|maxSize
operator|=
name|maxSize
expr_stmt|;
name|this
operator|.
name|pool
operator|=
operator|new
name|ArrayDeque
argument_list|<
name|HTable
argument_list|>
argument_list|(
name|this
operator|.
name|maxSize
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructor    * @param tableName the table name    * @param maxSize maximum pool size    */
specifier|public
name|HTablePool
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|int
name|maxSize
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|HBaseConfiguration
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|maxSize
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructor    * @param tableName the table name    */
specifier|public
name|HTablePool
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|HBaseConfiguration
argument_list|()
argument_list|,
name|tableName
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get a HTable instance, possibly from the pool, if one is available.    * @return HTable a HTable instance    * @throws IOException    */
specifier|public
name|HTable
name|get
parameter_list|()
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|pool
init|)
block|{
comment|// peek then pop inside a synchronized block avoids the overhead of a
comment|// NoSuchElementException
name|HTable
name|table
init|=
name|pool
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
return|return
name|pool
operator|.
name|pop
argument_list|()
return|;
block|}
block|}
return|return
operator|new
name|HTable
argument_list|(
name|config
argument_list|,
name|tableName
argument_list|)
return|;
block|}
comment|/**    * Return a HTable instance to the pool.    * @param table a HTable instance    */
specifier|public
name|void
name|put
parameter_list|(
name|HTable
name|table
parameter_list|)
block|{
synchronized|synchronized
init|(
name|pool
init|)
block|{
if|if
condition|(
name|pool
operator|.
name|size
argument_list|()
operator|<
name|maxSize
condition|)
block|{
name|pool
operator|.
name|push
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

