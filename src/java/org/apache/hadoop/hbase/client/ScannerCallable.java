begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2008 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|RowFilterInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|RowResult
import|;
end_import

begin_comment
comment|/**  * Retryable scanner  */
end_comment

begin_class
specifier|public
class|class
name|ScannerCallable
extends|extends
name|ServerCallable
argument_list|<
name|RowResult
argument_list|>
block|{
specifier|private
name|long
name|scannerId
init|=
operator|-
literal|1L
decl_stmt|;
specifier|private
name|boolean
name|instantiated
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
index|[]
name|columns
decl_stmt|;
specifier|private
specifier|final
name|long
name|timestamp
decl_stmt|;
specifier|private
specifier|final
name|RowFilterInterface
name|filter
decl_stmt|;
name|ScannerCallable
parameter_list|(
name|HConnection
name|connection
parameter_list|,
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
index|[]
name|columns
parameter_list|,
name|byte
index|[]
name|startRow
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|RowFilterInterface
name|filter
parameter_list|)
block|{
name|super
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
name|startRow
argument_list|)
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
block|}
comment|/**    * @param reload    * @throws IOException    */
annotation|@
name|Override
specifier|public
name|void
name|instantiateServer
parameter_list|(
name|boolean
name|reload
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|instantiated
operator|||
name|reload
condition|)
block|{
name|super
operator|.
name|instantiateServer
argument_list|(
name|reload
argument_list|)
expr_stmt|;
name|instantiated
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|/** {@inheritDoc} */
specifier|public
name|RowResult
name|call
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|scannerId
operator|!=
operator|-
literal|1L
operator|&&
name|closed
condition|)
block|{
name|server
operator|.
name|close
argument_list|(
name|scannerId
argument_list|)
expr_stmt|;
name|scannerId
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|scannerId
operator|==
operator|-
literal|1L
operator|&&
operator|!
name|closed
condition|)
block|{
comment|// open the scanner
name|scannerId
operator|=
name|server
operator|.
name|openScanner
argument_list|(
name|this
operator|.
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|columns
argument_list|,
name|row
argument_list|,
name|timestamp
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
name|server
operator|.
name|next
argument_list|(
name|scannerId
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Call this when the next invocation of call should close the scanner    */
specifier|public
name|void
name|setClose
parameter_list|()
block|{
name|closed
operator|=
literal|true
expr_stmt|;
block|}
comment|/**    * @return the HRegionInfo for the current region    */
specifier|public
name|HRegionInfo
name|getHRegionInfo
parameter_list|()
block|{
if|if
condition|(
operator|!
name|instantiated
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|location
operator|.
name|getRegionInfo
argument_list|()
return|;
block|}
block|}
end_class

end_unit

