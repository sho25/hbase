begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ImmutableBytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|HbaseRPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Writables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|HbaseMapWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|HMasterInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|SoftSortedMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HStoreKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MasterNotRunningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|LocalHBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NoServerForRegionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RemoteExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|HRegionInterface
import|;
end_import

begin_comment
comment|/**  * A non-instantiable class that manages connections to multiple tables in  * multiple HBase instances  */
end_comment

begin_class
specifier|public
class|class
name|HConnectionManager
implements|implements
name|HConstants
block|{
comment|/*    * Private. Not instantiable.    */
specifier|private
name|HConnectionManager
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|// A Map of master HServerAddress -> connection information for that instance
comment|// Note that although the Map is synchronized, the objects it contains
comment|// are mutable and hence require synchronized access to them
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|TableServers
argument_list|>
name|HBASE_INSTANCES
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|TableServers
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
comment|/**    * Get the connection object for the instance specified by the configuration    * If no current connection exists, create a new connection for that instance    * @param conf    * @return HConnection object for the instance specified by the configuration    */
specifier|public
specifier|static
name|HConnection
name|getConnection
parameter_list|(
name|HBaseConfiguration
name|conf
parameter_list|)
block|{
name|TableServers
name|connection
decl_stmt|;
synchronized|synchronized
init|(
name|HBASE_INSTANCES
init|)
block|{
name|String
name|instanceName
init|=
name|conf
operator|.
name|get
argument_list|(
name|HBASE_DIR
argument_list|)
decl_stmt|;
name|connection
operator|=
name|HBASE_INSTANCES
operator|.
name|get
argument_list|(
name|instanceName
argument_list|)
expr_stmt|;
if|if
condition|(
name|connection
operator|==
literal|null
condition|)
block|{
name|connection
operator|=
operator|new
name|TableServers
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|HBASE_INSTANCES
operator|.
name|put
argument_list|(
name|instanceName
argument_list|,
name|connection
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|connection
return|;
block|}
comment|/**    * Delete connection information for the instance specified by the configuration    * @param conf    */
specifier|public
specifier|static
name|void
name|deleteConnection
parameter_list|(
name|HBaseConfiguration
name|conf
parameter_list|)
block|{
synchronized|synchronized
init|(
name|HBASE_INSTANCES
init|)
block|{
name|HBASE_INSTANCES
operator|.
name|remove
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|HBASE_DIR
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* Encapsulates finding the servers for an HBase instance */
specifier|private
specifier|static
class|class
name|TableServers
implements|implements
name|HConnection
implements|,
name|HConstants
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TableServers
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|HRegionInterface
argument_list|>
name|serverInterfaceClass
decl_stmt|;
specifier|private
specifier|final
name|long
name|pause
decl_stmt|;
specifier|private
specifier|final
name|int
name|numRetries
decl_stmt|;
specifier|private
specifier|final
name|Integer
name|masterLock
init|=
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|closed
decl_stmt|;
specifier|private
specifier|volatile
name|HMasterInterface
name|master
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|masterChecked
decl_stmt|;
specifier|private
specifier|final
name|Integer
name|rootRegionLock
init|=
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Integer
name|metaRegionLock
init|=
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Integer
name|userRegionLock
init|=
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|volatile
name|HBaseConfiguration
name|conf
decl_stmt|;
comment|// Known region HServerAddress.toString() -> HRegionInterface
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|HRegionInterface
argument_list|>
name|servers
decl_stmt|;
specifier|private
name|HRegionLocation
name|rootRegionLocation
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Text
argument_list|,
name|SoftSortedMap
argument_list|<
name|Text
argument_list|,
name|HRegionLocation
argument_list|>
argument_list|>
name|cachedRegionLocations
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Text
argument_list|,
name|SoftSortedMap
argument_list|<
name|Text
argument_list|,
name|HRegionLocation
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/**       * constructor      * @param conf Configuration object      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|TableServers
parameter_list|(
name|HBaseConfiguration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|LocalHBaseCluster
operator|.
name|doLocal
argument_list|(
operator|new
name|HBaseConfiguration
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|serverClassName
init|=
name|conf
operator|.
name|get
argument_list|(
name|REGION_SERVER_CLASS
argument_list|,
name|DEFAULT_REGION_SERVER_CLASS
argument_list|)
decl_stmt|;
name|this
operator|.
name|closed
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|this
operator|.
name|serverInterfaceClass
operator|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|HRegionInterface
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|serverClassName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Unable to find region server interface "
operator|+
name|serverClassName
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|this
operator|.
name|pause
operator|=
name|conf
operator|.
name|getLong
argument_list|(
literal|"hbase.client.pause"
argument_list|,
literal|30
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|this
operator|.
name|numRetries
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.client.retries.number"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|this
operator|.
name|master
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|masterChecked
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|servers
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|HRegionInterface
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|HMasterInterface
name|getMaster
parameter_list|()
throws|throws
name|MasterNotRunningException
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|masterLock
init|)
block|{
for|for
control|(
name|int
name|tries
init|=
literal|0
init|;
operator|!
name|this
operator|.
name|closed
operator|&&
operator|!
name|this
operator|.
name|masterChecked
operator|&&
name|this
operator|.
name|master
operator|==
literal|null
operator|&&
name|tries
operator|<
name|numRetries
condition|;
name|tries
operator|++
control|)
block|{
name|HServerAddress
name|masterLocation
init|=
operator|new
name|HServerAddress
argument_list|(
name|this
operator|.
name|conf
operator|.
name|get
argument_list|(
name|MASTER_ADDRESS
argument_list|,
name|DEFAULT_MASTER_ADDRESS
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|HMasterInterface
name|tryMaster
init|=
operator|(
name|HMasterInterface
operator|)
name|HbaseRPC
operator|.
name|getProxy
argument_list|(
name|HMasterInterface
operator|.
name|class
argument_list|,
name|HMasterInterface
operator|.
name|versionID
argument_list|,
name|masterLocation
operator|.
name|getInetSocketAddress
argument_list|()
argument_list|,
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|tryMaster
operator|.
name|isMasterRunning
argument_list|()
condition|)
block|{
name|this
operator|.
name|master
operator|=
name|tryMaster
expr_stmt|;
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|tries
operator|==
name|numRetries
operator|-
literal|1
condition|)
block|{
comment|// This was our last chance - don't bother sleeping
break|break;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Attempt "
operator|+
name|tries
operator|+
literal|" of "
operator|+
name|this
operator|.
name|numRetries
operator|+
literal|" failed with<"
operator|+
name|e
operator|+
literal|">. Retrying after sleep of "
operator|+
name|this
operator|.
name|pause
argument_list|)
expr_stmt|;
block|}
comment|// We either cannot connect to master or it is not running. Sleep& retry
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|this
operator|.
name|pause
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// continue
block|}
block|}
name|this
operator|.
name|masterChecked
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|master
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MasterNotRunningException
argument_list|()
throw|;
block|}
return|return
name|this
operator|.
name|master
return|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|boolean
name|isMasterRunning
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|master
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|getMaster
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MasterNotRunningException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|boolean
name|tableExists
parameter_list|(
specifier|final
name|Text
name|tableName
parameter_list|)
block|{
if|if
condition|(
name|tableName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Table name cannot be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|tableName
operator|.
name|equals
argument_list|(
name|ROOT_TABLE_NAME
argument_list|)
operator|||
name|tableName
operator|.
name|equals
argument_list|(
name|META_TABLE_NAME
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|boolean
name|exists
init|=
literal|false
decl_stmt|;
try|try
block|{
name|HTableDescriptor
index|[]
name|tables
init|=
name|listTables
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tables
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|tables
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|exists
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Testing for table existence threw exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|exists
return|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|HTableDescriptor
index|[]
name|listTables
parameter_list|()
throws|throws
name|IOException
block|{
name|HashSet
argument_list|<
name|HTableDescriptor
argument_list|>
name|uniqueTables
init|=
operator|new
name|HashSet
argument_list|<
name|HTableDescriptor
argument_list|>
argument_list|()
decl_stmt|;
name|long
name|scannerId
init|=
operator|-
literal|1L
decl_stmt|;
name|HRegionInterface
name|server
init|=
literal|null
decl_stmt|;
name|Text
name|startRow
init|=
name|EMPTY_START_ROW
decl_stmt|;
name|HRegionLocation
name|metaLocation
init|=
literal|null
decl_stmt|;
comment|// scan over the each meta region
do|do
block|{
try|try
block|{
comment|// turn the start row into a location
name|metaLocation
operator|=
name|locateRegion
argument_list|(
name|META_TABLE_NAME
argument_list|,
name|startRow
argument_list|)
expr_stmt|;
comment|// connect to the server hosting the .META. region
name|server
operator|=
name|getHRegionConnection
argument_list|(
name|metaLocation
operator|.
name|getServerAddress
argument_list|()
argument_list|)
expr_stmt|;
comment|// open a scanner over the meta region
name|scannerId
operator|=
name|server
operator|.
name|openScanner
argument_list|(
name|metaLocation
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|COLUMN_FAMILY_ARRAY
argument_list|,
name|startRow
argument_list|,
name|LATEST_TIMESTAMP
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// iterate through the scanner, accumulating unique table names
while|while
condition|(
literal|true
condition|)
block|{
name|HbaseMapWritable
name|values
init|=
name|server
operator|.
name|next
argument_list|(
name|scannerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|==
literal|null
operator|||
name|values
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
break|break;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Writable
argument_list|,
name|Writable
argument_list|>
name|e
range|:
name|values
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|HStoreKey
name|key
init|=
operator|(
name|HStoreKey
operator|)
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|getColumn
argument_list|()
operator|.
name|equals
argument_list|(
name|COL_REGIONINFO
argument_list|)
condition|)
block|{
name|HRegionInfo
name|info
init|=
operator|new
name|HRegionInfo
argument_list|()
decl_stmt|;
name|info
operator|=
operator|(
name|HRegionInfo
operator|)
name|Writables
operator|.
name|getWritable
argument_list|(
operator|(
operator|(
name|ImmutableBytesWritable
operator|)
name|e
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|get
argument_list|()
argument_list|,
name|info
argument_list|)
expr_stmt|;
comment|// Only examine the rows where the startKey is zero length
if|if
condition|(
name|info
operator|.
name|getStartKey
argument_list|()
operator|.
name|getLength
argument_list|()
operator|==
literal|0
condition|)
block|{
name|uniqueTables
operator|.
name|add
argument_list|(
name|info
operator|.
name|getTableDesc
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|server
operator|.
name|close
argument_list|(
name|scannerId
argument_list|)
expr_stmt|;
name|scannerId
operator|=
operator|-
literal|1L
expr_stmt|;
comment|// advance the startRow to the end key of the current region
name|startRow
operator|=
name|metaLocation
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEndKey
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Retry once.
name|metaLocation
operator|=
name|relocateRegion
argument_list|(
name|META_TABLE_NAME
argument_list|,
name|startRow
argument_list|)
expr_stmt|;
continue|continue;
block|}
finally|finally
block|{
if|if
condition|(
name|scannerId
operator|!=
operator|-
literal|1L
operator|&&
name|server
operator|!=
literal|null
condition|)
block|{
name|server
operator|.
name|close
argument_list|(
name|scannerId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
do|while
condition|(
name|startRow
operator|.
name|compareTo
argument_list|(
name|LAST_ROW
argument_list|)
operator|!=
literal|0
condition|)
do|;
return|return
name|uniqueTables
operator|.
name|toArray
argument_list|(
operator|new
name|HTableDescriptor
index|[
name|uniqueTables
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|HRegionLocation
name|locateRegion
parameter_list|(
name|Text
name|tableName
parameter_list|,
name|Text
name|row
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|locateRegion
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|HRegionLocation
name|relocateRegion
parameter_list|(
name|Text
name|tableName
parameter_list|,
name|Text
name|row
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|locateRegion
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|private
name|HRegionLocation
name|locateRegion
parameter_list|(
name|Text
name|tableName
parameter_list|,
name|Text
name|row
parameter_list|,
name|boolean
name|useCache
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|tableName
operator|==
literal|null
operator|||
name|tableName
operator|.
name|getLength
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"table name cannot be null or zero length"
argument_list|)
throw|;
block|}
if|if
condition|(
name|tableName
operator|.
name|equals
argument_list|(
name|ROOT_TABLE_NAME
argument_list|)
condition|)
block|{
synchronized|synchronized
init|(
name|rootRegionLock
init|)
block|{
comment|// This block guards against two threads trying to find the root
comment|// region at the same time. One will go do the find while the
comment|// second waits. The second thread will not do find.
if|if
condition|(
operator|!
name|useCache
operator|||
name|rootRegionLocation
operator|==
literal|null
condition|)
block|{
return|return
name|locateRootRegion
argument_list|()
return|;
block|}
return|return
name|rootRegionLocation
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|tableName
operator|.
name|equals
argument_list|(
name|META_TABLE_NAME
argument_list|)
condition|)
block|{
synchronized|synchronized
init|(
name|metaRegionLock
init|)
block|{
comment|// This block guards against two threads trying to load the meta
comment|// region at the same time. The first will load the meta region and
comment|// the second will use the value that the first one found.
return|return
name|locateRegionInMeta
argument_list|(
name|ROOT_TABLE_NAME
argument_list|,
name|tableName
argument_list|,
name|row
argument_list|,
name|useCache
argument_list|)
return|;
block|}
block|}
else|else
block|{
synchronized|synchronized
init|(
name|userRegionLock
init|)
block|{
return|return
name|locateRegionInMeta
argument_list|(
name|META_TABLE_NAME
argument_list|,
name|tableName
argument_list|,
name|row
argument_list|,
name|useCache
argument_list|)
return|;
block|}
block|}
block|}
comment|/**       * Convenience method for turning a MapWritable into the underlying       * SortedMap we all know and love.       */
specifier|private
name|SortedMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|sortedMapFromMapWritable
parameter_list|(
name|HbaseMapWritable
name|writable
parameter_list|)
block|{
name|SortedMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|results
init|=
operator|new
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Writable
argument_list|,
name|Writable
argument_list|>
name|e
range|:
name|writable
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|HStoreKey
name|key
init|=
operator|(
name|HStoreKey
operator|)
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|results
operator|.
name|put
argument_list|(
name|key
operator|.
name|getColumn
argument_list|()
argument_list|,
operator|(
operator|(
name|ImmutableBytesWritable
operator|)
name|e
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
comment|/**       * Search one of the meta tables (-ROOT- or .META.) for the HRegionLocation       * info that contains the table and row we're seeking.       */
specifier|private
name|HRegionLocation
name|locateRegionInMeta
parameter_list|(
name|Text
name|parentTable
parameter_list|,
name|Text
name|tableName
parameter_list|,
name|Text
name|row
parameter_list|,
name|boolean
name|useCache
parameter_list|)
throws|throws
name|IOException
block|{
name|HRegionLocation
name|location
init|=
literal|null
decl_stmt|;
comment|// if we're supposed to be using the cache, then check it for a possible
comment|// hit. otherwise, delete any existing cached location so it won't
comment|// interfere.
if|if
condition|(
name|useCache
condition|)
block|{
name|location
operator|=
name|getCachedLocation
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
literal|null
condition|)
block|{
return|return
name|location
return|;
block|}
block|}
else|else
block|{
name|deleteCachedLocation
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
comment|// build the key of the meta region we should be looking for.
comment|// the extra 9's on the end are necessary to allow "exact" matches
comment|// without knowing the precise region names.
name|Text
name|metaKey
init|=
operator|new
name|Text
argument_list|(
name|tableName
operator|.
name|toString
argument_list|()
operator|+
literal|","
operator|+
name|row
operator|.
name|toString
argument_list|()
operator|+
literal|",999999999999999"
argument_list|)
decl_stmt|;
name|int
name|tries
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|tries
operator|++
expr_stmt|;
if|if
condition|(
name|tries
operator|>=
name|numRetries
condition|)
block|{
throw|throw
operator|new
name|NoServerForRegionException
argument_list|(
literal|"Unable to find region for "
operator|+
name|row
operator|+
literal|" after "
operator|+
name|numRetries
operator|+
literal|" tries."
argument_list|)
throw|;
block|}
try|try
block|{
comment|// locate the root region
name|HRegionLocation
name|metaLocation
init|=
name|locateRegion
argument_list|(
name|parentTable
argument_list|,
name|metaKey
argument_list|)
decl_stmt|;
name|HRegionInterface
name|server
init|=
name|getHRegionConnection
argument_list|(
name|metaLocation
operator|.
name|getServerAddress
argument_list|()
argument_list|)
decl_stmt|;
comment|// query the root region for the location of the meta region
name|HbaseMapWritable
name|regionInfoRow
init|=
name|server
operator|.
name|getClosestRowBefore
argument_list|(
name|metaLocation
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|metaKey
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionInfoRow
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|TableNotFoundException
argument_list|(
literal|"Table '"
operator|+
name|tableName
operator|+
literal|"' does not exist."
argument_list|)
throw|;
block|}
comment|// convert the MapWritable into a Map we can use
name|SortedMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|results
init|=
name|sortedMapFromMapWritable
argument_list|(
name|regionInfoRow
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|results
operator|.
name|get
argument_list|(
name|COL_REGIONINFO
argument_list|)
decl_stmt|;
if|if
condition|(
name|bytes
operator|==
literal|null
operator|||
name|bytes
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"HRegionInfo was null or empty in "
operator|+
name|parentTable
argument_list|)
throw|;
block|}
comment|// convert the row result into the HRegionLocation we need!
name|HRegionInfo
name|regionInfo
init|=
operator|(
name|HRegionInfo
operator|)
name|Writables
operator|.
name|getWritable
argument_list|(
name|results
operator|.
name|get
argument_list|(
name|COL_REGIONINFO
argument_list|)
argument_list|,
operator|new
name|HRegionInfo
argument_list|()
argument_list|)
decl_stmt|;
comment|// possible we got a region of a different table...
if|if
condition|(
operator|!
name|regionInfo
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|TableNotFoundException
argument_list|(
literal|"Table '"
operator|+
name|tableName
operator|+
literal|"' was not found."
argument_list|)
throw|;
block|}
if|if
condition|(
name|regionInfo
operator|.
name|isOffline
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"region offline: "
operator|+
name|regionInfo
operator|.
name|getRegionName
argument_list|()
argument_list|)
throw|;
block|}
name|String
name|serverAddress
init|=
name|Writables
operator|.
name|bytesToString
argument_list|(
name|results
operator|.
name|get
argument_list|(
name|COL_SERVER
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|serverAddress
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|NoServerForRegionException
argument_list|(
literal|"No server address listed in "
operator|+
name|parentTable
operator|+
literal|" for region "
operator|+
name|regionInfo
operator|.
name|getRegionName
argument_list|()
argument_list|)
throw|;
block|}
comment|// instantiate the location
name|location
operator|=
operator|new
name|HRegionLocation
argument_list|(
name|regionInfo
argument_list|,
operator|new
name|HServerAddress
argument_list|(
name|serverAddress
argument_list|)
argument_list|)
expr_stmt|;
name|cacheLocation
argument_list|(
name|tableName
argument_list|,
name|location
argument_list|)
expr_stmt|;
return|return
name|location
return|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
if|if
condition|(
name|tries
operator|<
name|numRetries
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"reloading table servers because: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|relocateRegion
argument_list|(
name|parentTable
argument_list|,
name|metaKey
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|TableNotFoundException
name|e
parameter_list|)
block|{
comment|// if we got this error, probably means the table just plain doesn't
comment|// exist. rethrow the error immediately. this should always be coming
comment|// from the HTable constructor.
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|RemoteException
condition|)
block|{
name|e
operator|=
name|RemoteExceptionHandler
operator|.
name|decodeRemoteException
argument_list|(
operator|(
name|RemoteException
operator|)
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tries
operator|<
name|numRetries
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"reloading table servers because: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|relocateRegion
argument_list|(
name|parentTable
argument_list|,
name|metaKey
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|pause
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// continue
block|}
block|}
block|}
comment|/**        * Search the cache for a location that fits our table and row key.       * Return null if no suitable region is located. TODO: synchronization note       */
specifier|private
name|HRegionLocation
name|getCachedLocation
parameter_list|(
name|Text
name|tableName
parameter_list|,
name|Text
name|row
parameter_list|)
block|{
comment|// find the map of cached locations for this table
name|SoftSortedMap
argument_list|<
name|Text
argument_list|,
name|HRegionLocation
argument_list|>
name|tableLocations
init|=
name|cachedRegionLocations
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
comment|// if tableLocations for this table isn't built yet, make one
if|if
condition|(
name|tableLocations
operator|==
literal|null
condition|)
block|{
name|tableLocations
operator|=
operator|new
name|SoftSortedMap
argument_list|<
name|Text
argument_list|,
name|HRegionLocation
argument_list|>
argument_list|()
expr_stmt|;
name|cachedRegionLocations
operator|.
name|put
argument_list|(
name|tableName
argument_list|,
name|tableLocations
argument_list|)
expr_stmt|;
block|}
comment|// start to examine the cache. we can only do cache actions
comment|// if there's something in the cache for this table.
if|if
condition|(
operator|!
name|tableLocations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|tableLocations
operator|.
name|containsKey
argument_list|(
name|row
argument_list|)
condition|)
block|{
name|HRegionLocation
name|rl
init|=
name|tableLocations
operator|.
name|get
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|rl
operator|!=
literal|null
operator|&&
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cache hit in table locations for row<"
operator|+
name|row
operator|+
literal|"> and tableName "
operator|+
name|tableName
operator|+
literal|": location server "
operator|+
name|rl
operator|.
name|getServerAddress
argument_list|()
operator|+
literal|", location region name "
operator|+
name|rl
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|rl
return|;
block|}
comment|// cut the cache so that we only get the part that could contain
comment|// regions that match our key
name|SoftSortedMap
argument_list|<
name|Text
argument_list|,
name|HRegionLocation
argument_list|>
name|matchingRegions
init|=
name|tableLocations
operator|.
name|headMap
argument_list|(
name|row
argument_list|)
decl_stmt|;
comment|// if that portion of the map is empty, then we're done. otherwise,
comment|// we need to examine the cached location to verify that it is
comment|// a match by end key as well.
if|if
condition|(
operator|!
name|matchingRegions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|HRegionLocation
name|possibleRegion
init|=
name|matchingRegions
operator|.
name|get
argument_list|(
name|matchingRegions
operator|.
name|lastKey
argument_list|()
argument_list|)
decl_stmt|;
comment|// there is a possibility that the reference was garbage collected
comment|// in the instant since we checked isEmpty().
if|if
condition|(
name|possibleRegion
operator|!=
literal|null
condition|)
block|{
name|Text
name|endKey
init|=
name|possibleRegion
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEndKey
argument_list|()
decl_stmt|;
comment|// make sure that the end key is greater than the row we're looking
comment|// for, otherwise the row actually belongs in the next region, not
comment|// this one. the exception case is when the endkey is EMPTY_START_ROW,
comment|// signifying that the region we're checking is actually the last
comment|// region in the table.
if|if
condition|(
name|endKey
operator|.
name|equals
argument_list|(
name|EMPTY_TEXT
argument_list|)
operator|||
name|endKey
operator|.
name|compareTo
argument_list|(
name|row
argument_list|)
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found possible location for "
operator|+
name|row
operator|+
literal|", "
operator|+
name|possibleRegion
argument_list|)
expr_stmt|;
block|}
return|return
name|possibleRegion
return|;
block|}
block|}
block|}
block|}
comment|// passed all the way through, so we got nothin - complete cache miss
return|return
literal|null
return|;
block|}
comment|/**       * Delete a cached location, if it satisfies the table name and row       * requirements.       */
specifier|private
name|void
name|deleteCachedLocation
parameter_list|(
name|Text
name|tableName
parameter_list|,
name|Text
name|row
parameter_list|)
block|{
comment|// find the map of cached locations for this table
name|SoftSortedMap
argument_list|<
name|Text
argument_list|,
name|HRegionLocation
argument_list|>
name|tableLocations
init|=
name|cachedRegionLocations
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
comment|// if tableLocations for this table isn't built yet, make one
if|if
condition|(
name|tableLocations
operator|==
literal|null
condition|)
block|{
name|tableLocations
operator|=
operator|new
name|SoftSortedMap
argument_list|<
name|Text
argument_list|,
name|HRegionLocation
argument_list|>
argument_list|()
expr_stmt|;
name|cachedRegionLocations
operator|.
name|put
argument_list|(
name|tableName
argument_list|,
name|tableLocations
argument_list|)
expr_stmt|;
block|}
comment|// start to examine the cache. we can only do cache actions
comment|// if there's something in the cache for this table.
if|if
condition|(
operator|!
name|tableLocations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// cut the cache so that we only get the part that could contain
comment|// regions that match our key
name|SoftSortedMap
argument_list|<
name|Text
argument_list|,
name|HRegionLocation
argument_list|>
name|matchingRegions
init|=
name|tableLocations
operator|.
name|headMap
argument_list|(
name|row
argument_list|)
decl_stmt|;
comment|// if that portion of the map is empty, then we're done. otherwise,
comment|// we need to examine the cached location to verify that it is
comment|// a match by end key as well.
if|if
condition|(
operator|!
name|matchingRegions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|HRegionLocation
name|possibleRegion
init|=
name|matchingRegions
operator|.
name|get
argument_list|(
name|matchingRegions
operator|.
name|lastKey
argument_list|()
argument_list|)
decl_stmt|;
name|Text
name|endKey
init|=
name|possibleRegion
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEndKey
argument_list|()
decl_stmt|;
comment|// by nature of the map, we know that the start key has to be<
comment|// otherwise it wouldn't be in the headMap.
if|if
condition|(
name|endKey
operator|.
name|compareTo
argument_list|(
name|row
argument_list|)
operator|<=
literal|0
condition|)
block|{
comment|// delete any matching entry
name|HRegionLocation
name|rl
init|=
name|tableLocations
operator|.
name|remove
argument_list|(
name|matchingRegions
operator|.
name|lastKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rl
operator|!=
literal|null
operator|&&
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removed "
operator|+
name|rl
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
operator|+
literal|" from cache because of "
operator|+
name|row
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/**       * Put a newly discovered HRegionLocation into the cache.       */
specifier|private
name|void
name|cacheLocation
parameter_list|(
name|Text
name|tableName
parameter_list|,
name|HRegionLocation
name|location
parameter_list|)
block|{
name|Text
name|startKey
init|=
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getStartKey
argument_list|()
decl_stmt|;
comment|// find the map of cached locations for this table
name|SoftSortedMap
argument_list|<
name|Text
argument_list|,
name|HRegionLocation
argument_list|>
name|tableLocations
init|=
name|cachedRegionLocations
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
comment|// if tableLocations for this table isn't built yet, make one
if|if
condition|(
name|tableLocations
operator|==
literal|null
condition|)
block|{
name|tableLocations
operator|=
operator|new
name|SoftSortedMap
argument_list|<
name|Text
argument_list|,
name|HRegionLocation
argument_list|>
argument_list|()
expr_stmt|;
name|cachedRegionLocations
operator|.
name|put
argument_list|(
name|tableName
argument_list|,
name|tableLocations
argument_list|)
expr_stmt|;
block|}
comment|// save the HRegionLocation under the startKey
name|tableLocations
operator|.
name|put
argument_list|(
name|startKey
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|HRegionInterface
name|getHRegionConnection
parameter_list|(
name|HServerAddress
name|regionServer
parameter_list|)
throws|throws
name|IOException
block|{
name|HRegionInterface
name|server
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|servers
init|)
block|{
comment|// See if we already have a connection
name|server
operator|=
name|this
operator|.
name|servers
operator|.
name|get
argument_list|(
name|regionServer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
block|{
comment|// Get a connection
name|long
name|versionId
init|=
literal|0
decl_stmt|;
try|try
block|{
name|versionId
operator|=
name|serverInterfaceClass
operator|.
name|getDeclaredField
argument_list|(
literal|"versionID"
argument_list|)
operator|.
name|getLong
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
comment|// Should never happen unless visibility of versionID changes
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Unable to open a connection to a "
operator|+
name|serverInterfaceClass
operator|.
name|getName
argument_list|()
operator|+
literal|" server."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchFieldException
name|e
parameter_list|)
block|{
comment|// Should never happen unless versionID field name changes in HRegionInterface
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Unable to open a connection to a "
operator|+
name|serverInterfaceClass
operator|.
name|getName
argument_list|()
operator|+
literal|" server."
argument_list|,
name|e
argument_list|)
throw|;
block|}
try|try
block|{
name|server
operator|=
operator|(
name|HRegionInterface
operator|)
name|HbaseRPC
operator|.
name|waitForProxy
argument_list|(
name|serverInterfaceClass
argument_list|,
name|versionId
argument_list|,
name|regionServer
operator|.
name|getInetSocketAddress
argument_list|()
argument_list|,
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|e
parameter_list|)
block|{
throw|throw
name|RemoteExceptionHandler
operator|.
name|decodeRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|this
operator|.
name|servers
operator|.
name|put
argument_list|(
name|regionServer
operator|.
name|toString
argument_list|()
argument_list|,
name|server
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|server
return|;
block|}
comment|/*      * Repeatedly try to find the root region by asking the master for where it is      * @return HRegionLocation for root region if found      * @throws NoServerForRegionException - if the root region can not be located      * after retrying      * @throws IOException       */
specifier|private
name|HRegionLocation
name|locateRootRegion
parameter_list|()
throws|throws
name|IOException
block|{
name|getMaster
argument_list|()
expr_stmt|;
name|HServerAddress
name|rootRegionAddress
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|tries
init|=
literal|0
init|;
name|tries
operator|<
name|numRetries
condition|;
name|tries
operator|++
control|)
block|{
name|int
name|localTimeouts
init|=
literal|0
decl_stmt|;
comment|// ask the master which server has the root region
while|while
condition|(
name|rootRegionAddress
operator|==
literal|null
operator|&&
name|localTimeouts
operator|<
name|numRetries
condition|)
block|{
name|rootRegionAddress
operator|=
name|master
operator|.
name|findRootRegion
argument_list|()
expr_stmt|;
if|if
condition|(
name|rootRegionAddress
operator|==
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Sleeping. Waiting for root region."
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|pause
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Wake. Retry finding root region."
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|iex
parameter_list|)
block|{
comment|// continue
block|}
name|localTimeouts
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|rootRegionAddress
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoServerForRegionException
argument_list|(
literal|"Timed out trying to locate root region"
argument_list|)
throw|;
block|}
comment|// get a connection to the region server
name|HRegionInterface
name|server
init|=
name|getHRegionConnection
argument_list|(
name|rootRegionAddress
argument_list|)
decl_stmt|;
try|try
block|{
comment|// if this works, then we're good, and we have an acceptable address,
comment|// so we can stop doing retries and return the result.
name|server
operator|.
name|getRegionInfo
argument_list|(
name|HRegionInfo
operator|.
name|rootRegionInfo
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found ROOT "
operator|+
name|HRegionInfo
operator|.
name|rootRegionInfo
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|tries
operator|==
name|numRetries
operator|-
literal|1
condition|)
block|{
comment|// Don't bother sleeping. We've run out of retries.
if|if
condition|(
name|e
operator|instanceof
name|RemoteException
condition|)
block|{
name|e
operator|=
name|RemoteExceptionHandler
operator|.
name|decodeRemoteException
argument_list|(
operator|(
name|RemoteException
operator|)
name|e
argument_list|)
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
comment|// Sleep and retry finding root region.
try|try
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Root region location changed. Sleeping."
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|pause
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Wake. Retry finding root region."
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|iex
parameter_list|)
block|{
comment|// continue
block|}
block|}
name|rootRegionAddress
operator|=
literal|null
expr_stmt|;
block|}
comment|// if the address is null by this point, then the retries have failed,
comment|// and we're sort of sunk
if|if
condition|(
name|rootRegionAddress
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoServerForRegionException
argument_list|(
literal|"unable to locate root region server"
argument_list|)
throw|;
block|}
comment|// return the region location
return|return
operator|new
name|HRegionLocation
argument_list|(
name|HRegionInfo
operator|.
name|rootRegionInfo
argument_list|,
name|rootRegionAddress
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

