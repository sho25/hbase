begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2008 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|transactional
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_comment
comment|/**  * Holds client-side transaction information. Client's use them as opaque  * objects passed around to transaction operations.  *   */
end_comment

begin_class
specifier|public
class|class
name|TransactionState
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TransactionState
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|long
name|transactionId
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|HRegionLocation
argument_list|>
name|participatingRegions
init|=
operator|new
name|HashSet
argument_list|<
name|HRegionLocation
argument_list|>
argument_list|()
decl_stmt|;
name|TransactionState
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|)
block|{
name|this
operator|.
name|transactionId
operator|=
name|transactionId
expr_stmt|;
block|}
name|boolean
name|addRegion
parameter_list|(
specifier|final
name|HRegionLocation
name|hregion
parameter_list|)
block|{
name|boolean
name|added
init|=
name|participatingRegions
operator|.
name|add
argument_list|(
name|hregion
argument_list|)
decl_stmt|;
if|if
condition|(
name|added
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding new hregion ["
operator|+
name|hregion
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|"] to transaction ["
operator|+
name|transactionId
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
return|return
name|added
return|;
block|}
name|Set
argument_list|<
name|HRegionLocation
argument_list|>
name|getParticipatingRegions
parameter_list|()
block|{
return|return
name|participatingRegions
return|;
block|}
comment|/**    * Get the transactionId.    *     * @return Return the transactionId.    */
specifier|public
name|long
name|getTransactionId
parameter_list|()
block|{
return|return
name|transactionId
return|;
block|}
comment|/**    * @see java.lang.Object#toString()    */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"id: "
operator|+
name|transactionId
operator|+
literal|", particpants: "
operator|+
name|participatingRegions
operator|.
name|size
argument_list|()
return|;
block|}
block|}
end_class

end_unit

