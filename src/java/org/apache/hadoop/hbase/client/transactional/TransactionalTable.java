begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2008 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|transactional
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ScannerCallable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ServerCallable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|RowFilterInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|BatchUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|RowResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|TransactionalRegionInterface
import|;
end_import

begin_comment
comment|/**  * Table with transactional support.  *   */
end_comment

begin_class
specifier|public
class|class
name|TransactionalTable
extends|extends
name|HTable
block|{
comment|/**    * @param conf    * @param tableName    * @throws IOException    */
specifier|public
name|TransactionalTable
parameter_list|(
specifier|final
name|HBaseConfiguration
name|conf
parameter_list|,
specifier|final
name|String
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param conf    * @param tableName    * @throws IOException    */
specifier|public
name|TransactionalTable
parameter_list|(
specifier|final
name|HBaseConfiguration
name|conf
parameter_list|,
specifier|final
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|abstract
class|class
name|TransactionalServerCallable
parameter_list|<
name|T
parameter_list|>
extends|extends
name|ServerCallable
argument_list|<
name|T
argument_list|>
block|{
specifier|protected
name|TransactionState
name|transactionState
decl_stmt|;
specifier|protected
name|TransactionalRegionInterface
name|getTransactionServer
parameter_list|()
block|{
return|return
operator|(
name|TransactionalRegionInterface
operator|)
name|server
return|;
block|}
specifier|protected
name|void
name|recordServer
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|transactionState
operator|.
name|addRegion
argument_list|(
name|location
argument_list|)
condition|)
block|{
name|getTransactionServer
argument_list|()
operator|.
name|beginTransaction
argument_list|(
name|transactionState
operator|.
name|getTransactionId
argument_list|()
argument_list|,
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @param connection      * @param tableName      * @param row      * @param transactionState      */
specifier|public
name|TransactionalServerCallable
parameter_list|(
specifier|final
name|HConnection
name|connection
parameter_list|,
specifier|final
name|byte
index|[]
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|TransactionState
name|transactionState
parameter_list|)
block|{
name|super
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|this
operator|.
name|transactionState
operator|=
name|transactionState
expr_stmt|;
block|}
block|}
comment|/**    * Get a single value for the specified row and column    *     * @param transactionState    * @param row row key    * @param column column name    * @return value for specified row/column    * @throws IOException    */
specifier|public
name|Cell
name|get
parameter_list|(
specifier|final
name|TransactionState
name|transactionState
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|column
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|super
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionServerWithRetries
argument_list|(
operator|new
name|TransactionalServerCallable
argument_list|<
name|Cell
argument_list|>
argument_list|(
name|super
operator|.
name|getConnection
argument_list|()
argument_list|,
name|super
operator|.
name|getTableName
argument_list|()
argument_list|,
name|row
argument_list|,
name|transactionState
argument_list|)
block|{
specifier|public
name|Cell
name|call
parameter_list|()
throws|throws
name|IOException
block|{
name|recordServer
argument_list|()
expr_stmt|;
return|return
name|getTransactionServer
argument_list|()
operator|.
name|get
argument_list|(
name|transactionState
operator|.
name|getTransactionId
argument_list|()
argument_list|,
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|row
argument_list|,
name|column
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * Get the specified number of versions of the specified row and column    *     * @param transactionState    * @param row - row key    * @param column - column name    * @param numVersions - number of versions to retrieve    * @return - array byte values    * @throws IOException    */
specifier|public
name|Cell
index|[]
name|get
parameter_list|(
specifier|final
name|TransactionState
name|transactionState
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|column
parameter_list|,
specifier|final
name|int
name|numVersions
parameter_list|)
throws|throws
name|IOException
block|{
name|Cell
index|[]
name|values
init|=
literal|null
decl_stmt|;
name|values
operator|=
name|super
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionServerWithRetries
argument_list|(
operator|new
name|TransactionalServerCallable
argument_list|<
name|Cell
index|[]
argument_list|>
argument_list|(
name|super
operator|.
name|getConnection
argument_list|()
argument_list|,
name|super
operator|.
name|getTableName
argument_list|()
argument_list|,
name|row
argument_list|,
name|transactionState
argument_list|)
block|{
specifier|public
name|Cell
index|[]
name|call
parameter_list|()
throws|throws
name|IOException
block|{
name|recordServer
argument_list|()
expr_stmt|;
return|return
name|getTransactionServer
argument_list|()
operator|.
name|get
argument_list|(
name|transactionState
operator|.
name|getTransactionId
argument_list|()
argument_list|,
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|numVersions
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|values
return|;
block|}
comment|/**    * Get the specified number of versions of the specified row and column with    * the specified timestamp.    *     * @param transactionState    * @param row - row key    * @param column - column name    * @param timestamp - timestamp    * @param numVersions - number of versions to retrieve    * @return - array of values that match the above criteria    * @throws IOException    */
specifier|public
name|Cell
index|[]
name|get
parameter_list|(
specifier|final
name|TransactionState
name|transactionState
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|column
parameter_list|,
specifier|final
name|long
name|timestamp
parameter_list|,
specifier|final
name|int
name|numVersions
parameter_list|)
throws|throws
name|IOException
block|{
name|Cell
index|[]
name|values
init|=
literal|null
decl_stmt|;
name|values
operator|=
name|super
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionServerWithRetries
argument_list|(
operator|new
name|TransactionalServerCallable
argument_list|<
name|Cell
index|[]
argument_list|>
argument_list|(
name|super
operator|.
name|getConnection
argument_list|()
argument_list|,
name|super
operator|.
name|getTableName
argument_list|()
argument_list|,
name|row
argument_list|,
name|transactionState
argument_list|)
block|{
specifier|public
name|Cell
index|[]
name|call
parameter_list|()
throws|throws
name|IOException
block|{
name|recordServer
argument_list|()
expr_stmt|;
return|return
name|getTransactionServer
argument_list|()
operator|.
name|get
argument_list|(
name|transactionState
operator|.
name|getTransactionId
argument_list|()
argument_list|,
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|timestamp
argument_list|,
name|numVersions
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|values
return|;
block|}
comment|/**    * Get all the data for the specified row at the latest timestamp    *     * @param transactionState    * @param row row key    * @return RowResult is empty if row does not exist.    * @throws IOException    */
specifier|public
name|RowResult
name|getRow
parameter_list|(
specifier|final
name|TransactionState
name|transactionState
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getRow
argument_list|(
name|transactionState
argument_list|,
name|row
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
return|;
block|}
comment|/**    * Get all the data for the specified row at a specified timestamp    *     * @param transactionState    * @param row row key    * @param ts timestamp    * @return RowResult is empty if row does not exist.    * @throws IOException    */
specifier|public
name|RowResult
name|getRow
parameter_list|(
specifier|final
name|TransactionState
name|transactionState
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|long
name|ts
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|super
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionServerWithRetries
argument_list|(
operator|new
name|TransactionalServerCallable
argument_list|<
name|RowResult
argument_list|>
argument_list|(
name|super
operator|.
name|getConnection
argument_list|()
argument_list|,
name|super
operator|.
name|getTableName
argument_list|()
argument_list|,
name|row
argument_list|,
name|transactionState
argument_list|)
block|{
specifier|public
name|RowResult
name|call
parameter_list|()
throws|throws
name|IOException
block|{
name|recordServer
argument_list|()
expr_stmt|;
return|return
name|getTransactionServer
argument_list|()
operator|.
name|getRow
argument_list|(
name|transactionState
operator|.
name|getTransactionId
argument_list|()
argument_list|,
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|row
argument_list|,
name|ts
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * Get selected columns for the specified row at the latest timestamp    *     * @param transactionState    * @param row row key    * @param columns Array of column names you want to retrieve.    * @return RowResult is empty if row does not exist.    * @throws IOException    */
specifier|public
name|RowResult
name|getRow
parameter_list|(
specifier|final
name|TransactionState
name|transactionState
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
index|[]
name|columns
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getRow
argument_list|(
name|transactionState
argument_list|,
name|row
argument_list|,
name|columns
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
return|;
block|}
comment|/**    * Get selected columns for the specified row at a specified timestamp    *     * @param transactionState    * @param row row key    * @param columns Array of column names you want to retrieve.    * @param ts timestamp    * @return RowResult is empty if row does not exist.    * @throws IOException    */
specifier|public
name|RowResult
name|getRow
parameter_list|(
specifier|final
name|TransactionState
name|transactionState
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
index|[]
name|columns
parameter_list|,
specifier|final
name|long
name|ts
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|super
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionServerWithRetries
argument_list|(
operator|new
name|TransactionalServerCallable
argument_list|<
name|RowResult
argument_list|>
argument_list|(
name|super
operator|.
name|getConnection
argument_list|()
argument_list|,
name|super
operator|.
name|getTableName
argument_list|()
argument_list|,
name|row
argument_list|,
name|transactionState
argument_list|)
block|{
specifier|public
name|RowResult
name|call
parameter_list|()
throws|throws
name|IOException
block|{
name|recordServer
argument_list|()
expr_stmt|;
return|return
name|getTransactionServer
argument_list|()
operator|.
name|getRow
argument_list|(
name|transactionState
operator|.
name|getTransactionId
argument_list|()
argument_list|,
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|row
argument_list|,
name|columns
argument_list|,
name|ts
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * Delete all cells that match the passed row and whose timestamp is equal-to    * or older than the passed timestamp.    *     * @param transactionState    * @param row Row to update    * @param ts Delete all cells of the same timestamp or older.    * @throws IOException    */
specifier|public
name|void
name|deleteAll
parameter_list|(
specifier|final
name|TransactionState
name|transactionState
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|long
name|ts
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionServerWithRetries
argument_list|(
operator|new
name|TransactionalServerCallable
argument_list|<
name|Boolean
argument_list|>
argument_list|(
name|super
operator|.
name|getConnection
argument_list|()
argument_list|,
name|super
operator|.
name|getTableName
argument_list|()
argument_list|,
name|row
argument_list|,
name|transactionState
argument_list|)
block|{
specifier|public
name|Boolean
name|call
parameter_list|()
throws|throws
name|IOException
block|{
name|recordServer
argument_list|()
expr_stmt|;
name|getTransactionServer
argument_list|()
operator|.
name|deleteAll
argument_list|(
name|transactionState
operator|.
name|getTransactionId
argument_list|()
argument_list|,
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|row
argument_list|,
name|ts
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get a scanner on the current table starting at first row. Return the    * specified columns.    *     * @param transactionState    * @param columns columns to scan. If column name is a column family, all    * columns of the specified column family are returned. Its also possible to    * pass a regex in the column qualifier. A column qualifier is judged to be a    * regex if it contains at least one of the following characters:    *<code>\+|^&*$[]]}{)(</code>.    * @return scanner    * @throws IOException    */
specifier|public
name|Scanner
name|getScanner
parameter_list|(
specifier|final
name|TransactionState
name|transactionState
parameter_list|,
specifier|final
name|byte
index|[]
index|[]
name|columns
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getScanner
argument_list|(
name|transactionState
argument_list|,
name|columns
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Get a scanner on the current table starting at the specified row. Return    * the specified columns.    *     * @param transactionState    * @param columns columns to scan. If column name is a column family, all    * columns of the specified column family are returned. Its also possible to    * pass a regex in the column qualifier. A column qualifier is judged to be a    * regex if it contains at least one of the following characters:    *<code>\+|^&*$[]]}{)(</code>.    * @param startRow starting row in table to scan    * @return scanner    * @throws IOException    */
specifier|public
name|Scanner
name|getScanner
parameter_list|(
specifier|final
name|TransactionState
name|transactionState
parameter_list|,
specifier|final
name|byte
index|[]
index|[]
name|columns
parameter_list|,
specifier|final
name|byte
index|[]
name|startRow
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getScanner
argument_list|(
name|transactionState
argument_list|,
name|columns
argument_list|,
name|startRow
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Get a scanner on the current table starting at the specified row. Return    * the specified columns.    *     * @param transactionState    * @param columns columns to scan. If column name is a column family, all    * columns of the specified column family are returned. Its also possible to    * pass a regex in the column qualifier. A column qualifier is judged to be a    * regex if it contains at least one of the following characters:    *<code>\+|^&*$[]]}{)(</code>.    * @param startRow starting row in table to scan    * @param timestamp only return results whose timestamp<= this value    * @return scanner    * @throws IOException    */
specifier|public
name|Scanner
name|getScanner
parameter_list|(
specifier|final
name|TransactionState
name|transactionState
parameter_list|,
specifier|final
name|byte
index|[]
index|[]
name|columns
parameter_list|,
specifier|final
name|byte
index|[]
name|startRow
parameter_list|,
specifier|final
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getScanner
argument_list|(
name|transactionState
argument_list|,
name|columns
argument_list|,
name|startRow
argument_list|,
name|timestamp
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Get a scanner on the current table starting at the specified row. Return    * the specified columns.    *     * @param transactionState    * @param columns columns to scan. If column name is a column family, all    * columns of the specified column family are returned. Its also possible to    * pass a regex in the column qualifier. A column qualifier is judged to be a    * regex if it contains at least one of the following characters:    *<code>\+|^&*$[]]}{)(</code>.    * @param startRow starting row in table to scan    * @param filter a row filter using row-key regexp and/or column data filter.    * @return scanner    * @throws IOException    */
specifier|public
name|Scanner
name|getScanner
parameter_list|(
specifier|final
name|TransactionState
name|transactionState
parameter_list|,
specifier|final
name|byte
index|[]
index|[]
name|columns
parameter_list|,
specifier|final
name|byte
index|[]
name|startRow
parameter_list|,
specifier|final
name|RowFilterInterface
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getScanner
argument_list|(
name|transactionState
argument_list|,
name|columns
argument_list|,
name|startRow
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|filter
argument_list|)
return|;
block|}
comment|/**    * Get a scanner on the current table starting at the specified row. Return    * the specified columns.    *     * @param transactionState    * @param columns columns to scan. If column name is a column family, all    * columns of the specified column family are returned. Its also possible to    * pass a regex in the column qualifier. A column qualifier is judged to be a    * regex if it contains at least one of the following characters:    *<code>\+|^&*$[]]}{)(</code>.    * @param startRow starting row in table to scan    * @param timestamp only return results whose timestamp<= this value    * @param filter a row filter using row-key regexp and/or column data filter.    * @return scanner    * @throws IOException    */
specifier|public
name|Scanner
name|getScanner
parameter_list|(
specifier|final
name|TransactionState
name|transactionState
parameter_list|,
specifier|final
name|byte
index|[]
index|[]
name|columns
parameter_list|,
specifier|final
name|byte
index|[]
name|startRow
parameter_list|,
specifier|final
name|long
name|timestamp
parameter_list|,
specifier|final
name|RowFilterInterface
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
name|ClientScanner
name|scanner
init|=
operator|new
name|TransactionalClientScanner
argument_list|(
name|transactionState
argument_list|,
name|columns
argument_list|,
name|startRow
argument_list|,
name|timestamp
argument_list|,
name|filter
argument_list|)
decl_stmt|;
name|scanner
operator|.
name|initialize
argument_list|()
expr_stmt|;
return|return
name|scanner
return|;
block|}
comment|/**    * Commit a BatchUpdate to the table.    *     * @param transactionState    * @param batchUpdate    * @throws IOException    */
specifier|public
specifier|synchronized
name|void
name|commit
parameter_list|(
specifier|final
name|TransactionState
name|transactionState
parameter_list|,
specifier|final
name|BatchUpdate
name|batchUpdate
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionServerWithRetries
argument_list|(
operator|new
name|TransactionalServerCallable
argument_list|<
name|Boolean
argument_list|>
argument_list|(
name|super
operator|.
name|getConnection
argument_list|()
argument_list|,
name|super
operator|.
name|getTableName
argument_list|()
argument_list|,
name|batchUpdate
operator|.
name|getRow
argument_list|()
argument_list|,
name|transactionState
argument_list|)
block|{
specifier|public
name|Boolean
name|call
parameter_list|()
throws|throws
name|IOException
block|{
name|recordServer
argument_list|()
expr_stmt|;
name|getTransactionServer
argument_list|()
operator|.
name|batchUpdate
argument_list|(
name|transactionState
operator|.
name|getTransactionId
argument_list|()
argument_list|,
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|batchUpdate
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|protected
class|class
name|TransactionalClientScanner
extends|extends
name|HTable
operator|.
name|ClientScanner
block|{
specifier|private
name|TransactionState
name|transactionState
decl_stmt|;
specifier|protected
name|TransactionalClientScanner
parameter_list|(
specifier|final
name|TransactionState
name|transactionState
parameter_list|,
specifier|final
name|byte
index|[]
index|[]
name|columns
parameter_list|,
specifier|final
name|byte
index|[]
name|startRow
parameter_list|,
specifier|final
name|long
name|timestamp
parameter_list|,
specifier|final
name|RowFilterInterface
name|filter
parameter_list|)
block|{
name|super
argument_list|(
name|columns
argument_list|,
name|startRow
argument_list|,
name|timestamp
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|this
operator|.
name|transactionState
operator|=
name|transactionState
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|ScannerCallable
name|getScannerCallable
parameter_list|(
specifier|final
name|byte
index|[]
name|localStartKey
parameter_list|,
name|int
name|caching
parameter_list|)
block|{
name|TransactionScannerCallable
name|t
init|=
operator|new
name|TransactionScannerCallable
argument_list|(
name|transactionState
argument_list|,
name|getConnection
argument_list|()
argument_list|,
name|getTableName
argument_list|()
argument_list|,
name|getColumns
argument_list|()
argument_list|,
name|localStartKey
argument_list|,
name|getTimestamp
argument_list|()
argument_list|,
name|getFilter
argument_list|()
argument_list|)
decl_stmt|;
name|t
operator|.
name|setCaching
argument_list|(
name|caching
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
block|}
block|}
end_class

end_unit

