begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2009 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NotServingRegionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|UnknownScannerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|MetaScanner
operator|.
name|MetaScannerVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Writables
import|;
end_import

begin_comment
comment|/**  * Used to communicate with a single HBase table.  *<p>  * This class is not thread safe for writes.  * Gets, puts, and deletes take out a row lock for the duration  * of their operation.  Scans (currently) do not respect  * row locking.  */
end_comment

begin_class
specifier|public
class|class
name|HTable
implements|implements
name|HTableInterface
block|{
specifier|private
specifier|final
name|HConnection
name|connection
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|tableName
decl_stmt|;
specifier|protected
specifier|final
name|int
name|scannerTimeout
decl_stmt|;
specifier|private
specifier|volatile
name|Configuration
name|configuration
decl_stmt|;
specifier|private
specifier|final
name|ArrayList
argument_list|<
name|Put
argument_list|>
name|writeBuffer
init|=
operator|new
name|ArrayList
argument_list|<
name|Put
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|long
name|writeBufferSize
decl_stmt|;
specifier|private
name|boolean
name|autoFlush
decl_stmt|;
specifier|private
name|long
name|currentWriteBufferSize
decl_stmt|;
specifier|protected
name|int
name|scannerCaching
decl_stmt|;
specifier|private
name|int
name|maxKeyValueSize
decl_stmt|;
specifier|private
name|long
name|maxScannerResultSize
decl_stmt|;
comment|/**    * Creates an object to access a HBase table    *    * @param tableName name of the table    * @throws IOException    */
specifier|public
name|HTable
parameter_list|(
specifier|final
name|String
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|HBaseConfiguration
operator|.
name|create
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates an object to access a HBase table    *    * @param tableName name of the table    * @throws IOException    */
specifier|public
name|HTable
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|HBaseConfiguration
operator|.
name|create
argument_list|()
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates an object to access a HBase table    *    * @param conf configuration object    * @param tableName name of the table    * @throws IOException    */
specifier|public
name|HTable
parameter_list|(
name|Configuration
name|conf
parameter_list|,
specifier|final
name|String
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|conf
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates an object to access a HBase table.    *    * @param conf configuration object    * @param tableName name of the table    * @throws IOException    */
specifier|public
name|HTable
parameter_list|(
name|Configuration
name|conf
parameter_list|,
specifier|final
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|scannerTimeout
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|connection
operator|=
literal|null
expr_stmt|;
return|return;
block|}
name|this
operator|.
name|connection
operator|=
name|HConnectionManager
operator|.
name|getConnection
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|scannerTimeout
operator|=
operator|(
name|int
operator|)
name|conf
operator|.
name|getLong
argument_list|(
name|HConstants
operator|.
name|HBASE_REGIONSERVER_LEASE_PERIOD_KEY
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_REGIONSERVER_LEASE_PERIOD
argument_list|)
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|connection
operator|.
name|locateRegion
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
expr_stmt|;
name|this
operator|.
name|writeBufferSize
operator|=
name|conf
operator|.
name|getLong
argument_list|(
literal|"hbase.client.write.buffer"
argument_list|,
literal|2097152
argument_list|)
expr_stmt|;
name|this
operator|.
name|autoFlush
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|currentWriteBufferSize
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|scannerCaching
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.client.scanner.caching"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxScannerResultSize
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_SCANNER_MAX_RESULT_SIZE_KEY
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_CLIENT_SCANNER_MAX_RESULT_SIZE
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxKeyValueSize
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.client.keyvalue.maxsize"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|int
name|nrHRS
init|=
name|getCurrentNrHRS
argument_list|()
decl_stmt|;
name|int
name|nrThreads
init|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.htable.threads.max"
argument_list|,
name|nrHRS
argument_list|)
decl_stmt|;
comment|// Unfortunately Executors.newCachedThreadPool does not allow us to
comment|// set the maximum size of the pool, so we have to do it ourselves.
name|this
operator|.
name|pool
operator|=
operator|new
name|ThreadPoolExecutor
argument_list|(
literal|0
argument_list|,
name|nrThreads
argument_list|,
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|LinkedBlockingQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
argument_list|,
operator|new
name|DaemonThreadFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * TODO Might want to change this to public, would be nice if the number    * of threads would automatically change when servers were added and removed    * @return the number of region servers that are currently running    * @throws IOException    */
specifier|private
name|int
name|getCurrentNrHRS
parameter_list|()
throws|throws
name|IOException
block|{
name|HBaseAdmin
name|admin
init|=
operator|new
name|HBaseAdmin
argument_list|(
name|this
operator|.
name|configuration
argument_list|)
decl_stmt|;
return|return
name|admin
operator|.
name|getClusterStatus
argument_list|()
operator|.
name|getServers
argument_list|()
return|;
block|}
comment|// For multiput
specifier|private
name|ExecutorService
name|pool
decl_stmt|;
comment|/**    * @param tableName name of table to check    * @return true if table is on-line    * @throws IOException    */
specifier|public
specifier|static
name|boolean
name|isTableEnabled
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|isTableEnabled
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|tableName
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * @param tableName name of table to check    * @return true if table is on-line    * @throws IOException    */
specifier|public
specifier|static
name|boolean
name|isTableEnabled
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|isTableEnabled
argument_list|(
name|HBaseConfiguration
operator|.
name|create
argument_list|()
argument_list|,
name|tableName
argument_list|)
return|;
block|}
comment|/**    * @param conf HBaseConfiguration object    * @param tableName name of table to check    * @return true if table is on-line    * @throws IOException    */
specifier|public
specifier|static
name|boolean
name|isTableEnabled
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|isTableEnabled
argument_list|(
name|conf
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|tableName
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * @param conf HBaseConfiguration object    * @param tableName name of table to check    * @return true if table is on-line    * @throws IOException    */
specifier|public
specifier|static
name|boolean
name|isTableEnabled
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|HConnectionManager
operator|.
name|getConnection
argument_list|(
name|conf
argument_list|)
operator|.
name|isTableEnabled
argument_list|(
name|tableName
argument_list|)
return|;
block|}
comment|/**    * Find region location hosting passed row using cached info    * @param row Row to find.    * @return Location of row.    * @throws IOException    */
specifier|public
name|HRegionLocation
name|getRegionLocation
parameter_list|(
specifier|final
name|String
name|row
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|connection
operator|.
name|getRegionLocation
argument_list|(
name|tableName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row
argument_list|)
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Find region location hosting passed row using cached info    * @param row Row to find.    * @return Location of row.    * @throws IOException    */
specifier|public
name|HRegionLocation
name|getRegionLocation
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|connection
operator|.
name|getRegionLocation
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/** @return the table name */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
return|;
block|}
comment|/**    * Used by unit tests and tools to do low-level manipulations.  Not for    * general use.    * @return An HConnection instance.    */
specifier|public
name|HConnection
name|getConnection
parameter_list|()
block|{
return|return
name|this
operator|.
name|connection
return|;
block|}
comment|/**    * Get the number of rows for caching that will be passed to scanners    * @return the number of rows for caching    */
specifier|public
name|int
name|getScannerCaching
parameter_list|()
block|{
return|return
name|scannerCaching
return|;
block|}
comment|/**    * Set the number of rows for caching that will be passed to scanners    * @param scannerCaching the number of rows for caching    */
specifier|public
name|void
name|setScannerCaching
parameter_list|(
name|int
name|scannerCaching
parameter_list|)
block|{
name|this
operator|.
name|scannerCaching
operator|=
name|scannerCaching
expr_stmt|;
block|}
comment|/**    * @return table metadata    * @throws IOException    */
specifier|public
name|HTableDescriptor
name|getTableDescriptor
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|UnmodifyableHTableDescriptor
argument_list|(
name|this
operator|.
name|connection
operator|.
name|getHTableDescriptor
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Gets the starting row key for every region in the currently open table    *    * @return Array of region starting row keys    * @throws IOException    */
specifier|public
name|byte
index|[]
index|[]
name|getStartKeys
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getStartEndKeys
argument_list|()
operator|.
name|getFirst
argument_list|()
return|;
block|}
comment|/**    * Gets the ending row key for every region in the currently open table    *    * @return Array of region ending row keys    * @throws IOException    */
specifier|public
name|byte
index|[]
index|[]
name|getEndKeys
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getStartEndKeys
argument_list|()
operator|.
name|getSecond
argument_list|()
return|;
block|}
comment|/**    * Gets the starting and ending row keys for every region in the currently    * open table    *    * @return Pair of arrays of region starting and ending row keys    * @throws IOException    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|Pair
argument_list|<
name|byte
index|[]
index|[]
argument_list|,
name|byte
index|[]
index|[]
argument_list|>
name|getStartEndKeys
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|startKeyList
init|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|endKeyList
init|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|MetaScannerVisitor
name|visitor
init|=
operator|new
name|MetaScannerVisitor
argument_list|()
block|{
specifier|public
name|boolean
name|processRow
parameter_list|(
name|Result
name|rowResult
parameter_list|)
throws|throws
name|IOException
block|{
name|HRegionInfo
name|info
init|=
name|Writables
operator|.
name|getHRegionInfo
argument_list|(
name|rowResult
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|REGIONINFO_QUALIFIER
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|info
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|getTableName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|info
operator|.
name|isOffline
argument_list|()
operator|||
name|info
operator|.
name|isSplit
argument_list|()
operator|)
condition|)
block|{
name|startKeyList
operator|.
name|add
argument_list|(
name|info
operator|.
name|getStartKey
argument_list|()
argument_list|)
expr_stmt|;
name|endKeyList
operator|.
name|add
argument_list|(
name|info
operator|.
name|getEndKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|MetaScanner
operator|.
name|metaScan
argument_list|(
name|configuration
argument_list|,
name|visitor
argument_list|,
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
return|return
operator|new
name|Pair
argument_list|(
name|startKeyList
operator|.
name|toArray
argument_list|(
operator|new
name|byte
index|[
name|startKeyList
operator|.
name|size
argument_list|()
index|]
index|[]
argument_list|)
argument_list|,
name|endKeyList
operator|.
name|toArray
argument_list|(
operator|new
name|byte
index|[
name|endKeyList
operator|.
name|size
argument_list|()
index|]
index|[]
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Get all the regions and their address for this table    *    * @return A map of HRegionInfo with it's server address    * @throws IOException    */
specifier|public
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
name|getRegionsInfo
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
name|regionMap
init|=
operator|new
name|TreeMap
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
argument_list|()
decl_stmt|;
name|MetaScannerVisitor
name|visitor
init|=
operator|new
name|MetaScannerVisitor
argument_list|()
block|{
specifier|public
name|boolean
name|processRow
parameter_list|(
name|Result
name|rowResult
parameter_list|)
throws|throws
name|IOException
block|{
name|HRegionInfo
name|info
init|=
name|Writables
operator|.
name|getHRegionInfo
argument_list|(
name|rowResult
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|REGIONINFO_QUALIFIER
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|Bytes
operator|.
name|equals
argument_list|(
name|info
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|getTableName
argument_list|()
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|HServerAddress
name|server
init|=
operator|new
name|HServerAddress
argument_list|()
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|rowResult
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|SERVER_QUALIFIER
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|value
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|String
name|address
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|server
operator|=
operator|new
name|HServerAddress
argument_list|(
name|address
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|info
operator|.
name|isOffline
argument_list|()
operator|||
name|info
operator|.
name|isSplit
argument_list|()
operator|)
condition|)
block|{
name|regionMap
operator|.
name|put
argument_list|(
operator|new
name|UnmodifyableHRegionInfo
argument_list|(
name|info
argument_list|)
argument_list|,
name|server
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|MetaScanner
operator|.
name|metaScan
argument_list|(
name|configuration
argument_list|,
name|visitor
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
return|return
name|regionMap
return|;
block|}
comment|/**    * Return the row that matches<i>row</i> exactly,    * or the one that immediately preceeds it.    *    * @param row row key    * @param family Column family to look for row in.    * @return map of values    * @throws IOException    * @since 0.20.0     */
specifier|public
name|Result
name|getRowOrBefore
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|connection
operator|.
name|getRegionServerWithRetries
argument_list|(
operator|new
name|ServerCallable
argument_list|<
name|Result
argument_list|>
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
name|row
argument_list|)
block|{
specifier|public
name|Result
name|call
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|server
operator|.
name|getClosestRowBefore
argument_list|(
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|row
argument_list|,
name|family
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * Get a scanner on the current table as specified by the {@link Scan} object    *    * @param scan a configured {@link Scan} object    * @return scanner    * @throws IOException    * @since 0.20.0    */
specifier|public
name|ResultScanner
name|getScanner
parameter_list|(
specifier|final
name|Scan
name|scan
parameter_list|)
throws|throws
name|IOException
block|{
name|ClientScanner
name|s
init|=
operator|new
name|ClientScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|s
operator|.
name|initialize
argument_list|()
expr_stmt|;
return|return
name|s
return|;
block|}
comment|/**    * Get a scanner on the current table as specified by the {@link Scan} object    *    * @param family  The column family to scan.    * @return The scanner.    * @throws IOException    * @since 0.20.0    */
specifier|public
name|ResultScanner
name|getScanner
parameter_list|(
name|byte
index|[]
name|family
parameter_list|)
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
return|return
name|getScanner
argument_list|(
name|scan
argument_list|)
return|;
block|}
comment|/**    * Get a scanner on the current table as specified by the {@link Scan} object    *    * @param family  The column family to scan.    * @param qualifier  The column qualifier to scan.    * @return The scanner.    * @throws IOException    * @since 0.20.0    */
specifier|public
name|ResultScanner
name|getScanner
parameter_list|(
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|)
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
return|return
name|getScanner
argument_list|(
name|scan
argument_list|)
return|;
block|}
comment|/**    * Method for getting data from a row    * @param get the Get to fetch    * @return the result    * @throws IOException    * @since 0.20.0    */
specifier|public
name|Result
name|get
parameter_list|(
specifier|final
name|Get
name|get
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|connection
operator|.
name|getRegionServerWithRetries
argument_list|(
operator|new
name|ServerCallable
argument_list|<
name|Result
argument_list|>
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
name|get
operator|.
name|getRow
argument_list|()
argument_list|)
block|{
specifier|public
name|Result
name|call
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|server
operator|.
name|get
argument_list|(
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|get
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    *    * @param delete    * @throws IOException    * @since 0.20.0    */
specifier|public
name|void
name|delete
parameter_list|(
specifier|final
name|Delete
name|delete
parameter_list|)
throws|throws
name|IOException
block|{
name|connection
operator|.
name|getRegionServerWithRetries
argument_list|(
operator|new
name|ServerCallable
argument_list|<
name|Boolean
argument_list|>
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
name|delete
operator|.
name|getRow
argument_list|()
argument_list|)
block|{
specifier|public
name|Boolean
name|call
parameter_list|()
throws|throws
name|IOException
block|{
name|server
operator|.
name|delete
argument_list|(
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|delete
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
comment|// FindBugs NP_BOOLEAN_RETURN_NULL
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Bulk commit a List of Deletes to the table.    * @param deletes List of deletes.  List is modified by this method.  On    * exception holds deletes that were NOT applied.    * @throws IOException    * @since 0.20.1    */
specifier|public
specifier|synchronized
name|void
name|delete
parameter_list|(
specifier|final
name|List
argument_list|<
name|Delete
argument_list|>
name|deletes
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|last
init|=
literal|0
decl_stmt|;
try|try
block|{
name|last
operator|=
name|connection
operator|.
name|processBatchOfDeletes
argument_list|(
name|deletes
argument_list|,
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|deletes
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|last
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Commit a Put to the table.    *<p>    * If autoFlush is false, the update is buffered.    * @param put    * @throws IOException    * @since 0.20.0    */
specifier|public
specifier|synchronized
name|void
name|put
parameter_list|(
specifier|final
name|Put
name|put
parameter_list|)
throws|throws
name|IOException
block|{
name|doPut
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|put
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Commit a List of Puts to the table.    *<p>    * If autoFlush is false, the update is buffered.    * @param puts    * @throws IOException    * @since 0.20.0    */
specifier|public
specifier|synchronized
name|void
name|put
parameter_list|(
specifier|final
name|List
argument_list|<
name|Put
argument_list|>
name|puts
parameter_list|)
throws|throws
name|IOException
block|{
name|doPut
argument_list|(
name|puts
argument_list|)
expr_stmt|;
block|}
comment|/**    * Internal helper method.     * Need to synchronize this instance to prevent race conditions on the internal     * data structures.    *<p>    * If autoFlush is false, the update is buffered.    * @param puts    * @throws IOException    */
specifier|private
name|void
name|doPut
parameter_list|(
specifier|final
name|List
argument_list|<
name|Put
argument_list|>
name|puts
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Put
name|put
range|:
name|puts
control|)
block|{
name|validatePut
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|writeBuffer
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|currentWriteBufferSize
operator|+=
name|put
operator|.
name|heapSize
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|autoFlush
operator|||
name|currentWriteBufferSize
operator|>
name|writeBufferSize
condition|)
block|{
name|flushCommits
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Atomically increments a column value. If the column value already exists    * and is not a big-endian long, this could throw an exception.<p>    *    * @param row    * @param family    * @param qualifier    * @param amount    * @return The new value.    * @throws IOException    */
specifier|public
name|long
name|incrementColumnValue
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|byte
index|[]
name|qualifier
parameter_list|,
specifier|final
name|long
name|amount
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|incrementColumnValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|amount
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * Atomically increments a column value. If the column value already exists    * and is not a big-endian long, this could throw an exception.<p>    *    * Setting writeToWAL to false means that in a fail scenario, you will lose    * any increments that have not been flushed.    * @param row    * @param family    * @param qualifier    * @param amount    * @param writeToWAL true if increment should be applied to WAL, false if not    * @return The new value.    * @throws IOException    */
specifier|public
name|long
name|incrementColumnValue
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|byte
index|[]
name|qualifier
parameter_list|,
specifier|final
name|long
name|amount
parameter_list|,
specifier|final
name|boolean
name|writeToWAL
parameter_list|)
throws|throws
name|IOException
block|{
name|NullPointerException
name|npe
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|row
operator|==
literal|null
condition|)
block|{
name|npe
operator|=
operator|new
name|NullPointerException
argument_list|(
literal|"row is null"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|family
operator|==
literal|null
condition|)
block|{
name|npe
operator|=
operator|new
name|NullPointerException
argument_list|(
literal|"column is null"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|npe
operator|!=
literal|null
condition|)
block|{
name|IOException
name|io
init|=
operator|new
name|IOException
argument_list|(
literal|"Invalid arguments to incrementColumnValue"
argument_list|,
name|npe
argument_list|)
decl_stmt|;
throw|throw
name|io
throw|;
block|}
return|return
name|connection
operator|.
name|getRegionServerWithRetries
argument_list|(
operator|new
name|ServerCallable
argument_list|<
name|Long
argument_list|>
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
name|row
argument_list|)
block|{
specifier|public
name|Long
name|call
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|server
operator|.
name|incrementColumnValue
argument_list|(
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|amount
argument_list|,
name|writeToWAL
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * Atomically checks if a row/family/qualifier value match the expectedValue.    * If it does, it adds the put.    *    * @param row    * @param family    * @param qualifier    * @param value the expected value    * @param put    * @throws IOException    * @return true if the new put was execute, false otherwise    */
specifier|public
specifier|synchronized
name|boolean
name|checkAndPut
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|byte
index|[]
name|qualifier
parameter_list|,
specifier|final
name|byte
index|[]
name|value
parameter_list|,
specifier|final
name|Put
name|put
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|connection
operator|.
name|getRegionServerWithRetries
argument_list|(
operator|new
name|ServerCallable
argument_list|<
name|Boolean
argument_list|>
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
name|row
argument_list|)
block|{
specifier|public
name|Boolean
name|call
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|server
operator|.
name|checkAndPut
argument_list|(
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|value
argument_list|,
name|put
argument_list|)
condition|?
name|Boolean
operator|.
name|TRUE
else|:
name|Boolean
operator|.
name|FALSE
return|;
block|}
block|}
argument_list|)
operator|.
name|booleanValue
argument_list|()
return|;
block|}
comment|/**    * Test for the existence of columns in the table, as specified in the Get.<p>    *    * This will return true if the Get matches one or more keys, false if not.<p>    *    * This is a server-side call so it prevents any data from being transfered    * to the client.    * @param get    * @return true if the specified Get matches one or more keys, false if not    * @throws IOException    */
specifier|public
name|boolean
name|exists
parameter_list|(
specifier|final
name|Get
name|get
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|connection
operator|.
name|getRegionServerWithRetries
argument_list|(
operator|new
name|ServerCallable
argument_list|<
name|Boolean
argument_list|>
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
name|get
operator|.
name|getRow
argument_list|()
argument_list|)
block|{
specifier|public
name|Boolean
name|call
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|Boolean
operator|.
name|valueOf
argument_list|(
name|server
operator|.
name|exists
argument_list|(
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|get
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|booleanValue
argument_list|()
return|;
block|}
comment|/**    * Commit to the table the buffer of BatchUpdate.    * Called automatically in the commit methods when autoFlush is true.    * @throws IOException    */
specifier|public
name|void
name|flushCommits
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|connection
operator|.
name|processBatchOfPuts
argument_list|(
name|writeBuffer
argument_list|,
name|tableName
argument_list|,
name|pool
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// the write buffer was adjsuted by processBatchOfPuts
name|currentWriteBufferSize
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|writeBuffer
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|currentWriteBufferSize
operator|+=
name|writeBuffer
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|heapSize
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Release held resources    *    * @throws IOException   */
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|flushCommits
argument_list|()
expr_stmt|;
block|}
comment|/**    * Utility method that verifies Put is well formed.    *    * @param put    * @throws IllegalArgumentException    */
specifier|private
name|void
name|validatePut
parameter_list|(
specifier|final
name|Put
name|put
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|put
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No columns to insert"
argument_list|)
throw|;
block|}
if|if
condition|(
name|maxKeyValueSize
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|List
argument_list|<
name|KeyValue
argument_list|>
name|list
range|:
name|put
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|KeyValue
name|kv
range|:
name|list
control|)
block|{
if|if
condition|(
name|kv
operator|.
name|getLength
argument_list|()
operator|>
name|maxKeyValueSize
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"KeyValue size too large"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
comment|/**    * Obtain a row lock    * @param row The row to lock    * @return rowLock RowLock containing row and lock id    * @throws IOException    */
specifier|public
name|RowLock
name|lockRow
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|connection
operator|.
name|getRegionServerWithRetries
argument_list|(
operator|new
name|ServerCallable
argument_list|<
name|RowLock
argument_list|>
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
name|row
argument_list|)
block|{
specifier|public
name|RowLock
name|call
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|lockId
init|=
name|server
operator|.
name|lockRow
argument_list|(
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|row
argument_list|)
decl_stmt|;
name|RowLock
name|rowLock
init|=
operator|new
name|RowLock
argument_list|(
name|row
argument_list|,
name|lockId
argument_list|)
decl_stmt|;
return|return
name|rowLock
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * Release a row lock    * @param rl The row lock to release    * @throws IOException    */
specifier|public
name|void
name|unlockRow
parameter_list|(
specifier|final
name|RowLock
name|rl
parameter_list|)
throws|throws
name|IOException
block|{
name|connection
operator|.
name|getRegionServerWithRetries
argument_list|(
operator|new
name|ServerCallable
argument_list|<
name|Boolean
argument_list|>
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
name|rl
operator|.
name|getRow
argument_list|()
argument_list|)
block|{
specifier|public
name|Boolean
name|call
parameter_list|()
throws|throws
name|IOException
block|{
name|server
operator|.
name|unlockRow
argument_list|(
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|rl
operator|.
name|getLockId
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
comment|// FindBugs NP_BOOLEAN_RETURN_NULL
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the value of autoFlush. If true, updates will not be buffered    * @return value of autoFlush    */
specifier|public
name|boolean
name|isAutoFlush
parameter_list|()
block|{
return|return
name|autoFlush
return|;
block|}
comment|/**    * Set if this instanciation of HTable will autoFlush    * @param autoFlush    */
specifier|public
name|void
name|setAutoFlush
parameter_list|(
name|boolean
name|autoFlush
parameter_list|)
block|{
name|this
operator|.
name|autoFlush
operator|=
name|autoFlush
expr_stmt|;
block|}
comment|/**    * Get the maximum size in bytes of the write buffer for this HTable    * @return the size of the write buffer in bytes    */
specifier|public
name|long
name|getWriteBufferSize
parameter_list|()
block|{
return|return
name|writeBufferSize
return|;
block|}
comment|/**    * Set the size of the buffer in bytes.    * If the new size is lower than the current size of data in the    * write buffer, the buffer is flushed.    * @param writeBufferSize    * @throws IOException    */
specifier|public
name|void
name|setWriteBufferSize
parameter_list|(
name|long
name|writeBufferSize
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|writeBufferSize
operator|=
name|writeBufferSize
expr_stmt|;
if|if
condition|(
name|currentWriteBufferSize
operator|>
name|writeBufferSize
condition|)
block|{
name|flushCommits
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Get the write buffer    * @return the current write buffer    */
specifier|public
name|ArrayList
argument_list|<
name|Put
argument_list|>
name|getWriteBuffer
parameter_list|()
block|{
return|return
name|writeBuffer
return|;
block|}
comment|/**    * Implements the scanner interface for the HBase client.    * If there are multiple regions in a table, this scanner will iterate    * through them all.    */
specifier|protected
class|class
name|ClientScanner
implements|implements
name|ResultScanner
block|{
specifier|private
specifier|final
name|Log
name|CLIENT_LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
comment|// HEADSUP: The scan internal start row can change as we move through table.
specifier|private
name|Scan
name|scan
decl_stmt|;
specifier|private
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
comment|// Current region scanner is against.  Gets cleared if current region goes
comment|// wonky: e.g. if it splits on us.
specifier|private
name|HRegionInfo
name|currentRegion
init|=
literal|null
decl_stmt|;
specifier|private
name|ScannerCallable
name|callable
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|LinkedList
argument_list|<
name|Result
argument_list|>
name|cache
init|=
operator|new
name|LinkedList
argument_list|<
name|Result
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|int
name|caching
decl_stmt|;
specifier|private
name|long
name|lastNext
decl_stmt|;
comment|// Keep lastResult returned successfully in case we have to reset scanner.
specifier|private
name|Result
name|lastResult
init|=
literal|null
decl_stmt|;
specifier|protected
name|ClientScanner
parameter_list|(
specifier|final
name|Scan
name|scan
parameter_list|)
block|{
if|if
condition|(
name|CLIENT_LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|CLIENT_LOG
operator|.
name|debug
argument_list|(
literal|"Creating scanner over "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|getTableName
argument_list|()
argument_list|)
operator|+
literal|" starting at key '"
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|scan
operator|.
name|getStartRow
argument_list|()
argument_list|)
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|scan
operator|=
name|scan
expr_stmt|;
name|this
operator|.
name|lastNext
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
comment|// Use the caching from the Scan.  If not set, use the default cache setting for this table.
if|if
condition|(
name|this
operator|.
name|scan
operator|.
name|getCaching
argument_list|()
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|caching
operator|=
name|this
operator|.
name|scan
operator|.
name|getCaching
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|caching
operator|=
name|HTable
operator|.
name|this
operator|.
name|scannerCaching
expr_stmt|;
block|}
comment|// Removed filter validation.  We have a new format now, only one of all
comment|// the current filters has a validate() method.  We can add it back,
comment|// need to decide on what we're going to do re: filter redesign.
comment|// Need, at the least, to break up family from qualifier as separate
comment|// checks, I think it's important server-side filters are optimal in that
comment|// respect.
block|}
specifier|public
name|void
name|initialize
parameter_list|()
throws|throws
name|IOException
block|{
name|nextScanner
argument_list|(
name|this
operator|.
name|caching
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Scan
name|getScan
parameter_list|()
block|{
return|return
name|scan
return|;
block|}
specifier|protected
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|lastNext
return|;
block|}
comment|/**      * @param endKey      * @return Returns true if the passed region endkey.      */
specifier|private
name|boolean
name|checkScanStopRow
parameter_list|(
specifier|final
name|byte
index|[]
name|endKey
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|scan
operator|.
name|getStopRow
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
comment|// there is a stop row, check to see if we are past it.
name|byte
index|[]
name|stopRow
init|=
name|scan
operator|.
name|getStopRow
argument_list|()
decl_stmt|;
name|int
name|cmp
init|=
name|Bytes
operator|.
name|compareTo
argument_list|(
name|stopRow
argument_list|,
literal|0
argument_list|,
name|stopRow
operator|.
name|length
argument_list|,
name|endKey
argument_list|,
literal|0
argument_list|,
name|endKey
operator|.
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|<=
literal|0
condition|)
block|{
comment|// stopRow<= endKey (endKey is equals to or larger than stopRow)
comment|// This is a stop.
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
comment|//unlikely.
block|}
comment|/*      * Gets a scanner for the next region.  If this.currentRegion != null, then      * we will move to the endrow of this.currentRegion.  Else we will get      * scanner at the scan.getStartRow().  We will go no further, just tidy      * up outstanding scanners, if<code>currentRegion != null</code> and      *<code>done</code> is true.      * @param nbRows      * @param done Server-side says we're done scanning.      */
specifier|private
name|boolean
name|nextScanner
parameter_list|(
name|int
name|nbRows
parameter_list|,
specifier|final
name|boolean
name|done
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Close the previous scanner if it's open
if|if
condition|(
name|this
operator|.
name|callable
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|callable
operator|.
name|setClose
argument_list|()
expr_stmt|;
name|getConnection
argument_list|()
operator|.
name|getRegionServerWithRetries
argument_list|(
name|callable
argument_list|)
expr_stmt|;
name|this
operator|.
name|callable
operator|=
literal|null
expr_stmt|;
block|}
comment|// Where to start the next scanner
name|byte
index|[]
name|localStartKey
init|=
literal|null
decl_stmt|;
comment|// if we're at end of table, close and return false to stop iterating
if|if
condition|(
name|this
operator|.
name|currentRegion
operator|!=
literal|null
condition|)
block|{
name|byte
index|[]
name|endKey
init|=
name|this
operator|.
name|currentRegion
operator|.
name|getEndKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|endKey
operator|==
literal|null
operator|||
name|Bytes
operator|.
name|equals
argument_list|(
name|endKey
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
operator|||
name|checkScanStopRow
argument_list|(
name|endKey
argument_list|)
operator|||
name|done
condition|)
block|{
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|CLIENT_LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|CLIENT_LOG
operator|.
name|debug
argument_list|(
literal|"Finished with scanning at "
operator|+
name|this
operator|.
name|currentRegion
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
name|localStartKey
operator|=
name|endKey
expr_stmt|;
if|if
condition|(
name|CLIENT_LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|CLIENT_LOG
operator|.
name|debug
argument_list|(
literal|"Finished with region "
operator|+
name|this
operator|.
name|currentRegion
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|localStartKey
operator|=
name|this
operator|.
name|scan
operator|.
name|getStartRow
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|CLIENT_LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|CLIENT_LOG
operator|.
name|debug
argument_list|(
literal|"Advancing internal scanner to startKey at '"
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|localStartKey
argument_list|)
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|callable
operator|=
name|getScannerCallable
argument_list|(
name|localStartKey
argument_list|,
name|nbRows
argument_list|)
expr_stmt|;
comment|// Open a scanner on the region server starting at the
comment|// beginning of the region
name|getConnection
argument_list|()
operator|.
name|getRegionServerWithRetries
argument_list|(
name|callable
argument_list|)
expr_stmt|;
name|this
operator|.
name|currentRegion
operator|=
name|callable
operator|.
name|getHRegionInfo
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|close
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
return|return
literal|true
return|;
block|}
specifier|protected
name|ScannerCallable
name|getScannerCallable
parameter_list|(
name|byte
index|[]
name|localStartKey
parameter_list|,
name|int
name|nbRows
parameter_list|)
block|{
name|scan
operator|.
name|setStartRow
argument_list|(
name|localStartKey
argument_list|)
expr_stmt|;
name|ScannerCallable
name|s
init|=
operator|new
name|ScannerCallable
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getTableName
argument_list|()
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|s
operator|.
name|setCaching
argument_list|(
name|nbRows
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
specifier|public
name|Result
name|next
parameter_list|()
throws|throws
name|IOException
block|{
comment|// If the scanner is closed but there is some rows left in the cache,
comment|// it will first empty it before returning null
if|if
condition|(
name|cache
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|&&
name|this
operator|.
name|closed
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|cache
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|Result
index|[]
name|values
init|=
literal|null
decl_stmt|;
name|long
name|remainingResultSize
init|=
name|maxScannerResultSize
decl_stmt|;
name|int
name|countdown
init|=
name|this
operator|.
name|caching
decl_stmt|;
comment|// We need to reset it if it's a new callable that was created
comment|// with a countdown in nextScanner
name|callable
operator|.
name|setCaching
argument_list|(
name|this
operator|.
name|caching
argument_list|)
expr_stmt|;
comment|// This flag is set when we want to skip the result returned.  We do
comment|// this when we reset scanner because it split under us.
name|boolean
name|skipFirst
init|=
literal|false
decl_stmt|;
do|do
block|{
try|try
block|{
comment|// Server returns a null values if scanning is to stop.  Else,
comment|// returns an empty array if scanning is to go on and we've just
comment|// exhausted current region.
name|values
operator|=
name|getConnection
argument_list|()
operator|.
name|getRegionServerWithRetries
argument_list|(
name|callable
argument_list|)
expr_stmt|;
if|if
condition|(
name|skipFirst
condition|)
block|{
name|skipFirst
operator|=
literal|false
expr_stmt|;
comment|// Reget.
name|values
operator|=
name|getConnection
argument_list|()
operator|.
name|getRegionServerWithRetries
argument_list|(
name|callable
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DoNotRetryIOException
name|e
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|==
literal|null
operator|||
operator|!
operator|(
name|cause
operator|instanceof
name|NotServingRegionException
operator|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
comment|// Else, its signal from depths of ScannerCallable that we got an
comment|// NSRE on a next and that we need to reset the scanner.
if|if
condition|(
name|this
operator|.
name|lastResult
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|scan
operator|.
name|setStartRow
argument_list|(
name|this
operator|.
name|lastResult
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
comment|// Skip first row returned.  We already let it out on previous
comment|// invocation.
name|skipFirst
operator|=
literal|true
expr_stmt|;
block|}
comment|// Clear region
name|this
operator|.
name|currentRegion
operator|=
literal|null
expr_stmt|;
continue|continue;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|UnknownScannerException
operator|&&
name|lastNext
operator|+
name|scannerTimeout
operator|<
name|System
operator|.
name|currentTimeMillis
argument_list|()
condition|)
block|{
name|ScannerTimeoutException
name|ex
init|=
operator|new
name|ScannerTimeoutException
argument_list|()
decl_stmt|;
name|ex
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
throw|throw
name|e
throw|;
block|}
name|lastNext
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
operator|&&
name|values
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Result
name|rs
range|:
name|values
control|)
block|{
name|cache
operator|.
name|add
argument_list|(
name|rs
argument_list|)
expr_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
name|rs
operator|.
name|raw
argument_list|()
control|)
block|{
name|remainingResultSize
operator|-=
name|kv
operator|.
name|heapSize
argument_list|()
expr_stmt|;
block|}
name|countdown
operator|--
expr_stmt|;
name|this
operator|.
name|lastResult
operator|=
name|rs
expr_stmt|;
block|}
block|}
comment|// Values == null means server-side filter has determined we must STOP
block|}
do|while
condition|(
name|remainingResultSize
operator|>
literal|0
operator|&&
name|countdown
operator|>
literal|0
operator|&&
name|nextScanner
argument_list|(
name|countdown
argument_list|,
name|values
operator|==
literal|null
argument_list|)
condition|)
do|;
block|}
if|if
condition|(
name|cache
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|cache
operator|.
name|poll
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Get<param>nbRows</param> rows.      * How many RPCs are made is determined by the {@link Scan#setCaching(int)}      * setting (or hbase.client.scanner.caching in hbase-site.xml).      * @param nbRows number of rows to return      * @return Between zero and<param>nbRows</param> RowResults.  Scan is done      * if returned array is of zero-length (We never return null).      * @throws IOException      */
specifier|public
name|Result
index|[]
name|next
parameter_list|(
name|int
name|nbRows
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Collect values to be returned here
name|ArrayList
argument_list|<
name|Result
argument_list|>
name|resultSets
init|=
operator|new
name|ArrayList
argument_list|<
name|Result
argument_list|>
argument_list|(
name|nbRows
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nbRows
condition|;
name|i
operator|++
control|)
block|{
name|Result
name|next
init|=
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
name|resultSets
operator|.
name|add
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
return|return
name|resultSets
operator|.
name|toArray
argument_list|(
operator|new
name|Result
index|[
name|resultSets
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|callable
operator|!=
literal|null
condition|)
block|{
name|callable
operator|.
name|setClose
argument_list|()
expr_stmt|;
try|try
block|{
name|getConnection
argument_list|()
operator|.
name|getRegionServerWithRetries
argument_list|(
name|callable
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// We used to catch this error, interpret, and rethrow. However, we
comment|// have since decided that it's not nice for a scanner's close to
comment|// throw exceptions. Chances are it was just an UnknownScanner
comment|// exception due to lease time out.
block|}
name|callable
operator|=
literal|null
expr_stmt|;
block|}
name|closed
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|Iterator
argument_list|<
name|Result
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|Result
argument_list|>
argument_list|()
block|{
comment|// The next RowResult, possibly pre-read
name|Result
name|next
init|=
literal|null
decl_stmt|;
comment|// return true if there is another item pending, false if there isn't.
comment|// this method is where the actual advancing takes place, but you need
comment|// to call next() to consume it. hasNext() will only advance if there
comment|// isn't a pending next().
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
name|next
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|next
operator|=
name|ClientScanner
operator|.
name|this
operator|.
name|next
argument_list|()
expr_stmt|;
return|return
name|next
operator|!=
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|// get the pending next item and advance the iterator. returns null if
comment|// there is no next item.
specifier|public
name|Result
name|next
parameter_list|()
block|{
comment|// since hasNext() does the real advancing, we call this to determine
comment|// if there is a next before proceeding.
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// if we get to here, then hasNext() has given us an item to return.
comment|// we want to return the item and then null out the next pointer, so
comment|// we use a temporary variable.
name|Result
name|temp
init|=
name|next
decl_stmt|;
name|next
operator|=
literal|null
expr_stmt|;
return|return
name|temp
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
block|}
specifier|static
class|class
name|DaemonThreadFactory
implements|implements
name|ThreadFactory
block|{
specifier|static
specifier|final
name|AtomicInteger
name|poolNumber
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|ThreadGroup
name|group
decl_stmt|;
specifier|final
name|AtomicInteger
name|threadNumber
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|String
name|namePrefix
decl_stmt|;
name|DaemonThreadFactory
parameter_list|()
block|{
name|SecurityManager
name|s
init|=
name|System
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
name|group
operator|=
operator|(
name|s
operator|!=
literal|null
operator|)
condition|?
name|s
operator|.
name|getThreadGroup
argument_list|()
else|:
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getThreadGroup
argument_list|()
expr_stmt|;
name|namePrefix
operator|=
literal|"pool-"
operator|+
name|poolNumber
operator|.
name|getAndIncrement
argument_list|()
operator|+
literal|"-thread-"
expr_stmt|;
block|}
specifier|public
name|Thread
name|newThread
parameter_list|(
name|Runnable
name|r
parameter_list|)
block|{
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
name|group
argument_list|,
name|r
argument_list|,
name|namePrefix
operator|+
name|threadNumber
operator|.
name|getAndIncrement
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|t
operator|.
name|isDaemon
argument_list|()
condition|)
name|t
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|getPriority
argument_list|()
operator|!=
name|Thread
operator|.
name|NORM_PRIORITY
condition|)
name|t
operator|.
name|setPriority
argument_list|(
name|Thread
operator|.
name|NORM_PRIORITY
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
block|}
block|}
end_class

end_unit

