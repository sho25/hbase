begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2008 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HStoreKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|UnknownScannerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|MetaScanner
operator|.
name|MetaScannerVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|RowFilterInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|StopRowFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|WhileMatchRowFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|BatchOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|BatchUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|RowResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|HbaseMapWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Writables
import|;
end_import

begin_comment
comment|/**  * Used to communicate with a single HBase table  */
end_comment

begin_class
specifier|public
class|class
name|HTable
block|{
specifier|private
specifier|final
name|HConnection
name|connection
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|tableName
decl_stmt|;
specifier|protected
specifier|final
name|int
name|scannerTimeout
decl_stmt|;
specifier|private
specifier|volatile
name|HBaseConfiguration
name|configuration
decl_stmt|;
specifier|private
name|ArrayList
argument_list|<
name|BatchUpdate
argument_list|>
name|writeBuffer
decl_stmt|;
specifier|private
name|long
name|writeBufferSize
decl_stmt|;
specifier|private
name|boolean
name|autoFlush
decl_stmt|;
specifier|private
name|long
name|currentWriteBufferSize
decl_stmt|;
specifier|protected
name|int
name|scannerCaching
decl_stmt|;
comment|/**    * Creates an object to access a HBase table    *    * @param tableName name of the table    * @throws IOException    */
specifier|public
name|HTable
parameter_list|(
specifier|final
name|String
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
operator|new
name|HBaseConfiguration
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates an object to access a HBase table    *    * @param tableName name of the table    * @throws IOException    */
specifier|public
name|HTable
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
operator|new
name|HBaseConfiguration
argument_list|()
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates an object to access a HBase table    *     * @param conf configuration object    * @param tableName name of the table    * @throws IOException    */
specifier|public
name|HTable
parameter_list|(
name|HBaseConfiguration
name|conf
parameter_list|,
specifier|final
name|String
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|conf
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates an object to access a HBase table    *     * @param conf configuration object    * @param tableName name of the table    * @throws IOException    */
specifier|public
name|HTable
parameter_list|(
name|HBaseConfiguration
name|conf
parameter_list|,
specifier|final
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|connection
operator|=
name|HConnectionManager
operator|.
name|getConnection
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|scannerTimeout
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.regionserver.lease.period"
argument_list|,
literal|60
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|connection
operator|.
name|locateRegion
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
expr_stmt|;
name|this
operator|.
name|writeBuffer
operator|=
operator|new
name|ArrayList
argument_list|<
name|BatchUpdate
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|writeBufferSize
operator|=
name|this
operator|.
name|configuration
operator|.
name|getLong
argument_list|(
literal|"hbase.client.write.buffer"
argument_list|,
literal|2097152
argument_list|)
expr_stmt|;
name|this
operator|.
name|autoFlush
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|currentWriteBufferSize
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|scannerCaching
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.client.scanner.caching"
argument_list|,
literal|30
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param tableName name of table to check    * @return true if table is on-line    * @throws IOException    */
specifier|public
specifier|static
name|boolean
name|isTableEnabled
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|isTableEnabled
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|tableName
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * @param tableName name of table to check    * @return true if table is on-line    * @throws IOException    */
specifier|public
specifier|static
name|boolean
name|isTableEnabled
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|isTableEnabled
argument_list|(
operator|new
name|HBaseConfiguration
argument_list|()
argument_list|,
name|tableName
argument_list|)
return|;
block|}
comment|/**    * @param conf HBaseConfiguration object    * @param tableName name of table to check    * @return true if table is on-line    * @throws IOException    */
specifier|public
specifier|static
name|boolean
name|isTableEnabled
parameter_list|(
name|HBaseConfiguration
name|conf
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|isTableEnabled
argument_list|(
name|conf
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|tableName
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * @param conf HBaseConfiguration object    * @param tableName name of table to check    * @return true if table is on-line    * @throws IOException    */
specifier|public
specifier|static
name|boolean
name|isTableEnabled
parameter_list|(
name|HBaseConfiguration
name|conf
parameter_list|,
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|HConnectionManager
operator|.
name|getConnection
argument_list|(
name|conf
argument_list|)
operator|.
name|isTableEnabled
argument_list|(
name|tableName
argument_list|)
return|;
block|}
comment|/**    * Find region location hosting passed row using cached info    * @param row Row to find.    * @return Location of row.    * @throws IOException    */
specifier|public
name|HRegionLocation
name|getRegionLocation
parameter_list|(
specifier|final
name|String
name|row
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|connection
operator|.
name|getRegionLocation
argument_list|(
name|tableName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row
argument_list|)
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Find region location hosting passed row using cached info    * @param row Row to find.    * @return Location of row.    * @throws IOException    */
specifier|public
name|HRegionLocation
name|getRegionLocation
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|connection
operator|.
name|getRegionLocation
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/** @return the table name */
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
return|;
block|}
comment|/**    * Used by unit tests and tools to do low-level manipulations.  Not for    * general use.    * @return An HConnection instance.    */
specifier|public
name|HConnection
name|getConnection
parameter_list|()
block|{
return|return
name|this
operator|.
name|connection
return|;
block|}
comment|/**    * Get the number of rows for caching that will be passed to scanners    * @return the number of rows for caching    */
specifier|public
name|int
name|getScannerCaching
parameter_list|()
block|{
return|return
name|scannerCaching
return|;
block|}
comment|/**    * Set the number of rows for caching that will be passed to scanners    * @param scannerCaching the number of rows for caching    */
specifier|public
name|void
name|setScannerCaching
parameter_list|(
name|int
name|scannerCaching
parameter_list|)
block|{
name|this
operator|.
name|scannerCaching
operator|=
name|scannerCaching
expr_stmt|;
block|}
comment|/**    * @return table metadata     * @throws IOException    */
specifier|public
name|HTableDescriptor
name|getTableDescriptor
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|UnmodifyableHTableDescriptor
argument_list|(
name|this
operator|.
name|connection
operator|.
name|getHTableDescriptor
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Gets the starting row key for every region in the currently open table    *     * @return Array of region starting row keys    * @throws IOException    */
specifier|public
name|byte
index|[]
index|[]
name|getStartKeys
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|keyList
init|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|MetaScannerVisitor
name|visitor
init|=
operator|new
name|MetaScannerVisitor
argument_list|()
block|{
specifier|public
name|boolean
name|processRow
parameter_list|(
name|RowResult
name|rowResult
parameter_list|)
throws|throws
name|IOException
block|{
name|HRegionInfo
name|info
init|=
name|Writables
operator|.
name|getHRegionInfo
argument_list|(
name|rowResult
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|COL_REGIONINFO
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|info
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|getTableName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|info
operator|.
name|isOffline
argument_list|()
operator|||
name|info
operator|.
name|isSplit
argument_list|()
operator|)
condition|)
block|{
name|keyList
operator|.
name|add
argument_list|(
name|info
operator|.
name|getStartKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|MetaScanner
operator|.
name|metaScan
argument_list|(
name|configuration
argument_list|,
name|visitor
argument_list|,
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
return|return
name|keyList
operator|.
name|toArray
argument_list|(
operator|new
name|byte
index|[
name|keyList
operator|.
name|size
argument_list|()
index|]
index|[]
argument_list|)
return|;
block|}
comment|/**    * Get all the regions and their address for this table    *     * @return A map of HRegionInfo with it's server address    * @throws IOException    */
specifier|public
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
name|getRegionsInfo
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
name|regionMap
init|=
operator|new
name|TreeMap
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
argument_list|()
decl_stmt|;
name|MetaScannerVisitor
name|visitor
init|=
operator|new
name|MetaScannerVisitor
argument_list|()
block|{
specifier|public
name|boolean
name|processRow
parameter_list|(
name|RowResult
name|rowResult
parameter_list|)
throws|throws
name|IOException
block|{
name|HRegionInfo
name|info
init|=
name|Writables
operator|.
name|getHRegionInfo
argument_list|(
name|rowResult
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|COL_REGIONINFO
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|Bytes
operator|.
name|equals
argument_list|(
name|info
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|getTableName
argument_list|()
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|HServerAddress
name|server
init|=
operator|new
name|HServerAddress
argument_list|()
decl_stmt|;
name|Cell
name|c
init|=
name|rowResult
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|COL_SERVER
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
operator|&&
name|c
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
operator|&&
name|c
operator|.
name|getValue
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|String
name|address
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|c
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|server
operator|=
operator|new
name|HServerAddress
argument_list|(
name|address
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|info
operator|.
name|isOffline
argument_list|()
operator|||
name|info
operator|.
name|isSplit
argument_list|()
operator|)
condition|)
block|{
name|regionMap
operator|.
name|put
argument_list|(
operator|new
name|UnmodifyableHRegionInfo
argument_list|(
name|info
argument_list|)
argument_list|,
name|server
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|MetaScanner
operator|.
name|metaScan
argument_list|(
name|configuration
argument_list|,
name|visitor
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
return|return
name|regionMap
return|;
block|}
comment|/**    * Get a single value for the specified row and column    *     * @param row row key    * @param column column name    * @return value for specified row/column    * @throws IOException    */
specifier|public
name|Cell
name|get
parameter_list|(
specifier|final
name|String
name|row
parameter_list|,
specifier|final
name|String
name|column
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|column
argument_list|)
argument_list|)
return|;
block|}
comment|/**     * Get a single value for the specified row and column    *    * @param row row key    * @param column column name    * @param numVersions - number of versions to retrieve    * @return value for specified row/column    * @throws IOException    */
specifier|public
name|Cell
index|[]
name|get
parameter_list|(
specifier|final
name|String
name|row
parameter_list|,
specifier|final
name|String
name|column
parameter_list|,
name|int
name|numVersions
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|column
argument_list|)
argument_list|,
name|numVersions
argument_list|)
return|;
block|}
comment|/**     * Get a single value for the specified row and column    *    * @param row row key    * @param column column name    * @return value for specified row/column    * @throws IOException    */
specifier|public
name|Cell
name|get
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|column
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|connection
operator|.
name|getRegionServerWithRetries
argument_list|(
operator|new
name|ServerCallable
argument_list|<
name|Cell
argument_list|>
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
name|row
argument_list|)
block|{
specifier|public
name|Cell
name|call
parameter_list|()
throws|throws
name|IOException
block|{
name|Cell
index|[]
name|result
init|=
name|server
operator|.
name|get
argument_list|(
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
return|return
operator|(
name|result
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|result
index|[
literal|0
index|]
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**     * Get the specified number of versions of the specified row and column    * @param row row key    * @param column column name    * @param numVersions number of versions to retrieve    * @return Array of Cells.    * @throws IOException    */
specifier|public
name|Cell
index|[]
name|get
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|column
parameter_list|,
specifier|final
name|int
name|numVersions
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|connection
operator|.
name|getRegionServerWithRetries
argument_list|(
operator|new
name|ServerCallable
argument_list|<
name|Cell
index|[]
argument_list|>
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
name|row
argument_list|)
block|{
specifier|public
name|Cell
index|[]
name|call
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|server
operator|.
name|get
argument_list|(
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
operator|-
literal|1
argument_list|,
name|numVersions
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**     * Get the specified number of versions of the specified row and column with    * the specified timestamp.    *    * @param row         - row key    * @param column      - column name    * @param timestamp   - timestamp    * @param numVersions - number of versions to retrieve    * @return            - array of values that match the above criteria    * @throws IOException    */
specifier|public
name|Cell
index|[]
name|get
parameter_list|(
specifier|final
name|String
name|row
parameter_list|,
specifier|final
name|String
name|column
parameter_list|,
specifier|final
name|long
name|timestamp
parameter_list|,
specifier|final
name|int
name|numVersions
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|column
argument_list|)
argument_list|,
name|timestamp
argument_list|,
name|numVersions
argument_list|)
return|;
block|}
comment|/**     * Get the specified number of versions of the specified row and column with    * the specified timestamp.    *    * @param row         - row key    * @param column      - column name    * @param timestamp   - timestamp    * @param numVersions - number of versions to retrieve    * @return            - array of values that match the above criteria    * @throws IOException    */
specifier|public
name|Cell
index|[]
name|get
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|column
parameter_list|,
specifier|final
name|long
name|timestamp
parameter_list|,
specifier|final
name|int
name|numVersions
parameter_list|)
throws|throws
name|IOException
block|{
name|Cell
index|[]
name|values
init|=
literal|null
decl_stmt|;
name|values
operator|=
name|connection
operator|.
name|getRegionServerWithRetries
argument_list|(
operator|new
name|ServerCallable
argument_list|<
name|Cell
index|[]
argument_list|>
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
name|row
argument_list|)
block|{
specifier|public
name|Cell
index|[]
name|call
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|server
operator|.
name|get
argument_list|(
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|timestamp
argument_list|,
name|numVersions
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
condition|)
block|{
name|ArrayList
argument_list|<
name|Cell
argument_list|>
name|cellValues
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|cellValues
operator|.
name|add
argument_list|(
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|cellValues
operator|.
name|toArray
argument_list|(
operator|new
name|Cell
index|[
name|values
operator|.
name|length
index|]
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**     * Get all the data for the specified row at the latest timestamp    *     * @param row row key    * @return RowResult is empty if row does not exist.    * @throws IOException    */
specifier|public
name|RowResult
name|getRow
parameter_list|(
specifier|final
name|String
name|row
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row
argument_list|)
argument_list|)
return|;
block|}
comment|/**     * Get all the data for the specified row at the latest timestamp    *     * @param row row key    * @return RowResult is empty if row does not exist.    * @throws IOException    */
specifier|public
name|RowResult
name|getRow
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getRow
argument_list|(
name|row
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
return|;
block|}
comment|/**     * Get more than one version of all columns for the specified row    *     * @param row row key    * @param numVersions number of versions to return    * @return RowResult is empty if row does not exist.    * @throws IOException    */
specifier|public
name|RowResult
name|getRow
parameter_list|(
specifier|final
name|String
name|row
parameter_list|,
specifier|final
name|int
name|numVersions
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row
argument_list|)
argument_list|,
literal|null
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|numVersions
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**     * Get more than one version of all columns for the specified row    *     * @param row row key    * @param numVersions number of versions to return    * @return RowResult is empty if row does not exist.    * @throws IOException    */
specifier|public
name|RowResult
name|getRow
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|int
name|numVersions
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getRow
argument_list|(
name|row
argument_list|,
literal|null
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|numVersions
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**     * Get all the data for the specified row at a specified timestamp    *     * @param row row key    * @param ts timestamp    * @return RowResult is empty if row does not exist.    * @throws IOException    */
specifier|public
name|RowResult
name|getRow
parameter_list|(
specifier|final
name|String
name|row
parameter_list|,
specifier|final
name|long
name|ts
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row
argument_list|)
argument_list|,
name|ts
argument_list|)
return|;
block|}
comment|/**     * Get all the data for the specified row at a specified timestamp    *     * @param row row key    * @param ts timestamp    * @return RowResult is empty if row does not exist.    * @throws IOException    */
specifier|public
name|RowResult
name|getRow
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|long
name|ts
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getRow
argument_list|(
name|row
argument_list|,
literal|null
argument_list|,
name|ts
argument_list|)
return|;
block|}
specifier|public
name|RowResult
name|getRow
parameter_list|(
specifier|final
name|String
name|row
parameter_list|,
specifier|final
name|long
name|ts
parameter_list|,
specifier|final
name|int
name|numVersions
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row
argument_list|)
argument_list|,
literal|null
argument_list|,
name|ts
argument_list|,
name|numVersions
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**     * Get more than one version of all columns for the specified row    * at a specified timestamp    *     * @param row row key    * @param timestamp timestamp    * @param numVersions number of versions to return    * @return RowResult is empty if row does not exist.    * @throws IOException    */
specifier|public
name|RowResult
name|getRow
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|long
name|timestamp
parameter_list|,
specifier|final
name|int
name|numVersions
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getRow
argument_list|(
name|row
argument_list|,
literal|null
argument_list|,
name|timestamp
argument_list|,
name|numVersions
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**     * Get selected columns for the specified row at the latest timestamp    *     * @param row row key    * @param columns Array of column names and families you want to retrieve.    * @return RowResult is empty if row does not exist.    * @throws IOException    */
specifier|public
name|RowResult
name|getRow
parameter_list|(
specifier|final
name|String
name|row
parameter_list|,
specifier|final
name|String
index|[]
name|columns
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toByteArrays
argument_list|(
name|columns
argument_list|)
argument_list|)
return|;
block|}
comment|/**     * Get selected columns for the specified row at the latest timestamp    *     * @param row row key    * @param columns Array of column names and families you want to retrieve.    * @return RowResult is empty if row does not exist.    * @throws IOException    */
specifier|public
name|RowResult
name|getRow
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
index|[]
name|columns
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getRow
argument_list|(
name|row
argument_list|,
name|columns
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
return|;
block|}
comment|/**     * Get more than one version of selected columns for the specified row    *     * @param row row key    * @param columns Array of column names and families you want to retrieve.    * @param numVersions number of versions to return    * @return RowResult is empty if row does not exist.    * @throws IOException    */
specifier|public
name|RowResult
name|getRow
parameter_list|(
specifier|final
name|String
name|row
parameter_list|,
specifier|final
name|String
index|[]
name|columns
parameter_list|,
specifier|final
name|int
name|numVersions
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toByteArrays
argument_list|(
name|columns
argument_list|)
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|numVersions
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**     * Get more than one version of selected columns for the specified row    *     * @param row row key    * @param columns Array of column names and families you want to retrieve.    * @param numVersions number of versions to return    * @return RowResult is empty if row does not exist.    * @throws IOException    */
specifier|public
name|RowResult
name|getRow
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
index|[]
name|columns
parameter_list|,
specifier|final
name|int
name|numVersions
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getRow
argument_list|(
name|row
argument_list|,
name|columns
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|numVersions
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**     * Get selected columns for the specified row at a specified timestamp    *     * @param row row key    * @param columns Array of column names and families you want to retrieve.    * @param ts timestamp    * @return RowResult is empty if row does not exist.    * @throws IOException    */
specifier|public
name|RowResult
name|getRow
parameter_list|(
specifier|final
name|String
name|row
parameter_list|,
specifier|final
name|String
index|[]
name|columns
parameter_list|,
specifier|final
name|long
name|ts
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toByteArrays
argument_list|(
name|columns
argument_list|)
argument_list|,
name|ts
argument_list|)
return|;
block|}
comment|/**     * Get selected columns for the specified row at a specified timestamp    *     * @param row row key    * @param columns Array of column names and families you want to retrieve.    * @param ts timestamp    * @return RowResult is empty if row does not exist.    * @throws IOException    */
specifier|public
name|RowResult
name|getRow
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
index|[]
name|columns
parameter_list|,
specifier|final
name|long
name|ts
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getRow
argument_list|(
name|row
argument_list|,
name|columns
argument_list|,
name|ts
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|RowResult
name|getRow
parameter_list|(
specifier|final
name|String
name|row
parameter_list|,
specifier|final
name|String
index|[]
name|columns
parameter_list|,
specifier|final
name|long
name|timestamp
parameter_list|,
specifier|final
name|int
name|numVersions
parameter_list|,
specifier|final
name|RowLock
name|rowLock
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toByteArrays
argument_list|(
name|columns
argument_list|)
argument_list|,
name|timestamp
argument_list|,
name|numVersions
argument_list|,
name|rowLock
argument_list|)
return|;
block|}
comment|/**     * Get selected columns for the specified row at a specified timestamp    * using existing row lock.    *     * @param row row key    * @param columns Array of column names and families you want to retrieve.    * @param ts timestamp    * @param rl row lock    * @return RowResult is empty if row does not exist.    * @throws IOException    */
specifier|public
name|RowResult
name|getRow
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
index|[]
name|columns
parameter_list|,
specifier|final
name|long
name|ts
parameter_list|,
specifier|final
name|int
name|numVersions
parameter_list|,
specifier|final
name|RowLock
name|rl
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|connection
operator|.
name|getRegionServerWithRetries
argument_list|(
operator|new
name|ServerCallable
argument_list|<
name|RowResult
argument_list|>
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
name|row
argument_list|)
block|{
specifier|public
name|RowResult
name|call
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|lockId
init|=
operator|-
literal|1L
decl_stmt|;
if|if
condition|(
name|rl
operator|!=
literal|null
condition|)
block|{
name|lockId
operator|=
name|rl
operator|.
name|getLockId
argument_list|()
expr_stmt|;
block|}
return|return
name|server
operator|.
name|getRow
argument_list|(
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|row
argument_list|,
name|columns
argument_list|,
name|ts
argument_list|,
name|numVersions
argument_list|,
name|lockId
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
name|RowResult
name|getClosestRowBefore
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|connection
operator|.
name|getRegionServerWithRetries
argument_list|(
operator|new
name|ServerCallable
argument_list|<
name|RowResult
argument_list|>
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
name|row
argument_list|)
block|{
specifier|public
name|RowResult
name|call
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|server
operator|.
name|getClosestRowBefore
argument_list|(
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|row
argument_list|,
name|columnFamily
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**     * Get a scanner on the current table starting at first row.    * Return the specified columns.    *    * @param columns columns to scan. If column name is a column family, all    * columns of the specified column family are returned.  Its also possible    * to pass a regex in the column qualifier. A column qualifier is judged to    * be a regex if it contains at least one of the following characters:    *<code>\+|^&*$[]]}{)(</code>.    * @return scanner    * @throws IOException    */
specifier|public
name|Scanner
name|getScanner
parameter_list|(
specifier|final
name|String
index|[]
name|columns
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getScanner
argument_list|(
name|Bytes
operator|.
name|toByteArrays
argument_list|(
name|columns
argument_list|)
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
return|;
block|}
comment|/**     * Get a scanner on the current table starting at the specified row.    * Return the specified columns.    *    * @param columns columns to scan. If column name is a column family, all    * columns of the specified column family are returned.  Its also possible    * to pass a regex in the column qualifier. A column qualifier is judged to    * be a regex if it contains at least one of the following characters:    *<code>\+|^&*$[]]}{)(</code>.    * @param startRow starting row in table to scan    * @return scanner    * @throws IOException    */
specifier|public
name|Scanner
name|getScanner
parameter_list|(
specifier|final
name|String
index|[]
name|columns
parameter_list|,
specifier|final
name|String
name|startRow
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getScanner
argument_list|(
name|Bytes
operator|.
name|toByteArrays
argument_list|(
name|columns
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|startRow
argument_list|)
argument_list|)
return|;
block|}
comment|/**     * Get a scanner on the current table starting at first row.    * Return the specified columns.    *    * @param columns columns to scan. If column name is a column family, all    * columns of the specified column family are returned.  Its also possible    * to pass a regex in the column qualifier. A column qualifier is judged to    * be a regex if it contains at least one of the following characters:    *<code>\+|^&*$[]]}{)(</code>.    * @return scanner    * @throws IOException    */
specifier|public
name|Scanner
name|getScanner
parameter_list|(
specifier|final
name|byte
index|[]
index|[]
name|columns
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getScanner
argument_list|(
name|columns
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**     * Get a scanner on the current table starting at the specified row.    * Return the specified columns.    *    * @param columns columns to scan. If column name is a column family, all    * columns of the specified column family are returned.  Its also possible    * to pass a regex in the column qualifier. A column qualifier is judged to    * be a regex if it contains at least one of the following characters:    *<code>\+|^&*$[]]}{)(</code>.    * @param startRow starting row in table to scan    * @return scanner    * @throws IOException    */
specifier|public
name|Scanner
name|getScanner
parameter_list|(
specifier|final
name|byte
index|[]
index|[]
name|columns
parameter_list|,
specifier|final
name|byte
index|[]
name|startRow
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getScanner
argument_list|(
name|columns
argument_list|,
name|startRow
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**     * Get a scanner on the current table starting at the specified row.    * Return the specified columns.    *    * @param columns columns to scan. If column name is a column family, all    * columns of the specified column family are returned.  Its also possible    * to pass a regex in the column qualifier. A column qualifier is judged to    * be a regex if it contains at least one of the following characters:    *<code>\+|^&*$[]]}{)(</code>.    * @param startRow starting row in table to scan    * @param timestamp only return results whose timestamp<= this value    * @return scanner    * @throws IOException    */
specifier|public
name|Scanner
name|getScanner
parameter_list|(
specifier|final
name|byte
index|[]
index|[]
name|columns
parameter_list|,
specifier|final
name|byte
index|[]
name|startRow
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getScanner
argument_list|(
name|columns
argument_list|,
name|startRow
argument_list|,
name|timestamp
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**     * Get a scanner on the current table starting at the specified row.    * Return the specified columns.    *    * @param columns columns to scan. If column name is a column family, all    * columns of the specified column family are returned.  Its also possible    * to pass a regex in the column qualifier. A column qualifier is judged to    * be a regex if it contains at least one of the following characters:    *<code>\+|^&*$[]]}{)(</code>.    * @param startRow starting row in table to scan    * @param filter a row filter using row-key regexp and/or column data filter.    * @return scanner    * @throws IOException    */
specifier|public
name|Scanner
name|getScanner
parameter_list|(
specifier|final
name|byte
index|[]
index|[]
name|columns
parameter_list|,
specifier|final
name|byte
index|[]
name|startRow
parameter_list|,
name|RowFilterInterface
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getScanner
argument_list|(
name|columns
argument_list|,
name|startRow
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|filter
argument_list|)
return|;
block|}
comment|/**     * Get a scanner on the current table starting at the specified row and    * ending just before<code>stopRow<code>.    * Return the specified columns.    *    * @param columns columns to scan. If column name is a column family, all    * columns of the specified column family are returned.  Its also possible    * to pass a regex in the column qualifier. A column qualifier is judged to    * be a regex if it contains at least one of the following characters:    *<code>\+|^&*$[]]}{)(</code>.    * @param startRow starting row in table to scan    * @param stopRow Row to stop scanning on. Once we hit this row we stop    * returning values; i.e. we return the row before this one but not the    *<code>stopRow</code> itself.    * @return scanner    * @throws IOException    */
specifier|public
name|Scanner
name|getScanner
parameter_list|(
specifier|final
name|byte
index|[]
index|[]
name|columns
parameter_list|,
specifier|final
name|byte
index|[]
name|startRow
parameter_list|,
specifier|final
name|byte
index|[]
name|stopRow
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getScanner
argument_list|(
name|columns
argument_list|,
name|startRow
argument_list|,
name|stopRow
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
return|;
block|}
comment|/**     * Get a scanner on the current table starting at the specified row and    * ending just before<code>stopRow<code>.    * Return the specified columns.    *    * @param columns columns to scan. If column name is a column family, all    * columns of the specified column family are returned.  Its also possible    * to pass a regex in the column qualifier. A column qualifier is judged to    * be a regex if it contains at least one of the following characters:    *<code>\+|^&*$[]]}{)(</code>.    * @param startRow starting row in table to scan    * @param stopRow Row to stop scanning on. Once we hit this row we stop    * returning values; i.e. we return the row before this one but not the    *<code>stopRow</code> itself.    * @param timestamp only return results whose timestamp<= this value    * @return scanner    * @throws IOException    */
specifier|public
name|Scanner
name|getScanner
parameter_list|(
specifier|final
name|String
index|[]
name|columns
parameter_list|,
specifier|final
name|String
name|startRow
parameter_list|,
specifier|final
name|String
name|stopRow
parameter_list|,
specifier|final
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getScanner
argument_list|(
name|Bytes
operator|.
name|toByteArrays
argument_list|(
name|columns
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|startRow
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|stopRow
argument_list|)
argument_list|,
name|timestamp
argument_list|)
return|;
block|}
comment|/**     * Get a scanner on the current table starting at the specified row and    * ending just before<code>stopRow<code>.    * Return the specified columns.    *    * @param columns columns to scan. If column name is a column family, all    * columns of the specified column family are returned.  Its also possible    * to pass a regex in the column qualifier. A column qualifier is judged to    * be a regex if it contains at least one of the following characters:    *<code>\+|^&*$[]]}{)(</code>.    * @param startRow starting row in table to scan    * @param stopRow Row to stop scanning on. Once we hit this row we stop    * returning values; i.e. we return the row before this one but not the    *<code>stopRow</code> itself.    * @param timestamp only return results whose timestamp<= this value    * @return scanner    * @throws IOException    */
specifier|public
name|Scanner
name|getScanner
parameter_list|(
specifier|final
name|byte
index|[]
index|[]
name|columns
parameter_list|,
specifier|final
name|byte
index|[]
name|startRow
parameter_list|,
specifier|final
name|byte
index|[]
name|stopRow
parameter_list|,
specifier|final
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getScanner
argument_list|(
name|columns
argument_list|,
name|startRow
argument_list|,
name|timestamp
argument_list|,
operator|new
name|WhileMatchRowFilter
argument_list|(
operator|new
name|StopRowFilter
argument_list|(
name|stopRow
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**     * Get a scanner on the current table starting at the specified row.    * Return the specified columns.    *    * @param columns columns to scan. If column name is a column family, all    * columns of the specified column family are returned.  Its also possible    * to pass a regex in the column qualifier. A column qualifier is judged to    * be a regex if it contains at least one of the following characters:    *<code>\+|^&*$[]]}{)(</code>.    * @param startRow starting row in table to scan    * @param timestamp only return results whose timestamp<= this value    * @param filter a row filter using row-key regexp and/or column data filter.    * @return scanner    * @throws IOException    */
specifier|public
name|Scanner
name|getScanner
parameter_list|(
name|String
index|[]
name|columns
parameter_list|,
name|String
name|startRow
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|RowFilterInterface
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getScanner
argument_list|(
name|Bytes
operator|.
name|toByteArrays
argument_list|(
name|columns
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|startRow
argument_list|)
argument_list|,
name|timestamp
argument_list|,
name|filter
argument_list|)
return|;
block|}
comment|/**     * Get a scanner on the current table starting at the specified row.    * Return the specified columns.    *    * @param columns columns to scan. If column name is a column family, all    * columns of the specified column family are returned.  Its also possible    * to pass a regex in the column qualifier. A column qualifier is judged to    * be a regex if it contains at least one of the following characters:    *<code>\+|^&*$[]]}{)(</code>.    * @param startRow starting row in table to scan    * @param timestamp only return results whose timestamp<= this value    * @param filter a row filter using row-key regexp and/or column data filter.    * @return scanner    * @throws IOException    */
specifier|public
name|Scanner
name|getScanner
parameter_list|(
specifier|final
name|byte
index|[]
index|[]
name|columns
parameter_list|,
specifier|final
name|byte
index|[]
name|startRow
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|RowFilterInterface
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
name|ClientScanner
name|s
init|=
operator|new
name|ClientScanner
argument_list|(
name|columns
argument_list|,
name|startRow
argument_list|,
name|timestamp
argument_list|,
name|filter
argument_list|)
decl_stmt|;
name|s
operator|.
name|initialize
argument_list|()
expr_stmt|;
return|return
name|s
return|;
block|}
comment|/**    * Completely delete the row's cells.    *    * @param row Key of the row you want to completely delete.    * @throws IOException    */
specifier|public
name|void
name|deleteAll
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|)
throws|throws
name|IOException
block|{
name|deleteAll
argument_list|(
name|row
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Completely delete the row's cells.    *    * @param row Key of the row you want to completely delete.    * @throws IOException    */
specifier|public
name|void
name|deleteAll
parameter_list|(
specifier|final
name|String
name|row
parameter_list|)
throws|throws
name|IOException
block|{
name|deleteAll
argument_list|(
name|row
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Completely delete the row's cells.    *    * @param row Key of the row you want to completely delete.    * @param column column to be deleted    * @throws IOException    */
specifier|public
name|void
name|deleteAll
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|column
parameter_list|)
throws|throws
name|IOException
block|{
name|deleteAll
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
expr_stmt|;
block|}
comment|/**    * Completely delete the row's cells.    *    * @param row Key of the row you want to completely delete.    * @param ts Delete all cells of the same timestamp or older.    * @throws IOException    */
specifier|public
name|void
name|deleteAll
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|long
name|ts
parameter_list|)
throws|throws
name|IOException
block|{
name|deleteAll
argument_list|(
name|row
argument_list|,
literal|null
argument_list|,
name|ts
argument_list|)
expr_stmt|;
block|}
comment|/**    * Completely delete the row's cells.    *    * @param row Key of the row you want to completely delete.    * @param ts Delete all cells of the same timestamp or older.    * @throws IOException    */
specifier|public
name|void
name|deleteAll
parameter_list|(
specifier|final
name|String
name|row
parameter_list|,
specifier|final
name|long
name|ts
parameter_list|)
throws|throws
name|IOException
block|{
name|deleteAll
argument_list|(
name|row
argument_list|,
literal|null
argument_list|,
name|ts
argument_list|)
expr_stmt|;
block|}
comment|/**     * Delete all cells that match the passed row and column.    * @param row Row to update    * @param column name of column whose value is to be deleted    * @throws IOException     */
specifier|public
name|void
name|deleteAll
parameter_list|(
specifier|final
name|String
name|row
parameter_list|,
specifier|final
name|String
name|column
parameter_list|)
throws|throws
name|IOException
block|{
name|deleteAll
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
expr_stmt|;
block|}
comment|/**     * Delete all cells that match the passed row and column and whose    * timestamp is equal-to or older than the passed timestamp.    * @param row Row to update    * @param column name of column whose value is to be deleted    * @param ts Delete all cells of the same timestamp or older.    * @throws IOException     */
specifier|public
name|void
name|deleteAll
parameter_list|(
specifier|final
name|String
name|row
parameter_list|,
specifier|final
name|String
name|column
parameter_list|,
specifier|final
name|long
name|ts
parameter_list|)
throws|throws
name|IOException
block|{
name|deleteAll
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row
argument_list|)
argument_list|,
name|column
operator|!=
literal|null
condition|?
name|Bytes
operator|.
name|toBytes
argument_list|(
name|column
argument_list|)
else|:
literal|null
argument_list|,
name|ts
argument_list|)
expr_stmt|;
block|}
comment|/**     * Delete all cells that match the passed row and column and whose    * timestamp is equal-to or older than the passed timestamp.    * @param row Row to update    * @param column name of column whose value is to be deleted    * @param ts Delete all cells of the same timestamp or older.    * @throws IOException     */
specifier|public
name|void
name|deleteAll
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|column
parameter_list|,
specifier|final
name|long
name|ts
parameter_list|)
throws|throws
name|IOException
block|{
name|deleteAll
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|ts
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**     * Delete all cells that match the passed row and column and whose    * timestamp is equal-to or older than the passed timestamp, using an    * existing row lock.    * @param row Row to update    * @param column name of column whose value is to be deleted    * @param ts Delete all cells of the same timestamp or older.    * @param rl Existing row lock    * @throws IOException     */
specifier|public
name|void
name|deleteAll
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|column
parameter_list|,
specifier|final
name|long
name|ts
parameter_list|,
specifier|final
name|RowLock
name|rl
parameter_list|)
throws|throws
name|IOException
block|{
name|connection
operator|.
name|getRegionServerWithRetries
argument_list|(
operator|new
name|ServerCallable
argument_list|<
name|Boolean
argument_list|>
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
name|row
argument_list|)
block|{
specifier|public
name|Boolean
name|call
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|lockId
init|=
operator|-
literal|1L
decl_stmt|;
if|if
condition|(
name|rl
operator|!=
literal|null
condition|)
block|{
name|lockId
operator|=
name|rl
operator|.
name|getLockId
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|column
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|server
operator|.
name|deleteAll
argument_list|(
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|ts
argument_list|,
name|lockId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|server
operator|.
name|deleteAll
argument_list|(
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|row
argument_list|,
name|ts
argument_list|,
name|lockId
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**     * Delete all cells that match the passed row and column.    * @param row Row to update    * @param colRegex column regex expression    * @throws IOException     */
specifier|public
name|void
name|deleteAllByRegex
parameter_list|(
specifier|final
name|String
name|row
parameter_list|,
specifier|final
name|String
name|colRegex
parameter_list|)
throws|throws
name|IOException
block|{
name|deleteAll
argument_list|(
name|row
argument_list|,
name|colRegex
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
expr_stmt|;
block|}
comment|/**     * Delete all cells that match the passed row and column and whose    * timestamp is equal-to or older than the passed timestamp.    * @param row Row to update    * @param colRegex Column Regex expression    * @param ts Delete all cells of the same timestamp or older.    * @throws IOException     */
specifier|public
name|void
name|deleteAllByRegex
parameter_list|(
specifier|final
name|String
name|row
parameter_list|,
specifier|final
name|String
name|colRegex
parameter_list|,
specifier|final
name|long
name|ts
parameter_list|)
throws|throws
name|IOException
block|{
name|deleteAllByRegex
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row
argument_list|)
argument_list|,
name|colRegex
argument_list|,
name|ts
argument_list|)
expr_stmt|;
block|}
comment|/**     * Delete all cells that match the passed row and column and whose    * timestamp is equal-to or older than the passed timestamp.    * @param row Row to update    * @param colRegex Column Regex expression    * @param ts Delete all cells of the same timestamp or older.    * @throws IOException     */
specifier|public
name|void
name|deleteAllByRegex
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|String
name|colRegex
parameter_list|,
specifier|final
name|long
name|ts
parameter_list|)
throws|throws
name|IOException
block|{
name|deleteAllByRegex
argument_list|(
name|row
argument_list|,
name|colRegex
argument_list|,
name|ts
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**     * Delete all cells that match the passed row and column and whose    * timestamp is equal-to or older than the passed timestamp, using an    * existing row lock.    * @param row Row to update    * @param colRegex Column regex expression    * @param ts Delete all cells of the same timestamp or older.    * @param rl Existing row lock    * @throws IOException     */
specifier|public
name|void
name|deleteAllByRegex
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|String
name|colRegex
parameter_list|,
specifier|final
name|long
name|ts
parameter_list|,
specifier|final
name|RowLock
name|rl
parameter_list|)
throws|throws
name|IOException
block|{
name|connection
operator|.
name|getRegionServerWithRetries
argument_list|(
operator|new
name|ServerCallable
argument_list|<
name|Boolean
argument_list|>
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
name|row
argument_list|)
block|{
specifier|public
name|Boolean
name|call
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|lockId
init|=
operator|-
literal|1L
decl_stmt|;
if|if
condition|(
name|rl
operator|!=
literal|null
condition|)
block|{
name|lockId
operator|=
name|rl
operator|.
name|getLockId
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|server
operator|.
name|deleteAllByRegex
argument_list|(
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|row
argument_list|,
name|colRegex
argument_list|,
name|ts
argument_list|,
name|lockId
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Delete all cells for a row with matching column family at all timestamps.    *    * @param row The row to operate on    * @param family The column family to match    * @throws IOException    */
specifier|public
name|void
name|deleteFamily
parameter_list|(
specifier|final
name|String
name|row
parameter_list|,
specifier|final
name|String
name|family
parameter_list|)
throws|throws
name|IOException
block|{
name|deleteFamily
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
expr_stmt|;
block|}
comment|/**    * Delete all cells for a row with matching column family at all timestamps.    *    * @param row The row to operate on    * @param family The column family to match    * @throws IOException    */
specifier|public
name|void
name|deleteFamily
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|)
throws|throws
name|IOException
block|{
name|deleteFamily
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
expr_stmt|;
block|}
comment|/**    * Delete all cells for a row with matching column family with timestamps    * less than or equal to<i>timestamp</i>.    *    * @param row The row to operate on    * @param family The column family to match    * @param timestamp Timestamp to match    * @throws IOException    */
specifier|public
name|void
name|deleteFamily
parameter_list|(
specifier|final
name|String
name|row
parameter_list|,
specifier|final
name|String
name|family
parameter_list|,
specifier|final
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOException
block|{
name|deleteFamily
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family
argument_list|)
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
comment|/**    * Delete all cells for a row with matching column family with timestamps    * less than or equal to<i>timestamp</i>.    *    * @param row The row to operate on    * @param family The column family to match    * @param timestamp Timestamp to match    * @throws IOException    */
specifier|public
name|void
name|deleteFamily
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOException
block|{
name|deleteFamily
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|timestamp
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Delete all cells for a row with matching column family with timestamps    * less than or equal to<i>timestamp</i>, using existing row lock.    *    * @param row The row to operate on    * @param family The column family to match    * @param timestamp Timestamp to match    * @param rl Existing row lock    * @throws IOException    */
specifier|public
name|void
name|deleteFamily
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|long
name|timestamp
parameter_list|,
specifier|final
name|RowLock
name|rl
parameter_list|)
throws|throws
name|IOException
block|{
name|connection
operator|.
name|getRegionServerWithRetries
argument_list|(
operator|new
name|ServerCallable
argument_list|<
name|Boolean
argument_list|>
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
name|row
argument_list|)
block|{
specifier|public
name|Boolean
name|call
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|lockId
init|=
operator|-
literal|1L
decl_stmt|;
if|if
condition|(
name|rl
operator|!=
literal|null
condition|)
block|{
name|lockId
operator|=
name|rl
operator|.
name|getLockId
argument_list|()
expr_stmt|;
block|}
name|server
operator|.
name|deleteFamily
argument_list|(
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|timestamp
argument_list|,
name|lockId
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Delete all cells for a row with matching column family regex     * at all timestamps.    *    * @param row The row to operate on    * @param familyRegex Column family regex    * @throws IOException    */
specifier|public
name|void
name|deleteFamilyByRegex
parameter_list|(
specifier|final
name|String
name|row
parameter_list|,
specifier|final
name|String
name|familyRegex
parameter_list|)
throws|throws
name|IOException
block|{
name|deleteFamilyByRegex
argument_list|(
name|row
argument_list|,
name|familyRegex
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
expr_stmt|;
block|}
comment|/**    * Delete all cells for a row with matching column family regex     * at all timestamps.    *    * @param row The row to operate on    * @param familyRegex Column family regex    * @throws IOException    */
specifier|public
name|void
name|deleteFamilyByRegex
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|String
name|familyRegex
parameter_list|)
throws|throws
name|IOException
block|{
name|deleteFamilyByRegex
argument_list|(
name|row
argument_list|,
name|familyRegex
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
expr_stmt|;
block|}
comment|/**    * Delete all cells for a row with matching column family regex    * with timestamps less than or equal to<i>timestamp</i>.    *    * @param row The row to operate on    * @param familyRegex Column family regex    * @param timestamp Timestamp to match    * @throws IOException    */
specifier|public
name|void
name|deleteFamilyByRegex
parameter_list|(
specifier|final
name|String
name|row
parameter_list|,
specifier|final
name|String
name|familyRegex
parameter_list|,
specifier|final
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOException
block|{
name|deleteFamilyByRegex
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row
argument_list|)
argument_list|,
name|familyRegex
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
comment|/**    * Delete all cells for a row with matching column family regex    * with timestamps less than or equal to<i>timestamp</i>.    *    * @param row The row to operate on    * @param familyRegex Column family regex    * @param timestamp Timestamp to match    * @throws IOException    */
specifier|public
name|void
name|deleteFamilyByRegex
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|String
name|familyRegex
parameter_list|,
specifier|final
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOException
block|{
name|deleteFamilyByRegex
argument_list|(
name|row
argument_list|,
name|familyRegex
argument_list|,
name|timestamp
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Delete all cells for a row with matching column family regex with    * timestamps less than or equal to<i>timestamp</i>, using existing    * row lock.    *     * @param row The row to operate on    * @param familyRegex Column Family Regex    * @param timestamp Timestamp to match    * @param r1 Existing row lock    * @throws IOException    */
specifier|public
name|void
name|deleteFamilyByRegex
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|String
name|familyRegex
parameter_list|,
specifier|final
name|long
name|timestamp
parameter_list|,
specifier|final
name|RowLock
name|r1
parameter_list|)
throws|throws
name|IOException
block|{
name|connection
operator|.
name|getRegionServerWithRetries
argument_list|(
operator|new
name|ServerCallable
argument_list|<
name|Boolean
argument_list|>
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
name|row
argument_list|)
block|{
specifier|public
name|Boolean
name|call
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|lockId
init|=
operator|-
literal|1L
decl_stmt|;
if|if
condition|(
name|r1
operator|!=
literal|null
condition|)
block|{
name|lockId
operator|=
name|r1
operator|.
name|getLockId
argument_list|()
expr_stmt|;
block|}
name|server
operator|.
name|deleteFamilyByRegex
argument_list|(
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|row
argument_list|,
name|familyRegex
argument_list|,
name|timestamp
argument_list|,
name|lockId
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test for the existence of a row in the table.    *     * @param row The row    * @return true if the row exists, false otherwise    * @throws IOException    */
specifier|public
name|boolean
name|exists
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|exists
argument_list|(
name|row
argument_list|,
literal|null
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Test for the existence of a row and column in the table.    *     * @param row The row    * @param column The column    * @return true if the row exists, false otherwise    * @throws IOException    */
specifier|public
name|boolean
name|exists
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|column
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|exists
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Test for the existence of a coordinate in the table.    *     * @param row The row    * @param column The column    * @param timestamp The timestamp    * @return true if the specified coordinate exists    * @throws IOException    */
specifier|public
name|boolean
name|exists
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|column
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|exists
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|timestamp
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Test for the existence of a coordinate in the table.    *     * @param row The row    * @param column The column    * @param timestamp The timestamp    * @param rl Existing row lock    * @return true if the specified coordinate exists    * @throws IOException    */
specifier|public
name|boolean
name|exists
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|column
parameter_list|,
specifier|final
name|long
name|timestamp
parameter_list|,
specifier|final
name|RowLock
name|rl
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|connection
operator|.
name|getRegionServerWithRetries
argument_list|(
operator|new
name|ServerCallable
argument_list|<
name|Boolean
argument_list|>
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
name|row
argument_list|)
block|{
specifier|public
name|Boolean
name|call
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|lockId
init|=
operator|-
literal|1L
decl_stmt|;
if|if
condition|(
name|rl
operator|!=
literal|null
condition|)
block|{
name|lockId
operator|=
name|rl
operator|.
name|getLockId
argument_list|()
expr_stmt|;
block|}
return|return
name|Boolean
operator|.
name|valueOf
argument_list|(
name|server
operator|.
name|exists
argument_list|(
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|timestamp
argument_list|,
name|lockId
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|booleanValue
argument_list|()
return|;
block|}
comment|/**    * Commit a BatchUpdate to the table.    * If autoFlush is false, the update is buffered    * @param batchUpdate    * @throws IOException    */
specifier|public
specifier|synchronized
name|void
name|commit
parameter_list|(
specifier|final
name|BatchUpdate
name|batchUpdate
parameter_list|)
throws|throws
name|IOException
block|{
name|commit
argument_list|(
name|batchUpdate
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Commit a BatchUpdate to the table using existing row lock.    * If autoFlush is false, the update is buffered    * @param batchUpdate    * @param rl Existing row lock    * @throws IOException    */
specifier|public
specifier|synchronized
name|void
name|commit
parameter_list|(
specifier|final
name|BatchUpdate
name|batchUpdate
parameter_list|,
specifier|final
name|RowLock
name|rl
parameter_list|)
throws|throws
name|IOException
block|{
name|checkRowAndColumns
argument_list|(
name|batchUpdate
argument_list|)
expr_stmt|;
if|if
condition|(
name|rl
operator|!=
literal|null
condition|)
block|{
name|batchUpdate
operator|.
name|setRowLock
argument_list|(
name|rl
operator|.
name|getLockId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|writeBuffer
operator|.
name|add
argument_list|(
name|batchUpdate
argument_list|)
expr_stmt|;
name|currentWriteBufferSize
operator|+=
name|batchUpdate
operator|.
name|heapSize
argument_list|()
expr_stmt|;
if|if
condition|(
name|autoFlush
operator|||
name|currentWriteBufferSize
operator|>
name|writeBufferSize
condition|)
block|{
name|flushCommits
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Commit a List of BatchUpdate to the table.    * If autoFlush is false, the updates are buffered    * @param batchUpdates    * @throws IOException    */
specifier|public
specifier|synchronized
name|void
name|commit
parameter_list|(
specifier|final
name|List
argument_list|<
name|BatchUpdate
argument_list|>
name|batchUpdates
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|BatchUpdate
name|bu
range|:
name|batchUpdates
control|)
block|{
name|checkRowAndColumns
argument_list|(
name|bu
argument_list|)
expr_stmt|;
name|writeBuffer
operator|.
name|add
argument_list|(
name|bu
argument_list|)
expr_stmt|;
name|currentWriteBufferSize
operator|+=
name|bu
operator|.
name|heapSize
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|autoFlush
operator|||
name|currentWriteBufferSize
operator|>
name|writeBufferSize
condition|)
block|{
name|flushCommits
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Atomically checks if a row's values match    * the expectedValues. If it does, it uses the    * batchUpdate to update the row.    * @param batchUpdate batchupdate to apply if check is successful    * @param expectedValues values to check    * @param rl rowlock    * @throws IOException    */
specifier|public
specifier|synchronized
name|boolean
name|checkAndSave
parameter_list|(
specifier|final
name|BatchUpdate
name|batchUpdate
parameter_list|,
specifier|final
name|HbaseMapWritable
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|expectedValues
parameter_list|,
specifier|final
name|RowLock
name|rl
parameter_list|)
throws|throws
name|IOException
block|{
name|checkRowAndColumns
argument_list|(
name|batchUpdate
argument_list|)
expr_stmt|;
if|if
condition|(
name|rl
operator|!=
literal|null
condition|)
block|{
name|batchUpdate
operator|.
name|setRowLock
argument_list|(
name|rl
operator|.
name|getLockId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|connection
operator|.
name|getRegionServerWithRetries
argument_list|(
operator|new
name|ServerCallable
argument_list|<
name|Boolean
argument_list|>
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
name|batchUpdate
operator|.
name|getRow
argument_list|()
argument_list|)
block|{
specifier|public
name|Boolean
name|call
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|server
operator|.
name|checkAndSave
argument_list|(
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|batchUpdate
argument_list|,
name|expectedValues
argument_list|)
condition|?
name|Boolean
operator|.
name|TRUE
else|:
name|Boolean
operator|.
name|FALSE
return|;
block|}
block|}
argument_list|)
operator|.
name|booleanValue
argument_list|()
return|;
block|}
comment|/**    * Commit to the table the buffer of BatchUpdate.    * Called automaticaly in the commit methods when autoFlush is true.    * @throws IOException    */
specifier|public
name|void
name|flushCommits
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|connection
operator|.
name|processBatchOfRows
argument_list|(
name|writeBuffer
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|currentWriteBufferSize
operator|=
literal|0
expr_stmt|;
name|writeBuffer
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Release held resources    *     * @throws IOException   */
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|flushCommits
argument_list|()
expr_stmt|;
block|}
comment|/**    * Utility method that checks rows existence, length and columns well    * formedness.    *     * @param bu    * @throws IllegalArgumentException    * @throws IOException    */
specifier|private
name|void
name|checkRowAndColumns
parameter_list|(
name|BatchUpdate
name|bu
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|IOException
block|{
if|if
condition|(
name|bu
operator|.
name|getRow
argument_list|()
operator|==
literal|null
operator|||
name|bu
operator|.
name|getRow
argument_list|()
operator|.
name|length
operator|>
name|HConstants
operator|.
name|MAX_ROW_LENGTH
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Row key is invalid"
argument_list|)
throw|;
block|}
for|for
control|(
name|BatchOperation
name|bo
range|:
name|bu
control|)
block|{
name|HStoreKey
operator|.
name|getFamily
argument_list|(
name|bo
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Obtain a row lock    * @param row The row to lock    * @return rowLock RowLock containing row and lock id    * @throws IOException    */
specifier|public
name|RowLock
name|lockRow
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|connection
operator|.
name|getRegionServerWithRetries
argument_list|(
operator|new
name|ServerCallable
argument_list|<
name|RowLock
argument_list|>
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
name|row
argument_list|)
block|{
specifier|public
name|RowLock
name|call
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|lockId
init|=
name|server
operator|.
name|lockRow
argument_list|(
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|row
argument_list|)
decl_stmt|;
name|RowLock
name|rowLock
init|=
operator|new
name|RowLock
argument_list|(
name|row
argument_list|,
name|lockId
argument_list|)
decl_stmt|;
return|return
name|rowLock
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * Release a row lock    * @param rl The row lock to release    * @throws IOException    */
specifier|public
name|void
name|unlockRow
parameter_list|(
specifier|final
name|RowLock
name|rl
parameter_list|)
throws|throws
name|IOException
block|{
name|connection
operator|.
name|getRegionServerWithRetries
argument_list|(
operator|new
name|ServerCallable
argument_list|<
name|Boolean
argument_list|>
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
name|rl
operator|.
name|getRow
argument_list|()
argument_list|)
block|{
specifier|public
name|Boolean
name|call
parameter_list|()
throws|throws
name|IOException
block|{
name|server
operator|.
name|unlockRow
argument_list|(
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|rl
operator|.
name|getLockId
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the value of autoFlush. If true, updates will not be buffered    * @return value of autoFlush    */
specifier|public
name|boolean
name|isAutoFlush
parameter_list|()
block|{
return|return
name|autoFlush
return|;
block|}
comment|/**    * Set if this instanciation of HTable will autoFlush    * @param autoFlush    */
specifier|public
name|void
name|setAutoFlush
parameter_list|(
name|boolean
name|autoFlush
parameter_list|)
block|{
name|this
operator|.
name|autoFlush
operator|=
name|autoFlush
expr_stmt|;
block|}
comment|/**    * Get the maximum size in bytes of the write buffer for this HTable    * @return the size of the write buffer in bytes    */
specifier|public
name|long
name|getWriteBufferSize
parameter_list|()
block|{
return|return
name|writeBufferSize
return|;
block|}
comment|/**    * Set the size of the buffer in bytes    * @param writeBufferSize    */
specifier|public
name|void
name|setWriteBufferSize
parameter_list|(
name|long
name|writeBufferSize
parameter_list|)
block|{
name|this
operator|.
name|writeBufferSize
operator|=
name|writeBufferSize
expr_stmt|;
block|}
comment|/**    * Get the write buffer     * @return the current write buffer    */
specifier|public
name|ArrayList
argument_list|<
name|BatchUpdate
argument_list|>
name|getWriteBuffer
parameter_list|()
block|{
return|return
name|writeBuffer
return|;
block|}
specifier|public
name|long
name|incrementColumnValue
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|column
parameter_list|,
specifier|final
name|long
name|amount
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|connection
operator|.
name|getRegionServerWithRetries
argument_list|(
operator|new
name|ServerCallable
argument_list|<
name|Long
argument_list|>
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
name|row
argument_list|)
block|{
specifier|public
name|Long
name|call
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|server
operator|.
name|incrementColumnValue
argument_list|(
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|amount
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * Implements the scanner interface for the HBase client.    * If there are multiple regions in a table, this scanner will iterate    * through them all.    */
specifier|protected
class|class
name|ClientScanner
implements|implements
name|Scanner
block|{
specifier|private
specifier|final
name|Log
name|CLIENT_LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|byte
index|[]
index|[]
name|columns
decl_stmt|;
specifier|private
name|byte
index|[]
name|startRow
decl_stmt|;
specifier|protected
name|long
name|scanTime
decl_stmt|;
specifier|private
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
specifier|private
name|HRegionInfo
name|currentRegion
init|=
literal|null
decl_stmt|;
specifier|private
name|ScannerCallable
name|callable
init|=
literal|null
decl_stmt|;
specifier|protected
name|RowFilterInterface
name|filter
decl_stmt|;
specifier|private
specifier|final
name|LinkedList
argument_list|<
name|RowResult
argument_list|>
name|cache
init|=
operator|new
name|LinkedList
argument_list|<
name|RowResult
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"hiding"
argument_list|)
specifier|private
specifier|final
name|int
name|scannerCaching
init|=
name|HTable
operator|.
name|this
operator|.
name|scannerCaching
decl_stmt|;
specifier|private
name|long
name|lastNext
decl_stmt|;
specifier|protected
name|ClientScanner
parameter_list|(
specifier|final
name|byte
index|[]
index|[]
name|columns
parameter_list|,
specifier|final
name|byte
index|[]
name|startRow
parameter_list|,
specifier|final
name|long
name|timestamp
parameter_list|,
specifier|final
name|RowFilterInterface
name|filter
parameter_list|)
block|{
if|if
condition|(
name|CLIENT_LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|CLIENT_LOG
operator|.
name|debug
argument_list|(
literal|"Creating scanner over "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|getTableName
argument_list|()
argument_list|)
operator|+
literal|" starting at key '"
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|startRow
argument_list|)
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
comment|// save off the simple parameters
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
name|this
operator|.
name|startRow
operator|=
name|startRow
expr_stmt|;
name|this
operator|.
name|scanTime
operator|=
name|timestamp
expr_stmt|;
comment|// save the filter, and make sure that the filter applies to the data
comment|// we're expecting to pull back
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
if|if
condition|(
name|filter
operator|!=
literal|null
condition|)
block|{
name|filter
operator|.
name|validate
argument_list|(
name|columns
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|lastNext
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
comment|//TODO: change visibility to protected
specifier|public
name|void
name|initialize
parameter_list|()
throws|throws
name|IOException
block|{
name|nextScanner
argument_list|(
name|this
operator|.
name|scannerCaching
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|byte
index|[]
index|[]
name|getColumns
parameter_list|()
block|{
return|return
name|columns
return|;
block|}
specifier|protected
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|scanTime
return|;
block|}
specifier|protected
name|RowFilterInterface
name|getFilter
parameter_list|()
block|{
return|return
name|filter
return|;
block|}
comment|/*      * Gets a scanner for the next region.      * Returns false if there are no more scanners.      */
specifier|private
name|boolean
name|nextScanner
parameter_list|(
name|int
name|nbRows
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Close the previous scanner if it's open
if|if
condition|(
name|this
operator|.
name|callable
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|callable
operator|.
name|setClose
argument_list|()
expr_stmt|;
name|getConnection
argument_list|()
operator|.
name|getRegionServerWithRetries
argument_list|(
name|callable
argument_list|)
expr_stmt|;
name|this
operator|.
name|callable
operator|=
literal|null
expr_stmt|;
block|}
comment|// if we're at the end of the table, then close and return false
comment|// to stop iterating
if|if
condition|(
name|currentRegion
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|CLIENT_LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|CLIENT_LOG
operator|.
name|debug
argument_list|(
literal|"Advancing forward from region "
operator|+
name|currentRegion
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|endKey
init|=
name|currentRegion
operator|.
name|getEndKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|endKey
operator|==
literal|null
operator|||
name|Bytes
operator|.
name|equals
argument_list|(
name|endKey
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
operator|||
name|filterSaysStop
argument_list|(
name|endKey
argument_list|)
condition|)
block|{
name|close
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
name|HRegionInfo
name|oldRegion
init|=
name|this
operator|.
name|currentRegion
decl_stmt|;
name|byte
index|[]
name|localStartKey
init|=
name|oldRegion
operator|==
literal|null
condition|?
name|startRow
else|:
name|oldRegion
operator|.
name|getEndKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|CLIENT_LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|CLIENT_LOG
operator|.
name|debug
argument_list|(
literal|"Advancing internal scanner to startKey at '"
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|localStartKey
argument_list|)
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|callable
operator|=
name|getScannerCallable
argument_list|(
name|localStartKey
argument_list|,
name|nbRows
argument_list|)
expr_stmt|;
comment|// open a scanner on the region server starting at the
comment|// beginning of the region
name|getConnection
argument_list|()
operator|.
name|getRegionServerWithRetries
argument_list|(
name|callable
argument_list|)
expr_stmt|;
name|currentRegion
operator|=
name|callable
operator|.
name|getHRegionInfo
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|close
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
return|return
literal|true
return|;
block|}
specifier|protected
name|ScannerCallable
name|getScannerCallable
parameter_list|(
name|byte
index|[]
name|localStartKey
parameter_list|,
name|int
name|nbRows
parameter_list|)
block|{
name|ScannerCallable
name|s
init|=
operator|new
name|ScannerCallable
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getTableName
argument_list|()
argument_list|,
name|columns
argument_list|,
name|localStartKey
argument_list|,
name|scanTime
argument_list|,
name|filter
argument_list|)
decl_stmt|;
name|s
operator|.
name|setCaching
argument_list|(
name|nbRows
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
comment|/**      * @param endKey      * @return Returns true if the passed region endkey is judged beyond      * filter.      */
specifier|private
name|boolean
name|filterSaysStop
parameter_list|(
specifier|final
name|byte
index|[]
name|endKey
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|filter
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Let the filter see current row.
name|this
operator|.
name|filter
operator|.
name|filterRowKey
argument_list|(
name|endKey
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|filter
operator|.
name|filterAllRemaining
argument_list|()
return|;
block|}
specifier|public
name|RowResult
name|next
parameter_list|()
throws|throws
name|IOException
block|{
comment|// If the scanner is closed but there is some rows left in the cache,
comment|// it will first empty it before returning null
if|if
condition|(
name|cache
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|&&
name|this
operator|.
name|closed
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|cache
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|RowResult
index|[]
name|values
init|=
literal|null
decl_stmt|;
name|int
name|countdown
init|=
name|this
operator|.
name|scannerCaching
decl_stmt|;
comment|// We need to reset it if it's a new callable that was created
comment|// with a countdown in nextScanner
name|callable
operator|.
name|setCaching
argument_list|(
name|this
operator|.
name|scannerCaching
argument_list|)
expr_stmt|;
do|do
block|{
try|try
block|{
name|values
operator|=
name|getConnection
argument_list|()
operator|.
name|getRegionServerWithRetries
argument_list|(
name|callable
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|UnknownScannerException
operator|&&
name|lastNext
operator|+
name|scannerTimeout
operator|<
name|System
operator|.
name|currentTimeMillis
argument_list|()
condition|)
block|{
name|ScannerTimeoutException
name|ex
init|=
operator|new
name|ScannerTimeoutException
argument_list|()
decl_stmt|;
name|ex
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
throw|throw
name|e
throw|;
block|}
name|lastNext
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
operator|&&
name|values
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|RowResult
name|rs
range|:
name|values
control|)
block|{
name|cache
operator|.
name|add
argument_list|(
name|rs
argument_list|)
expr_stmt|;
name|countdown
operator|--
expr_stmt|;
block|}
block|}
block|}
do|while
condition|(
name|countdown
operator|>
literal|0
operator|&&
name|nextScanner
argument_list|(
name|countdown
argument_list|)
condition|)
do|;
block|}
if|if
condition|(
name|cache
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|cache
operator|.
name|poll
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * @param nbRows number of rows to return      * @return Between zero and<param>nbRows</param> RowResults      * @throws IOException      */
specifier|public
name|RowResult
index|[]
name|next
parameter_list|(
name|int
name|nbRows
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Collect values to be returned here
name|ArrayList
argument_list|<
name|RowResult
argument_list|>
name|resultSets
init|=
operator|new
name|ArrayList
argument_list|<
name|RowResult
argument_list|>
argument_list|(
name|nbRows
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nbRows
condition|;
name|i
operator|++
control|)
block|{
name|RowResult
name|next
init|=
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
name|resultSets
operator|.
name|add
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
return|return
name|resultSets
operator|.
name|toArray
argument_list|(
operator|new
name|RowResult
index|[
name|resultSets
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|callable
operator|!=
literal|null
condition|)
block|{
name|callable
operator|.
name|setClose
argument_list|()
expr_stmt|;
try|try
block|{
name|getConnection
argument_list|()
operator|.
name|getRegionServerWithRetries
argument_list|(
name|callable
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// We used to catch this error, interpret, and rethrow. However, we
comment|// have since decided that it's not nice for a scanner's close to
comment|// throw exceptions. Chances are it was just an UnknownScanner
comment|// exception due to lease time out.
block|}
name|callable
operator|=
literal|null
expr_stmt|;
block|}
name|closed
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|Iterator
argument_list|<
name|RowResult
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|RowResult
argument_list|>
argument_list|()
block|{
comment|// The next RowResult, possibly pre-read
name|RowResult
name|next
init|=
literal|null
decl_stmt|;
comment|// return true if there is another item pending, false if there isn't.
comment|// this method is where the actual advancing takes place, but you need
comment|// to call next() to consume it. hasNext() will only advance if there
comment|// isn't a pending next().
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
name|next
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|next
operator|=
name|ClientScanner
operator|.
name|this
operator|.
name|next
argument_list|()
expr_stmt|;
return|return
name|next
operator|!=
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|// get the pending next item and advance the iterator. returns null if
comment|// there is no next item.
specifier|public
name|RowResult
name|next
parameter_list|()
block|{
comment|// since hasNext() does the real advancing, we call this to determine
comment|// if there is a next before proceeding.
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// if we get to here, then hasNext() has given us an item to return.
comment|// we want to return the item and then null out the next pointer, so
comment|// we use a temporary variable.
name|RowResult
name|temp
init|=
name|next
decl_stmt|;
name|next
operator|=
literal|null
expr_stmt|;
return|return
name|temp
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
block|}
block|}
end_class

end_unit

