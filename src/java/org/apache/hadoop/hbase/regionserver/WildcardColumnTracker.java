begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2009 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|QueryMatcher
operator|.
name|MatchCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * This class is used for the tracking and enforcement of columns and numbers   * of versions during the course of a Get or Scan operation, when all available  * column qualifiers have been asked for in the query.  *<p>  * This class is utilized by {@link QueryMatcher} through two methods:  *<ul><li>{@link #checkColumn} is called when a Put satisfies all other  * conditions of the query.  This method returns a {@link MatchCode} to define  * what action should be taken.  *<li>{@link #update} is called at the end of every StoreFile or Memcache.  *<p>  * This class is NOT thread-safe as queries are never multi-threaded   */
end_comment

begin_class
specifier|public
class|class
name|WildcardColumnTracker
implements|implements
name|ColumnTracker
block|{
specifier|private
name|int
name|maxVersions
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|ColumnCount
argument_list|>
name|columns
decl_stmt|;
specifier|private
name|int
name|index
decl_stmt|;
specifier|private
name|ColumnCount
name|column
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ColumnCount
argument_list|>
name|newColumns
decl_stmt|;
specifier|private
name|int
name|newIndex
decl_stmt|;
specifier|private
name|ColumnCount
name|newColumn
decl_stmt|;
comment|/**    * Default constructor.    * @param maxVersions maximum versions to return per columns    */
specifier|public
name|WildcardColumnTracker
parameter_list|(
name|int
name|maxVersions
parameter_list|)
block|{
name|this
operator|.
name|maxVersions
operator|=
name|maxVersions
expr_stmt|;
name|reset
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|this
operator|.
name|index
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|column
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|newColumns
operator|=
operator|new
name|ArrayList
argument_list|<
name|ColumnCount
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|newIndex
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|newColumn
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Can never early-out from reading more storefiles in Wildcard case.    */
specifier|public
name|boolean
name|done
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|// wildcard scanners never have column hints.
specifier|public
name|ColumnCount
name|getColumnHint
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**    * Checks against the parameters of the query and the columns which have    * already been processed by this query.    * @param bytes KeyValue buffer    * @param offset offset to the start of the qualifier    * @param length length of the qualifier    * @return MatchCode telling QueryMatcher what action to take    */
specifier|public
name|MatchCode
name|checkColumn
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
comment|// Nothing to match against, add to new and include
if|if
condition|(
name|this
operator|.
name|column
operator|==
literal|null
operator|&&
name|this
operator|.
name|newColumn
operator|==
literal|null
condition|)
block|{
name|newColumns
operator|.
name|add
argument_list|(
operator|new
name|ColumnCount
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|newColumn
operator|=
name|newColumns
operator|.
name|get
argument_list|(
name|newIndex
argument_list|)
expr_stmt|;
return|return
name|MatchCode
operator|.
name|INCLUDE
return|;
block|}
comment|// Nothing old, compare against new
if|if
condition|(
name|this
operator|.
name|column
operator|==
literal|null
operator|&&
name|this
operator|.
name|newColumn
operator|!=
literal|null
condition|)
block|{
name|int
name|ret
init|=
name|Bytes
operator|.
name|compareTo
argument_list|(
name|newColumn
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|newColumn
operator|.
name|getOffset
argument_list|()
argument_list|,
name|newColumn
operator|.
name|getLength
argument_list|()
argument_list|,
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
decl_stmt|;
comment|// Same column
if|if
condition|(
name|ret
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|newColumn
operator|.
name|increment
argument_list|()
operator|>
name|this
operator|.
name|maxVersions
condition|)
block|{
return|return
name|MatchCode
operator|.
name|SKIP
return|;
block|}
return|return
name|MatchCode
operator|.
name|INCLUDE
return|;
block|}
comment|// Specified column is bigger than current column
comment|// Move down current column and check again
if|if
condition|(
name|ret
operator|<=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
operator|++
name|newIndex
operator|==
name|newColumns
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// No more, add to end and include
name|newColumns
operator|.
name|add
argument_list|(
operator|new
name|ColumnCount
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|newColumn
operator|=
name|newColumns
operator|.
name|get
argument_list|(
name|newIndex
argument_list|)
expr_stmt|;
return|return
name|MatchCode
operator|.
name|INCLUDE
return|;
block|}
name|this
operator|.
name|newColumn
operator|=
name|newColumns
operator|.
name|get
argument_list|(
name|newIndex
argument_list|)
expr_stmt|;
return|return
name|checkColumn
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
return|;
block|}
comment|// ret>= 1
comment|// Specified column is smaller than current column
comment|// Nothing to match against, add to new and include
name|newColumns
operator|.
name|add
argument_list|(
operator|new
name|ColumnCount
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|newColumn
operator|=
name|newColumns
operator|.
name|get
argument_list|(
operator|++
name|newIndex
argument_list|)
expr_stmt|;
return|return
name|MatchCode
operator|.
name|INCLUDE
return|;
block|}
comment|// Nothing new, compare against old
if|if
condition|(
name|this
operator|.
name|newColumn
operator|==
literal|null
operator|&&
name|this
operator|.
name|column
operator|!=
literal|null
condition|)
block|{
name|int
name|ret
init|=
name|Bytes
operator|.
name|compareTo
argument_list|(
name|column
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|column
operator|.
name|getOffset
argument_list|()
argument_list|,
name|column
operator|.
name|getLength
argument_list|()
argument_list|,
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
decl_stmt|;
comment|// Same column
if|if
condition|(
name|ret
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|column
operator|.
name|increment
argument_list|()
operator|>
name|this
operator|.
name|maxVersions
condition|)
block|{
return|return
name|MatchCode
operator|.
name|SKIP
return|;
block|}
return|return
name|MatchCode
operator|.
name|INCLUDE
return|;
block|}
comment|// Specified column is bigger than current column
comment|// Move down current column and check again
if|if
condition|(
name|ret
operator|<=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
operator|++
name|index
operator|==
name|columns
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// No more, add to new and include (new was empty prior to this)
name|newColumns
operator|.
name|add
argument_list|(
operator|new
name|ColumnCount
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|newColumn
operator|=
name|newColumns
operator|.
name|get
argument_list|(
name|newIndex
argument_list|)
expr_stmt|;
name|this
operator|.
name|column
operator|=
literal|null
expr_stmt|;
return|return
name|MatchCode
operator|.
name|INCLUDE
return|;
block|}
name|this
operator|.
name|column
operator|=
name|columns
operator|.
name|get
argument_list|(
name|index
argument_list|)
expr_stmt|;
return|return
name|checkColumn
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
return|;
block|}
comment|// ret>= 1
comment|// Specified column is smaller than current column
comment|// Nothing to match against, add to new and include
name|newColumns
operator|.
name|add
argument_list|(
operator|new
name|ColumnCount
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|newColumn
operator|=
name|newColumns
operator|.
name|get
argument_list|(
name|newIndex
argument_list|)
expr_stmt|;
return|return
name|MatchCode
operator|.
name|INCLUDE
return|;
block|}
comment|// There are new and old, figure which to check first
name|int
name|ret
init|=
name|Bytes
operator|.
name|compareTo
argument_list|(
name|column
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|column
operator|.
name|getOffset
argument_list|()
argument_list|,
name|column
operator|.
name|getLength
argument_list|()
argument_list|,
name|newColumn
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|newColumn
operator|.
name|getOffset
argument_list|()
argument_list|,
name|newColumn
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
comment|// Old is smaller than new, compare against old
if|if
condition|(
name|ret
operator|<=
operator|-
literal|1
condition|)
block|{
name|ret
operator|=
name|Bytes
operator|.
name|compareTo
argument_list|(
name|column
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|column
operator|.
name|getOffset
argument_list|()
argument_list|,
name|column
operator|.
name|getLength
argument_list|()
argument_list|,
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
comment|// Same column
if|if
condition|(
name|ret
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|column
operator|.
name|increment
argument_list|()
operator|>
name|this
operator|.
name|maxVersions
condition|)
block|{
return|return
name|MatchCode
operator|.
name|SKIP
return|;
block|}
return|return
name|MatchCode
operator|.
name|INCLUDE
return|;
block|}
comment|// Specified column is bigger than current column
comment|// Move down current column and check again
if|if
condition|(
name|ret
operator|<=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
operator|++
name|index
operator|==
name|columns
operator|.
name|size
argument_list|()
condition|)
block|{
name|this
operator|.
name|column
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|column
operator|=
name|columns
operator|.
name|get
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
return|return
name|checkColumn
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
return|;
block|}
comment|// ret>= 1
comment|// Specified column is smaller than current column
comment|// Nothing to match against, add to new and include
name|newColumns
operator|.
name|add
argument_list|(
operator|new
name|ColumnCount
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|MatchCode
operator|.
name|INCLUDE
return|;
block|}
comment|// Cannot be equal, so ret>= 1
comment|// New is smaller than old, compare against new
name|ret
operator|=
name|Bytes
operator|.
name|compareTo
argument_list|(
name|newColumn
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|newColumn
operator|.
name|getOffset
argument_list|()
argument_list|,
name|newColumn
operator|.
name|getLength
argument_list|()
argument_list|,
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
comment|// Same column
if|if
condition|(
name|ret
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|newColumn
operator|.
name|increment
argument_list|()
operator|>
name|this
operator|.
name|maxVersions
condition|)
block|{
return|return
name|MatchCode
operator|.
name|SKIP
return|;
block|}
return|return
name|MatchCode
operator|.
name|INCLUDE
return|;
block|}
comment|// Specified column is bigger than current column
comment|// Move down current column and check again
if|if
condition|(
name|ret
operator|<=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
operator|++
name|newIndex
operator|==
name|newColumns
operator|.
name|size
argument_list|()
condition|)
block|{
name|this
operator|.
name|newColumn
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|newColumn
operator|=
name|newColumns
operator|.
name|get
argument_list|(
name|newIndex
argument_list|)
expr_stmt|;
block|}
return|return
name|checkColumn
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
return|;
block|}
comment|// ret>= 1
comment|// Specified column is smaller than current column
comment|// Nothing to match against, add to new and include
name|newColumns
operator|.
name|add
argument_list|(
operator|new
name|ColumnCount
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|MatchCode
operator|.
name|INCLUDE
return|;
block|}
comment|/**    * Called at the end of every StoreFile or Memcache.    */
specifier|public
name|void
name|update
parameter_list|()
block|{
comment|// If no previous columns, use new columns and return
if|if
condition|(
name|this
operator|.
name|columns
operator|==
literal|null
operator|||
name|this
operator|.
name|columns
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|newColumns
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|finalize
argument_list|(
name|newColumns
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
comment|// If no new columns, retain previous columns and return
if|if
condition|(
name|this
operator|.
name|newColumns
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|this
operator|.
name|index
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|column
operator|=
name|this
operator|.
name|columns
operator|.
name|get
argument_list|(
name|index
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Merge previous columns with new columns
comment|// There will be no overlapping
name|List
argument_list|<
name|ColumnCount
argument_list|>
name|mergeColumns
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnCount
argument_list|>
argument_list|(
name|columns
operator|.
name|size
argument_list|()
operator|+
name|newColumns
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|index
operator|=
literal|0
expr_stmt|;
name|newIndex
operator|=
literal|0
expr_stmt|;
name|column
operator|=
name|columns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|newColumn
operator|=
name|newColumns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|ret
init|=
name|Bytes
operator|.
name|compareTo
argument_list|(
name|column
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|column
operator|.
name|getOffset
argument_list|()
argument_list|,
name|column
operator|.
name|getLength
argument_list|()
argument_list|,
name|newColumn
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|newColumn
operator|.
name|getOffset
argument_list|()
argument_list|,
name|newColumn
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
comment|// Existing is smaller than new, add existing and iterate it
if|if
condition|(
name|ret
operator|<=
operator|-
literal|1
condition|)
block|{
name|mergeColumns
operator|.
name|add
argument_list|(
name|column
argument_list|)
expr_stmt|;
if|if
condition|(
operator|++
name|index
operator|==
name|columns
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// No more existing left, merge down rest of new and return
name|mergeDown
argument_list|(
name|mergeColumns
argument_list|,
name|newColumns
argument_list|,
name|newIndex
argument_list|)
expr_stmt|;
name|finalize
argument_list|(
name|mergeColumns
argument_list|)
expr_stmt|;
return|return;
block|}
name|column
operator|=
name|columns
operator|.
name|get
argument_list|(
name|index
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// New is smaller than existing, add new and iterate it
name|mergeColumns
operator|.
name|add
argument_list|(
name|newColumn
argument_list|)
expr_stmt|;
if|if
condition|(
operator|++
name|newIndex
operator|==
name|newColumns
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// No more new left, merge down rest of existing and return
name|mergeDown
argument_list|(
name|mergeColumns
argument_list|,
name|columns
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|finalize
argument_list|(
name|mergeColumns
argument_list|)
expr_stmt|;
return|return;
block|}
name|newColumn
operator|=
name|newColumns
operator|.
name|get
argument_list|(
name|newIndex
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
specifier|private
name|void
name|mergeDown
parameter_list|(
name|List
argument_list|<
name|ColumnCount
argument_list|>
name|mergeColumns
parameter_list|,
name|List
argument_list|<
name|ColumnCount
argument_list|>
name|srcColumns
parameter_list|,
name|int
name|srcIndex
parameter_list|)
block|{
name|int
name|index
init|=
name|srcIndex
decl_stmt|;
while|while
condition|(
name|index
operator|<
name|srcColumns
operator|.
name|size
argument_list|()
condition|)
block|{
name|mergeColumns
operator|.
name|add
argument_list|(
name|srcColumns
operator|.
name|get
argument_list|(
name|index
operator|++
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|finalize
parameter_list|(
name|List
argument_list|<
name|ColumnCount
argument_list|>
name|mergeColumns
parameter_list|)
block|{
name|this
operator|.
name|columns
operator|=
name|mergeColumns
expr_stmt|;
name|this
operator|.
name|index
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|column
operator|=
name|this
operator|.
name|columns
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|?
name|columns
operator|.
name|get
argument_list|(
name|index
argument_list|)
else|:
literal|null
expr_stmt|;
name|this
operator|.
name|newColumns
operator|=
operator|new
name|ArrayList
argument_list|<
name|ColumnCount
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|newIndex
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|newColumn
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

end_unit

