begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2008 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Chore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLog
import|;
end_import

begin_comment
comment|/**  * LogFlusher is a Chore that wakes every threadWakeInterval and calls  * the HLog to do an optional sync if there are unflushed entries, and the  * optionalFlushInterval has passed since the last flush.  */
end_comment

begin_class
specifier|public
class|class
name|LogFlusher
extends|extends
name|Chore
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|LogFlusher
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AtomicReference
argument_list|<
name|HLog
argument_list|>
name|log
init|=
operator|new
name|AtomicReference
argument_list|<
name|HLog
argument_list|>
argument_list|(
literal|null
argument_list|)
decl_stmt|;
specifier|public
name|LogFlusher
parameter_list|(
specifier|final
name|int
name|period
parameter_list|,
specifier|final
name|AtomicBoolean
name|stop
parameter_list|)
block|{
name|super
argument_list|(
name|period
argument_list|,
name|stop
argument_list|)
expr_stmt|;
block|}
name|void
name|setHLog
parameter_list|(
name|HLog
name|log
parameter_list|)
block|{
name|this
operator|.
name|log
operator|.
name|set
argument_list|(
name|log
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|chore
parameter_list|()
block|{
name|HLog
name|hlog
init|=
name|log
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|hlog
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|hlog
operator|.
name|sync
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// force a flush
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"LogFlusher got exception while syncing: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

