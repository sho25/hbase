begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2008 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RemoteExceptionHandler
import|;
end_import

begin_comment
comment|/**  * Runs periodically to determine if the HLog should be rolled  *   * NOTE: This class extends Thread rather than Chore because the sleep time  * can be interrupted when there is something to do, rather than the Chore  * sleep time which is invariant.  */
end_comment

begin_class
class|class
name|LogRoller
extends|extends
name|Thread
implements|implements
name|LogRollListener
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|LogRoller
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ReentrantLock
name|rollLock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|rollLog
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|HRegionServer
name|server
decl_stmt|;
comment|/** @param server */
specifier|public
name|LogRoller
parameter_list|(
specifier|final
name|HRegionServer
name|server
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|server
operator|=
name|server
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
operator|!
name|server
operator|.
name|isStopRequested
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|rollLog
operator|.
name|get
argument_list|()
condition|)
block|{
synchronized|synchronized
init|(
name|rollLog
init|)
block|{
try|try
block|{
name|rollLog
operator|.
name|wait
argument_list|(
name|server
operator|.
name|threadWakeFrequency
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
continue|continue;
block|}
block|}
continue|continue;
block|}
name|rollLock
operator|.
name|lock
argument_list|()
expr_stmt|;
comment|// Don't interrupt us. We're working
try|try
block|{
name|server
operator|.
name|getLog
argument_list|()
operator|.
name|rollWriter
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FailedLogCloseException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Forcing server shutdown"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|server
operator|.
name|abort
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Log rolling failed with ioe: "
argument_list|,
name|RemoteExceptionHandler
operator|.
name|checkIOException
argument_list|(
name|ex
argument_list|)
argument_list|)
expr_stmt|;
name|server
operator|.
name|checkFileSystem
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Log rolling failed"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|server
operator|.
name|checkFileSystem
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|rollLog
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|rollLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"LogRoller exiting."
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|logRollRequested
parameter_list|()
block|{
synchronized|synchronized
init|(
name|rollLog
init|)
block|{
name|rollLog
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rollLog
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Called by region server to wake up this thread if it sleeping.    * It is sleeping if rollLock is not held.    */
specifier|public
name|void
name|interruptIfNecessary
parameter_list|()
block|{
try|try
block|{
name|rollLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|this
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|rollLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

