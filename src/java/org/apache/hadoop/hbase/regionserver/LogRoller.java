begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2008 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RemoteExceptionHandler
import|;
end_import

begin_comment
comment|/** Runs periodically to determine if the HLog should be rolled */
end_comment

begin_class
class|class
name|LogRoller
extends|extends
name|Thread
implements|implements
name|LogRollListener
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|LogRoller
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Integer
name|rollLock
init|=
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|long
name|optionalLogRollInterval
decl_stmt|;
specifier|private
name|long
name|lastLogRollTime
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|rollLog
decl_stmt|;
specifier|private
specifier|final
name|HRegionServer
name|server
decl_stmt|;
specifier|private
specifier|final
name|HBaseConfiguration
name|conf
decl_stmt|;
comment|/** constructor */
specifier|public
name|LogRoller
parameter_list|(
specifier|final
name|HRegionServer
name|server
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|server
operator|=
name|server
expr_stmt|;
name|conf
operator|=
name|server
operator|.
name|conf
expr_stmt|;
name|this
operator|.
name|optionalLogRollInterval
operator|=
name|conf
operator|.
name|getLong
argument_list|(
literal|"hbase.regionserver.optionallogrollinterval"
argument_list|,
literal|30L
operator|*
literal|60L
operator|*
literal|1000L
argument_list|)
expr_stmt|;
name|this
operator|.
name|rollLog
operator|=
literal|false
expr_stmt|;
name|lastLogRollTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
operator|!
name|server
operator|.
name|isStopRequested
argument_list|()
condition|)
block|{
while|while
condition|(
operator|!
name|rollLog
operator|&&
operator|!
name|server
operator|.
name|isStopRequested
argument_list|()
condition|)
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|lastLogRollTime
operator|+
name|this
operator|.
name|optionalLogRollInterval
operator|<=
name|now
condition|)
block|{
name|rollLog
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|lastLogRollTime
operator|=
name|now
expr_stmt|;
block|}
else|else
block|{
synchronized|synchronized
init|(
name|rollLock
init|)
block|{
try|try
block|{
name|rollLock
operator|.
name|wait
argument_list|(
name|server
operator|.
name|threadWakeFrequency
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
continue|continue;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|rollLog
condition|)
block|{
comment|// There's only two reasons to break out of the while loop.
comment|// 1. Log roll requested
comment|// 2. Stop requested
comment|// so if a log roll was not requested, continue and break out of loop
continue|continue;
block|}
synchronized|synchronized
init|(
name|server
operator|.
name|logRollerLock
init|)
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Rolling hlog. Number of entries: "
operator|+
name|server
operator|.
name|getLog
argument_list|()
operator|.
name|getNumEntries
argument_list|()
argument_list|)
expr_stmt|;
name|server
operator|.
name|getLog
argument_list|()
operator|.
name|rollWriter
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Log rolling failed"
argument_list|,
name|RemoteExceptionHandler
operator|.
name|checkIOException
argument_list|(
name|ex
argument_list|)
argument_list|)
expr_stmt|;
name|server
operator|.
name|checkFileSystem
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Log rolling failed"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|server
operator|.
name|checkFileSystem
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|rollLog
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/** {@inheritDoc} */
specifier|public
name|void
name|logRollRequested
parameter_list|()
block|{
synchronized|synchronized
init|(
name|rollLock
init|)
block|{
name|rollLog
operator|=
literal|true
expr_stmt|;
name|rollLock
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

