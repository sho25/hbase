begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2008 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HStoreKey
import|;
end_import

begin_comment
comment|/**  * Pass this class into {@link org.apache.hadoop.io.MapFile}.getClosest when  * searching for the key that comes BEFORE this one but NOT this one.  THis  * class will return> 0 when asked to compare against itself rather than 0.  * This is a hack for case where getClosest returns a deleted key and we want  * to get the previous.  Can't unless use use this class; it'll just keep  * returning us the deleted key (getClosest gets exact or nearest before when  * you pass true argument).  TODO: Throw this class away when MapFile has  * a real 'previous' method.  See HBASE-751.  */
end_comment

begin_class
specifier|public
class|class
name|BeforeThisStoreKey
extends|extends
name|HStoreKey
block|{
specifier|private
specifier|final
name|HStoreKey
name|beforeThisKey
decl_stmt|;
comment|/**    * @param beforeThisKey     */
specifier|public
name|BeforeThisStoreKey
parameter_list|(
specifier|final
name|HStoreKey
name|beforeThisKey
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|beforeThisKey
operator|=
name|beforeThisKey
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|int
name|result
init|=
name|this
operator|.
name|beforeThisKey
operator|.
name|compareTo
argument_list|(
name|o
argument_list|)
decl_stmt|;
return|return
name|result
operator|==
literal|0
condition|?
operator|-
literal|1
else|:
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|Object
name|obj
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getColumn
parameter_list|()
block|{
return|return
name|this
operator|.
name|beforeThisKey
operator|.
name|getColumn
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getRow
parameter_list|()
block|{
return|return
name|this
operator|.
name|beforeThisKey
operator|.
name|getRow
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getSize
parameter_list|()
block|{
return|return
name|this
operator|.
name|beforeThisKey
operator|.
name|getSize
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|this
operator|.
name|beforeThisKey
operator|.
name|getTimestamp
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|this
operator|.
name|beforeThisKey
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matchesRowCol
parameter_list|(
name|HStoreKey
name|other
parameter_list|)
block|{
return|return
name|this
operator|.
name|beforeThisKey
operator|.
name|matchesRowCol
argument_list|(
name|other
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matchesRowFamily
parameter_list|(
name|HStoreKey
name|that
parameter_list|)
block|{
return|return
name|this
operator|.
name|beforeThisKey
operator|.
name|matchesRowFamily
argument_list|(
name|that
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matchesWithoutColumn
parameter_list|(
name|HStoreKey
name|other
parameter_list|)
block|{
return|return
name|this
operator|.
name|beforeThisKey
operator|.
name|matchesWithoutColumn
argument_list|(
name|other
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|beforeThisKey
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|set
parameter_list|(
name|HStoreKey
name|k
parameter_list|)
block|{
name|this
operator|.
name|beforeThisKey
operator|.
name|set
argument_list|(
name|k
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setColumn
parameter_list|(
name|byte
index|[]
name|c
parameter_list|)
block|{
name|this
operator|.
name|beforeThisKey
operator|.
name|setColumn
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setRow
parameter_list|(
name|byte
index|[]
name|newrow
parameter_list|)
block|{
name|this
operator|.
name|beforeThisKey
operator|.
name|setRow
argument_list|(
name|newrow
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setVersion
parameter_list|(
name|long
name|timestamp
parameter_list|)
block|{
name|this
operator|.
name|beforeThisKey
operator|.
name|setVersion
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|this
operator|.
name|beforeThisKey
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|beforeThisKey
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|HRegionInfo
name|getHRegionInfo
parameter_list|()
block|{
return|return
name|this
operator|.
name|beforeThisKey
operator|.
name|getHRegionInfo
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setHRegionInfo
parameter_list|(
specifier|final
name|HRegionInfo
name|hri
parameter_list|)
block|{
name|this
operator|.
name|beforeThisKey
operator|.
name|setHRegionInfo
argument_list|(
name|hri
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

