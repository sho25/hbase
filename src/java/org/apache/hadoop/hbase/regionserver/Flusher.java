begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2008 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ConcurrentModificationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DroppedSnapshotException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RemoteExceptionHandler
import|;
end_import

begin_comment
comment|/**  * Thread that flushes cache on request  * @see FlushRequester  */
end_comment

begin_class
class|class
name|Flusher
extends|extends
name|Thread
implements|implements
name|FlushRequester
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Flusher
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|BlockingQueue
argument_list|<
name|HRegion
argument_list|>
name|flushQueue
init|=
operator|new
name|LinkedBlockingQueue
argument_list|<
name|HRegion
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|HashSet
argument_list|<
name|HRegion
argument_list|>
name|regionsInQueue
init|=
operator|new
name|HashSet
argument_list|<
name|HRegion
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|long
name|threadWakeFrequency
decl_stmt|;
specifier|private
specifier|final
name|long
name|optionalFlushPeriod
decl_stmt|;
specifier|private
specifier|final
name|HRegionServer
name|server
decl_stmt|;
specifier|private
specifier|final
name|ReentrantLock
name|lock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
specifier|private
name|long
name|lastOptionalCheck
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|protected
specifier|final
name|long
name|globalMemcacheLimit
decl_stmt|;
specifier|protected
specifier|final
name|long
name|globalMemcacheLimitLowMark
decl_stmt|;
comment|/**    * @param conf    * @param server    */
specifier|public
name|Flusher
parameter_list|(
specifier|final
name|HBaseConfiguration
name|conf
parameter_list|,
specifier|final
name|HRegionServer
name|server
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|server
operator|=
name|server
expr_stmt|;
name|optionalFlushPeriod
operator|=
name|conf
operator|.
name|getLong
argument_list|(
literal|"hbase.regionserver.optionalcacheflushinterval"
argument_list|,
literal|30
operator|*
literal|60
operator|*
literal|1000L
argument_list|)
expr_stmt|;
name|threadWakeFrequency
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|HConstants
operator|.
name|THREAD_WAKE_FREQUENCY
argument_list|,
literal|10
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// default memcache limit of 512MB
name|globalMemcacheLimit
operator|=
name|conf
operator|.
name|getLong
argument_list|(
literal|"hbase.regionserver.globalMemcacheLimit"
argument_list|,
literal|512
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
comment|// default memcache low mark limit of 256MB, which is half the upper limit
name|globalMemcacheLimitLowMark
operator|=
name|conf
operator|.
name|getLong
argument_list|(
literal|"hbase.regionserver.globalMemcacheLimitLowMark"
argument_list|,
name|globalMemcacheLimit
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
operator|!
name|server
operator|.
name|isStopRequested
argument_list|()
condition|)
block|{
name|HRegion
name|r
init|=
literal|null
decl_stmt|;
try|try
block|{
name|enqueueOptionalFlushRegions
argument_list|()
expr_stmt|;
name|r
operator|=
name|flushQueue
operator|.
name|poll
argument_list|(
name|threadWakeFrequency
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|flushRegion
argument_list|(
name|r
argument_list|,
literal|false
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
continue|continue;
block|}
catch|catch
parameter_list|(
name|ConcurrentModificationException
name|ex
parameter_list|)
block|{
continue|continue;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cache flush failed"
operator|+
operator|(
name|r
operator|!=
literal|null
condition|?
operator|(
literal|" for region "
operator|+
name|r
operator|.
name|getRegionName
argument_list|()
operator|)
else|:
literal|""
operator|)
argument_list|,
name|ex
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|server
operator|.
name|checkFileSystem
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
name|regionsInQueue
operator|.
name|clear
argument_list|()
expr_stmt|;
name|flushQueue
operator|.
name|clear
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|getName
argument_list|()
operator|+
literal|" exiting"
argument_list|)
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|void
name|request
parameter_list|(
name|HRegion
name|r
parameter_list|)
block|{
name|addRegion
argument_list|(
name|r
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Only interrupt once it's done with a run through the work loop.    */
name|void
name|interruptIfNecessary
parameter_list|()
block|{
if|if
condition|(
name|lock
operator|.
name|tryLock
argument_list|()
condition|)
block|{
name|this
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
comment|/*    * Flush a region.    *     * @param region the region to be flushed    * @param removeFromQueue True if the region needs to be removed from the    * flush queue. False if called from the main flusher run loop and true if    * called from flushSomeRegions to relieve memory pressure from the region    * server.  If<code>true</code>, we are in a state of emergency; we are not    * taking on updates regionserver-wide, not until memory is flushed.  In this    * case, do not let a compaction run inline with blocked updates. Compactions    * can take a long time. Stopping compactions, there is a danger that number    * of flushes will overwhelm compaction on a busy server; we'll have to see.    * That compactions do not run when called out of flushSomeRegions means that    * compactions can be reported by the historian without danger of deadlock    * (HBASE-670).    *     *<p>In the main run loop, regions have already been removed from the flush    * queue, and if this method is called for the relief of memory pressure,    * this may not be necessarily true. We want to avoid trying to remove     * region from the queue because if it has already been removed, it requires a    * sequential scan of the queue to determine that it is not in the queue.    *     *<p>If called from flushSomeRegions, the region may be in the queue but    * it may have been determined that the region had a significant amount of     * memory in use and needed to be flushed to relieve memory pressure. In this    * case, its flush may preempt the pending request in the queue, and if so,    * it needs to be removed from the queue to avoid flushing the region multiple    * times.    *     * @return true if the region was successfully flushed, false otherwise. If     * false, there will be accompanying log messages explaining why the log was    * not flushed.    */
specifier|private
name|boolean
name|flushRegion
parameter_list|(
name|HRegion
name|region
parameter_list|,
name|boolean
name|removeFromQueue
parameter_list|)
block|{
synchronized|synchronized
init|(
name|regionsInQueue
init|)
block|{
comment|// take the region out of the set. If removeFromQueue is true, remove it
comment|// from the queue too if it is there. This didn't used to be a constraint,
comment|// but now that HBASE-512 is in play, we need to try and limit
comment|// double-flushing of regions.
if|if
condition|(
name|regionsInQueue
operator|.
name|remove
argument_list|(
name|region
argument_list|)
operator|&&
name|removeFromQueue
condition|)
block|{
name|flushQueue
operator|.
name|remove
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// See javadoc comment above for removeFromQueue on why we do not
comment|// compact if removeFromQueue is true.
if|if
condition|(
name|region
operator|.
name|flushcache
argument_list|()
operator|&&
operator|!
name|removeFromQueue
condition|)
block|{
name|server
operator|.
name|compactSplitThread
operator|.
name|compactionRequested
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DroppedSnapshotException
name|ex
parameter_list|)
block|{
comment|// Cache flush can fail in a few places.  If it fails in a critical
comment|// section, we get a DroppedSnapshotException and a replay of hlog
comment|// is required. Currently the only way to do this is a restart of
comment|// the server.  Abort because hdfs is probably bad (HBASE-644 is a case
comment|// where hdfs was bad but passed the hdfs check).
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Replay of hlog required. Forcing server restart"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|server
operator|.
name|abort
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cache flush failed"
operator|+
operator|(
name|region
operator|!=
literal|null
condition|?
operator|(
literal|" for region "
operator|+
name|region
operator|.
name|getRegionName
argument_list|()
operator|)
else|:
literal|""
operator|)
argument_list|,
name|RemoteExceptionHandler
operator|.
name|checkIOException
argument_list|(
name|ex
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|server
operator|.
name|checkFileSystem
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Find the regions that should be optionally flushed and put them on the    * flush queue.    */
specifier|private
name|void
name|enqueueOptionalFlushRegions
parameter_list|()
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|now
operator|-
name|threadWakeFrequency
operator|>
name|lastOptionalCheck
condition|)
block|{
name|lastOptionalCheck
operator|=
name|now
expr_stmt|;
comment|// Queue up regions for optional flush if they need it
name|Set
argument_list|<
name|HRegion
argument_list|>
name|regions
init|=
name|server
operator|.
name|getRegionsToCheck
argument_list|()
decl_stmt|;
for|for
control|(
name|HRegion
name|region
range|:
name|regions
control|)
block|{
name|optionallyAddRegion
argument_list|(
name|region
argument_list|,
name|now
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*    * Add region if not already added and if optional flush period has been    * exceeded.    * @param r Region to add.    * @param now The 'now' to use.  Set last flush time to this value.    */
specifier|private
name|void
name|optionallyAddRegion
parameter_list|(
specifier|final
name|HRegion
name|r
parameter_list|,
specifier|final
name|long
name|now
parameter_list|)
block|{
synchronized|synchronized
init|(
name|regionsInQueue
init|)
block|{
if|if
condition|(
operator|!
name|regionsInQueue
operator|.
name|contains
argument_list|(
name|r
argument_list|)
operator|&&
operator|(
name|now
operator|-
name|optionalFlushPeriod
operator|)
operator|>
name|r
operator|.
name|getLastFlushTime
argument_list|()
condition|)
block|{
name|addRegion
argument_list|(
name|r
argument_list|,
name|now
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*    * Add region if not already added.    * @param r Region to add.    * @param now The 'now' to use.  Set last flush time to this value.    */
specifier|private
name|void
name|addRegion
parameter_list|(
specifier|final
name|HRegion
name|r
parameter_list|,
specifier|final
name|long
name|now
parameter_list|)
block|{
synchronized|synchronized
init|(
name|regionsInQueue
init|)
block|{
if|if
condition|(
operator|!
name|regionsInQueue
operator|.
name|contains
argument_list|(
name|r
argument_list|)
condition|)
block|{
name|regionsInQueue
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|flushQueue
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|r
operator|.
name|setLastFlushTime
argument_list|(
name|now
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Check if the regionserver's memcache memory usage is greater than the     * limit. If so, flush regions with the biggest memcaches until we're down    * to the lower limit. This method blocks callers until we're down to a safe    * amount of memcache consumption.    */
specifier|public
name|void
name|reclaimMemcacheMemory
parameter_list|()
block|{
if|if
condition|(
name|server
operator|.
name|getGlobalMemcacheSize
argument_list|()
operator|>=
name|globalMemcacheLimit
condition|)
block|{
name|flushSomeRegions
argument_list|()
expr_stmt|;
block|}
block|}
comment|/*    * Emergency!  Need to flush memory.  While running this method all updates    * to this regionserver are blocked.    */
specifier|private
specifier|synchronized
name|void
name|flushSomeRegions
parameter_list|()
block|{
name|SortedMap
argument_list|<
name|Long
argument_list|,
name|HRegion
argument_list|>
name|m
init|=
name|this
operator|.
name|server
operator|.
name|getCopyOfOnlineRegionsSortedBySize
argument_list|()
decl_stmt|;
comment|// keep flushing until we hit the low water mark
while|while
condition|(
name|server
operator|.
name|getGlobalMemcacheSize
argument_list|()
operator|>=
name|globalMemcacheLimitLowMark
condition|)
block|{
comment|// flush the region with the biggest memcache
name|HRegion
name|biggestMemcacheRegion
init|=
name|m
operator|.
name|remove
argument_list|(
name|m
operator|.
name|firstKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|flushRegion
argument_list|(
name|biggestMemcacheRegion
argument_list|,
literal|true
argument_list|)
condition|)
block|{
comment|// Something bad happened - give up.
break|break;
block|}
block|}
block|}
block|}
end_class

end_unit

