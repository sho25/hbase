begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2009 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|RuntimeMXBean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|rmi
operator|.
name|UnexpectedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArraySet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|HeapSize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|DeleteCompare
operator|.
name|DeleteCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ClassSize
import|;
end_import

begin_comment
comment|/**  * The MemStore holds in-memory modifications to the Store.  Modifications  * are {@link KeyValue}s.  When asked to flush, current memstore is moved  * to snapshot and is cleared.  We continue to serve edits out of new memstore  * and backing snapshot until flusher reports in that the flush succeeded. At  * this point we let the snapshot go.  * TODO: Adjust size of the memstore when we remove items because they have  * been deleted.  * TODO: With new KVSLS, need to make sure we update HeapSize with difference  * in KV size.  */
end_comment

begin_class
specifier|public
class|class
name|MemStore
implements|implements
name|HeapSize
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MemStore
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// MemStore.  Use a KeyValueSkipListSet rather than SkipListSet because of the
comment|// better semantics.  The Map will overwrite if passed a key it already had
comment|// whereas the Set will not add new KV if key is same though value might be
comment|// different.  Value is not important -- just make sure always same
comment|// reference passed.
specifier|volatile
name|KeyValueSkipListSet
name|kvset
decl_stmt|;
comment|// Snapshot of memstore.  Made for flusher.
specifier|volatile
name|KeyValueSkipListSet
name|snapshot
decl_stmt|;
specifier|final
name|ReentrantReadWriteLock
name|lock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
specifier|final
name|KeyValue
operator|.
name|KVComparator
name|comparator
decl_stmt|;
comment|// Used comparing versions -- same r/c and ts but different type.
specifier|final
name|KeyValue
operator|.
name|KVComparator
name|comparatorIgnoreType
decl_stmt|;
comment|// Used comparing versions -- same r/c and type but different timestamp.
specifier|final
name|KeyValue
operator|.
name|KVComparator
name|comparatorIgnoreTimestamp
decl_stmt|;
comment|// Used to track own heapSize
specifier|final
name|AtomicLong
name|size
decl_stmt|;
comment|// All access must be synchronized.
specifier|final
name|CopyOnWriteArraySet
argument_list|<
name|ChangedMemStoreObserver
argument_list|>
name|changedMemStoreObservers
init|=
operator|new
name|CopyOnWriteArraySet
argument_list|<
name|ChangedMemStoreObserver
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Default constructor. Used for tests.    */
specifier|public
name|MemStore
parameter_list|()
block|{
name|this
argument_list|(
name|KeyValue
operator|.
name|COMPARATOR
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructor.    * @param ttl The TTL for cache entries, in milliseconds.    * @param c    */
specifier|public
name|MemStore
parameter_list|(
specifier|final
name|KeyValue
operator|.
name|KVComparator
name|c
parameter_list|)
block|{
name|this
operator|.
name|comparator
operator|=
name|c
expr_stmt|;
name|this
operator|.
name|comparatorIgnoreTimestamp
operator|=
name|this
operator|.
name|comparator
operator|.
name|getComparatorIgnoringTimestamps
argument_list|()
expr_stmt|;
name|this
operator|.
name|comparatorIgnoreType
operator|=
name|this
operator|.
name|comparator
operator|.
name|getComparatorIgnoringType
argument_list|()
expr_stmt|;
name|this
operator|.
name|kvset
operator|=
operator|new
name|KeyValueSkipListSet
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|this
operator|.
name|snapshot
operator|=
operator|new
name|KeyValueSkipListSet
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|this
operator|.
name|size
operator|=
operator|new
name|AtomicLong
argument_list|(
name|DEEP_OVERHEAD
argument_list|)
expr_stmt|;
block|}
name|void
name|dump
parameter_list|()
block|{
for|for
control|(
name|KeyValue
name|kv
range|:
name|this
operator|.
name|kvset
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|KeyValue
name|kv
range|:
name|this
operator|.
name|snapshot
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Creates a snapshot of the current memstore.    * Snapshot must be cleared by call to {@link #clearSnapshot(java.util.Map)}    * To get the snapshot made by this method, use {@link #getSnapshot()}    */
name|void
name|snapshot
parameter_list|()
block|{
name|this
operator|.
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// If snapshot currently has entries, then flusher failed or didn't call
comment|// cleanup.  Log a warning.
if|if
condition|(
operator|!
name|this
operator|.
name|snapshot
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Snapshot called again without clearing previous. "
operator|+
literal|"Doing nothing. Another ongoing flush or did we fail last attempt?"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|kvset
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|snapshot
operator|=
name|this
operator|.
name|kvset
expr_stmt|;
name|this
operator|.
name|kvset
operator|=
operator|new
name|KeyValueSkipListSet
argument_list|(
name|this
operator|.
name|comparator
argument_list|)
expr_stmt|;
name|tellChangedMemStoreObservers
argument_list|()
expr_stmt|;
comment|// Reset heap to not include any keys
name|this
operator|.
name|size
operator|.
name|set
argument_list|(
name|DEEP_OVERHEAD
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|this
operator|.
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/*    * Tell outstanding scanners that memstore has changed.    */
specifier|private
name|void
name|tellChangedMemStoreObservers
parameter_list|()
block|{
for|for
control|(
name|ChangedMemStoreObserver
name|o
range|:
name|this
operator|.
name|changedMemStoreObservers
control|)
block|{
name|o
operator|.
name|changedMemStore
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Return the current snapshot.    * Called by flusher to get current snapshot made by a previous    * call to {@link #snapshot()}    * @return Return snapshot.    * @see {@link #snapshot()}    * @see {@link #clearSnapshot(java.util.Map)}    */
name|KeyValueSkipListSet
name|getSnapshot
parameter_list|()
block|{
return|return
name|this
operator|.
name|snapshot
return|;
block|}
comment|/**    * The passed snapshot was successfully persisted; it can be let go.    * @param ss The snapshot to clean out.    * @throws UnexpectedException    * @see {@link #snapshot()}    */
name|void
name|clearSnapshot
parameter_list|(
specifier|final
name|KeyValueSkipListSet
name|ss
parameter_list|)
throws|throws
name|UnexpectedException
block|{
name|this
operator|.
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|this
operator|.
name|snapshot
operator|!=
name|ss
condition|)
block|{
throw|throw
operator|new
name|UnexpectedException
argument_list|(
literal|"Current snapshot is "
operator|+
name|this
operator|.
name|snapshot
operator|+
literal|", was passed "
operator|+
name|ss
argument_list|)
throw|;
block|}
comment|// OK. Passed in snapshot is same as current snapshot.  If not-empty,
comment|// create a new snapshot and let the old one go.
if|if
condition|(
operator|!
name|ss
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|snapshot
operator|=
operator|new
name|KeyValueSkipListSet
argument_list|(
name|this
operator|.
name|comparator
argument_list|)
expr_stmt|;
name|tellChangedMemStoreObservers
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|this
operator|.
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Write an update    * @param kv    * @return approximate size of the passed key and value.    */
name|long
name|add
parameter_list|(
specifier|final
name|KeyValue
name|kv
parameter_list|)
block|{
name|long
name|s
init|=
operator|-
literal|1
decl_stmt|;
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|s
operator|=
name|heapSizeChange
argument_list|(
name|kv
argument_list|,
name|this
operator|.
name|kvset
operator|.
name|add
argument_list|(
name|kv
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|size
operator|.
name|addAndGet
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
comment|/**     * Write a delete    * @param delete    * @return approximate size of the passed key and value.    */
name|long
name|delete
parameter_list|(
specifier|final
name|KeyValue
name|delete
parameter_list|)
block|{
name|long
name|s
init|=
literal|0
decl_stmt|;
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
comment|//Have to find out what we want to do here, to find the fastest way of
comment|//removing things that are under a delete.
comment|//Actions that will take place here are:
comment|//1. Insert a delete and remove all the affected entries already in memstore
comment|//2. In the case of a Delete and the matching put is found then don't insert
comment|//   the delete
comment|//TODO Would be nice with if we had an iterator for this, so we could remove
comment|//things that needs to be removed while iterating and don't have to go
comment|//back and do it afterwards
try|try
block|{
name|boolean
name|notpresent
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|deletes
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|SortedSet
argument_list|<
name|KeyValue
argument_list|>
name|tail
init|=
name|this
operator|.
name|kvset
operator|.
name|tailSet
argument_list|(
name|delete
argument_list|)
decl_stmt|;
comment|//Parse the delete, so that it is only done once
name|byte
index|[]
name|deleteBuffer
init|=
name|delete
operator|.
name|getBuffer
argument_list|()
decl_stmt|;
name|int
name|deleteOffset
init|=
name|delete
operator|.
name|getOffset
argument_list|()
decl_stmt|;
name|int
name|deleteKeyLen
init|=
name|Bytes
operator|.
name|toInt
argument_list|(
name|deleteBuffer
argument_list|,
name|deleteOffset
argument_list|)
decl_stmt|;
name|deleteOffset
operator|+=
name|Bytes
operator|.
name|SIZEOF_INT
operator|+
name|Bytes
operator|.
name|SIZEOF_INT
expr_stmt|;
name|short
name|deleteRowLen
init|=
name|Bytes
operator|.
name|toShort
argument_list|(
name|deleteBuffer
argument_list|,
name|deleteOffset
argument_list|)
decl_stmt|;
name|deleteOffset
operator|+=
name|Bytes
operator|.
name|SIZEOF_SHORT
expr_stmt|;
name|int
name|deleteRowOffset
init|=
name|deleteOffset
decl_stmt|;
name|deleteOffset
operator|+=
name|deleteRowLen
expr_stmt|;
name|byte
name|deleteFamLen
init|=
name|deleteBuffer
index|[
name|deleteOffset
index|]
decl_stmt|;
name|deleteOffset
operator|+=
name|Bytes
operator|.
name|SIZEOF_BYTE
operator|+
name|deleteFamLen
expr_stmt|;
name|int
name|deleteQualifierOffset
init|=
name|deleteOffset
decl_stmt|;
name|int
name|deleteQualifierLen
init|=
name|deleteKeyLen
operator|-
name|deleteRowLen
operator|-
name|deleteFamLen
operator|-
name|Bytes
operator|.
name|SIZEOF_SHORT
operator|-
name|Bytes
operator|.
name|SIZEOF_BYTE
operator|-
name|Bytes
operator|.
name|SIZEOF_LONG
operator|-
name|Bytes
operator|.
name|SIZEOF_BYTE
decl_stmt|;
name|deleteOffset
operator|+=
name|deleteQualifierLen
expr_stmt|;
name|int
name|deleteTimestampOffset
init|=
name|deleteOffset
decl_stmt|;
name|deleteOffset
operator|+=
name|Bytes
operator|.
name|SIZEOF_LONG
expr_stmt|;
name|byte
name|deleteType
init|=
name|deleteBuffer
index|[
name|deleteOffset
index|]
decl_stmt|;
comment|//Comparing with tail from memstore
for|for
control|(
name|KeyValue
name|kv
range|:
name|tail
control|)
block|{
name|DeleteCode
name|res
init|=
name|DeleteCompare
operator|.
name|deleteCompare
argument_list|(
name|kv
argument_list|,
name|deleteBuffer
argument_list|,
name|deleteRowOffset
argument_list|,
name|deleteRowLen
argument_list|,
name|deleteQualifierOffset
argument_list|,
name|deleteQualifierLen
argument_list|,
name|deleteTimestampOffset
argument_list|,
name|deleteType
argument_list|,
name|comparator
operator|.
name|getRawComparator
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|==
name|DeleteCode
operator|.
name|DONE
condition|)
block|{
break|break;
block|}
elseif|else
if|if
condition|(
name|res
operator|==
name|DeleteCode
operator|.
name|DELETE
condition|)
block|{
name|deletes
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
comment|// SKIP
block|}
comment|//Delete all the entries effected by the last added delete
for|for
control|(
name|KeyValue
name|kv
range|:
name|deletes
control|)
block|{
name|notpresent
operator|=
name|this
operator|.
name|kvset
operator|.
name|remove
argument_list|(
name|kv
argument_list|)
expr_stmt|;
name|s
operator|-=
name|heapSizeChange
argument_list|(
name|kv
argument_list|,
name|notpresent
argument_list|)
expr_stmt|;
block|}
comment|// Adding the delete to memstore. Add any value, as long as
comment|// same instance each time.
name|s
operator|+=
name|heapSizeChange
argument_list|(
name|delete
argument_list|,
name|this
operator|.
name|kvset
operator|.
name|add
argument_list|(
name|delete
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|size
operator|.
name|addAndGet
argument_list|(
name|s
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
comment|/**    * @param kv Find the row that comes after this one.  If null, we return the    * first.    * @return Next row or null if none found.    */
name|KeyValue
name|getNextRow
parameter_list|(
specifier|final
name|KeyValue
name|kv
parameter_list|)
block|{
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|getLowest
argument_list|(
name|getNextRow
argument_list|(
name|kv
argument_list|,
name|this
operator|.
name|kvset
argument_list|)
argument_list|,
name|getNextRow
argument_list|(
name|kv
argument_list|,
name|this
operator|.
name|snapshot
argument_list|)
argument_list|)
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/*    * @param a    * @param b    * @return Return lowest of a or b or null if both a and b are null    */
specifier|private
name|KeyValue
name|getLowest
parameter_list|(
specifier|final
name|KeyValue
name|a
parameter_list|,
specifier|final
name|KeyValue
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
return|return
name|b
return|;
block|}
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
return|return
name|a
return|;
block|}
return|return
name|comparator
operator|.
name|compareRows
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
operator|<=
literal|0
condition|?
name|a
else|:
name|b
return|;
block|}
comment|/*    * @param key Find row that follows this one.  If null, return first.    * @param map Set to look in for a row beyond<code>row</code>.    * @return Next row or null if none found.  If one found, will be a new    * KeyValue -- can be destroyed by subsequent calls to this method.    */
specifier|private
name|KeyValue
name|getNextRow
parameter_list|(
specifier|final
name|KeyValue
name|key
parameter_list|,
specifier|final
name|NavigableSet
argument_list|<
name|KeyValue
argument_list|>
name|set
parameter_list|)
block|{
name|KeyValue
name|result
init|=
literal|null
decl_stmt|;
name|SortedSet
argument_list|<
name|KeyValue
argument_list|>
name|tail
init|=
name|key
operator|==
literal|null
condition|?
name|set
else|:
name|set
operator|.
name|tailSet
argument_list|(
name|key
argument_list|)
decl_stmt|;
comment|// Iterate until we fall into the next row; i.e. move off current row
for|for
control|(
name|KeyValue
name|kv
range|:
name|tail
control|)
block|{
if|if
condition|(
name|comparator
operator|.
name|compareRows
argument_list|(
name|kv
argument_list|,
name|key
argument_list|)
operator|<=
literal|0
condition|)
continue|continue;
comment|// Note: Not suppressing deletes or expired cells.  Needs to be handled
comment|// by higher up functions.
name|result
operator|=
name|kv
expr_stmt|;
break|break;
block|}
return|return
name|result
return|;
block|}
comment|/**    * @param state    */
name|void
name|getRowKeyAtOrBefore
parameter_list|(
specifier|final
name|GetClosestRowBeforeTracker
name|state
parameter_list|)
block|{
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|getRowKeyAtOrBefore
argument_list|(
name|kvset
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|getRowKeyAtOrBefore
argument_list|(
name|snapshot
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/*    * @param set    * @param state Accumulates deletes and candidates.    */
specifier|private
name|void
name|getRowKeyAtOrBefore
parameter_list|(
specifier|final
name|NavigableSet
argument_list|<
name|KeyValue
argument_list|>
name|set
parameter_list|,
specifier|final
name|GetClosestRowBeforeTracker
name|state
parameter_list|)
block|{
if|if
condition|(
name|set
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|walkForwardInSingleRow
argument_list|(
name|set
argument_list|,
name|state
operator|.
name|getTargetKey
argument_list|()
argument_list|,
name|state
argument_list|)
condition|)
block|{
comment|// Found nothing in row.  Try backing up.
name|getRowKeyBefore
argument_list|(
name|set
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Walk forward in a row from<code>firstOnRow</code>.  Presumption is that    * we have been passed the first possible key on a row.  As we walk forward    * we accumulate deletes until we hit a candidate on the row at which point    * we return.    * @param set    * @param firstOnRow First possible key on this row.    * @param state    * @return True if we found a candidate walking this row.    */
specifier|private
name|boolean
name|walkForwardInSingleRow
parameter_list|(
specifier|final
name|SortedSet
argument_list|<
name|KeyValue
argument_list|>
name|set
parameter_list|,
specifier|final
name|KeyValue
name|firstOnRow
parameter_list|,
specifier|final
name|GetClosestRowBeforeTracker
name|state
parameter_list|)
block|{
name|boolean
name|foundCandidate
init|=
literal|false
decl_stmt|;
name|SortedSet
argument_list|<
name|KeyValue
argument_list|>
name|tail
init|=
name|set
operator|.
name|tailSet
argument_list|(
name|firstOnRow
argument_list|)
decl_stmt|;
if|if
condition|(
name|tail
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|foundCandidate
return|;
for|for
control|(
name|Iterator
argument_list|<
name|KeyValue
argument_list|>
name|i
init|=
name|tail
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|KeyValue
name|kv
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// Did we go beyond the target row? If so break.
if|if
condition|(
name|state
operator|.
name|isTooFar
argument_list|(
name|kv
argument_list|,
name|firstOnRow
argument_list|)
condition|)
break|break;
if|if
condition|(
name|state
operator|.
name|isExpired
argument_list|(
name|kv
argument_list|)
condition|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
continue|continue;
block|}
comment|// If we added something, this row is a contender. break.
if|if
condition|(
name|state
operator|.
name|handle
argument_list|(
name|kv
argument_list|)
condition|)
block|{
name|foundCandidate
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
return|return
name|foundCandidate
return|;
block|}
comment|/*    * Walk backwards through the passed set a row at a time until we run out of    * set or until we get a candidate.    * @param set    * @param state    */
specifier|private
name|void
name|getRowKeyBefore
parameter_list|(
name|NavigableSet
argument_list|<
name|KeyValue
argument_list|>
name|set
parameter_list|,
specifier|final
name|GetClosestRowBeforeTracker
name|state
parameter_list|)
block|{
name|KeyValue
name|firstOnRow
init|=
name|state
operator|.
name|getTargetKey
argument_list|()
decl_stmt|;
for|for
control|(
name|Member
name|p
init|=
name|memberOfPreviousRow
argument_list|(
name|set
argument_list|,
name|state
argument_list|,
name|firstOnRow
argument_list|)
init|;
name|p
operator|!=
literal|null
condition|;
name|p
operator|=
name|memberOfPreviousRow
argument_list|(
name|p
operator|.
name|set
argument_list|,
name|state
argument_list|,
name|firstOnRow
argument_list|)
control|)
block|{
comment|// Make sure we don't fall out of our table.
if|if
condition|(
operator|!
name|state
operator|.
name|isTargetTable
argument_list|(
name|p
operator|.
name|kv
argument_list|)
condition|)
break|break;
comment|// Stop looking if we've exited the better candidate range.
if|if
condition|(
operator|!
name|state
operator|.
name|isBetterCandidate
argument_list|(
name|p
operator|.
name|kv
argument_list|)
condition|)
break|break;
comment|// Make into firstOnRow
name|firstOnRow
operator|=
operator|new
name|KeyValue
argument_list|(
name|p
operator|.
name|kv
operator|.
name|getRow
argument_list|()
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
expr_stmt|;
comment|// If we find something, break;
if|if
condition|(
name|walkForwardInSingleRow
argument_list|(
name|p
operator|.
name|set
argument_list|,
name|firstOnRow
argument_list|,
name|state
argument_list|)
condition|)
break|break;
block|}
block|}
comment|/*    * Immutable data structure to hold member found in set and the set it was    * found in.  Include set because it is carrying context.    */
specifier|private
class|class
name|Member
block|{
specifier|final
name|KeyValue
name|kv
decl_stmt|;
specifier|final
name|NavigableSet
argument_list|<
name|KeyValue
argument_list|>
name|set
decl_stmt|;
name|Member
parameter_list|(
specifier|final
name|NavigableSet
argument_list|<
name|KeyValue
argument_list|>
name|s
parameter_list|,
specifier|final
name|KeyValue
name|kv
parameter_list|)
block|{
name|this
operator|.
name|kv
operator|=
name|kv
expr_stmt|;
name|this
operator|.
name|set
operator|=
name|s
expr_stmt|;
block|}
block|}
comment|/*    * @param set Set to walk back in.  Pass a first in row or we'll return    * same row (loop).    * @param state Utility and context.    * @param firstOnRow First item on the row after the one we want to find a    * member in.    * @return Null or member of row previous to<code>firstOnRow</code>    */
specifier|private
name|Member
name|memberOfPreviousRow
parameter_list|(
name|NavigableSet
argument_list|<
name|KeyValue
argument_list|>
name|set
parameter_list|,
specifier|final
name|GetClosestRowBeforeTracker
name|state
parameter_list|,
specifier|final
name|KeyValue
name|firstOnRow
parameter_list|)
block|{
name|NavigableSet
argument_list|<
name|KeyValue
argument_list|>
name|head
init|=
name|set
operator|.
name|headSet
argument_list|(
name|firstOnRow
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|head
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
for|for
control|(
name|Iterator
argument_list|<
name|KeyValue
argument_list|>
name|i
init|=
name|head
operator|.
name|descendingIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|KeyValue
name|found
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
operator|.
name|isExpired
argument_list|(
name|found
argument_list|)
condition|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
continue|continue;
block|}
return|return
operator|new
name|Member
argument_list|(
name|head
argument_list|,
name|found
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * @return scanner on memstore and snapshot in this order.    */
name|KeyValueScanner
index|[]
name|getScanners
parameter_list|()
block|{
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|KeyValueScanner
index|[]
name|scanners
init|=
operator|new
name|KeyValueScanner
index|[
literal|1
index|]
decl_stmt|;
name|scanners
index|[
literal|0
index|]
operator|=
operator|new
name|MemStoreScanner
argument_list|(
name|this
operator|.
name|changedMemStoreObservers
argument_list|)
expr_stmt|;
return|return
name|scanners
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|//
comment|// HBASE-880/1249/1304
comment|//
comment|/**    * Perform a single-row Get on the  and snapshot, placing results    * into the specified KV list.    *<p>    * This will return true if it is determined that the query is complete    * and it is not necessary to check any storefiles after this.    *<p>    * Otherwise, it will return false and you should continue on.    * @param matcher Column matcher    * @param result List to add results to    * @return true if done with store (early-out), false if not    * @throws IOException    */
specifier|public
name|boolean
name|get
parameter_list|(
name|QueryMatcher
name|matcher
parameter_list|,
name|List
argument_list|<
name|KeyValue
argument_list|>
name|result
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|internalGet
argument_list|(
name|this
operator|.
name|kvset
argument_list|,
name|matcher
argument_list|,
name|result
argument_list|)
operator|||
name|matcher
operator|.
name|isDone
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
name|matcher
operator|.
name|update
argument_list|()
expr_stmt|;
return|return
name|internalGet
argument_list|(
name|this
operator|.
name|snapshot
argument_list|,
name|matcher
argument_list|,
name|result
argument_list|)
operator|||
name|matcher
operator|.
name|isDone
argument_list|()
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    *    * @param set memstore or snapshot    * @param matcher query matcher    * @param result list to add results to    * @return true if done with store (early-out), false if not    * @throws IOException    */
name|boolean
name|internalGet
parameter_list|(
specifier|final
name|NavigableSet
argument_list|<
name|KeyValue
argument_list|>
name|set
parameter_list|,
specifier|final
name|QueryMatcher
name|matcher
parameter_list|,
specifier|final
name|List
argument_list|<
name|KeyValue
argument_list|>
name|result
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|set
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
comment|// Seek to startKey
name|SortedSet
argument_list|<
name|KeyValue
argument_list|>
name|tail
init|=
name|set
operator|.
name|tailSet
argument_list|(
name|matcher
operator|.
name|getStartKey
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
name|tail
control|)
block|{
name|QueryMatcher
operator|.
name|MatchCode
name|res
init|=
name|matcher
operator|.
name|match
argument_list|(
name|kv
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|res
condition|)
block|{
case|case
name|INCLUDE
case|:
name|result
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
break|break;
case|case
name|SKIP
case|:
break|break;
case|case
name|NEXT
case|:
return|return
literal|false
return|;
case|case
name|DONE
case|:
return|return
literal|true
return|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected "
operator|+
name|res
argument_list|)
throw|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/*    * MemStoreScanner implements the KeyValueScanner.    * It lets the caller scan the contents of a memstore -- both current    * map and snapshot.    * This behaves as if it were a real scanner but does not maintain position.    */
specifier|protected
class|class
name|MemStoreScanner
implements|implements
name|KeyValueScanner
implements|,
name|ChangedMemStoreObserver
block|{
specifier|private
name|List
argument_list|<
name|KeyValue
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|int
name|idx
init|=
literal|0
decl_stmt|;
comment|// Make access atomic.
specifier|private
name|FirstOnRow
name|firstOnNextRow
init|=
operator|new
name|FirstOnRow
argument_list|()
decl_stmt|;
comment|// Keep reference to Set so can remove myself when closed.
specifier|private
specifier|final
name|Set
argument_list|<
name|ChangedMemStoreObserver
argument_list|>
name|observers
decl_stmt|;
name|MemStoreScanner
parameter_list|(
specifier|final
name|Set
argument_list|<
name|ChangedMemStoreObserver
argument_list|>
name|observers
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|observers
operator|=
name|observers
expr_stmt|;
name|this
operator|.
name|observers
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|seek
parameter_list|(
name|KeyValue
name|key
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
name|close
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
name|this
operator|.
name|firstOnNextRow
operator|.
name|set
argument_list|(
name|key
argument_list|)
expr_stmt|;
return|return
name|cacheNextRow
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|close
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|KeyValue
name|peek
parameter_list|()
block|{
if|if
condition|(
name|idx
operator|>=
name|this
operator|.
name|result
operator|.
name|size
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|cacheNextRow
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|peek
argument_list|()
return|;
block|}
return|return
name|result
operator|.
name|get
argument_list|(
name|idx
argument_list|)
return|;
block|}
specifier|public
name|KeyValue
name|next
parameter_list|()
block|{
if|if
condition|(
name|idx
operator|>=
name|result
operator|.
name|size
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|cacheNextRow
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|next
argument_list|()
return|;
block|}
return|return
name|this
operator|.
name|result
operator|.
name|get
argument_list|(
name|idx
operator|++
argument_list|)
return|;
block|}
comment|/**      * @return True if successfully cached a next row.      */
name|boolean
name|cacheNextRow
parameter_list|()
block|{
comment|// Prevent snapshot being cleared while caching a row.
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|this
operator|.
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|idx
operator|=
literal|0
expr_stmt|;
try|try
block|{
comment|// Look at each set, kvset and snapshot.
comment|// Both look for matching entries for this.current row returning what
comment|// they
comment|// have as next row after this.current (or null if nothing in set or if
comment|// nothing follows.
name|KeyValue
name|kvsetNextRow
init|=
name|cacheNextRow
argument_list|(
name|kvset
argument_list|)
decl_stmt|;
name|KeyValue
name|snapshotNextRow
init|=
name|cacheNextRow
argument_list|(
name|snapshot
argument_list|)
decl_stmt|;
if|if
condition|(
name|kvsetNextRow
operator|==
literal|null
operator|&&
name|snapshotNextRow
operator|==
literal|null
condition|)
block|{
comment|// Nothing more in memstore but we might have gotten current row
comment|// results
comment|// Indicate at end of store by setting next row to null.
name|this
operator|.
name|firstOnNextRow
operator|.
name|set
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
operator|!
name|this
operator|.
name|result
operator|.
name|isEmpty
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|kvsetNextRow
operator|!=
literal|null
operator|&&
name|snapshotNextRow
operator|!=
literal|null
condition|)
block|{
comment|// Set current at the lowest of the two values.
name|int
name|compare
init|=
name|comparator
operator|.
name|compare
argument_list|(
name|kvsetNextRow
argument_list|,
name|snapshotNextRow
argument_list|)
decl_stmt|;
name|this
operator|.
name|firstOnNextRow
operator|.
name|set
argument_list|(
name|compare
operator|<=
literal|0
condition|?
name|kvsetNextRow
else|:
name|snapshotNextRow
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|firstOnNextRow
operator|.
name|set
argument_list|(
name|kvsetNextRow
operator|!=
literal|null
condition|?
name|kvsetNextRow
else|:
name|snapshotNextRow
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/*      * See if set has entries for the<code>this.current</code> row.  If so,      * add them to<code>this.result</code>.      * @param set Set to examine      * @return Next row in passed<code>set</code> or null if nothing in this      * passed<code>set</code>      */
specifier|private
name|KeyValue
name|cacheNextRow
parameter_list|(
specifier|final
name|NavigableSet
argument_list|<
name|KeyValue
argument_list|>
name|set
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|firstOnNextRow
operator|.
name|get
argument_list|()
operator|==
literal|null
operator|||
name|set
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
name|SortedSet
argument_list|<
name|KeyValue
argument_list|>
name|tail
init|=
name|set
operator|.
name|tailSet
argument_list|(
name|this
operator|.
name|firstOnNextRow
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tail
operator|==
literal|null
operator|||
name|tail
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
name|KeyValue
name|first
init|=
name|tail
operator|.
name|first
argument_list|()
decl_stmt|;
name|KeyValue
name|nextRow
init|=
literal|null
decl_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
name|tail
control|)
block|{
if|if
condition|(
name|comparator
operator|.
name|compareRows
argument_list|(
name|first
argument_list|,
name|kv
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|nextRow
operator|=
name|kv
expr_stmt|;
break|break;
block|}
name|this
operator|.
name|result
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
return|return
name|nextRow
return|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
name|this
operator|.
name|firstOnNextRow
operator|.
name|set
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|idx
operator|=
literal|0
expr_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|observers
operator|.
name|remove
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|changedMemStore
parameter_list|()
block|{
name|this
operator|.
name|firstOnNextRow
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
comment|/*    * Private class that holds firstOnRow and utility.    * Usually firstOnRow is the first KeyValue we find on next row rather than    * the absolute minimal first key (empty column, Type.Maximum, maximum ts).    * Usually its ok being sloppy with firstOnRow letting it be the first thing    * found on next row -- this works -- but if the memstore changes on us, reset    * firstOnRow to be the ultimate firstOnRow.  We play sloppy with firstOnRow    * usually so we don't have to  allocate a new KeyValue each time firstOnRow    * is updated.    */
specifier|private
specifier|static
class|class
name|FirstOnRow
block|{
specifier|private
name|KeyValue
name|firstOnRow
init|=
literal|null
decl_stmt|;
name|FirstOnRow
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|synchronized
name|void
name|set
parameter_list|(
specifier|final
name|KeyValue
name|kv
parameter_list|)
block|{
name|this
operator|.
name|firstOnRow
operator|=
name|kv
expr_stmt|;
block|}
comment|/* Reset firstOnRow to a 'clean', absolute firstOnRow.      */
specifier|synchronized
name|void
name|reset
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|firstOnRow
operator|==
literal|null
condition|)
return|return;
name|this
operator|.
name|firstOnRow
operator|=
operator|new
name|KeyValue
argument_list|(
name|this
operator|.
name|firstOnRow
operator|.
name|getRow
argument_list|()
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
expr_stmt|;
block|}
specifier|synchronized
name|KeyValue
name|get
parameter_list|()
block|{
return|return
name|this
operator|.
name|firstOnRow
return|;
block|}
block|}
specifier|public
specifier|final
specifier|static
name|long
name|FIXED_OVERHEAD
init|=
name|ClassSize
operator|.
name|align
argument_list|(
name|ClassSize
operator|.
name|OBJECT
operator|+
operator|(
literal|8
operator|*
name|ClassSize
operator|.
name|REFERENCE
operator|)
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|long
name|DEEP_OVERHEAD
init|=
name|ClassSize
operator|.
name|align
argument_list|(
name|FIXED_OVERHEAD
operator|+
name|ClassSize
operator|.
name|REENTRANT_LOCK
operator|+
name|ClassSize
operator|.
name|ATOMIC_LONG
operator|+
name|ClassSize
operator|.
name|COPYONWRITE_ARRAYSET
operator|+
name|ClassSize
operator|.
name|COPYONWRITE_ARRAYLIST
operator|+
operator|(
literal|2
operator|*
name|ClassSize
operator|.
name|CONCURRENT_SKIPLISTMAP
operator|)
argument_list|)
decl_stmt|;
comment|/*    * Calculate how the MemStore size has changed.  Includes overhead of the    * backing Map.    * @param kv    * @param notpresent True if the kv was NOT present in the set.    * @return Size    */
name|long
name|heapSizeChange
parameter_list|(
specifier|final
name|KeyValue
name|kv
parameter_list|,
specifier|final
name|boolean
name|notpresent
parameter_list|)
block|{
return|return
name|notpresent
condition|?
name|ClassSize
operator|.
name|align
argument_list|(
name|ClassSize
operator|.
name|CONCURRENT_SKIPLISTMAP_ENTRY
operator|+
name|kv
operator|.
name|heapSize
argument_list|()
argument_list|)
else|:
literal|0
return|;
block|}
comment|/**    * Get the entire heap usage for this MemStore not including keys in the    * snapshot.    */
annotation|@
name|Override
specifier|public
name|long
name|heapSize
parameter_list|()
block|{
return|return
name|size
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Get the heap usage of KVs in this MemStore.    */
specifier|public
name|long
name|keySize
parameter_list|()
block|{
return|return
name|heapSize
argument_list|()
operator|-
name|DEEP_OVERHEAD
return|;
block|}
comment|/**    * Code to help figure if our approximation of object heap sizes is close    * enough.  See hbase-900.  Fills memstores then waits so user can heap    * dump and bring up resultant hprof in something like jprofiler which    * allows you get 'deep size' on objects.    * @param args    */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|RuntimeMXBean
name|runtime
init|=
name|ManagementFactory
operator|.
name|getRuntimeMXBean
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"vmName="
operator|+
name|runtime
operator|.
name|getVmName
argument_list|()
operator|+
literal|", vmVendor="
operator|+
name|runtime
operator|.
name|getVmVendor
argument_list|()
operator|+
literal|", vmVersion="
operator|+
name|runtime
operator|.
name|getVmVersion
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"vmInputArguments="
operator|+
name|runtime
operator|.
name|getInputArguments
argument_list|()
argument_list|)
expr_stmt|;
name|MemStore
name|memstore1
init|=
operator|new
name|MemStore
argument_list|()
decl_stmt|;
comment|// TODO: x32 vs x64
name|long
name|size
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|count
init|=
literal|10000
decl_stmt|;
name|byte
index|[]
name|column
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col:umn"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
comment|// Give each its own ts
name|size
operator|+=
name|memstore1
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|,
name|column
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"memstore1 estimated size="
operator|+
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|size
operator|+=
name|memstore1
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|,
name|column
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"memstore1 estimated size (2nd loading of same data)="
operator|+
name|size
argument_list|)
expr_stmt|;
comment|// Make a variably sized memstore.
name|MemStore
name|memstore2
init|=
operator|new
name|MemStore
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|size
operator|+=
name|memstore2
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|,
name|column
argument_list|,
name|i
argument_list|,
operator|new
name|byte
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"memstore2 estimated size="
operator|+
name|size
argument_list|)
expr_stmt|;
specifier|final
name|int
name|seconds
init|=
literal|30
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting "
operator|+
name|seconds
operator|+
literal|" seconds while heap dump is taken"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|seconds
condition|;
name|i
operator|++
control|)
block|{
comment|// Thread.sleep(1000);
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Exiting."
argument_list|)
expr_stmt|;
block|}
comment|/**    * Observers want to know about MemStore changes.    * Called when snapshot is cleared and when we make one.    */
interface|interface
name|ChangedMemStoreObserver
block|{
comment|/**      * Notify observers.      * @throws IOException      */
name|void
name|changedMemStore
parameter_list|()
function_decl|;
block|}
block|}
end_class

end_unit

