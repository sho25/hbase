begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2008 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|transactional
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|Thread
operator|.
name|UncaughtExceptionHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NotServingRegionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RemoteExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|RowFilterInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|BatchUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|HbaseMapWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|RowResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|TransactionalRegionInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|InternalScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|MapWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_comment
comment|/**  * RegionServer with support for transactions. Transactional logic is at the  * region level, so we mostly just delegate to the appropriate  * TransactionalRegion.  */
end_comment

begin_class
specifier|public
class|class
name|TransactionalRegionServer
extends|extends
name|HRegionServer
implements|implements
name|TransactionalRegionInterface
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TransactionalRegionServer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|CleanOldTransactionsChore
name|cleanOldTransactionsThread
decl_stmt|;
specifier|public
name|TransactionalRegionServer
parameter_list|(
specifier|final
name|HBaseConfiguration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
operator|new
name|HServerAddress
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|REGIONSERVER_ADDRESS
argument_list|,
name|DEFAULT_REGIONSERVER_ADDRESS
argument_list|)
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TransactionalRegionServer
parameter_list|(
specifier|final
name|HServerAddress
name|address
parameter_list|,
specifier|final
name|HBaseConfiguration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|address
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|cleanOldTransactionsThread
operator|=
operator|new
name|CleanOldTransactionsChore
argument_list|(
name|this
argument_list|,
name|super
operator|.
name|stopRequested
argument_list|)
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|long
name|getProtocolVersion
parameter_list|(
specifier|final
name|String
name|protocol
parameter_list|,
specifier|final
name|long
name|clientVersion
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|protocol
operator|.
name|equals
argument_list|(
name|TransactionalRegionInterface
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|TransactionalRegionInterface
operator|.
name|versionID
return|;
block|}
return|return
name|super
operator|.
name|getProtocolVersion
argument_list|(
name|protocol
argument_list|,
name|clientVersion
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|init
parameter_list|(
specifier|final
name|MapWritable
name|c
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|init
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|String
name|n
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|UncaughtExceptionHandler
name|handler
init|=
operator|new
name|UncaughtExceptionHandler
argument_list|()
block|{
specifier|public
name|void
name|uncaughtException
parameter_list|(
specifier|final
name|Thread
name|t
parameter_list|,
specifier|final
name|Throwable
name|e
parameter_list|)
block|{
name|abort
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Set stop flag in "
operator|+
name|t
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|Threads
operator|.
name|setDaemonThreadRunning
argument_list|(
name|this
operator|.
name|cleanOldTransactionsThread
argument_list|,
name|n
operator|+
literal|".oldTransactionCleaner"
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|HRegion
name|instantiateRegion
parameter_list|(
specifier|final
name|HRegionInfo
name|regionInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|HRegion
name|r
init|=
operator|new
name|TransactionalRegion
argument_list|(
name|HTableDescriptor
operator|.
name|getTableDir
argument_list|(
name|super
operator|.
name|getRootDir
argument_list|()
argument_list|,
name|regionInfo
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|super
operator|.
name|log
argument_list|,
name|super
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|super
operator|.
name|conf
argument_list|,
name|regionInfo
argument_list|,
name|super
operator|.
name|getFlushRequester
argument_list|()
argument_list|)
decl_stmt|;
name|r
operator|.
name|initialize
argument_list|(
literal|null
argument_list|,
operator|new
name|Progressable
argument_list|()
block|{
specifier|public
name|void
name|progress
parameter_list|()
block|{
name|addProcessingMessage
argument_list|(
name|regionInfo
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
specifier|protected
name|TransactionalRegion
name|getTransactionalRegion
parameter_list|(
specifier|final
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|NotServingRegionException
block|{
return|return
operator|(
name|TransactionalRegion
operator|)
name|super
operator|.
name|getRegion
argument_list|(
name|regionName
argument_list|)
return|;
block|}
specifier|public
name|void
name|abort
parameter_list|(
specifier|final
name|byte
index|[]
name|regionName
parameter_list|,
specifier|final
name|long
name|transactionId
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
name|super
operator|.
name|getRequestCount
argument_list|()
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
try|try
block|{
name|getTransactionalRegion
argument_list|(
name|regionName
argument_list|)
operator|.
name|abort
argument_list|(
name|transactionId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|checkFileSystem
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|void
name|batchUpdate
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|,
specifier|final
name|byte
index|[]
name|regionName
parameter_list|,
specifier|final
name|BatchUpdate
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
name|super
operator|.
name|getRequestCount
argument_list|()
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
try|try
block|{
name|getTransactionalRegion
argument_list|(
name|regionName
argument_list|)
operator|.
name|batchUpdate
argument_list|(
name|transactionId
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|checkFileSystem
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|void
name|commit
parameter_list|(
specifier|final
name|byte
index|[]
name|regionName
parameter_list|,
specifier|final
name|long
name|transactionId
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
name|super
operator|.
name|getRequestCount
argument_list|()
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
try|try
block|{
name|getTransactionalRegion
argument_list|(
name|regionName
argument_list|)
operator|.
name|commit
argument_list|(
name|transactionId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|checkFileSystem
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|boolean
name|commitRequest
parameter_list|(
specifier|final
name|byte
index|[]
name|regionName
parameter_list|,
specifier|final
name|long
name|transactionId
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
name|super
operator|.
name|getRequestCount
argument_list|()
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|getTransactionalRegion
argument_list|(
name|regionName
argument_list|)
operator|.
name|commitRequest
argument_list|(
name|transactionId
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|checkFileSystem
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|Cell
name|get
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|,
specifier|final
name|byte
index|[]
name|regionName
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|column
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
name|super
operator|.
name|getRequestCount
argument_list|()
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|getTransactionalRegion
argument_list|(
name|regionName
argument_list|)
operator|.
name|get
argument_list|(
name|transactionId
argument_list|,
name|row
argument_list|,
name|column
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|checkFileSystem
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|Cell
index|[]
name|get
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|,
specifier|final
name|byte
index|[]
name|regionName
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|column
parameter_list|,
specifier|final
name|int
name|numVersions
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
name|super
operator|.
name|getRequestCount
argument_list|()
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|getTransactionalRegion
argument_list|(
name|regionName
argument_list|)
operator|.
name|get
argument_list|(
name|transactionId
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|numVersions
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|checkFileSystem
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|Cell
index|[]
name|get
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|,
specifier|final
name|byte
index|[]
name|regionName
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|column
parameter_list|,
specifier|final
name|long
name|timestamp
parameter_list|,
specifier|final
name|int
name|numVersions
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
name|super
operator|.
name|getRequestCount
argument_list|()
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|getTransactionalRegion
argument_list|(
name|regionName
argument_list|)
operator|.
name|get
argument_list|(
name|transactionId
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|timestamp
argument_list|,
name|numVersions
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|checkFileSystem
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|RowResult
name|getRow
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|,
specifier|final
name|byte
index|[]
name|regionName
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|long
name|ts
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getRow
argument_list|(
name|transactionId
argument_list|,
name|regionName
argument_list|,
name|row
argument_list|,
literal|null
argument_list|,
name|ts
argument_list|)
return|;
block|}
specifier|public
name|RowResult
name|getRow
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|,
specifier|final
name|byte
index|[]
name|regionName
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
index|[]
name|columns
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getRow
argument_list|(
name|transactionId
argument_list|,
name|regionName
argument_list|,
name|row
argument_list|,
name|columns
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
return|;
block|}
specifier|public
name|RowResult
name|getRow
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|,
specifier|final
name|byte
index|[]
name|regionName
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
index|[]
name|columns
parameter_list|,
specifier|final
name|long
name|ts
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
name|super
operator|.
name|getRequestCount
argument_list|()
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
try|try
block|{
comment|// convert the columns array into a set so it's easy to check later.
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|columnSet
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|columns
operator|!=
literal|null
condition|)
block|{
name|columnSet
operator|=
operator|new
name|TreeSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
expr_stmt|;
name|columnSet
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|columns
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|TransactionalRegion
name|region
init|=
name|getTransactionalRegion
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Cell
argument_list|>
name|map
init|=
name|region
operator|.
name|getFull
argument_list|(
name|transactionId
argument_list|,
name|row
argument_list|,
name|columnSet
argument_list|,
name|ts
argument_list|)
decl_stmt|;
name|HbaseMapWritable
argument_list|<
name|byte
index|[]
argument_list|,
name|Cell
argument_list|>
name|result
init|=
operator|new
name|HbaseMapWritable
argument_list|<
name|byte
index|[]
argument_list|,
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|result
operator|.
name|putAll
argument_list|(
name|map
argument_list|)
expr_stmt|;
return|return
operator|new
name|RowResult
argument_list|(
name|row
argument_list|,
name|result
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|checkFileSystem
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/** {@inheritDoc} */
specifier|public
name|void
name|deleteAll
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|,
specifier|final
name|byte
index|[]
name|regionName
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
name|super
operator|.
name|getRequestCount
argument_list|()
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
try|try
block|{
name|TransactionalRegion
name|region
init|=
name|getTransactionalRegion
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
name|region
operator|.
name|deleteAll
argument_list|(
name|transactionId
argument_list|,
name|row
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|checkFileSystem
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|long
name|openScanner
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|,
specifier|final
name|byte
index|[]
name|regionName
parameter_list|,
specifier|final
name|byte
index|[]
index|[]
name|cols
parameter_list|,
specifier|final
name|byte
index|[]
name|firstRow
parameter_list|,
specifier|final
name|long
name|timestamp
parameter_list|,
specifier|final
name|RowFilterInterface
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
name|NullPointerException
name|npe
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|regionName
operator|==
literal|null
condition|)
block|{
name|npe
operator|=
operator|new
name|NullPointerException
argument_list|(
literal|"regionName is null"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cols
operator|==
literal|null
condition|)
block|{
name|npe
operator|=
operator|new
name|NullPointerException
argument_list|(
literal|"columns to scan is null"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|firstRow
operator|==
literal|null
condition|)
block|{
name|npe
operator|=
operator|new
name|NullPointerException
argument_list|(
literal|"firstRow for scanner is null"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|npe
operator|!=
literal|null
condition|)
block|{
name|IOException
name|io
init|=
operator|new
name|IOException
argument_list|(
literal|"Invalid arguments to openScanner"
argument_list|)
decl_stmt|;
name|io
operator|.
name|initCause
argument_list|(
name|npe
argument_list|)
expr_stmt|;
throw|throw
name|io
throw|;
block|}
name|super
operator|.
name|getRequestCount
argument_list|()
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
try|try
block|{
name|TransactionalRegion
name|r
init|=
name|getTransactionalRegion
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
name|long
name|scannerId
init|=
operator|-
literal|1L
decl_stmt|;
name|InternalScanner
name|s
init|=
name|r
operator|.
name|getScanner
argument_list|(
name|transactionId
argument_list|,
name|cols
argument_list|,
name|firstRow
argument_list|,
name|timestamp
argument_list|,
name|filter
argument_list|)
decl_stmt|;
name|scannerId
operator|=
name|super
operator|.
name|addScanner
argument_list|(
name|s
argument_list|)
expr_stmt|;
return|return
name|scannerId
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error opening scanner (fsOk: "
operator|+
name|this
operator|.
name|fsOk
operator|+
literal|")"
argument_list|,
name|RemoteExceptionHandler
operator|.
name|checkIOException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|checkFileSystem
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|void
name|beginTransaction
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|,
specifier|final
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
block|{
name|getTransactionalRegion
argument_list|(
name|regionName
argument_list|)
operator|.
name|beginTransaction
argument_list|(
name|transactionId
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

