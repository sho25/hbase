begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2009 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * A scanner that does a minor compaction at the same time.  Doesn't need to  * implement ChangedReadersObserver, since it doesn't scan memcache, only store files  * and optionally the memcache-snapshot.  */
end_comment

begin_class
specifier|public
class|class
name|MinorCompactingStoreScanner
implements|implements
name|KeyValueScanner
implements|,
name|InternalScanner
block|{
specifier|private
name|QueryMatcher
name|matcher
decl_stmt|;
specifier|private
name|KeyValueHeap
name|heap
decl_stmt|;
name|MinorCompactingStoreScanner
parameter_list|(
name|Store
name|store
parameter_list|,
name|KeyValueScanner
index|[]
name|scanners
parameter_list|)
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
comment|// No max version, no ttl matching, start at first row, all columns.
name|matcher
operator|=
operator|new
name|ScanQueryMatcher
argument_list|(
name|scan
argument_list|,
name|store
operator|.
name|getFamily
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|store
operator|.
name|comparator
operator|.
name|getRawComparator
argument_list|()
argument_list|,
name|store
operator|.
name|versionsToReturn
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|KeyValueScanner
name|scanner
range|:
name|scanners
control|)
block|{
name|scanner
operator|.
name|seek
argument_list|(
name|matcher
operator|.
name|getStartKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|heap
operator|=
operator|new
name|KeyValueHeap
argument_list|(
name|scanners
argument_list|,
name|store
operator|.
name|comparator
argument_list|)
expr_stmt|;
block|}
name|MinorCompactingStoreScanner
parameter_list|(
name|String
name|cfName
parameter_list|,
name|KeyValue
operator|.
name|KVComparator
name|comparator
parameter_list|,
name|KeyValueScanner
index|[]
name|scanners
parameter_list|)
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|matcher
operator|=
operator|new
name|ScanQueryMatcher
argument_list|(
name|scan
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|cfName
argument_list|)
argument_list|,
literal|null
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|comparator
operator|.
name|getRawComparator
argument_list|()
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
for|for
control|(
name|KeyValueScanner
name|scanner
range|:
name|scanners
control|)
block|{
name|scanner
operator|.
name|seek
argument_list|(
name|matcher
operator|.
name|getStartKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|heap
operator|=
operator|new
name|KeyValueHeap
argument_list|(
name|scanners
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
block|}
specifier|public
name|KeyValue
name|peek
parameter_list|()
block|{
return|return
name|heap
operator|.
name|peek
argument_list|()
return|;
block|}
specifier|public
name|KeyValue
name|next
parameter_list|()
block|{
return|return
name|heap
operator|.
name|next
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|seek
parameter_list|(
name|KeyValue
name|key
parameter_list|)
block|{
comment|// cant seek.
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Can't seek a MinorCompactingStoreScanner"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|next
parameter_list|(
name|List
argument_list|<
name|KeyValue
argument_list|>
name|results
parameter_list|)
throws|throws
name|IOException
block|{
name|KeyValue
name|peeked
init|=
name|heap
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|peeked
operator|==
literal|null
condition|)
block|{
name|close
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
name|matcher
operator|.
name|setRow
argument_list|(
name|peeked
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|KeyValue
name|kv
decl_stmt|;
while|while
condition|(
operator|(
name|kv
operator|=
name|heap
operator|.
name|peek
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
comment|// if delete type, output no matter what:
if|if
condition|(
name|kv
operator|.
name|getType
argument_list|()
operator|!=
name|KeyValue
operator|.
name|Type
operator|.
name|Put
operator|.
name|getCode
argument_list|()
condition|)
name|results
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|matcher
operator|.
name|match
argument_list|(
name|kv
argument_list|)
condition|)
block|{
case|case
name|INCLUDE
case|:
name|results
operator|.
name|add
argument_list|(
name|heap
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
case|case
name|DONE
case|:
if|if
condition|(
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|matcher
operator|.
name|setRow
argument_list|(
name|heap
operator|.
name|peek
argument_list|()
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
return|return
literal|true
return|;
block|}
name|heap
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|close
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
name|heap
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

