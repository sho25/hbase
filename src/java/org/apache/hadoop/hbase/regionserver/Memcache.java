begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2008 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|RuntimeMXBean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|rmi
operator|.
name|UnexpectedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * The Memcache holds in-memory modifications to the HRegion.  Modifications  * are {@link KeyValue}s.  When asked to flush, current memcache is moved  * to snapshot and is cleared.  We continue to serve edits out of new memcache  * and backing snapshot until flusher reports in that the flush succeeded. At  * this point we let the snapshot go.  * TODO: Adjust size of the memcache when we remove items because they have  * been deleted.  */
end_comment

begin_class
class|class
name|Memcache
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Memcache
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|long
name|ttl
decl_stmt|;
comment|// Note that since these structures are always accessed with a lock held,
comment|// no additional synchronization is required.
comment|// The currently active sorted set of edits.  Using explicit type because
comment|// if I use NavigableSet, I lose some facility -- I can't get a NavigableSet
comment|// when I do tailSet or headSet.
specifier|volatile
name|ConcurrentSkipListSet
argument_list|<
name|KeyValue
argument_list|>
name|memcache
decl_stmt|;
comment|// Snapshot of memcache.  Made for flusher.
specifier|volatile
name|ConcurrentSkipListSet
argument_list|<
name|KeyValue
argument_list|>
name|snapshot
decl_stmt|;
specifier|private
specifier|final
name|ReentrantReadWriteLock
name|lock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
specifier|final
name|KeyValue
operator|.
name|KVComparator
name|comparator
decl_stmt|;
comment|// Used comparing versions -- same r/c and ts but different type.
specifier|final
name|KeyValue
operator|.
name|KVComparator
name|comparatorIgnoreType
decl_stmt|;
comment|// Used comparing versions -- same r/c and type but different timestamp.
specifier|final
name|KeyValue
operator|.
name|KVComparator
name|comparatorIgnoreTimestamp
decl_stmt|;
comment|// TODO: Fix this guess by studying jprofiler
specifier|private
specifier|final
specifier|static
name|int
name|ESTIMATED_KV_HEAP_TAX
init|=
literal|60
decl_stmt|;
comment|/**    * Default constructor. Used for tests.    */
specifier|public
name|Memcache
parameter_list|()
block|{
name|this
argument_list|(
name|HConstants
operator|.
name|FOREVER
argument_list|,
name|KeyValue
operator|.
name|COMPARATOR
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructor.    * @param ttl The TTL for cache entries, in milliseconds.    * @param c    */
specifier|public
name|Memcache
parameter_list|(
specifier|final
name|long
name|ttl
parameter_list|,
specifier|final
name|KeyValue
operator|.
name|KVComparator
name|c
parameter_list|)
block|{
name|this
operator|.
name|ttl
operator|=
name|ttl
expr_stmt|;
name|this
operator|.
name|comparator
operator|=
name|c
expr_stmt|;
name|this
operator|.
name|comparatorIgnoreTimestamp
operator|=
name|this
operator|.
name|comparator
operator|.
name|getComparatorIgnoringTimestamps
argument_list|()
expr_stmt|;
name|this
operator|.
name|comparatorIgnoreType
operator|=
name|this
operator|.
name|comparator
operator|.
name|getComparatorIgnoringType
argument_list|()
expr_stmt|;
name|this
operator|.
name|memcache
operator|=
name|createSet
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|this
operator|.
name|snapshot
operator|=
name|createSet
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
specifier|static
name|ConcurrentSkipListSet
argument_list|<
name|KeyValue
argument_list|>
name|createSet
parameter_list|(
specifier|final
name|KeyValue
operator|.
name|KVComparator
name|c
parameter_list|)
block|{
return|return
operator|new
name|ConcurrentSkipListSet
argument_list|<
name|KeyValue
argument_list|>
argument_list|(
name|c
argument_list|)
return|;
block|}
name|void
name|dump
parameter_list|()
block|{
for|for
control|(
name|KeyValue
name|kv
range|:
name|this
operator|.
name|memcache
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|KeyValue
name|kv
range|:
name|this
operator|.
name|snapshot
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Creates a snapshot of the current Memcache.    * Snapshot must be cleared by call to {@link #clearSnapshot(SortedMap)}    * To get the snapshot made by this method, use {@link #getSnapshot}.    */
name|void
name|snapshot
parameter_list|()
block|{
name|this
operator|.
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// If snapshot currently has entries, then flusher failed or didn't call
comment|// cleanup.  Log a warning.
if|if
condition|(
operator|!
name|this
operator|.
name|snapshot
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Snapshot called again without clearing previous. "
operator|+
literal|"Doing nothing. Another ongoing flush or did we fail last attempt?"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// We used to synchronize on the memcache here but we're inside a
comment|// write lock so removed it. Comment is left in case removal was a
comment|// mistake. St.Ack
if|if
condition|(
operator|!
name|this
operator|.
name|memcache
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|snapshot
operator|=
name|this
operator|.
name|memcache
expr_stmt|;
name|this
operator|.
name|memcache
operator|=
name|createSet
argument_list|(
name|this
operator|.
name|comparator
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|this
operator|.
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Return the current snapshot.    * Called by flusher to get current snapshot made by a previous    * call to {@link snapshot}.    * @return Return snapshot.    * @see {@link #snapshot()}    * @see {@link #clearSnapshot(NavigableSet)}    */
name|ConcurrentSkipListSet
argument_list|<
name|KeyValue
argument_list|>
name|getSnapshot
parameter_list|()
block|{
return|return
name|this
operator|.
name|snapshot
return|;
block|}
comment|/**    * The passed snapshot was successfully persisted; it can be let go.    * @param ss The snapshot to clean out.    * @throws UnexpectedException    * @see {@link #snapshot()}    */
name|void
name|clearSnapshot
parameter_list|(
specifier|final
name|Set
argument_list|<
name|KeyValue
argument_list|>
name|ss
parameter_list|)
throws|throws
name|UnexpectedException
block|{
name|this
operator|.
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|this
operator|.
name|snapshot
operator|!=
name|ss
condition|)
block|{
throw|throw
operator|new
name|UnexpectedException
argument_list|(
literal|"Current snapshot is "
operator|+
name|this
operator|.
name|snapshot
operator|+
literal|", was passed "
operator|+
name|ss
argument_list|)
throw|;
block|}
comment|// OK. Passed in snapshot is same as current snapshot.  If not-empty,
comment|// create a new snapshot and let the old one go.
if|if
condition|(
operator|!
name|ss
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|snapshot
operator|=
name|createSet
argument_list|(
name|this
operator|.
name|comparator
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|this
operator|.
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Write an update    * @param kv    * @return approximate size of the passed key and value.    */
name|long
name|add
parameter_list|(
specifier|final
name|KeyValue
name|kv
parameter_list|)
block|{
name|long
name|size
init|=
operator|-
literal|1
decl_stmt|;
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|boolean
name|notpresent
init|=
name|this
operator|.
name|memcache
operator|.
name|add
argument_list|(
name|kv
argument_list|)
decl_stmt|;
name|size
operator|=
name|heapSize
argument_list|(
name|kv
argument_list|,
name|notpresent
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|size
return|;
block|}
comment|/*    * Calculate how the memcache size has changed, approximately.  Be careful.    * If class changes, be sure to change the size calculation.    * Add in tax of Map.Entry.    * @param kv    * @param notpresent True if the kv was NOT present in the set.    * @return Size    */
name|long
name|heapSize
parameter_list|(
specifier|final
name|KeyValue
name|kv
parameter_list|,
specifier|final
name|boolean
name|notpresent
parameter_list|)
block|{
return|return
name|notpresent
condition|?
comment|// Add overhead for value byte array and for Map.Entry -- 57 bytes
comment|// on x64 according to jprofiler.
name|ESTIMATED_KV_HEAP_TAX
operator|+
literal|57
operator|+
name|kv
operator|.
name|getLength
argument_list|()
else|:
literal|0
return|;
comment|// Guess no change in size.
block|}
comment|/**    * Look back through all the backlog TreeMaps to find the target.    * @param kv    * @param numVersions    * @return Set of KeyValues. Empty size not null if no results.    */
name|List
argument_list|<
name|KeyValue
argument_list|>
name|get
parameter_list|(
specifier|final
name|KeyValue
name|kv
parameter_list|,
specifier|final
name|int
name|numVersions
parameter_list|)
block|{
name|List
argument_list|<
name|KeyValue
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|get
argument_list|(
name|kv
argument_list|,
name|numVersions
argument_list|,
name|results
argument_list|,
operator|new
name|TreeSet
argument_list|<
name|KeyValue
argument_list|>
argument_list|(
name|this
operator|.
name|comparatorIgnoreType
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|results
return|;
block|}
comment|/**    * Look back through all the backlog TreeMaps to find the target.    * @param key    * @param versions    * @param results    * @param deletes Pass a Set that has a Comparator that ignores key type.    * @param now    * @return True if enough versions.    */
name|boolean
name|get
parameter_list|(
specifier|final
name|KeyValue
name|key
parameter_list|,
specifier|final
name|int
name|versions
parameter_list|,
name|List
argument_list|<
name|KeyValue
argument_list|>
name|results
parameter_list|,
specifier|final
name|NavigableSet
argument_list|<
name|KeyValue
argument_list|>
name|deletes
parameter_list|,
specifier|final
name|long
name|now
parameter_list|)
block|{
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|get
argument_list|(
name|this
operator|.
name|memcache
argument_list|,
name|key
argument_list|,
name|versions
argument_list|,
name|results
argument_list|,
name|deletes
argument_list|,
name|now
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|get
argument_list|(
name|this
operator|.
name|snapshot
argument_list|,
name|key
argument_list|,
name|versions
argument_list|,
name|results
argument_list|,
name|deletes
argument_list|,
name|now
argument_list|)
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * @param kv Find the row that comes after this one.  If null, we return the    * first.    * @return Next row or null if none found.    */
name|KeyValue
name|getNextRow
parameter_list|(
specifier|final
name|KeyValue
name|kv
parameter_list|)
block|{
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|getLowest
argument_list|(
name|getNextRow
argument_list|(
name|kv
argument_list|,
name|this
operator|.
name|memcache
argument_list|)
argument_list|,
name|getNextRow
argument_list|(
name|kv
argument_list|,
name|this
operator|.
name|snapshot
argument_list|)
argument_list|)
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/*    * @param a    * @param b    * @return Return lowest of a or b or null if both a and b are null    */
specifier|private
name|KeyValue
name|getLowest
parameter_list|(
specifier|final
name|KeyValue
name|a
parameter_list|,
specifier|final
name|KeyValue
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
return|return
name|b
return|;
block|}
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
return|return
name|a
return|;
block|}
return|return
name|comparator
operator|.
name|compareRows
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
operator|<=
literal|0
condition|?
name|a
else|:
name|b
return|;
block|}
comment|/*    * @param kv Find row that follows this one.  If null, return first.    * @param set Set to look in for a row beyond<code>row</code>.    * @return Next row or null if none found.  If one found, will be a new    * KeyValue -- can be destroyed by subsequent calls to this method.    */
specifier|private
name|KeyValue
name|getNextRow
parameter_list|(
specifier|final
name|KeyValue
name|kv
parameter_list|,
specifier|final
name|NavigableSet
argument_list|<
name|KeyValue
argument_list|>
name|set
parameter_list|)
block|{
name|KeyValue
name|result
init|=
literal|null
decl_stmt|;
name|SortedSet
argument_list|<
name|KeyValue
argument_list|>
name|tailset
init|=
name|kv
operator|==
literal|null
condition|?
name|set
else|:
name|set
operator|.
name|tailSet
argument_list|(
name|kv
argument_list|)
decl_stmt|;
comment|// Iterate until we fall into the next row; i.e. move off current row
for|for
control|(
name|KeyValue
name|i
range|:
name|tailset
control|)
block|{
if|if
condition|(
name|comparator
operator|.
name|compareRows
argument_list|(
name|i
argument_list|,
name|kv
argument_list|)
operator|<=
literal|0
condition|)
continue|continue;
comment|// Note: Not suppressing deletes or expired cells.  Needs to be handled
comment|// by higher up functions.
name|result
operator|=
name|i
expr_stmt|;
break|break;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Return all the available columns for the given key.  The key indicates a     * row and timestamp, but not a column name.    * @param origin Where to start searching.  Specifies a row and timestamp.    * Columns are specified in following arguments.    * @param columns Pass null for all columns else the wanted subset.    * @param columnPattern Column pattern to match.    * @param numVersions number of versions to retrieve    * @param versionsCount Map of KV to Count.  Uses a Comparator that doesn't    * look at timestamps so only Row/Column are compared.    * @param deletes Pass a Set that has a Comparator that ignores key type.    * @param results Where to stick row results found.    * @return True if we found enough results for passed<code>columns</code>    * and<code>numVersions</code>.    */
name|boolean
name|getFull
parameter_list|(
specifier|final
name|KeyValue
name|key
parameter_list|,
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
parameter_list|,
specifier|final
name|Pattern
name|columnPattern
parameter_list|,
name|int
name|numVersions
parameter_list|,
specifier|final
name|Map
argument_list|<
name|KeyValue
argument_list|,
name|HRegion
operator|.
name|Counter
argument_list|>
name|versionsCount
parameter_list|,
specifier|final
name|NavigableSet
argument_list|<
name|KeyValue
argument_list|>
name|deletes
parameter_list|,
specifier|final
name|List
argument_list|<
name|KeyValue
argument_list|>
name|results
parameter_list|,
specifier|final
name|long
name|now
parameter_list|)
block|{
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// Used to be synchronized but now with weak iteration, no longer needed.
if|if
condition|(
name|getFull
argument_list|(
name|this
operator|.
name|memcache
argument_list|,
name|key
argument_list|,
name|columns
argument_list|,
name|columnPattern
argument_list|,
name|numVersions
argument_list|,
name|versionsCount
argument_list|,
name|deletes
argument_list|,
name|results
argument_list|,
name|now
argument_list|)
condition|)
block|{
comment|// Has enough results.
return|return
literal|true
return|;
block|}
return|return
name|getFull
argument_list|(
name|this
operator|.
name|snapshot
argument_list|,
name|key
argument_list|,
name|columns
argument_list|,
name|columnPattern
argument_list|,
name|numVersions
argument_list|,
name|versionsCount
argument_list|,
name|deletes
argument_list|,
name|results
argument_list|,
name|now
argument_list|)
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/*    * @param set    * @param target Where to start searching.    * @param columns    * @param versions    * @param versionCounter    * @param deletes Pass a Set that has a Comparator that ignores key type.    * @param keyvalues    * @return True if enough results found.    */
specifier|private
name|boolean
name|getFull
parameter_list|(
specifier|final
name|ConcurrentSkipListSet
argument_list|<
name|KeyValue
argument_list|>
name|set
parameter_list|,
specifier|final
name|KeyValue
name|target
parameter_list|,
specifier|final
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
parameter_list|,
specifier|final
name|Pattern
name|columnPattern
parameter_list|,
specifier|final
name|int
name|versions
parameter_list|,
specifier|final
name|Map
argument_list|<
name|KeyValue
argument_list|,
name|HRegion
operator|.
name|Counter
argument_list|>
name|versionCounter
parameter_list|,
specifier|final
name|NavigableSet
argument_list|<
name|KeyValue
argument_list|>
name|deletes
parameter_list|,
name|List
argument_list|<
name|KeyValue
argument_list|>
name|keyvalues
parameter_list|,
specifier|final
name|long
name|now
parameter_list|)
block|{
name|boolean
name|hasEnough
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|target
operator|==
literal|null
condition|)
block|{
return|return
name|hasEnough
return|;
block|}
name|NavigableSet
argument_list|<
name|KeyValue
argument_list|>
name|tailset
init|=
name|set
operator|.
name|tailSet
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
name|tailset
operator|==
literal|null
operator|||
name|tailset
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|hasEnough
return|;
block|}
comment|// TODO: This loop same as in HStore.getFullFromStoreFile.  Make sure they
comment|// are the same.
for|for
control|(
name|KeyValue
name|kv
range|:
name|tailset
control|)
block|{
comment|// Make sure we have not passed out the row.  If target key has a
comment|// column on it, then we are looking explicit key+column combination.  If
comment|// we've passed it out, also break.
if|if
condition|(
name|target
operator|.
name|isEmptyColumn
argument_list|()
condition|?
operator|!
name|this
operator|.
name|comparator
operator|.
name|matchingRows
argument_list|(
name|target
argument_list|,
name|kv
argument_list|)
else|:
operator|!
name|this
operator|.
name|comparator
operator|.
name|matchingRowColumn
argument_list|(
name|target
argument_list|,
name|kv
argument_list|)
condition|)
block|{
break|break;
block|}
if|if
condition|(
operator|!
name|Store
operator|.
name|getFullCheck
argument_list|(
name|this
operator|.
name|comparator
argument_list|,
name|target
argument_list|,
name|kv
argument_list|,
name|columns
argument_list|,
name|columnPattern
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|Store
operator|.
name|doKeyValue
argument_list|(
name|kv
argument_list|,
name|versions
argument_list|,
name|versionCounter
argument_list|,
name|columns
argument_list|,
name|deletes
argument_list|,
name|now
argument_list|,
name|this
operator|.
name|ttl
argument_list|,
name|keyvalues
argument_list|,
name|tailset
argument_list|)
condition|)
block|{
name|hasEnough
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
return|return
name|hasEnough
return|;
block|}
comment|/**    * @param row Row to look for.    * @param candidateKeys Map of candidate keys (Accumulation over lots of    * lookup over stores and memcaches)    */
name|void
name|getRowKeyAtOrBefore
parameter_list|(
specifier|final
name|KeyValue
name|row
parameter_list|,
specifier|final
name|NavigableSet
argument_list|<
name|KeyValue
argument_list|>
name|candidateKeys
parameter_list|)
block|{
name|getRowKeyAtOrBefore
argument_list|(
name|row
argument_list|,
name|candidateKeys
argument_list|,
operator|new
name|TreeSet
argument_list|<
name|KeyValue
argument_list|>
argument_list|(
name|this
operator|.
name|comparator
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param kv Row to look for.    * @param candidates Map of candidate keys (Accumulation over lots of    * lookup over stores and memcaches).  Pass a Set with a Comparator that    * ignores key Type so we can do Set.remove using a delete, i.e. a KeyValue    * with a different Type to the candidate key.    * @param deletes Pass a Set that has a Comparator that ignores key type.    */
name|void
name|getRowKeyAtOrBefore
parameter_list|(
specifier|final
name|KeyValue
name|kv
parameter_list|,
specifier|final
name|NavigableSet
argument_list|<
name|KeyValue
argument_list|>
name|candidates
parameter_list|,
specifier|final
name|NavigableSet
argument_list|<
name|KeyValue
argument_list|>
name|deletes
parameter_list|,
specifier|final
name|long
name|now
parameter_list|)
block|{
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|getRowKeyAtOrBefore
argument_list|(
name|memcache
argument_list|,
name|kv
argument_list|,
name|candidates
argument_list|,
name|deletes
argument_list|,
name|now
argument_list|)
expr_stmt|;
name|getRowKeyAtOrBefore
argument_list|(
name|snapshot
argument_list|,
name|kv
argument_list|,
name|candidates
argument_list|,
name|deletes
argument_list|,
name|now
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|getRowKeyAtOrBefore
parameter_list|(
specifier|final
name|ConcurrentSkipListSet
argument_list|<
name|KeyValue
argument_list|>
name|set
parameter_list|,
specifier|final
name|KeyValue
name|kv
parameter_list|,
specifier|final
name|NavigableSet
argument_list|<
name|KeyValue
argument_list|>
name|candidates
parameter_list|,
specifier|final
name|NavigableSet
argument_list|<
name|KeyValue
argument_list|>
name|deletes
parameter_list|,
specifier|final
name|long
name|now
parameter_list|)
block|{
if|if
condition|(
name|set
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// We want the earliest possible to start searching from.  Start before
comment|// the candidate key in case it turns out a delete came in later.
name|KeyValue
name|search
init|=
name|candidates
operator|.
name|isEmpty
argument_list|()
condition|?
name|kv
else|:
name|candidates
operator|.
name|first
argument_list|()
decl_stmt|;
comment|// Get all the entries that come equal or after our search key
name|SortedSet
argument_list|<
name|KeyValue
argument_list|>
name|tailset
init|=
name|set
operator|.
name|tailSet
argument_list|(
name|search
argument_list|)
decl_stmt|;
comment|// if there are items in the tail map, there's either a direct match to
comment|// the search key, or a range of values between the first candidate key
comment|// and the ultimate search key (or the end of the cache)
if|if
condition|(
operator|!
name|tailset
operator|.
name|isEmpty
argument_list|()
operator|&&
name|this
operator|.
name|comparator
operator|.
name|compareRows
argument_list|(
name|tailset
operator|.
name|first
argument_list|()
argument_list|,
name|search
argument_list|)
operator|<=
literal|0
condition|)
block|{
comment|// Keep looking at cells as long as they are no greater than the
comment|// ultimate search key and there's still records left in the map.
name|KeyValue
name|deleted
init|=
literal|null
decl_stmt|;
name|KeyValue
name|found
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|KeyValue
argument_list|>
name|iterator
init|=
name|tailset
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
operator|&&
operator|(
name|found
operator|==
literal|null
operator|||
name|this
operator|.
name|comparator
operator|.
name|compareRows
argument_list|(
name|found
argument_list|,
name|kv
argument_list|)
operator|<=
literal|0
operator|)
condition|;
control|)
block|{
name|found
operator|=
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|comparator
operator|.
name|compareRows
argument_list|(
name|found
argument_list|,
name|kv
argument_list|)
operator|<=
literal|0
condition|)
block|{
if|if
condition|(
name|found
operator|.
name|isDeleteType
argument_list|()
condition|)
block|{
name|Store
operator|.
name|handleDeletes
argument_list|(
name|found
argument_list|,
name|candidates
argument_list|,
name|deletes
argument_list|)
expr_stmt|;
if|if
condition|(
name|deleted
operator|==
literal|null
condition|)
block|{
name|deleted
operator|=
name|found
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|Store
operator|.
name|notExpiredAndNotInDeletes
argument_list|(
name|this
operator|.
name|ttl
argument_list|,
name|found
argument_list|,
name|now
argument_list|,
name|deletes
argument_list|)
condition|)
block|{
name|candidates
operator|.
name|add
argument_list|(
name|found
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|deleted
operator|==
literal|null
condition|)
block|{
name|deleted
operator|=
name|found
expr_stmt|;
block|}
comment|// TODO: Check this removes the right key.
comment|// Its expired.  Remove it.
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|candidates
operator|.
name|isEmpty
argument_list|()
operator|&&
name|deleted
operator|!=
literal|null
condition|)
block|{
name|getRowKeyBefore
argument_list|(
name|set
argument_list|,
name|deleted
argument_list|,
name|candidates
argument_list|,
name|deletes
argument_list|,
name|now
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// The tail didn't contain any keys that matched our criteria, or was
comment|// empty. Examine all the keys that proceed our splitting point.
name|getRowKeyBefore
argument_list|(
name|set
argument_list|,
name|search
argument_list|,
name|candidates
argument_list|,
name|deletes
argument_list|,
name|now
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Get row key that comes before passed<code>search_key</code>    * Use when we know search_key is not in the map and we need to search    * earlier in the cache.    * @param set    * @param search    * @param candidates    * @param deletes Pass a Set that has a Comparator that ignores key type.    * @param now    */
specifier|private
name|void
name|getRowKeyBefore
parameter_list|(
name|ConcurrentSkipListSet
argument_list|<
name|KeyValue
argument_list|>
name|set
parameter_list|,
name|KeyValue
name|search
parameter_list|,
name|NavigableSet
argument_list|<
name|KeyValue
argument_list|>
name|candidates
parameter_list|,
specifier|final
name|NavigableSet
argument_list|<
name|KeyValue
argument_list|>
name|deletes
parameter_list|,
specifier|final
name|long
name|now
parameter_list|)
block|{
name|NavigableSet
argument_list|<
name|KeyValue
argument_list|>
name|headSet
init|=
name|set
operator|.
name|headSet
argument_list|(
name|search
argument_list|)
decl_stmt|;
comment|// If we tried to create a headMap and got an empty map, then there are
comment|// no keys at or before the search key, so we're done.
if|if
condition|(
name|headSet
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// If there aren't any candidate keys at this point, we need to search
comment|// backwards until we find at least one candidate or run out of headMap.
if|if
condition|(
name|candidates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|KeyValue
name|lastFound
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|KeyValue
argument_list|>
name|i
init|=
name|headSet
operator|.
name|descendingIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|KeyValue
name|found
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// if the last row we found a candidate key for is different than
comment|// the row of the current candidate, we can stop looking -- if its
comment|// not a delete record.
name|boolean
name|deleted
init|=
name|found
operator|.
name|isDeleteType
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastFound
operator|!=
literal|null
operator|&&
name|this
operator|.
name|comparator
operator|.
name|matchingRows
argument_list|(
name|lastFound
argument_list|,
name|found
argument_list|)
operator|&&
operator|!
name|deleted
condition|)
block|{
break|break;
block|}
comment|// If this isn't a delete, record it as a candidate key. Also
comment|// take note of this candidate so that we'll know when
comment|// we cross the row boundary into the previous row.
if|if
condition|(
operator|!
name|deleted
condition|)
block|{
if|if
condition|(
name|Store
operator|.
name|notExpiredAndNotInDeletes
argument_list|(
name|this
operator|.
name|ttl
argument_list|,
name|found
argument_list|,
name|now
argument_list|,
name|deletes
argument_list|)
condition|)
block|{
name|lastFound
operator|=
name|found
expr_stmt|;
name|candidates
operator|.
name|add
argument_list|(
name|found
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Its expired.
name|Store
operator|.
name|expiredOrDeleted
argument_list|(
name|set
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// We are encountering items in reverse.  We may have just added
comment|// an item to candidates that this later item deletes.  Check.  If we
comment|// found something in candidates, remove it from the set.
if|if
condition|(
name|Store
operator|.
name|handleDeletes
argument_list|(
name|found
argument_list|,
name|candidates
argument_list|,
name|deletes
argument_list|)
condition|)
block|{
name|remove
argument_list|(
name|set
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
comment|// If there are already some candidate keys, we only need to consider
comment|// the very last row's worth of keys in the headMap, because any
comment|// smaller acceptable candidate keys would have caused us to start
comment|// our search earlier in the list, and we wouldn't be searching here.
name|SortedSet
argument_list|<
name|KeyValue
argument_list|>
name|rowTailMap
init|=
name|headSet
operator|.
name|tailSet
argument_list|(
name|headSet
operator|.
name|last
argument_list|()
operator|.
name|cloneRow
argument_list|(
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|KeyValue
argument_list|>
name|i
init|=
name|rowTailMap
operator|.
name|iterator
argument_list|()
decl_stmt|;
do|do
block|{
name|KeyValue
name|found
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|found
operator|.
name|isDeleteType
argument_list|()
condition|)
block|{
name|Store
operator|.
name|handleDeletes
argument_list|(
name|found
argument_list|,
name|candidates
argument_list|,
name|deletes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|ttl
operator|==
name|HConstants
operator|.
name|FOREVER
operator|||
name|now
operator|<
name|found
operator|.
name|getTimestamp
argument_list|()
operator|+
name|ttl
operator|||
operator|!
name|deletes
operator|.
name|contains
argument_list|(
name|found
argument_list|)
condition|)
block|{
name|candidates
operator|.
name|add
argument_list|(
name|found
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Store
operator|.
name|expiredOrDeleted
argument_list|(
name|set
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
block|}
block|}
do|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
do|;
block|}
block|}
comment|/*    * Examine a single map for the desired key.    *    * TODO - This is kinda slow.  We need a data structure that allows for     * proximity-searches, not just precise-matches.    *     * @param set    * @param key    * @param results    * @param versions    * @param keyvalues    * @param deletes Pass a Set that has a Comparator that ignores key type.    * @param now    * @return True if enough versions.    */
specifier|private
name|boolean
name|get
parameter_list|(
specifier|final
name|ConcurrentSkipListSet
argument_list|<
name|KeyValue
argument_list|>
name|set
parameter_list|,
specifier|final
name|KeyValue
name|key
parameter_list|,
specifier|final
name|int
name|versions
parameter_list|,
specifier|final
name|List
argument_list|<
name|KeyValue
argument_list|>
name|keyvalues
parameter_list|,
specifier|final
name|NavigableSet
argument_list|<
name|KeyValue
argument_list|>
name|deletes
parameter_list|,
specifier|final
name|long
name|now
parameter_list|)
block|{
name|NavigableSet
argument_list|<
name|KeyValue
argument_list|>
name|tailset
init|=
name|set
operator|.
name|tailSet
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|tailset
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
name|enoughVersions
init|=
literal|false
decl_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
name|tailset
control|)
block|{
if|if
condition|(
name|this
operator|.
name|comparator
operator|.
name|matchingRowColumn
argument_list|(
name|kv
argument_list|,
name|key
argument_list|)
condition|)
block|{
if|if
condition|(
name|Store
operator|.
name|doKeyValue
argument_list|(
name|kv
argument_list|,
name|versions
argument_list|,
name|deletes
argument_list|,
name|now
argument_list|,
name|this
operator|.
name|ttl
argument_list|,
name|keyvalues
argument_list|,
name|tailset
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
else|else
block|{
comment|// By L.N. HBASE-684, map is sorted, so we can't find match any more.
break|break;
block|}
block|}
return|return
name|enoughVersions
return|;
block|}
comment|/*    * @param set    * @param kv This is a delete record.  Remove anything behind this of same    * r/c/ts.    * @return True if we removed anything.    */
specifier|private
name|boolean
name|remove
parameter_list|(
specifier|final
name|NavigableSet
argument_list|<
name|KeyValue
argument_list|>
name|set
parameter_list|,
specifier|final
name|KeyValue
name|kv
parameter_list|)
block|{
name|SortedSet
argument_list|<
name|KeyValue
argument_list|>
name|s
init|=
name|set
operator|.
name|tailSet
argument_list|(
name|kv
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
name|removed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|KeyValue
name|k
range|:
name|s
control|)
block|{
if|if
condition|(
name|this
operator|.
name|comparatorIgnoreType
operator|.
name|compare
argument_list|(
name|k
argument_list|,
name|kv
argument_list|)
operator|==
literal|0
condition|)
block|{
comment|// Same r/c/ts.  Remove it.
name|s
operator|.
name|remove
argument_list|(
name|k
argument_list|)
expr_stmt|;
name|removed
operator|=
literal|true
expr_stmt|;
continue|continue;
block|}
break|break;
block|}
return|return
name|removed
return|;
block|}
comment|/**    * @return a scanner over the keys in the Memcache    */
name|InternalScanner
name|getScanner
parameter_list|(
name|long
name|timestamp
parameter_list|,
specifier|final
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
name|targetCols
parameter_list|,
specifier|final
name|byte
index|[]
name|firstRow
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
operator|new
name|MemcacheScanner
argument_list|(
name|timestamp
argument_list|,
name|targetCols
argument_list|,
name|firstRow
argument_list|)
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|//////////////////////////////////////////////////////////////////////////////
comment|// MemcacheScanner implements the InternalScanner.
comment|// It lets the caller scan the contents of the Memcache.
comment|//////////////////////////////////////////////////////////////////////////////
specifier|private
class|class
name|MemcacheScanner
extends|extends
name|HAbstractScanner
block|{
specifier|private
name|KeyValue
name|current
decl_stmt|;
specifier|private
specifier|final
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
decl_stmt|;
specifier|private
specifier|final
name|NavigableSet
argument_list|<
name|KeyValue
argument_list|>
name|deletes
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|KeyValue
argument_list|,
name|Counter
argument_list|>
name|versionCounter
decl_stmt|;
specifier|private
specifier|final
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|MemcacheScanner
parameter_list|(
specifier|final
name|long
name|timestamp
parameter_list|,
specifier|final
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
parameter_list|,
specifier|final
name|byte
index|[]
name|firstRow
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Call to super will create ColumnMatchers and whether this is a regex
comment|// scanner or not.  Will also save away timestamp.  Also sorts rows.
name|super
argument_list|(
name|timestamp
argument_list|,
name|columns
argument_list|)
expr_stmt|;
name|this
operator|.
name|deletes
operator|=
operator|new
name|TreeSet
argument_list|<
name|KeyValue
argument_list|>
argument_list|(
name|comparatorIgnoreType
argument_list|)
expr_stmt|;
name|this
operator|.
name|versionCounter
operator|=
operator|new
name|TreeMap
argument_list|<
name|KeyValue
argument_list|,
name|Counter
argument_list|>
argument_list|(
name|comparatorIgnoreTimestamp
argument_list|)
expr_stmt|;
name|this
operator|.
name|current
operator|=
name|KeyValue
operator|.
name|createFirstOnRow
argument_list|(
name|firstRow
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
comment|// If we're being asked to scan explicit columns rather than all in
comment|// a family or columns that match regexes, cache the sorted array of
comment|// columns.
name|this
operator|.
name|columns
operator|=
name|isWildcardScanner
argument_list|()
condition|?
literal|null
else|:
name|columns
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|next
parameter_list|(
specifier|final
name|List
argument_list|<
name|KeyValue
argument_list|>
name|keyvalues
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|scannerClosed
condition|)
block|{
return|return
literal|false
return|;
block|}
while|while
condition|(
name|keyvalues
operator|.
name|isEmpty
argument_list|()
operator|&&
name|this
operator|.
name|current
operator|!=
literal|null
condition|)
block|{
comment|// Deletes are per row.
if|if
condition|(
operator|!
name|deletes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|deletes
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|versionCounter
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|versionCounter
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|// The getFull will take care of expired and deletes inside memcache.
comment|// The first getFull when row is the special empty bytes will return
comment|// nothing so we go around again.  Alternative is calling a getNextRow
comment|// if row is null but that looks like it would take same amount of work
comment|// so leave it for now.
name|getFull
argument_list|(
name|this
operator|.
name|current
argument_list|,
name|isWildcardScanner
argument_list|()
condition|?
literal|null
else|:
name|this
operator|.
name|columns
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|,
name|versionCounter
argument_list|,
name|deletes
argument_list|,
name|keyvalues
argument_list|,
name|this
operator|.
name|now
argument_list|)
expr_stmt|;
for|for
control|(
name|KeyValue
name|bb
range|:
name|keyvalues
control|)
block|{
if|if
condition|(
name|isWildcardScanner
argument_list|()
condition|)
block|{
comment|// Check the results match.  We only check columns, not timestamps.
comment|// We presume that timestamps have been handled properly when we
comment|// called getFull.
if|if
condition|(
operator|!
name|columnMatch
argument_list|(
name|bb
argument_list|)
condition|)
block|{
name|keyvalues
operator|.
name|remove
argument_list|(
name|bb
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Add any deletes found so they are available to the StoreScanner#next.
if|if
condition|(
operator|!
name|this
operator|.
name|deletes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|keyvalues
operator|.
name|addAll
argument_list|(
name|deletes
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|current
operator|=
name|getNextRow
argument_list|(
name|this
operator|.
name|current
argument_list|)
expr_stmt|;
comment|// Change current to be column-less and to have the scanners' now.  We
comment|// do this because first item on 'next row' may not have the scanners'
comment|// now time which will cause trouble down in getFull; same reason no
comment|// column.
if|if
condition|(
name|this
operator|.
name|current
operator|!=
literal|null
condition|)
name|this
operator|.
name|current
operator|=
name|this
operator|.
name|current
operator|.
name|cloneRow
argument_list|(
name|this
operator|.
name|now
argument_list|)
expr_stmt|;
block|}
return|return
operator|!
name|keyvalues
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
operator|!
name|scannerClosed
condition|)
block|{
name|scannerClosed
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Code to help figure if our approximation of object heap sizes is close    * enough.  See hbase-900.  Fills memcaches then waits so user can heap    * dump and bring up resultant hprof in something like jprofiler which    * allows you get 'deep size' on objects.    * @param args    * @throws InterruptedException    * @throws IOException     */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|RuntimeMXBean
name|runtime
init|=
name|ManagementFactory
operator|.
name|getRuntimeMXBean
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"vmName="
operator|+
name|runtime
operator|.
name|getVmName
argument_list|()
operator|+
literal|", vmVendor="
operator|+
name|runtime
operator|.
name|getVmVendor
argument_list|()
operator|+
literal|", vmVersion="
operator|+
name|runtime
operator|.
name|getVmVersion
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"vmInputArguments="
operator|+
name|runtime
operator|.
name|getInputArguments
argument_list|()
argument_list|)
expr_stmt|;
name|Memcache
name|memcache1
init|=
operator|new
name|Memcache
argument_list|()
decl_stmt|;
comment|// TODO: x32 vs x64
name|long
name|size
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|count
init|=
literal|10000
decl_stmt|;
name|byte
index|[]
name|column
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col:umn"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
comment|// Give each its own ts
name|size
operator|+=
name|memcache1
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|,
name|column
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"memcache1 estimated size="
operator|+
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|size
operator|+=
name|memcache1
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|,
name|column
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"memcache1 estimated size (2nd loading of same data)="
operator|+
name|size
argument_list|)
expr_stmt|;
comment|// Make a variably sized memcache.
name|Memcache
name|memcache2
init|=
operator|new
name|Memcache
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|size
operator|+=
name|memcache2
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|,
name|column
argument_list|,
name|i
argument_list|,
operator|new
name|byte
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"memcache2 estimated size="
operator|+
name|size
argument_list|)
expr_stmt|;
specifier|final
name|int
name|seconds
init|=
literal|30
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting "
operator|+
name|seconds
operator|+
literal|" seconds while heap dump is taken"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|seconds
condition|;
name|i
operator|++
control|)
block|{
comment|// Thread.sleep(1000);
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Exiting."
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

