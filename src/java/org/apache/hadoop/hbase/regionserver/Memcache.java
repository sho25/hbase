begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2008 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|rmi
operator|.
name|UnexpectedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HStoreKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * The Memcache holds in-memory modifications to the HRegion.  * Keeps a current map.  When asked to flush the map, current map is moved  * to snapshot and is cleared.  We continue to serve edits out of new map  * and backing snapshot until flusher reports in that the flush succeeded. At  * this point we let the snapshot go.  */
end_comment

begin_class
class|class
name|Memcache
block|{
specifier|private
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|long
name|ttl
decl_stmt|;
comment|// Note that since these structures are always accessed with a lock held,
comment|// so no additional synchronization is required.
comment|// The currently active sorted map of edits.
specifier|private
specifier|volatile
name|SortedMap
argument_list|<
name|HStoreKey
argument_list|,
name|byte
index|[]
argument_list|>
name|memcache
init|=
name|createSynchronizedSortedMap
argument_list|()
decl_stmt|;
comment|// Snapshot of memcache.  Made for flusher.
specifier|private
specifier|volatile
name|SortedMap
argument_list|<
name|HStoreKey
argument_list|,
name|byte
index|[]
argument_list|>
name|snapshot
init|=
name|createSynchronizedSortedMap
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ReentrantReadWriteLock
name|lock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
comment|/**    * Default constructor. Used for tests.    */
specifier|public
name|Memcache
parameter_list|()
block|{
name|ttl
operator|=
name|HConstants
operator|.
name|FOREVER
expr_stmt|;
block|}
comment|/**    * Constructor.    * @param ttl The TTL for cache entries, in milliseconds.    */
specifier|public
name|Memcache
parameter_list|(
name|long
name|ttl
parameter_list|)
block|{
name|this
operator|.
name|ttl
operator|=
name|ttl
expr_stmt|;
block|}
comment|/*    * Utility method.    * @return sycnhronized sorted map of HStoreKey to byte arrays.    */
specifier|private
specifier|static
name|SortedMap
argument_list|<
name|HStoreKey
argument_list|,
name|byte
index|[]
argument_list|>
name|createSynchronizedSortedMap
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|synchronizedSortedMap
argument_list|(
operator|new
name|TreeMap
argument_list|<
name|HStoreKey
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Creates a snapshot of the current Memcache.    * Snapshot must be cleared by call to {@link #clearSnapshot(SortedMap)}    * To get the snapshot made by this method, use    * {@link #getSnapshot}.    */
name|void
name|snapshot
parameter_list|()
block|{
name|this
operator|.
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// If snapshot currently has entries, then flusher failed or didn't call
comment|// cleanup.  Log a warning.
if|if
condition|(
name|this
operator|.
name|snapshot
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Snapshot called again without clearing previous. "
operator|+
literal|"Doing nothing. Another ongoing flush or did we fail last attempt?"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// We used to synchronize on the memcache here but we're inside a
comment|// write lock so removed it. Comment is left in case removal was a
comment|// mistake. St.Ack
if|if
condition|(
name|this
operator|.
name|memcache
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|this
operator|.
name|snapshot
operator|=
name|this
operator|.
name|memcache
expr_stmt|;
name|this
operator|.
name|memcache
operator|=
name|createSynchronizedSortedMap
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|this
operator|.
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Return the current snapshot.    * Called by flusher to get current snapshot made by a previous    * call to {@link snapshot}.    * @return Return snapshot.    * @see {@link #snapshot()}    * @see {@link #clearSnapshot(SortedMap)}    */
name|SortedMap
argument_list|<
name|HStoreKey
argument_list|,
name|byte
index|[]
argument_list|>
name|getSnapshot
parameter_list|()
block|{
return|return
name|this
operator|.
name|snapshot
return|;
block|}
comment|/**    * The passed snapshot was successfully persisted; it can be let go.    * @param ss The snapshot to clean out.    * @throws UnexpectedException    * @see {@link #snapshot()}    */
name|void
name|clearSnapshot
parameter_list|(
specifier|final
name|SortedMap
argument_list|<
name|HStoreKey
argument_list|,
name|byte
index|[]
argument_list|>
name|ss
parameter_list|)
throws|throws
name|UnexpectedException
block|{
name|this
operator|.
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|this
operator|.
name|snapshot
operator|!=
name|ss
condition|)
block|{
throw|throw
operator|new
name|UnexpectedException
argument_list|(
literal|"Current snapshot is "
operator|+
name|this
operator|.
name|snapshot
operator|+
literal|", was passed "
operator|+
name|ss
argument_list|)
throw|;
block|}
comment|// OK. Passed in snapshot is same as current snapshot.  If not-empty,
comment|// create a new snapshot and let the old one go.
if|if
condition|(
name|ss
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|this
operator|.
name|snapshot
operator|=
name|createSynchronizedSortedMap
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|this
operator|.
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Write an update    * @param key    * @param value    * @return memcache size delta    */
name|long
name|add
parameter_list|(
specifier|final
name|HStoreKey
name|key
parameter_list|,
specifier|final
name|byte
index|[]
name|value
parameter_list|)
block|{
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|byte
index|[]
name|oldValue
init|=
name|this
operator|.
name|memcache
operator|.
name|remove
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|this
operator|.
name|memcache
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|key
operator|.
name|getSize
argument_list|()
operator|+
operator|(
name|value
operator|==
literal|null
condition|?
literal|0
else|:
name|value
operator|.
name|length
operator|)
operator|-
operator|(
name|oldValue
operator|==
literal|null
condition|?
literal|0
else|:
name|oldValue
operator|.
name|length
operator|)
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Look back through all the backlog TreeMaps to find the target.    * @param key    * @param numVersions    * @return An array of byte arrays ordered by timestamp.    */
name|List
argument_list|<
name|Cell
argument_list|>
name|get
parameter_list|(
specifier|final
name|HStoreKey
name|key
parameter_list|,
specifier|final
name|int
name|numVersions
parameter_list|)
block|{
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|Cell
argument_list|>
name|results
decl_stmt|;
comment|// The synchronizations here are because internalGet iterates
synchronized|synchronized
init|(
name|this
operator|.
name|memcache
init|)
block|{
name|results
operator|=
name|internalGet
argument_list|(
name|this
operator|.
name|memcache
argument_list|,
name|key
argument_list|,
name|numVersions
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|this
operator|.
name|snapshot
init|)
block|{
name|results
operator|.
name|addAll
argument_list|(
name|results
operator|.
name|size
argument_list|()
argument_list|,
name|internalGet
argument_list|(
name|this
operator|.
name|snapshot
argument_list|,
name|key
argument_list|,
name|numVersions
operator|-
name|results
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * @param a    * @param b    * @return Return lowest of a or b or null if both a and b are null    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|byte
index|[]
name|getLowest
parameter_list|(
specifier|final
name|byte
index|[]
name|a
parameter_list|,
specifier|final
name|byte
index|[]
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
return|return
name|b
return|;
block|}
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
return|return
name|a
return|;
block|}
return|return
name|Bytes
operator|.
name|compareTo
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
operator|<=
literal|0
condition|?
name|a
else|:
name|b
return|;
block|}
comment|/**    * @param row Find the row that comes after this one.    * @return Next row or null if none found    */
name|byte
index|[]
name|getNextRow
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|)
block|{
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|getLowest
argument_list|(
name|getNextRow
argument_list|(
name|row
argument_list|,
name|this
operator|.
name|memcache
argument_list|)
argument_list|,
name|getNextRow
argument_list|(
name|row
argument_list|,
name|this
operator|.
name|snapshot
argument_list|)
argument_list|)
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/*    * @param row Find row that follows this one.    * @param map Map to look in for a row beyond<code>row</code>.    * This method synchronizes on passed map while iterating it.    * @return Next row or null if none found.    */
specifier|private
name|byte
index|[]
name|getNextRow
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|SortedMap
argument_list|<
name|HStoreKey
argument_list|,
name|byte
index|[]
argument_list|>
name|map
parameter_list|)
block|{
name|byte
index|[]
name|result
init|=
literal|null
decl_stmt|;
comment|// Synchronize on the map to make the tailMap making 'safe'.
synchronized|synchronized
init|(
name|map
init|)
block|{
comment|// Make an HSK with maximum timestamp so we get past most of the current
comment|// rows cell entries.
name|HStoreKey
name|hsk
init|=
operator|new
name|HStoreKey
argument_list|(
name|row
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
decl_stmt|;
name|SortedMap
argument_list|<
name|HStoreKey
argument_list|,
name|byte
index|[]
argument_list|>
name|tailMap
init|=
name|map
operator|.
name|tailMap
argument_list|(
name|hsk
argument_list|)
decl_stmt|;
comment|// Iterate until we fall into the next row; i.e. move off current row
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|HStoreKey
argument_list|,
name|byte
index|[]
argument_list|>
name|es
range|:
name|tailMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|HStoreKey
name|itKey
init|=
name|es
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|itKey
operator|.
name|getRow
argument_list|()
argument_list|,
name|row
argument_list|)
operator|<=
literal|0
condition|)
block|{
continue|continue;
block|}
comment|// Note: Not suppressing deletes or expired cells.
name|result
operator|=
name|itKey
operator|.
name|getRow
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**    * Return all the available columns for the given key.  The key indicates a     * row and timestamp, but not a column name.    * @param key    * @param columns Pass null for all columns else the wanted subset.    * @param deletes Map to accumulate deletes found.    * @param results Where to stick row results found.    */
name|void
name|getFull
parameter_list|(
name|HStoreKey
name|key
parameter_list|,
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
parameter_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|deletes
parameter_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Cell
argument_list|>
name|results
parameter_list|)
block|{
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// The synchronizations here are because internalGet iterates
synchronized|synchronized
init|(
name|this
operator|.
name|memcache
init|)
block|{
name|internalGetFull
argument_list|(
name|this
operator|.
name|memcache
argument_list|,
name|key
argument_list|,
name|columns
argument_list|,
name|deletes
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|this
operator|.
name|snapshot
init|)
block|{
name|internalGetFull
argument_list|(
name|this
operator|.
name|snapshot
argument_list|,
name|key
argument_list|,
name|columns
argument_list|,
name|deletes
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|internalGetFull
parameter_list|(
name|SortedMap
argument_list|<
name|HStoreKey
argument_list|,
name|byte
index|[]
argument_list|>
name|map
parameter_list|,
name|HStoreKey
name|key
parameter_list|,
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
parameter_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|deletes
parameter_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Cell
argument_list|>
name|results
parameter_list|)
block|{
if|if
condition|(
name|map
operator|.
name|isEmpty
argument_list|()
operator|||
name|key
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|HStoreKey
argument_list|>
name|victims
init|=
operator|new
name|ArrayList
argument_list|<
name|HStoreKey
argument_list|>
argument_list|()
decl_stmt|;
name|SortedMap
argument_list|<
name|HStoreKey
argument_list|,
name|byte
index|[]
argument_list|>
name|tailMap
init|=
name|map
operator|.
name|tailMap
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|HStoreKey
argument_list|,
name|byte
index|[]
argument_list|>
name|es
range|:
name|tailMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|HStoreKey
name|itKey
init|=
name|es
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|byte
index|[]
name|itCol
init|=
name|itKey
operator|.
name|getColumn
argument_list|()
decl_stmt|;
if|if
condition|(
name|results
operator|.
name|get
argument_list|(
name|itCol
argument_list|)
operator|==
literal|null
operator|&&
name|key
operator|.
name|matchesWithoutColumn
argument_list|(
name|itKey
argument_list|)
condition|)
block|{
if|if
condition|(
name|columns
operator|==
literal|null
operator|||
name|columns
operator|.
name|contains
argument_list|(
name|itKey
operator|.
name|getColumn
argument_list|()
argument_list|)
condition|)
block|{
name|byte
index|[]
name|val
init|=
name|tailMap
operator|.
name|get
argument_list|(
name|itKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|HLogEdit
operator|.
name|isDeleted
argument_list|(
name|val
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|deletes
operator|.
name|containsKey
argument_list|(
name|itCol
argument_list|)
operator|||
name|deletes
operator|.
name|get
argument_list|(
name|itCol
argument_list|)
operator|.
name|longValue
argument_list|()
operator|<
name|itKey
operator|.
name|getTimestamp
argument_list|()
condition|)
block|{
name|deletes
operator|.
name|put
argument_list|(
name|itCol
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|itKey
operator|.
name|getTimestamp
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
operator|(
name|deletes
operator|.
name|containsKey
argument_list|(
name|itCol
argument_list|)
operator|&&
name|deletes
operator|.
name|get
argument_list|(
name|itCol
argument_list|)
operator|.
name|longValue
argument_list|()
operator|>=
name|itKey
operator|.
name|getTimestamp
argument_list|()
operator|)
condition|)
block|{
comment|// Skip expired cells
if|if
condition|(
name|ttl
operator|==
name|HConstants
operator|.
name|FOREVER
operator|||
name|now
operator|<
name|itKey
operator|.
name|getTimestamp
argument_list|()
operator|+
name|ttl
condition|)
block|{
name|results
operator|.
name|put
argument_list|(
name|itCol
argument_list|,
operator|new
name|Cell
argument_list|(
name|val
argument_list|,
name|itKey
operator|.
name|getTimestamp
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|victims
operator|.
name|add
argument_list|(
name|itKey
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"internalGetFull: "
operator|+
name|itKey
operator|+
literal|": expired, skipped"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|key
operator|.
name|getRow
argument_list|()
argument_list|,
name|itKey
operator|.
name|getRow
argument_list|()
argument_list|)
operator|<
literal|0
condition|)
block|{
break|break;
block|}
block|}
comment|// Remove expired victims from the map.
for|for
control|(
name|HStoreKey
name|v
range|:
name|victims
control|)
name|map
operator|.
name|remove
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param row Row to look for.    * @param candidateKeys Map of candidate keys (Accumulation over lots of    * lookup over stores and memcaches)    */
name|void
name|getRowKeyAtOrBefore
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
name|SortedMap
argument_list|<
name|HStoreKey
argument_list|,
name|Long
argument_list|>
name|candidateKeys
parameter_list|)
block|{
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
synchronized|synchronized
init|(
name|memcache
init|)
block|{
name|internalGetRowKeyAtOrBefore
argument_list|(
name|memcache
argument_list|,
name|row
argument_list|,
name|candidateKeys
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|snapshot
init|)
block|{
name|internalGetRowKeyAtOrBefore
argument_list|(
name|snapshot
argument_list|,
name|row
argument_list|,
name|candidateKeys
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|internalGetRowKeyAtOrBefore
parameter_list|(
name|SortedMap
argument_list|<
name|HStoreKey
argument_list|,
name|byte
index|[]
argument_list|>
name|map
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|SortedMap
argument_list|<
name|HStoreKey
argument_list|,
name|Long
argument_list|>
name|candidateKeys
parameter_list|)
block|{
comment|// We want the earliest possible to start searching from.  Start before
comment|// the candidate key in case it turns out a delete came in later.
name|HStoreKey
name|search_key
init|=
name|candidateKeys
operator|.
name|isEmpty
argument_list|()
condition|?
operator|new
name|HStoreKey
argument_list|(
name|row
argument_list|)
else|:
operator|new
name|HStoreKey
argument_list|(
name|candidateKeys
operator|.
name|firstKey
argument_list|()
operator|.
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HStoreKey
argument_list|>
name|victims
init|=
operator|new
name|ArrayList
argument_list|<
name|HStoreKey
argument_list|>
argument_list|()
decl_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// Get all the entries that come equal or after our search key
name|SortedMap
argument_list|<
name|HStoreKey
argument_list|,
name|byte
index|[]
argument_list|>
name|tailMap
init|=
name|map
operator|.
name|tailMap
argument_list|(
name|search_key
argument_list|)
decl_stmt|;
comment|// if there are items in the tail map, there's either a direct match to
comment|// the search key, or a range of values between the first candidate key
comment|// and the ultimate search key (or the end of the cache)
if|if
condition|(
operator|!
name|tailMap
operator|.
name|isEmpty
argument_list|()
operator|&&
name|Bytes
operator|.
name|compareTo
argument_list|(
name|tailMap
operator|.
name|firstKey
argument_list|()
operator|.
name|getRow
argument_list|()
argument_list|,
name|search_key
operator|.
name|getRow
argument_list|()
argument_list|)
operator|<=
literal|0
condition|)
block|{
name|Iterator
argument_list|<
name|HStoreKey
argument_list|>
name|key_iterator
init|=
name|tailMap
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
comment|// Keep looking at cells as long as they are no greater than the
comment|// ultimate search key and there's still records left in the map.
name|HStoreKey
name|deletedOrExpiredRow
init|=
literal|null
decl_stmt|;
for|for
control|(
name|HStoreKey
name|found_key
init|=
literal|null
init|;
name|key_iterator
operator|.
name|hasNext
argument_list|()
operator|&&
operator|(
name|found_key
operator|==
literal|null
operator|||
name|Bytes
operator|.
name|compareTo
argument_list|(
name|found_key
operator|.
name|getRow
argument_list|()
argument_list|,
name|row
argument_list|)
operator|<=
literal|0
operator|)
condition|;
control|)
block|{
name|found_key
operator|=
name|key_iterator
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|found_key
operator|.
name|getRow
argument_list|()
argument_list|,
name|row
argument_list|)
operator|<=
literal|0
condition|)
block|{
if|if
condition|(
name|HLogEdit
operator|.
name|isDeleted
argument_list|(
name|tailMap
operator|.
name|get
argument_list|(
name|found_key
argument_list|)
argument_list|)
condition|)
block|{
name|handleDeleted
argument_list|(
name|found_key
argument_list|,
name|candidateKeys
argument_list|)
expr_stmt|;
if|if
condition|(
name|deletedOrExpiredRow
operator|==
literal|null
condition|)
block|{
name|deletedOrExpiredRow
operator|=
name|found_key
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|ttl
operator|==
name|HConstants
operator|.
name|FOREVER
operator|||
name|now
operator|<
name|found_key
operator|.
name|getTimestamp
argument_list|()
operator|+
name|ttl
condition|)
block|{
name|HStoreKey
name|strippedKey
init|=
name|stripTimestamp
argument_list|(
name|found_key
argument_list|)
decl_stmt|;
name|candidateKeys
operator|.
name|put
argument_list|(
name|strippedKey
argument_list|,
operator|new
name|Long
argument_list|(
name|found_key
operator|.
name|getTimestamp
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|deletedOrExpiredRow
operator|==
literal|null
condition|)
block|{
name|deletedOrExpiredRow
operator|=
operator|new
name|HStoreKey
argument_list|(
name|found_key
argument_list|)
expr_stmt|;
block|}
name|victims
operator|.
name|add
argument_list|(
name|found_key
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"internalGetRowKeyAtOrBefore:"
operator|+
name|found_key
operator|+
literal|" expired, skipped"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|candidateKeys
operator|.
name|isEmpty
argument_list|()
operator|&&
name|deletedOrExpiredRow
operator|!=
literal|null
condition|)
block|{
name|getRowKeyBefore
argument_list|(
name|map
argument_list|,
name|deletedOrExpiredRow
argument_list|,
name|candidateKeys
argument_list|,
name|victims
argument_list|,
name|now
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// The tail didn't contain any keys that matched our criteria, or was
comment|// empty. Examine all the keys that proceed our splitting point.
name|getRowKeyBefore
argument_list|(
name|map
argument_list|,
name|search_key
argument_list|,
name|candidateKeys
argument_list|,
name|victims
argument_list|,
name|now
argument_list|)
expr_stmt|;
block|}
comment|// Remove expired victims from the map.
for|for
control|(
name|HStoreKey
name|victim
range|:
name|victims
control|)
block|{
name|map
operator|.
name|remove
argument_list|(
name|victim
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Get row key that comes before passed<code>search_key</code>    * Use when we know search_key is not in the map and we need to search    * earlier in the cache.    * @param map    * @param search_key    * @param candidateKeys    * @param victims    */
specifier|private
name|void
name|getRowKeyBefore
parameter_list|(
name|SortedMap
argument_list|<
name|HStoreKey
argument_list|,
name|byte
index|[]
argument_list|>
name|map
parameter_list|,
name|HStoreKey
name|search_key
parameter_list|,
name|SortedMap
argument_list|<
name|HStoreKey
argument_list|,
name|Long
argument_list|>
name|candidateKeys
parameter_list|,
name|List
argument_list|<
name|HStoreKey
argument_list|>
name|victims
parameter_list|,
specifier|final
name|long
name|now
parameter_list|)
block|{
name|SortedMap
argument_list|<
name|HStoreKey
argument_list|,
name|byte
index|[]
argument_list|>
name|headMap
init|=
name|map
operator|.
name|headMap
argument_list|(
name|search_key
argument_list|)
decl_stmt|;
comment|// If we tried to create a headMap and got an empty map, then there are
comment|// no keys at or before the search key, so we're done.
if|if
condition|(
name|headMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// If there aren't any candidate keys at this point, we need to search
comment|// backwards until we find at least one candidate or run out of headMap.
name|HStoreKey
name|found_key
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|candidateKeys
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Set
argument_list|<
name|HStoreKey
argument_list|>
name|keys
init|=
name|headMap
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|HStoreKey
index|[]
name|cells
init|=
name|keys
operator|.
name|toArray
argument_list|(
operator|new
name|HStoreKey
index|[
name|keys
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|byte
index|[]
name|lastRowFound
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|cells
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|HStoreKey
name|thisKey
init|=
name|cells
index|[
name|i
index|]
decl_stmt|;
comment|// if the last row we found a candidate key for is different than
comment|// the row of the current candidate, we can stop looking -- if its
comment|// not a delete record.
name|boolean
name|deleted
init|=
name|HLogEdit
operator|.
name|isDeleted
argument_list|(
name|headMap
operator|.
name|get
argument_list|(
name|thisKey
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastRowFound
operator|!=
literal|null
operator|&&
operator|!
name|Bytes
operator|.
name|equals
argument_list|(
name|lastRowFound
argument_list|,
name|thisKey
operator|.
name|getRow
argument_list|()
argument_list|)
operator|&&
operator|!
name|deleted
condition|)
block|{
break|break;
block|}
comment|// If this isn't a delete, record it as a candidate key. Also
comment|// take note of the row of this candidate so that we'll know when
comment|// we cross the row boundary into the previous row.
if|if
condition|(
operator|!
name|deleted
condition|)
block|{
if|if
condition|(
name|ttl
operator|==
name|HConstants
operator|.
name|FOREVER
operator|||
name|now
operator|<
name|thisKey
operator|.
name|getTimestamp
argument_list|()
operator|+
name|ttl
condition|)
block|{
name|lastRowFound
operator|=
name|thisKey
operator|.
name|getRow
argument_list|()
expr_stmt|;
name|candidateKeys
operator|.
name|put
argument_list|(
name|stripTimestamp
argument_list|(
name|thisKey
argument_list|)
argument_list|,
operator|new
name|Long
argument_list|(
name|thisKey
operator|.
name|getTimestamp
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|victims
operator|.
name|add
argument_list|(
name|found_key
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"getRowKeyBefore: "
operator|+
name|found_key
operator|+
literal|": expired, skipped"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
else|else
block|{
comment|// If there are already some candidate keys, we only need to consider
comment|// the very last row's worth of keys in the headMap, because any
comment|// smaller acceptable candidate keys would have caused us to start
comment|// our search earlier in the list, and we wouldn't be searching here.
name|SortedMap
argument_list|<
name|HStoreKey
argument_list|,
name|byte
index|[]
argument_list|>
name|thisRowTailMap
init|=
name|headMap
operator|.
name|tailMap
argument_list|(
operator|new
name|HStoreKey
argument_list|(
name|headMap
operator|.
name|lastKey
argument_list|()
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|HStoreKey
argument_list|>
name|key_iterator
init|=
name|thisRowTailMap
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
do|do
block|{
name|found_key
operator|=
name|key_iterator
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|HLogEdit
operator|.
name|isDeleted
argument_list|(
name|thisRowTailMap
operator|.
name|get
argument_list|(
name|found_key
argument_list|)
argument_list|)
condition|)
block|{
name|handleDeleted
argument_list|(
name|found_key
argument_list|,
name|candidateKeys
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|ttl
operator|==
name|HConstants
operator|.
name|FOREVER
operator|||
name|now
operator|<
name|found_key
operator|.
name|getTimestamp
argument_list|()
operator|+
name|ttl
condition|)
block|{
name|candidateKeys
operator|.
name|put
argument_list|(
name|stripTimestamp
argument_list|(
name|found_key
argument_list|)
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|found_key
operator|.
name|getTimestamp
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|victims
operator|.
name|add
argument_list|(
name|found_key
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"internalGetRowKeyAtOrBefore: "
operator|+
name|found_key
operator|+
literal|": expired, skipped"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
do|while
condition|(
name|key_iterator
operator|.
name|hasNext
argument_list|()
condition|)
do|;
block|}
block|}
specifier|private
name|void
name|handleDeleted
parameter_list|(
specifier|final
name|HStoreKey
name|k
parameter_list|,
specifier|final
name|SortedMap
argument_list|<
name|HStoreKey
argument_list|,
name|Long
argument_list|>
name|candidateKeys
parameter_list|)
block|{
name|HStoreKey
name|strippedKey
init|=
name|stripTimestamp
argument_list|(
name|k
argument_list|)
decl_stmt|;
if|if
condition|(
name|candidateKeys
operator|.
name|containsKey
argument_list|(
name|strippedKey
argument_list|)
condition|)
block|{
name|long
name|bestCandidateTs
init|=
name|candidateKeys
operator|.
name|get
argument_list|(
name|strippedKey
argument_list|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|bestCandidateTs
operator|<=
name|k
operator|.
name|getTimestamp
argument_list|()
condition|)
block|{
name|candidateKeys
operator|.
name|remove
argument_list|(
name|strippedKey
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|static
name|HStoreKey
name|stripTimestamp
parameter_list|(
name|HStoreKey
name|key
parameter_list|)
block|{
return|return
operator|new
name|HStoreKey
argument_list|(
name|key
operator|.
name|getRow
argument_list|()
argument_list|,
name|key
operator|.
name|getColumn
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Examine a single map for the desired key.    *    * TODO - This is kinda slow.  We need a data structure that allows for     * proximity-searches, not just precise-matches.    *     * @param map    * @param key    * @param numVersions    * @return Ordered list of items found in passed<code>map</code>.  If no    * matching values, returns an empty list (does not return null).    */
specifier|private
name|ArrayList
argument_list|<
name|Cell
argument_list|>
name|internalGet
parameter_list|(
specifier|final
name|SortedMap
argument_list|<
name|HStoreKey
argument_list|,
name|byte
index|[]
argument_list|>
name|map
parameter_list|,
specifier|final
name|HStoreKey
name|key
parameter_list|,
specifier|final
name|int
name|numVersions
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|Cell
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
comment|// TODO: If get is of a particular version -- numVersions == 1 -- we
comment|// should be able to avoid all of the tailmap creations and iterations
comment|// below.
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|HStoreKey
argument_list|>
name|victims
init|=
operator|new
name|ArrayList
argument_list|<
name|HStoreKey
argument_list|>
argument_list|()
decl_stmt|;
name|SortedMap
argument_list|<
name|HStoreKey
argument_list|,
name|byte
index|[]
argument_list|>
name|tailMap
init|=
name|map
operator|.
name|tailMap
argument_list|(
name|key
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|HStoreKey
argument_list|,
name|byte
index|[]
argument_list|>
name|es
range|:
name|tailMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|HStoreKey
name|itKey
init|=
name|es
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|itKey
operator|.
name|matchesRowCol
argument_list|(
name|key
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|HLogEdit
operator|.
name|isDeleted
argument_list|(
name|es
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
comment|// Filter out expired results
if|if
condition|(
name|ttl
operator|==
name|HConstants
operator|.
name|FOREVER
operator|||
name|now
operator|<
name|itKey
operator|.
name|getTimestamp
argument_list|()
operator|+
name|ttl
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|Cell
argument_list|(
name|tailMap
operator|.
name|get
argument_list|(
name|itKey
argument_list|)
argument_list|,
name|itKey
operator|.
name|getTimestamp
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|numVersions
operator|>
literal|0
operator|&&
name|result
operator|.
name|size
argument_list|()
operator|>=
name|numVersions
condition|)
block|{
break|break;
block|}
block|}
else|else
block|{
name|victims
operator|.
name|add
argument_list|(
name|itKey
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"internalGet: "
operator|+
name|itKey
operator|+
literal|": expired, skipped"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
comment|// By L.N. HBASE-684, map is sorted, so we can't find match any more.
break|break;
block|}
block|}
comment|// Remove expired victims from the map.
for|for
control|(
name|HStoreKey
name|v
range|:
name|victims
control|)
block|{
name|map
operator|.
name|remove
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Get<code>versions</code> keys matching the origin key's    * row/column/timestamp and those of an older vintage    * Default access so can be accessed out of {@link HRegionServer}.    * @param origin Where to start searching.    * @param versions How many versions to return. Pass    * {@link HConstants.ALL_VERSIONS} to retrieve all.    * @return Ordered list of<code>versions</code> keys going from newest back.    * @throws IOException    */
name|List
argument_list|<
name|HStoreKey
argument_list|>
name|getKeys
parameter_list|(
specifier|final
name|HStoreKey
name|origin
parameter_list|,
specifier|final
name|int
name|versions
parameter_list|)
block|{
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|HStoreKey
argument_list|>
name|results
decl_stmt|;
synchronized|synchronized
init|(
name|memcache
init|)
block|{
name|results
operator|=
name|internalGetKeys
argument_list|(
name|this
operator|.
name|memcache
argument_list|,
name|origin
argument_list|,
name|versions
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|snapshot
init|)
block|{
name|results
operator|.
name|addAll
argument_list|(
name|results
operator|.
name|size
argument_list|()
argument_list|,
name|internalGetKeys
argument_list|(
name|snapshot
argument_list|,
name|origin
argument_list|,
name|versions
operator|==
name|HConstants
operator|.
name|ALL_VERSIONS
condition|?
name|versions
else|:
operator|(
name|versions
operator|-
name|results
operator|.
name|size
argument_list|()
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/*    * @param origin Where to start searching.    * @param versions How many versions to return. Pass    * {@link HConstants.ALL_VERSIONS} to retrieve all.    * @return List of all keys that are of the same row and column and of    * equal or older timestamp.  If no keys, returns an empty List. Does not    * return null.    */
specifier|private
name|List
argument_list|<
name|HStoreKey
argument_list|>
name|internalGetKeys
parameter_list|(
specifier|final
name|SortedMap
argument_list|<
name|HStoreKey
argument_list|,
name|byte
index|[]
argument_list|>
name|map
parameter_list|,
specifier|final
name|HStoreKey
name|origin
parameter_list|,
specifier|final
name|int
name|versions
parameter_list|)
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|HStoreKey
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|HStoreKey
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|HStoreKey
argument_list|>
name|victims
init|=
operator|new
name|ArrayList
argument_list|<
name|HStoreKey
argument_list|>
argument_list|()
decl_stmt|;
name|SortedMap
argument_list|<
name|HStoreKey
argument_list|,
name|byte
index|[]
argument_list|>
name|tailMap
init|=
name|map
operator|.
name|tailMap
argument_list|(
name|origin
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|HStoreKey
argument_list|,
name|byte
index|[]
argument_list|>
name|es
range|:
name|tailMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|HStoreKey
name|key
init|=
name|es
operator|.
name|getKey
argument_list|()
decl_stmt|;
comment|// if there's no column name, then compare rows and timestamps
if|if
condition|(
name|origin
operator|.
name|getColumn
argument_list|()
operator|!=
literal|null
operator|&&
name|origin
operator|.
name|getColumn
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|)
block|{
comment|// if the current and origin row don't match, then we can jump
comment|// out of the loop entirely.
if|if
condition|(
operator|!
name|Bytes
operator|.
name|equals
argument_list|(
name|key
operator|.
name|getRow
argument_list|()
argument_list|,
name|origin
operator|.
name|getRow
argument_list|()
argument_list|)
condition|)
block|{
break|break;
block|}
comment|// if the rows match but the timestamp is newer, skip it so we can
comment|// get to the ones we actually want.
if|if
condition|(
name|key
operator|.
name|getTimestamp
argument_list|()
operator|>
name|origin
operator|.
name|getTimestamp
argument_list|()
condition|)
block|{
continue|continue;
block|}
block|}
else|else
block|{
comment|// compare rows and columns
comment|// if the key doesn't match the row and column, then we're done, since
comment|// all the cells are ordered.
if|if
condition|(
operator|!
name|key
operator|.
name|matchesRowCol
argument_list|(
name|origin
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|HLogEdit
operator|.
name|isDeleted
argument_list|(
name|es
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|ttl
operator|==
name|HConstants
operator|.
name|FOREVER
operator|||
name|now
operator|<
name|key
operator|.
name|getTimestamp
argument_list|()
operator|+
name|ttl
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|victims
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"internalGetKeys: "
operator|+
name|key
operator|+
literal|": expired, skipped"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|result
operator|.
name|size
argument_list|()
operator|>=
name|versions
condition|)
block|{
comment|// We have enough results.  Return.
break|break;
block|}
block|}
block|}
comment|// Clean expired victims from the map.
for|for
control|(
name|HStoreKey
name|v
range|:
name|victims
control|)
name|map
operator|.
name|remove
argument_list|(
name|v
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * @param key    * @return True if an entry and its content is {@link HGlobals.deleteBytes}.    * Use checking values in store. On occasion the memcache has the fact that    * the cell has been deleted.    */
name|boolean
name|isDeleted
parameter_list|(
specifier|final
name|HStoreKey
name|key
parameter_list|)
block|{
return|return
name|HLogEdit
operator|.
name|isDeleted
argument_list|(
name|this
operator|.
name|memcache
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * @return a scanner over the keys in the Memcache    */
name|InternalScanner
name|getScanner
parameter_list|(
name|long
name|timestamp
parameter_list|,
specifier|final
name|byte
index|[]
index|[]
name|targetCols
parameter_list|,
specifier|final
name|byte
index|[]
name|firstRow
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
operator|new
name|MemcacheScanner
argument_list|(
name|timestamp
argument_list|,
name|targetCols
argument_list|,
name|firstRow
argument_list|)
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|//////////////////////////////////////////////////////////////////////////////
comment|// MemcacheScanner implements the InternalScanner.
comment|// It lets the caller scan the contents of the Memcache.
comment|//////////////////////////////////////////////////////////////////////////////
specifier|private
class|class
name|MemcacheScanner
extends|extends
name|HAbstractScanner
block|{
specifier|private
name|byte
index|[]
name|currentRow
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
init|=
literal|null
decl_stmt|;
name|MemcacheScanner
parameter_list|(
specifier|final
name|long
name|timestamp
parameter_list|,
specifier|final
name|byte
index|[]
name|targetCols
index|[]
parameter_list|,
specifier|final
name|byte
index|[]
name|firstRow
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Call to super will create ColumnMatchers and whether this is a regex
comment|// scanner or not.  Will also save away timestamp.  Also sorts rows.
name|super
argument_list|(
name|timestamp
argument_list|,
name|targetCols
argument_list|)
expr_stmt|;
name|this
operator|.
name|currentRow
operator|=
name|firstRow
expr_stmt|;
comment|// If we're being asked to scan explicit columns rather than all in
comment|// a family or columns that match regexes, cache the sorted array of
comment|// columns.
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
if|if
condition|(
operator|!
name|isWildcardScanner
argument_list|()
condition|)
block|{
name|this
operator|.
name|columns
operator|=
operator|new
name|TreeSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|targetCols
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|this
operator|.
name|columns
operator|.
name|add
argument_list|(
name|targetCols
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|boolean
name|next
parameter_list|(
name|HStoreKey
name|key
parameter_list|,
name|SortedMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Cell
argument_list|>
name|results
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|scannerClosed
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// This is a treemap rather than a Hashmap because then I can have a
comment|// byte array as key -- because I can independently specify a comparator.
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|deletes
init|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
comment|// Catch all row results in here.  These results are ten filtered to
comment|// ensure they match column name regexes, or if none, added to results.
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Cell
argument_list|>
name|rowResults
init|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Cell
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
if|if
condition|(
name|results
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|long
name|latestTimestamp
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|results
operator|.
name|size
argument_list|()
operator|<=
literal|0
operator|&&
name|this
operator|.
name|currentRow
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|deletes
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|deletes
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|rowResults
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|rowResults
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|key
operator|.
name|setRow
argument_list|(
name|this
operator|.
name|currentRow
argument_list|)
expr_stmt|;
name|key
operator|.
name|setVersion
argument_list|(
name|this
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|getFull
argument_list|(
name|key
argument_list|,
name|isWildcardScanner
argument_list|()
condition|?
literal|null
else|:
name|this
operator|.
name|columns
argument_list|,
name|deletes
argument_list|,
name|rowResults
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|e
range|:
name|deletes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|rowResults
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
operator|new
name|Cell
argument_list|(
name|HLogEdit
operator|.
name|deleteBytes
operator|.
name|get
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|Cell
argument_list|>
name|e
range|:
name|rowResults
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|byte
index|[]
name|column
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Cell
name|c
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|isWildcardScanner
argument_list|()
condition|)
block|{
comment|// Check the results match.  We only check columns, not timestamps.
comment|// We presume that timestamps have been handled properly when we
comment|// called getFull.
if|if
condition|(
operator|!
name|columnMatch
argument_list|(
name|column
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
comment|// We should never return HConstants.LATEST_TIMESTAMP as the time for
comment|// the row. As a compromise, we return the largest timestamp for the
comment|// entries that we find that match.
if|if
condition|(
name|c
operator|.
name|getTimestamp
argument_list|()
operator|!=
name|HConstants
operator|.
name|LATEST_TIMESTAMP
operator|&&
name|c
operator|.
name|getTimestamp
argument_list|()
operator|>
name|latestTimestamp
condition|)
block|{
name|latestTimestamp
operator|=
name|c
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
block|}
name|results
operator|.
name|put
argument_list|(
name|column
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|currentRow
operator|=
name|getNextRow
argument_list|(
name|this
operator|.
name|currentRow
argument_list|)
expr_stmt|;
block|}
comment|// Set the timestamp to the largest one for the row if we would otherwise
comment|// return HConstants.LATEST_TIMESTAMP
if|if
condition|(
name|key
operator|.
name|getTimestamp
argument_list|()
operator|==
name|HConstants
operator|.
name|LATEST_TIMESTAMP
condition|)
block|{
name|key
operator|.
name|setVersion
argument_list|(
name|latestTimestamp
argument_list|)
expr_stmt|;
block|}
return|return
name|results
operator|.
name|size
argument_list|()
operator|>
literal|0
return|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
operator|!
name|scannerClosed
condition|)
block|{
name|scannerClosed
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

