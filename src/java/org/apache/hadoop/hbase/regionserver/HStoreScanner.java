begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2008 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HStoreKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|RowFilterInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_comment
comment|/**  * Scanner scans both the memcache and the HStore  */
end_comment

begin_class
class|class
name|HStoreScanner
implements|implements
name|HInternalScannerInterface
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HStoreScanner
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|HInternalScannerInterface
index|[]
name|scanners
decl_stmt|;
specifier|private
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
index|[]
name|resultSets
decl_stmt|;
specifier|private
name|HStoreKey
index|[]
name|keys
decl_stmt|;
specifier|private
name|boolean
name|wildcardMatch
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|multipleMatchers
init|=
literal|false
decl_stmt|;
specifier|private
name|RowFilterInterface
name|dataFilter
decl_stmt|;
specifier|private
name|HStore
name|store
decl_stmt|;
comment|/** Create an Scanner with a handle on the memcache and HStore files. */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|HStoreScanner
parameter_list|(
name|HStore
name|store
parameter_list|,
name|Text
index|[]
name|targetCols
parameter_list|,
name|Text
name|firstRow
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|RowFilterInterface
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
name|this
operator|.
name|dataFilter
operator|=
name|filter
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|dataFilter
condition|)
block|{
name|dataFilter
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|scanners
operator|=
operator|new
name|HInternalScannerInterface
index|[
literal|2
index|]
expr_stmt|;
name|this
operator|.
name|resultSets
operator|=
operator|new
name|TreeMap
index|[
name|scanners
operator|.
name|length
index|]
expr_stmt|;
name|this
operator|.
name|keys
operator|=
operator|new
name|HStoreKey
index|[
name|scanners
operator|.
name|length
index|]
expr_stmt|;
try|try
block|{
name|scanners
index|[
literal|0
index|]
operator|=
name|store
operator|.
name|memcache
operator|.
name|getScanner
argument_list|(
name|timestamp
argument_list|,
name|targetCols
argument_list|,
name|firstRow
argument_list|)
expr_stmt|;
name|scanners
index|[
literal|1
index|]
operator|=
operator|new
name|StoreFileScanner
argument_list|(
name|store
argument_list|,
name|timestamp
argument_list|,
name|targetCols
argument_list|,
name|firstRow
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|scanners
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|scanners
index|[
name|i
index|]
operator|.
name|isWildcardScanner
argument_list|()
condition|)
block|{
name|this
operator|.
name|wildcardMatch
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|scanners
index|[
name|i
index|]
operator|.
name|isMultipleMatchScanner
argument_list|()
condition|)
block|{
name|this
operator|.
name|multipleMatchers
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|this
operator|.
name|scanners
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|scanners
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|closeScanner
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
name|e
throw|;
block|}
comment|// Advance to the first key in each scanner.
comment|// All results will match the required column-set and scanTime.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|scanners
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|keys
index|[
name|i
index|]
operator|=
operator|new
name|HStoreKey
argument_list|()
expr_stmt|;
name|resultSets
index|[
name|i
index|]
operator|=
operator|new
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|()
expr_stmt|;
if|if
condition|(
name|scanners
index|[
name|i
index|]
operator|!=
literal|null
operator|&&
operator|!
name|scanners
index|[
name|i
index|]
operator|.
name|next
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|,
name|resultSets
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|closeScanner
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
comment|// As we have now successfully completed initialization, increment the
comment|// activeScanner count.
name|store
operator|.
name|activeScanners
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
comment|/** @return true if the scanner is a wild card scanner */
specifier|public
name|boolean
name|isWildcardScanner
parameter_list|()
block|{
return|return
name|wildcardMatch
return|;
block|}
comment|/** @return true if the scanner is a multiple match scanner */
specifier|public
name|boolean
name|isMultipleMatchScanner
parameter_list|()
block|{
return|return
name|multipleMatchers
return|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|boolean
name|next
parameter_list|(
name|HStoreKey
name|key
parameter_list|,
name|SortedMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|results
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Filtered flag is set by filters.  If a cell has been 'filtered out'
comment|// -- i.e. it is not to be returned to the caller -- the flag is 'true'.
name|boolean
name|filtered
init|=
literal|true
decl_stmt|;
name|boolean
name|moreToFollow
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|filtered
operator|&&
name|moreToFollow
condition|)
block|{
comment|// Find the lowest-possible key.
name|Text
name|chosenRow
init|=
literal|null
decl_stmt|;
name|long
name|chosenTimestamp
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|this
operator|.
name|keys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|scanners
index|[
name|i
index|]
operator|!=
literal|null
operator|&&
operator|(
name|chosenRow
operator|==
literal|null
operator|||
operator|(
name|keys
index|[
name|i
index|]
operator|.
name|getRow
argument_list|()
operator|.
name|compareTo
argument_list|(
name|chosenRow
argument_list|)
operator|<
literal|0
operator|)
operator|||
operator|(
operator|(
name|keys
index|[
name|i
index|]
operator|.
name|getRow
argument_list|()
operator|.
name|compareTo
argument_list|(
name|chosenRow
argument_list|)
operator|==
literal|0
operator|)
operator|&&
operator|(
name|keys
index|[
name|i
index|]
operator|.
name|getTimestamp
argument_list|()
operator|>
name|chosenTimestamp
operator|)
operator|)
operator|)
condition|)
block|{
name|chosenRow
operator|=
operator|new
name|Text
argument_list|(
name|keys
index|[
name|i
index|]
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|chosenTimestamp
operator|=
name|keys
index|[
name|i
index|]
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Filter whole row by row key?
name|filtered
operator|=
name|dataFilter
operator|!=
literal|null
condition|?
name|dataFilter
operator|.
name|filter
argument_list|(
name|chosenRow
argument_list|)
else|:
literal|false
expr_stmt|;
comment|// Store the key and results for each sub-scanner. Merge them as
comment|// appropriate.
if|if
condition|(
name|chosenTimestamp
operator|>=
literal|0
operator|&&
operator|!
name|filtered
condition|)
block|{
comment|// Here we are setting the passed in key with current row+timestamp
name|key
operator|.
name|setRow
argument_list|(
name|chosenRow
argument_list|)
expr_stmt|;
name|key
operator|.
name|setVersion
argument_list|(
name|chosenTimestamp
argument_list|)
expr_stmt|;
name|key
operator|.
name|setColumn
argument_list|(
name|HConstants
operator|.
name|EMPTY_TEXT
argument_list|)
expr_stmt|;
comment|// Keep list of deleted cell keys within this row.  We need this
comment|// because as we go through scanners, the delete record may be in an
comment|// early scanner and then the same record with a non-delete, non-null
comment|// value in a later. Without history of what we've seen, we'll return
comment|// deleted values. This List should not ever grow too large since we
comment|// are only keeping rows and columns that match those set on the
comment|// scanner and which have delete values.  If memory usage becomes a
comment|// problem, could redo as bloom filter.
name|List
argument_list|<
name|HStoreKey
argument_list|>
name|deletes
init|=
operator|new
name|ArrayList
argument_list|<
name|HStoreKey
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|scanners
operator|.
name|length
operator|&&
operator|!
name|filtered
condition|;
name|i
operator|++
control|)
block|{
while|while
condition|(
operator|(
name|scanners
index|[
name|i
index|]
operator|!=
literal|null
operator|&&
operator|!
name|filtered
operator|&&
name|moreToFollow
operator|)
operator|&&
operator|(
name|keys
index|[
name|i
index|]
operator|.
name|getRow
argument_list|()
operator|.
name|compareTo
argument_list|(
name|chosenRow
argument_list|)
operator|==
literal|0
operator|)
condition|)
block|{
comment|// If we are doing a wild card match or there are multiple
comment|// matchers per column, we need to scan all the older versions of
comment|// this row to pick up the rest of the family members
if|if
condition|(
operator|!
name|wildcardMatch
operator|&&
operator|!
name|multipleMatchers
operator|&&
operator|(
name|keys
index|[
name|i
index|]
operator|.
name|getTimestamp
argument_list|()
operator|!=
name|chosenTimestamp
operator|)
condition|)
block|{
break|break;
block|}
comment|// NOTE: We used to do results.putAll(resultSets[i]);
comment|// but this had the effect of overwriting newer
comment|// values with older ones. So now we only insert
comment|// a result if the map does not contain the key.
name|HStoreKey
name|hsk
init|=
operator|new
name|HStoreKey
argument_list|(
name|key
operator|.
name|getRow
argument_list|()
argument_list|,
name|HConstants
operator|.
name|EMPTY_TEXT
argument_list|,
name|key
operator|.
name|getTimestamp
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|e
range|:
name|resultSets
index|[
name|i
index|]
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|hsk
operator|.
name|setColumn
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|HLogEdit
operator|.
name|isDeleted
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|deletes
operator|.
name|contains
argument_list|(
name|hsk
argument_list|)
condition|)
block|{
comment|// Key changes as we cycle the for loop so add a copy to
comment|// the set of deletes.
name|deletes
operator|.
name|add
argument_list|(
operator|new
name|HStoreKey
argument_list|(
name|hsk
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|deletes
operator|.
name|contains
argument_list|(
name|hsk
argument_list|)
operator|&&
operator|!
name|filtered
operator|&&
name|moreToFollow
operator|&&
operator|!
name|results
operator|.
name|containsKey
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|dataFilter
operator|!=
literal|null
condition|)
block|{
comment|// Filter whole row by column data?
name|filtered
operator|=
name|dataFilter
operator|.
name|filter
argument_list|(
name|chosenRow
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|filtered
condition|)
block|{
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|results
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|resultSets
index|[
name|i
index|]
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|scanners
index|[
name|i
index|]
operator|.
name|next
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|,
name|resultSets
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|closeScanner
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|scanners
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// If the current scanner is non-null AND has a lower-or-equal
comment|// row label, then its timestamp is bad. We need to advance it.
while|while
condition|(
operator|(
name|scanners
index|[
name|i
index|]
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|keys
index|[
name|i
index|]
operator|.
name|getRow
argument_list|()
operator|.
name|compareTo
argument_list|(
name|chosenRow
argument_list|)
operator|<=
literal|0
operator|)
condition|)
block|{
name|resultSets
index|[
name|i
index|]
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|scanners
index|[
name|i
index|]
operator|.
name|next
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|,
name|resultSets
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|closeScanner
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|moreToFollow
operator|=
name|chosenTimestamp
operator|>=
literal|0
expr_stmt|;
if|if
condition|(
name|dataFilter
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|moreToFollow
condition|)
block|{
name|dataFilter
operator|.
name|rowProcessed
argument_list|(
name|filtered
argument_list|,
name|chosenRow
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dataFilter
operator|.
name|filterAllRemaining
argument_list|()
condition|)
block|{
name|moreToFollow
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|results
operator|.
name|size
argument_list|()
operator|<=
literal|0
operator|&&
operator|!
name|filtered
condition|)
block|{
comment|// There were no results found for this row.  Marked it as
comment|// 'filtered'-out otherwise we will not move on to the next row.
name|filtered
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// If we got no results, then there is no more to follow.
if|if
condition|(
name|results
operator|==
literal|null
operator|||
name|results
operator|.
name|size
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|moreToFollow
operator|=
literal|false
expr_stmt|;
block|}
comment|// Make sure scanners closed if no more results
if|if
condition|(
operator|!
name|moreToFollow
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|scanners
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
literal|null
operator|!=
name|scanners
index|[
name|i
index|]
condition|)
block|{
name|closeScanner
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|moreToFollow
return|;
block|}
comment|/** Shut down a single scanner */
name|void
name|closeScanner
parameter_list|(
name|int
name|i
parameter_list|)
block|{
try|try
block|{
try|try
block|{
name|scanners
index|[
name|i
index|]
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|store
operator|.
name|storeName
operator|+
literal|" failed closing scanner "
operator|+
name|i
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|scanners
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
name|keys
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
name|resultSets
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/** {@inheritDoc} */
specifier|public
name|void
name|close
parameter_list|()
block|{
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|scanners
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|scanners
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|closeScanner
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|store
operator|.
name|updateActiveScanners
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** {@inheritDoc} */
specifier|public
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|HStoreKey
argument_list|,
name|SortedMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Unimplemented serverside. "
operator|+
literal|"next(HStoreKey, StortedMap(...) is more efficient"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

