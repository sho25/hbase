begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2009 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|server
operator|.
name|ServerConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|server
operator|.
name|ZooKeeperServerMain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|server
operator|.
name|quorum
operator|.
name|QuorumPeerConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|server
operator|.
name|quorum
operator|.
name|QuorumPeerMain
import|;
end_import

begin_comment
comment|/**  * HBase's version of ZooKeeper's QuorumPeer. When HBase is set to manage  * ZooKeeper, this class is used to start up QuorumPeer instances. By doing  * things in here rather than directly calling to ZooKeeper, we have more  * control over the process. Currently, this class allows us to parse the  * zoo.cfg and inject variables from HBase's site.xml configuration in.  */
end_comment

begin_class
specifier|public
class|class
name|HQuorumPeer
implements|implements
name|HConstants
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HQuorumPeer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|VARIABLE_START
init|=
literal|"${"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|VARIABLE_START_LENGTH
init|=
name|VARIABLE_START
operator|.
name|length
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|VARIABLE_END
init|=
literal|"}"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|VARIABLE_END_LENGTH
init|=
name|VARIABLE_END
operator|.
name|length
argument_list|()
decl_stmt|;
comment|/**    * Parse ZooKeeper configuration and run a QuorumPeer.    * While parsing the zoo.cfg, we substitute variables with values from    * hbase-site.xml.    * @param args String[] of command line arguments. Not used.    */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
name|parseConfig
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ServerConfig
operator|.
name|isStandalone
argument_list|()
condition|)
block|{
name|ZooKeeperServerMain
operator|.
name|main
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QuorumPeerMain
operator|.
name|runPeerFromConfig
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Parse zoo.cfg, injecting HBase Configuration variables in.    * @throws Exception if anything goes wrong parsing config    */
specifier|public
specifier|static
name|void
name|parseConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|ClassLoader
name|cl
init|=
name|HQuorumPeer
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
name|InputStream
name|inputStream
init|=
name|cl
operator|.
name|getResourceAsStream
argument_list|(
name|ZOOKEEPER_CONFIG_NAME
argument_list|)
decl_stmt|;
name|parseConfig
argument_list|(
name|inputStream
argument_list|)
expr_stmt|;
block|}
comment|/**    * This is a separate method from parseConfig() so that we can test by passing    * in our own InputStreams rather than reading directly from zoo.cfg.    * Parse zoo.cfg, injecting HBase Configuration variables in.    * @param inputStream InputStream to parse.    * @throws Exception if anything goes wrong parsing config    */
specifier|public
specifier|static
name|void
name|parseConfig
parameter_list|(
name|InputStream
name|inputStream
parameter_list|)
throws|throws
name|Exception
block|{
name|HBaseConfiguration
name|conf
init|=
operator|new
name|HBaseConfiguration
argument_list|()
decl_stmt|;
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
try|try
block|{
name|properties
operator|.
name|load
argument_list|(
name|inputStream
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"fail to read properties from "
operator|+
name|ZOOKEEPER_CONFIG_NAME
decl_stmt|;
name|LOG
operator|.
name|fatal
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
for|for
control|(
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|properties
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|StringBuilder
name|newValue
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|varStart
init|=
name|value
operator|.
name|indexOf
argument_list|(
name|VARIABLE_START
argument_list|)
decl_stmt|;
name|int
name|varEnd
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|varStart
operator|!=
operator|-
literal|1
condition|)
block|{
name|varEnd
operator|=
name|value
operator|.
name|indexOf
argument_list|(
name|VARIABLE_END
argument_list|,
name|varStart
argument_list|)
expr_stmt|;
if|if
condition|(
name|varEnd
operator|==
operator|-
literal|1
condition|)
block|{
name|String
name|msg
init|=
literal|"variable at "
operator|+
name|varStart
operator|+
literal|" has no end marker"
decl_stmt|;
name|LOG
operator|.
name|fatal
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|String
name|variable
init|=
name|value
operator|.
name|substring
argument_list|(
name|varStart
operator|+
name|VARIABLE_START_LENGTH
argument_list|,
name|varEnd
argument_list|)
decl_stmt|;
name|String
name|substituteValue
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|variable
argument_list|)
decl_stmt|;
if|if
condition|(
name|substituteValue
operator|==
literal|null
condition|)
block|{
name|substituteValue
operator|=
name|conf
operator|.
name|get
argument_list|(
name|variable
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|substituteValue
operator|==
literal|null
condition|)
block|{
name|String
name|msg
init|=
literal|"variable "
operator|+
name|variable
operator|+
literal|" not set in system property "
operator|+
literal|"or hbase configs"
decl_stmt|;
name|LOG
operator|.
name|fatal
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|newValue
operator|.
name|append
argument_list|(
name|substituteValue
argument_list|)
expr_stmt|;
name|varEnd
operator|+=
name|VARIABLE_END_LENGTH
expr_stmt|;
name|varStart
operator|=
name|value
operator|.
name|indexOf
argument_list|(
name|VARIABLE_START
argument_list|,
name|varEnd
argument_list|)
expr_stmt|;
block|}
name|newValue
operator|.
name|append
argument_list|(
name|value
operator|.
name|substring
argument_list|(
name|varEnd
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|newValue
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QuorumPeerConfig
operator|.
name|parseProperties
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

