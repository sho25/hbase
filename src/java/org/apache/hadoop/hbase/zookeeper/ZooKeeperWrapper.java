begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2009 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooDefs
operator|.
name|Ids
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooKeeper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooKeeper
operator|.
name|States
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import

begin_comment
comment|/**  * Wraps a ZooKeeper instance and adds HBase specific functionality.  *  * This class provides methods to:  * - read/write/delete the root region location in ZooKeeper.  * - set/check out of safe mode flag.  */
end_comment

begin_class
specifier|public
class|class
name|ZooKeeperWrapper
implements|implements
name|HConstants
block|{
specifier|protected
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ZooKeeperWrapper
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// TODO: Replace this with ZooKeeper constant when ZOOKEEPER-277 is resolved.
specifier|private
specifier|static
specifier|final
name|String
name|ZNODE_PATH_SEPARATOR
init|=
literal|"/"
decl_stmt|;
specifier|private
specifier|static
name|String
name|quorumServers
init|=
literal|null
decl_stmt|;
static|static
block|{
name|loadZooKeeperConfig
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|final
name|ZooKeeper
name|zooKeeper
decl_stmt|;
specifier|private
specifier|final
name|WatcherWrapper
name|watcher
decl_stmt|;
specifier|private
specifier|final
name|String
name|parentZNode
decl_stmt|;
specifier|private
specifier|final
name|String
name|rootRegionZNode
decl_stmt|;
specifier|private
specifier|final
name|String
name|outOfSafeModeZNode
decl_stmt|;
specifier|private
specifier|final
name|String
name|rsZNode
decl_stmt|;
comment|/**    * Create a ZooKeeperWrapper.    * @param conf HBaseConfiguration to read settings from.    * @throws IOException If a connection error occurs.    */
specifier|public
name|ZooKeeperWrapper
parameter_list|(
name|HBaseConfiguration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a ZooKeeperWrapper.    * @param conf HBaseConfiguration to read settings from.    * @param watcher ZooKeeper watcher to register.    * @throws IOException If a connection error occurs.    */
specifier|public
name|ZooKeeperWrapper
parameter_list|(
name|HBaseConfiguration
name|conf
parameter_list|,
name|Watcher
name|watcher
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|quorumServers
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not read quorum servers from "
operator|+
name|ZOOKEEPER_CONFIG_NAME
argument_list|)
throw|;
block|}
name|int
name|sessionTimeout
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|ZOOKEEPER_SESSION_TIMEOUT
argument_list|,
name|DEFAULT_ZOOKEEPER_SESSION_TIMEOUT
argument_list|)
decl_stmt|;
name|this
operator|.
name|watcher
operator|=
operator|new
name|WatcherWrapper
argument_list|(
name|watcher
argument_list|)
expr_stmt|;
try|try
block|{
name|zooKeeper
operator|=
operator|new
name|ZooKeeper
argument_list|(
name|quorumServers
argument_list|,
name|sessionTimeout
argument_list|,
name|this
operator|.
name|watcher
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to create ZooKeeper object: "
operator|+
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|parentZNode
operator|=
name|conf
operator|.
name|get
argument_list|(
name|ZOOKEEPER_PARENT_ZNODE
argument_list|,
name|DEFAULT_ZOOKEEPER_PARENT_ZNODE
argument_list|)
expr_stmt|;
name|String
name|rootServerZNodeName
init|=
name|conf
operator|.
name|get
argument_list|(
name|ZOOKEEPER_ROOT_SERVER_ZNODE
argument_list|,
name|DEFAULT_ZOOKEEPER_ROOT_SERVER_ZNODE
argument_list|)
decl_stmt|;
name|String
name|outOfSafeModeZNodeName
init|=
name|conf
operator|.
name|get
argument_list|(
name|ZOOKEEPER_SAFE_MODE_ZNODE
argument_list|,
name|DEFAULT_ZOOKEEPER_SAFE_MODE_ZNODE
argument_list|)
decl_stmt|;
name|String
name|rsZNodeName
init|=
name|conf
operator|.
name|get
argument_list|(
name|ZOOKEEPER_RS_ZNODE
argument_list|,
name|DEFAULT_ZOOKEEPER_RS_ZNODE
argument_list|)
decl_stmt|;
name|rootRegionZNode
operator|=
name|getZNode
argument_list|(
name|rootServerZNodeName
argument_list|)
expr_stmt|;
name|outOfSafeModeZNode
operator|=
name|getZNode
argument_list|(
name|outOfSafeModeZNodeName
argument_list|)
expr_stmt|;
name|rsZNode
operator|=
name|getZNode
argument_list|(
name|rsZNodeName
argument_list|)
expr_stmt|;
block|}
comment|/**    * This is for tests to directly set the ZooKeeper quorum servers.    * @param servers comma separated host:port ZooKeeper quorum servers.    */
specifier|public
specifier|static
name|void
name|setQuorumServers
parameter_list|(
name|String
name|servers
parameter_list|)
block|{
name|quorumServers
operator|=
name|servers
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|loadZooKeeperConfig
parameter_list|()
block|{
name|InputStream
name|inputStream
init|=
name|ZooKeeperWrapper
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|ZOOKEEPER_CONFIG_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|inputStream
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"fail to open ZooKeeper config file "
operator|+
name|ZOOKEEPER_CONFIG_NAME
argument_list|)
expr_stmt|;
return|return;
block|}
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
try|try
block|{
name|properties
operator|.
name|load
argument_list|(
name|inputStream
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"fail to read properties from "
operator|+
name|ZOOKEEPER_CONFIG_NAME
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|clientPort
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|servers
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// The clientPort option may come after the server.X hosts, so we need to
comment|// grab everything and then create the final host:port comma separated list.
for|for
control|(
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|property
range|:
name|properties
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|property
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|property
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"clientPort"
argument_list|)
condition|)
block|{
name|clientPort
operator|=
name|value
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"server."
argument_list|)
condition|)
block|{
name|String
name|host
init|=
name|value
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|value
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
argument_list|)
decl_stmt|;
name|servers
operator|.
name|add
argument_list|(
name|host
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|clientPort
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"no clientPort found in "
operator|+
name|ZOOKEEPER_CONFIG_NAME
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// If no server.X lines exist, then we're using a single instance ZooKeeper
comment|// on the master node.
if|if
condition|(
name|servers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|HBaseConfiguration
name|conf
init|=
operator|new
name|HBaseConfiguration
argument_list|()
decl_stmt|;
name|String
name|masterAddress
init|=
name|conf
operator|.
name|get
argument_list|(
name|MASTER_ADDRESS
argument_list|,
name|DEFAULT_MASTER_ADDRESS
argument_list|)
decl_stmt|;
name|String
name|masterHost
init|=
literal|"localhost"
decl_stmt|;
if|if
condition|(
operator|!
name|masterAddress
operator|.
name|equals
argument_list|(
literal|"local"
argument_list|)
condition|)
block|{
name|masterHost
operator|=
name|masterAddress
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|masterAddress
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|servers
operator|.
name|add
argument_list|(
name|masterHost
argument_list|)
expr_stmt|;
block|}
name|StringBuilder
name|hostPortBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|servers
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|String
name|host
init|=
name|servers
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|hostPortBuilder
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|hostPortBuilder
operator|.
name|append
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|hostPortBuilder
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|hostPortBuilder
operator|.
name|append
argument_list|(
name|clientPort
argument_list|)
expr_stmt|;
block|}
name|quorumServers
operator|=
name|hostPortBuilder
operator|.
name|toString
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Quorum servers: "
operator|+
name|quorumServers
argument_list|)
expr_stmt|;
block|}
comment|/** @return true if currently connected to ZooKeeper, false otherwise. */
specifier|public
name|boolean
name|isConnected
parameter_list|()
block|{
return|return
name|zooKeeper
operator|.
name|getState
argument_list|()
operator|==
name|States
operator|.
name|CONNECTED
return|;
block|}
comment|/**    * Read location of server storing root region.    * @return HServerAddress pointing to server serving root region or null if    *         there was a problem reading the ZNode.    */
specifier|public
name|HServerAddress
name|readRootRegionLocation
parameter_list|()
block|{
name|byte
index|[]
name|data
decl_stmt|;
try|try
block|{
name|data
operator|=
name|zooKeeper
operator|.
name|getData
argument_list|(
name|rootRegionZNode
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|addressString
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Read ZNode "
operator|+
name|rootRegionZNode
operator|+
literal|" got "
operator|+
name|addressString
argument_list|)
expr_stmt|;
name|HServerAddress
name|address
init|=
operator|new
name|HServerAddress
argument_list|(
name|addressString
argument_list|)
decl_stmt|;
return|return
name|address
return|;
block|}
specifier|private
name|boolean
name|ensureExists
parameter_list|(
specifier|final
name|String
name|znode
parameter_list|)
block|{
try|try
block|{
name|zooKeeper
operator|.
name|create
argument_list|(
name|znode
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Created ZNode "
operator|+
name|znode
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NodeExistsException
name|e
parameter_list|)
block|{
return|return
literal|true
return|;
comment|// ok, move on.
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|e
parameter_list|)
block|{
return|return
name|ensureParentExists
argument_list|(
name|znode
argument_list|)
operator|&&
name|ensureExists
argument_list|(
name|znode
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to create "
operator|+
name|znode
operator|+
literal|":"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to create "
operator|+
name|znode
operator|+
literal|":"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|ensureParentExists
parameter_list|(
specifier|final
name|String
name|znode
parameter_list|)
block|{
name|int
name|index
init|=
name|znode
operator|.
name|lastIndexOf
argument_list|(
name|ZNODE_PATH_SEPARATOR
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<=
literal|0
condition|)
block|{
comment|// Parent is root, which always exists.
return|return
literal|true
return|;
block|}
return|return
name|ensureExists
argument_list|(
name|znode
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Delete ZNode containing root region location.    * @return true if operation succeeded, false otherwise.    */
specifier|public
name|boolean
name|deleteRootRegionLocation
parameter_list|()
block|{
if|if
condition|(
operator|!
name|ensureParentExists
argument_list|(
name|rootRegionZNode
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
name|zooKeeper
operator|.
name|delete
argument_list|(
name|rootRegionZNode
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Deleted ZNode "
operator|+
name|rootRegionZNode
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|e
parameter_list|)
block|{
return|return
literal|true
return|;
comment|// ok, move on.
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to delete "
operator|+
name|rootRegionZNode
operator|+
literal|": "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to delete "
operator|+
name|rootRegionZNode
operator|+
literal|": "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|createRootRegionLocation
parameter_list|(
name|String
name|address
parameter_list|)
block|{
name|byte
index|[]
name|data
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|address
argument_list|)
decl_stmt|;
try|try
block|{
name|zooKeeper
operator|.
name|create
argument_list|(
name|rootRegionZNode
argument_list|,
name|data
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Created ZNode "
operator|+
name|rootRegionZNode
operator|+
literal|" with data "
operator|+
name|address
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to create root region in ZooKeeper: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to create root region in ZooKeeper: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|updateRootRegionLocation
parameter_list|(
name|String
name|address
parameter_list|)
block|{
name|byte
index|[]
name|data
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|address
argument_list|)
decl_stmt|;
try|try
block|{
name|zooKeeper
operator|.
name|setData
argument_list|(
name|rootRegionZNode
argument_list|,
name|data
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"SetData of ZNode "
operator|+
name|rootRegionZNode
operator|+
literal|" with "
operator|+
name|address
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to set root region location in ZooKeeper: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to set root region location in ZooKeeper: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Write root region location to ZooKeeper. If address is null, delete ZNode.    * containing root region location.    * @param address HServerAddress to write to ZK.    * @return true if operation succeeded, false otherwise.    */
specifier|public
name|boolean
name|writeRootRegionLocation
parameter_list|(
name|HServerAddress
name|address
parameter_list|)
block|{
if|if
condition|(
name|address
operator|==
literal|null
condition|)
block|{
return|return
name|deleteRootRegionLocation
argument_list|()
return|;
block|}
if|if
condition|(
operator|!
name|ensureParentExists
argument_list|(
name|rootRegionZNode
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|addressString
init|=
name|address
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|checkExistenceOf
argument_list|(
name|rootRegionZNode
argument_list|)
condition|)
block|{
return|return
name|updateRootRegionLocation
argument_list|(
name|addressString
argument_list|)
return|;
block|}
return|return
name|createRootRegionLocation
argument_list|(
name|addressString
argument_list|)
return|;
block|}
comment|/**    * Check if we're out of safe mode. Being out of safe mode is signified by an    * ephemeral ZNode existing in ZooKeeper.    * @return true if we're out of safe mode, false otherwise.    */
specifier|public
name|boolean
name|checkOutOfSafeMode
parameter_list|()
block|{
if|if
condition|(
operator|!
name|ensureParentExists
argument_list|(
name|outOfSafeModeZNode
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|checkExistenceOf
argument_list|(
name|outOfSafeModeZNode
argument_list|)
return|;
block|}
comment|/**    * Create ephemeral ZNode signifying that we're out of safe mode.    * @return true if ephemeral ZNode created successfully, false otherwise.    */
specifier|public
name|boolean
name|writeOutOfSafeMode
parameter_list|()
block|{
if|if
condition|(
operator|!
name|ensureParentExists
argument_list|(
name|outOfSafeModeZNode
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
name|zooKeeper
operator|.
name|create
argument_list|(
name|outOfSafeModeZNode
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|EPHEMERAL
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Wrote out of safe mode"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to create out of safe mode in ZooKeeper: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to create out of safe mode in ZooKeeper: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Write in ZK this RS startCode and address.    * Ensures that the full path exists.    * @param info The RS info    * @return true if the location was written, false if it failed    */
specifier|public
name|boolean
name|writeRSLocation
parameter_list|(
name|HServerInfo
name|info
parameter_list|)
block|{
name|ensureExists
argument_list|(
name|rsZNode
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|info
operator|.
name|getServerAddress
argument_list|()
operator|.
name|getBindAddress
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|znode
init|=
name|rsZNode
operator|+
name|ZNODE_PATH_SEPARATOR
operator|+
name|info
operator|.
name|getStartCode
argument_list|()
decl_stmt|;
try|try
block|{
name|zooKeeper
operator|.
name|create
argument_list|(
name|znode
argument_list|,
name|data
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|EPHEMERAL
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Created ZNode "
operator|+
name|znode
operator|+
literal|" with data "
operator|+
name|info
operator|.
name|getServerAddress
argument_list|()
operator|.
name|getBindAddress
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to create "
operator|+
name|znode
operator|+
literal|" znode in ZooKeeper: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to create "
operator|+
name|znode
operator|+
literal|" znode in ZooKeeper: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Update the RS address and set a watcher on the znode    * @param info The RS info    * @param watcher The watcher to put on the znode    * @return true if the update is done, false if it failed    */
specifier|public
name|boolean
name|updateRSLocationGetWatch
parameter_list|(
name|HServerInfo
name|info
parameter_list|,
name|Watcher
name|watcher
parameter_list|)
block|{
name|byte
index|[]
name|data
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|info
operator|.
name|getServerAddress
argument_list|()
operator|.
name|getBindAddress
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|znode
init|=
name|rsZNode
operator|+
literal|"/"
operator|+
name|info
operator|.
name|getStartCode
argument_list|()
decl_stmt|;
try|try
block|{
name|zooKeeper
operator|.
name|setData
argument_list|(
name|znode
argument_list|,
name|data
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Updated ZNode "
operator|+
name|znode
operator|+
literal|" with data "
operator|+
name|info
operator|.
name|getServerAddress
argument_list|()
operator|.
name|getBindAddress
argument_list|()
argument_list|)
expr_stmt|;
name|zooKeeper
operator|.
name|getData
argument_list|(
name|znode
argument_list|,
name|watcher
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to update "
operator|+
name|znode
operator|+
literal|" znode in ZooKeeper: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to update "
operator|+
name|znode
operator|+
literal|" znode in ZooKeeper: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|checkExistenceOf
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|Stat
name|stat
init|=
literal|null
decl_stmt|;
try|try
block|{
name|stat
operator|=
name|zooKeeper
operator|.
name|exists
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"checking existence of "
operator|+
name|path
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"checking existence of "
operator|+
name|path
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|stat
operator|!=
literal|null
return|;
block|}
comment|/**    * Close this ZooKeeper session.    */
specifier|public
name|void
name|close
parameter_list|()
block|{
try|try
block|{
name|zooKeeper
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Closed connection with ZooKeeper"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to close connection with ZooKeeper"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|getZNode
parameter_list|(
name|String
name|znodeName
parameter_list|)
block|{
return|return
name|znodeName
operator|.
name|startsWith
argument_list|(
name|ZNODE_PATH_SEPARATOR
argument_list|)
condition|?
name|znodeName
else|:
name|parentZNode
operator|+
name|ZNODE_PATH_SEPARATOR
operator|+
name|znodeName
return|;
block|}
block|}
end_class

end_unit

