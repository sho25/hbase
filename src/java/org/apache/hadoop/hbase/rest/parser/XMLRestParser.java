begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
operator|.
name|CompressionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|Compression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|RESTConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|descriptors
operator|.
name|RowUpdateDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|descriptors
operator|.
name|ScannerDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|exception
operator|.
name|HBaseRestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|Hbase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|XMLRestParser
implements|implements
name|IHBaseRestParser
block|{
comment|/*    * (non-Javadoc)    *     * @see    * org.apache.hadoop.hbase.rest.parser.IHBaseRestParser#getTableDescriptor    * (byte[])    */
specifier|public
name|HTableDescriptor
name|getTableDescriptor
parameter_list|(
name|byte
index|[]
name|input
parameter_list|)
throws|throws
name|HBaseRestException
block|{
name|DocumentBuilderFactory
name|docBuilderFactory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|docBuilderFactory
operator|.
name|setIgnoringComments
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|DocumentBuilder
name|builder
init|=
literal|null
decl_stmt|;
name|Document
name|doc
init|=
literal|null
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
literal|null
decl_stmt|;
try|try
block|{
name|builder
operator|=
name|docBuilderFactory
operator|.
name|newDocumentBuilder
argument_list|()
expr_stmt|;
name|ByteArrayInputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|doc
operator|=
name|builder
operator|.
name|parse
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HBaseRestException
argument_list|(
name|e
argument_list|)
throw|;
block|}
try|try
block|{
name|Node
name|name_node
init|=
name|doc
operator|.
name|getElementsByTagName
argument_list|(
literal|"name"
argument_list|)
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|table_name
init|=
name|name_node
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
decl_stmt|;
name|htd
operator|=
operator|new
name|HTableDescriptor
argument_list|(
name|table_name
argument_list|)
expr_stmt|;
name|NodeList
name|columnfamily_nodes
init|=
name|doc
operator|.
name|getElementsByTagName
argument_list|(
literal|"columnfamily"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columnfamily_nodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Element
name|columnfamily
init|=
operator|(
name|Element
operator|)
name|columnfamily_nodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|this
operator|.
name|getColumnDescriptor
argument_list|(
name|columnfamily
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HBaseRestException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|htd
return|;
block|}
specifier|public
name|HColumnDescriptor
name|getColumnDescriptor
parameter_list|(
name|Element
name|columnfamily
parameter_list|)
block|{
return|return
name|this
operator|.
name|getColumnDescriptor
argument_list|(
name|columnfamily
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
name|HColumnDescriptor
name|getColumnDescriptor
parameter_list|(
name|Element
name|columnfamily
parameter_list|,
name|HTableDescriptor
name|currentTDesp
parameter_list|)
block|{
name|Node
name|name_node
init|=
name|columnfamily
operator|.
name|getElementsByTagName
argument_list|(
literal|"name"
argument_list|)
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|colname
init|=
name|makeColumnName
argument_list|(
name|name_node
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|max_versions
init|=
name|HColumnDescriptor
operator|.
name|DEFAULT_VERSIONS
decl_stmt|;
name|String
name|compression
init|=
name|HColumnDescriptor
operator|.
name|DEFAULT_COMPRESSION
decl_stmt|;
name|boolean
name|in_memory
init|=
name|HColumnDescriptor
operator|.
name|DEFAULT_IN_MEMORY
decl_stmt|;
name|boolean
name|block_cache
init|=
name|HColumnDescriptor
operator|.
name|DEFAULT_BLOCKCACHE
decl_stmt|;
name|int
name|max_cell_size
init|=
name|HColumnDescriptor
operator|.
name|DEFAULT_LENGTH
decl_stmt|;
name|int
name|ttl
init|=
name|HColumnDescriptor
operator|.
name|DEFAULT_TTL
decl_stmt|;
name|boolean
name|bloomfilter
init|=
name|HColumnDescriptor
operator|.
name|DEFAULT_BLOOMFILTER
decl_stmt|;
if|if
condition|(
name|currentTDesp
operator|!=
literal|null
condition|)
block|{
name|HColumnDescriptor
name|currentCDesp
init|=
name|currentTDesp
operator|.
name|getFamily
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|colname
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentCDesp
operator|!=
literal|null
condition|)
block|{
name|max_versions
operator|=
name|currentCDesp
operator|.
name|getMaxVersions
argument_list|()
expr_stmt|;
comment|// compression = currentCDesp.getCompression();
name|in_memory
operator|=
name|currentCDesp
operator|.
name|isInMemory
argument_list|()
expr_stmt|;
name|block_cache
operator|=
name|currentCDesp
operator|.
name|isBlockCacheEnabled
argument_list|()
expr_stmt|;
name|max_cell_size
operator|=
name|currentCDesp
operator|.
name|getMaxValueLength
argument_list|()
expr_stmt|;
name|ttl
operator|=
name|currentCDesp
operator|.
name|getTimeToLive
argument_list|()
expr_stmt|;
name|bloomfilter
operator|=
name|currentCDesp
operator|.
name|isBloomfilter
argument_list|()
expr_stmt|;
block|}
block|}
name|NodeList
name|max_versions_list
init|=
name|columnfamily
operator|.
name|getElementsByTagName
argument_list|(
literal|"max-versions"
argument_list|)
decl_stmt|;
if|if
condition|(
name|max_versions_list
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|max_versions
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|max_versions_list
operator|.
name|item
argument_list|(
literal|0
argument_list|)
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|NodeList
name|compression_list
init|=
name|columnfamily
operator|.
name|getElementsByTagName
argument_list|(
literal|"compression"
argument_list|)
decl_stmt|;
if|if
condition|(
name|compression_list
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|compression
operator|=
name|compression_list
operator|.
name|item
argument_list|(
literal|0
argument_list|)
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
operator|.
name|toUpperCase
argument_list|()
expr_stmt|;
block|}
name|NodeList
name|in_memory_list
init|=
name|columnfamily
operator|.
name|getElementsByTagName
argument_list|(
literal|"in-memory"
argument_list|)
decl_stmt|;
if|if
condition|(
name|in_memory_list
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|in_memory
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|in_memory_list
operator|.
name|item
argument_list|(
literal|0
argument_list|)
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|NodeList
name|block_cache_list
init|=
name|columnfamily
operator|.
name|getElementsByTagName
argument_list|(
literal|"block-cache"
argument_list|)
decl_stmt|;
if|if
condition|(
name|block_cache_list
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|block_cache
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|block_cache_list
operator|.
name|item
argument_list|(
literal|0
argument_list|)
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|NodeList
name|max_cell_size_list
init|=
name|columnfamily
operator|.
name|getElementsByTagName
argument_list|(
literal|"max-cell-size"
argument_list|)
decl_stmt|;
if|if
condition|(
name|max_cell_size_list
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|max_cell_size
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|max_cell_size_list
operator|.
name|item
argument_list|(
literal|0
argument_list|)
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|NodeList
name|ttl_list
init|=
name|columnfamily
operator|.
name|getElementsByTagName
argument_list|(
literal|"time-to-live"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ttl_list
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ttl
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|ttl_list
operator|.
name|item
argument_list|(
literal|0
argument_list|)
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|NodeList
name|bloomfilter_list
init|=
name|columnfamily
operator|.
name|getElementsByTagName
argument_list|(
literal|"bloomfilter"
argument_list|)
decl_stmt|;
if|if
condition|(
name|bloomfilter_list
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|bloomfilter
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|bloomfilter_list
operator|.
name|item
argument_list|(
literal|0
argument_list|)
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|colname
argument_list|)
argument_list|,
name|max_versions
argument_list|,
name|compression
argument_list|,
name|in_memory
argument_list|,
name|block_cache
argument_list|,
name|max_cell_size
argument_list|,
name|ttl
argument_list|,
name|bloomfilter
argument_list|)
decl_stmt|;
name|NodeList
name|metadataList
init|=
name|columnfamily
operator|.
name|getElementsByTagName
argument_list|(
literal|"metadata"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|metadataList
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Element
name|metadataColumn
init|=
operator|(
name|Element
operator|)
name|metadataList
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// extract the name and value children
name|Node
name|mname_node
init|=
name|metadataColumn
operator|.
name|getElementsByTagName
argument_list|(
literal|"name"
argument_list|)
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|mname
init|=
name|mname_node
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
decl_stmt|;
name|Node
name|mvalue_node
init|=
name|metadataColumn
operator|.
name|getElementsByTagName
argument_list|(
literal|"value"
argument_list|)
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|mvalue
init|=
name|mvalue_node
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
decl_stmt|;
name|hcd
operator|.
name|setValue
argument_list|(
name|mname
argument_list|,
name|mvalue
argument_list|)
expr_stmt|;
block|}
return|return
name|hcd
return|;
block|}
specifier|protected
name|String
name|makeColumnName
parameter_list|(
name|String
name|column
parameter_list|)
block|{
name|String
name|returnColumn
init|=
name|column
decl_stmt|;
if|if
condition|(
name|column
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
operator|==
operator|-
literal|1
condition|)
name|returnColumn
operator|+=
literal|':'
expr_stmt|;
return|return
name|returnColumn
return|;
block|}
comment|/*    * (non-Javadoc)    *     * @see    * org.apache.hadoop.hbase.rest.parser.IHBaseRestParser#getColumnDescriptors    * (byte[])    */
specifier|public
name|ArrayList
argument_list|<
name|HColumnDescriptor
argument_list|>
name|getColumnDescriptors
parameter_list|(
name|byte
index|[]
name|input
parameter_list|)
throws|throws
name|HBaseRestException
block|{
name|DocumentBuilderFactory
name|docBuilderFactory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|docBuilderFactory
operator|.
name|setIgnoringComments
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|DocumentBuilder
name|builder
init|=
literal|null
decl_stmt|;
name|Document
name|doc
init|=
literal|null
decl_stmt|;
name|ArrayList
argument_list|<
name|HColumnDescriptor
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<
name|HColumnDescriptor
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|=
name|docBuilderFactory
operator|.
name|newDocumentBuilder
argument_list|()
expr_stmt|;
name|ByteArrayInputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|doc
operator|=
name|builder
operator|.
name|parse
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HBaseRestException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|NodeList
name|columnfamily_nodes
init|=
name|doc
operator|.
name|getElementsByTagName
argument_list|(
literal|"columnfamily"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columnfamily_nodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Element
name|columnfamily
init|=
operator|(
name|Element
operator|)
name|columnfamily_nodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|columns
operator|.
name|add
argument_list|(
name|this
operator|.
name|getColumnDescriptor
argument_list|(
name|columnfamily
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|columns
return|;
block|}
comment|/*    * (non-Javadoc)    *     * @see    * org.apache.hadoop.hbase.rest.parser.IHBaseRestParser#getScannerDescriptor    * (byte[])    */
specifier|public
name|ScannerDescriptor
name|getScannerDescriptor
parameter_list|(
name|byte
index|[]
name|input
parameter_list|)
throws|throws
name|HBaseRestException
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
comment|/*    * (non-Javadoc)    *     * @see    * org.apache.hadoop.hbase.rest.parser.IHBaseRestParser#getRowUpdateDescriptor    * (byte[], byte[][])    */
specifier|public
name|RowUpdateDescriptor
name|getRowUpdateDescriptor
parameter_list|(
name|byte
index|[]
name|input
parameter_list|,
name|byte
index|[]
index|[]
name|pathSegments
parameter_list|)
throws|throws
name|HBaseRestException
block|{
name|RowUpdateDescriptor
name|rud
init|=
operator|new
name|RowUpdateDescriptor
argument_list|()
decl_stmt|;
name|rud
operator|.
name|setTableName
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|pathSegments
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|rud
operator|.
name|setRowName
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|pathSegments
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|DocumentBuilderFactory
name|docBuilderFactory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|docBuilderFactory
operator|.
name|setIgnoringComments
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|DocumentBuilder
name|builder
init|=
literal|null
decl_stmt|;
name|Document
name|doc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|builder
operator|=
name|docBuilderFactory
operator|.
name|newDocumentBuilder
argument_list|()
expr_stmt|;
name|ByteArrayInputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|doc
operator|=
name|builder
operator|.
name|parse
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HBaseRestException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|NodeList
name|cell_nodes
init|=
name|doc
operator|.
name|getElementsByTagName
argument_list|(
name|RESTConstants
operator|.
name|COLUMN
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"cell_nodes.length: "
operator|+
name|cell_nodes
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cell_nodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|columnName
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|value
init|=
literal|null
decl_stmt|;
name|Element
name|cell
init|=
operator|(
name|Element
operator|)
name|cell_nodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|NodeList
name|item
init|=
name|cell
operator|.
name|getElementsByTagName
argument_list|(
name|RESTConstants
operator|.
name|NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|columnName
operator|=
name|item
operator|.
name|item
argument_list|(
literal|0
argument_list|)
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
expr_stmt|;
block|}
name|NodeList
name|item1
init|=
name|cell
operator|.
name|getElementsByTagName
argument_list|(
name|RESTConstants
operator|.
name|VALUE
argument_list|)
decl_stmt|;
if|if
condition|(
name|item1
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|value
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Base64
operator|.
name|decode
argument_list|(
name|item1
operator|.
name|item
argument_list|(
literal|0
argument_list|)
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|columnName
operator|!=
literal|null
operator|&&
name|value
operator|!=
literal|null
condition|)
block|{
name|rud
operator|.
name|getColVals
argument_list|()
operator|.
name|put
argument_list|(
name|columnName
operator|.
name|getBytes
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rud
return|;
block|}
block|}
end_class

end_unit

