begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|RESTConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|descriptors
operator|.
name|RowUpdateDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|descriptors
operator|.
name|ScannerDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|exception
operator|.
name|HBaseRestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|JsonRestParser
implements|implements
name|IHBaseRestParser
block|{
comment|/*    * (non-Javadoc)    *     * @see    * org.apache.hadoop.hbase.rest.parser.IHBaseRestParser#getTableDescriptor    * (byte[])    */
specifier|public
name|HTableDescriptor
name|getTableDescriptor
parameter_list|(
name|byte
index|[]
name|input
parameter_list|)
throws|throws
name|HBaseRestException
block|{
try|try
block|{
name|JSONObject
name|o
decl_stmt|;
name|HTableDescriptor
name|h
decl_stmt|;
name|JSONArray
name|columnDescriptorArray
decl_stmt|;
name|o
operator|=
operator|new
name|JSONObject
argument_list|(
operator|new
name|String
argument_list|(
name|input
argument_list|)
argument_list|)
expr_stmt|;
name|columnDescriptorArray
operator|=
name|o
operator|.
name|getJSONArray
argument_list|(
literal|"column_families"
argument_list|)
expr_stmt|;
name|h
operator|=
operator|new
name|HTableDescriptor
argument_list|(
name|o
operator|.
name|getString
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columnDescriptorArray
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|JSONObject
name|json_columnDescriptor
init|=
name|columnDescriptorArray
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|h
operator|.
name|addFamily
argument_list|(
name|this
operator|.
name|getColumnDescriptor
argument_list|(
name|json_columnDescriptor
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|h
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HBaseRestException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|HColumnDescriptor
name|getColumnDescriptor
parameter_list|(
name|JSONObject
name|jsonObject
parameter_list|)
throws|throws
name|JSONException
block|{
name|String
name|strTemp
decl_stmt|;
name|strTemp
operator|=
name|jsonObject
operator|.
name|getString
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
if|if
condition|(
name|strTemp
operator|.
name|charAt
argument_list|(
name|strTemp
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|!=
literal|':'
condition|)
block|{
name|strTemp
operator|+=
literal|":"
expr_stmt|;
block|}
name|byte
index|[]
name|name
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|strTemp
argument_list|)
decl_stmt|;
name|int
name|maxVersions
decl_stmt|;
name|String
name|cType
decl_stmt|;
name|boolean
name|inMemory
decl_stmt|;
name|boolean
name|blockCacheEnabled
decl_stmt|;
name|int
name|maxValueLength
decl_stmt|;
name|int
name|timeToLive
decl_stmt|;
name|boolean
name|bloomfilter
decl_stmt|;
try|try
block|{
name|bloomfilter
operator|=
name|jsonObject
operator|.
name|getBoolean
argument_list|(
literal|"bloomfilter"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JSONException
name|e
parameter_list|)
block|{
name|bloomfilter
operator|=
literal|false
expr_stmt|;
block|}
try|try
block|{
name|maxVersions
operator|=
name|jsonObject
operator|.
name|getInt
argument_list|(
literal|"max_versions"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JSONException
name|e
parameter_list|)
block|{
name|maxVersions
operator|=
literal|3
expr_stmt|;
block|}
try|try
block|{
name|cType
operator|=
name|jsonObject
operator|.
name|getString
argument_list|(
literal|"compression_type"
argument_list|)
operator|.
name|toUpperCase
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JSONException
name|e
parameter_list|)
block|{
name|cType
operator|=
name|HColumnDescriptor
operator|.
name|DEFAULT_COMPRESSION
expr_stmt|;
block|}
try|try
block|{
name|inMemory
operator|=
name|jsonObject
operator|.
name|getBoolean
argument_list|(
literal|"in_memory"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JSONException
name|e
parameter_list|)
block|{
name|inMemory
operator|=
literal|false
expr_stmt|;
block|}
try|try
block|{
name|blockCacheEnabled
operator|=
name|jsonObject
operator|.
name|getBoolean
argument_list|(
literal|"block_cache_enabled"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JSONException
name|e
parameter_list|)
block|{
name|blockCacheEnabled
operator|=
literal|false
expr_stmt|;
block|}
try|try
block|{
name|maxValueLength
operator|=
name|jsonObject
operator|.
name|getInt
argument_list|(
literal|"max_value_length"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JSONException
name|e
parameter_list|)
block|{
name|maxValueLength
operator|=
literal|2147483647
expr_stmt|;
block|}
try|try
block|{
name|timeToLive
operator|=
name|jsonObject
operator|.
name|getInt
argument_list|(
literal|"time_to_live"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JSONException
name|e
parameter_list|)
block|{
name|timeToLive
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
return|return
operator|new
name|HColumnDescriptor
argument_list|(
name|name
argument_list|,
name|maxVersions
argument_list|,
name|cType
argument_list|,
name|inMemory
argument_list|,
name|blockCacheEnabled
argument_list|,
name|maxValueLength
argument_list|,
name|timeToLive
argument_list|,
name|bloomfilter
argument_list|)
return|;
block|}
comment|/*    * (non-Javadoc)    *     * @see    * org.apache.hadoop.hbase.rest.parser.IHBaseRestParser#getColumnDescriptors    * (byte[])    */
specifier|public
name|ArrayList
argument_list|<
name|HColumnDescriptor
argument_list|>
name|getColumnDescriptors
parameter_list|(
name|byte
index|[]
name|input
parameter_list|)
throws|throws
name|HBaseRestException
block|{
name|ArrayList
argument_list|<
name|HColumnDescriptor
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<
name|HColumnDescriptor
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|JSONObject
name|o
decl_stmt|;
name|JSONArray
name|columnDescriptorArray
decl_stmt|;
name|o
operator|=
operator|new
name|JSONObject
argument_list|(
operator|new
name|String
argument_list|(
name|input
argument_list|)
argument_list|)
expr_stmt|;
name|columnDescriptorArray
operator|=
name|o
operator|.
name|getJSONArray
argument_list|(
literal|"column_families"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columnDescriptorArray
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|JSONObject
name|json_columnDescriptor
init|=
name|columnDescriptorArray
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|columns
operator|.
name|add
argument_list|(
name|this
operator|.
name|getColumnDescriptor
argument_list|(
name|json_columnDescriptor
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|JSONException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HBaseRestException
argument_list|(
literal|"Error Parsing json input"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|columns
return|;
block|}
comment|/*    * (non-Javadoc)    *     * @see    * org.apache.hadoop.hbase.rest.parser.IHBaseRestParser#getScannerDescriptor    * (byte[])    */
specifier|public
name|ScannerDescriptor
name|getScannerDescriptor
parameter_list|(
name|byte
index|[]
name|input
parameter_list|)
throws|throws
name|HBaseRestException
block|{
name|JSONObject
name|scannerDescriptor
decl_stmt|;
name|JSONArray
name|columnArray
decl_stmt|;
name|byte
index|[]
index|[]
name|columns
init|=
literal|null
decl_stmt|;
name|long
name|timestamp
decl_stmt|;
name|byte
index|[]
name|startRow
decl_stmt|;
name|byte
index|[]
name|stopRow
decl_stmt|;
name|String
name|filters
decl_stmt|;
try|try
block|{
name|scannerDescriptor
operator|=
operator|new
name|JSONObject
argument_list|(
operator|new
name|String
argument_list|(
name|input
argument_list|)
argument_list|)
expr_stmt|;
name|columnArray
operator|=
name|scannerDescriptor
operator|.
name|optJSONArray
argument_list|(
name|RESTConstants
operator|.
name|COLUMNS
argument_list|)
expr_stmt|;
name|timestamp
operator|=
name|scannerDescriptor
operator|.
name|optLong
argument_list|(
name|RESTConstants
operator|.
name|SCANNER_TIMESTAMP
argument_list|)
expr_stmt|;
name|startRow
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|scannerDescriptor
operator|.
name|optString
argument_list|(
name|RESTConstants
operator|.
name|SCANNER_START_ROW
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|stopRow
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|scannerDescriptor
operator|.
name|optString
argument_list|(
name|RESTConstants
operator|.
name|SCANNER_STOP_ROW
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|filters
operator|=
name|scannerDescriptor
operator|.
name|optString
argument_list|(
name|RESTConstants
operator|.
name|SCANNER_FILTER
argument_list|)
expr_stmt|;
if|if
condition|(
name|columnArray
operator|!=
literal|null
condition|)
block|{
name|columns
operator|=
operator|new
name|byte
index|[
name|columnArray
operator|.
name|length
argument_list|()
index|]
index|[]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columnArray
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|columns
index|[
name|i
index|]
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|columnArray
operator|.
name|optString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|ScannerDescriptor
argument_list|(
name|columns
argument_list|,
name|timestamp
argument_list|,
name|startRow
argument_list|,
name|stopRow
argument_list|,
name|filters
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|JSONException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HBaseRestException
argument_list|(
literal|"error parsing json string"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/*    * (non-Javadoc)    *     * @see    * org.apache.hadoop.hbase.rest.parser.IHBaseRestParser#getRowUpdateDescriptor    * (byte[], byte[][])    */
specifier|public
name|RowUpdateDescriptor
name|getRowUpdateDescriptor
parameter_list|(
name|byte
index|[]
name|input
parameter_list|,
name|byte
index|[]
index|[]
name|pathSegments
parameter_list|)
throws|throws
name|HBaseRestException
block|{
name|RowUpdateDescriptor
name|rud
init|=
operator|new
name|RowUpdateDescriptor
argument_list|()
decl_stmt|;
name|JSONArray
name|a
decl_stmt|;
name|rud
operator|.
name|setTableName
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|pathSegments
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|rud
operator|.
name|setRowName
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|pathSegments
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|JSONObject
name|updateObject
init|=
operator|new
name|JSONObject
argument_list|(
operator|new
name|String
argument_list|(
name|input
argument_list|)
argument_list|)
decl_stmt|;
name|a
operator|=
name|updateObject
operator|.
name|getJSONArray
argument_list|(
name|RESTConstants
operator|.
name|COLUMNS
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|a
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|rud
operator|.
name|getColVals
argument_list|()
operator|.
name|put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|a
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
operator|.
name|getString
argument_list|(
name|RESTConstants
operator|.
name|NAME
argument_list|)
argument_list|)
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Base64
operator|.
name|decode
argument_list|(
name|a
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
operator|.
name|getString
argument_list|(
name|RESTConstants
operator|.
name|VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|JSONException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HBaseRestException
argument_list|(
literal|"Error parsing row update json"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|rud
return|;
block|}
block|}
end_class

end_unit

