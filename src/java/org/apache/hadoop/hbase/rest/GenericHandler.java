begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|znerd
operator|.
name|xmlenc
operator|.
name|LineBreak
import|;
end_import

begin_import
import|import
name|org
operator|.
name|znerd
operator|.
name|xmlenc
operator|.
name|XMLOutputter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * GenericHandler contains some basic common stuff that all the individual  * REST handler types take advantage of.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|GenericHandler
block|{
specifier|protected
name|HBaseConfiguration
name|conf
decl_stmt|;
specifier|protected
name|HBaseAdmin
name|admin
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|ACCEPT
init|=
literal|"accept"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|COLUMN
init|=
literal|"column"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|TIMESTAMP
init|=
literal|"timestamp"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|START_ROW
init|=
literal|"start_row"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|END_ROW
init|=
literal|"end_row"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|CONTENT_TYPE
init|=
literal|"content-type"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|ROW
init|=
literal|"row"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|REGIONS
init|=
literal|"regions"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|VERSION
init|=
literal|"version"
decl_stmt|;
specifier|protected
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
name|GenericHandler
parameter_list|(
name|HBaseConfiguration
name|conf
parameter_list|,
name|HBaseAdmin
name|admin
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|admin
operator|=
name|admin
expr_stmt|;
block|}
comment|/*    * Supported content types as enums    */
specifier|protected
enum|enum
name|ContentType
block|{
name|XML
argument_list|(
literal|"text/xml"
argument_list|)
block|,
name|PLAIN
argument_list|(
literal|"text/plain"
argument_list|)
block|,
name|MIME
argument_list|(
literal|"multipart/related"
argument_list|)
block|,
name|NOT_ACCEPTABLE
argument_list|(
literal|""
argument_list|)
block|;
specifier|private
specifier|final
name|String
name|type
decl_stmt|;
specifier|private
name|ContentType
parameter_list|(
specifier|final
name|String
name|t
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|t
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|this
operator|.
name|type
return|;
block|}
comment|/**      * Utility method used looking at Accept header content.      * @param t The content type to examine.      * @return The enum that matches the prefix of<code>t</code> or      * the default enum if<code>t</code> is empty.  If unsupported type, we      * return NOT_ACCEPTABLE.      */
specifier|public
specifier|static
name|ContentType
name|getContentType
parameter_list|(
specifier|final
name|String
name|t
parameter_list|)
block|{
comment|// Default to text/plain. Curl sends */*.
if|if
condition|(
name|t
operator|==
literal|null
operator|||
name|t
operator|.
name|equals
argument_list|(
literal|"*/*"
argument_list|)
condition|)
block|{
return|return
name|ContentType
operator|.
name|XML
return|;
block|}
name|String
name|lowerCased
init|=
name|t
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|ContentType
index|[]
name|values
init|=
name|ContentType
operator|.
name|values
argument_list|()
decl_stmt|;
name|ContentType
name|result
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|lowerCased
operator|.
name|startsWith
argument_list|(
name|values
index|[
name|i
index|]
operator|.
name|type
argument_list|)
condition|)
block|{
name|result
operator|=
name|values
index|[
name|i
index|]
expr_stmt|;
break|break;
block|}
block|}
return|return
name|result
operator|==
literal|null
condition|?
name|NOT_ACCEPTABLE
else|:
name|result
return|;
block|}
block|}
comment|/*    * @param o    * @return XMLOutputter wrapped around<code>o</code>.    * @throws IllegalStateException    * @throws IOException    */
specifier|protected
name|XMLOutputter
name|getXMLOutputter
parameter_list|(
specifier|final
name|PrintWriter
name|o
parameter_list|)
throws|throws
name|IllegalStateException
throws|,
name|IOException
block|{
name|XMLOutputter
name|outputter
init|=
operator|new
name|XMLOutputter
argument_list|(
name|o
argument_list|,
name|HConstants
operator|.
name|UTF8_ENCODING
argument_list|)
decl_stmt|;
name|outputter
operator|.
name|setLineBreak
argument_list|(
name|LineBreak
operator|.
name|UNIX
argument_list|)
expr_stmt|;
name|outputter
operator|.
name|setIndentation
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|outputter
operator|.
name|declaration
argument_list|()
expr_stmt|;
return|return
name|outputter
return|;
block|}
comment|/*    * Write an XML element.    * @param outputter    * @param name    * @param value    * @throws IllegalStateException    * @throws IOException    */
specifier|protected
name|void
name|doElement
parameter_list|(
specifier|final
name|XMLOutputter
name|outputter
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|value
parameter_list|)
throws|throws
name|IllegalStateException
throws|,
name|IOException
block|{
name|outputter
operator|.
name|startTag
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|outputter
operator|.
name|pcdata
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|outputter
operator|.
name|endTag
argument_list|()
expr_stmt|;
block|}
comment|/*    * Set content-type, encoding, and status on passed<code>response</code>    * @param response    * @param status    * @param contentType    */
specifier|public
specifier|static
name|void
name|setResponseHeader
parameter_list|(
specifier|final
name|HttpServletResponse
name|response
parameter_list|,
specifier|final
name|int
name|status
parameter_list|,
specifier|final
name|String
name|contentType
parameter_list|)
block|{
comment|// Container adds the charset to the HTTP content-type header.
name|response
operator|.
name|setContentType
argument_list|(
name|contentType
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCharacterEncoding
argument_list|(
name|HConstants
operator|.
name|UTF8_ENCODING
argument_list|)
expr_stmt|;
name|response
operator|.
name|setStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
comment|/*    * If we can't do the specified Accepts header type.    * @param response    * @throws IOException    */
specifier|public
specifier|static
name|void
name|doNotAcceptable
parameter_list|(
specifier|final
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
block|{
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_ACCEPTABLE
argument_list|)
expr_stmt|;
block|}
comment|/*    * If we can't do the specified Accepts header type.    * @param response    * @param message    * @throws IOException    */
specifier|public
specifier|static
name|void
name|doNotAcceptable
parameter_list|(
specifier|final
name|HttpServletResponse
name|response
parameter_list|,
specifier|final
name|String
name|message
parameter_list|)
throws|throws
name|IOException
block|{
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_ACCEPTABLE
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
comment|/*    * Resource not found.    * @param response    * @throws IOException    */
specifier|public
specifier|static
name|void
name|doNotFound
parameter_list|(
specifier|final
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
block|{
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
argument_list|)
expr_stmt|;
block|}
comment|/*    * Resource not found.    * @param response    * @param msg    * @throws IOException    */
specifier|public
specifier|static
name|void
name|doNotFound
parameter_list|(
specifier|final
name|HttpServletResponse
name|response
parameter_list|,
specifier|final
name|String
name|msg
parameter_list|)
throws|throws
name|IOException
block|{
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
comment|/*    * Unimplemented method.    * @param response    * @param message to send    * @throws IOException    */
specifier|public
specifier|static
name|void
name|doMethodNotAllowed
parameter_list|(
specifier|final
name|HttpServletResponse
name|response
parameter_list|,
specifier|final
name|String
name|message
parameter_list|)
throws|throws
name|IOException
block|{
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_METHOD_NOT_ALLOWED
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|String
name|getTableName
parameter_list|(
specifier|final
name|String
index|[]
name|pathSegments
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
comment|// Get table name?  First part of passed segment.  It can't be empty string
comment|// or null because we should have tested for that before coming in here.
return|return
name|URLDecoder
operator|.
name|decode
argument_list|(
name|pathSegments
index|[
literal|0
index|]
argument_list|,
name|HConstants
operator|.
name|UTF8_ENCODING
argument_list|)
return|;
block|}
comment|/*    * Output row columns     * @param outputter    * @param m    * @throws IllegalStateException    * @throws IllegalArgumentException    * @throws IOException    */
specifier|protected
name|void
name|outputColumnsXml
parameter_list|(
specifier|final
name|XMLOutputter
name|outputter
parameter_list|,
specifier|final
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Cell
argument_list|>
name|m
parameter_list|)
throws|throws
name|IllegalStateException
throws|,
name|IllegalArgumentException
throws|,
name|IOException
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|Cell
argument_list|>
name|e
range|:
name|m
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|outputter
operator|.
name|startTag
argument_list|(
name|COLUMN
argument_list|)
expr_stmt|;
name|doElement
argument_list|(
name|outputter
argument_list|,
literal|"name"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Base64
operator|.
name|encodeBytes
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|outputCellXml
argument_list|(
name|outputter
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|outputter
operator|.
name|endTag
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|outputColumnsWithMultiVersionsXml
parameter_list|(
specifier|final
name|XMLOutputter
name|outputter
parameter_list|,
specifier|final
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Cell
index|[]
argument_list|>
name|m
parameter_list|)
throws|throws
name|IllegalStateException
throws|,
name|IllegalArgumentException
throws|,
name|IOException
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|Cell
index|[]
argument_list|>
name|e
range|:
name|m
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|Cell
name|c
range|:
name|e
operator|.
name|getValue
argument_list|()
control|)
block|{
name|outputter
operator|.
name|startTag
argument_list|(
name|COLUMN
argument_list|)
expr_stmt|;
name|doElement
argument_list|(
name|outputter
argument_list|,
literal|"name"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Base64
operator|.
name|encodeBytes
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|outputCellXml
argument_list|(
name|outputter
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|outputter
operator|.
name|endTag
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|outputCellXml
parameter_list|(
specifier|final
name|XMLOutputter
name|outputter
parameter_list|,
name|Cell
name|c
parameter_list|)
throws|throws
name|IllegalStateException
throws|,
name|IllegalArgumentException
throws|,
name|IOException
block|{
comment|// We don't know String from binary data so we always base64 encode.
name|doElement
argument_list|(
name|outputter
argument_list|,
literal|"value"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Base64
operator|.
name|encodeBytes
argument_list|(
name|c
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|doElement
argument_list|(
name|outputter
argument_list|,
literal|"timestamp"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|c
operator|.
name|getTimestamp
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//  Commented - multipart support is currently nonexistant.
comment|//  protected void outputColumnsMime(final MultiPartResponse mpr,
comment|//     final Map<Text, Cell> m)
comment|//   throws IOException {
comment|//     for (Map.Entry<Text, Cell> e: m.entrySet()) {
comment|//       mpr.startPart("application/octet-stream",
comment|//         new String [] {"Content-Description: " + e.getKey().toString(),
comment|//           "Content-Transfer-Encoding: binary",
comment|//           "Content-Length: " + e.getValue().getValue().length});
comment|//       mpr.getOut().write(e.getValue().getValue());
comment|//     }
comment|//   }
comment|/*    * Get an HTable instance by it's table name.    */
specifier|protected
name|HTable
name|getTable
parameter_list|(
specifier|final
name|String
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|HTable
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|tableName
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|String
name|makeColumnName
parameter_list|(
name|String
name|column
parameter_list|)
block|{
if|if
condition|(
name|column
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
operator|==
operator|-
literal|1
condition|)
name|column
operator|+=
literal|':'
expr_stmt|;
return|return
name|column
return|;
block|}
block|}
end_class

end_unit

