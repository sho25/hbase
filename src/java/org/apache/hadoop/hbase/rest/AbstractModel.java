begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2008 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|exception
operator|.
name|HBaseRestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractModel
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AbstractModel
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|HBaseConfiguration
name|conf
decl_stmt|;
specifier|protected
name|HBaseAdmin
name|admin
decl_stmt|;
specifier|protected
specifier|static
class|class
name|Encodings
block|{
specifier|protected
interface|interface
name|Encoding
block|{
name|String
name|encode
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
throws|throws
name|HBaseRestException
function_decl|;
block|}
specifier|public
specifier|static
name|Encoding
name|EBase64
init|=
operator|new
name|Encoding
argument_list|()
block|{
specifier|public
name|String
name|encode
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
throws|throws
name|HBaseRestException
block|{
return|return
name|Base64
operator|.
name|encodeBytes
argument_list|(
name|b
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
name|Encoding
name|EUTF8
init|=
operator|new
name|Encoding
argument_list|()
block|{
specifier|public
name|String
name|encode
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
throws|throws
name|HBaseRestException
block|{
return|return
operator|new
name|String
argument_list|(
name|b
argument_list|)
return|;
block|}
block|}
decl_stmt|;
block|}
specifier|protected
specifier|static
specifier|final
name|Encodings
operator|.
name|Encoding
name|encoding
init|=
name|Encodings
operator|.
name|EUTF8
decl_stmt|;
specifier|public
name|void
name|initialize
parameter_list|(
name|HBaseConfiguration
name|conf
parameter_list|,
name|HBaseAdmin
name|admin
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|admin
operator|=
name|admin
expr_stmt|;
block|}
specifier|protected
name|byte
index|[]
index|[]
name|getColumns
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|HBaseRestException
block|{
try|try
block|{
name|HTable
name|h
init|=
operator|new
name|HTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|HColumnDescriptor
argument_list|>
name|columns
init|=
name|h
operator|.
name|getTableDescriptor
argument_list|()
operator|.
name|getFamilies
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|resultant
init|=
operator|new
name|byte
index|[
name|columns
operator|.
name|size
argument_list|()
index|]
index|[]
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|HColumnDescriptor
name|c
range|:
name|columns
control|)
block|{
name|resultant
index|[
name|count
operator|++
index|]
operator|=
name|c
operator|.
name|getNameWithColon
argument_list|()
expr_stmt|;
block|}
return|return
name|resultant
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HBaseRestException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
specifier|static
specifier|final
name|byte
name|COLON
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|":"
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
specifier|protected
name|boolean
name|isColumnFamily
parameter_list|(
name|byte
index|[]
name|columnName
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columnName
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|columnName
index|[
name|i
index|]
operator|==
name|COLON
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

