begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|RowFilterInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|RowFilterSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|StopRowFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|WhileMatchRowFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|descriptors
operator|.
name|ScannerDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|descriptors
operator|.
name|ScannerIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|exception
operator|.
name|HBaseRestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|filter
operator|.
name|FilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|parser
operator|.
name|IHBaseRestParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|ScannerController
extends|extends
name|AbstractController
block|{
comment|/*    * (non-Javadoc)    *     * @see    * org.apache.hadoop.hbase.rest.AbstractController#delete(org.apache.hadoop    * .hbase.rest.Status, byte[][], java.util.Map)    */
annotation|@
name|Override
specifier|public
name|void
name|delete
parameter_list|(
name|Status
name|s
parameter_list|,
name|byte
index|[]
index|[]
name|pathSegments
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|queryMap
parameter_list|)
throws|throws
name|HBaseRestException
block|{
name|ScannerModel
name|innerModel
init|=
name|this
operator|.
name|getModel
argument_list|()
decl_stmt|;
if|if
condition|(
name|pathSegments
operator|.
name|length
operator|==
literal|3
operator|&&
name|Bytes
operator|.
name|toString
argument_list|(
name|pathSegments
index|[
literal|1
index|]
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
name|RESTConstants
operator|.
name|SCANNER
argument_list|)
condition|)
block|{
comment|// get the scannerId
name|Integer
name|scannerId
init|=
literal|null
decl_stmt|;
name|String
name|scannerIdString
init|=
operator|new
name|String
argument_list|(
name|pathSegments
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Pattern
operator|.
name|matches
argument_list|(
literal|"^\\d+$"
argument_list|,
name|scannerIdString
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HBaseRestException
argument_list|(
literal|"the scannerid in the path and must be an integer"
argument_list|)
throw|;
block|}
name|scannerId
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|scannerIdString
argument_list|)
expr_stmt|;
try|try
block|{
name|innerModel
operator|.
name|scannerClose
argument_list|(
name|scannerId
argument_list|)
expr_stmt|;
name|s
operator|.
name|setOK
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HBaseRestException
name|e
parameter_list|)
block|{
name|s
operator|.
name|setNotFound
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|s
operator|.
name|setBadRequest
argument_list|(
literal|"invalid query"
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|respond
argument_list|()
expr_stmt|;
block|}
comment|/*    * (non-Javadoc)    *     * @see    * org.apache.hadoop.hbase.rest.AbstractController#generateModel(org.apache    * .hadoop.hbase.HBaseConfiguration,    * org.apache.hadoop.hbase.client.HBaseAdmin)    */
annotation|@
name|Override
specifier|protected
name|AbstractModel
name|generateModel
parameter_list|(
name|HBaseConfiguration
name|conf
parameter_list|,
name|HBaseAdmin
name|a
parameter_list|)
block|{
return|return
operator|new
name|ScannerModel
argument_list|(
name|conf
argument_list|,
name|a
argument_list|)
return|;
block|}
specifier|protected
name|ScannerModel
name|getModel
parameter_list|()
block|{
return|return
operator|(
name|ScannerModel
operator|)
name|model
return|;
block|}
comment|/*    * (non-Javadoc)    *     * @see    * org.apache.hadoop.hbase.rest.AbstractController#get(org.apache.hadoop.hbase    * .rest.Status, byte[][], java.util.Map)    */
annotation|@
name|Override
specifier|public
name|void
name|get
parameter_list|(
name|Status
name|s
parameter_list|,
name|byte
index|[]
index|[]
name|pathSegments
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|queryMap
parameter_list|)
throws|throws
name|HBaseRestException
block|{
name|s
operator|.
name|setBadRequest
argument_list|(
literal|"invalid query"
argument_list|)
expr_stmt|;
name|s
operator|.
name|respond
argument_list|()
expr_stmt|;
block|}
comment|/*    * (non-Javadoc)    *     * @see    * org.apache.hadoop.hbase.rest.AbstractController#post(org.apache.hadoop.    * hbase.rest.Status, byte[][], java.util.Map, byte[],    * org.apache.hadoop.hbase.rest.parser.IHBaseRestParser)    */
annotation|@
name|Override
specifier|public
name|void
name|post
parameter_list|(
name|Status
name|s
parameter_list|,
name|byte
index|[]
index|[]
name|pathSegments
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|queryMap
parameter_list|,
name|byte
index|[]
name|input
parameter_list|,
name|IHBaseRestParser
name|parser
parameter_list|)
throws|throws
name|HBaseRestException
block|{
name|ScannerModel
name|innerModel
init|=
name|this
operator|.
name|getModel
argument_list|()
decl_stmt|;
name|byte
index|[]
name|tableName
decl_stmt|;
name|tableName
operator|=
name|pathSegments
index|[
literal|0
index|]
expr_stmt|;
comment|// Otherwise we interpret this request as a scanner request.
if|if
condition|(
name|pathSegments
operator|.
name|length
operator|==
literal|2
operator|&&
name|Bytes
operator|.
name|toString
argument_list|(
name|pathSegments
index|[
literal|1
index|]
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
name|RESTConstants
operator|.
name|SCANNER
argument_list|)
condition|)
block|{
comment|// new scanner request
name|ScannerDescriptor
name|sd
init|=
name|this
operator|.
name|getScannerDescriptor
argument_list|(
name|queryMap
argument_list|)
decl_stmt|;
name|s
operator|.
name|setScannerCreated
argument_list|(
name|createScanner
argument_list|(
name|innerModel
argument_list|,
name|tableName
argument_list|,
name|sd
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pathSegments
operator|.
name|length
operator|==
literal|3
operator|&&
name|Bytes
operator|.
name|toString
argument_list|(
name|pathSegments
index|[
literal|1
index|]
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
name|RESTConstants
operator|.
name|SCANNER
argument_list|)
condition|)
block|{
comment|// open scanner request
comment|// first see if the limit variable is present
name|Long
name|numRows
init|=
literal|1L
decl_stmt|;
name|String
index|[]
name|numRowsString
init|=
name|queryMap
operator|.
name|get
argument_list|(
name|RESTConstants
operator|.
name|LIMIT
argument_list|)
decl_stmt|;
if|if
condition|(
name|numRowsString
operator|!=
literal|null
operator|&&
name|Pattern
operator|.
name|matches
argument_list|(
literal|"^\\d+$"
argument_list|,
name|numRowsString
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|numRows
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|numRowsString
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
comment|// get the scannerId
name|Integer
name|scannerId
init|=
literal|null
decl_stmt|;
name|String
name|scannerIdString
init|=
operator|new
name|String
argument_list|(
name|pathSegments
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Pattern
operator|.
name|matches
argument_list|(
literal|"^\\d+$"
argument_list|,
name|scannerIdString
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HBaseRestException
argument_list|(
literal|"the scannerid in the path and must be an integer"
argument_list|)
throw|;
block|}
name|scannerId
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|scannerIdString
argument_list|)
expr_stmt|;
try|try
block|{
name|s
operator|.
name|setOK
argument_list|(
name|innerModel
operator|.
name|scannerGet
argument_list|(
name|scannerId
argument_list|,
name|numRows
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HBaseRestException
name|e
parameter_list|)
block|{
name|s
operator|.
name|setNotFound
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|s
operator|.
name|setBadRequest
argument_list|(
literal|"Unknown Query."
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|respond
argument_list|()
expr_stmt|;
block|}
comment|/*    * (non-Javadoc)    *     * @see    * org.apache.hadoop.hbase.rest.AbstractController#put(org.apache.hadoop.hbase    * .rest.Status, byte[][], java.util.Map, byte[],    * org.apache.hadoop.hbase.rest.parser.IHBaseRestParser)    */
annotation|@
name|Override
specifier|public
name|void
name|put
parameter_list|(
name|Status
name|s
parameter_list|,
name|byte
index|[]
index|[]
name|pathSegments
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|queryMap
parameter_list|,
name|byte
index|[]
name|input
parameter_list|,
name|IHBaseRestParser
name|parser
parameter_list|)
throws|throws
name|HBaseRestException
block|{
name|s
operator|.
name|setBadRequest
argument_list|(
literal|"invalid query"
argument_list|)
expr_stmt|;
name|s
operator|.
name|respond
argument_list|()
expr_stmt|;
block|}
specifier|private
name|ScannerDescriptor
name|getScannerDescriptor
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|queryMap
parameter_list|)
block|{
name|long
name|timestamp
init|=
literal|0L
decl_stmt|;
name|byte
index|[]
name|startRow
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|stopRow
init|=
literal|null
decl_stmt|;
name|String
name|filters
init|=
literal|null
decl_stmt|;
name|String
index|[]
name|timeStampString
init|=
name|queryMap
operator|.
name|get
argument_list|(
name|RESTConstants
operator|.
name|SCANNER_TIMESTAMP
argument_list|)
decl_stmt|;
if|if
condition|(
name|timeStampString
operator|!=
literal|null
operator|&&
name|timeStampString
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|timestamp
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|timeStampString
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|startRowString
init|=
name|queryMap
operator|.
name|get
argument_list|(
name|RESTConstants
operator|.
name|SCANNER_START_ROW
argument_list|)
decl_stmt|;
if|if
condition|(
name|startRowString
operator|!=
literal|null
operator|&&
name|startRowString
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|startRow
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|startRowString
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|stopRowString
init|=
name|queryMap
operator|.
name|get
argument_list|(
name|RESTConstants
operator|.
name|SCANNER_STOP_ROW
argument_list|)
decl_stmt|;
if|if
condition|(
name|stopRowString
operator|!=
literal|null
operator|&&
name|stopRowString
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|stopRow
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|stopRowString
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|filtersStrings
init|=
name|queryMap
operator|.
name|get
argument_list|(
name|RESTConstants
operator|.
name|SCANNER_FILTER
argument_list|)
decl_stmt|;
if|if
condition|(
name|filtersStrings
operator|!=
literal|null
operator|&&
name|filtersStrings
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|filters
operator|=
literal|""
expr_stmt|;
for|for
control|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|String
name|filter
range|:
name|filtersStrings
control|)
block|{
comment|// TODO filters are not hooked up yet... And the String should probably
comment|// be changed to a set
block|}
block|}
return|return
operator|new
name|ScannerDescriptor
argument_list|(
name|this
operator|.
name|getColumnsFromQueryMap
argument_list|(
name|queryMap
argument_list|)
argument_list|,
name|timestamp
argument_list|,
name|startRow
argument_list|,
name|stopRow
argument_list|,
name|filters
argument_list|)
return|;
block|}
specifier|protected
name|ScannerIdentifier
name|createScanner
parameter_list|(
name|ScannerModel
name|innerModel
parameter_list|,
name|byte
index|[]
name|tableName
parameter_list|,
name|ScannerDescriptor
name|scannerDescriptor
parameter_list|)
throws|throws
name|HBaseRestException
block|{
name|RowFilterInterface
name|filterSet
init|=
literal|null
decl_stmt|;
comment|// Might want to change this. I am doing this so that I can use
comment|// a switch statement that is more efficient.
name|int
name|switchInt
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|scannerDescriptor
operator|.
name|getColumns
argument_list|()
operator|!=
literal|null
operator|&&
name|scannerDescriptor
operator|.
name|getColumns
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|switchInt
operator|+=
literal|1
expr_stmt|;
block|}
name|switchInt
operator|+=
operator|(
name|scannerDescriptor
operator|.
name|getTimestamp
argument_list|()
operator|!=
literal|0L
operator|)
condition|?
operator|(
literal|1
operator|<<
literal|1
operator|)
else|:
literal|0
expr_stmt|;
name|switchInt
operator|+=
operator|(
name|scannerDescriptor
operator|.
name|getStartRow
argument_list|()
operator|.
name|length
operator|>
literal|0
operator|)
condition|?
operator|(
literal|1
operator|<<
literal|2
operator|)
else|:
literal|0
expr_stmt|;
name|switchInt
operator|+=
operator|(
name|scannerDescriptor
operator|.
name|getStopRow
argument_list|()
operator|.
name|length
operator|>
literal|0
operator|)
condition|?
operator|(
literal|1
operator|<<
literal|3
operator|)
else|:
literal|0
expr_stmt|;
if|if
condition|(
name|scannerDescriptor
operator|.
name|getFilters
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|scannerDescriptor
operator|.
name|getFilters
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|switchInt
operator|+=
operator|(
name|scannerDescriptor
operator|.
name|getFilters
argument_list|()
operator|!=
literal|null
operator|)
condition|?
operator|(
literal|1
operator|<<
literal|4
operator|)
else|:
literal|0
expr_stmt|;
name|filterSet
operator|=
name|unionFilters
argument_list|(
name|scannerDescriptor
operator|.
name|getFilters
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|scannerSwitch
argument_list|(
name|switchInt
argument_list|,
name|innerModel
argument_list|,
name|tableName
argument_list|,
name|scannerDescriptor
operator|.
name|getColumns
argument_list|()
argument_list|,
name|scannerDescriptor
operator|.
name|getTimestamp
argument_list|()
argument_list|,
name|scannerDescriptor
operator|.
name|getStartRow
argument_list|()
argument_list|,
name|scannerDescriptor
operator|.
name|getStopRow
argument_list|()
argument_list|,
name|filterSet
argument_list|)
return|;
block|}
specifier|public
name|ScannerIdentifier
name|scannerSwitch
parameter_list|(
name|int
name|switchInt
parameter_list|,
name|ScannerModel
name|innerModel
parameter_list|,
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
index|[]
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|byte
index|[]
name|startRow
parameter_list|,
name|byte
index|[]
name|stopRow
parameter_list|,
name|RowFilterInterface
name|filterSet
parameter_list|)
throws|throws
name|HBaseRestException
block|{
switch|switch
condition|(
name|switchInt
condition|)
block|{
case|case
literal|0
case|:
return|return
name|innerModel
operator|.
name|scannerOpen
argument_list|(
name|tableName
argument_list|)
return|;
case|case
literal|1
case|:
return|return
name|innerModel
operator|.
name|scannerOpen
argument_list|(
name|tableName
argument_list|,
name|columns
argument_list|)
return|;
case|case
literal|2
case|:
return|return
name|innerModel
operator|.
name|scannerOpen
argument_list|(
name|tableName
argument_list|,
name|timestamp
argument_list|)
return|;
case|case
literal|3
case|:
return|return
name|innerModel
operator|.
name|scannerOpen
argument_list|(
name|tableName
argument_list|,
name|columns
argument_list|,
name|timestamp
argument_list|)
return|;
case|case
literal|4
case|:
return|return
name|innerModel
operator|.
name|scannerOpen
argument_list|(
name|tableName
argument_list|,
name|startRow
argument_list|)
return|;
case|case
literal|5
case|:
return|return
name|innerModel
operator|.
name|scannerOpen
argument_list|(
name|tableName
argument_list|,
name|columns
argument_list|,
name|startRow
argument_list|)
return|;
case|case
literal|6
case|:
return|return
name|innerModel
operator|.
name|scannerOpen
argument_list|(
name|tableName
argument_list|,
name|startRow
argument_list|,
name|timestamp
argument_list|)
return|;
case|case
literal|7
case|:
return|return
name|innerModel
operator|.
name|scannerOpen
argument_list|(
name|tableName
argument_list|,
name|columns
argument_list|,
name|startRow
argument_list|,
name|timestamp
argument_list|)
return|;
case|case
literal|8
case|:
return|return
name|innerModel
operator|.
name|scannerOpen
argument_list|(
name|tableName
argument_list|,
name|getStopRow
argument_list|(
name|stopRow
argument_list|)
argument_list|)
return|;
case|case
literal|9
case|:
return|return
name|innerModel
operator|.
name|scannerOpen
argument_list|(
name|tableName
argument_list|,
name|columns
argument_list|,
name|getStopRow
argument_list|(
name|stopRow
argument_list|)
argument_list|)
return|;
case|case
literal|10
case|:
return|return
name|innerModel
operator|.
name|scannerOpen
argument_list|(
name|tableName
argument_list|,
name|timestamp
argument_list|,
name|getStopRow
argument_list|(
name|stopRow
argument_list|)
argument_list|)
return|;
case|case
literal|11
case|:
return|return
name|innerModel
operator|.
name|scannerOpen
argument_list|(
name|tableName
argument_list|,
name|columns
argument_list|,
name|timestamp
argument_list|,
name|getStopRow
argument_list|(
name|stopRow
argument_list|)
argument_list|)
return|;
case|case
literal|12
case|:
return|return
name|innerModel
operator|.
name|scannerOpen
argument_list|(
name|tableName
argument_list|,
name|startRow
argument_list|,
name|getStopRow
argument_list|(
name|stopRow
argument_list|)
argument_list|)
return|;
case|case
literal|13
case|:
return|return
name|innerModel
operator|.
name|scannerOpen
argument_list|(
name|tableName
argument_list|,
name|columns
argument_list|,
name|startRow
argument_list|,
name|getStopRow
argument_list|(
name|stopRow
argument_list|)
argument_list|)
return|;
case|case
literal|14
case|:
return|return
name|innerModel
operator|.
name|scannerOpen
argument_list|(
name|tableName
argument_list|,
name|startRow
argument_list|,
name|timestamp
argument_list|,
name|getStopRow
argument_list|(
name|stopRow
argument_list|)
argument_list|)
return|;
case|case
literal|15
case|:
return|return
name|innerModel
operator|.
name|scannerOpen
argument_list|(
name|tableName
argument_list|,
name|columns
argument_list|,
name|startRow
argument_list|,
name|timestamp
argument_list|,
name|getStopRow
argument_list|(
name|stopRow
argument_list|)
argument_list|)
return|;
case|case
literal|16
case|:
return|return
name|innerModel
operator|.
name|scannerOpen
argument_list|(
name|tableName
argument_list|,
name|filterSet
argument_list|)
return|;
case|case
literal|17
case|:
return|return
name|innerModel
operator|.
name|scannerOpen
argument_list|(
name|tableName
argument_list|,
name|columns
argument_list|,
name|filterSet
argument_list|)
return|;
case|case
literal|18
case|:
return|return
name|innerModel
operator|.
name|scannerOpen
argument_list|(
name|tableName
argument_list|,
name|timestamp
argument_list|,
name|filterSet
argument_list|)
return|;
case|case
literal|19
case|:
return|return
name|innerModel
operator|.
name|scannerOpen
argument_list|(
name|tableName
argument_list|,
name|columns
argument_list|,
name|timestamp
argument_list|,
name|filterSet
argument_list|)
return|;
case|case
literal|20
case|:
return|return
name|innerModel
operator|.
name|scannerOpen
argument_list|(
name|tableName
argument_list|,
name|startRow
argument_list|,
name|filterSet
argument_list|)
return|;
case|case
literal|21
case|:
return|return
name|innerModel
operator|.
name|scannerOpen
argument_list|(
name|tableName
argument_list|,
name|columns
argument_list|,
name|startRow
argument_list|,
name|filterSet
argument_list|)
return|;
case|case
literal|22
case|:
return|return
name|innerModel
operator|.
name|scannerOpen
argument_list|(
name|tableName
argument_list|,
name|startRow
argument_list|,
name|timestamp
argument_list|,
name|filterSet
argument_list|)
return|;
case|case
literal|23
case|:
return|return
name|innerModel
operator|.
name|scannerOpen
argument_list|(
name|tableName
argument_list|,
name|columns
argument_list|,
name|startRow
argument_list|,
name|timestamp
argument_list|,
name|filterSet
argument_list|)
return|;
case|case
literal|24
case|:
return|return
name|innerModel
operator|.
name|scannerOpen
argument_list|(
name|tableName
argument_list|,
name|getStopRowUnionFilter
argument_list|(
name|stopRow
argument_list|,
name|filterSet
argument_list|)
argument_list|)
return|;
case|case
literal|25
case|:
return|return
name|innerModel
operator|.
name|scannerOpen
argument_list|(
name|tableName
argument_list|,
name|columns
argument_list|,
name|getStopRowUnionFilter
argument_list|(
name|stopRow
argument_list|,
name|filterSet
argument_list|)
argument_list|)
return|;
case|case
literal|26
case|:
return|return
name|innerModel
operator|.
name|scannerOpen
argument_list|(
name|tableName
argument_list|,
name|timestamp
argument_list|,
name|getStopRowUnionFilter
argument_list|(
name|stopRow
argument_list|,
name|filterSet
argument_list|)
argument_list|)
return|;
case|case
literal|27
case|:
return|return
name|innerModel
operator|.
name|scannerOpen
argument_list|(
name|tableName
argument_list|,
name|columns
argument_list|,
name|timestamp
argument_list|,
name|getStopRowUnionFilter
argument_list|(
name|stopRow
argument_list|,
name|filterSet
argument_list|)
argument_list|)
return|;
case|case
literal|28
case|:
return|return
name|innerModel
operator|.
name|scannerOpen
argument_list|(
name|tableName
argument_list|,
name|startRow
argument_list|,
name|getStopRowUnionFilter
argument_list|(
name|stopRow
argument_list|,
name|filterSet
argument_list|)
argument_list|)
return|;
case|case
literal|29
case|:
return|return
name|innerModel
operator|.
name|scannerOpen
argument_list|(
name|tableName
argument_list|,
name|columns
argument_list|,
name|startRow
argument_list|,
name|getStopRowUnionFilter
argument_list|(
name|stopRow
argument_list|,
name|filterSet
argument_list|)
argument_list|)
return|;
case|case
literal|30
case|:
return|return
name|innerModel
operator|.
name|scannerOpen
argument_list|(
name|tableName
argument_list|,
name|startRow
argument_list|,
name|timestamp
argument_list|,
name|getStopRowUnionFilter
argument_list|(
name|stopRow
argument_list|,
name|filterSet
argument_list|)
argument_list|)
return|;
case|case
literal|31
case|:
return|return
name|innerModel
operator|.
name|scannerOpen
argument_list|(
name|tableName
argument_list|,
name|columns
argument_list|,
name|startRow
argument_list|,
name|timestamp
argument_list|,
name|getStopRowUnionFilter
argument_list|(
name|stopRow
argument_list|,
name|filterSet
argument_list|)
argument_list|)
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
specifier|protected
name|RowFilterInterface
name|getStopRow
parameter_list|(
name|byte
index|[]
name|stopRow
parameter_list|)
block|{
return|return
operator|new
name|WhileMatchRowFilter
argument_list|(
operator|new
name|StopRowFilter
argument_list|(
name|stopRow
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|RowFilterInterface
name|getStopRowUnionFilter
parameter_list|(
name|byte
index|[]
name|stopRow
parameter_list|,
name|RowFilterInterface
name|filter
parameter_list|)
block|{
name|Set
argument_list|<
name|RowFilterInterface
argument_list|>
name|filterSet
init|=
operator|new
name|HashSet
argument_list|<
name|RowFilterInterface
argument_list|>
argument_list|()
decl_stmt|;
name|filterSet
operator|.
name|add
argument_list|(
name|getStopRow
argument_list|(
name|stopRow
argument_list|)
argument_list|)
expr_stmt|;
name|filterSet
operator|.
name|add
argument_list|(
name|filter
argument_list|)
expr_stmt|;
return|return
operator|new
name|RowFilterSet
argument_list|(
name|filterSet
argument_list|)
return|;
block|}
comment|/**    * Given a list of filters in JSON string form, returns a RowSetFilter that    * returns true if all input filters return true on a Row (aka an AND    * statement).    *     * @param filters    *          array of input filters in a JSON String    * @return RowSetFilter with all input filters in an AND Statement    * @throws org.apache.hadoop.hbase.rest.exception.HBaseRestException    */
specifier|protected
name|RowFilterInterface
name|unionFilters
parameter_list|(
name|String
name|filters
parameter_list|)
throws|throws
name|HBaseRestException
block|{
name|FilterFactory
name|f
init|=
name|RESTConstants
operator|.
name|filterFactories
operator|.
name|get
argument_list|(
literal|"RowFilterSet"
argument_list|)
decl_stmt|;
return|return
name|f
operator|.
name|getFilterFromJSON
argument_list|(
name|filters
argument_list|)
return|;
block|}
block|}
end_class

end_unit

