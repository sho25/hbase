begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|RowFilterInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|RowResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|descriptors
operator|.
name|ScannerIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|exception
operator|.
name|HBaseRestException
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|ScannerModel
extends|extends
name|AbstractModel
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TableModel
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|ScannerModel
parameter_list|(
name|HBaseConfiguration
name|config
parameter_list|,
name|HBaseAdmin
name|admin
parameter_list|)
block|{
name|super
operator|.
name|initialize
argument_list|(
name|config
argument_list|,
name|admin
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// Normal Scanner
comment|//
specifier|protected
specifier|static
class|class
name|ScannerMaster
block|{
specifier|protected
specifier|static
name|Map
argument_list|<
name|Integer
argument_list|,
name|Scanner
argument_list|>
name|scannerMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Integer
argument_list|,
name|Scanner
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
specifier|static
name|AtomicInteger
name|nextScannerId
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
name|Integer
name|addScanner
parameter_list|(
name|Scanner
name|scanner
parameter_list|)
block|{
name|Integer
name|i
init|=
operator|new
name|Integer
argument_list|(
name|nextScannerId
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
decl_stmt|;
name|scannerMap
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|scanner
argument_list|)
expr_stmt|;
return|return
name|i
return|;
block|}
specifier|public
name|Scanner
name|getScanner
parameter_list|(
name|Integer
name|id
parameter_list|)
block|{
return|return
name|scannerMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
return|;
block|}
specifier|public
name|Scanner
name|removeScanner
parameter_list|(
name|Integer
name|id
parameter_list|)
block|{
return|return
name|scannerMap
operator|.
name|remove
argument_list|(
name|id
argument_list|)
return|;
block|}
comment|/**      * @param id      *          id of scanner to close      */
specifier|public
name|void
name|scannerClose
parameter_list|(
name|Integer
name|id
parameter_list|)
block|{
name|Scanner
name|s
init|=
name|scannerMap
operator|.
name|remove
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
specifier|static
name|ScannerMaster
name|scannerMaster
init|=
operator|new
name|ScannerMaster
argument_list|()
decl_stmt|;
comment|/**    * returns the next numResults RowResults from the Scaner mapped to Integer    * id. If the end of the table is reached, the scanner is closed and all    * succesfully retrieved rows are returned.    *     * @param id    *          id target scanner is mapped to.    * @param numRows    *          number of results to return.    * @return all successfully retrieved rows.    * @throws org.apache.hadoop.hbase.rest.exception.HBaseRestException    */
specifier|public
name|RowResult
index|[]
name|scannerGet
parameter_list|(
name|Integer
name|id
parameter_list|,
name|Long
name|numRows
parameter_list|)
throws|throws
name|HBaseRestException
block|{
try|try
block|{
name|ArrayList
argument_list|<
name|RowResult
argument_list|>
name|a
decl_stmt|;
name|Scanner
name|s
decl_stmt|;
name|RowResult
name|r
decl_stmt|;
name|a
operator|=
operator|new
name|ArrayList
argument_list|<
name|RowResult
argument_list|>
argument_list|()
expr_stmt|;
name|s
operator|=
name|scannerMaster
operator|.
name|getScanner
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HBaseRestException
argument_list|(
literal|"ScannerId: "
operator|+
name|id
operator|+
literal|" is unavailable.  Please create a new scanner"
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRows
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|r
operator|=
name|s
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|a
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scannerMaster
operator|.
name|scannerClose
argument_list|(
name|id
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
return|return
name|a
operator|.
name|toArray
argument_list|(
operator|new
name|RowResult
index|[
literal|0
index|]
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HBaseRestException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Returns all rows inbetween the scanners current position and the end of the    * table.    *     * @param id    *          id of scanner to use    * @return all rows till end of table    * @throws org.apache.hadoop.hbase.rest.exception.HBaseRestException    */
specifier|public
name|RowResult
index|[]
name|scannerGet
parameter_list|(
name|Integer
name|id
parameter_list|)
throws|throws
name|HBaseRestException
block|{
try|try
block|{
name|ArrayList
argument_list|<
name|RowResult
argument_list|>
name|a
decl_stmt|;
name|Scanner
name|s
decl_stmt|;
name|RowResult
name|r
decl_stmt|;
name|a
operator|=
operator|new
name|ArrayList
argument_list|<
name|RowResult
argument_list|>
argument_list|()
expr_stmt|;
name|s
operator|=
name|scannerMaster
operator|.
name|getScanner
argument_list|(
name|id
argument_list|)
expr_stmt|;
while|while
condition|(
operator|(
name|r
operator|=
name|s
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|a
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
name|scannerMaster
operator|.
name|scannerClose
argument_list|(
name|id
argument_list|)
expr_stmt|;
return|return
name|a
operator|.
name|toArray
argument_list|(
operator|new
name|RowResult
index|[
literal|0
index|]
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HBaseRestException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|boolean
name|scannerClose
parameter_list|(
name|Integer
name|id
parameter_list|)
throws|throws
name|HBaseRestException
block|{
name|Scanner
name|s
init|=
name|scannerMaster
operator|.
name|removeScanner
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HBaseRestException
argument_list|(
literal|"Scanner id: "
operator|+
name|id
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
comment|// Scanner Open Methods
comment|// No Columns
specifier|public
name|ScannerIdentifier
name|scannerOpen
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|HBaseRestException
block|{
return|return
name|scannerOpen
argument_list|(
name|tableName
argument_list|,
name|getColumns
argument_list|(
name|tableName
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|ScannerIdentifier
name|scannerOpen
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|HBaseRestException
block|{
return|return
name|scannerOpen
argument_list|(
name|tableName
argument_list|,
name|getColumns
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|timestamp
argument_list|)
return|;
block|}
specifier|public
name|ScannerIdentifier
name|scannerOpen
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|startRow
parameter_list|)
throws|throws
name|HBaseRestException
block|{
return|return
name|scannerOpen
argument_list|(
name|tableName
argument_list|,
name|getColumns
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|startRow
argument_list|)
return|;
block|}
specifier|public
name|ScannerIdentifier
name|scannerOpen
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|startRow
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|HBaseRestException
block|{
return|return
name|scannerOpen
argument_list|(
name|tableName
argument_list|,
name|getColumns
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|startRow
argument_list|,
name|timestamp
argument_list|)
return|;
block|}
specifier|public
name|ScannerIdentifier
name|scannerOpen
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|RowFilterInterface
name|filter
parameter_list|)
throws|throws
name|HBaseRestException
block|{
return|return
name|scannerOpen
argument_list|(
name|tableName
argument_list|,
name|getColumns
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|filter
argument_list|)
return|;
block|}
specifier|public
name|ScannerIdentifier
name|scannerOpen
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|RowFilterInterface
name|filter
parameter_list|)
throws|throws
name|HBaseRestException
block|{
return|return
name|scannerOpen
argument_list|(
name|tableName
argument_list|,
name|getColumns
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|timestamp
argument_list|,
name|filter
argument_list|)
return|;
block|}
specifier|public
name|ScannerIdentifier
name|scannerOpen
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|startRow
parameter_list|,
name|RowFilterInterface
name|filter
parameter_list|)
throws|throws
name|HBaseRestException
block|{
return|return
name|scannerOpen
argument_list|(
name|tableName
argument_list|,
name|getColumns
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|startRow
argument_list|,
name|filter
argument_list|)
return|;
block|}
specifier|public
name|ScannerIdentifier
name|scannerOpen
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|startRow
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|RowFilterInterface
name|filter
parameter_list|)
throws|throws
name|HBaseRestException
block|{
return|return
name|scannerOpen
argument_list|(
name|tableName
argument_list|,
name|getColumns
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|startRow
argument_list|,
name|timestamp
argument_list|,
name|filter
argument_list|)
return|;
block|}
comment|// With Columns
specifier|public
name|ScannerIdentifier
name|scannerOpen
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
index|[]
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|HBaseRestException
block|{
try|try
block|{
name|HTable
name|table
decl_stmt|;
name|table
operator|=
operator|new
name|HTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
return|return
operator|new
name|ScannerIdentifier
argument_list|(
name|scannerMaster
operator|.
name|addScanner
argument_list|(
name|table
operator|.
name|getScanner
argument_list|(
name|columns
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|timestamp
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HBaseRestException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|ScannerIdentifier
name|scannerOpen
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
index|[]
name|columns
parameter_list|)
throws|throws
name|HBaseRestException
block|{
return|return
name|scannerOpen
argument_list|(
name|tableName
argument_list|,
name|columns
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
return|;
block|}
specifier|public
name|ScannerIdentifier
name|scannerOpen
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
index|[]
name|columns
parameter_list|,
name|byte
index|[]
name|startRow
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|HBaseRestException
block|{
try|try
block|{
name|HTable
name|table
decl_stmt|;
name|table
operator|=
operator|new
name|HTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
return|return
operator|new
name|ScannerIdentifier
argument_list|(
name|scannerMaster
operator|.
name|addScanner
argument_list|(
name|table
operator|.
name|getScanner
argument_list|(
name|columns
argument_list|,
name|startRow
argument_list|,
name|timestamp
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HBaseRestException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|ScannerIdentifier
name|scannerOpen
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
index|[]
name|columns
parameter_list|,
name|byte
index|[]
name|startRow
parameter_list|)
throws|throws
name|HBaseRestException
block|{
return|return
name|scannerOpen
argument_list|(
name|tableName
argument_list|,
name|columns
argument_list|,
name|startRow
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
return|;
block|}
specifier|public
name|ScannerIdentifier
name|scannerOpen
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
index|[]
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|RowFilterInterface
name|filter
parameter_list|)
throws|throws
name|HBaseRestException
block|{
try|try
block|{
name|HTable
name|table
decl_stmt|;
name|table
operator|=
operator|new
name|HTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
return|return
operator|new
name|ScannerIdentifier
argument_list|(
name|scannerMaster
operator|.
name|addScanner
argument_list|(
name|table
operator|.
name|getScanner
argument_list|(
name|columns
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|timestamp
argument_list|,
name|filter
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HBaseRestException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|ScannerIdentifier
name|scannerOpen
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
index|[]
name|columns
parameter_list|,
name|RowFilterInterface
name|filter
parameter_list|)
throws|throws
name|HBaseRestException
block|{
return|return
name|scannerOpen
argument_list|(
name|tableName
argument_list|,
name|columns
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|filter
argument_list|)
return|;
block|}
specifier|public
name|ScannerIdentifier
name|scannerOpen
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
index|[]
name|columns
parameter_list|,
name|byte
index|[]
name|startRow
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|RowFilterInterface
name|filter
parameter_list|)
throws|throws
name|HBaseRestException
block|{
try|try
block|{
name|HTable
name|table
decl_stmt|;
name|table
operator|=
operator|new
name|HTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
return|return
operator|new
name|ScannerIdentifier
argument_list|(
name|scannerMaster
operator|.
name|addScanner
argument_list|(
name|table
operator|.
name|getScanner
argument_list|(
name|columns
argument_list|,
name|startRow
argument_list|,
name|timestamp
argument_list|,
name|filter
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HBaseRestException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|ScannerIdentifier
name|scannerOpen
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
index|[]
name|columns
parameter_list|,
name|byte
index|[]
name|startRow
parameter_list|,
name|RowFilterInterface
name|filter
parameter_list|)
throws|throws
name|HBaseRestException
block|{
return|return
name|scannerOpen
argument_list|(
name|tableName
argument_list|,
name|columns
argument_list|,
name|startRow
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|filter
argument_list|)
return|;
block|}
block|}
end_class

end_unit

