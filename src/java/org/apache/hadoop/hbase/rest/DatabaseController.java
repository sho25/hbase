begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2008 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|exception
operator|.
name|HBaseRestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|parser
operator|.
name|IHBaseRestParser
import|;
end_import

begin_class
specifier|public
class|class
name|DatabaseController
extends|extends
name|AbstractController
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DatabaseController
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|DatabaseModel
name|getModel
parameter_list|()
block|{
return|return
operator|(
name|DatabaseModel
operator|)
name|model
return|;
block|}
annotation|@
name|Override
specifier|protected
name|AbstractModel
name|generateModel
parameter_list|(
name|HBaseConfiguration
name|conf
parameter_list|,
name|HBaseAdmin
name|admin
parameter_list|)
block|{
return|return
operator|new
name|DatabaseModel
argument_list|(
name|conf
argument_list|,
name|admin
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|get
parameter_list|(
name|Status
name|s
parameter_list|,
name|byte
index|[]
index|[]
name|pathSegments
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|queryMap
parameter_list|)
throws|throws
name|HBaseRestException
block|{
name|s
operator|.
name|setNoQueryResults
argument_list|()
expr_stmt|;
name|DatabaseModel
name|innerModel
init|=
name|getModel
argument_list|()
decl_stmt|;
if|if
condition|(
name|queryMap
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|s
operator|.
name|setOK
argument_list|(
name|innerModel
operator|.
name|getDatabaseMetadata
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|s
operator|.
name|setBadRequest
argument_list|(
literal|"Unknown query."
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|respond
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|post
parameter_list|(
name|Status
name|s
parameter_list|,
name|byte
index|[]
index|[]
name|pathSegments
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|queryMap
parameter_list|,
name|byte
index|[]
name|input
parameter_list|,
name|IHBaseRestParser
name|parser
parameter_list|)
throws|throws
name|HBaseRestException
block|{
name|s
operator|.
name|setMethodNotImplemented
argument_list|()
expr_stmt|;
name|s
operator|.
name|respond
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|put
parameter_list|(
name|Status
name|s
parameter_list|,
name|byte
index|[]
index|[]
name|pathSegments
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|queryMap
parameter_list|,
name|byte
index|[]
name|input
parameter_list|,
name|IHBaseRestParser
name|parser
parameter_list|)
throws|throws
name|HBaseRestException
block|{
name|s
operator|.
name|setMethodNotImplemented
argument_list|()
expr_stmt|;
name|s
operator|.
name|respond
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|delete
parameter_list|(
name|Status
name|s
parameter_list|,
name|byte
index|[]
index|[]
name|pathSegments
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|queryMap
parameter_list|)
throws|throws
name|HBaseRestException
block|{
name|s
operator|.
name|setMethodNotImplemented
argument_list|()
expr_stmt|;
name|s
operator|.
name|respond
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

