begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2008 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|filter
operator|.
name|RowFilterSetFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|filter
operator|.
name|StopRowFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|filter
operator|.
name|WhileMatchRowFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|filter
operator|.
name|PageRowFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|filter
operator|.
name|ColumnValueFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|filter
operator|.
name|RegExpRowFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|filter
operator|.
name|InclusiveStopRowFilterFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|filter
operator|.
name|FilterFactory
import|;
end_import

begin_interface
specifier|public
interface|interface
name|RESTConstants
block|{
specifier|final
specifier|static
name|String
name|TRUE
init|=
literal|"true"
decl_stmt|;
specifier|final
specifier|static
name|String
name|FALSE
init|=
literal|"false"
decl_stmt|;
comment|// Used for getting all data from a column specified in that order.
specifier|final
specifier|static
name|String
name|COLUMNS
init|=
literal|"columns"
decl_stmt|;
specifier|final
specifier|static
name|String
name|COLUMN
init|=
literal|"column"
decl_stmt|;
comment|// Used with TableExists
specifier|final
specifier|static
name|String
name|EXISTS
init|=
literal|"exists"
decl_stmt|;
comment|// Maps to Transaction ID
specifier|final
specifier|static
name|String
name|TRANSACTION
init|=
literal|"transaction"
decl_stmt|;
comment|// Transaction Operation Key.
specifier|final
specifier|static
name|String
name|TRANSACTION_OPERATION
init|=
literal|"transaction_op"
decl_stmt|;
comment|// Transaction Operation Values
specifier|final
specifier|static
name|String
name|TRANSACTION_OPERATION_COMMIT
init|=
literal|"commit"
decl_stmt|;
specifier|final
specifier|static
name|String
name|TRANSACTION_OPERATION_CREATE
init|=
literal|"create"
decl_stmt|;
specifier|final
specifier|static
name|String
name|TRANSACTION_OPERATION_ABORT
init|=
literal|"abort"
decl_stmt|;
comment|// Filter Key
specifier|final
specifier|static
name|String
name|FILTER
init|=
literal|"filter"
decl_stmt|;
specifier|final
specifier|static
name|String
name|FILTER_TYPE
init|=
literal|"type"
decl_stmt|;
specifier|final
specifier|static
name|String
name|FILTER_VALUE
init|=
literal|"value"
decl_stmt|;
specifier|final
specifier|static
name|String
name|FILTER_RANK
init|=
literal|"rank"
decl_stmt|;
comment|// Scanner Key
specifier|final
specifier|static
name|String
name|SCANNER
init|=
literal|"scanner"
decl_stmt|;
comment|// The amount of rows to return at one time.
specifier|final
specifier|static
name|String
name|SCANNER_RESULT_SIZE
init|=
literal|"result_size"
decl_stmt|;
specifier|final
specifier|static
name|String
name|SCANNER_START_ROW
init|=
literal|"start_row"
decl_stmt|;
specifier|final
specifier|static
name|String
name|SCANNER_STOP_ROW
init|=
literal|"stop_row"
decl_stmt|;
specifier|final
specifier|static
name|String
name|SCANNER_FILTER
init|=
literal|"filter"
decl_stmt|;
specifier|final
specifier|static
name|String
name|SCANNER_TIMESTAMP
init|=
literal|"timestamp"
decl_stmt|;
specifier|final
specifier|static
name|String
name|NUM_VERSIONS
init|=
literal|"num_versions"
decl_stmt|;
specifier|final
specifier|static
name|String
name|SCANNER_COLUMN
init|=
literal|"column"
decl_stmt|;
comment|// static items used on the path
specifier|static
specifier|final
name|String
name|DISABLE
init|=
literal|"disable"
decl_stmt|;
specifier|static
specifier|final
name|String
name|ENABLE
init|=
literal|"enable"
decl_stmt|;
specifier|static
specifier|final
name|String
name|REGIONS
init|=
literal|"regions"
decl_stmt|;
specifier|static
specifier|final
name|String
name|ROW
init|=
literal|"row"
decl_stmt|;
specifier|static
specifier|final
name|String
name|TIME_STAMPS
init|=
literal|"timestamps"
decl_stmt|;
specifier|static
specifier|final
name|String
name|METADATA
init|=
literal|"metadata"
decl_stmt|;
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"name"
decl_stmt|;
specifier|static
specifier|final
name|String
name|VALUE
init|=
literal|"value"
decl_stmt|;
specifier|static
specifier|final
name|String
name|ROWS
init|=
literal|"rows"
decl_stmt|;
specifier|static
specifier|final
name|FactoryMap
name|filterFactories
init|=
name|FactoryMap
operator|.
name|getFactoryMap
argument_list|()
decl_stmt|;
specifier|static
specifier|final
name|String
name|LIMIT
init|=
literal|"limit"
decl_stmt|;
specifier|static
class|class
name|FactoryMap
block|{
specifier|protected
specifier|static
name|boolean
name|created
init|=
literal|false
decl_stmt|;
specifier|protected
name|HashMap
argument_list|<
name|String
argument_list|,
name|FilterFactory
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|FilterFactory
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|FactoryMap
parameter_list|()
block|{     }
specifier|public
specifier|static
name|FactoryMap
name|getFactoryMap
parameter_list|()
block|{
if|if
condition|(
operator|!
name|created
condition|)
block|{
name|created
operator|=
literal|true
expr_stmt|;
name|FactoryMap
name|f
init|=
operator|new
name|FactoryMap
argument_list|()
decl_stmt|;
name|f
operator|.
name|initialize
argument_list|()
expr_stmt|;
return|return
name|f
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|FilterFactory
name|get
parameter_list|(
name|String
name|c
parameter_list|)
block|{
return|return
name|map
operator|.
name|get
argument_list|(
name|c
argument_list|)
return|;
block|}
specifier|protected
name|void
name|initialize
parameter_list|()
block|{
name|map
operator|.
name|put
argument_list|(
literal|"ColumnValueFilter"
argument_list|,
operator|new
name|ColumnValueFilterFactory
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"InclusiveStopRowFilter"
argument_list|,
operator|new
name|InclusiveStopRowFilterFactory
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"PageRowFilter"
argument_list|,
operator|new
name|PageRowFilterFactory
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"RegExpRowFilter"
argument_list|,
operator|new
name|RegExpRowFilterFactory
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"RowFilterSet"
argument_list|,
operator|new
name|RowFilterSetFactory
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"StopRowFilter"
argument_list|,
operator|new
name|StopRowFilterFactory
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"WhileMatchRowFilter"
argument_list|,
operator|new
name|WhileMatchRowFilterFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_interface

end_unit

