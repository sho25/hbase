begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2008 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|RowFilterInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|RowFilterSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|RESTConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|exception
operator|.
name|HBaseRestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_comment
comment|/**  * Constructs a RowFilterSet from a JSON argument String.  *   * Assumes that the input is a JSONArray consisting of JSON Object version of  * the filters that you wish to mash together in an AND statement.  *   * The Syntax for the individual inner filters are defined by their respective  * FilterFactory. If a filter factory for said Factory does not exist, a  * MalformedFilterJSONException will be thrown.  *   * Currently OR Statements are not supported even though at a later iteration  * they could be supported easily.  */
end_comment

begin_class
specifier|public
class|class
name|RowFilterSetFactory
implements|implements
name|FilterFactory
block|{
specifier|public
name|RowFilterInterface
name|getFilterFromJSON
parameter_list|(
name|String
name|args
parameter_list|)
throws|throws
name|HBaseRestException
block|{
name|JSONArray
name|filterArray
decl_stmt|;
name|Set
argument_list|<
name|RowFilterInterface
argument_list|>
name|set
decl_stmt|;
name|JSONObject
name|filter
decl_stmt|;
try|try
block|{
name|filterArray
operator|=
operator|new
name|JSONArray
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JSONException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HBaseRestException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// If only 1 Row, just return the row.
if|if
condition|(
name|filterArray
operator|.
name|length
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|getRowFilter
argument_list|(
name|filterArray
operator|.
name|optJSONObject
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
comment|// Otherwise continue
name|set
operator|=
operator|new
name|HashSet
argument_list|<
name|RowFilterInterface
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|filterArray
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
comment|// Get FIlter Object
if|if
condition|(
operator|(
name|filter
operator|=
name|filterArray
operator|.
name|optJSONObject
argument_list|(
name|i
argument_list|)
operator|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MalformedFilterException
argument_list|()
throw|;
block|}
comment|// Add newly constructed filter to the filter set;
name|set
operator|.
name|add
argument_list|(
name|getRowFilter
argument_list|(
name|filter
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Put set into a RowFilterSet and return.
return|return
operator|new
name|RowFilterSet
argument_list|(
name|set
argument_list|)
return|;
block|}
comment|/**    * A refactored method that encapsulates the creation of a RowFilter given a    * JSONObject with a correct form of: { "type" : "MY_TYPE", "args" : MY_ARGS,    * }    *     * @param filter    * @return    * @throws org.apache.hadoop.hbase.rest.exception.HBaseRestException    */
specifier|protected
name|RowFilterInterface
name|getRowFilter
parameter_list|(
name|JSONObject
name|filter
parameter_list|)
throws|throws
name|HBaseRestException
block|{
name|FilterFactory
name|f
decl_stmt|;
name|String
name|filterType
decl_stmt|;
name|String
name|filterArgs
decl_stmt|;
comment|// Get Filter's Type
if|if
condition|(
operator|(
name|filterType
operator|=
name|filter
operator|.
name|optString
argument_list|(
name|FilterFactoryConstants
operator|.
name|TYPE
argument_list|)
operator|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MalformedFilterException
argument_list|()
throw|;
block|}
comment|// Get Filter Args
if|if
condition|(
operator|(
name|filterArgs
operator|=
name|filter
operator|.
name|optString
argument_list|(
name|FilterFactoryConstants
operator|.
name|ARGUMENTS
argument_list|)
operator|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MalformedFilterException
argument_list|()
throw|;
block|}
comment|// Get Filter Factory for given Filter Type
if|if
condition|(
operator|(
name|f
operator|=
name|RESTConstants
operator|.
name|filterFactories
operator|.
name|get
argument_list|(
name|filterType
argument_list|)
operator|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MalformedFilterException
argument_list|()
throw|;
block|}
return|return
name|f
operator|.
name|getFilterFromJSON
argument_list|(
name|filterArgs
argument_list|)
return|;
block|}
block|}
end_class

end_unit

