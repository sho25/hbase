begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2008 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|exception
operator|.
name|HBaseRestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|parser
operator|.
name|IHBaseRestParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_class
specifier|public
class|class
name|TableController
extends|extends
name|AbstractController
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TableController
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|TableModel
name|getModel
parameter_list|()
block|{
return|return
operator|(
name|TableModel
operator|)
name|model
return|;
block|}
annotation|@
name|Override
specifier|protected
name|AbstractModel
name|generateModel
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"hiding"
argument_list|)
name|HBaseConfiguration
name|conf
parameter_list|,
name|HBaseAdmin
name|admin
parameter_list|)
block|{
return|return
operator|new
name|TableModel
argument_list|(
name|conf
argument_list|,
name|admin
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|get
parameter_list|(
name|Status
name|s
parameter_list|,
name|byte
index|[]
index|[]
name|pathSegments
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|queryMap
parameter_list|)
throws|throws
name|HBaseRestException
block|{
name|TableModel
name|innerModel
init|=
name|getModel
argument_list|()
decl_stmt|;
name|byte
index|[]
name|tableName
decl_stmt|;
name|tableName
operator|=
name|pathSegments
index|[
literal|0
index|]
expr_stmt|;
if|if
condition|(
name|pathSegments
operator|.
name|length
operator|<
literal|2
condition|)
block|{
name|s
operator|.
name|setOK
argument_list|(
name|innerModel
operator|.
name|getTableMetadata
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|Bytes
operator|.
name|toString
argument_list|(
name|pathSegments
index|[
literal|1
index|]
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
name|REGIONS
argument_list|)
condition|)
block|{
name|s
operator|.
name|setOK
argument_list|(
name|innerModel
operator|.
name|getTableRegions
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|s
operator|.
name|setBadRequest
argument_list|(
literal|"unknown query."
argument_list|)
expr_stmt|;
block|}
block|}
name|s
operator|.
name|respond
argument_list|()
expr_stmt|;
block|}
comment|/*    * (non-Javadoc)    *     * @param input column descriptor JSON. Should be of the form:<pre>    * {"column_families":[ { "name":STRING, "bloomfilter":BOOLEAN,    * "max_versions":INTEGER, "compression_type":STRING, "in_memory":BOOLEAN,    * "block_cache_enabled":BOOLEAN, "max_value_length":INTEGER,    * "time_to_live":INTEGER ]}</pre> If any of the json object fields (except    * name) are not included the default values will be included instead. The    * default values are:<pre> bloomfilter => false max_versions => 3    * compression_type => NONE in_memory => false block_cache_enabled => false    * max_value_length => 2147483647 time_to_live => Integer.MAX_VALUE</pre>    *     * @see    * org.apache.hadoop.hbase.rest.AbstractController#post(org.apache.hadoop.    * hbase.rest.Status, byte[][], java.util.Map, byte[],    * org.apache.hadoop.hbase.rest.parser.IHBaseRestParser)    */
annotation|@
name|Override
specifier|public
name|void
name|post
parameter_list|(
name|Status
name|s
parameter_list|,
name|byte
index|[]
index|[]
name|pathSegments
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|queryMap
parameter_list|,
name|byte
index|[]
name|input
parameter_list|,
name|IHBaseRestParser
name|parser
parameter_list|)
throws|throws
name|HBaseRestException
block|{
name|TableModel
name|innerModel
init|=
name|getModel
argument_list|()
decl_stmt|;
name|byte
index|[]
name|tableName
decl_stmt|;
if|if
condition|(
name|pathSegments
operator|.
name|length
operator|==
literal|0
condition|)
block|{
comment|// If no input, we don't know columnfamily schema, so send
comment|// no data
if|if
condition|(
name|input
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|s
operator|.
name|setBadRequest
argument_list|(
literal|"no data send with post request"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|HTableDescriptor
name|htd
init|=
name|parser
operator|.
name|getTableDescriptor
argument_list|(
name|input
argument_list|)
decl_stmt|;
comment|// Send to innerModel. If iM returns false, means the
comment|// table already exists so return conflict.
if|if
condition|(
operator|!
name|innerModel
operator|.
name|post
argument_list|(
name|htd
operator|.
name|getName
argument_list|()
argument_list|,
name|htd
argument_list|)
condition|)
block|{
name|s
operator|.
name|setConflict
argument_list|(
literal|"table already exists"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Otherwise successfully created table. Return "created":true
name|s
operator|.
name|setCreated
argument_list|()
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|Bytes
operator|.
name|toString
argument_list|(
name|pathSegments
index|[
literal|1
index|]
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
name|RESTConstants
operator|.
name|ENABLE
argument_list|)
condition|)
block|{
name|tableName
operator|=
name|pathSegments
index|[
literal|0
index|]
expr_stmt|;
name|innerModel
operator|.
name|enableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|s
operator|.
name|setAccepted
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Bytes
operator|.
name|toString
argument_list|(
name|pathSegments
index|[
literal|1
index|]
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
name|RESTConstants
operator|.
name|DISABLE
argument_list|)
condition|)
block|{
name|tableName
operator|=
name|pathSegments
index|[
literal|0
index|]
expr_stmt|;
name|innerModel
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|s
operator|.
name|setAccepted
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|s
operator|.
name|setBadRequest
argument_list|(
literal|"Unknown Query."
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|respond
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|put
parameter_list|(
name|Status
name|s
parameter_list|,
name|byte
index|[]
index|[]
name|pathSegments
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|queryMap
parameter_list|,
name|byte
index|[]
name|input
parameter_list|,
name|IHBaseRestParser
name|parser
parameter_list|)
throws|throws
name|HBaseRestException
block|{
if|if
condition|(
name|pathSegments
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
name|s
operator|.
name|setBadRequest
argument_list|(
literal|"must specifify the name of the table"
argument_list|)
expr_stmt|;
name|s
operator|.
name|respond
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|queryMap
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|s
operator|.
name|setBadRequest
argument_list|(
literal|"no query string should be specified when updating a table"
argument_list|)
expr_stmt|;
name|s
operator|.
name|respond
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|ArrayList
argument_list|<
name|HColumnDescriptor
argument_list|>
name|newColumns
init|=
name|parser
operator|.
name|getColumnDescriptors
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|byte
index|[]
name|tableName
init|=
name|pathSegments
index|[
literal|0
index|]
decl_stmt|;
name|getModel
argument_list|()
operator|.
name|updateTable
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|newColumns
argument_list|)
expr_stmt|;
name|s
operator|.
name|setOK
argument_list|()
expr_stmt|;
name|s
operator|.
name|respond
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|delete
parameter_list|(
name|Status
name|s
parameter_list|,
name|byte
index|[]
index|[]
name|pathSegments
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|queryMap
parameter_list|)
throws|throws
name|HBaseRestException
block|{
name|TableModel
name|innerModel
init|=
name|getModel
argument_list|()
decl_stmt|;
name|byte
index|[]
name|tableName
decl_stmt|;
name|tableName
operator|=
name|pathSegments
index|[
literal|0
index|]
expr_stmt|;
if|if
condition|(
name|pathSegments
operator|.
name|length
operator|==
literal|1
condition|)
block|{
if|if
condition|(
operator|!
name|innerModel
operator|.
name|delete
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|s
operator|.
name|setBadRequest
argument_list|(
literal|"table does not exist"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|s
operator|.
name|setAccepted
argument_list|()
expr_stmt|;
block|}
name|s
operator|.
name|respond
argument_list|()
expr_stmt|;
block|}
else|else
block|{      }
block|}
block|}
end_class

end_unit

