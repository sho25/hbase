begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2008 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|descriptors
operator|.
name|ScannerIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|exception
operator|.
name|HBaseRestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|serializer
operator|.
name|IRestSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|serializer
operator|.
name|ISerializable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|agilejson
operator|.
name|TOJSON
import|;
end_import

begin_class
specifier|public
class|class
name|Status
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Status
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|statNames
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|statNames
operator|.
name|put
argument_list|(
name|HttpServletResponse
operator|.
name|SC_CONTINUE
argument_list|,
literal|"continue"
argument_list|)
expr_stmt|;
name|statNames
operator|.
name|put
argument_list|(
name|HttpServletResponse
operator|.
name|SC_SWITCHING_PROTOCOLS
argument_list|,
literal|"switching protocols"
argument_list|)
expr_stmt|;
name|statNames
operator|.
name|put
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|,
literal|"ok"
argument_list|)
expr_stmt|;
name|statNames
operator|.
name|put
argument_list|(
name|HttpServletResponse
operator|.
name|SC_CREATED
argument_list|,
literal|"created"
argument_list|)
expr_stmt|;
name|statNames
operator|.
name|put
argument_list|(
name|HttpServletResponse
operator|.
name|SC_ACCEPTED
argument_list|,
literal|"accepted"
argument_list|)
expr_stmt|;
name|statNames
operator|.
name|put
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NON_AUTHORITATIVE_INFORMATION
argument_list|,
literal|"non-authoritative information"
argument_list|)
expr_stmt|;
name|statNames
operator|.
name|put
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NO_CONTENT
argument_list|,
literal|"no content"
argument_list|)
expr_stmt|;
name|statNames
operator|.
name|put
argument_list|(
name|HttpServletResponse
operator|.
name|SC_RESET_CONTENT
argument_list|,
literal|"reset content"
argument_list|)
expr_stmt|;
name|statNames
operator|.
name|put
argument_list|(
name|HttpServletResponse
operator|.
name|SC_PARTIAL_CONTENT
argument_list|,
literal|"partial content"
argument_list|)
expr_stmt|;
name|statNames
operator|.
name|put
argument_list|(
name|HttpServletResponse
operator|.
name|SC_MULTIPLE_CHOICES
argument_list|,
literal|"multiple choices"
argument_list|)
expr_stmt|;
name|statNames
operator|.
name|put
argument_list|(
name|HttpServletResponse
operator|.
name|SC_MOVED_PERMANENTLY
argument_list|,
literal|"moved permanently"
argument_list|)
expr_stmt|;
name|statNames
operator|.
name|put
argument_list|(
name|HttpServletResponse
operator|.
name|SC_MOVED_TEMPORARILY
argument_list|,
literal|"moved temporarily"
argument_list|)
expr_stmt|;
name|statNames
operator|.
name|put
argument_list|(
name|HttpServletResponse
operator|.
name|SC_FOUND
argument_list|,
literal|"found"
argument_list|)
expr_stmt|;
name|statNames
operator|.
name|put
argument_list|(
name|HttpServletResponse
operator|.
name|SC_SEE_OTHER
argument_list|,
literal|"see other"
argument_list|)
expr_stmt|;
name|statNames
operator|.
name|put
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_MODIFIED
argument_list|,
literal|"not modified"
argument_list|)
expr_stmt|;
name|statNames
operator|.
name|put
argument_list|(
name|HttpServletResponse
operator|.
name|SC_USE_PROXY
argument_list|,
literal|"use proxy"
argument_list|)
expr_stmt|;
name|statNames
operator|.
name|put
argument_list|(
name|HttpServletResponse
operator|.
name|SC_TEMPORARY_REDIRECT
argument_list|,
literal|"temporary redirect"
argument_list|)
expr_stmt|;
name|statNames
operator|.
name|put
argument_list|(
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
argument_list|,
literal|"bad request"
argument_list|)
expr_stmt|;
name|statNames
operator|.
name|put
argument_list|(
name|HttpServletResponse
operator|.
name|SC_UNAUTHORIZED
argument_list|,
literal|"unauthorized"
argument_list|)
expr_stmt|;
name|statNames
operator|.
name|put
argument_list|(
name|HttpServletResponse
operator|.
name|SC_FORBIDDEN
argument_list|,
literal|"forbidden"
argument_list|)
expr_stmt|;
name|statNames
operator|.
name|put
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
argument_list|,
literal|"not found"
argument_list|)
expr_stmt|;
name|statNames
operator|.
name|put
argument_list|(
name|HttpServletResponse
operator|.
name|SC_METHOD_NOT_ALLOWED
argument_list|,
literal|"method not allowed"
argument_list|)
expr_stmt|;
name|statNames
operator|.
name|put
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_ACCEPTABLE
argument_list|,
literal|"not acceptable"
argument_list|)
expr_stmt|;
name|statNames
operator|.
name|put
argument_list|(
name|HttpServletResponse
operator|.
name|SC_PROXY_AUTHENTICATION_REQUIRED
argument_list|,
literal|"proxy authentication required"
argument_list|)
expr_stmt|;
name|statNames
operator|.
name|put
argument_list|(
name|HttpServletResponse
operator|.
name|SC_REQUEST_TIMEOUT
argument_list|,
literal|"request timeout"
argument_list|)
expr_stmt|;
name|statNames
operator|.
name|put
argument_list|(
name|HttpServletResponse
operator|.
name|SC_CONFLICT
argument_list|,
literal|"conflict"
argument_list|)
expr_stmt|;
name|statNames
operator|.
name|put
argument_list|(
name|HttpServletResponse
operator|.
name|SC_GONE
argument_list|,
literal|"gone"
argument_list|)
expr_stmt|;
name|statNames
operator|.
name|put
argument_list|(
name|HttpServletResponse
operator|.
name|SC_LENGTH_REQUIRED
argument_list|,
literal|"length required"
argument_list|)
expr_stmt|;
name|statNames
operator|.
name|put
argument_list|(
name|HttpServletResponse
operator|.
name|SC_PRECONDITION_FAILED
argument_list|,
literal|"precondition failed"
argument_list|)
expr_stmt|;
name|statNames
operator|.
name|put
argument_list|(
name|HttpServletResponse
operator|.
name|SC_REQUEST_ENTITY_TOO_LARGE
argument_list|,
literal|"request entity too large"
argument_list|)
expr_stmt|;
name|statNames
operator|.
name|put
argument_list|(
name|HttpServletResponse
operator|.
name|SC_REQUEST_URI_TOO_LONG
argument_list|,
literal|"request uri too long"
argument_list|)
expr_stmt|;
name|statNames
operator|.
name|put
argument_list|(
name|HttpServletResponse
operator|.
name|SC_UNSUPPORTED_MEDIA_TYPE
argument_list|,
literal|"unsupported media type"
argument_list|)
expr_stmt|;
name|statNames
operator|.
name|put
argument_list|(
name|HttpServletResponse
operator|.
name|SC_REQUESTED_RANGE_NOT_SATISFIABLE
argument_list|,
literal|"requested range not satisfiable"
argument_list|)
expr_stmt|;
name|statNames
operator|.
name|put
argument_list|(
name|HttpServletResponse
operator|.
name|SC_EXPECTATION_FAILED
argument_list|,
literal|"expectation failed"
argument_list|)
expr_stmt|;
name|statNames
operator|.
name|put
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|,
literal|"internal server error"
argument_list|)
expr_stmt|;
name|statNames
operator|.
name|put
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_IMPLEMENTED
argument_list|,
literal|"not implemented"
argument_list|)
expr_stmt|;
name|statNames
operator|.
name|put
argument_list|(
name|HttpServletResponse
operator|.
name|SC_BAD_GATEWAY
argument_list|,
literal|"bad gateway"
argument_list|)
expr_stmt|;
name|statNames
operator|.
name|put
argument_list|(
name|HttpServletResponse
operator|.
name|SC_SERVICE_UNAVAILABLE
argument_list|,
literal|"service unavailable"
argument_list|)
expr_stmt|;
name|statNames
operator|.
name|put
argument_list|(
name|HttpServletResponse
operator|.
name|SC_GATEWAY_TIMEOUT
argument_list|,
literal|"gateway timeout"
argument_list|)
expr_stmt|;
name|statNames
operator|.
name|put
argument_list|(
name|HttpServletResponse
operator|.
name|SC_HTTP_VERSION_NOT_SUPPORTED
argument_list|,
literal|"http version not supported"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|int
name|statusCode
decl_stmt|;
specifier|protected
name|HttpServletResponse
name|response
decl_stmt|;
specifier|protected
name|Object
name|message
decl_stmt|;
specifier|protected
name|IRestSerializer
name|serializer
decl_stmt|;
specifier|protected
name|byte
index|[]
index|[]
name|pathSegments
decl_stmt|;
specifier|public
name|int
name|getStatusCode
parameter_list|()
block|{
return|return
name|statusCode
return|;
block|}
annotation|@
name|TOJSON
specifier|public
name|Object
name|getMessage
parameter_list|()
block|{
return|return
name|message
return|;
block|}
specifier|public
specifier|static
class|class
name|StatusMessage
implements|implements
name|ISerializable
block|{
name|int
name|statusCode
decl_stmt|;
name|boolean
name|error
decl_stmt|;
name|Object
name|reason
decl_stmt|;
specifier|public
name|StatusMessage
parameter_list|(
name|int
name|statusCode
parameter_list|,
name|boolean
name|error
parameter_list|,
name|Object
name|o
parameter_list|)
block|{
name|this
operator|.
name|statusCode
operator|=
name|statusCode
expr_stmt|;
name|this
operator|.
name|error
operator|=
name|error
expr_stmt|;
name|reason
operator|=
name|o
expr_stmt|;
block|}
annotation|@
name|TOJSON
specifier|public
name|int
name|getStatusCode
parameter_list|()
block|{
return|return
name|statusCode
return|;
block|}
annotation|@
name|TOJSON
specifier|public
name|boolean
name|getError
parameter_list|()
block|{
return|return
name|error
return|;
block|}
annotation|@
name|TOJSON
specifier|public
name|Object
name|getMessage
parameter_list|()
block|{
return|return
name|reason
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see      * org.apache.hadoop.hbase.rest.xml.IOutputXML#toXML(org.apache.hadoop.hbase      * .rest.serializer.IRestSerializer)      */
specifier|public
name|void
name|restSerialize
parameter_list|(
name|IRestSerializer
name|serializer
parameter_list|)
throws|throws
name|HBaseRestException
block|{
name|serializer
operator|.
name|serializeStatusMessage
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Status
parameter_list|(
name|HttpServletResponse
name|r
parameter_list|,
name|IRestSerializer
name|serializer
parameter_list|,
name|byte
index|[]
index|[]
name|bs
parameter_list|)
block|{
name|this
operator|.
name|setOK
argument_list|()
expr_stmt|;
name|this
operator|.
name|response
operator|=
name|r
expr_stmt|;
name|this
operator|.
name|serializer
operator|=
name|serializer
expr_stmt|;
name|this
operator|.
name|pathSegments
operator|=
name|bs
expr_stmt|;
block|}
comment|// Good Messages
specifier|public
name|void
name|setOK
parameter_list|()
block|{
name|this
operator|.
name|statusCode
operator|=
name|HttpServletResponse
operator|.
name|SC_OK
expr_stmt|;
name|this
operator|.
name|message
operator|=
operator|new
name|StatusMessage
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|,
literal|false
argument_list|,
literal|"success"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setOK
parameter_list|(
name|Object
name|message
parameter_list|)
block|{
name|this
operator|.
name|statusCode
operator|=
name|HttpServletResponse
operator|.
name|SC_OK
expr_stmt|;
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
block|}
specifier|public
name|void
name|setAccepted
parameter_list|()
block|{
name|this
operator|.
name|statusCode
operator|=
name|HttpServletResponse
operator|.
name|SC_ACCEPTED
expr_stmt|;
name|this
operator|.
name|message
operator|=
operator|new
name|StatusMessage
argument_list|(
name|HttpServletResponse
operator|.
name|SC_ACCEPTED
argument_list|,
literal|false
argument_list|,
literal|"success"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setExists
parameter_list|(
name|boolean
name|error
parameter_list|)
block|{
name|this
operator|.
name|statusCode
operator|=
name|HttpServletResponse
operator|.
name|SC_CONFLICT
expr_stmt|;
name|this
operator|.
name|message
operator|=
operator|new
name|StatusMessage
argument_list|(
name|statusCode
argument_list|,
name|error
argument_list|,
literal|"table already exists"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setCreated
parameter_list|()
block|{
name|this
operator|.
name|statusCode
operator|=
name|HttpServletResponse
operator|.
name|SC_CREATED
expr_stmt|;
name|this
operator|.
name|setOK
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setScannerCreated
parameter_list|(
name|ScannerIdentifier
name|scannerIdentifier
parameter_list|)
block|{
name|this
operator|.
name|statusCode
operator|=
name|HttpServletResponse
operator|.
name|SC_OK
expr_stmt|;
name|this
operator|.
name|message
operator|=
name|scannerIdentifier
expr_stmt|;
name|response
operator|.
name|addHeader
argument_list|(
literal|"Location"
argument_list|,
literal|"/"
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|pathSegments
index|[
literal|0
index|]
argument_list|)
operator|+
literal|"/scanner/"
operator|+
name|scannerIdentifier
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Bad Messages
specifier|public
name|void
name|setInternalError
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|this
operator|.
name|statusCode
operator|=
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
expr_stmt|;
name|this
operator|.
name|message
operator|=
operator|new
name|StatusMessage
argument_list|(
name|statusCode
argument_list|,
literal|true
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setNoQueryResults
parameter_list|()
block|{
name|this
operator|.
name|statusCode
operator|=
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
expr_stmt|;
name|this
operator|.
name|message
operator|=
operator|new
name|StatusMessage
argument_list|(
name|statusCode
argument_list|,
literal|true
argument_list|,
literal|"no query results"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setConflict
parameter_list|(
name|Object
name|message
parameter_list|)
block|{
name|this
operator|.
name|statusCode
operator|=
name|HttpServletResponse
operator|.
name|SC_CONFLICT
expr_stmt|;
name|this
operator|.
name|message
operator|=
operator|new
name|StatusMessage
argument_list|(
name|statusCode
argument_list|,
literal|true
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setNotFound
parameter_list|(
name|Object
name|message
parameter_list|)
block|{
name|this
operator|.
name|statusCode
operator|=
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
expr_stmt|;
name|this
operator|.
name|message
operator|=
operator|new
name|StatusMessage
argument_list|(
name|statusCode
argument_list|,
literal|true
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setBadRequest
parameter_list|(
name|Object
name|message
parameter_list|)
block|{
name|this
operator|.
name|statusCode
operator|=
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
expr_stmt|;
name|this
operator|.
name|message
operator|=
operator|new
name|StatusMessage
argument_list|(
name|statusCode
argument_list|,
literal|true
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setNotFound
parameter_list|()
block|{
name|setNotFound
argument_list|(
literal|"Unable to find requested URI"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setMethodNotImplemented
parameter_list|()
block|{
name|this
operator|.
name|statusCode
operator|=
name|HttpServletResponse
operator|.
name|SC_METHOD_NOT_ALLOWED
expr_stmt|;
name|this
operator|.
name|message
operator|=
operator|new
name|StatusMessage
argument_list|(
name|statusCode
argument_list|,
literal|true
argument_list|,
literal|"method not implemented"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setInvalidURI
parameter_list|()
block|{
name|setInvalidURI
argument_list|(
literal|"Invalid URI"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setInvalidURI
parameter_list|(
name|Object
name|message
parameter_list|)
block|{
name|this
operator|.
name|statusCode
operator|=
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
expr_stmt|;
name|this
operator|.
name|message
operator|=
operator|new
name|StatusMessage
argument_list|(
name|statusCode
argument_list|,
literal|true
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setUnsupportedMediaType
parameter_list|(
name|Object
name|message
parameter_list|)
block|{
name|this
operator|.
name|statusCode
operator|=
name|HttpServletResponse
operator|.
name|SC_UNSUPPORTED_MEDIA_TYPE
expr_stmt|;
name|this
operator|.
name|message
operator|=
operator|new
name|StatusMessage
argument_list|(
name|statusCode
argument_list|,
literal|true
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setGone
parameter_list|()
block|{
name|this
operator|.
name|statusCode
operator|=
name|HttpServletResponse
operator|.
name|SC_GONE
expr_stmt|;
name|this
operator|.
name|message
operator|=
operator|new
name|StatusMessage
argument_list|(
name|statusCode
argument_list|,
literal|true
argument_list|,
literal|"item no longer available"
argument_list|)
expr_stmt|;
block|}
comment|// Utility
specifier|public
name|void
name|respond
parameter_list|()
throws|throws
name|HBaseRestException
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|this
operator|.
name|statusCode
argument_list|)
expr_stmt|;
name|this
operator|.
name|serializer
operator|.
name|writeOutput
argument_list|(
name|this
operator|.
name|message
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

