begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|BatchUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|znerd
operator|.
name|xmlenc
operator|.
name|XMLOutputter
import|;
end_import

begin_comment
comment|/**  * TableHandler fields all requests that deal with an individual table.  * That means all requests that start with /api/[table_name]/... go to   * this handler.  */
end_comment

begin_class
specifier|public
class|class
name|TableHandler
extends|extends
name|GenericHandler
block|{
specifier|public
name|TableHandler
parameter_list|(
name|HBaseConfiguration
name|conf
parameter_list|,
name|HBaseAdmin
name|admin
parameter_list|)
throws|throws
name|ServletException
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|admin
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|doGet
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|String
index|[]
name|pathSegments
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
comment|// if it's just table name, return the metadata
if|if
condition|(
name|pathSegments
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|getTableMetadata
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|pathSegments
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|pathSegments
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|pathSegments
index|[
literal|1
index|]
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
name|REGIONS
argument_list|)
condition|)
block|{
comment|// get a region list
name|getTableRegions
argument_list|(
name|table
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pathSegments
index|[
literal|1
index|]
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
name|ROW
argument_list|)
condition|)
block|{
comment|// get a row
name|getRow
argument_list|(
name|table
argument_list|,
name|request
argument_list|,
name|response
argument_list|,
name|pathSegments
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doNotFound
argument_list|(
name|response
argument_list|,
literal|"Not handled in TableHandler"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|doPost
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|String
index|[]
name|pathSegments
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|putRow
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|pathSegments
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|doPut
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|String
index|[]
name|pathSegments
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|doPost
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|pathSegments
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|doDelete
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|String
index|[]
name|pathSegments
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|deleteRow
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|pathSegments
argument_list|)
expr_stmt|;
block|}
comment|/*    * @param request    * @param response    * @param pathSegments info path split on the '/' character.  First segment    * is the tablename, second is 'row', and third is the row id.    * @throws IOException    * Retrieve a row in one of several output formats.    */
specifier|private
name|void
name|getRow
parameter_list|(
name|HTable
name|table
parameter_list|,
specifier|final
name|HttpServletRequest
name|request
parameter_list|,
specifier|final
name|HttpServletResponse
name|response
parameter_list|,
specifier|final
name|String
index|[]
name|pathSegments
parameter_list|)
throws|throws
name|IOException
block|{
comment|// pull the row key out of the path
name|String
name|row
init|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|pathSegments
index|[
literal|2
index|]
argument_list|,
name|HConstants
operator|.
name|UTF8_ENCODING
argument_list|)
decl_stmt|;
name|String
name|timestampStr
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|pathSegments
operator|.
name|length
operator|==
literal|4
condition|)
block|{
comment|// A timestamp has been supplied.
name|timestampStr
operator|=
name|pathSegments
index|[
literal|3
index|]
expr_stmt|;
if|if
condition|(
name|timestampStr
operator|.
name|equals
argument_list|(
literal|"timestamps"
argument_list|)
condition|)
block|{
comment|// Not supported in hbase just yet. TODO
name|doMethodNotAllowed
argument_list|(
name|response
argument_list|,
literal|"Not yet supported by hbase"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|String
index|[]
name|columns
init|=
name|request
operator|.
name|getParameterValues
argument_list|(
name|COLUMN
argument_list|)
decl_stmt|;
if|if
condition|(
name|columns
operator|==
literal|null
operator|||
name|columns
operator|.
name|length
operator|==
literal|0
condition|)
block|{
comment|// They want full row returned.
comment|// Presumption is that this.table has already been focused on target table.
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Cell
argument_list|>
name|result
init|=
name|timestampStr
operator|==
literal|null
condition|?
name|table
operator|.
name|getRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row
argument_list|)
argument_list|)
else|:
name|table
operator|.
name|getRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|timestampStr
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
operator|||
name|result
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|doNotFound
argument_list|(
name|response
argument_list|,
literal|"Row not found!"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
name|ContentType
operator|.
name|getContentType
argument_list|(
name|request
operator|.
name|getHeader
argument_list|(
name|ACCEPT
argument_list|)
argument_list|)
condition|)
block|{
case|case
name|XML
case|:
name|outputRowXml
argument_list|(
name|response
argument_list|,
name|result
argument_list|)
expr_stmt|;
break|break;
case|case
name|MIME
case|:
default|default:
name|doNotAcceptable
argument_list|(
name|response
argument_list|,
literal|"Unsupported Accept Header Content: "
operator|+
name|request
operator|.
name|getHeader
argument_list|(
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Cell
argument_list|>
name|prefiltered_result
init|=
name|table
operator|.
name|getRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefiltered_result
operator|==
literal|null
operator|||
name|prefiltered_result
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|doNotFound
argument_list|(
name|response
argument_list|,
literal|"Row not found!"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// create a Set from the columns requested so we can
comment|// efficiently filter the actual found columns
name|Set
argument_list|<
name|String
argument_list|>
name|requested_columns_set
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|requested_columns_set
operator|.
name|add
argument_list|(
name|columns
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// output map that will contain the filtered results
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Cell
argument_list|>
name|m
init|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Cell
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
comment|// get an array of all the columns retrieved
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|columns_retrieved
init|=
name|prefiltered_result
operator|.
name|keySet
argument_list|()
decl_stmt|;
comment|// copy over those cells with requested column names
for|for
control|(
name|byte
index|[]
name|current_column
range|:
name|columns_retrieved
control|)
block|{
if|if
condition|(
name|requested_columns_set
operator|.
name|contains
argument_list|(
name|current_column
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|m
operator|.
name|put
argument_list|(
name|current_column
argument_list|,
name|prefiltered_result
operator|.
name|get
argument_list|(
name|current_column
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
switch|switch
condition|(
name|ContentType
operator|.
name|getContentType
argument_list|(
name|request
operator|.
name|getHeader
argument_list|(
name|ACCEPT
argument_list|)
argument_list|)
condition|)
block|{
case|case
name|XML
case|:
name|outputRowXml
argument_list|(
name|response
argument_list|,
name|m
argument_list|)
expr_stmt|;
break|break;
case|case
name|MIME
case|:
default|default:
name|doNotAcceptable
argument_list|(
name|response
argument_list|,
literal|"Unsupported Accept Header Content: "
operator|+
name|request
operator|.
name|getHeader
argument_list|(
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/*    * Output a row encoded as XML.    * @param response    * @param result    * @throws IOException    */
specifier|private
name|void
name|outputRowXml
parameter_list|(
specifier|final
name|HttpServletResponse
name|response
parameter_list|,
specifier|final
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Cell
argument_list|>
name|result
parameter_list|)
throws|throws
name|IOException
block|{
name|setResponseHeader
argument_list|(
name|response
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|?
literal|200
else|:
literal|204
argument_list|,
name|ContentType
operator|.
name|XML
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|XMLOutputter
name|outputter
init|=
name|getXMLOutputter
argument_list|(
name|response
operator|.
name|getWriter
argument_list|()
argument_list|)
decl_stmt|;
name|outputter
operator|.
name|startTag
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|outputColumnsXml
argument_list|(
name|outputter
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|outputter
operator|.
name|endTag
argument_list|()
expr_stmt|;
name|outputter
operator|.
name|endDocument
argument_list|()
expr_stmt|;
name|outputter
operator|.
name|getWriter
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/*    * @param response    * @param result    * Output the results contained in result as a multipart/related response.    */
comment|// private void outputRowMime(final HttpServletResponse response,
comment|//     final Map<Text, Cell> result)
comment|// throws IOException {
comment|//   response.setStatus(result.size()> 0? 200: 204);
comment|//   // This code ties me to the jetty server.
comment|//   MultiPartResponse mpr = new MultiPartResponse(response);
comment|//   // Content type should look like this for multipart:
comment|//   // Content-type: multipart/related;start="<rootpart*94ebf1e6-7eb5-43f1-85f4-2615fc40c5d6@example.jaxws.sun.com>";type="application/xop+xml";boundary="uuid:94ebf1e6-7eb5-43f1-85f4-2615fc40c5d6";start-info="text/xml"
comment|//   String ct = ContentType.MIME.toString() + ";charset=\"UTF-8\";boundary=\"" +
comment|//     mpr.getBoundary() + "\"";
comment|//   // Setting content type is broken.  I'm unable to set parameters on the
comment|//   // content-type; They get stripped.  Can't set boundary, etc.
comment|//   // response.addHeader("Content-Type", ct);
comment|//   response.setContentType(ct);
comment|//   outputColumnsMime(mpr, result);
comment|//   mpr.close();
comment|// }
comment|/*    * @param request    * @param response    * @param pathSegments    * Do a put based on the client request.    */
specifier|private
name|void
name|putRow
parameter_list|(
specifier|final
name|HttpServletRequest
name|request
parameter_list|,
specifier|final
name|HttpServletResponse
name|response
parameter_list|,
specifier|final
name|String
index|[]
name|pathSegments
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|pathSegments
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
comment|// pull the row key out of the path
name|String
name|row
init|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|pathSegments
index|[
literal|2
index|]
argument_list|,
name|HConstants
operator|.
name|UTF8_ENCODING
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|ContentType
operator|.
name|getContentType
argument_list|(
name|request
operator|.
name|getHeader
argument_list|(
name|CONTENT_TYPE
argument_list|)
argument_list|)
condition|)
block|{
case|case
name|XML
case|:
name|putRowXml
argument_list|(
name|table
argument_list|,
name|row
argument_list|,
name|request
argument_list|,
name|response
argument_list|,
name|pathSegments
argument_list|)
expr_stmt|;
break|break;
case|case
name|MIME
case|:
name|doNotAcceptable
argument_list|(
name|response
argument_list|,
literal|"Don't support multipart/related yet..."
argument_list|)
expr_stmt|;
break|break;
default|default:
name|doNotAcceptable
argument_list|(
name|response
argument_list|,
literal|"Unsupported Accept Header Content: "
operator|+
name|request
operator|.
name|getHeader
argument_list|(
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * @param request    * @param response    * @param pathSegments    * Decode supplied XML and do a put to Hbase.    */
specifier|private
name|void
name|putRowXml
parameter_list|(
name|HTable
name|table
parameter_list|,
name|String
name|row
parameter_list|,
specifier|final
name|HttpServletRequest
name|request
parameter_list|,
specifier|final
name|HttpServletResponse
name|response
parameter_list|,
specifier|final
name|String
index|[]
name|pathSegments
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
name|DocumentBuilderFactory
name|docBuilderFactory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
comment|//ignore all comments inside the xml file
name|docBuilderFactory
operator|.
name|setIgnoringComments
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|DocumentBuilder
name|builder
init|=
literal|null
decl_stmt|;
name|Document
name|doc
init|=
literal|null
decl_stmt|;
name|String
name|timestamp
init|=
name|pathSegments
operator|.
name|length
operator|>=
literal|4
condition|?
name|pathSegments
index|[
literal|3
index|]
else|:
literal|null
decl_stmt|;
try|try
block|{
name|builder
operator|=
name|docBuilderFactory
operator|.
name|newDocumentBuilder
argument_list|()
expr_stmt|;
name|doc
operator|=
name|builder
operator|.
name|parse
argument_list|(
name|request
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|BatchUpdate
name|batchUpdate
decl_stmt|;
try|try
block|{
comment|// start an update
name|Text
name|key
init|=
operator|new
name|Text
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|batchUpdate
operator|=
name|timestamp
operator|==
literal|null
condition|?
operator|new
name|BatchUpdate
argument_list|(
name|key
argument_list|)
else|:
operator|new
name|BatchUpdate
argument_list|(
name|key
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|timestamp
argument_list|)
argument_list|)
expr_stmt|;
comment|// set the columns from the xml
name|NodeList
name|columns
init|=
name|doc
operator|.
name|getElementsByTagName
argument_list|(
literal|"column"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
comment|// get the current column element we're working on
name|Element
name|column
init|=
operator|(
name|Element
operator|)
name|columns
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// extract the name and value children
name|Node
name|name_node
init|=
name|column
operator|.
name|getElementsByTagName
argument_list|(
literal|"name"
argument_list|)
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Text
name|name
init|=
operator|new
name|Text
argument_list|(
name|name_node
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
argument_list|)
decl_stmt|;
name|Node
name|value_node
init|=
name|column
operator|.
name|getElementsByTagName
argument_list|(
literal|"value"
argument_list|)
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
comment|// for some reason there's no value here. probably indicates that
comment|// the consumer passed a null as the cell value.
if|if
condition|(
name|value_node
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
operator|&&
name|value_node
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// decode the base64'd value
name|value
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Base64
operator|.
name|decode
argument_list|(
name|value_node
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// put the value
name|batchUpdate
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|// commit the update
name|table
operator|.
name|commit
argument_list|(
name|batchUpdate
argument_list|)
expr_stmt|;
comment|// respond with a 200
name|response
operator|.
name|setStatus
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/*    * Return region offsets.    * @param request    * @param response    */
specifier|private
name|void
name|getTableRegions
parameter_list|(
name|HTable
name|table
parameter_list|,
specifier|final
name|HttpServletRequest
name|request
parameter_list|,
specifier|final
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Presumption is that this.table has already been focused on target table.
name|byte
index|[]
index|[]
name|startKeys
init|=
name|table
operator|.
name|getStartKeys
argument_list|()
decl_stmt|;
comment|// Presumption is that this.table has already been set against target table
switch|switch
condition|(
name|ContentType
operator|.
name|getContentType
argument_list|(
name|request
operator|.
name|getHeader
argument_list|(
name|ACCEPT
argument_list|)
argument_list|)
condition|)
block|{
case|case
name|XML
case|:
name|setResponseHeader
argument_list|(
name|response
argument_list|,
name|startKeys
operator|.
name|length
operator|>
literal|0
condition|?
literal|200
else|:
literal|204
argument_list|,
name|ContentType
operator|.
name|XML
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|XMLOutputter
name|outputter
init|=
name|getXMLOutputter
argument_list|(
name|response
operator|.
name|getWriter
argument_list|()
argument_list|)
decl_stmt|;
name|outputter
operator|.
name|startTag
argument_list|(
literal|"regions"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|startKeys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|doElement
argument_list|(
name|outputter
argument_list|,
literal|"region"
argument_list|,
name|startKeys
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|outputter
operator|.
name|endTag
argument_list|()
expr_stmt|;
name|outputter
operator|.
name|endDocument
argument_list|()
expr_stmt|;
name|outputter
operator|.
name|getWriter
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
break|break;
case|case
name|PLAIN
case|:
name|setResponseHeader
argument_list|(
name|response
argument_list|,
name|startKeys
operator|.
name|length
operator|>
literal|0
condition|?
literal|200
else|:
literal|204
argument_list|,
name|ContentType
operator|.
name|PLAIN
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
name|response
operator|.
name|getWriter
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|startKeys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// TODO: Add in the server location.  Is it needed?
name|out
operator|.
name|print
argument_list|(
name|startKeys
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
break|break;
case|case
name|MIME
case|:
default|default:
name|doNotAcceptable
argument_list|(
name|response
argument_list|,
literal|"Unsupported Accept Header Content: "
operator|+
name|request
operator|.
name|getHeader
argument_list|(
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Get table metadata.    * @param request    * @param response    * @param tableName    * @throws IOException    */
specifier|private
name|void
name|getTableMetadata
parameter_list|(
specifier|final
name|HttpServletRequest
name|request
parameter_list|,
specifier|final
name|HttpServletResponse
name|response
parameter_list|,
specifier|final
name|String
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|HTableDescriptor
index|[]
name|tables
init|=
name|this
operator|.
name|admin
operator|.
name|listTables
argument_list|()
decl_stmt|;
name|HTableDescriptor
name|descriptor
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tables
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|tables
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|descriptor
operator|=
name|tables
index|[
name|i
index|]
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|descriptor
operator|==
literal|null
condition|)
block|{
name|doNotFound
argument_list|(
name|response
argument_list|,
literal|"Table not found!"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Presumption is that this.table has already been set against target table
name|ContentType
name|type
init|=
name|ContentType
operator|.
name|getContentType
argument_list|(
name|request
operator|.
name|getHeader
argument_list|(
name|ACCEPT
argument_list|)
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|XML
case|:
name|setResponseHeader
argument_list|(
name|response
argument_list|,
literal|200
argument_list|,
name|ContentType
operator|.
name|XML
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|XMLOutputter
name|outputter
init|=
name|getXMLOutputter
argument_list|(
name|response
operator|.
name|getWriter
argument_list|()
argument_list|)
decl_stmt|;
name|outputter
operator|.
name|startTag
argument_list|(
literal|"table"
argument_list|)
expr_stmt|;
name|doElement
argument_list|(
name|outputter
argument_list|,
literal|"name"
argument_list|,
name|descriptor
operator|.
name|getName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|outputter
operator|.
name|startTag
argument_list|(
literal|"columnfamilies"
argument_list|)
expr_stmt|;
for|for
control|(
name|HColumnDescriptor
name|e
range|:
name|descriptor
operator|.
name|getFamilies
argument_list|()
control|)
block|{
name|outputter
operator|.
name|startTag
argument_list|(
literal|"columnfamily"
argument_list|)
expr_stmt|;
name|doElement
argument_list|(
name|outputter
argument_list|,
literal|"name"
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|e
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|doElement
argument_list|(
name|outputter
argument_list|,
literal|"compression"
argument_list|,
name|e
operator|.
name|getCompression
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|doElement
argument_list|(
name|outputter
argument_list|,
literal|"bloomfilter"
argument_list|,
name|e
operator|.
name|getBloomFilter
argument_list|()
operator|==
literal|null
condition|?
literal|"NONE"
else|:
name|e
operator|.
name|getBloomFilter
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|doElement
argument_list|(
name|outputter
argument_list|,
literal|"max-versions"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|e
operator|.
name|getMaxVersions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|doElement
argument_list|(
name|outputter
argument_list|,
literal|"maximum-cell-size"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|e
operator|.
name|getMaxValueLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|outputter
operator|.
name|endTag
argument_list|()
expr_stmt|;
block|}
name|outputter
operator|.
name|endTag
argument_list|()
expr_stmt|;
name|outputter
operator|.
name|endTag
argument_list|()
expr_stmt|;
name|outputter
operator|.
name|endDocument
argument_list|()
expr_stmt|;
name|outputter
operator|.
name|getWriter
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
break|break;
case|case
name|PLAIN
case|:
name|setResponseHeader
argument_list|(
name|response
argument_list|,
literal|200
argument_list|,
name|ContentType
operator|.
name|PLAIN
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
name|response
operator|.
name|getWriter
argument_list|()
decl_stmt|;
name|out
operator|.
name|print
argument_list|(
name|descriptor
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
break|break;
case|case
name|MIME
case|:
default|default:
name|doNotAcceptable
argument_list|(
name|response
argument_list|,
literal|"Unsupported Accept Header Content: "
operator|+
name|request
operator|.
name|getHeader
argument_list|(
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*    * @param request    * @param response    * @param pathSegments    * Delete some or all cells for a row.    */
specifier|private
name|void
name|deleteRow
parameter_list|(
specifier|final
name|HttpServletRequest
name|request
parameter_list|,
specifier|final
name|HttpServletResponse
name|response
parameter_list|,
specifier|final
name|String
index|[]
name|pathSegments
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
comment|// grab the table we're operating on
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|getTableName
argument_list|(
name|pathSegments
argument_list|)
argument_list|)
decl_stmt|;
comment|// pull the row key out of the path
name|String
name|row
init|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|pathSegments
index|[
literal|2
index|]
argument_list|,
name|HConstants
operator|.
name|UTF8_ENCODING
argument_list|)
decl_stmt|;
name|Text
name|key
init|=
operator|new
name|Text
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|String
index|[]
name|columns
init|=
name|request
operator|.
name|getParameterValues
argument_list|(
name|COLUMN
argument_list|)
decl_stmt|;
comment|// hack - we'll actually test for the presence of the timestamp parameter
comment|// eventually
name|boolean
name|timestamp_present
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|timestamp_present
condition|)
block|{
comment|// do a timestamp-aware delete
name|doMethodNotAllowed
argument_list|(
name|response
argument_list|,
literal|"DELETE with a timestamp not implemented!"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// ignore timestamps
if|if
condition|(
name|columns
operator|==
literal|null
operator|||
name|columns
operator|.
name|length
operator|==
literal|0
condition|)
block|{
comment|// retrieve all the columns
name|doMethodNotAllowed
argument_list|(
name|response
argument_list|,
literal|"DELETE without specified columns not implemented!"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// delete each column in turn
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|table
operator|.
name|deleteAll
argument_list|(
name|key
argument_list|,
operator|new
name|Text
argument_list|(
name|columns
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|response
operator|.
name|setStatus
argument_list|(
literal|202
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

