begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
operator|.
name|CompressionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|znerd
operator|.
name|xmlenc
operator|.
name|XMLOutputter
import|;
end_import

begin_comment
comment|/**  * TableHandler fields all requests that deal with an individual table.  * That means all requests that start with /api/[table_name]/... go to   * this handler.  */
end_comment

begin_class
specifier|public
class|class
name|TableHandler
extends|extends
name|GenericHandler
block|{
specifier|public
specifier|static
specifier|final
name|String
name|DISABLE
init|=
literal|"disable"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ENABLE
init|=
literal|"enable"
decl_stmt|;
specifier|public
name|TableHandler
parameter_list|(
name|HBaseConfiguration
name|conf
parameter_list|,
name|HBaseAdmin
name|admin
parameter_list|)
throws|throws
name|ServletException
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|admin
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|doGet
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|String
index|[]
name|pathSegments
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
comment|// if it's just table name, return the metadata
if|if
condition|(
name|pathSegments
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|getTableMetadata
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|pathSegments
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|pathSegments
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|pathSegments
index|[
literal|1
index|]
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
name|REGIONS
argument_list|)
condition|)
block|{
comment|// get a region list
name|getTableRegions
argument_list|(
name|table
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doNotFound
argument_list|(
name|response
argument_list|,
literal|"Not handled in TableHandler"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|doPost
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|String
index|[]
name|pathSegments
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
if|if
condition|(
name|pathSegments
operator|.
name|length
operator|==
literal|0
operator|||
name|pathSegments
index|[
literal|0
index|]
operator|.
name|length
argument_list|()
operator|<=
literal|0
condition|)
block|{
comment|// if it's a creation operation
name|putTable
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|pathSegments
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// if it's a disable operation or enable operation
name|String
name|tableName
init|=
name|pathSegments
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|pathSegments
index|[
literal|1
index|]
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
name|DISABLE
argument_list|)
condition|)
block|{
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pathSegments
index|[
literal|1
index|]
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
name|ENABLE
argument_list|)
condition|)
block|{
name|admin
operator|.
name|enableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|setStatus
argument_list|(
literal|202
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|doPut
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|String
index|[]
name|pathSegments
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|updateTable
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|pathSegments
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|doDelete
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|String
index|[]
name|pathSegments
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|deleteTable
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|pathSegments
argument_list|)
expr_stmt|;
block|}
comment|/*    * Return region offsets.    * @param request    * @param response    */
specifier|private
name|void
name|getTableRegions
parameter_list|(
name|HTable
name|table
parameter_list|,
specifier|final
name|HttpServletRequest
name|request
parameter_list|,
specifier|final
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Presumption is that this.table has already been focused on target table.
name|byte
index|[]
index|[]
name|startKeys
init|=
name|table
operator|.
name|getStartKeys
argument_list|()
decl_stmt|;
comment|// Presumption is that this.table has already been set against target table
switch|switch
condition|(
name|ContentType
operator|.
name|getContentType
argument_list|(
name|request
operator|.
name|getHeader
argument_list|(
name|ACCEPT
argument_list|)
argument_list|)
condition|)
block|{
case|case
name|XML
case|:
name|setResponseHeader
argument_list|(
name|response
argument_list|,
name|startKeys
operator|.
name|length
operator|>
literal|0
condition|?
literal|200
else|:
literal|204
argument_list|,
name|ContentType
operator|.
name|XML
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|XMLOutputter
name|outputter
init|=
name|getXMLOutputter
argument_list|(
name|response
operator|.
name|getWriter
argument_list|()
argument_list|)
decl_stmt|;
name|outputter
operator|.
name|startTag
argument_list|(
literal|"regions"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|startKeys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|doElement
argument_list|(
name|outputter
argument_list|,
literal|"region"
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|startKeys
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|outputter
operator|.
name|endTag
argument_list|()
expr_stmt|;
name|outputter
operator|.
name|endDocument
argument_list|()
expr_stmt|;
name|outputter
operator|.
name|getWriter
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
break|break;
case|case
name|PLAIN
case|:
name|setResponseHeader
argument_list|(
name|response
argument_list|,
name|startKeys
operator|.
name|length
operator|>
literal|0
condition|?
literal|200
else|:
literal|204
argument_list|,
name|ContentType
operator|.
name|PLAIN
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
name|response
operator|.
name|getWriter
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|startKeys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// TODO: Add in the server location.  Is it needed?
name|out
operator|.
name|print
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|startKeys
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
break|break;
case|case
name|MIME
case|:
default|default:
name|doNotAcceptable
argument_list|(
name|response
argument_list|,
literal|"Unsupported Accept Header Content: "
operator|+
name|request
operator|.
name|getHeader
argument_list|(
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Get table metadata.    * @param request    * @param response    * @param tableName    * @throws IOException    */
specifier|private
name|void
name|getTableMetadata
parameter_list|(
specifier|final
name|HttpServletRequest
name|request
parameter_list|,
specifier|final
name|HttpServletResponse
name|response
parameter_list|,
specifier|final
name|String
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|HTableDescriptor
index|[]
name|tables
init|=
name|this
operator|.
name|admin
operator|.
name|listTables
argument_list|()
decl_stmt|;
name|HTableDescriptor
name|descriptor
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tables
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|Bytes
operator|.
name|toString
argument_list|(
name|tables
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|descriptor
operator|=
name|tables
index|[
name|i
index|]
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|descriptor
operator|==
literal|null
condition|)
block|{
name|doNotFound
argument_list|(
name|response
argument_list|,
literal|"Table not found!"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Presumption is that this.table has already been set against target table
name|ContentType
name|type
init|=
name|ContentType
operator|.
name|getContentType
argument_list|(
name|request
operator|.
name|getHeader
argument_list|(
name|ACCEPT
argument_list|)
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|XML
case|:
name|setResponseHeader
argument_list|(
name|response
argument_list|,
literal|200
argument_list|,
name|ContentType
operator|.
name|XML
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|XMLOutputter
name|outputter
init|=
name|getXMLOutputter
argument_list|(
name|response
operator|.
name|getWriter
argument_list|()
argument_list|)
decl_stmt|;
name|outputter
operator|.
name|startTag
argument_list|(
literal|"table"
argument_list|)
expr_stmt|;
name|doElement
argument_list|(
name|outputter
argument_list|,
literal|"name"
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|descriptor
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|outputter
operator|.
name|startTag
argument_list|(
literal|"columnfamilies"
argument_list|)
expr_stmt|;
for|for
control|(
name|HColumnDescriptor
name|e
range|:
name|descriptor
operator|.
name|getFamilies
argument_list|()
control|)
block|{
name|outputter
operator|.
name|startTag
argument_list|(
literal|"columnfamily"
argument_list|)
expr_stmt|;
name|doElement
argument_list|(
name|outputter
argument_list|,
literal|"name"
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|e
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|doElement
argument_list|(
name|outputter
argument_list|,
literal|"compression"
argument_list|,
name|e
operator|.
name|getCompression
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|doElement
argument_list|(
name|outputter
argument_list|,
literal|"bloomfilter"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|e
operator|.
name|isBloomfilter
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|doElement
argument_list|(
name|outputter
argument_list|,
literal|"max-versions"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|e
operator|.
name|getMaxVersions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|doElement
argument_list|(
name|outputter
argument_list|,
literal|"maximum-cell-size"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|e
operator|.
name|getMaxValueLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|outputter
operator|.
name|endTag
argument_list|()
expr_stmt|;
block|}
name|outputter
operator|.
name|endTag
argument_list|()
expr_stmt|;
name|outputter
operator|.
name|endTag
argument_list|()
expr_stmt|;
name|outputter
operator|.
name|endDocument
argument_list|()
expr_stmt|;
name|outputter
operator|.
name|getWriter
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
break|break;
case|case
name|PLAIN
case|:
name|setResponseHeader
argument_list|(
name|response
argument_list|,
literal|200
argument_list|,
name|ContentType
operator|.
name|PLAIN
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
name|response
operator|.
name|getWriter
argument_list|()
decl_stmt|;
name|out
operator|.
name|print
argument_list|(
name|descriptor
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
break|break;
case|case
name|MIME
case|:
default|default:
name|doNotAcceptable
argument_list|(
name|response
argument_list|,
literal|"Unsupported Accept Header Content: "
operator|+
name|request
operator|.
name|getHeader
argument_list|(
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|putTable
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|String
index|[]
name|pathSegments
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
switch|switch
condition|(
name|ContentType
operator|.
name|getContentType
argument_list|(
name|request
operator|.
name|getHeader
argument_list|(
name|CONTENT_TYPE
argument_list|)
argument_list|)
condition|)
block|{
case|case
name|XML
case|:
name|putTableXml
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|pathSegments
argument_list|)
expr_stmt|;
break|break;
case|case
name|MIME
case|:
name|doNotAcceptable
argument_list|(
name|response
argument_list|,
literal|"Don't support multipart/related yet..."
argument_list|)
expr_stmt|;
break|break;
default|default:
name|doNotAcceptable
argument_list|(
name|response
argument_list|,
literal|"Unsupported Accept Header Content: "
operator|+
name|request
operator|.
name|getHeader
argument_list|(
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|updateTable
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|String
index|[]
name|pathSegments
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
switch|switch
condition|(
name|ContentType
operator|.
name|getContentType
argument_list|(
name|request
operator|.
name|getHeader
argument_list|(
name|CONTENT_TYPE
argument_list|)
argument_list|)
condition|)
block|{
case|case
name|XML
case|:
name|updateTableXml
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|pathSegments
argument_list|)
expr_stmt|;
break|break;
case|case
name|MIME
case|:
name|doNotAcceptable
argument_list|(
name|response
argument_list|,
literal|"Don't support multipart/related yet..."
argument_list|)
expr_stmt|;
break|break;
default|default:
name|doNotAcceptable
argument_list|(
name|response
argument_list|,
literal|"Unsupported Accept Header Content: "
operator|+
name|request
operator|.
name|getHeader
argument_list|(
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|deleteTable
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|String
index|[]
name|pathSegments
parameter_list|)
throws|throws
name|ServletException
block|{
try|try
block|{
name|String
name|tableName
init|=
name|pathSegments
index|[
literal|0
index|]
decl_stmt|;
name|String
index|[]
name|column_params
init|=
name|request
operator|.
name|getParameterValues
argument_list|(
name|COLUMN
argument_list|)
decl_stmt|;
if|if
condition|(
name|column_params
operator|!=
literal|null
operator|&&
name|column_params
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|String
name|column
range|:
name|column_params
control|)
block|{
name|admin
operator|.
name|deleteColumn
argument_list|(
name|tableName
argument_list|,
name|makeColumnName
argument_list|(
name|column
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|admin
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|setStatus
argument_list|(
literal|202
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|putTableXml
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|String
index|[]
name|pathSegments
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
name|DocumentBuilderFactory
name|docBuilderFactory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
comment|// ignore all comments inside the xml file
name|docBuilderFactory
operator|.
name|setIgnoringComments
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|DocumentBuilder
name|builder
init|=
literal|null
decl_stmt|;
name|Document
name|doc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|builder
operator|=
name|docBuilderFactory
operator|.
name|newDocumentBuilder
argument_list|()
expr_stmt|;
name|doc
operator|=
name|builder
operator|.
name|parse
argument_list|(
name|request
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
name|e
argument_list|)
throw|;
block|}
try|try
block|{
name|Node
name|name_node
init|=
name|doc
operator|.
name|getElementsByTagName
argument_list|(
literal|"name"
argument_list|)
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|table_name
init|=
name|name_node
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|table_name
argument_list|)
decl_stmt|;
name|NodeList
name|columnfamily_nodes
init|=
name|doc
operator|.
name|getElementsByTagName
argument_list|(
literal|"columnfamily"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columnfamily_nodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Element
name|columnfamily
init|=
operator|(
name|Element
operator|)
name|columnfamily_nodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|putColumnFamilyXml
argument_list|(
name|columnfamily
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|admin
operator|.
name|createTable
argument_list|(
name|htd
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|updateTableXml
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|String
index|[]
name|pathSegments
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
name|DocumentBuilderFactory
name|docBuilderFactory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
comment|// ignore all comments inside the xml file
name|docBuilderFactory
operator|.
name|setIgnoringComments
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|DocumentBuilder
name|builder
init|=
literal|null
decl_stmt|;
name|Document
name|doc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|builder
operator|=
name|docBuilderFactory
operator|.
name|newDocumentBuilder
argument_list|()
expr_stmt|;
name|doc
operator|=
name|builder
operator|.
name|parse
argument_list|(
name|request
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
name|e
argument_list|)
throw|;
block|}
try|try
block|{
name|String
name|tableName
init|=
name|pathSegments
index|[
literal|0
index|]
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
name|admin
operator|.
name|getTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|NodeList
name|columnfamily_nodes
init|=
name|doc
operator|.
name|getElementsByTagName
argument_list|(
literal|"columnfamily"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columnfamily_nodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Element
name|columnfamily
init|=
operator|(
name|Element
operator|)
name|columnfamily_nodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|hcd
init|=
name|putColumnFamilyXml
argument_list|(
name|columnfamily
argument_list|)
decl_stmt|;
if|if
condition|(
name|htd
operator|.
name|hasFamily
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|hcd
operator|.
name|getNameAsString
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|admin
operator|.
name|modifyColumn
argument_list|(
name|tableName
argument_list|,
name|hcd
operator|.
name|getNameAsString
argument_list|()
argument_list|,
name|hcd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|admin
operator|.
name|addColumn
argument_list|(
name|tableName
argument_list|,
name|hcd
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|HColumnDescriptor
name|putColumnFamilyXml
parameter_list|(
name|Element
name|columnfamily
parameter_list|)
block|{
name|Node
name|name_node
init|=
name|columnfamily
operator|.
name|getElementsByTagName
argument_list|(
literal|"name"
argument_list|)
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|colname
init|=
name|makeColumnName
argument_list|(
name|name_node
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|max_versions
init|=
name|HColumnDescriptor
operator|.
name|DEFAULT_VERSIONS
decl_stmt|;
name|NodeList
name|max_versions_list
init|=
name|columnfamily
operator|.
name|getElementsByTagName
argument_list|(
literal|"max-versions"
argument_list|)
decl_stmt|;
if|if
condition|(
name|max_versions_list
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|max_versions
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|max_versions_list
operator|.
name|item
argument_list|(
literal|0
argument_list|)
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|CompressionType
name|compression
init|=
name|HColumnDescriptor
operator|.
name|DEFAULT_COMPRESSION
decl_stmt|;
name|NodeList
name|compression_list
init|=
name|columnfamily
operator|.
name|getElementsByTagName
argument_list|(
literal|"compression"
argument_list|)
decl_stmt|;
if|if
condition|(
name|compression_list
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|compression
operator|=
name|CompressionType
operator|.
name|valueOf
argument_list|(
name|compression_list
operator|.
name|item
argument_list|(
literal|0
argument_list|)
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|boolean
name|in_memory
init|=
name|HColumnDescriptor
operator|.
name|DEFAULT_IN_MEMORY
decl_stmt|;
name|NodeList
name|in_memory_list
init|=
name|columnfamily
operator|.
name|getElementsByTagName
argument_list|(
literal|"in-memory"
argument_list|)
decl_stmt|;
if|if
condition|(
name|in_memory_list
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|in_memory
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|in_memory_list
operator|.
name|item
argument_list|(
literal|0
argument_list|)
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|boolean
name|block_cache
init|=
name|HColumnDescriptor
operator|.
name|DEFAULT_BLOCKCACHE
decl_stmt|;
name|NodeList
name|block_cache_list
init|=
name|columnfamily
operator|.
name|getElementsByTagName
argument_list|(
literal|"block-cache"
argument_list|)
decl_stmt|;
if|if
condition|(
name|block_cache_list
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|block_cache
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|block_cache_list
operator|.
name|item
argument_list|(
literal|0
argument_list|)
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|max_cell_size
init|=
name|HColumnDescriptor
operator|.
name|DEFAULT_LENGTH
decl_stmt|;
name|NodeList
name|max_cell_size_list
init|=
name|columnfamily
operator|.
name|getElementsByTagName
argument_list|(
literal|"max-cell-size"
argument_list|)
decl_stmt|;
if|if
condition|(
name|max_cell_size_list
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|max_cell_size
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|max_cell_size_list
operator|.
name|item
argument_list|(
literal|0
argument_list|)
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|ttl
init|=
name|HColumnDescriptor
operator|.
name|DEFAULT_TTL
decl_stmt|;
name|NodeList
name|ttl_list
init|=
name|columnfamily
operator|.
name|getElementsByTagName
argument_list|(
literal|"time-to-live"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ttl_list
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ttl
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|ttl_list
operator|.
name|item
argument_list|(
literal|0
argument_list|)
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|boolean
name|bloomfilter
init|=
name|HColumnDescriptor
operator|.
name|DEFAULT_BLOOMFILTER
decl_stmt|;
name|NodeList
name|bloomfilter_list
init|=
name|columnfamily
operator|.
name|getElementsByTagName
argument_list|(
literal|"bloomfilter"
argument_list|)
decl_stmt|;
if|if
condition|(
name|bloomfilter_list
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|bloomfilter
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|bloomfilter_list
operator|.
name|item
argument_list|(
literal|0
argument_list|)
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|HColumnDescriptor
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|colname
argument_list|)
argument_list|,
name|max_versions
argument_list|,
name|compression
argument_list|,
name|in_memory
argument_list|,
name|block_cache
argument_list|,
name|max_cell_size
argument_list|,
name|ttl
argument_list|,
name|bloomfilter
argument_list|)
return|;
block|}
block|}
end_class

end_unit

