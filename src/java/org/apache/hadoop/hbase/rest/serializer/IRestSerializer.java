begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|serializer
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|RowResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|DatabaseModel
operator|.
name|DatabaseMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|Status
operator|.
name|StatusMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|TableModel
operator|.
name|Regions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|descriptors
operator|.
name|ScannerIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|descriptors
operator|.
name|TimestampsDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|exception
operator|.
name|HBaseRestException
import|;
end_import

begin_comment
comment|/**  *   *         Interface that is implemented to return serialized objects back to  *         the output stream.  */
end_comment

begin_interface
specifier|public
interface|interface
name|IRestSerializer
block|{
comment|/**    * Serializes an object into the appropriate format and writes it to the    * output stream.    *     * This is the main point of entry when for an object to be serialized to the    * output stream.    *     * @param o    * @throws HBaseRestException    */
specifier|public
name|void
name|writeOutput
parameter_list|(
name|Object
name|o
parameter_list|)
throws|throws
name|HBaseRestException
function_decl|;
comment|/**    * serialize the database metadata    *     * Implementation of this method is optional, IF all the work is done in the    * writeOutput(Object o) method    *     * @param databaseMetadata    * @throws HBaseRestException    */
specifier|public
name|void
name|serializeDatabaseMetadata
parameter_list|(
name|DatabaseMetadata
name|databaseMetadata
parameter_list|)
throws|throws
name|HBaseRestException
function_decl|;
comment|/**    * serialize the HTableDescriptor object    *     * Implementation of this method is optional, IF all the work is done in the    * writeOutput(Object o) method    *     * @param tableDescriptor    * @throws HBaseRestException    */
specifier|public
name|void
name|serializeTableDescriptor
parameter_list|(
name|HTableDescriptor
name|tableDescriptor
parameter_list|)
throws|throws
name|HBaseRestException
function_decl|;
comment|/**    * serialize an HColumnDescriptor to the output stream.    *     * Implementation of this method is optional, IF all the work is done in the    * writeOutput(Object o) method    *     * @param column    * @throws HBaseRestException    */
specifier|public
name|void
name|serializeColumnDescriptor
parameter_list|(
name|HColumnDescriptor
name|column
parameter_list|)
throws|throws
name|HBaseRestException
function_decl|;
comment|/**    * serialize the region data for a table to the output stream    *     * Implementation of this method is optional, IF all the work is done in the    * writeOutput(Object o) method    *     * @param regions    * @throws HBaseRestException    */
specifier|public
name|void
name|serializeRegionData
parameter_list|(
name|Regions
name|regions
parameter_list|)
throws|throws
name|HBaseRestException
function_decl|;
comment|/**    * serialize the status message object to the output stream    *     * Implementation of this method is optional, IF all the work is done in the    * writeOutput(Object o) method    *     * @param message    * @throws HBaseRestException    */
specifier|public
name|void
name|serializeStatusMessage
parameter_list|(
name|StatusMessage
name|message
parameter_list|)
throws|throws
name|HBaseRestException
function_decl|;
comment|/**    * serialize the ScannerIdentifier object to the output stream    *     * Implementation of this method is optional, IF all the work is done in the    * writeOutput(Object o) method    *     * @param scannerIdentifier    * @throws HBaseRestException    */
specifier|public
name|void
name|serializeScannerIdentifier
parameter_list|(
name|ScannerIdentifier
name|scannerIdentifier
parameter_list|)
throws|throws
name|HBaseRestException
function_decl|;
comment|/**    * serialize a RowResult object to the output stream    *     * Implementation of this method is optional, IF all the work is done in the    * writeOutput(Object o) method    *     * @param rowResult    * @throws HBaseRestException    */
specifier|public
name|void
name|serializeRowResult
parameter_list|(
name|RowResult
name|rowResult
parameter_list|)
throws|throws
name|HBaseRestException
function_decl|;
comment|/**    * serialize a RowResult array to the output stream    *     * Implementation of this method is optional, IF all the work is done in the    * writeOutput(Object o) method    *     * @param rows    * @throws HBaseRestException    */
specifier|public
name|void
name|serializeRowResultArray
parameter_list|(
name|RowResult
index|[]
name|rows
parameter_list|)
throws|throws
name|HBaseRestException
function_decl|;
comment|/**    * serialize a cell object to the output stream    *     * Implementation of this method is optional, IF all the work is done in the    * writeOutput(Object o) method    *     * @param cell    * @throws HBaseRestException    */
specifier|public
name|void
name|serializeCell
parameter_list|(
name|Cell
name|cell
parameter_list|)
throws|throws
name|HBaseRestException
function_decl|;
comment|/**    * serialize a Cell array to the output stream    *     * @param cells    * @throws HBaseRestException    */
specifier|public
name|void
name|serializeCellArray
parameter_list|(
name|Cell
index|[]
name|cells
parameter_list|)
throws|throws
name|HBaseRestException
function_decl|;
comment|/**    * serialize a description of the timestamps available for a row     * to the output stream.    *     * @param timestampsDescriptor    * @throws HBaseRestException    */
specifier|public
name|void
name|serializeTimestamps
parameter_list|(
name|TimestampsDescriptor
name|timestampsDescriptor
parameter_list|)
throws|throws
name|HBaseRestException
function_decl|;
block|}
end_interface

end_unit

