begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|JenkinsHash
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|RowResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|servlet
operator|.
name|MultiPartResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|znerd
operator|.
name|xmlenc
operator|.
name|XMLOutputter
import|;
end_import

begin_comment
comment|/**  * ScannderHandler fields all scanner related requests.   */
end_comment

begin_class
specifier|public
class|class
name|ScannerHandler
extends|extends
name|GenericHandler
block|{
specifier|public
name|ScannerHandler
parameter_list|(
name|HBaseConfiguration
name|conf
parameter_list|,
name|HBaseAdmin
name|admin
parameter_list|)
throws|throws
name|ServletException
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|admin
argument_list|)
expr_stmt|;
block|}
specifier|private
class|class
name|ScannerRecord
block|{
specifier|private
specifier|final
name|Scanner
name|scanner
decl_stmt|;
specifier|private
name|RowResult
name|next
decl_stmt|;
name|ScannerRecord
parameter_list|(
specifier|final
name|Scanner
name|s
parameter_list|)
block|{
name|this
operator|.
name|scanner
operator|=
name|s
expr_stmt|;
block|}
specifier|public
name|Scanner
name|getScanner
parameter_list|()
block|{
return|return
name|this
operator|.
name|scanner
return|;
block|}
specifier|public
name|boolean
name|hasNext
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|next
operator|==
literal|null
condition|)
block|{
name|next
operator|=
name|scanner
operator|.
name|next
argument_list|()
expr_stmt|;
return|return
name|next
operator|!=
literal|null
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
comment|/**      * Call next on the scanner.      * @return Null if finished, RowResult otherwise      * @throws IOException      */
specifier|public
name|RowResult
name|next
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|RowResult
name|temp
init|=
name|next
decl_stmt|;
name|next
operator|=
literal|null
expr_stmt|;
return|return
name|temp
return|;
block|}
block|}
comment|/*    * Map of outstanding scanners keyed by scannerid.    */
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ScannerRecord
argument_list|>
name|scanners
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ScannerRecord
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|void
name|doGet
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|String
index|[]
name|pathSegments
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|doMethodNotAllowed
argument_list|(
name|response
argument_list|,
literal|"GET to a scanner not supported."
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|doPost
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|String
index|[]
name|pathSegments
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
if|if
condition|(
name|pathSegments
operator|.
name|length
operator|==
literal|2
condition|)
block|{
comment|// trying to create a scanner
name|openScanner
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|pathSegments
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pathSegments
operator|.
name|length
operator|==
literal|3
condition|)
block|{
comment|// advancing a scanner
name|getScanner
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|pathSegments
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doNotFound
argument_list|(
name|response
argument_list|,
literal|"No handler for request"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|doPut
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|String
index|[]
name|pathSegments
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|doPost
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|pathSegments
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|doDelete
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|String
index|[]
name|pathSegments
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|deleteScanner
argument_list|(
name|response
argument_list|,
name|pathSegments
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
comment|/*    * Advance scanner and return current position.    * @param request    * @param response    * @param scannerid    * @throws IOException    */
specifier|private
name|void
name|getScanner
parameter_list|(
specifier|final
name|HttpServletRequest
name|request
parameter_list|,
specifier|final
name|HttpServletResponse
name|response
parameter_list|,
specifier|final
name|String
name|scannerid
parameter_list|)
throws|throws
name|IOException
block|{
name|ScannerRecord
name|sr
init|=
name|this
operator|.
name|scanners
operator|.
name|get
argument_list|(
name|scannerid
argument_list|)
decl_stmt|;
if|if
condition|(
name|sr
operator|==
literal|null
condition|)
block|{
name|doNotFound
argument_list|(
name|response
argument_list|,
literal|"No such scanner."
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|sr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|ContentType
operator|.
name|getContentType
argument_list|(
name|request
operator|.
name|getHeader
argument_list|(
name|ACCEPT
argument_list|)
argument_list|)
condition|)
block|{
case|case
name|XML
case|:
name|outputScannerEntryXML
argument_list|(
name|response
argument_list|,
name|sr
argument_list|)
expr_stmt|;
break|break;
case|case
name|MIME
case|:
comment|/*          outputScannerEntryMime(response, sr);*/
name|doNotAcceptable
argument_list|(
name|response
argument_list|)
expr_stmt|;
break|break;
default|default:
name|doNotAcceptable
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|this
operator|.
name|scanners
operator|.
name|remove
argument_list|(
name|scannerid
argument_list|)
expr_stmt|;
name|doNotFound
argument_list|(
name|response
argument_list|,
literal|"Scanner is expended"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|outputScannerEntryXML
parameter_list|(
specifier|final
name|HttpServletResponse
name|response
parameter_list|,
specifier|final
name|ScannerRecord
name|sr
parameter_list|)
throws|throws
name|IOException
block|{
name|RowResult
name|rowResult
init|=
name|sr
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// respond with a 200 and Content-type: text/xml
name|setResponseHeader
argument_list|(
name|response
argument_list|,
literal|200
argument_list|,
name|ContentType
operator|.
name|XML
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// setup an xml outputter
name|XMLOutputter
name|outputter
init|=
name|getXMLOutputter
argument_list|(
name|response
operator|.
name|getWriter
argument_list|()
argument_list|)
decl_stmt|;
name|outputter
operator|.
name|startTag
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
comment|// write the row key
name|doElement
argument_list|(
name|outputter
argument_list|,
literal|"name"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Base64
operator|.
name|encodeBytes
argument_list|(
name|rowResult
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|outputColumnsXml
argument_list|(
name|outputter
argument_list|,
name|rowResult
argument_list|)
expr_stmt|;
name|outputter
operator|.
name|endTag
argument_list|()
expr_stmt|;
name|outputter
operator|.
name|endDocument
argument_list|()
expr_stmt|;
name|outputter
operator|.
name|getWriter
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// private void outputScannerEntryMime(final HttpServletResponse response,
comment|//   final ScannerRecord sr)
comment|// throws IOException {
comment|//   response.setStatus(200);
comment|//   // This code ties me to the jetty server.
comment|//   MultiPartResponse mpr = new MultiPartResponse(response);
comment|//   // Content type should look like this for multipart:
comment|//   // Content-type: multipart/related;start="<rootpart*94ebf1e6-7eb5-43f1-85f4-2615fc40c5d6@example.jaxws.sun.com>";type="application/xop+xml";boundary="uuid:94ebf1e6-7eb5-43f1-85f4-2615fc40c5d6";start-info="text/xml"
comment|//   String ct = ContentType.MIME.toString() + ";charset=\"UTF-8\";boundary=\"" +
comment|//     mpr.getBoundary() + "\"";
comment|//   // Setting content type is broken.  I'm unable to set parameters on the
comment|//   // content-type; They get stripped.  Can't set boundary, etc.
comment|//   // response.addHeader("Content-Type", ct);
comment|//   response.setContentType(ct);
comment|//   // Write row, key-column and timestamp each in its own part.
comment|//   mpr.startPart("application/octet-stream",
comment|//       new String [] {"Content-Description: row",
comment|//         "Content-Transfer-Encoding: binary",
comment|//         "Content-Length: " + sr.getKey().getRow().getBytes().length});
comment|//   mpr.getOut().write(sr.getKey().getRow().getBytes());
comment|//
comment|//   // Usually key-column is empty when scanning.
comment|//   if (sr.getKey().getColumn() != null&&
comment|//       sr.getKey().getColumn().getLength()> 0) {
comment|//     mpr.startPart("application/octet-stream",
comment|//       new String [] {"Content-Description: key-column",
comment|//         "Content-Transfer-Encoding: binary",
comment|//         "Content-Length: " + sr.getKey().getColumn().getBytes().length});
comment|//   }
comment|//   mpr.getOut().write(sr.getKey().getColumn().getBytes());
comment|//   // TODO: Fix. Need to write out the timestamp in the ordained timestamp
comment|//   // format.
comment|//   byte [] timestampBytes = Long.toString(sr.getKey().getTimestamp()).getBytes();
comment|//   mpr.startPart("application/octet-stream",
comment|//       new String [] {"Content-Description: timestamp",
comment|//         "Content-Transfer-Encoding: binary",
comment|//         "Content-Length: " + timestampBytes.length});
comment|//   mpr.getOut().write(timestampBytes);
comment|//   // Write out columns
comment|//   outputColumnsMime(mpr, sr.getValue());
comment|//   mpr.close();
comment|// }
comment|/*    * Create scanner    * @param request    * @param response    * @param pathSegments    * @throws IOException    */
specifier|private
name|void
name|openScanner
parameter_list|(
specifier|final
name|HttpServletRequest
name|request
parameter_list|,
specifier|final
name|HttpServletResponse
name|response
parameter_list|,
specifier|final
name|String
index|[]
name|pathSegments
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
comment|// get the table
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|getTableName
argument_list|(
name|pathSegments
argument_list|)
argument_list|)
decl_stmt|;
comment|// get the list of columns we're supposed to interact with
name|String
index|[]
name|raw_columns
init|=
name|request
operator|.
name|getParameterValues
argument_list|(
name|COLUMN
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|columns
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|raw_columns
operator|!=
literal|null
condition|)
block|{
name|columns
operator|=
operator|new
name|byte
index|[
name|raw_columns
operator|.
name|length
index|]
index|[]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|raw_columns
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// I think this decoding is redundant.
name|columns
index|[
name|i
index|]
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|URLDecoder
operator|.
name|decode
argument_list|(
name|raw_columns
index|[
name|i
index|]
argument_list|,
name|HConstants
operator|.
name|UTF8_ENCODING
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// TODO: Need to put into the scanner all of the table's column
comment|// families.  TODO: Verify this returns all rows.  For now just fail.
name|doMethodNotAllowed
argument_list|(
name|response
argument_list|,
literal|"Unspecified columns parameter currently not supported!"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// TODO: Parse according to the timestamp format we agree on.
name|String
name|raw_ts
init|=
name|request
operator|.
name|getParameter
argument_list|(
name|TIMESTAMP
argument_list|)
decl_stmt|;
comment|// TODO: Are these decodings redundant?
name|byte
index|[]
name|startRow
init|=
name|request
operator|.
name|getParameter
argument_list|(
name|START_ROW
argument_list|)
operator|==
literal|null
condition|?
name|HConstants
operator|.
name|EMPTY_START_ROW
else|:
name|Bytes
operator|.
name|toBytes
argument_list|(
name|URLDecoder
operator|.
name|decode
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
name|START_ROW
argument_list|)
argument_list|,
name|HConstants
operator|.
name|UTF8_ENCODING
argument_list|)
argument_list|)
decl_stmt|;
comment|// Empty start row is same value as empty end row.
name|byte
index|[]
name|endRow
init|=
name|request
operator|.
name|getParameter
argument_list|(
name|END_ROW
argument_list|)
operator|==
literal|null
condition|?
name|HConstants
operator|.
name|EMPTY_START_ROW
else|:
name|Bytes
operator|.
name|toBytes
argument_list|(
name|URLDecoder
operator|.
name|decode
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
name|END_ROW
argument_list|)
argument_list|,
name|HConstants
operator|.
name|UTF8_ENCODING
argument_list|)
argument_list|)
decl_stmt|;
name|Scanner
name|scanner
init|=
operator|(
name|request
operator|.
name|getParameter
argument_list|(
name|END_ROW
argument_list|)
operator|==
literal|null
operator|)
condition|?
name|table
operator|.
name|getScanner
argument_list|(
name|columns
argument_list|,
name|startRow
argument_list|)
else|:
name|table
operator|.
name|getScanner
argument_list|(
name|columns
argument_list|,
name|startRow
argument_list|,
name|endRow
argument_list|)
decl_stmt|;
comment|// Make a scanner id by hashing the object toString value (object name +
comment|// an id).  Will make identifier less burdensome and more url friendly.
name|String
name|scannerid
init|=
name|Integer
operator|.
name|toHexString
argument_list|(
name|JenkinsHash
operator|.
name|hash
argument_list|(
name|scanner
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|ScannerRecord
name|sr
init|=
operator|new
name|ScannerRecord
argument_list|(
name|scanner
argument_list|)
decl_stmt|;
comment|// store the scanner for subsequent requests
name|this
operator|.
name|scanners
operator|.
name|put
argument_list|(
name|scannerid
argument_list|,
name|sr
argument_list|)
expr_stmt|;
comment|// set a 201 (Created) header and a Location pointing to the new
comment|// scanner
name|response
operator|.
name|setStatus
argument_list|(
literal|201
argument_list|)
expr_stmt|;
name|response
operator|.
name|addHeader
argument_list|(
literal|"Location"
argument_list|,
name|request
operator|.
name|getContextPath
argument_list|()
operator|+
literal|"/"
operator|+
name|pathSegments
index|[
literal|0
index|]
operator|+
literal|"/"
operator|+
name|pathSegments
index|[
literal|1
index|]
operator|+
literal|"/"
operator|+
name|scannerid
argument_list|)
expr_stmt|;
name|response
operator|.
name|getOutputStream
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/*    * Delete scanner    * @param response    * @param scannerid    * @throws IOException    */
specifier|private
name|void
name|deleteScanner
parameter_list|(
specifier|final
name|HttpServletResponse
name|response
parameter_list|,
specifier|final
name|String
name|scannerid
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
name|ScannerRecord
name|sr
init|=
name|this
operator|.
name|scanners
operator|.
name|remove
argument_list|(
name|scannerid
argument_list|)
decl_stmt|;
if|if
condition|(
name|sr
operator|==
literal|null
condition|)
block|{
name|doNotFound
argument_list|(
name|response
argument_list|,
literal|"No such scanner"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sr
operator|.
name|getScanner
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|response
operator|.
name|setStatus
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|response
operator|.
name|getOutputStream
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

