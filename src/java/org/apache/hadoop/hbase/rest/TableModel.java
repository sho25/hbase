begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2008 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|RowResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|exception
operator|.
name|HBaseRestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|serializer
operator|.
name|IRestSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|serializer
operator|.
name|ISerializable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|agilejson
operator|.
name|TOJSON
import|;
end_import

begin_class
specifier|public
class|class
name|TableModel
extends|extends
name|AbstractModel
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TableModel
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|TableModel
parameter_list|(
name|HBaseConfiguration
name|config
parameter_list|,
name|HBaseAdmin
name|admin
parameter_list|)
block|{
name|super
operator|.
name|initialize
argument_list|(
name|config
argument_list|,
name|admin
argument_list|)
expr_stmt|;
block|}
comment|// Get Methods
specifier|public
name|RowResult
index|[]
name|get
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|HBaseRestException
block|{
return|return
name|get
argument_list|(
name|tableName
argument_list|,
name|getColumns
argument_list|(
name|tableName
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Returns all cells from all rows from the given table in the given columns.    * The output is in the order that the columns are given.    *     * @param tableName    *          table name    * @param columnNames    *          column names    * @return resultant rows    * @throws org.apache.hadoop.hbase.rest.exception.HBaseRestException    */
specifier|public
name|RowResult
index|[]
name|get
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
index|[]
name|columnNames
parameter_list|)
throws|throws
name|HBaseRestException
block|{
try|try
block|{
name|ArrayList
argument_list|<
name|RowResult
argument_list|>
name|a
init|=
operator|new
name|ArrayList
argument_list|<
name|RowResult
argument_list|>
argument_list|()
decl_stmt|;
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Scanner
name|s
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|columnNames
argument_list|)
decl_stmt|;
name|RowResult
name|r
decl_stmt|;
while|while
condition|(
operator|(
name|r
operator|=
name|s
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|a
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
return|return
name|a
operator|.
name|toArray
argument_list|(
operator|new
name|RowResult
index|[
literal|0
index|]
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HBaseRestException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|boolean
name|doesTableExist
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|HBaseRestException
block|{
try|try
block|{
return|return
name|this
operator|.
name|admin
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HBaseRestException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|disableTable
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|HBaseRestException
block|{
try|try
block|{
name|this
operator|.
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HBaseRestException
argument_list|(
literal|"IOException disabling table"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|enableTable
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|HBaseRestException
block|{
try|try
block|{
name|this
operator|.
name|admin
operator|.
name|enableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HBaseRestException
argument_list|(
literal|"IOException enabiling table"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|boolean
name|updateTable
parameter_list|(
name|String
name|tableName
parameter_list|,
name|ArrayList
argument_list|<
name|HColumnDescriptor
argument_list|>
name|columns
parameter_list|)
throws|throws
name|HBaseRestException
block|{
name|HTableDescriptor
name|htc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|htc
operator|=
name|this
operator|.
name|admin
operator|.
name|getTableDescriptor
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HBaseRestException
argument_list|(
literal|"Table does not exist"
argument_list|)
throw|;
block|}
for|for
control|(
name|HColumnDescriptor
name|column
range|:
name|columns
control|)
block|{
if|if
condition|(
name|htc
operator|.
name|hasFamily
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|column
operator|.
name|getNameAsString
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
try|try
block|{
name|this
operator|.
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|this
operator|.
name|admin
operator|.
name|modifyColumn
argument_list|(
name|tableName
argument_list|,
name|column
operator|.
name|getNameAsString
argument_list|()
argument_list|,
name|column
argument_list|)
expr_stmt|;
name|this
operator|.
name|admin
operator|.
name|enableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HBaseRestException
argument_list|(
literal|"unable to modify column "
operator|+
name|column
operator|.
name|getNameAsString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
try|try
block|{
name|this
operator|.
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|this
operator|.
name|admin
operator|.
name|addColumn
argument_list|(
name|tableName
argument_list|,
name|column
argument_list|)
expr_stmt|;
name|this
operator|.
name|admin
operator|.
name|enableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HBaseRestException
argument_list|(
literal|"unable to add column "
operator|+
name|column
operator|.
name|getNameAsString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Get table metadata.    *    * @param tableName    * @return HTableDescriptor    * @throws HBaseRestException    */
specifier|public
name|HTableDescriptor
name|getTableMetadata
parameter_list|(
specifier|final
name|String
name|tableName
parameter_list|)
throws|throws
name|HBaseRestException
block|{
name|HTableDescriptor
name|descriptor
init|=
literal|null
decl_stmt|;
try|try
block|{
name|HTableDescriptor
index|[]
name|tables
init|=
name|this
operator|.
name|admin
operator|.
name|listTables
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tables
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|Bytes
operator|.
name|toString
argument_list|(
name|tables
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|descriptor
operator|=
name|tables
index|[
name|i
index|]
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|descriptor
operator|==
literal|null
condition|)
block|{        }
else|else
block|{
return|return
name|descriptor
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HBaseRestException
argument_list|(
literal|"error processing request."
argument_list|)
throw|;
block|}
return|return
name|descriptor
return|;
block|}
comment|/**    * Return region offsets.    * @param tableName     * @return Regions    * @throws HBaseRestException     */
specifier|public
name|Regions
name|getTableRegions
parameter_list|(
specifier|final
name|String
name|tableName
parameter_list|)
throws|throws
name|HBaseRestException
block|{
try|try
block|{
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
comment|// Presumption is that this.table has already been focused on target
comment|// table.
name|Regions
name|regions
init|=
operator|new
name|Regions
argument_list|(
name|table
operator|.
name|getStartKeys
argument_list|()
argument_list|)
decl_stmt|;
comment|// Presumption is that this.table has already been set against target
comment|// table
return|return
name|regions
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HBaseRestException
argument_list|(
literal|"Unable to get regions from table"
argument_list|)
throw|;
block|}
block|}
comment|// Post Methods
comment|/**    * Creates table tableName described by the json in input.    *     * @param tableName    *          table name    * @param htd    *          HBaseTableDescriptor for the table to be created    *     * @return true if operation does not fail due to a table with the given    *         tableName not existing.    * @throws org.apache.hadoop.hbase.rest.exception.HBaseRestException    */
specifier|public
name|boolean
name|post
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|HTableDescriptor
name|htd
parameter_list|)
throws|throws
name|HBaseRestException
block|{
try|try
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|admin
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|this
operator|.
name|admin
operator|.
name|createTable
argument_list|(
name|htd
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HBaseRestException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Deletes table tableName    *     * @param tableName    *          name of the table.    * @return true if table exists and deleted, false if table does not exist.    * @throws org.apache.hadoop.hbase.rest.exception.HBaseRestException    */
specifier|public
name|boolean
name|delete
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|HBaseRestException
block|{
try|try
block|{
if|if
condition|(
name|this
operator|.
name|admin
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|this
operator|.
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|this
operator|.
name|admin
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HBaseRestException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
class|class
name|Regions
implements|implements
name|ISerializable
block|{
name|byte
index|[]
index|[]
name|regionKey
decl_stmt|;
specifier|public
name|Regions
parameter_list|(
name|byte
index|[]
index|[]
name|bs
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|regionKey
operator|=
name|bs
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
name|Regions
parameter_list|()
block|{     }
comment|/**      * @return the regionKey      */
annotation|@
name|TOJSON
argument_list|(
name|fieldName
operator|=
literal|"region"
argument_list|)
specifier|public
name|byte
index|[]
index|[]
name|getRegionKey
parameter_list|()
block|{
return|return
name|regionKey
return|;
block|}
comment|/**      * @param regionKey      *          the regionKey to set      */
specifier|public
name|void
name|setRegionKey
parameter_list|(
name|byte
index|[]
index|[]
name|regionKey
parameter_list|)
block|{
name|this
operator|.
name|regionKey
operator|=
name|regionKey
expr_stmt|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.apache.hadoop.hbase.rest.xml.IOutputXML#toXML()      */
specifier|public
name|void
name|restSerialize
parameter_list|(
name|IRestSerializer
name|serializer
parameter_list|)
throws|throws
name|HBaseRestException
block|{
name|serializer
operator|.
name|serializeRegionData
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

