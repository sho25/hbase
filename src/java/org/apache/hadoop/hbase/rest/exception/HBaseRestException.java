begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2008 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|exception
package|;
end_package

begin_import
import|import
name|agilejson
operator|.
name|TOJSON
import|;
end_import

begin_class
specifier|public
class|class
name|HBaseRestException
extends|extends
name|Exception
block|{
comment|/**    *     */
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|8481585437124298646L
decl_stmt|;
specifier|private
name|Exception
name|innerException
decl_stmt|;
specifier|private
name|String
name|innerClass
decl_stmt|;
specifier|private
name|String
name|innerMessage
decl_stmt|;
specifier|public
name|HBaseRestException
parameter_list|()
block|{    }
specifier|public
name|HBaseRestException
parameter_list|(
name|Exception
name|e
parameter_list|)
throws|throws
name|HBaseRestException
block|{
if|if
condition|(
name|HBaseRestException
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|e
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|(
operator|(
name|HBaseRestException
operator|)
name|e
operator|)
throw|;
block|}
name|setInnerException
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|innerClass
operator|=
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|innerMessage
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
comment|/**    * @param message    */
specifier|public
name|HBaseRestException
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|innerMessage
operator|=
name|message
expr_stmt|;
block|}
specifier|public
name|HBaseRestException
parameter_list|(
name|String
name|message
parameter_list|,
name|Exception
name|exception
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|,
name|exception
argument_list|)
expr_stmt|;
name|setInnerException
argument_list|(
name|exception
argument_list|)
expr_stmt|;
name|innerClass
operator|=
name|exception
operator|.
name|getClass
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|innerMessage
operator|=
name|message
expr_stmt|;
block|}
annotation|@
name|TOJSON
specifier|public
name|String
name|getInnerClass
parameter_list|()
block|{
return|return
name|this
operator|.
name|innerClass
return|;
block|}
annotation|@
name|TOJSON
specifier|public
name|String
name|getInnerMessage
parameter_list|()
block|{
return|return
name|this
operator|.
name|innerMessage
return|;
block|}
comment|/**    * @param innerException    *          the innerException to set    */
specifier|public
name|void
name|setInnerException
parameter_list|(
name|Exception
name|innerException
parameter_list|)
block|{
name|this
operator|.
name|innerException
operator|=
name|innerException
expr_stmt|;
block|}
comment|/**    * @return the innerException    */
specifier|public
name|Exception
name|getInnerException
parameter_list|()
block|{
return|return
name|innerException
return|;
block|}
block|}
end_class

end_unit

