begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2008 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|BatchUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|RowResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|descriptors
operator|.
name|TimestampsDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|exception
operator|.
name|HBaseRestException
import|;
end_import

begin_class
specifier|public
class|class
name|RowModel
extends|extends
name|AbstractModel
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RowModel
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|RowModel
parameter_list|(
name|HBaseConfiguration
name|conf
parameter_list|,
name|HBaseAdmin
name|admin
parameter_list|)
block|{
name|super
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|admin
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
specifier|public
name|RowResult
name|get
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|rowName
parameter_list|)
throws|throws
name|HBaseRestException
block|{
return|return
name|get
argument_list|(
name|tableName
argument_list|,
operator|new
name|Get
argument_list|(
name|rowName
argument_list|)
argument_list|)
operator|.
name|getRowResult
argument_list|()
return|;
block|}
specifier|public
name|Result
name|get
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|Get
name|get
parameter_list|)
throws|throws
name|HBaseRestException
block|{
try|try
block|{
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
return|return
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HBaseRestException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Deprecated
specifier|public
name|RowResult
name|get
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|rowName
parameter_list|,
name|byte
index|[]
index|[]
name|columns
parameter_list|)
throws|throws
name|HBaseRestException
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|rowName
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|column
range|:
name|columns
control|)
block|{
name|byte
index|[]
index|[]
name|famAndQf
init|=
name|KeyValue
operator|.
name|parseColumn
argument_list|(
name|column
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|famAndQf
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|get
argument_list|(
name|tableName
argument_list|,
name|get
argument_list|)
operator|.
name|getRowResult
argument_list|()
return|;
block|}
annotation|@
name|Deprecated
specifier|public
name|RowResult
name|get
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|rowName
parameter_list|,
name|byte
index|[]
index|[]
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|HBaseRestException
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|rowName
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|column
range|:
name|columns
control|)
block|{
name|byte
index|[]
index|[]
name|famAndQf
init|=
name|KeyValue
operator|.
name|parseColumn
argument_list|(
name|column
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|famAndQf
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|get
operator|.
name|setTimeStamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
return|return
name|get
argument_list|(
name|tableName
argument_list|,
name|get
argument_list|)
operator|.
name|getRowResult
argument_list|()
return|;
block|}
annotation|@
name|Deprecated
specifier|public
name|RowResult
name|get
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|rowName
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|HBaseRestException
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|rowName
argument_list|)
decl_stmt|;
name|get
operator|.
name|setTimeStamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
return|return
name|get
argument_list|(
name|tableName
argument_list|,
name|get
argument_list|)
operator|.
name|getRowResult
argument_list|()
return|;
block|}
specifier|public
name|TimestampsDescriptor
name|getTimestamps
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|byte
index|[]
name|tableName
parameter_list|,
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|byte
index|[]
name|rowName
parameter_list|)
throws|throws
name|HBaseRestException
block|{
comment|// try {
comment|// TimestampsDescriptor tsd = new TimestampsDescriptor();
comment|// HTable table = new HTable(tableName);
comment|// RowResult row = table.getRow(rowName);
throw|throw
operator|new
name|HBaseRestException
argument_list|(
literal|"operation currently unsupported"
argument_list|)
throw|;
comment|// } catch (IOException e) {
comment|// throw new HBaseRestException("Error finding timestamps for row: "
comment|// + Bytes.toString(rowName), e);
comment|// }
block|}
specifier|public
name|void
name|post
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|Put
name|put
parameter_list|)
throws|throws
name|HBaseRestException
block|{
try|try
block|{
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HBaseRestException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|post
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|List
argument_list|<
name|Put
argument_list|>
name|puts
parameter_list|)
throws|throws
name|HBaseRestException
block|{
try|try
block|{
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HBaseRestException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Deprecated
specifier|public
name|void
name|delete
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|rowName
parameter_list|)
throws|throws
name|HBaseRestException
block|{
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|rowName
argument_list|)
decl_stmt|;
name|delete
argument_list|(
name|tableName
argument_list|,
name|delete
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
specifier|public
name|void
name|delete
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|rowName
parameter_list|,
name|byte
index|[]
index|[]
name|columns
parameter_list|)
throws|throws
name|HBaseRestException
block|{
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|rowName
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|column
range|:
name|columns
control|)
block|{
name|byte
index|[]
index|[]
name|famAndQf
init|=
name|KeyValue
operator|.
name|parseColumn
argument_list|(
name|column
argument_list|)
decl_stmt|;
name|delete
operator|.
name|deleteColumn
argument_list|(
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|famAndQf
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|delete
argument_list|(
name|tableName
argument_list|,
name|delete
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|delete
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|Delete
name|delete
parameter_list|)
throws|throws
name|HBaseRestException
block|{
try|try
block|{
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|table
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HBaseRestException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

