begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ImmutableBytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Each HStore maintains a bunch of different data files.  *  * An HStoreFile tracks 4 things: its parent dir, the region identifier, the   * column family, and the file identifier.  If you know those four things, you  * know how to obtain the right HStoreFile.  *  * When merging or splitting HRegions, we might want to modify one of the   * params for an HStoreFile (effectively moving it elsewhere).  *   * The filename is a mix of the parent dir, the region name, the column name,   * and the file identifier.  *   * This class handles all that path-building stuff for you.  */
end_comment

begin_class
specifier|public
class|class
name|HStoreFile
implements|implements
name|HConstants
implements|,
name|WritableComparable
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HStoreFile
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|byte
name|INFO_SEQ_NUM
init|=
literal|0
decl_stmt|;
specifier|static
specifier|final
name|String
name|HSTORE_DATFILE_PREFIX
init|=
literal|"mapfile.dat."
decl_stmt|;
specifier|static
specifier|final
name|String
name|HSTORE_INFOFILE_PREFIX
init|=
literal|"mapfile.info."
decl_stmt|;
specifier|static
specifier|final
name|String
name|HSTORE_DATFILE_DIR
init|=
literal|"mapfiles"
decl_stmt|;
specifier|static
specifier|final
name|String
name|HSTORE_INFO_DIR
init|=
literal|"info"
decl_stmt|;
specifier|static
specifier|final
name|String
name|HSTORE_FILTER_DIR
init|=
literal|"filter"
decl_stmt|;
specifier|private
specifier|static
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|Path
name|dir
decl_stmt|;
name|Text
name|regionName
decl_stmt|;
name|Text
name|colFamily
decl_stmt|;
name|long
name|fileId
decl_stmt|;
name|Configuration
name|conf
decl_stmt|;
comment|/** Constructor used by Writable */
name|HStoreFile
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|dir
operator|=
operator|new
name|Path
argument_list|(
name|Path
operator|.
name|CUR_DIR
argument_list|)
expr_stmt|;
name|this
operator|.
name|regionName
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
name|this
operator|.
name|colFamily
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
name|this
operator|.
name|fileId
operator|=
literal|0
expr_stmt|;
block|}
comment|/**    * Constructor that fully initializes the object    * @param conf Configuration object    * @param dir directory path    * @param regionName name of the region    * @param colFamily name of the column family    * @param fileId file identifier    */
name|HStoreFile
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Path
name|dir
parameter_list|,
name|Text
name|regionName
parameter_list|,
name|Text
name|colFamily
parameter_list|,
name|long
name|fileId
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|dir
operator|=
name|dir
expr_stmt|;
name|this
operator|.
name|regionName
operator|=
operator|new
name|Text
argument_list|(
name|regionName
argument_list|)
expr_stmt|;
name|this
operator|.
name|colFamily
operator|=
operator|new
name|Text
argument_list|(
name|colFamily
argument_list|)
expr_stmt|;
name|this
operator|.
name|fileId
operator|=
name|fileId
expr_stmt|;
block|}
comment|/** @return the directory path */
name|Path
name|getDir
parameter_list|()
block|{
return|return
name|dir
return|;
block|}
comment|/** @return the region name */
name|Text
name|getRegionName
parameter_list|()
block|{
return|return
name|regionName
return|;
block|}
comment|/** @return the column family */
name|Text
name|getColFamily
parameter_list|()
block|{
return|return
name|colFamily
return|;
block|}
comment|/** @return the file identifier */
name|long
name|fileId
parameter_list|()
block|{
return|return
name|fileId
return|;
block|}
comment|// Build full filenames from those components
comment|/** @return path for MapFile */
name|Path
name|getMapFilePath
parameter_list|()
block|{
return|return
operator|new
name|Path
argument_list|(
name|HStoreFile
operator|.
name|getMapDir
argument_list|(
name|dir
argument_list|,
name|regionName
argument_list|,
name|colFamily
argument_list|)
argument_list|,
name|HSTORE_DATFILE_PREFIX
operator|+
name|fileId
argument_list|)
return|;
block|}
comment|/** @return path for info file */
name|Path
name|getInfoFilePath
parameter_list|()
block|{
return|return
operator|new
name|Path
argument_list|(
name|HStoreFile
operator|.
name|getInfoDir
argument_list|(
name|dir
argument_list|,
name|regionName
argument_list|,
name|colFamily
argument_list|)
argument_list|,
name|HSTORE_INFOFILE_PREFIX
operator|+
name|fileId
argument_list|)
return|;
block|}
comment|// Static methods to build partial paths to internal directories.  Useful for
comment|// HStore construction and log-rebuilding.
comment|/** @return the map directory path */
specifier|static
name|Path
name|getMapDir
parameter_list|(
name|Path
name|dir
parameter_list|,
name|Text
name|regionName
parameter_list|,
name|Text
name|colFamily
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
operator|new
name|Path
argument_list|(
name|HREGIONDIR_PREFIX
operator|+
name|regionName
argument_list|,
operator|new
name|Path
argument_list|(
name|colFamily
operator|.
name|toString
argument_list|()
argument_list|,
name|HSTORE_DATFILE_DIR
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/** @return the info directory path */
specifier|static
name|Path
name|getInfoDir
parameter_list|(
name|Path
name|dir
parameter_list|,
name|Text
name|regionName
parameter_list|,
name|Text
name|colFamily
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
operator|new
name|Path
argument_list|(
name|HREGIONDIR_PREFIX
operator|+
name|regionName
argument_list|,
operator|new
name|Path
argument_list|(
name|colFamily
operator|.
name|toString
argument_list|()
argument_list|,
name|HSTORE_INFO_DIR
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/** @return the bloom filter directory path */
specifier|static
name|Path
name|getFilterDir
parameter_list|(
name|Path
name|dir
parameter_list|,
name|Text
name|regionName
parameter_list|,
name|Text
name|colFamily
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
operator|new
name|Path
argument_list|(
name|HREGIONDIR_PREFIX
operator|+
name|regionName
argument_list|,
operator|new
name|Path
argument_list|(
name|colFamily
operator|.
name|toString
argument_list|()
argument_list|,
name|HSTORE_FILTER_DIR
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/** @return the HStore directory path */
specifier|static
name|Path
name|getHStoreDir
parameter_list|(
name|Path
name|dir
parameter_list|,
name|Text
name|regionName
parameter_list|,
name|Text
name|colFamily
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
operator|new
name|Path
argument_list|(
name|HREGIONDIR_PREFIX
operator|+
name|regionName
argument_list|,
name|colFamily
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/** @return the HRegion directory path */
specifier|static
name|Path
name|getHRegionDir
parameter_list|(
name|Path
name|dir
parameter_list|,
name|Text
name|regionName
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
operator|new
name|Path
argument_list|(
name|HREGIONDIR_PREFIX
operator|+
name|regionName
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * @return a brand-new randomly-named HStoreFile.    *     * Checks the filesystem to determine if the file already exists. If so, it    * will keep generating names until it generates a name that does not exist.    */
specifier|static
name|HStoreFile
name|obtainNewHStoreFile
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Path
name|dir
parameter_list|,
name|Text
name|regionName
parameter_list|,
name|Text
name|colFamily
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|mapdir
init|=
name|HStoreFile
operator|.
name|getMapDir
argument_list|(
name|dir
argument_list|,
name|regionName
argument_list|,
name|colFamily
argument_list|)
decl_stmt|;
name|long
name|fileId
init|=
name|Math
operator|.
name|abs
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|testpath1
init|=
operator|new
name|Path
argument_list|(
name|mapdir
argument_list|,
name|HSTORE_DATFILE_PREFIX
operator|+
name|fileId
argument_list|)
decl_stmt|;
name|Path
name|testpath2
init|=
operator|new
name|Path
argument_list|(
name|mapdir
argument_list|,
name|HSTORE_INFOFILE_PREFIX
operator|+
name|fileId
argument_list|)
decl_stmt|;
while|while
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|testpath1
argument_list|)
operator|||
name|fs
operator|.
name|exists
argument_list|(
name|testpath2
argument_list|)
condition|)
block|{
name|fileId
operator|=
name|Math
operator|.
name|abs
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
name|testpath1
operator|=
operator|new
name|Path
argument_list|(
name|mapdir
argument_list|,
name|HSTORE_DATFILE_PREFIX
operator|+
name|fileId
argument_list|)
expr_stmt|;
name|testpath2
operator|=
operator|new
name|Path
argument_list|(
name|mapdir
argument_list|,
name|HSTORE_INFOFILE_PREFIX
operator|+
name|fileId
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|HStoreFile
argument_list|(
name|conf
argument_list|,
name|dir
argument_list|,
name|regionName
argument_list|,
name|colFamily
argument_list|,
name|fileId
argument_list|)
return|;
block|}
comment|/**    * Creates a series of HStoreFiles loaded from the given directory.    *     * There must be a matching 'mapdir' and 'loginfo' pair of files.    * If only one exists, we'll delete it.    *    * @param conf Configuration object    * @param dir directory path    * @param regionName region name    * @param colFamily column family    * @param fs file system    * @return Vector of HStoreFiles    * @throws IOException    */
specifier|static
name|Vector
argument_list|<
name|HStoreFile
argument_list|>
name|loadHStoreFiles
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Path
name|dir
parameter_list|,
name|Text
name|regionName
parameter_list|,
name|Text
name|colFamily
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|Vector
argument_list|<
name|HStoreFile
argument_list|>
name|results
init|=
operator|new
name|Vector
argument_list|<
name|HStoreFile
argument_list|>
argument_list|()
decl_stmt|;
name|Path
name|mapdir
init|=
name|HStoreFile
operator|.
name|getMapDir
argument_list|(
name|dir
argument_list|,
name|regionName
argument_list|,
name|colFamily
argument_list|)
decl_stmt|;
name|Path
name|datfiles
index|[]
init|=
name|fs
operator|.
name|listPaths
argument_list|(
name|mapdir
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|datfiles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
name|datfiles
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|HSTORE_DATFILE_PREFIX
argument_list|)
condition|)
block|{
name|Long
name|fileId
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|name
operator|.
name|substring
argument_list|(
name|HSTORE_DATFILE_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|HStoreFile
name|curfile
init|=
operator|new
name|HStoreFile
argument_list|(
name|conf
argument_list|,
name|dir
argument_list|,
name|regionName
argument_list|,
name|colFamily
argument_list|,
name|fileId
argument_list|)
decl_stmt|;
name|Path
name|mapfile
init|=
name|curfile
operator|.
name|getMapFilePath
argument_list|()
decl_stmt|;
name|Path
name|infofile
init|=
name|curfile
operator|.
name|getInfoFilePath
argument_list|()
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|infofile
argument_list|)
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
name|curfile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fs
operator|.
name|delete
argument_list|(
name|mapfile
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Path
name|infodir
init|=
name|HStoreFile
operator|.
name|getInfoDir
argument_list|(
name|dir
argument_list|,
name|regionName
argument_list|,
name|colFamily
argument_list|)
decl_stmt|;
name|Path
name|infofiles
index|[]
init|=
name|fs
operator|.
name|listPaths
argument_list|(
name|infodir
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|infofiles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
name|infofiles
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|HSTORE_INFOFILE_PREFIX
argument_list|)
condition|)
block|{
name|long
name|fileId
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|name
operator|.
name|substring
argument_list|(
name|HSTORE_INFOFILE_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|HStoreFile
name|curfile
init|=
operator|new
name|HStoreFile
argument_list|(
name|conf
argument_list|,
name|dir
argument_list|,
name|regionName
argument_list|,
name|colFamily
argument_list|,
name|fileId
argument_list|)
decl_stmt|;
name|Path
name|mapfile
init|=
name|curfile
operator|.
name|getMapFilePath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|mapfile
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|curfile
operator|.
name|getInfoFilePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|results
return|;
block|}
comment|// File handling
comment|/**    * Break this HStoreFile file into two new parts, which live in different     * brand-new HRegions.    *    * @param midKey the key which will be the starting key of the second region    * @param dstA the file which will contain keys from the start of the source    * @param dstB the file which will contain keys from midKey to end of source    * @param fs file system    * @param c configuration    * @throws IOException    */
name|void
name|splitStoreFile
parameter_list|(
name|Text
name|midKey
parameter_list|,
name|HStoreFile
name|dstA
parameter_list|,
name|HStoreFile
name|dstB
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Configuration
name|c
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Copy the appropriate tuples to one MapFile or the other.
name|MapFile
operator|.
name|Reader
name|in
init|=
operator|new
name|MapFile
operator|.
name|Reader
argument_list|(
name|fs
argument_list|,
name|getMapFilePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|c
argument_list|)
decl_stmt|;
try|try
block|{
name|MapFile
operator|.
name|Writer
name|outA
init|=
operator|new
name|MapFile
operator|.
name|Writer
argument_list|(
name|c
argument_list|,
name|fs
argument_list|,
name|dstA
operator|.
name|getMapFilePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|HStoreKey
operator|.
name|class
argument_list|,
name|ImmutableBytesWritable
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|MapFile
operator|.
name|Writer
name|outB
init|=
operator|new
name|MapFile
operator|.
name|Writer
argument_list|(
name|c
argument_list|,
name|fs
argument_list|,
name|dstB
operator|.
name|getMapFilePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|HStoreKey
operator|.
name|class
argument_list|,
name|ImmutableBytesWritable
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|long
name|count
init|=
literal|0
decl_stmt|;
name|HStoreKey
name|readkey
init|=
operator|new
name|HStoreKey
argument_list|()
decl_stmt|;
name|ImmutableBytesWritable
name|readval
init|=
operator|new
name|ImmutableBytesWritable
argument_list|()
decl_stmt|;
while|while
condition|(
name|in
operator|.
name|next
argument_list|(
name|readkey
argument_list|,
name|readval
argument_list|)
condition|)
block|{
if|if
condition|(
name|readkey
operator|.
name|getRow
argument_list|()
operator|.
name|compareTo
argument_list|(
name|midKey
argument_list|)
operator|<
literal|0
condition|)
block|{
name|outA
operator|.
name|append
argument_list|(
name|readkey
argument_list|,
name|readval
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|outB
operator|.
name|append
argument_list|(
name|readkey
argument_list|,
name|readval
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|count
operator|++
expr_stmt|;
if|if
condition|(
operator|(
name|count
operator|%
literal|10000
operator|)
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Write "
operator|+
name|count
operator|+
literal|" records"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|outB
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|outA
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Build an InfoFile for each output
name|long
name|seqid
init|=
name|loadInfo
argument_list|(
name|fs
argument_list|)
decl_stmt|;
name|dstA
operator|.
name|writeInfo
argument_list|(
name|fs
argument_list|,
name|seqid
argument_list|)
expr_stmt|;
name|dstB
operator|.
name|writeInfo
argument_list|(
name|fs
argument_list|,
name|seqid
argument_list|)
expr_stmt|;
block|}
comment|/**    * Merges the contents of the given source HStoreFiles into a single new one.    *    * @param srcFiles files to be merged    * @param fs file system    * @param conf configuration object    * @throws IOException    */
name|void
name|mergeStoreFiles
parameter_list|(
name|Vector
argument_list|<
name|HStoreFile
argument_list|>
name|srcFiles
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Copy all the source MapFile tuples into this HSF's MapFile
name|MapFile
operator|.
name|Writer
name|out
init|=
operator|new
name|MapFile
operator|.
name|Writer
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|getMapFilePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|HStoreKey
operator|.
name|class
argument_list|,
name|ImmutableBytesWritable
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|HStoreFile
name|src
range|:
name|srcFiles
control|)
block|{
name|MapFile
operator|.
name|Reader
name|in
init|=
operator|new
name|MapFile
operator|.
name|Reader
argument_list|(
name|fs
argument_list|,
name|src
operator|.
name|getMapFilePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|HStoreKey
name|readkey
init|=
operator|new
name|HStoreKey
argument_list|()
decl_stmt|;
name|ImmutableBytesWritable
name|readval
init|=
operator|new
name|ImmutableBytesWritable
argument_list|()
decl_stmt|;
while|while
condition|(
name|in
operator|.
name|next
argument_list|(
name|readkey
argument_list|,
name|readval
argument_list|)
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
name|readkey
argument_list|,
name|readval
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Build a unified InfoFile from the source InfoFiles.
name|long
name|unifiedSeqId
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|HStoreFile
argument_list|>
name|it
init|=
name|srcFiles
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|HStoreFile
name|hsf
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|long
name|curSeqId
init|=
name|hsf
operator|.
name|loadInfo
argument_list|(
name|fs
argument_list|)
decl_stmt|;
if|if
condition|(
name|curSeqId
operator|>
name|unifiedSeqId
condition|)
block|{
name|unifiedSeqId
operator|=
name|curSeqId
expr_stmt|;
block|}
block|}
name|writeInfo
argument_list|(
name|fs
argument_list|,
name|unifiedSeqId
argument_list|)
expr_stmt|;
block|}
comment|/**     * Reads in an info file, and gives it a unique ID.    *    * @param fs file system    * @return new unique id    * @throws IOException    */
name|long
name|loadInfo
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|p
init|=
name|getInfoFilePath
argument_list|()
decl_stmt|;
name|DataInputStream
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|p
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|byte
name|flag
init|=
name|in
operator|.
name|readByte
argument_list|()
decl_stmt|;
if|if
condition|(
name|flag
operator|==
name|INFO_SEQ_NUM
condition|)
block|{
return|return
name|in
operator|.
name|readLong
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot process log file: "
operator|+
name|p
argument_list|)
throw|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Writes the file-identifier to disk    *     * @param fs file system    * @param infonum file id    * @throws IOException    */
name|void
name|writeInfo
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|long
name|infonum
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|p
init|=
name|getInfoFilePath
argument_list|()
decl_stmt|;
name|DataOutputStream
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
name|fs
operator|.
name|create
argument_list|(
name|p
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|out
operator|.
name|writeByte
argument_list|(
name|INFO_SEQ_NUM
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|infonum
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|this
operator|.
name|compareTo
argument_list|(
name|o
argument_list|)
operator|==
literal|0
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|this
operator|.
name|dir
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|^=
name|this
operator|.
name|regionName
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|^=
name|this
operator|.
name|colFamily
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|^=
name|Long
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|fileId
argument_list|)
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
comment|// Writable
comment|/** {@inheritDoc} */
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeUTF
argument_list|(
name|dir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|regionName
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|colFamily
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|fileId
argument_list|)
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|dir
operator|=
operator|new
name|Path
argument_list|(
name|in
operator|.
name|readUTF
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|regionName
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|colFamily
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|fileId
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
comment|// Comparable
comment|/** {@inheritDoc} */
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|HStoreFile
name|other
init|=
operator|(
name|HStoreFile
operator|)
name|o
decl_stmt|;
name|int
name|result
init|=
name|this
operator|.
name|dir
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|dir
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|0
condition|)
block|{
name|this
operator|.
name|regionName
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|regionName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|==
literal|0
condition|)
block|{
name|result
operator|=
name|this
operator|.
name|colFamily
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|colFamily
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|fileId
operator|<
name|other
operator|.
name|fileId
condition|)
block|{
name|result
operator|=
operator|-
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|fileId
operator|>
name|other
operator|.
name|fileId
condition|)
block|{
name|result
operator|=
literal|1
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

