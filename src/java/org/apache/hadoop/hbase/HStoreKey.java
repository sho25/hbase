begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|HeapSize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Writables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|RawComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_comment
comment|/**  * A Key for a stored row.  */
end_comment

begin_class
specifier|public
class|class
name|HStoreKey
implements|implements
name|WritableComparable
argument_list|<
name|HStoreKey
argument_list|>
implements|,
name|HeapSize
block|{
comment|/**    * Colon character in UTF-8    */
specifier|public
specifier|static
specifier|final
name|char
name|COLUMN_FAMILY_DELIMITER
init|=
literal|':'
decl_stmt|;
comment|/**    * Estimated size tax paid for each instance of HSK.  Estimate based on    * study of jhat and jprofiler numbers.    */
comment|// In jprofiler, says shallow size is 48 bytes.  Add to it cost of two
comment|// byte arrays and then something for the HRI hosting.
specifier|public
specifier|static
specifier|final
name|int
name|ESTIMATED_HEAP_TAX
init|=
literal|48
decl_stmt|;
specifier|private
name|byte
index|[]
name|row
init|=
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
decl_stmt|;
specifier|private
name|byte
index|[]
name|column
init|=
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
decl_stmt|;
specifier|private
name|long
name|timestamp
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HStoreKey
operator|.
name|StoreKeyComparator
name|PLAIN_COMPARATOR
init|=
operator|new
name|HStoreKey
operator|.
name|StoreKeyComparator
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HStoreKey
operator|.
name|StoreKeyComparator
name|META_COMPARATOR
init|=
operator|new
name|HStoreKey
operator|.
name|MetaStoreKeyComparator
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HStoreKey
operator|.
name|StoreKeyComparator
name|ROOT_COMPARATOR
init|=
operator|new
name|HStoreKey
operator|.
name|RootStoreKeyComparator
argument_list|()
decl_stmt|;
comment|/** Default constructor used in conjunction with Writable interface */
specifier|public
name|HStoreKey
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**    * Create an HStoreKey specifying only the row    * The column defaults to the empty string, the time stamp defaults to    * Long.MAX_VALUE and the table defaults to empty string    *     * @param row - row key    */
specifier|public
name|HStoreKey
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|)
block|{
name|this
argument_list|(
name|row
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create an HStoreKey specifying only the row    * The column defaults to the empty string, the time stamp defaults to    * Long.MAX_VALUE and the table defaults to empty string    *     * @param row - row key    */
specifier|public
name|HStoreKey
parameter_list|(
specifier|final
name|String
name|row
parameter_list|)
block|{
name|this
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row
argument_list|)
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create an HStoreKey specifying the row and timestamp    * The column and table names default to the empty string    *     * @param row row key    * @param timestamp timestamp value    */
specifier|public
name|HStoreKey
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|long
name|timestamp
parameter_list|)
block|{
name|this
argument_list|(
name|row
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create an HStoreKey specifying the row and column names    * The timestamp defaults to LATEST_TIMESTAMP    * and table name defaults to the empty string    *     * @param row row key    * @param column column key    */
specifier|public
name|HStoreKey
parameter_list|(
specifier|final
name|String
name|row
parameter_list|,
specifier|final
name|String
name|column
parameter_list|)
block|{
name|this
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create an HStoreKey specifying the row and column names    * The timestamp defaults to LATEST_TIMESTAMP    * and table name defaults to the empty string    *     * @param row row key    * @param column column key    */
specifier|public
name|HStoreKey
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|column
parameter_list|)
block|{
name|this
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create an HStoreKey specifying all the fields    * Does not make copies of the passed byte arrays. Presumes the passed     * arrays immutable.    * @param row row key    * @param column column key    * @param timestamp timestamp value    */
specifier|public
name|HStoreKey
parameter_list|(
specifier|final
name|String
name|row
parameter_list|,
specifier|final
name|String
name|column
parameter_list|,
specifier|final
name|long
name|timestamp
parameter_list|)
block|{
name|this
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|column
argument_list|)
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create an HStoreKey specifying all the fields with specified table    * Does not make copies of the passed byte arrays. Presumes the passed     * arrays immutable.    * @param row row key    * @param column column key    * @param timestamp timestamp value    */
specifier|public
name|HStoreKey
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|column
parameter_list|,
specifier|final
name|long
name|timestamp
parameter_list|)
block|{
comment|// Make copies
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|column
operator|=
name|column
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
block|}
comment|/**    * Constructs a new HStoreKey from another    *     * @param other the source key    */
specifier|public
name|HStoreKey
parameter_list|(
specifier|final
name|HStoreKey
name|other
parameter_list|)
block|{
name|this
argument_list|(
name|other
operator|.
name|getRow
argument_list|()
argument_list|,
name|other
operator|.
name|getColumn
argument_list|()
argument_list|,
name|other
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|HStoreKey
parameter_list|(
specifier|final
name|ByteBuffer
name|bb
parameter_list|)
block|{
name|this
argument_list|(
name|getRow
argument_list|(
name|bb
argument_list|)
argument_list|,
name|getColumn
argument_list|(
name|bb
argument_list|)
argument_list|,
name|getTimestamp
argument_list|(
name|bb
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Change the value of the row key    *     * @param newrow new row key value    */
specifier|public
name|void
name|setRow
parameter_list|(
specifier|final
name|byte
index|[]
name|newrow
parameter_list|)
block|{
name|this
operator|.
name|row
operator|=
name|newrow
expr_stmt|;
block|}
comment|/**    * Change the value of the column in this key    *     * @param c new column family value    */
specifier|public
name|void
name|setColumn
parameter_list|(
specifier|final
name|byte
index|[]
name|c
parameter_list|)
block|{
name|this
operator|.
name|column
operator|=
name|c
expr_stmt|;
block|}
comment|/**    * Change the value of the timestamp field    *     * @param timestamp new timestamp value    */
specifier|public
name|void
name|setVersion
parameter_list|(
specifier|final
name|long
name|timestamp
parameter_list|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
block|}
comment|/**    * Set the value of this HStoreKey from the supplied key    *     * @param k key value to copy    */
specifier|public
name|void
name|set
parameter_list|(
specifier|final
name|HStoreKey
name|k
parameter_list|)
block|{
name|this
operator|.
name|row
operator|=
name|k
operator|.
name|getRow
argument_list|()
expr_stmt|;
name|this
operator|.
name|column
operator|=
name|k
operator|.
name|getColumn
argument_list|()
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|k
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
block|}
comment|/** @return value of row key */
specifier|public
name|byte
index|[]
name|getRow
parameter_list|()
block|{
return|return
name|row
return|;
block|}
comment|/** @return value of column */
specifier|public
name|byte
index|[]
name|getColumn
parameter_list|()
block|{
return|return
name|this
operator|.
name|column
return|;
block|}
comment|/** @return value of timestamp */
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|this
operator|.
name|timestamp
return|;
block|}
comment|/**    * Compares the row and column of two keys    * @param other Key to compare against. Compares row and column.    * @return True if same row and column.    * @see #matchesWithoutColumn(HStoreKey)    * @see #matchesRowFamily(HStoreKey)    */
specifier|public
name|boolean
name|matchesRowCol
parameter_list|(
specifier|final
name|HStoreKey
name|other
parameter_list|)
block|{
return|return
name|HStoreKey
operator|.
name|equalsTwoRowKeys
argument_list|(
name|getRow
argument_list|()
argument_list|,
name|other
operator|.
name|getRow
argument_list|()
argument_list|)
operator|&&
name|Bytes
operator|.
name|equals
argument_list|(
name|getColumn
argument_list|()
argument_list|,
name|other
operator|.
name|getColumn
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Compares the row and timestamp of two keys    *     * @param other Key to copmare against. Compares row and timestamp.    *     * @return True if same row and timestamp is greater than<code>other</code>    * @see #matchesRowCol(HStoreKey)    * @see #matchesRowFamily(HStoreKey)    */
specifier|public
name|boolean
name|matchesWithoutColumn
parameter_list|(
specifier|final
name|HStoreKey
name|other
parameter_list|)
block|{
return|return
name|equalsTwoRowKeys
argument_list|(
name|getRow
argument_list|()
argument_list|,
name|other
operator|.
name|getRow
argument_list|()
argument_list|)
operator|&&
name|getTimestamp
argument_list|()
operator|>=
name|other
operator|.
name|getTimestamp
argument_list|()
return|;
block|}
comment|/**    * Compares the row and column family of two keys    *     * @param that Key to compare against. Compares row and column family    *     * @return true if same row and column family    * @see #matchesRowCol(HStoreKey)    * @see #matchesWithoutColumn(HStoreKey)    */
specifier|public
name|boolean
name|matchesRowFamily
parameter_list|(
specifier|final
name|HStoreKey
name|that
parameter_list|)
block|{
specifier|final
name|int
name|delimiterIndex
init|=
name|getFamilyDelimiterIndex
argument_list|(
name|getColumn
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|equalsTwoRowKeys
argument_list|(
name|getRow
argument_list|()
argument_list|,
name|that
operator|.
name|getRow
argument_list|()
argument_list|)
operator|&&
name|Bytes
operator|.
name|compareTo
argument_list|(
name|getColumn
argument_list|()
argument_list|,
literal|0
argument_list|,
name|delimiterIndex
argument_list|,
name|that
operator|.
name|getColumn
argument_list|()
argument_list|,
literal|0
argument_list|,
name|delimiterIndex
argument_list|)
operator|==
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|Bytes
operator|.
name|toString
argument_list|(
name|this
operator|.
name|row
argument_list|)
operator|+
literal|"/"
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|this
operator|.
name|column
argument_list|)
operator|+
literal|"/"
operator|+
name|timestamp
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|obj
parameter_list|)
block|{
specifier|final
name|HStoreKey
name|other
init|=
operator|(
name|HStoreKey
operator|)
name|obj
decl_stmt|;
comment|// Do a quick check.
if|if
condition|(
name|this
operator|.
name|row
operator|.
name|length
operator|!=
name|other
operator|.
name|row
operator|.
name|length
operator|||
name|this
operator|.
name|column
operator|.
name|length
operator|!=
name|other
operator|.
name|column
operator|.
name|length
operator|||
name|this
operator|.
name|timestamp
operator|!=
name|other
operator|.
name|timestamp
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|compareTo
argument_list|(
name|other
argument_list|)
operator|==
literal|0
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|c
init|=
name|Bytes
operator|.
name|hashCode
argument_list|(
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
name|c
operator|^=
name|Bytes
operator|.
name|hashCode
argument_list|(
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|^=
name|getTimestamp
argument_list|()
expr_stmt|;
return|return
name|c
return|;
block|}
comment|// Comparable
comment|/**    * @deprecated Use Comparators instead.  This can give wrong results.    */
specifier|public
name|int
name|compareTo
parameter_list|(
specifier|final
name|HStoreKey
name|o
parameter_list|)
block|{
return|return
name|compareTo
argument_list|(
name|this
argument_list|,
name|o
argument_list|)
return|;
block|}
comment|/**    * @param left    * @param right    * @return    * @deprecated Use Comparators instead.  This can give wrong results because    * does not take into account special handling needed for meta and root rows.    */
specifier|static
name|int
name|compareTo
parameter_list|(
specifier|final
name|HStoreKey
name|left
parameter_list|,
specifier|final
name|HStoreKey
name|right
parameter_list|)
block|{
comment|// We can be passed null
if|if
condition|(
name|left
operator|==
literal|null
operator|&&
name|right
operator|==
literal|null
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|left
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|right
operator|==
literal|null
condition|)
return|return
literal|1
return|;
name|int
name|result
init|=
name|Bytes
operator|.
name|compareTo
argument_list|(
name|left
operator|.
name|getRow
argument_list|()
argument_list|,
name|right
operator|.
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
return|return
name|result
return|;
block|}
name|result
operator|=
name|left
operator|.
name|getColumn
argument_list|()
operator|==
literal|null
operator|&&
name|right
operator|.
name|getColumn
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|left
operator|.
name|getColumn
argument_list|()
operator|==
literal|null
operator|&&
name|right
operator|.
name|getColumn
argument_list|()
operator|!=
literal|null
condition|?
operator|-
literal|1
else|:
name|left
operator|.
name|getColumn
argument_list|()
operator|!=
literal|null
operator|&&
name|right
operator|.
name|getColumn
argument_list|()
operator|==
literal|null
condition|?
literal|1
else|:
name|Bytes
operator|.
name|compareTo
argument_list|(
name|left
operator|.
name|getColumn
argument_list|()
argument_list|,
name|right
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
return|return
name|result
return|;
block|}
comment|// The below older timestamps sorting ahead of newer timestamps looks
comment|// wrong but it is intentional. This way, newer timestamps are first
comment|// found when we iterate over a memcache and newer versions are the
comment|// first we trip over when reading from a store file.
if|if
condition|(
name|left
operator|.
name|getTimestamp
argument_list|()
operator|<
name|right
operator|.
name|getTimestamp
argument_list|()
condition|)
block|{
name|result
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|left
operator|.
name|getTimestamp
argument_list|()
operator|>
name|right
operator|.
name|getTimestamp
argument_list|()
condition|)
block|{
name|result
operator|=
operator|-
literal|1
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * @param column    * @return New byte array that holds<code>column</code> family prefix only    * (Does not include the colon DELIMITER).    * @throws ColumnNameParseException     * @see #parseColumn(byte[])    */
specifier|public
specifier|static
name|byte
index|[]
name|getFamily
parameter_list|(
specifier|final
name|byte
index|[]
name|column
parameter_list|)
throws|throws
name|ColumnNameParseException
block|{
specifier|final
name|int
name|index
init|=
name|getFamilyDelimiterIndex
argument_list|(
name|column
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|ColumnNameParseException
argument_list|(
literal|"Missing ':' delimiter between "
operator|+
literal|"column family and qualifier in the passed column name<"
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|column
argument_list|)
operator|+
literal|">"
argument_list|)
throw|;
block|}
specifier|final
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|index
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|column
argument_list|,
literal|0
argument_list|,
name|result
argument_list|,
literal|0
argument_list|,
name|index
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * @param column    * @return Return hash of family portion of passed column.    */
specifier|public
specifier|static
name|Integer
name|getFamilyMapKey
parameter_list|(
specifier|final
name|byte
index|[]
name|column
parameter_list|)
block|{
specifier|final
name|int
name|index
init|=
name|getFamilyDelimiterIndex
argument_list|(
name|column
argument_list|)
decl_stmt|;
comment|// If index< -1, presume passed column is a family name absent colon
comment|// delimiter
return|return
name|Bytes
operator|.
name|mapKey
argument_list|(
name|column
argument_list|,
name|index
operator|>
literal|0
condition|?
name|index
else|:
name|column
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**    * @param family    * @param column    * @return True if<code>column</code> has a family of<code>family</code>.    */
specifier|public
specifier|static
name|boolean
name|matchingFamily
parameter_list|(
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|byte
index|[]
name|column
parameter_list|)
block|{
comment|// Make sure index of the ':' is at same offset.
specifier|final
name|int
name|index
init|=
name|getFamilyDelimiterIndex
argument_list|(
name|column
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
name|family
operator|.
name|length
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|Bytes
operator|.
name|compareTo
argument_list|(
name|family
argument_list|,
literal|0
argument_list|,
name|index
argument_list|,
name|column
argument_list|,
literal|0
argument_list|,
name|index
argument_list|)
operator|==
literal|0
return|;
block|}
comment|/**    * @param family    * @return Return<code>family</code> plus the family delimiter.    */
specifier|public
specifier|static
name|byte
index|[]
name|addDelimiter
parameter_list|(
specifier|final
name|byte
index|[]
name|family
parameter_list|)
block|{
comment|// Manufacture key by adding delimiter to the passed in colFamily.
specifier|final
name|byte
index|[]
name|familyPlusDelimiter
init|=
operator|new
name|byte
index|[
name|family
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|family
argument_list|,
literal|0
argument_list|,
name|familyPlusDelimiter
argument_list|,
literal|0
argument_list|,
name|family
operator|.
name|length
argument_list|)
expr_stmt|;
name|familyPlusDelimiter
index|[
name|family
operator|.
name|length
index|]
operator|=
name|HStoreKey
operator|.
name|COLUMN_FAMILY_DELIMITER
expr_stmt|;
return|return
name|familyPlusDelimiter
return|;
block|}
comment|/**    * @param column    * @return New byte array that holds<code>column</code> qualifier suffix.    * @see #parseColumn(byte[])    */
specifier|public
specifier|static
name|byte
index|[]
name|getQualifier
parameter_list|(
specifier|final
name|byte
index|[]
name|column
parameter_list|)
block|{
specifier|final
name|int
name|index
init|=
name|getFamilyDelimiterIndex
argument_list|(
name|column
argument_list|)
decl_stmt|;
specifier|final
name|int
name|len
init|=
name|column
operator|.
name|length
operator|-
operator|(
name|index
operator|+
literal|1
operator|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|column
argument_list|,
name|index
operator|+
literal|1
argument_list|,
name|result
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * @param c Column name    * @return Return array of size two whose first element has the family    * prefix of passed column<code>c</code> and whose second element is the    * column qualifier.    * @throws ColumnNameParseException     */
specifier|public
specifier|static
name|byte
index|[]
index|[]
name|parseColumn
parameter_list|(
specifier|final
name|byte
index|[]
name|c
parameter_list|)
throws|throws
name|ColumnNameParseException
block|{
specifier|final
name|byte
index|[]
index|[]
name|result
init|=
operator|new
name|byte
index|[
literal|2
index|]
index|[]
decl_stmt|;
specifier|final
name|int
name|index
init|=
name|getFamilyDelimiterIndex
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|ColumnNameParseException
argument_list|(
literal|"Impossible column name: "
operator|+
name|c
argument_list|)
throw|;
block|}
name|result
index|[
literal|0
index|]
operator|=
operator|new
name|byte
index|[
name|index
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|c
argument_list|,
literal|0
argument_list|,
name|result
index|[
literal|0
index|]
argument_list|,
literal|0
argument_list|,
name|index
argument_list|)
expr_stmt|;
specifier|final
name|int
name|len
init|=
name|c
operator|.
name|length
operator|-
operator|(
name|index
operator|+
literal|1
operator|)
decl_stmt|;
name|result
index|[
literal|1
index|]
operator|=
operator|new
name|byte
index|[
name|len
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|c
argument_list|,
name|index
operator|+
literal|1
comment|/*Skip delimiter*/
argument_list|,
name|result
index|[
literal|1
index|]
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * @param b    * @return Index of the family-qualifier colon delimiter character in passed    * buffer.    */
specifier|public
specifier|static
name|int
name|getFamilyDelimiterIndex
parameter_list|(
specifier|final
name|byte
index|[]
name|b
parameter_list|)
block|{
return|return
name|getDelimiter
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|,
operator|(
name|int
operator|)
name|COLUMN_FAMILY_DELIMITER
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|int
name|getRequiredDelimiterInReverse
parameter_list|(
specifier|final
name|byte
index|[]
name|b
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|,
specifier|final
name|int
name|length
parameter_list|,
specifier|final
name|int
name|delimiter
parameter_list|)
block|{
name|int
name|index
init|=
name|getDelimiterInReverse
argument_list|(
name|b
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|delimiter
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No "
operator|+
name|delimiter
operator|+
literal|" in<"
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|b
argument_list|)
operator|+
literal|">"
operator|+
literal|", length="
operator|+
name|length
operator|+
literal|", offset="
operator|+
name|offset
argument_list|)
throw|;
block|}
return|return
name|index
return|;
block|}
comment|/*    * @param b    * @param delimiter    * @return Index of delimiter having started from end of<code>b</code> moving    * leftward.    */
specifier|private
specifier|static
name|int
name|getDelimiter
parameter_list|(
specifier|final
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|,
specifier|final
name|int
name|length
parameter_list|,
specifier|final
name|int
name|delimiter
parameter_list|)
block|{
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|int
name|result
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|offset
init|;
name|i
operator|<
name|length
operator|+
name|offset
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|b
index|[
name|i
index|]
operator|==
name|delimiter
condition|)
block|{
name|result
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/*    * @param b    * @param delimiter    * @return Index of delimiter    */
specifier|private
specifier|static
name|int
name|getDelimiterInReverse
parameter_list|(
specifier|final
name|byte
index|[]
name|b
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|,
specifier|final
name|int
name|length
parameter_list|,
specifier|final
name|int
name|delimiter
parameter_list|)
block|{
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|int
name|result
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
operator|(
name|offset
operator|+
name|length
operator|)
operator|-
literal|1
init|;
name|i
operator|>=
name|offset
condition|;
name|i
operator|--
control|)
block|{
if|if
condition|(
name|b
index|[
name|i
index|]
operator|==
name|delimiter
condition|)
block|{
name|result
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**    * Utility method to check if two row keys are equal.    * This is required because of the meta delimiters    * This is a hack    * @param rowA    * @param rowB    * @return if it's equal    */
specifier|public
specifier|static
name|boolean
name|equalsTwoRowKeys
parameter_list|(
specifier|final
name|byte
index|[]
name|rowA
parameter_list|,
specifier|final
name|byte
index|[]
name|rowB
parameter_list|)
block|{
return|return
operator|(
operator|(
name|rowA
operator|==
literal|null
operator|)
operator|&&
operator|(
name|rowB
operator|==
literal|null
operator|)
operator|)
condition|?
literal|true
else|:
operator|(
name|rowA
operator|==
literal|null
operator|)
operator|||
operator|(
name|rowB
operator|==
literal|null
operator|)
operator|||
operator|(
name|rowA
operator|.
name|length
operator|!=
name|rowB
operator|.
name|length
operator|)
condition|?
literal|false
else|:
name|Bytes
operator|.
name|compareTo
argument_list|(
name|rowA
argument_list|,
name|rowB
argument_list|)
operator|==
literal|0
return|;
block|}
comment|// Writable
specifier|public
name|void
name|write
parameter_list|(
specifier|final
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|Bytes
operator|.
name|writeByteArray
argument_list|(
name|out
argument_list|,
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
name|Bytes
operator|.
name|writeByteArray
argument_list|(
name|out
argument_list|,
name|this
operator|.
name|column
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|readFields
parameter_list|(
specifier|final
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|row
operator|=
name|Bytes
operator|.
name|readByteArray
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|column
operator|=
name|Bytes
operator|.
name|readByteArray
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
comment|/**    * @param hsk    * @return Size of this key in serialized bytes.    */
specifier|public
specifier|static
name|int
name|getSerializedSize
parameter_list|(
specifier|final
name|HStoreKey
name|hsk
parameter_list|)
block|{
return|return
name|getSerializedSize
argument_list|(
name|hsk
operator|.
name|getRow
argument_list|()
argument_list|)
operator|+
name|getSerializedSize
argument_list|(
name|hsk
operator|.
name|getColumn
argument_list|()
argument_list|)
operator|+
name|Bytes
operator|.
name|SIZEOF_LONG
return|;
block|}
comment|/**    * @param b    * @return Length of buffer when its been serialized.    */
specifier|private
specifier|static
name|int
name|getSerializedSize
parameter_list|(
specifier|final
name|byte
index|[]
name|b
parameter_list|)
block|{
return|return
name|b
operator|==
literal|null
condition|?
literal|1
else|:
name|b
operator|.
name|length
operator|+
name|WritableUtils
operator|.
name|getVIntSize
argument_list|(
name|b
operator|.
name|length
argument_list|)
return|;
block|}
specifier|public
name|long
name|heapSize
parameter_list|()
block|{
return|return
name|getRow
argument_list|()
operator|.
name|length
operator|+
name|Bytes
operator|.
name|ESTIMATED_HEAP_TAX
operator|+
name|getColumn
argument_list|()
operator|.
name|length
operator|+
name|Bytes
operator|.
name|ESTIMATED_HEAP_TAX
operator|+
name|ESTIMATED_HEAP_TAX
return|;
block|}
comment|/**    * @return The bytes of<code>hsk</code> gotten by running its     * {@link Writable#write(java.io.DataOutput)} method.    * @throws IOException    */
specifier|public
name|byte
index|[]
name|getBytes
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getBytes
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**    * Return serialize<code>hsk</code> bytes.    * Note, this method's implementation has changed.  Used to just return    * row and column.  This is a customized version of    * {@link Writables#getBytes(Writable)}    * @param hsk Instance    * @return The bytes of<code>hsk</code> gotten by running its     * {@link Writable#write(java.io.DataOutput)} method.    * @throws IOException    */
specifier|public
specifier|static
name|byte
index|[]
name|getBytes
parameter_list|(
specifier|final
name|HStoreKey
name|hsk
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getBytes
argument_list|(
name|hsk
operator|.
name|getRow
argument_list|()
argument_list|,
name|hsk
operator|.
name|getColumn
argument_list|()
argument_list|,
name|hsk
operator|.
name|getTimestamp
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * @param row Can't be null    * @return Passed arguments as a serialized HSK.    * @throws IOException    */
specifier|public
specifier|static
name|byte
index|[]
name|getBytes
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getBytes
argument_list|(
name|row
argument_list|,
literal|null
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
return|;
block|}
comment|/**    * @param row Can't be null    * @param column Can be null    * @param ts    * @return Passed arguments as a serialized HSK.    * @throws IOException    */
specifier|public
specifier|static
name|byte
index|[]
name|getBytes
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|column
parameter_list|,
specifier|final
name|long
name|ts
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO: Get vint sizes as I calculate serialized size of hsk.
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|getSerializedSize
argument_list|(
name|row
argument_list|)
operator|+
name|getSerializedSize
argument_list|(
name|column
argument_list|)
operator|+
name|Bytes
operator|.
name|SIZEOF_LONG
index|]
decl_stmt|;
name|int
name|offset
init|=
name|Bytes
operator|.
name|writeByteArray
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|row
argument_list|,
literal|0
argument_list|,
name|row
operator|.
name|length
argument_list|)
decl_stmt|;
name|byte
index|[]
name|c
init|=
name|column
operator|==
literal|null
condition|?
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
else|:
name|column
decl_stmt|;
name|offset
operator|=
name|Bytes
operator|.
name|writeByteArray
argument_list|(
name|b
argument_list|,
name|offset
argument_list|,
name|c
argument_list|,
literal|0
argument_list|,
name|c
operator|.
name|length
argument_list|)
expr_stmt|;
name|byte
index|[]
name|timestamp
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|ts
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|timestamp
argument_list|,
literal|0
argument_list|,
name|b
argument_list|,
name|offset
argument_list|,
name|timestamp
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|b
return|;
block|}
comment|/**    * @param bb ByteBuffer that contains serialized HStoreKey    * @return Row    */
specifier|public
specifier|static
name|byte
index|[]
name|getRow
parameter_list|(
specifier|final
name|ByteBuffer
name|bb
parameter_list|)
block|{
name|byte
name|firstByte
init|=
name|bb
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|vint
init|=
name|firstByte
decl_stmt|;
name|int
name|vintWidth
init|=
name|WritableUtils
operator|.
name|decodeVIntSize
argument_list|(
name|firstByte
argument_list|)
decl_stmt|;
if|if
condition|(
name|vintWidth
operator|!=
literal|1
condition|)
block|{
name|vint
operator|=
name|getBigVint
argument_list|(
name|vintWidth
argument_list|,
name|firstByte
argument_list|,
name|bb
operator|.
name|array
argument_list|()
argument_list|,
name|bb
operator|.
name|arrayOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|vint
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|bb
operator|.
name|array
argument_list|()
argument_list|,
name|bb
operator|.
name|arrayOffset
argument_list|()
operator|+
name|vintWidth
argument_list|,
name|b
argument_list|,
literal|0
argument_list|,
name|vint
argument_list|)
expr_stmt|;
return|return
name|b
return|;
block|}
comment|/**    * @param bb ByteBuffer that contains serialized HStoreKey    * @return Column    */
specifier|public
specifier|static
name|byte
index|[]
name|getColumn
parameter_list|(
specifier|final
name|ByteBuffer
name|bb
parameter_list|)
block|{
comment|// Skip over row.
name|int
name|offset
init|=
name|skipVintdByteArray
argument_list|(
name|bb
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|byte
name|firstByte
init|=
name|bb
operator|.
name|get
argument_list|(
name|offset
argument_list|)
decl_stmt|;
name|int
name|vint
init|=
name|firstByte
decl_stmt|;
name|int
name|vintWidth
init|=
name|WritableUtils
operator|.
name|decodeVIntSize
argument_list|(
name|firstByte
argument_list|)
decl_stmt|;
if|if
condition|(
name|vintWidth
operator|!=
literal|1
condition|)
block|{
name|vint
operator|=
name|getBigVint
argument_list|(
name|vintWidth
argument_list|,
name|firstByte
argument_list|,
name|bb
operator|.
name|array
argument_list|()
argument_list|,
name|bb
operator|.
name|arrayOffset
argument_list|()
operator|+
name|offset
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|vint
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|bb
operator|.
name|array
argument_list|()
argument_list|,
name|bb
operator|.
name|arrayOffset
argument_list|()
operator|+
name|offset
operator|+
name|vintWidth
argument_list|,
name|b
argument_list|,
literal|0
argument_list|,
name|vint
argument_list|)
expr_stmt|;
return|return
name|b
return|;
block|}
comment|/**    * @param bb ByteBuffer that contains serialized HStoreKey    * @return Timestamp    */
specifier|public
specifier|static
name|long
name|getTimestamp
parameter_list|(
specifier|final
name|ByteBuffer
name|bb
parameter_list|)
block|{
return|return
name|bb
operator|.
name|getLong
argument_list|(
name|bb
operator|.
name|limit
argument_list|()
operator|-
name|Bytes
operator|.
name|SIZEOF_LONG
argument_list|)
return|;
block|}
comment|/*    * @param bb    * @param offset    * @return Amount to skip to get paste a byte array that is preceded by a    * vint of how long it is.    */
specifier|private
specifier|static
name|int
name|skipVintdByteArray
parameter_list|(
specifier|final
name|ByteBuffer
name|bb
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|)
block|{
name|byte
name|firstByte
init|=
name|bb
operator|.
name|get
argument_list|(
name|offset
argument_list|)
decl_stmt|;
name|int
name|vint
init|=
name|firstByte
decl_stmt|;
name|int
name|vintWidth
init|=
name|WritableUtils
operator|.
name|decodeVIntSize
argument_list|(
name|firstByte
argument_list|)
decl_stmt|;
if|if
condition|(
name|vintWidth
operator|!=
literal|1
condition|)
block|{
name|vint
operator|=
name|getBigVint
argument_list|(
name|vintWidth
argument_list|,
name|firstByte
argument_list|,
name|bb
operator|.
name|array
argument_list|()
argument_list|,
name|bb
operator|.
name|arrayOffset
argument_list|()
operator|+
name|offset
argument_list|)
expr_stmt|;
block|}
return|return
name|vint
operator|+
name|vintWidth
operator|+
name|offset
return|;
block|}
comment|/*    * Vint is wider than one byte.  Find out how much bigger it is.    * @param vintWidth    * @param firstByte    * @param buffer    * @param offset    * @return    */
specifier|static
name|int
name|getBigVint
parameter_list|(
specifier|final
name|int
name|vintWidth
parameter_list|,
specifier|final
name|byte
name|firstByte
parameter_list|,
specifier|final
name|byte
index|[]
name|buffer
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|)
block|{
name|long
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|vintWidth
operator|-
literal|1
condition|;
name|idx
operator|++
control|)
block|{
specifier|final
name|byte
name|b
init|=
name|buffer
index|[
name|offset
operator|+
literal|1
operator|+
name|idx
index|]
decl_stmt|;
name|i
operator|=
name|i
operator|<<
literal|8
expr_stmt|;
name|i
operator|=
name|i
operator||
operator|(
name|b
operator|&
literal|0xFF
operator|)
expr_stmt|;
block|}
name|i
operator|=
operator|(
name|WritableUtils
operator|.
name|isNegativeVInt
argument_list|(
name|firstByte
argument_list|)
condition|?
operator|(
name|i
operator|^
operator|-
literal|1L
operator|)
else|:
name|i
operator|)
expr_stmt|;
if|if
condition|(
name|i
operator|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Calculated vint too large"
argument_list|)
throw|;
block|}
return|return
operator|(
name|int
operator|)
name|i
return|;
block|}
comment|/**    * Create a store key.    * @param bb    * @return HStoreKey instance made of the passed<code>b</code>.    * @throws IOException    */
specifier|public
specifier|static
name|HStoreKey
name|create
parameter_list|(
specifier|final
name|ByteBuffer
name|bb
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|HStoreKey
operator|.
name|create
argument_list|(
name|bb
operator|.
name|array
argument_list|()
argument_list|,
name|bb
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|bb
operator|.
name|limit
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Create a store key.    * @param b Serialized HStoreKey; a byte array with a row only in it won't do.    * It must have all the vints denoting r/c/ts lengths.    * @return HStoreKey instance made of the passed<code>b</code>.    * @throws IOException    */
specifier|public
specifier|static
name|HStoreKey
name|create
parameter_list|(
specifier|final
name|byte
index|[]
name|b
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|create
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**    * Create a store key.    * @param b Serialized HStoreKey    * @param offset    * @param length    * @return HStoreKey instance made of the passed<code>b</code>.    * @throws IOException    */
specifier|public
specifier|static
name|HStoreKey
name|create
parameter_list|(
specifier|final
name|byte
index|[]
name|b
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|,
specifier|final
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
name|firstByte
init|=
name|b
index|[
name|offset
index|]
decl_stmt|;
name|int
name|vint
init|=
name|firstByte
decl_stmt|;
name|int
name|vintWidth
init|=
name|WritableUtils
operator|.
name|decodeVIntSize
argument_list|(
name|firstByte
argument_list|)
decl_stmt|;
if|if
condition|(
name|vintWidth
operator|!=
literal|1
condition|)
block|{
name|vint
operator|=
name|getBigVint
argument_list|(
name|vintWidth
argument_list|,
name|firstByte
argument_list|,
name|b
argument_list|,
name|offset
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|row
init|=
operator|new
name|byte
index|[
name|vint
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|b
argument_list|,
name|offset
operator|+
name|vintWidth
argument_list|,
name|row
argument_list|,
literal|0
argument_list|,
name|row
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Skip over row.
name|int
name|extraOffset
init|=
name|vint
operator|+
name|vintWidth
decl_stmt|;
name|firstByte
operator|=
name|b
index|[
name|offset
operator|+
name|extraOffset
index|]
expr_stmt|;
name|vint
operator|=
name|firstByte
expr_stmt|;
name|vintWidth
operator|=
name|WritableUtils
operator|.
name|decodeVIntSize
argument_list|(
name|firstByte
argument_list|)
expr_stmt|;
if|if
condition|(
name|vintWidth
operator|!=
literal|1
condition|)
block|{
name|vint
operator|=
name|getBigVint
argument_list|(
name|vintWidth
argument_list|,
name|firstByte
argument_list|,
name|b
argument_list|,
name|offset
operator|+
name|extraOffset
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|column
init|=
operator|new
name|byte
index|[
name|vint
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|b
argument_list|,
name|offset
operator|+
name|extraOffset
operator|+
name|vintWidth
argument_list|,
name|column
argument_list|,
literal|0
argument_list|,
name|column
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Skip over column
name|extraOffset
operator|+=
operator|(
name|vint
operator|+
name|vintWidth
operator|)
expr_stmt|;
return|return
operator|new
name|HStoreKey
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|Bytes
operator|.
name|toLong
argument_list|(
name|b
argument_list|,
name|offset
operator|+
name|extraOffset
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Passed as comparator for memcache and for store files.  See HBASE-868.    * Use this comparing keys in the -ROOT_ table.    */
specifier|public
specifier|static
class|class
name|HStoreKeyRootComparator
extends|extends
name|HStoreKeyMetaComparator
block|{
specifier|protected
name|int
name|compareRows
parameter_list|(
name|byte
index|[]
name|left
parameter_list|,
name|int
name|loffset
parameter_list|,
name|int
name|llength
parameter_list|,
name|byte
index|[]
name|right
parameter_list|,
name|int
name|roffset
parameter_list|,
name|int
name|rlength
parameter_list|)
block|{
return|return
name|compareRootRows
argument_list|(
name|left
argument_list|,
name|loffset
argument_list|,
name|llength
argument_list|,
name|right
argument_list|,
name|roffset
argument_list|,
name|rlength
argument_list|)
return|;
block|}
block|}
comment|/**    * Passed as comparator for memcache and for store files.  See HBASE-868.    * Use this comprator for keys in the .META. table.    */
specifier|public
specifier|static
class|class
name|HStoreKeyMetaComparator
extends|extends
name|HStoreKeyComparator
block|{
specifier|protected
name|int
name|compareRows
parameter_list|(
name|byte
index|[]
name|left
parameter_list|,
name|int
name|loffset
parameter_list|,
name|int
name|llength
parameter_list|,
name|byte
index|[]
name|right
parameter_list|,
name|int
name|roffset
parameter_list|,
name|int
name|rlength
parameter_list|)
block|{
return|return
name|compareMetaRows
argument_list|(
name|left
argument_list|,
name|loffset
argument_list|,
name|llength
argument_list|,
name|right
argument_list|,
name|roffset
argument_list|,
name|rlength
argument_list|)
return|;
block|}
block|}
comment|/**    * Passed as comparator for memcache and for store files.  See HBASE-868.    */
specifier|public
specifier|static
class|class
name|HStoreKeyComparator
extends|extends
name|WritableComparator
block|{
specifier|public
name|HStoreKeyComparator
parameter_list|()
block|{
name|super
argument_list|(
name|HStoreKey
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|int
name|compare
parameter_list|(
specifier|final
name|WritableComparable
name|l
parameter_list|,
specifier|final
name|WritableComparable
name|r
parameter_list|)
block|{
name|HStoreKey
name|left
init|=
operator|(
name|HStoreKey
operator|)
name|l
decl_stmt|;
name|HStoreKey
name|right
init|=
operator|(
name|HStoreKey
operator|)
name|r
decl_stmt|;
comment|// We can be passed null
if|if
condition|(
name|left
operator|==
literal|null
operator|&&
name|right
operator|==
literal|null
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|left
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|right
operator|==
literal|null
condition|)
return|return
literal|1
return|;
name|byte
index|[]
name|lrow
init|=
name|left
operator|.
name|getRow
argument_list|()
decl_stmt|;
name|byte
index|[]
name|rrow
init|=
name|right
operator|.
name|getRow
argument_list|()
decl_stmt|;
name|int
name|result
init|=
name|compareRows
argument_list|(
name|lrow
argument_list|,
literal|0
argument_list|,
name|lrow
operator|.
name|length
argument_list|,
name|rrow
argument_list|,
literal|0
argument_list|,
name|rrow
operator|.
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
return|return
name|result
return|;
block|}
name|result
operator|=
name|left
operator|.
name|getColumn
argument_list|()
operator|==
literal|null
operator|&&
name|right
operator|.
name|getColumn
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|left
operator|.
name|getColumn
argument_list|()
operator|==
literal|null
operator|&&
name|right
operator|.
name|getColumn
argument_list|()
operator|!=
literal|null
condition|?
operator|-
literal|1
else|:
name|left
operator|.
name|getColumn
argument_list|()
operator|!=
literal|null
operator|&&
name|right
operator|.
name|getColumn
argument_list|()
operator|==
literal|null
condition|?
literal|1
else|:
name|Bytes
operator|.
name|compareTo
argument_list|(
name|left
operator|.
name|getColumn
argument_list|()
argument_list|,
name|right
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
return|return
name|result
return|;
block|}
comment|// The below older timestamps sorting ahead of newer timestamps looks
comment|// wrong but it is intentional. This way, newer timestamps are first
comment|// found when we iterate over a memcache and newer versions are the
comment|// first we trip over when reading from a store file.
if|if
condition|(
name|left
operator|.
name|getTimestamp
argument_list|()
operator|<
name|right
operator|.
name|getTimestamp
argument_list|()
condition|)
block|{
name|result
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|left
operator|.
name|getTimestamp
argument_list|()
operator|>
name|right
operator|.
name|getTimestamp
argument_list|()
condition|)
block|{
name|result
operator|=
operator|-
literal|1
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|protected
name|int
name|compareRows
parameter_list|(
specifier|final
name|byte
index|[]
name|left
parameter_list|,
specifier|final
name|int
name|loffset
parameter_list|,
specifier|final
name|int
name|llength
parameter_list|,
specifier|final
name|byte
index|[]
name|right
parameter_list|,
specifier|final
name|int
name|roffset
parameter_list|,
specifier|final
name|int
name|rlength
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|compareTo
argument_list|(
name|left
argument_list|,
name|loffset
argument_list|,
name|llength
argument_list|,
name|right
argument_list|,
name|roffset
argument_list|,
name|rlength
argument_list|)
return|;
block|}
block|}
comment|/**    * StoreKeyComparator for the -ROOT- table.    */
specifier|public
specifier|static
class|class
name|RootStoreKeyComparator
extends|extends
name|MetaStoreKeyComparator
block|{
specifier|public
name|int
name|compareRows
parameter_list|(
name|byte
index|[]
name|left
parameter_list|,
name|int
name|loffset
parameter_list|,
name|int
name|llength
parameter_list|,
name|byte
index|[]
name|right
parameter_list|,
name|int
name|roffset
parameter_list|,
name|int
name|rlength
parameter_list|)
block|{
return|return
name|compareRootRows
argument_list|(
name|left
argument_list|,
name|loffset
argument_list|,
name|llength
argument_list|,
name|right
argument_list|,
name|roffset
argument_list|,
name|rlength
argument_list|)
return|;
block|}
block|}
comment|/**    * StoreKeyComparator for the .META. table.    */
specifier|public
specifier|static
class|class
name|MetaStoreKeyComparator
extends|extends
name|StoreKeyComparator
block|{
specifier|public
name|int
name|compareRows
parameter_list|(
name|byte
index|[]
name|left
parameter_list|,
name|int
name|loffset
parameter_list|,
name|int
name|llength
parameter_list|,
name|byte
index|[]
name|right
parameter_list|,
name|int
name|roffset
parameter_list|,
name|int
name|rlength
parameter_list|)
block|{
return|return
name|compareMetaRows
argument_list|(
name|left
argument_list|,
name|loffset
argument_list|,
name|llength
argument_list|,
name|right
argument_list|,
name|roffset
argument_list|,
name|rlength
argument_list|)
return|;
block|}
block|}
comment|/*    * @param left    * @param loffset    * @param llength    * @param right    * @param roffset    * @param rlength    * @return Result of comparing two rows from the -ROOT- table both of which    * are of the form .META.,(TABLE,REGIONNAME,REGIONID),REGIONID.    */
specifier|protected
specifier|static
name|int
name|compareRootRows
parameter_list|(
name|byte
index|[]
name|left
parameter_list|,
name|int
name|loffset
parameter_list|,
name|int
name|llength
parameter_list|,
name|byte
index|[]
name|right
parameter_list|,
name|int
name|roffset
parameter_list|,
name|int
name|rlength
parameter_list|)
block|{
comment|// Rows look like this: .META.,ROW_FROM_META,RID
comment|// System.out.println("ROOT " + Bytes.toString(left, loffset, llength) +
comment|//  "---" + Bytes.toString(right, roffset, rlength));
name|int
name|lmetaOffsetPlusDelimiter
init|=
name|loffset
operator|+
literal|7
decl_stmt|;
comment|// '.META.,'
name|int
name|leftFarDelimiter
init|=
name|getDelimiterInReverse
argument_list|(
name|left
argument_list|,
name|lmetaOffsetPlusDelimiter
argument_list|,
name|llength
operator|-
name|lmetaOffsetPlusDelimiter
argument_list|,
name|HRegionInfo
operator|.
name|DELIMITER
argument_list|)
decl_stmt|;
name|int
name|rmetaOffsetPlusDelimiter
init|=
name|roffset
operator|+
literal|7
decl_stmt|;
comment|// '.META.,'
name|int
name|rightFarDelimiter
init|=
name|getDelimiterInReverse
argument_list|(
name|right
argument_list|,
name|rmetaOffsetPlusDelimiter
argument_list|,
name|rlength
operator|-
name|rmetaOffsetPlusDelimiter
argument_list|,
name|HRegionInfo
operator|.
name|DELIMITER
argument_list|)
decl_stmt|;
if|if
condition|(
name|leftFarDelimiter
operator|<
literal|0
operator|&&
name|rightFarDelimiter
operator|>=
literal|0
condition|)
block|{
comment|// Nothing between .META. and regionid.  Its first key.
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|rightFarDelimiter
operator|<
literal|0
operator|&&
name|leftFarDelimiter
operator|>=
literal|0
condition|)
block|{
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|leftFarDelimiter
operator|<
literal|0
operator|&&
name|rightFarDelimiter
operator|<
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
name|int
name|result
init|=
name|compareMetaRows
argument_list|(
name|left
argument_list|,
name|lmetaOffsetPlusDelimiter
argument_list|,
name|leftFarDelimiter
operator|-
name|lmetaOffsetPlusDelimiter
argument_list|,
name|right
argument_list|,
name|rmetaOffsetPlusDelimiter
argument_list|,
name|rightFarDelimiter
operator|-
name|rmetaOffsetPlusDelimiter
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
return|return
name|result
return|;
block|}
comment|// Compare last part of row, the rowid.
name|leftFarDelimiter
operator|++
expr_stmt|;
name|rightFarDelimiter
operator|++
expr_stmt|;
name|result
operator|=
name|compareRowid
argument_list|(
name|left
argument_list|,
name|leftFarDelimiter
argument_list|,
name|llength
operator|-
name|leftFarDelimiter
argument_list|,
name|right
argument_list|,
name|rightFarDelimiter
argument_list|,
name|rlength
operator|-
name|rightFarDelimiter
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/*    * @param left    * @param loffset    * @param llength    * @param right    * @param roffset    * @param rlength    * @return Result of comparing two rows from the .META. table both of which    * are of the form TABLE,REGIONNAME,REGIONID.    */
specifier|protected
specifier|static
name|int
name|compareMetaRows
parameter_list|(
specifier|final
name|byte
index|[]
name|left
parameter_list|,
specifier|final
name|int
name|loffset
parameter_list|,
specifier|final
name|int
name|llength
parameter_list|,
specifier|final
name|byte
index|[]
name|right
parameter_list|,
specifier|final
name|int
name|roffset
parameter_list|,
specifier|final
name|int
name|rlength
parameter_list|)
block|{
comment|//    System.out.println("META " + Bytes.toString(left, loffset, llength) +
comment|//      "---" + Bytes.toString(right, roffset, rlength));
name|int
name|leftDelimiter
init|=
name|getDelimiter
argument_list|(
name|left
argument_list|,
name|loffset
argument_list|,
name|llength
argument_list|,
name|HRegionInfo
operator|.
name|DELIMITER
argument_list|)
decl_stmt|;
name|int
name|rightDelimiter
init|=
name|getDelimiter
argument_list|(
name|right
argument_list|,
name|roffset
argument_list|,
name|rlength
argument_list|,
name|HRegionInfo
operator|.
name|DELIMITER
argument_list|)
decl_stmt|;
if|if
condition|(
name|leftDelimiter
operator|<
literal|0
operator|&&
name|rightDelimiter
operator|>=
literal|0
condition|)
block|{
comment|// Nothing between .META. and regionid.  Its first key.
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|rightDelimiter
operator|<
literal|0
operator|&&
name|leftDelimiter
operator|>=
literal|0
condition|)
block|{
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|leftDelimiter
operator|<
literal|0
operator|&&
name|rightDelimiter
operator|<
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
comment|// Compare up to the delimiter
name|int
name|result
init|=
name|Bytes
operator|.
name|compareTo
argument_list|(
name|left
argument_list|,
name|loffset
argument_list|,
name|leftDelimiter
operator|-
name|loffset
argument_list|,
name|right
argument_list|,
name|roffset
argument_list|,
name|rightDelimiter
operator|-
name|roffset
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
return|return
name|result
return|;
block|}
comment|// Compare middle bit of the row.
comment|// Move past delimiter
name|leftDelimiter
operator|++
expr_stmt|;
name|rightDelimiter
operator|++
expr_stmt|;
name|int
name|leftFarDelimiter
init|=
name|getRequiredDelimiterInReverse
argument_list|(
name|left
argument_list|,
name|leftDelimiter
argument_list|,
name|llength
operator|-
operator|(
name|leftDelimiter
operator|-
name|loffset
operator|)
argument_list|,
name|HRegionInfo
operator|.
name|DELIMITER
argument_list|)
decl_stmt|;
name|int
name|rightFarDelimiter
init|=
name|getRequiredDelimiterInReverse
argument_list|(
name|right
argument_list|,
name|rightDelimiter
argument_list|,
name|rlength
operator|-
operator|(
name|rightDelimiter
operator|-
name|roffset
operator|)
argument_list|,
name|HRegionInfo
operator|.
name|DELIMITER
argument_list|)
decl_stmt|;
comment|// Now compare middlesection of row.
name|result
operator|=
name|Bytes
operator|.
name|compareTo
argument_list|(
name|left
argument_list|,
name|leftDelimiter
argument_list|,
name|leftFarDelimiter
operator|-
name|leftDelimiter
argument_list|,
name|right
argument_list|,
name|rightDelimiter
argument_list|,
name|rightFarDelimiter
operator|-
name|rightDelimiter
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
return|return
name|result
return|;
block|}
comment|// Compare last part of row, the rowid.
name|leftFarDelimiter
operator|++
expr_stmt|;
name|rightFarDelimiter
operator|++
expr_stmt|;
name|result
operator|=
name|compareRowid
argument_list|(
name|left
argument_list|,
name|leftFarDelimiter
argument_list|,
name|llength
operator|-
operator|(
name|leftFarDelimiter
operator|-
name|loffset
operator|)
argument_list|,
name|right
argument_list|,
name|rightFarDelimiter
argument_list|,
name|rlength
operator|-
operator|(
name|rightFarDelimiter
operator|-
name|roffset
operator|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|private
specifier|static
name|int
name|compareRowid
parameter_list|(
name|byte
index|[]
name|left
parameter_list|,
name|int
name|loffset
parameter_list|,
name|int
name|llength
parameter_list|,
name|byte
index|[]
name|right
parameter_list|,
name|int
name|roffset
parameter_list|,
name|int
name|rlength
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|compareTo
argument_list|(
name|left
argument_list|,
name|loffset
argument_list|,
name|llength
argument_list|,
name|right
argument_list|,
name|roffset
argument_list|,
name|rlength
argument_list|)
return|;
block|}
comment|/**    * RawComparator for plain -- i.e. non-catalog table keys such as     * -ROOT- and .META. -- HStoreKeys.  Compares at byte level.  Knows how to    * handle the vints that introduce row and columns in the HSK byte array    * representation. Adds    * {@link #compareRows(byte[], int, int, byte[], int, int)} to    * {@link RawComparator}    */
specifier|public
specifier|static
class|class
name|StoreKeyComparator
implements|implements
name|RawComparator
argument_list|<
name|byte
index|[]
argument_list|>
block|{
specifier|public
name|StoreKeyComparator
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|compare
parameter_list|(
specifier|final
name|byte
index|[]
name|b1
parameter_list|,
specifier|final
name|byte
index|[]
name|b2
parameter_list|)
block|{
return|return
name|compare
argument_list|(
name|b1
argument_list|,
literal|0
argument_list|,
name|b1
operator|.
name|length
argument_list|,
name|b2
argument_list|,
literal|0
argument_list|,
name|b2
operator|.
name|length
argument_list|)
return|;
block|}
specifier|public
name|int
name|compare
parameter_list|(
specifier|final
name|byte
index|[]
name|b1
parameter_list|,
name|int
name|o1
parameter_list|,
name|int
name|l1
parameter_list|,
specifier|final
name|byte
index|[]
name|b2
parameter_list|,
name|int
name|o2
parameter_list|,
name|int
name|l2
parameter_list|)
block|{
comment|// Below is byte compare without creating new objects.  Its awkward but
comment|// seems no way around getting vint width, value, and compare result any
comment|// other way. The passed byte arrays, b1 and b2, have a vint, row, vint,
comment|// column, timestamp in them.  The byte array was written by the
comment|// #write(DataOutputStream) method above. See it to better understand the
comment|// below.
comment|// Calculate vint and vint width for rows in b1 and b2.
name|byte
name|firstByte1
init|=
name|b1
index|[
name|o1
index|]
decl_stmt|;
name|int
name|vint1
init|=
name|firstByte1
decl_stmt|;
name|int
name|vintWidth1
init|=
name|WritableUtils
operator|.
name|decodeVIntSize
argument_list|(
name|firstByte1
argument_list|)
decl_stmt|;
if|if
condition|(
name|vintWidth1
operator|!=
literal|1
condition|)
block|{
name|vint1
operator|=
name|getBigVint
argument_list|(
name|vintWidth1
argument_list|,
name|firstByte1
argument_list|,
name|b1
argument_list|,
name|o1
argument_list|)
expr_stmt|;
block|}
name|byte
name|firstByte2
init|=
name|b2
index|[
name|o2
index|]
decl_stmt|;
name|int
name|vint2
init|=
name|firstByte2
decl_stmt|;
name|int
name|vintWidth2
init|=
name|WritableUtils
operator|.
name|decodeVIntSize
argument_list|(
name|firstByte2
argument_list|)
decl_stmt|;
if|if
condition|(
name|vintWidth2
operator|!=
literal|1
condition|)
block|{
name|vint2
operator|=
name|getBigVint
argument_list|(
name|vintWidth2
argument_list|,
name|firstByte2
argument_list|,
name|b2
argument_list|,
name|o2
argument_list|)
expr_stmt|;
block|}
comment|// Compare the rows.
name|int
name|result
init|=
name|compareRows
argument_list|(
name|b1
argument_list|,
name|o1
operator|+
name|vintWidth1
argument_list|,
name|vint1
argument_list|,
name|b2
argument_list|,
name|o2
operator|+
name|vintWidth2
argument_list|,
name|vint2
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
return|return
name|result
return|;
block|}
comment|// Update offsets and lengths so we are aligned on columns.
name|int
name|diff1
init|=
name|vintWidth1
operator|+
name|vint1
decl_stmt|;
name|o1
operator|+=
name|diff1
expr_stmt|;
name|l1
operator|-=
name|diff1
expr_stmt|;
name|int
name|diff2
init|=
name|vintWidth2
operator|+
name|vint2
decl_stmt|;
name|o2
operator|+=
name|diff2
expr_stmt|;
name|l2
operator|-=
name|diff2
expr_stmt|;
comment|// Calculate vint and vint width for columns in b1 and b2.
name|firstByte1
operator|=
name|b1
index|[
name|o1
index|]
expr_stmt|;
name|vint1
operator|=
name|firstByte1
expr_stmt|;
name|vintWidth1
operator|=
name|WritableUtils
operator|.
name|decodeVIntSize
argument_list|(
name|firstByte1
argument_list|)
expr_stmt|;
if|if
condition|(
name|vintWidth1
operator|!=
literal|1
condition|)
block|{
name|vint1
operator|=
name|getBigVint
argument_list|(
name|vintWidth1
argument_list|,
name|firstByte1
argument_list|,
name|b1
argument_list|,
name|o1
argument_list|)
expr_stmt|;
block|}
name|firstByte2
operator|=
name|b2
index|[
name|o2
index|]
expr_stmt|;
name|vint2
operator|=
name|firstByte2
expr_stmt|;
name|vintWidth2
operator|=
name|WritableUtils
operator|.
name|decodeVIntSize
argument_list|(
name|firstByte2
argument_list|)
expr_stmt|;
if|if
condition|(
name|vintWidth2
operator|!=
literal|1
condition|)
block|{
name|vint2
operator|=
name|getBigVint
argument_list|(
name|vintWidth2
argument_list|,
name|firstByte2
argument_list|,
name|b2
argument_list|,
name|o2
argument_list|)
expr_stmt|;
block|}
comment|// Compare columns.
comment|// System.out.println("COL<" + Bytes.toString(b1, o1 + vintWidth1, vint1) +
comment|//  "><" + Bytes.toString(b2, o2 + vintWidth2, vint2) + ">");
name|result
operator|=
name|Bytes
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|,
name|o1
operator|+
name|vintWidth1
argument_list|,
name|vint1
argument_list|,
name|b2
argument_list|,
name|o2
operator|+
name|vintWidth2
argument_list|,
name|vint2
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
return|return
name|result
return|;
block|}
comment|// Update offsets and lengths.
name|diff1
operator|=
name|vintWidth1
operator|+
name|vint1
expr_stmt|;
name|o1
operator|+=
name|diff1
expr_stmt|;
name|l1
operator|-=
name|diff1
expr_stmt|;
name|diff2
operator|=
name|vintWidth2
operator|+
name|vint2
expr_stmt|;
name|o2
operator|+=
name|diff2
expr_stmt|;
name|l2
operator|-=
name|diff2
expr_stmt|;
comment|// The below older timestamps sorting ahead of newer timestamps looks
comment|// wrong but it is intentional. This way, newer timestamps are first
comment|// found when we iterate over a memcache and newer versions are the
comment|// first we trip over when reading from a store file.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|l1
condition|;
name|i
operator|++
control|)
block|{
name|int
name|leftb
init|=
name|b1
index|[
name|o1
operator|+
name|i
index|]
operator|&
literal|0xff
decl_stmt|;
name|int
name|rightb
init|=
name|b2
index|[
name|o2
operator|+
name|i
index|]
operator|&
literal|0xff
decl_stmt|;
if|if
condition|(
name|leftb
operator|<
name|rightb
condition|)
block|{
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|leftb
operator|>
name|rightb
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
comment|/**      * @param left      * @param right      * @return Result comparing rows.      */
specifier|public
name|int
name|compareRows
parameter_list|(
specifier|final
name|byte
index|[]
name|left
parameter_list|,
specifier|final
name|byte
index|[]
name|right
parameter_list|)
block|{
return|return
name|compareRows
argument_list|(
name|left
argument_list|,
literal|0
argument_list|,
name|left
operator|.
name|length
argument_list|,
name|right
argument_list|,
literal|0
argument_list|,
name|right
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**      * @param left      * @param loffset      * @param llength      * @param right      * @param roffset      * @param rlength      * @return Result comparing rows.      */
specifier|public
name|int
name|compareRows
parameter_list|(
specifier|final
name|byte
index|[]
name|left
parameter_list|,
specifier|final
name|int
name|loffset
parameter_list|,
specifier|final
name|int
name|llength
parameter_list|,
specifier|final
name|byte
index|[]
name|right
parameter_list|,
specifier|final
name|int
name|roffset
parameter_list|,
specifier|final
name|int
name|rlength
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|compareTo
argument_list|(
name|left
argument_list|,
name|loffset
argument_list|,
name|llength
argument_list|,
name|right
argument_list|,
name|roffset
argument_list|,
name|rlength
argument_list|)
return|;
block|}
block|}
comment|/**    * @param hri    * @return Compatible comparator    */
specifier|public
specifier|static
name|WritableComparator
name|getWritableComparator
parameter_list|(
specifier|final
name|HRegionInfo
name|hri
parameter_list|)
block|{
return|return
name|hri
operator|.
name|isRootRegion
argument_list|()
condition|?
operator|new
name|HStoreKey
operator|.
name|HStoreKeyRootComparator
argument_list|()
else|:
name|hri
operator|.
name|isMetaRegion
argument_list|()
condition|?
operator|new
name|HStoreKey
operator|.
name|HStoreKeyMetaComparator
argument_list|()
else|:
operator|new
name|HStoreKey
operator|.
name|HStoreKeyComparator
argument_list|()
return|;
block|}
comment|/**    * @param hri    * @return Compatible raw comparator    */
specifier|public
specifier|static
name|StoreKeyComparator
name|getRawComparator
parameter_list|(
specifier|final
name|HRegionInfo
name|hri
parameter_list|)
block|{
return|return
name|hri
operator|.
name|isRootRegion
argument_list|()
condition|?
name|ROOT_COMPARATOR
else|:
name|hri
operator|.
name|isMetaRegion
argument_list|()
condition|?
name|META_COMPARATOR
else|:
name|META_COMPARATOR
return|;
block|}
comment|/**    * @param tablename    * @return Compatible raw comparator    */
specifier|public
specifier|static
name|HStoreKey
operator|.
name|StoreKeyComparator
name|getComparator
parameter_list|(
specifier|final
name|byte
index|[]
name|tablename
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|equals
argument_list|(
name|HTableDescriptor
operator|.
name|ROOT_TABLEDESC
operator|.
name|getName
argument_list|()
argument_list|,
name|tablename
argument_list|)
condition|?
name|ROOT_COMPARATOR
else|:
operator|(
name|Bytes
operator|.
name|equals
argument_list|(
name|HTableDescriptor
operator|.
name|META_TABLEDESC
operator|.
name|getName
argument_list|()
argument_list|,
name|tablename
argument_list|)
operator|)
condition|?
name|META_COMPARATOR
else|:
name|PLAIN_COMPARATOR
return|;
block|}
block|}
end_class

end_unit

