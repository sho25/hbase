begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hql
operator|.
name|generated
operator|.
name|HQLParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hql
operator|.
name|generated
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hql
operator|.
name|generated
operator|.
name|TokenMgrError
import|;
end_import

begin_comment
comment|/**  * HQL query language service client interfaces.  */
end_comment

begin_class
specifier|public
class|class
name|HQLClient
block|{
specifier|static
name|HBaseConfiguration
name|conf
decl_stmt|;
specifier|static
name|TableFormatter
name|tableFormatter
init|=
literal|null
decl_stmt|;
specifier|static
name|Writer
name|out
init|=
literal|null
decl_stmt|;
comment|/**    * Constructor    *      * @param config HBaseConfiguration    * @param ip IP Address    * @param port port number    * @param writer writer    * @param formatter table formatter    */
specifier|public
name|HQLClient
parameter_list|(
name|HBaseConfiguration
name|config
parameter_list|,
name|String
name|ip
parameter_list|,
name|int
name|port
parameter_list|,
name|Writer
name|writer
parameter_list|,
name|TableFormatter
name|formatter
parameter_list|)
block|{
name|conf
operator|=
name|config
expr_stmt|;
if|if
condition|(
name|ip
operator|!=
literal|null
operator|&&
name|port
operator|!=
operator|-
literal|1
condition|)
name|conf
operator|.
name|set
argument_list|(
literal|"hbase.master"
argument_list|,
name|ip
operator|+
literal|":"
operator|+
name|port
argument_list|)
expr_stmt|;
name|out
operator|=
name|writer
expr_stmt|;
name|tableFormatter
operator|=
name|formatter
expr_stmt|;
block|}
comment|/**    * Executes query.    *     * @param query    * @return ReturnMsg object    */
specifier|public
name|ReturnMsg
name|executeQuery
parameter_list|(
name|String
name|query
parameter_list|)
block|{
name|HQLParser
name|parser
init|=
operator|new
name|HQLParser
argument_list|(
name|query
argument_list|,
name|out
argument_list|,
name|tableFormatter
argument_list|)
decl_stmt|;
name|ReturnMsg
name|msg
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Command
name|cmd
init|=
name|parser
operator|.
name|terminatedCommand
argument_list|()
decl_stmt|;
if|if
condition|(
name|cmd
operator|!=
literal|null
condition|)
block|{
name|msg
operator|=
name|cmd
operator|.
name|execute
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ParseException
name|pe
parameter_list|)
block|{
name|msg
operator|=
operator|new
name|ReturnMsg
argument_list|(
name|Constants
operator|.
name|ERROR_CODE
argument_list|,
literal|"Syntax error : Type 'help;' for usage."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TokenMgrError
name|te
parameter_list|)
block|{
name|msg
operator|=
operator|new
name|ReturnMsg
argument_list|(
name|Constants
operator|.
name|ERROR_CODE
argument_list|,
literal|"Lexical error : Type 'help;' for usage."
argument_list|)
expr_stmt|;
block|}
return|return
name|msg
return|;
block|}
block|}
end_class

end_unit

