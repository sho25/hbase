begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|BloomFilterDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|BloomFilterDescriptor
operator|.
name|BloomFilterType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * The base class of schema modification commands, CreateCommand and Alter  * Command. Provides utility methods for alteration operations.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|SchemaModificationCommand
extends|extends
name|BasicCommand
block|{
specifier|protected
name|int
name|maxVersions
decl_stmt|;
specifier|protected
name|int
name|maxLength
decl_stmt|;
specifier|protected
name|HColumnDescriptor
operator|.
name|CompressionType
name|compression
decl_stmt|;
specifier|protected
name|boolean
name|inMemory
decl_stmt|;
specifier|protected
name|boolean
name|blockCacheEnabled
decl_stmt|;
specifier|protected
name|BloomFilterDescriptor
name|bloomFilterDesc
decl_stmt|;
specifier|protected
name|BloomFilterType
name|bloomFilterType
decl_stmt|;
specifier|protected
name|int
name|vectorSize
decl_stmt|;
specifier|protected
name|int
name|numHash
decl_stmt|;
specifier|protected
name|int
name|numEntries
decl_stmt|;
specifier|protected
name|int
name|timeToLive
decl_stmt|;
specifier|public
name|SchemaModificationCommand
parameter_list|(
name|Writer
name|o
parameter_list|)
block|{
name|super
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|initOptions
parameter_list|()
block|{
name|maxVersions
operator|=
name|HColumnDescriptor
operator|.
name|DEFAULT_N_VERSIONS
expr_stmt|;
name|maxLength
operator|=
name|HColumnDescriptor
operator|.
name|DEFAULT_MAX_VALUE_LENGTH
expr_stmt|;
name|compression
operator|=
name|HColumnDescriptor
operator|.
name|DEFAULT_COMPRESSION_TYPE
expr_stmt|;
name|inMemory
operator|=
name|HColumnDescriptor
operator|.
name|DEFAULT_IN_MEMORY
expr_stmt|;
name|blockCacheEnabled
operator|=
name|HColumnDescriptor
operator|.
name|DEFAULT_BLOCK_CACHE_ENABLED
expr_stmt|;
name|bloomFilterDesc
operator|=
name|HColumnDescriptor
operator|.
name|DEFAULT_BLOOM_FILTER_DESCRIPTOR
expr_stmt|;
name|timeToLive
operator|=
name|HColumnDescriptor
operator|.
name|DEFAULT_TIME_TO_LIVE
expr_stmt|;
block|}
comment|/**    * Given a column name and column spec, returns an instance of    * HColumnDescriptor representing the column spec.    */
specifier|protected
name|HColumnDescriptor
name|getColumnDescriptor
parameter_list|(
name|String
name|column
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|columnSpec
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|initOptions
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|specs
init|=
name|columnSpec
operator|.
name|keySet
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|spec
range|:
name|specs
control|)
block|{
name|spec
operator|=
name|spec
operator|.
name|toUpperCase
argument_list|()
expr_stmt|;
if|if
condition|(
name|spec
operator|.
name|equals
argument_list|(
literal|"MAX_VERSIONS"
argument_list|)
condition|)
block|{
name|maxVersions
operator|=
operator|(
name|Integer
operator|)
name|columnSpec
operator|.
name|get
argument_list|(
name|spec
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|spec
operator|.
name|equals
argument_list|(
literal|"MAX_LENGTH"
argument_list|)
condition|)
block|{
name|maxLength
operator|=
operator|(
name|Integer
operator|)
name|columnSpec
operator|.
name|get
argument_list|(
name|spec
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|spec
operator|.
name|equals
argument_list|(
literal|"COMPRESSION"
argument_list|)
condition|)
block|{
name|compression
operator|=
name|HColumnDescriptor
operator|.
name|CompressionType
operator|.
name|valueOf
argument_list|(
operator|(
operator|(
name|String
operator|)
name|columnSpec
operator|.
name|get
argument_list|(
name|spec
argument_list|)
operator|)
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|spec
operator|.
name|equals
argument_list|(
literal|"IN_MEMORY"
argument_list|)
condition|)
block|{
name|inMemory
operator|=
operator|(
name|Boolean
operator|)
name|columnSpec
operator|.
name|get
argument_list|(
name|spec
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|spec
operator|.
name|equals
argument_list|(
literal|"BLOCK_CACHE_ENABLED"
argument_list|)
condition|)
block|{
name|blockCacheEnabled
operator|=
operator|(
name|Boolean
operator|)
name|columnSpec
operator|.
name|get
argument_list|(
name|spec
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|spec
operator|.
name|equals
argument_list|(
literal|"BLOOMFILTER"
argument_list|)
condition|)
block|{
name|bloomFilterType
operator|=
name|BloomFilterType
operator|.
name|valueOf
argument_list|(
operator|(
operator|(
name|String
operator|)
name|columnSpec
operator|.
name|get
argument_list|(
name|spec
argument_list|)
operator|)
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|spec
operator|.
name|equals
argument_list|(
literal|"VECTOR_SIZE"
argument_list|)
condition|)
block|{
name|vectorSize
operator|=
operator|(
name|Integer
operator|)
name|columnSpec
operator|.
name|get
argument_list|(
name|spec
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|spec
operator|.
name|equals
argument_list|(
literal|"NUM_HASH"
argument_list|)
condition|)
block|{
name|numHash
operator|=
operator|(
name|Integer
operator|)
name|columnSpec
operator|.
name|get
argument_list|(
name|spec
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|spec
operator|.
name|equals
argument_list|(
literal|"NUM_ENTRIES"
argument_list|)
condition|)
block|{
name|numEntries
operator|=
operator|(
name|Integer
operator|)
name|columnSpec
operator|.
name|get
argument_list|(
name|spec
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|spec
operator|.
name|equals
argument_list|(
literal|"TTL"
argument_list|)
condition|)
block|{
name|timeToLive
operator|=
operator|(
name|Integer
operator|)
name|columnSpec
operator|.
name|get
argument_list|(
name|spec
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid option: "
operator|+
name|spec
argument_list|)
throw|;
block|}
block|}
comment|// Now we gather all the specified options for this column.
if|if
condition|(
name|bloomFilterType
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|specs
operator|.
name|contains
argument_list|(
literal|"NUM_ENTRIES"
argument_list|)
condition|)
block|{
name|bloomFilterDesc
operator|=
operator|new
name|BloomFilterDescriptor
argument_list|(
name|bloomFilterType
argument_list|,
name|numEntries
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bloomFilterDesc
operator|=
operator|new
name|BloomFilterDescriptor
argument_list|(
name|bloomFilterType
argument_list|,
name|vectorSize
argument_list|,
name|numHash
argument_list|)
expr_stmt|;
block|}
block|}
name|column
operator|=
name|appendDelimiter
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|HColumnDescriptor
name|columnDesc
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|column
operator|.
name|getBytes
argument_list|()
argument_list|,
name|maxVersions
argument_list|,
name|compression
argument_list|,
name|inMemory
argument_list|,
name|blockCacheEnabled
argument_list|,
name|maxLength
argument_list|,
name|timeToLive
argument_list|,
name|bloomFilterDesc
argument_list|)
decl_stmt|;
return|return
name|columnDesc
return|;
block|}
block|}
end_class

end_unit

