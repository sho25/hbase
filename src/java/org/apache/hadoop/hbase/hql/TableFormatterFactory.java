begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hql
operator|.
name|formatter
operator|.
name|AsciiTableFormatter
import|;
end_import

begin_comment
comment|/**  * Table formatter. Specify formatter by setting "hbaseshell.formatter" property  * in<code>hbase-site.xml</code> or by setting system property  *<code>hbaseshell.formatter</code>. System property setting prevails over  * all other configurations. Outputs UTF-8 encoded Strings even if original data  * is binary. On static initialization, changes System.out to be a UTF-8 output  * stream. .  *<p>  * TODO: Mysql has --skip-column-names and --silent which inserts a tab as  * separator. Also has --html and --xml.  *<p>  * To use the html formatter, currently set HBASE_OPTS as in:  *<code>$ HBASE_OPTS="-Dhbaseshell.formatter=org.apache.hadoop.hbase.shell.formatter.HtmlTableFormatter" ./bin/hbase shell</code>  *</p>  */
end_comment

begin_class
specifier|public
class|class
name|TableFormatterFactory
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TableFormatterFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FORMATTER_KEY
init|=
literal|"hbaseshell.formatter"
decl_stmt|;
specifier|private
specifier|final
name|TableFormatter
name|formatter
decl_stmt|;
comment|/**    * Not instantiable    */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"unused"
block|}
argument_list|)
specifier|private
name|TableFormatterFactory
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|TableFormatterFactory
parameter_list|(
specifier|final
name|Writer
name|out
parameter_list|,
specifier|final
name|Configuration
name|c
parameter_list|)
block|{
name|String
name|className
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|FORMATTER_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|className
operator|==
literal|null
condition|)
block|{
name|className
operator|=
name|c
operator|.
name|get
argument_list|(
name|FORMATTER_KEY
argument_list|,
name|AsciiTableFormatter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Table formatter class: "
operator|+
name|className
argument_list|)
expr_stmt|;
try|try
block|{
name|Class
argument_list|<
name|TableFormatter
argument_list|>
name|clazz
init|=
operator|(
name|Class
argument_list|<
name|TableFormatter
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
decl_stmt|;
name|Constructor
argument_list|<
name|?
argument_list|>
name|constructor
init|=
name|clazz
operator|.
name|getConstructor
argument_list|(
name|Writer
operator|.
name|class
argument_list|)
decl_stmt|;
name|this
operator|.
name|formatter
operator|=
operator|(
name|TableFormatter
operator|)
name|constructor
operator|.
name|newInstance
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed instantiation of "
operator|+
name|className
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * @return The table formatter instance    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|TableFormatter
name|get
parameter_list|()
block|{
return|return
name|this
operator|.
name|formatter
return|;
block|}
block|}
end_class

end_unit

