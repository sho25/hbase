begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MasterNotRunningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|BatchUpdate
import|;
end_import

begin_comment
comment|/**  * Inserts values into tables.  */
end_comment

begin_class
specifier|public
class|class
name|InsertCommand
extends|extends
name|BasicCommand
block|{
specifier|private
name|Text
name|tableName
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|columnfamilies
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|values
decl_stmt|;
specifier|private
name|String
name|rowKey
decl_stmt|;
specifier|private
name|String
name|timestamp
init|=
literal|null
decl_stmt|;
specifier|public
name|InsertCommand
parameter_list|(
name|Writer
name|o
parameter_list|)
block|{
name|super
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ReturnMsg
name|execute
parameter_list|(
name|HBaseConfiguration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|tableName
operator|==
literal|null
operator|||
name|values
operator|==
literal|null
operator|||
name|rowKey
operator|==
literal|null
condition|)
return|return
operator|new
name|ReturnMsg
argument_list|(
literal|0
argument_list|,
literal|"Syntax error : Please check 'Insert' syntax."
argument_list|)
return|;
try|try
block|{
name|HBaseAdmin
name|admin
init|=
operator|new
name|HBaseAdmin
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|admin
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
return|return
operator|new
name|ReturnMsg
argument_list|(
literal|0
argument_list|,
literal|"'"
operator|+
name|tableName
operator|+
literal|"'"
operator|+
name|TABLE_NOT_FOUND
argument_list|)
return|;
block|}
if|if
condition|(
name|columnfamilies
operator|.
name|size
argument_list|()
operator|!=
name|values
operator|.
name|size
argument_list|()
condition|)
return|return
operator|new
name|ReturnMsg
argument_list|(
literal|0
argument_list|,
literal|"Mismatch between values list and columnfamilies list."
argument_list|)
return|;
try|try
block|{
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|BatchUpdate
name|batchUpdate
init|=
name|timestamp
operator|==
literal|null
condition|?
operator|new
name|BatchUpdate
argument_list|(
name|getRow
argument_list|()
argument_list|)
else|:
operator|new
name|BatchUpdate
argument_list|(
name|getRow
argument_list|()
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|timestamp
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Text
name|column
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|getColumn
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|":"
argument_list|)
condition|)
name|column
operator|=
name|getColumn
argument_list|(
name|i
argument_list|)
expr_stmt|;
else|else
name|column
operator|=
operator|new
name|Text
argument_list|(
name|getColumn
argument_list|(
name|i
argument_list|)
operator|+
literal|":"
argument_list|)
expr_stmt|;
name|batchUpdate
operator|.
name|put
argument_list|(
name|column
argument_list|,
name|getValue
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|commit
argument_list|(
name|batchUpdate
argument_list|)
expr_stmt|;
return|return
operator|new
name|ReturnMsg
argument_list|(
literal|1
argument_list|,
literal|"1 row inserted successfully."
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|String
index|[]
name|msg
init|=
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|split
argument_list|(
literal|"[\n]"
argument_list|)
decl_stmt|;
return|return
operator|new
name|ReturnMsg
argument_list|(
literal|0
argument_list|,
name|msg
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|MasterNotRunningException
name|e
parameter_list|)
block|{
return|return
operator|new
name|ReturnMsg
argument_list|(
literal|0
argument_list|,
literal|"Master is not running!"
argument_list|)
return|;
block|}
block|}
specifier|public
name|void
name|setTable
parameter_list|(
name|String
name|table
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
operator|new
name|Text
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setColumnfamilies
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|columnfamilies
parameter_list|)
block|{
name|this
operator|.
name|columnfamilies
operator|=
name|columnfamilies
expr_stmt|;
block|}
specifier|public
name|void
name|setValues
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|values
parameter_list|)
block|{
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
block|}
specifier|public
name|void
name|setRow
parameter_list|(
name|String
name|row
parameter_list|)
block|{
name|this
operator|.
name|rowKey
operator|=
name|row
expr_stmt|;
block|}
specifier|public
name|Text
name|getRow
parameter_list|()
block|{
return|return
operator|new
name|Text
argument_list|(
name|this
operator|.
name|rowKey
argument_list|)
return|;
block|}
specifier|public
name|Text
name|getColumn
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
operator|new
name|Text
argument_list|(
name|this
operator|.
name|columnfamilies
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|byte
index|[]
name|getValue
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|this
operator|.
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getBytes
argument_list|()
return|;
block|}
specifier|public
name|void
name|setTimestamp
parameter_list|(
name|String
name|timestamp
parameter_list|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|CommandType
name|getCommandType
parameter_list|()
block|{
return|return
name|CommandType
operator|.
name|INSERT
return|;
block|}
block|}
end_class

end_unit

