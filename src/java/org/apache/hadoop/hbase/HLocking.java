begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_comment
comment|/*******************************************************************************  * HLocking is a set of lock primitives that are pretty helpful in a few places  * around the HBase code.  For each independent entity that needs locking, create  * a new HLocking instance.  ******************************************************************************/
end_comment

begin_class
specifier|public
class|class
name|HLocking
block|{
name|Integer
name|readerLock
init|=
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Integer
name|writerLock
init|=
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|numReaders
init|=
literal|0
decl_stmt|;
name|int
name|numWriters
init|=
literal|0
decl_stmt|;
specifier|public
name|HLocking
parameter_list|()
block|{   }
comment|/** Caller needs the nonexclusive read-lock */
specifier|public
name|void
name|obtainReadLock
parameter_list|()
block|{
synchronized|synchronized
init|(
name|readerLock
init|)
block|{
synchronized|synchronized
init|(
name|writerLock
init|)
block|{
while|while
condition|(
name|numWriters
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|writerLock
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{           }
block|}
name|numReaders
operator|++
expr_stmt|;
name|readerLock
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/** Caller is finished with the nonexclusive read-lock */
specifier|public
name|void
name|releaseReadLock
parameter_list|()
block|{
synchronized|synchronized
init|(
name|readerLock
init|)
block|{
synchronized|synchronized
init|(
name|writerLock
init|)
block|{
name|numReaders
operator|--
expr_stmt|;
name|readerLock
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/** Caller needs the exclusive write-lock */
specifier|public
name|void
name|obtainWriteLock
parameter_list|()
block|{
synchronized|synchronized
init|(
name|readerLock
init|)
block|{
synchronized|synchronized
init|(
name|writerLock
init|)
block|{
while|while
condition|(
name|numReaders
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|readerLock
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{           }
block|}
while|while
condition|(
name|numWriters
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|writerLock
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{           }
block|}
name|numWriters
operator|++
expr_stmt|;
name|writerLock
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/** Caller is finished with the write lock */
specifier|public
name|void
name|releaseWriteLock
parameter_list|()
block|{
synchronized|synchronized
init|(
name|readerLock
init|)
block|{
synchronized|synchronized
init|(
name|writerLock
init|)
block|{
name|numWriters
operator|--
expr_stmt|;
name|writerLock
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

