begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2008 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RemoteExceptionHandler
import|;
end_import

begin_comment
comment|/**  * MetaScanner<code>META</code> table.  *   * When a<code>META</code> server comes on line, a MetaRegion object is  * queued up by regionServerReport() and this thread wakes up.  *  * It's important to do this work in a separate thread, or else the blocking   * action would prevent other work from getting done.  */
end_comment

begin_class
class|class
name|MetaScanner
extends|extends
name|BaseScanner
block|{
comment|/** Initial work for the meta scanner is queued up here */
specifier|private
specifier|volatile
name|BlockingQueue
argument_list|<
name|MetaRegion
argument_list|>
name|metaRegionsToScan
init|=
operator|new
name|LinkedBlockingQueue
argument_list|<
name|MetaRegion
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|MetaRegion
argument_list|>
name|metaRegionsToRescan
init|=
operator|new
name|ArrayList
argument_list|<
name|MetaRegion
argument_list|>
argument_list|()
decl_stmt|;
comment|/** Constructor */
specifier|public
name|MetaScanner
parameter_list|(
name|HMaster
name|master
parameter_list|,
name|RegionManager
name|regionManager
parameter_list|)
block|{
name|super
argument_list|(
name|master
argument_list|,
name|regionManager
argument_list|,
literal|false
argument_list|,
name|master
operator|.
name|metaRescanInterval
argument_list|,
name|master
operator|.
name|closed
argument_list|)
expr_stmt|;
block|}
comment|// Don't retry if we get an error while scanning. Errors are most often
comment|// caused by the server going away. Wait until next rescan interval when
comment|// things should be back to normal
specifier|private
name|boolean
name|scanOneMetaRegion
parameter_list|(
name|MetaRegion
name|region
parameter_list|)
block|{
name|boolean
name|scanSuccessful
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|master
operator|.
name|closed
operator|.
name|get
argument_list|()
operator|&&
operator|!
name|regionManager
operator|.
name|isInitialRootScanComplete
argument_list|()
operator|&&
name|regionManager
operator|.
name|getRootRegionLocation
argument_list|()
operator|==
literal|null
condition|)
block|{
name|master
operator|.
name|sleeper
operator|.
name|sleep
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|master
operator|.
name|closed
operator|.
name|get
argument_list|()
condition|)
block|{
return|return
name|scanSuccessful
return|;
block|}
try|try
block|{
comment|// Don't interrupt us while we're working
synchronized|synchronized
init|(
name|scannerLock
init|)
block|{
name|scanRegion
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|regionManager
operator|.
name|putMetaRegionOnline
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
name|scanSuccessful
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|=
name|RemoteExceptionHandler
operator|.
name|checkIOException
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Scan one META region: "
operator|+
name|region
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// The region may have moved (TestRegionServerAbort, etc.).  If
comment|// so, either it won't be in the onlineMetaRegions list or its host
comment|// address has changed and the containsValue will fail. If not
comment|// found, best thing to do here is probably return.
if|if
condition|(
operator|!
name|regionManager
operator|.
name|isMetaRegionOnline
argument_list|(
name|region
operator|.
name|getStartKey
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Scanned region is no longer in map of online "
operator|+
literal|"regions or its value has changed"
argument_list|)
expr_stmt|;
return|return
name|scanSuccessful
return|;
block|}
comment|// Make sure the file system is still available
name|master
operator|.
name|checkFileSystem
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// If for some reason we get some other kind of exception,
comment|// at least log it rather than go out silently.
name|LOG
operator|.
name|error
argument_list|(
literal|"Unexpected exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|scanSuccessful
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|initialScan
parameter_list|()
block|{
name|MetaRegion
name|region
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|!
name|master
operator|.
name|closed
operator|.
name|get
argument_list|()
operator|&&
operator|(
name|region
operator|==
literal|null
operator|&&
name|metaRegionsToScan
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
operator|&&
operator|!
name|metaRegionsScanned
argument_list|()
condition|)
block|{
try|try
block|{
name|region
operator|=
name|metaRegionsToScan
operator|.
name|poll
argument_list|(
name|master
operator|.
name|threadWakeFrequency
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// continue
block|}
if|if
condition|(
name|region
operator|==
literal|null
operator|&&
name|metaRegionsToRescan
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|region
operator|=
name|metaRegionsToRescan
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|region
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|scanOneMetaRegion
argument_list|(
name|region
argument_list|)
condition|)
block|{
name|metaRegionsToRescan
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|initialScanComplete
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|maintenanceScan
parameter_list|()
block|{
name|List
argument_list|<
name|MetaRegion
argument_list|>
name|regions
init|=
name|regionManager
operator|.
name|getListOfOnlineMetaRegions
argument_list|()
decl_stmt|;
for|for
control|(
name|MetaRegion
name|r
range|:
name|regions
control|)
block|{
name|scanOneMetaRegion
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
name|metaRegionsScanned
argument_list|()
expr_stmt|;
block|}
comment|/**    * Called by the meta scanner when it has completed scanning all meta     * regions. This wakes up any threads that were waiting for this to happen.    */
specifier|private
specifier|synchronized
name|boolean
name|metaRegionsScanned
parameter_list|()
block|{
if|if
condition|(
operator|!
name|regionManager
operator|.
name|isInitialRootScanComplete
argument_list|()
operator|||
name|regionManager
operator|.
name|numMetaRegions
argument_list|()
operator|!=
name|regionManager
operator|.
name|numOnlineMetaRegions
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"all meta regions scanned"
argument_list|)
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Other threads call this method to wait until all the meta regions have    * been scanned.    */
specifier|synchronized
name|boolean
name|waitForMetaRegionsOrClose
parameter_list|()
block|{
while|while
condition|(
operator|!
name|master
operator|.
name|closed
operator|.
name|get
argument_list|()
condition|)
block|{
if|if
condition|(
name|regionManager
operator|.
name|isInitialRootScanComplete
argument_list|()
operator|&&
name|regionManager
operator|.
name|numMetaRegions
argument_list|()
operator|==
name|regionManager
operator|.
name|numOnlineMetaRegions
argument_list|()
condition|)
block|{
break|break;
block|}
try|try
block|{
name|wait
argument_list|(
name|master
operator|.
name|threadWakeFrequency
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// continue
block|}
block|}
return|return
name|master
operator|.
name|closed
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Add another meta region to scan to the queue.    */
name|void
name|addMetaRegionToScan
parameter_list|(
name|MetaRegion
name|m
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|metaRegionsToScan
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

