begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2008 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|HbaseMapWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HStoreKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ImmutableBytesWritable
import|;
end_import

begin_comment
comment|/*  * Data structure used to return results out of the toRowMap method.  */
end_comment

begin_class
class|class
name|RowMap
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RowMap
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Text
name|row
decl_stmt|;
specifier|final
name|SortedMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|map
decl_stmt|;
name|RowMap
parameter_list|(
specifier|final
name|Text
name|r
parameter_list|,
specifier|final
name|SortedMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|m
parameter_list|)
block|{
name|this
operator|.
name|row
operator|=
name|r
expr_stmt|;
name|this
operator|.
name|map
operator|=
name|m
expr_stmt|;
block|}
name|Text
name|getRow
parameter_list|()
block|{
return|return
name|this
operator|.
name|row
return|;
block|}
name|SortedMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|getMap
parameter_list|()
block|{
return|return
name|this
operator|.
name|map
return|;
block|}
comment|/*    * Convert an HbaseMapWritable to a Map keyed by column.    * Utility method used scanning meta regions    * @param mw The MapWritable to convert.  Cannot be null.    * @return Returns a SortedMap currently.  TODO: This looks like it could    * be a plain Map.    */
specifier|public
specifier|static
name|RowMap
name|fromHbaseMapWritable
parameter_list|(
name|HbaseMapWritable
name|mw
parameter_list|)
block|{
if|if
condition|(
name|mw
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Passed MapWritable cannot be null"
argument_list|)
throw|;
block|}
name|SortedMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|m
init|=
operator|new
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|Text
name|row
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Writable
argument_list|,
name|Writable
argument_list|>
name|e
range|:
name|mw
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|HStoreKey
name|key
init|=
operator|(
name|HStoreKey
operator|)
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Text
name|thisRow
init|=
name|key
operator|.
name|getRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|row
operator|==
literal|null
condition|)
block|{
name|row
operator|=
name|thisRow
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|row
operator|.
name|equals
argument_list|(
name|thisRow
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Multiple rows in same scanner result set. firstRow="
operator|+
name|row
operator|+
literal|", currentRow="
operator|+
name|thisRow
argument_list|)
expr_stmt|;
block|}
block|}
name|m
operator|.
name|put
argument_list|(
name|key
operator|.
name|getColumn
argument_list|()
argument_list|,
operator|(
operator|(
name|ImmutableBytesWritable
operator|)
name|e
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|RowMap
argument_list|(
name|row
argument_list|,
name|m
argument_list|)
return|;
block|}
block|}
end_class

end_unit

