begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|DelayQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|BatchUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|HbaseRPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|InfoServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Sleeper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Writables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|HbaseMapWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Leases
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HConnectionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerLoad
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RemoteExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|LocalHBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HStoreKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MasterNotRunningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|LeaseListener
import|;
end_import

begin_comment
comment|/**  * HMaster is the "master server" for a HBase.  * There is only one HMaster for a single HBase deployment.  */
end_comment

begin_class
specifier|public
class|class
name|HMaster
extends|extends
name|Thread
implements|implements
name|HConstants
implements|,
name|HMasterInterface
implements|,
name|HMasterRegionInterface
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HMaster
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|Long
name|ZERO_L
init|=
name|Long
operator|.
name|valueOf
argument_list|(
literal|0L
argument_list|)
decl_stmt|;
comment|/** {@inheritDoc} */
specifier|public
name|long
name|getProtocolVersion
parameter_list|(
name|String
name|protocol
parameter_list|,
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|long
name|clientVersion
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|protocol
operator|.
name|equals
argument_list|(
name|HMasterInterface
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|HMasterInterface
operator|.
name|versionID
return|;
block|}
elseif|else
if|if
condition|(
name|protocol
operator|.
name|equals
argument_list|(
name|HMasterRegionInterface
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|HMasterRegionInterface
operator|.
name|versionID
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown protocol to name node: "
operator|+
name|protocol
argument_list|)
throw|;
block|}
block|}
comment|// We start out with closed flag on.  Using AtomicBoolean rather than
comment|// plain boolean because want to pass a reference to supporting threads
comment|// started here in HMaster rather than have them have to know about the
comment|// hosting class
specifier|volatile
name|AtomicBoolean
name|closed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|volatile
name|boolean
name|shutdownRequested
init|=
literal|false
decl_stmt|;
specifier|volatile
name|AtomicInteger
name|quiescedMetaServers
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|volatile
name|boolean
name|fsOk
init|=
literal|true
decl_stmt|;
specifier|final
name|Path
name|rootdir
decl_stmt|;
specifier|final
name|HBaseConfiguration
name|conf
decl_stmt|;
specifier|final
name|FileSystem
name|fs
decl_stmt|;
specifier|final
name|Random
name|rand
decl_stmt|;
specifier|final
name|int
name|threadWakeFrequency
decl_stmt|;
specifier|final
name|int
name|numRetries
decl_stmt|;
specifier|final
name|long
name|maxRegionOpenTime
decl_stmt|;
specifier|volatile
name|DelayQueue
argument_list|<
name|RegionServerOperation
argument_list|>
name|delayedToDoQueue
init|=
operator|new
name|DelayQueue
argument_list|<
name|RegionServerOperation
argument_list|>
argument_list|()
decl_stmt|;
specifier|volatile
name|BlockingQueue
argument_list|<
name|RegionServerOperation
argument_list|>
name|toDoQueue
init|=
operator|new
name|LinkedBlockingQueue
argument_list|<
name|RegionServerOperation
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|int
name|leaseTimeout
decl_stmt|;
specifier|private
specifier|final
name|Leases
name|serverLeases
decl_stmt|;
specifier|private
specifier|final
name|Server
name|server
decl_stmt|;
specifier|private
specifier|final
name|HServerAddress
name|address
decl_stmt|;
specifier|final
name|HConnection
name|connection
decl_stmt|;
specifier|final
name|int
name|metaRescanInterval
decl_stmt|;
specifier|volatile
name|AtomicReference
argument_list|<
name|HServerAddress
argument_list|>
name|rootRegionLocation
init|=
operator|new
name|AtomicReference
argument_list|<
name|HServerAddress
argument_list|>
argument_list|(
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|Lock
name|splitLogLock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
comment|// A Sleeper that sleeps for threadWakeFrequency
specifier|protected
specifier|final
name|Sleeper
name|sleeper
decl_stmt|;
comment|// Default access so accesible from unit tests. MASTER is name of the webapp
comment|// and the attribute name used stuffing this instance into web context.
name|InfoServer
name|infoServer
decl_stmt|;
comment|/** Name of master server */
specifier|public
specifier|static
specifier|final
name|String
name|MASTER
init|=
literal|"master"
decl_stmt|;
comment|/** @return InfoServer object */
specifier|public
name|InfoServer
name|getInfoServer
parameter_list|()
block|{
return|return
name|infoServer
return|;
block|}
specifier|volatile
name|boolean
name|rootScanned
init|=
literal|false
decl_stmt|;
specifier|private
specifier|final
name|RootScanner
name|rootScannerThread
decl_stmt|;
specifier|final
name|Integer
name|rootScannerLock
init|=
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|/** Set by root scanner to indicate the number of meta regions */
specifier|volatile
name|AtomicInteger
name|numberOfMetaRegions
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
comment|/** Work for the meta scanner is queued up here */
specifier|volatile
name|BlockingQueue
argument_list|<
name|MetaRegion
argument_list|>
name|metaRegionsToScan
init|=
operator|new
name|LinkedBlockingQueue
argument_list|<
name|MetaRegion
argument_list|>
argument_list|()
decl_stmt|;
comment|/** These are the online meta regions */
specifier|volatile
name|SortedMap
argument_list|<
name|Text
argument_list|,
name|MetaRegion
argument_list|>
name|onlineMetaRegions
init|=
name|Collections
operator|.
name|synchronizedSortedMap
argument_list|(
operator|new
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|MetaRegion
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
comment|/** Set by meta scanner after initial scan */
specifier|volatile
name|boolean
name|initialMetaScanComplete
init|=
literal|false
decl_stmt|;
specifier|final
name|MetaScanner
name|metaScannerThread
decl_stmt|;
specifier|final
name|Integer
name|metaScannerLock
init|=
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|/** The map of known server names to server info */
specifier|volatile
name|Map
argument_list|<
name|String
argument_list|,
name|HServerInfo
argument_list|>
name|serversToServerInfo
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|HServerInfo
argument_list|>
argument_list|()
decl_stmt|;
comment|/** Set of known dead servers */
specifier|volatile
name|Set
argument_list|<
name|String
argument_list|>
name|deadServers
init|=
name|Collections
operator|.
name|synchronizedSet
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
comment|/** SortedMap server load -> Set of server names */
specifier|volatile
name|SortedMap
argument_list|<
name|HServerLoad
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|loadToServers
init|=
name|Collections
operator|.
name|synchronizedSortedMap
argument_list|(
operator|new
name|TreeMap
argument_list|<
name|HServerLoad
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
comment|/** Map of server names -> server load */
specifier|volatile
name|Map
argument_list|<
name|String
argument_list|,
name|HServerLoad
argument_list|>
name|serversToLoad
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|HServerLoad
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * The 'unassignedRegions' table maps from a HRegionInfo to a timestamp that    * indicates the last time we *tried* to assign the region to a RegionServer.    * If the timestamp is out of date, then we can try to reassign it.     *     * We fill 'unassignedRecords' by scanning ROOT and META tables, learning the    * set of all known valid regions.    *     *<p>Items are removed from this list when a region server reports in that    * the region has been deployed.    */
specifier|volatile
name|SortedMap
argument_list|<
name|HRegionInfo
argument_list|,
name|Long
argument_list|>
name|unassignedRegions
init|=
name|Collections
operator|.
name|synchronizedSortedMap
argument_list|(
operator|new
name|TreeMap
argument_list|<
name|HRegionInfo
argument_list|,
name|Long
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
comment|/**    * Regions that have been assigned, and the server has reported that it has    * started serving it, but that we have not yet recorded in the meta table.    */
specifier|volatile
name|Set
argument_list|<
name|Text
argument_list|>
name|pendingRegions
init|=
name|Collections
operator|.
name|synchronizedSet
argument_list|(
operator|new
name|HashSet
argument_list|<
name|Text
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
comment|/**    * The 'killList' is a list of regions that are going to be closed, but not    * reopened.    */
specifier|volatile
name|Map
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|Text
argument_list|,
name|HRegionInfo
argument_list|>
argument_list|>
name|killList
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|Text
argument_list|,
name|HRegionInfo
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/** 'killedRegions' contains regions that are in the process of being closed */
specifier|volatile
name|Set
argument_list|<
name|Text
argument_list|>
name|killedRegions
init|=
name|Collections
operator|.
name|synchronizedSet
argument_list|(
operator|new
name|HashSet
argument_list|<
name|Text
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
comment|/**    * 'regionsToDelete' contains regions that need to be deleted, but cannot be    * until the region server closes it    */
specifier|volatile
name|Set
argument_list|<
name|Text
argument_list|>
name|regionsToDelete
init|=
name|Collections
operator|.
name|synchronizedSet
argument_list|(
operator|new
name|HashSet
argument_list|<
name|Text
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
comment|/** Set of tables currently in creation. */
specifier|private
specifier|volatile
name|Set
argument_list|<
name|Text
argument_list|>
name|tableInCreation
init|=
name|Collections
operator|.
name|synchronizedSet
argument_list|(
operator|new
name|HashSet
argument_list|<
name|Text
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
comment|/** Build the HMaster out of a raw configuration item.    *     * @param conf - Configuration object    * @throws IOException    */
specifier|public
name|HMaster
parameter_list|(
name|HBaseConfiguration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|HBASE_DIR
argument_list|)
argument_list|)
argument_list|,
operator|new
name|HServerAddress
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|MASTER_ADDRESS
argument_list|,
name|DEFAULT_MASTER_ADDRESS
argument_list|)
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**     * Build the HMaster    * @param rd base directory of this HBase instance.  Must be fully    * qualified so includes filesystem to use.    * @param address server address and port number    * @param conf configuration    *     * @throws IOException    */
specifier|public
name|HMaster
parameter_list|(
name|Path
name|rd
parameter_list|,
name|HServerAddress
name|address
parameter_list|,
name|HBaseConfiguration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|rootdir
operator|=
name|rd
expr_stmt|;
comment|// The filesystem hbase wants to use is probably not what is set into
comment|// fs.default.name; its value is probably the default.
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
literal|"fs.default.name"
argument_list|,
name|this
operator|.
name|rootdir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|HBASE_DIR
argument_list|,
name|this
operator|.
name|rootdir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|rand
operator|=
operator|new
name|Random
argument_list|()
expr_stmt|;
name|Path
name|rootRegionDir
init|=
name|HRegion
operator|.
name|getRegionDir
argument_list|(
name|rootdir
argument_list|,
name|HRegionInfo
operator|.
name|rootRegionInfo
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Root region dir: "
operator|+
name|rootRegionDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Make sure the root directory exists!
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|rootdir
argument_list|)
condition|)
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|rootdir
argument_list|)
expr_stmt|;
name|FSUtils
operator|.
name|setVersion
argument_list|(
name|fs
argument_list|,
name|rootdir
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|fsversion
init|=
name|FSUtils
operator|.
name|checkVersion
argument_list|(
name|fs
argument_list|,
name|rootdir
argument_list|)
decl_stmt|;
if|if
condition|(
name|fsversion
operator|==
literal|null
operator|||
name|fsversion
operator|.
name|compareTo
argument_list|(
name|FILE_SYSTEM_VERSION
argument_list|)
operator|!=
literal|0
condition|)
block|{
comment|// Output on stdout so user sees it in terminal.
name|String
name|message
init|=
literal|"The HBase data files stored on the FileSystem "
operator|+
literal|"are from an earlier version of HBase. You need to run "
operator|+
literal|"'${HBASE_HOME}/bin/hbase migrate' to bring your installation "
operator|+
literal|"up-to-date."
decl_stmt|;
comment|// Output on stdout so user sees it in terminal.
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"WARNING! "
operator|+
name|message
operator|+
literal|" Master shutting down..."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|message
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|rootRegionDir
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"bootstrap: creating ROOT and first META regions"
argument_list|)
expr_stmt|;
try|try
block|{
name|HRegion
name|root
init|=
name|HRegion
operator|.
name|createHRegion
argument_list|(
name|HRegionInfo
operator|.
name|rootRegionInfo
argument_list|,
name|this
operator|.
name|rootdir
argument_list|,
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
name|HRegion
name|meta
init|=
name|HRegion
operator|.
name|createHRegion
argument_list|(
name|HRegionInfo
operator|.
name|firstMetaRegionInfo
argument_list|,
name|this
operator|.
name|rootdir
argument_list|,
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
comment|// Add first region from the META table to the ROOT region.
name|HRegion
operator|.
name|addRegionToMETA
argument_list|(
name|root
argument_list|,
name|meta
argument_list|)
expr_stmt|;
name|root
operator|.
name|close
argument_list|()
expr_stmt|;
name|root
operator|.
name|getLog
argument_list|()
operator|.
name|closeAndDelete
argument_list|()
expr_stmt|;
name|meta
operator|.
name|close
argument_list|()
expr_stmt|;
name|meta
operator|.
name|getLog
argument_list|()
operator|.
name|closeAndDelete
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|=
name|RemoteExceptionHandler
operator|.
name|checkIOException
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"bootstrap"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Not starting HMaster because:"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|this
operator|.
name|threadWakeFrequency
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|THREAD_WAKE_FREQUENCY
argument_list|,
literal|10
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|this
operator|.
name|numRetries
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.client.retries.number"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxRegionOpenTime
operator|=
name|conf
operator|.
name|getLong
argument_list|(
literal|"hbase.hbasemaster.maxregionopen"
argument_list|,
literal|30
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|this
operator|.
name|leaseTimeout
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.master.lease.period"
argument_list|,
literal|30
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|this
operator|.
name|serverLeases
operator|=
operator|new
name|Leases
argument_list|(
name|this
operator|.
name|leaseTimeout
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.master.lease.thread.wakefrequency"
argument_list|,
literal|15
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|server
operator|=
name|HbaseRPC
operator|.
name|getServer
argument_list|(
name|this
argument_list|,
name|address
operator|.
name|getBindAddress
argument_list|()
argument_list|,
name|address
operator|.
name|getPort
argument_list|()
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.regionserver.handler.count"
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|false
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|//  The rpc-server port can be ephemeral... ensure we have the correct info
name|this
operator|.
name|address
operator|=
operator|new
name|HServerAddress
argument_list|(
name|server
operator|.
name|getListenerAddress
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MASTER_ADDRESS
argument_list|,
name|address
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|connection
operator|=
name|HConnectionManager
operator|.
name|getConnection
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|metaRescanInterval
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.master.meta.thread.rescanfrequency"
argument_list|,
literal|60
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// The root region
name|this
operator|.
name|rootScannerThread
operator|=
operator|new
name|RootScanner
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// Scans the meta table
name|this
operator|.
name|metaScannerThread
operator|=
operator|new
name|MetaScanner
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|unassignRootRegion
argument_list|()
expr_stmt|;
name|this
operator|.
name|sleeper
operator|=
operator|new
name|Sleeper
argument_list|(
name|this
operator|.
name|threadWakeFrequency
argument_list|,
name|this
operator|.
name|closed
argument_list|)
expr_stmt|;
comment|// We're almost open for business
name|this
operator|.
name|closed
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"HMaster initialized on "
operator|+
name|this
operator|.
name|address
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*    * Unassign the root region.    * This method would be used in case where root region server had died    * without reporting in.  Currently, we just flounder and never recover.  We    * could 'notice' dead region server in root scanner -- if we failed access    * multiple times -- but reassigning root is catastrophic.    *     */
name|void
name|unassignRootRegion
parameter_list|()
block|{
name|this
operator|.
name|rootRegionLocation
operator|.
name|set
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|shutdownRequested
condition|)
block|{
name|this
operator|.
name|unassignedRegions
operator|.
name|put
argument_list|(
name|HRegionInfo
operator|.
name|rootRegionInfo
argument_list|,
name|ZERO_L
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Checks to see if the file system is still accessible.    * If not, sets closed    * @return false if file system is not available    */
specifier|protected
name|boolean
name|checkFileSystem
parameter_list|()
block|{
if|if
condition|(
name|fsOk
condition|)
block|{
if|if
condition|(
operator|!
name|FSUtils
operator|.
name|isFileSystemAvailable
argument_list|(
name|fs
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Shutting down HBase cluster: file system not available"
argument_list|)
expr_stmt|;
name|closed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fsOk
operator|=
literal|false
expr_stmt|;
block|}
block|}
return|return
name|fsOk
return|;
block|}
comment|/** @return HServerAddress of the master server */
specifier|public
name|HServerAddress
name|getMasterAddress
parameter_list|()
block|{
return|return
name|address
return|;
block|}
comment|/**    * @return Hbase root dir.    */
specifier|public
name|Path
name|getRootDir
parameter_list|()
block|{
return|return
name|this
operator|.
name|rootdir
return|;
block|}
comment|/**    * @return Read-only map of servers to serverinfo.    */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|HServerInfo
argument_list|>
name|getServersToServerInfo
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|this
operator|.
name|serversToServerInfo
argument_list|)
return|;
block|}
comment|/**    * @return Read-only map of servers to load.    */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|HServerLoad
argument_list|>
name|getServersToLoad
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|this
operator|.
name|serversToLoad
argument_list|)
return|;
block|}
comment|/**    * @return Location of the<code>-ROOT-</code> region.    */
specifier|public
name|HServerAddress
name|getRootRegionLocation
parameter_list|()
block|{
name|HServerAddress
name|rootServer
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|shutdownRequested
operator|&&
operator|!
name|closed
operator|.
name|get
argument_list|()
condition|)
block|{
name|rootServer
operator|=
name|this
operator|.
name|rootRegionLocation
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
return|return
name|rootServer
return|;
block|}
comment|/**    * @return Read-only map of online regions.    */
specifier|public
name|Map
argument_list|<
name|Text
argument_list|,
name|MetaRegion
argument_list|>
name|getOnlineMetaRegions
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableSortedMap
argument_list|(
name|this
operator|.
name|onlineMetaRegions
argument_list|)
return|;
block|}
comment|/** Main processing loop */
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
specifier|final
name|String
name|threadName
init|=
literal|"HMaster"
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
name|threadName
argument_list|)
expr_stmt|;
name|startServiceThreads
argument_list|()
expr_stmt|;
comment|/* Main processing loop */
try|try
block|{
while|while
condition|(
operator|!
name|closed
operator|.
name|get
argument_list|()
condition|)
block|{
name|RegionServerOperation
name|op
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|shutdownRequested
operator|&&
name|serversToServerInfo
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|startShutdown
argument_list|()
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|rootRegionLocation
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// We can't process server shutdowns unless the root region is online
name|op
operator|=
name|this
operator|.
name|delayedToDoQueue
operator|.
name|poll
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|op
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|op
operator|=
name|toDoQueue
operator|.
name|poll
argument_list|(
name|threadWakeFrequency
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// continue
block|}
block|}
if|if
condition|(
name|op
operator|==
literal|null
operator|||
name|closed
operator|.
name|get
argument_list|()
condition|)
block|{
continue|continue;
block|}
try|try
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Main processing loop: "
operator|+
name|op
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|op
operator|.
name|process
argument_list|()
condition|)
block|{
comment|// Operation would have blocked because not all meta regions are
comment|// online. This could cause a deadlock, because this thread is waiting
comment|// for the missing meta region(s) to come back online, but since it
comment|// is waiting, it cannot process the meta region online operation it
comment|// is waiting for. So put this operation back on the queue for now.
if|if
condition|(
name|toDoQueue
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// The queue is currently empty so wait for a while to see if what
comment|// we need comes in first
name|sleeper
operator|.
name|sleep
argument_list|()
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Put "
operator|+
name|op
operator|.
name|toString
argument_list|()
operator|+
literal|" back on queue"
argument_list|)
expr_stmt|;
block|}
name|toDoQueue
operator|.
name|put
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Putting into toDoQueue was interrupted."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
if|if
condition|(
name|ex
operator|instanceof
name|RemoteException
condition|)
block|{
try|try
block|{
name|ex
operator|=
name|RemoteExceptionHandler
operator|.
name|decodeRemoteException
argument_list|(
operator|(
name|RemoteException
operator|)
name|ex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"main processing loop: "
operator|+
name|op
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|checkFileSystem
argument_list|()
condition|)
block|{
break|break;
block|}
name|LOG
operator|.
name|warn
argument_list|(
literal|"Processing pending operations: "
operator|+
name|op
operator|.
name|toString
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
try|try
block|{
name|toDoQueue
operator|.
name|put
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Putting into toDoQueue was interrupted."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"main processing loop: "
operator|+
name|op
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Unhandled exception. Starting shutdown."
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|this
operator|.
name|closed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// The region servers won't all exit until we stop scanning the meta regions
name|stopScanners
argument_list|()
expr_stmt|;
comment|// Wait for all the remaining region servers to report in.
name|letRegionServersShutdown
argument_list|()
expr_stmt|;
comment|/*      * Clean up and close up shop      */
if|if
condition|(
name|this
operator|.
name|infoServer
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping infoServer"
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|infoServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// Stop server
name|serverLeases
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Turn off the lease monitor
comment|// Join up with all threads
try|try
block|{
if|if
condition|(
name|rootScannerThread
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|rootScannerThread
operator|.
name|join
argument_list|()
expr_stmt|;
comment|// Wait for the root scanner to finish.
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|iex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"root scanner"
argument_list|,
name|iex
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|metaScannerThread
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|metaScannerThread
operator|.
name|join
argument_list|()
expr_stmt|;
comment|// Wait for meta scanner to finish.
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|iex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"meta scanner"
argument_list|,
name|iex
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"HMaster main thread exiting"
argument_list|)
expr_stmt|;
block|}
comment|/*    * Start up all services. If any of these threads gets an unhandled exception    * then they just die with a logged message.  This should be fine because    * in general, we do not expect the master to get such unhandled exceptions    *  as OOMEs; it should be lightly loaded. See what HRegionServer does if    *  need to install an unexpected exception handler.    */
specifier|private
name|void
name|startServiceThreads
parameter_list|()
block|{
name|String
name|threadName
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
try|try
block|{
name|Threads
operator|.
name|setDaemonThreadRunning
argument_list|(
name|this
operator|.
name|rootScannerThread
argument_list|,
name|threadName
operator|+
literal|".rootScanner"
argument_list|)
expr_stmt|;
name|Threads
operator|.
name|setDaemonThreadRunning
argument_list|(
name|this
operator|.
name|metaScannerThread
argument_list|,
name|threadName
operator|+
literal|".metaScanner"
argument_list|)
expr_stmt|;
comment|// Leases are not the same as Chore threads. Set name differently.
name|this
operator|.
name|serverLeases
operator|.
name|setName
argument_list|(
name|threadName
operator|+
literal|".leaseChecker"
argument_list|)
expr_stmt|;
name|this
operator|.
name|serverLeases
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Put up info server.
name|int
name|port
init|=
name|this
operator|.
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.master.info.port"
argument_list|,
literal|60010
argument_list|)
decl_stmt|;
if|if
condition|(
name|port
operator|>=
literal|0
condition|)
block|{
name|String
name|a
init|=
name|this
operator|.
name|conf
operator|.
name|get
argument_list|(
literal|"hbase.master.info.bindAddress"
argument_list|,
literal|"0.0.0.0"
argument_list|)
decl_stmt|;
name|this
operator|.
name|infoServer
operator|=
operator|new
name|InfoServer
argument_list|(
name|MASTER
argument_list|,
name|a
argument_list|,
name|port
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|infoServer
operator|.
name|setAttribute
argument_list|(
name|MASTER
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|infoServer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|// Start the server so everything else is running before we start
comment|// receiving requests.
name|this
operator|.
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|RemoteException
condition|)
block|{
try|try
block|{
name|e
operator|=
name|RemoteExceptionHandler
operator|.
name|decodeRemoteException
argument_list|(
operator|(
name|RemoteException
operator|)
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"thread start"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Something happened during startup. Shut things down.
name|this
operator|.
name|closed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed startup"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Started service threads"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Started service threads"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Start shutting down the master    */
specifier|private
name|void
name|startShutdown
parameter_list|()
block|{
name|closed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|stopScanners
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|toDoQueue
init|)
block|{
name|toDoQueue
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Empty the queue
name|delayedToDoQueue
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Empty shut down queue
name|toDoQueue
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
comment|// Wake main thread
block|}
synchronized|synchronized
init|(
name|serversToServerInfo
init|)
block|{
name|serversToServerInfo
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
comment|/*    * Stop the root and meta scanners so that the region servers serving meta    * regions can shut down.    */
specifier|private
name|void
name|stopScanners
parameter_list|()
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"telling root scanner to stop"
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|rootScannerLock
init|)
block|{
if|if
condition|(
name|rootScannerThread
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|rootScannerThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
comment|// Wake root scanner
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"telling meta scanner to stop"
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|metaScannerLock
init|)
block|{
if|if
condition|(
name|metaScannerThread
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|metaScannerThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
comment|// Wake meta scanner
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"meta and root scanners notified"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Wait on regionservers to report in    * with {@link #regionServerReport(HServerInfo, HMsg[])} so they get notice    * the master is going down.  Waits until all region servers come back with    * a MSG_REGIONSERVER_STOP which will cancel their lease or until leases held    * by remote region servers have expired.    */
specifier|private
name|void
name|letRegionServersShutdown
parameter_list|()
block|{
if|if
condition|(
operator|!
name|fsOk
condition|)
block|{
comment|// Forget waiting for the region servers if the file system has gone
comment|// away. Just exit as quickly as possible.
return|return;
block|}
synchronized|synchronized
init|(
name|serversToServerInfo
init|)
block|{
while|while
condition|(
name|this
operator|.
name|serversToServerInfo
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting on following regionserver(s) to go down (or "
operator|+
literal|"region server lease expiration, whichever happens first): "
operator|+
name|this
operator|.
name|serversToServerInfo
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|serversToServerInfo
operator|.
name|wait
argument_list|(
name|threadWakeFrequency
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// continue
block|}
block|}
block|}
block|}
comment|/*    * HMasterRegionInterface    */
comment|/** {@inheritDoc} */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|public
name|HbaseMapWritable
name|regionServerStartup
parameter_list|(
name|HServerInfo
name|serverInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|s
init|=
name|serverInfo
operator|.
name|getServerAddress
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"received start message from: "
operator|+
name|s
argument_list|)
expr_stmt|;
name|HServerLoad
name|load
init|=
name|serversToLoad
operator|.
name|remove
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|load
operator|!=
literal|null
condition|)
block|{
comment|// The startup message was from a known server.
comment|// Remove stale information about the server's load.
name|Set
argument_list|<
name|String
argument_list|>
name|servers
init|=
name|loadToServers
operator|.
name|get
argument_list|(
name|load
argument_list|)
decl_stmt|;
if|if
condition|(
name|servers
operator|!=
literal|null
condition|)
block|{
name|servers
operator|.
name|remove
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|loadToServers
operator|.
name|put
argument_list|(
name|load
argument_list|,
name|servers
argument_list|)
expr_stmt|;
block|}
block|}
name|HServerInfo
name|storedInfo
init|=
name|serversToServerInfo
operator|.
name|remove
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|storedInfo
operator|!=
literal|null
operator|&&
operator|!
name|closed
operator|.
name|get
argument_list|()
condition|)
block|{
comment|// The startup message was from a known server with the same name.
comment|// Timeout the old one right away.
name|HServerAddress
name|root
init|=
name|rootRegionLocation
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|root
operator|!=
literal|null
operator|&&
name|root
operator|.
name|equals
argument_list|(
name|storedInfo
operator|.
name|getServerAddress
argument_list|()
argument_list|)
condition|)
block|{
name|unassignRootRegion
argument_list|()
expr_stmt|;
block|}
name|delayedToDoQueue
operator|.
name|put
argument_list|(
operator|new
name|ProcessServerShutdown
argument_list|(
name|this
argument_list|,
name|storedInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// record new server
name|load
operator|=
operator|new
name|HServerLoad
argument_list|()
expr_stmt|;
name|serverInfo
operator|.
name|setLoad
argument_list|(
name|load
argument_list|)
expr_stmt|;
name|serversToServerInfo
operator|.
name|put
argument_list|(
name|s
argument_list|,
name|serverInfo
argument_list|)
expr_stmt|;
name|serversToLoad
operator|.
name|put
argument_list|(
name|s
argument_list|,
name|load
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|servers
init|=
name|loadToServers
operator|.
name|get
argument_list|(
name|load
argument_list|)
decl_stmt|;
if|if
condition|(
name|servers
operator|==
literal|null
condition|)
block|{
name|servers
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|servers
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|loadToServers
operator|.
name|put
argument_list|(
name|load
argument_list|,
name|servers
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|closed
operator|.
name|get
argument_list|()
condition|)
block|{
name|serverLeases
operator|.
name|createLease
argument_list|(
name|s
argument_list|,
operator|new
name|ServerExpirer
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|createConfigurationSubset
argument_list|()
return|;
block|}
comment|/**    * @return Subset of configuration to pass initializing regionservers: e.g.    * the filesystem to use and root directory to use.    */
specifier|protected
name|HbaseMapWritable
name|createConfigurationSubset
parameter_list|()
block|{
name|HbaseMapWritable
name|mw
init|=
name|addConfig
argument_list|(
operator|new
name|HbaseMapWritable
argument_list|()
argument_list|,
name|HConstants
operator|.
name|HBASE_DIR
argument_list|)
decl_stmt|;
return|return
name|addConfig
argument_list|(
name|mw
argument_list|,
literal|"fs.default.name"
argument_list|)
return|;
block|}
specifier|private
name|HbaseMapWritable
name|addConfig
parameter_list|(
specifier|final
name|HbaseMapWritable
name|mw
parameter_list|,
specifier|final
name|String
name|key
parameter_list|)
block|{
name|mw
operator|.
name|put
argument_list|(
operator|new
name|Text
argument_list|(
name|key
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
name|this
operator|.
name|conf
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|mw
return|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|HMsg
index|[]
name|regionServerReport
parameter_list|(
name|HServerInfo
name|serverInfo
parameter_list|,
name|HMsg
name|msgs
index|[]
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|serverName
init|=
name|serverInfo
operator|.
name|getServerAddress
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|msgs
operator|.
name|length
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|msgs
index|[
literal|0
index|]
operator|.
name|getMsg
argument_list|()
operator|==
name|HMsg
operator|.
name|MSG_REPORT_EXITING
condition|)
block|{
synchronized|synchronized
init|(
name|serversToServerInfo
init|)
block|{
try|try
block|{
comment|// HRegionServer is shutting down. Cancel the server's lease.
comment|// Note that canceling the server's lease takes care of updating
comment|// serversToServerInfo, etc.
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Region server "
operator|+
name|serverName
operator|+
literal|": MSG_REPORT_EXITING -- cancelling lease"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cancelLease
argument_list|(
name|serverName
argument_list|)
condition|)
block|{
comment|// Only process the exit message if the server still has a lease.
comment|// Otherwise we could end up processing the server exit twice.
name|LOG
operator|.
name|info
argument_list|(
literal|"Region server "
operator|+
name|serverName
operator|+
literal|": MSG_REPORT_EXITING -- lease cancelled"
argument_list|)
expr_stmt|;
comment|// Get all the regions the server was serving reassigned
comment|// (if we are not shutting down).
if|if
condition|(
operator|!
name|closed
operator|.
name|get
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|msgs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|HRegionInfo
name|info
init|=
name|msgs
index|[
name|i
index|]
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|isRootRegion
argument_list|()
condition|)
block|{
name|rootRegionLocation
operator|.
name|set
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|info
operator|.
name|isMetaTable
argument_list|()
condition|)
block|{
name|onlineMetaRegions
operator|.
name|remove
argument_list|(
name|info
operator|.
name|getStartKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|unassignedRegions
operator|.
name|put
argument_list|(
name|info
argument_list|,
name|ZERO_L
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// We don't need to return anything to the server because it isn't
comment|// going to do any more work.
return|return
operator|new
name|HMsg
index|[
literal|0
index|]
return|;
block|}
finally|finally
block|{
name|serversToServerInfo
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|msgs
index|[
literal|0
index|]
operator|.
name|getMsg
argument_list|()
operator|==
name|HMsg
operator|.
name|MSG_REPORT_QUIESCED
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Region server "
operator|+
name|serverName
operator|+
literal|" quiesced"
argument_list|)
expr_stmt|;
name|quiescedMetaServers
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|quiescedMetaServers
operator|.
name|get
argument_list|()
operator|>=
name|serversToServerInfo
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// If the only servers we know about are meta servers, then we can
comment|// proceed with shutdown
name|LOG
operator|.
name|info
argument_list|(
literal|"All user tables quiesced. Proceeding with shutdown"
argument_list|)
expr_stmt|;
name|startShutdown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|shutdownRequested
operator|&&
operator|!
name|closed
operator|.
name|get
argument_list|()
condition|)
block|{
comment|// Tell the server to stop serving any user regions
return|return
operator|new
name|HMsg
index|[]
block|{
operator|new
name|HMsg
argument_list|(
name|HMsg
operator|.
name|MSG_REGIONSERVER_QUIESCE
argument_list|)
block|}
return|;
block|}
if|if
condition|(
name|closed
operator|.
name|get
argument_list|()
condition|)
block|{
comment|// Tell server to shut down if we are shutting down.  This should
comment|// happen after check of MSG_REPORT_EXITING above, since region server
comment|// will send us one of these messages after it gets MSG_REGIONSERVER_STOP
return|return
operator|new
name|HMsg
index|[]
block|{
operator|new
name|HMsg
argument_list|(
name|HMsg
operator|.
name|MSG_REGIONSERVER_STOP
argument_list|)
block|}
return|;
block|}
name|HServerInfo
name|storedInfo
init|=
name|serversToServerInfo
operator|.
name|get
argument_list|(
name|serverName
argument_list|)
decl_stmt|;
if|if
condition|(
name|storedInfo
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"received server report from unknown server: "
operator|+
name|serverName
argument_list|)
expr_stmt|;
block|}
comment|// The HBaseMaster may have been restarted.
comment|// Tell the RegionServer to start over and call regionServerStartup()
return|return
operator|new
name|HMsg
index|[]
block|{
operator|new
name|HMsg
argument_list|(
name|HMsg
operator|.
name|MSG_CALL_SERVER_STARTUP
argument_list|)
block|}
return|;
block|}
elseif|else
if|if
condition|(
name|storedInfo
operator|.
name|getStartCode
argument_list|()
operator|!=
name|serverInfo
operator|.
name|getStartCode
argument_list|()
condition|)
block|{
comment|// This state is reachable if:
comment|//
comment|// 1) RegionServer A started
comment|// 2) RegionServer B started on the same machine, then
comment|//    clobbered A in regionServerStartup.
comment|// 3) RegionServer A returns, expecting to work as usual.
comment|//
comment|// The answer is to ask A to shut down for good.
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"region server race condition detected: "
operator|+
name|serverName
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|serversToServerInfo
init|)
block|{
name|cancelLease
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
name|serversToServerInfo
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|HMsg
index|[]
block|{
operator|new
name|HMsg
argument_list|(
name|HMsg
operator|.
name|MSG_REGIONSERVER_STOP
argument_list|)
block|}
return|;
block|}
else|else
block|{
comment|// All's well.  Renew the server's lease.
comment|// This will always succeed; otherwise, the fetch of serversToServerInfo
comment|// would have failed above.
name|serverLeases
operator|.
name|renewLease
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
comment|// Refresh the info object and the load information
name|serversToServerInfo
operator|.
name|put
argument_list|(
name|serverName
argument_list|,
name|serverInfo
argument_list|)
expr_stmt|;
name|HServerLoad
name|load
init|=
name|serversToLoad
operator|.
name|get
argument_list|(
name|serverName
argument_list|)
decl_stmt|;
if|if
condition|(
name|load
operator|!=
literal|null
operator|&&
operator|!
name|load
operator|.
name|equals
argument_list|(
name|serverInfo
operator|.
name|getLoad
argument_list|()
argument_list|)
condition|)
block|{
comment|// We have previous information about the load on this server
comment|// and the load on this server has changed
name|Set
argument_list|<
name|String
argument_list|>
name|servers
init|=
name|loadToServers
operator|.
name|get
argument_list|(
name|load
argument_list|)
decl_stmt|;
comment|// Note that servers should never be null because loadToServers
comment|// and serversToLoad are manipulated in pairs
name|servers
operator|.
name|remove
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
name|loadToServers
operator|.
name|put
argument_list|(
name|load
argument_list|,
name|servers
argument_list|)
expr_stmt|;
block|}
comment|// Set the current load information
name|load
operator|=
name|serverInfo
operator|.
name|getLoad
argument_list|()
expr_stmt|;
name|serversToLoad
operator|.
name|put
argument_list|(
name|serverName
argument_list|,
name|load
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|servers
init|=
name|loadToServers
operator|.
name|get
argument_list|(
name|load
argument_list|)
decl_stmt|;
if|if
condition|(
name|servers
operator|==
literal|null
condition|)
block|{
name|servers
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|servers
operator|.
name|add
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
name|loadToServers
operator|.
name|put
argument_list|(
name|load
argument_list|,
name|servers
argument_list|)
expr_stmt|;
comment|// Next, process messages for this server
return|return
name|processMsgs
argument_list|(
name|serverInfo
argument_list|,
name|msgs
argument_list|)
return|;
block|}
block|}
comment|/** Cancel a server's lease and update its load information */
specifier|private
name|boolean
name|cancelLease
parameter_list|(
specifier|final
name|String
name|serverName
parameter_list|)
block|{
name|boolean
name|leaseCancelled
init|=
literal|false
decl_stmt|;
name|HServerInfo
name|info
init|=
name|serversToServerInfo
operator|.
name|remove
argument_list|(
name|serverName
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
comment|// Only cancel lease and update load information once.
comment|// This method can be called a couple of times during shutdown.
if|if
condition|(
name|rootRegionLocation
operator|.
name|get
argument_list|()
operator|!=
literal|null
operator|&&
name|info
operator|.
name|getServerAddress
argument_list|()
operator|.
name|equals
argument_list|(
name|rootRegionLocation
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
name|unassignRootRegion
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Cancelling lease for "
operator|+
name|serverName
argument_list|)
expr_stmt|;
name|serverLeases
operator|.
name|cancelLease
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
name|leaseCancelled
operator|=
literal|true
expr_stmt|;
comment|// update load information
name|HServerLoad
name|load
init|=
name|serversToLoad
operator|.
name|remove
argument_list|(
name|serverName
argument_list|)
decl_stmt|;
if|if
condition|(
name|load
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|servers
init|=
name|loadToServers
operator|.
name|get
argument_list|(
name|load
argument_list|)
decl_stmt|;
if|if
condition|(
name|servers
operator|!=
literal|null
condition|)
block|{
name|servers
operator|.
name|remove
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
name|loadToServers
operator|.
name|put
argument_list|(
name|load
argument_list|,
name|servers
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|leaseCancelled
return|;
block|}
comment|/**     * Process all the incoming messages from a server that's contacted us.    *     * Note that we never need to update the server's load information because    * that has already been done in regionServerReport.    */
specifier|private
name|HMsg
index|[]
name|processMsgs
parameter_list|(
name|HServerInfo
name|info
parameter_list|,
name|HMsg
name|incomingMsgs
index|[]
parameter_list|)
throws|throws
name|IOException
block|{
name|ArrayList
argument_list|<
name|HMsg
argument_list|>
name|returnMsgs
init|=
operator|new
name|ArrayList
argument_list|<
name|HMsg
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|serverName
init|=
name|info
operator|.
name|getServerAddress
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|Text
argument_list|,
name|HRegionInfo
argument_list|>
name|regionsToKill
init|=
literal|null
decl_stmt|;
name|regionsToKill
operator|=
name|killList
operator|.
name|remove
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
comment|// Get reports on what the RegionServer did.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|incomingMsgs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Received "
operator|+
name|incomingMsgs
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
operator|+
literal|" from "
operator|+
name|serverName
argument_list|)
expr_stmt|;
block|}
name|HRegionInfo
name|region
init|=
name|incomingMsgs
index|[
name|i
index|]
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|incomingMsgs
index|[
name|i
index|]
operator|.
name|getMsg
argument_list|()
condition|)
block|{
case|case
name|HMsg
operator|.
name|MSG_REPORT_PROCESS_OPEN
case|:
synchronized|synchronized
init|(
name|unassignedRegions
init|)
block|{
comment|// Region server has acknowledged request to open region.
comment|// Extend region open time by max region open time.
name|unassignedRegions
operator|.
name|put
argument_list|(
name|region
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|this
operator|.
name|maxRegionOpenTime
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|HMsg
operator|.
name|MSG_REPORT_OPEN
case|:
name|boolean
name|duplicateAssignment
init|=
literal|false
decl_stmt|;
synchronized|synchronized
init|(
name|unassignedRegions
init|)
block|{
if|if
condition|(
name|unassignedRegions
operator|.
name|remove
argument_list|(
name|region
argument_list|)
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|region
operator|.
name|getRegionName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|HRegionInfo
operator|.
name|rootRegionInfo
operator|.
name|getRegionName
argument_list|()
argument_list|)
operator|==
literal|0
condition|)
block|{
comment|// Root region
name|HServerAddress
name|rootServer
init|=
name|rootRegionLocation
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|rootServer
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|rootServer
operator|.
name|toString
argument_list|()
operator|.
name|compareTo
argument_list|(
name|serverName
argument_list|)
operator|==
literal|0
condition|)
block|{
comment|// A duplicate open report from the correct server
break|break;
block|}
comment|// We received an open report on the root region, but it is
comment|// assigned to a different server
name|duplicateAssignment
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Not root region. If it is not a pending region, then we are
comment|// going to treat it as a duplicate assignment
if|if
condition|(
name|pendingRegions
operator|.
name|contains
argument_list|(
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|)
condition|)
block|{
comment|// A duplicate report from the correct server
break|break;
block|}
comment|// Although we can't tell for certain if this is a duplicate
comment|// report from the correct server, we are going to treat it
comment|// as such
name|duplicateAssignment
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|duplicateAssignment
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"region server "
operator|+
name|info
operator|.
name|getServerAddress
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" should not have opened region "
operator|+
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// This Region should not have been opened.
comment|// Ask the server to shut it down, but don't report it as closed.
comment|// Otherwise the HMaster will think the Region was closed on purpose,
comment|// and then try to reopen it elsewhere; that's not what we want.
name|returnMsgs
operator|.
name|add
argument_list|(
operator|new
name|HMsg
argument_list|(
name|HMsg
operator|.
name|MSG_REGION_CLOSE_WITHOUT_REPORT
argument_list|,
name|region
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
name|info
operator|.
name|getServerAddress
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" serving "
operator|+
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|region
operator|.
name|getRegionName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|HRegionInfo
operator|.
name|rootRegionInfo
operator|.
name|getRegionName
argument_list|()
argument_list|)
operator|==
literal|0
condition|)
block|{
comment|// Store the Root Region location (in memory)
synchronized|synchronized
init|(
name|rootRegionLocation
init|)
block|{
name|this
operator|.
name|rootRegionLocation
operator|.
name|set
argument_list|(
operator|new
name|HServerAddress
argument_list|(
name|info
operator|.
name|getServerAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|rootRegionLocation
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Note that the table has been assigned and is waiting for the
comment|// meta table to be updated.
name|pendingRegions
operator|.
name|add
argument_list|(
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Queue up an update to note the region location.
try|try
block|{
name|toDoQueue
operator|.
name|put
argument_list|(
operator|new
name|ProcessRegionOpen
argument_list|(
name|this
argument_list|,
name|info
argument_list|,
name|region
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Putting into toDoQueue was interrupted."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
break|break;
case|case
name|HMsg
operator|.
name|MSG_REPORT_CLOSE
case|:
name|LOG
operator|.
name|info
argument_list|(
name|info
operator|.
name|getServerAddress
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" no longer serving "
operator|+
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|region
operator|.
name|getRegionName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|HRegionInfo
operator|.
name|rootRegionInfo
operator|.
name|getRegionName
argument_list|()
argument_list|)
operator|==
literal|0
condition|)
block|{
comment|// Root region
if|if
condition|(
name|region
operator|.
name|isOffline
argument_list|()
condition|)
block|{
comment|// Can't proceed without root region. Shutdown.
name|LOG
operator|.
name|fatal
argument_list|(
literal|"root region is marked offline"
argument_list|)
expr_stmt|;
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|unassignRootRegion
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|reassignRegion
init|=
operator|!
name|region
operator|.
name|isOffline
argument_list|()
decl_stmt|;
name|boolean
name|deleteRegion
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|killedRegions
operator|.
name|remove
argument_list|(
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|)
condition|)
block|{
name|reassignRegion
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|regionsToDelete
operator|.
name|remove
argument_list|(
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|)
condition|)
block|{
name|reassignRegion
operator|=
literal|false
expr_stmt|;
name|deleteRegion
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|region
operator|.
name|isMetaTable
argument_list|()
condition|)
block|{
comment|// Region is part of the meta table. Remove it from onlineMetaRegions
name|onlineMetaRegions
operator|.
name|remove
argument_list|(
name|region
operator|.
name|getStartKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// NOTE: we cannot put the region into unassignedRegions as that
comment|//       could create a race with the pending close if it gets
comment|//       reassigned before the close is processed.
name|unassignedRegions
operator|.
name|remove
argument_list|(
name|region
argument_list|)
expr_stmt|;
try|try
block|{
name|toDoQueue
operator|.
name|put
argument_list|(
operator|new
name|ProcessRegionClose
argument_list|(
name|this
argument_list|,
name|region
argument_list|,
name|reassignRegion
argument_list|,
name|deleteRegion
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Putting into toDoQueue was interrupted."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
break|break;
case|case
name|HMsg
operator|.
name|MSG_REPORT_SPLIT
case|:
comment|// A region has split.
name|HRegionInfo
name|newRegionA
init|=
name|incomingMsgs
index|[
operator|++
name|i
index|]
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
name|unassignedRegions
operator|.
name|put
argument_list|(
name|newRegionA
argument_list|,
name|ZERO_L
argument_list|)
expr_stmt|;
name|HRegionInfo
name|newRegionB
init|=
name|incomingMsgs
index|[
operator|++
name|i
index|]
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
name|unassignedRegions
operator|.
name|put
argument_list|(
name|newRegionB
argument_list|,
name|ZERO_L
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"region "
operator|+
name|region
operator|.
name|getRegionName
argument_list|()
operator|+
literal|" split. New regions are: "
operator|+
name|newRegionA
operator|.
name|getRegionName
argument_list|()
operator|+
literal|", "
operator|+
name|newRegionB
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|region
operator|.
name|isMetaTable
argument_list|()
condition|)
block|{
comment|// A meta region has split.
name|onlineMetaRegions
operator|.
name|remove
argument_list|(
name|region
operator|.
name|getStartKey
argument_list|()
argument_list|)
expr_stmt|;
name|numberOfMetaRegions
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Impossible state during msg processing.  Instruction: "
operator|+
name|incomingMsgs
index|[
name|i
index|]
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|// Process the kill list
if|if
condition|(
name|regionsToKill
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|HRegionInfo
name|i
range|:
name|regionsToKill
operator|.
name|values
argument_list|()
control|)
block|{
name|returnMsgs
operator|.
name|add
argument_list|(
operator|new
name|HMsg
argument_list|(
name|HMsg
operator|.
name|MSG_REGION_CLOSE
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|killedRegions
operator|.
name|add
argument_list|(
name|i
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Figure out what the RegionServer ought to do, and write back.
name|assignRegions
argument_list|(
name|info
argument_list|,
name|serverName
argument_list|,
name|returnMsgs
argument_list|)
expr_stmt|;
return|return
name|returnMsgs
operator|.
name|toArray
argument_list|(
operator|new
name|HMsg
index|[
name|returnMsgs
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/*    * Assigns regions to region servers attempting to balance the load across    * all region servers    *     * @param info    * @param serverName    * @param returnMsgs    */
specifier|private
name|void
name|assignRegions
parameter_list|(
name|HServerInfo
name|info
parameter_list|,
name|String
name|serverName
parameter_list|,
name|ArrayList
argument_list|<
name|HMsg
argument_list|>
name|returnMsgs
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|unassignedRegions
init|)
block|{
comment|// We need to hold a lock on assign attempts while we figure out what to
comment|// do so that multiple threads do not execute this method in parallel
comment|// resulting in assigning the same region to multiple servers.
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
name|regionsToAssign
init|=
operator|new
name|HashSet
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|HRegionInfo
argument_list|,
name|Long
argument_list|>
name|e
range|:
name|this
operator|.
name|unassignedRegions
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|HRegionInfo
name|i
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|numberOfMetaRegions
operator|.
name|get
argument_list|()
operator|!=
name|onlineMetaRegions
operator|.
name|size
argument_list|()
operator|&&
operator|!
name|i
operator|.
name|isMetaRegion
argument_list|()
condition|)
block|{
comment|// Can't assign user regions until all meta regions have been assigned
comment|// and are on-line
continue|continue;
block|}
name|long
name|diff
init|=
name|now
operator|-
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|longValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|diff
operator|>
name|this
operator|.
name|maxRegionOpenTime
condition|)
block|{
name|regionsToAssign
operator|.
name|add
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|nRegionsToAssign
init|=
name|regionsToAssign
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|nRegionsToAssign
operator|<=
literal|0
condition|)
block|{
comment|// No regions to assign.  Return.
return|return;
block|}
if|if
condition|(
name|this
operator|.
name|serversToServerInfo
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|assignRegionsToOneServer
argument_list|(
name|regionsToAssign
argument_list|,
name|serverName
argument_list|,
name|returnMsgs
argument_list|)
expr_stmt|;
comment|// Finished.  Return.
return|return;
block|}
comment|// Multiple servers in play.
comment|// We need to allocate regions only to most lightly loaded servers.
name|HServerLoad
name|thisServersLoad
init|=
name|info
operator|.
name|getLoad
argument_list|()
decl_stmt|;
name|int
name|nregions
init|=
name|regionsPerServer
argument_list|(
name|nRegionsToAssign
argument_list|,
name|thisServersLoad
argument_list|)
decl_stmt|;
name|nRegionsToAssign
operator|-=
name|nregions
expr_stmt|;
if|if
condition|(
name|nRegionsToAssign
operator|>
literal|0
condition|)
block|{
comment|// We still have more regions to assign. See how many we can assign
comment|// before this server becomes more heavily loaded than the next
comment|// most heavily loaded server.
name|SortedMap
argument_list|<
name|HServerLoad
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|heavyServers
init|=
operator|new
name|TreeMap
argument_list|<
name|HServerLoad
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|loadToServers
init|)
block|{
name|heavyServers
operator|.
name|putAll
argument_list|(
name|this
operator|.
name|loadToServers
operator|.
name|tailMap
argument_list|(
name|thisServersLoad
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|nservers
init|=
literal|0
decl_stmt|;
name|HServerLoad
name|heavierLoad
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|HServerLoad
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|e
range|:
name|heavyServers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|servers
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|nservers
operator|+=
name|servers
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|compareTo
argument_list|(
name|thisServersLoad
argument_list|)
operator|==
literal|0
condition|)
block|{
comment|// This is the load factor of the server we are considering
name|nservers
operator|-=
literal|1
expr_stmt|;
continue|continue;
block|}
comment|// If we get here, we are at the first load entry that is a
comment|// heavier load than the server we are considering
name|heavierLoad
operator|=
name|e
operator|.
name|getKey
argument_list|()
expr_stmt|;
break|break;
block|}
name|nregions
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|heavierLoad
operator|!=
literal|null
condition|)
block|{
comment|// There is a more heavily loaded server
for|for
control|(
name|HServerLoad
name|load
init|=
operator|new
name|HServerLoad
argument_list|(
name|thisServersLoad
operator|.
name|getNumberOfRequests
argument_list|()
argument_list|,
name|thisServersLoad
operator|.
name|getNumberOfRegions
argument_list|()
argument_list|)
init|;
name|load
operator|.
name|compareTo
argument_list|(
name|heavierLoad
argument_list|)
operator|<=
literal|0
operator|&&
name|nregions
operator|<
name|nRegionsToAssign
condition|;
name|load
operator|.
name|setNumberOfRegions
argument_list|(
name|load
operator|.
name|getNumberOfRegions
argument_list|()
operator|+
literal|1
argument_list|)
operator|,
name|nregions
operator|++
control|)
block|{
comment|// continue;
block|}
block|}
if|if
condition|(
name|nregions
operator|<
name|nRegionsToAssign
condition|)
block|{
comment|// There are some more heavily loaded servers
comment|// but we can't assign all the regions to this server.
if|if
condition|(
name|nservers
operator|>
literal|0
condition|)
block|{
comment|// There are other servers that can share the load.
comment|// Split regions that need assignment across the servers.
name|nregions
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
operator|(
literal|1.0
operator|*
name|nRegionsToAssign
operator|)
operator|/
operator|(
literal|1.0
operator|*
name|nservers
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// No other servers with same load.
comment|// Split regions over all available servers
name|nregions
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
operator|(
literal|1.0
operator|*
name|nRegionsToAssign
operator|)
operator|/
operator|(
literal|1.0
operator|*
name|serversToServerInfo
operator|.
name|size
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Assign all regions to this server
name|nregions
operator|=
name|nRegionsToAssign
expr_stmt|;
block|}
name|now
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
for|for
control|(
name|HRegionInfo
name|regionInfo
range|:
name|regionsToAssign
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"assigning region "
operator|+
name|regionInfo
operator|.
name|getRegionName
argument_list|()
operator|+
literal|" to server "
operator|+
name|serverName
argument_list|)
expr_stmt|;
name|this
operator|.
name|unassignedRegions
operator|.
name|put
argument_list|(
name|regionInfo
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|now
argument_list|)
argument_list|)
expr_stmt|;
name|returnMsgs
operator|.
name|add
argument_list|(
operator|new
name|HMsg
argument_list|(
name|HMsg
operator|.
name|MSG_REGION_OPEN
argument_list|,
name|regionInfo
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|--
name|nregions
operator|<=
literal|0
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
block|}
comment|/*    * @param nRegionsToAssign    * @param thisServersLoad    * @return How many regions we can assign to more lightly loaded servers    */
specifier|private
name|int
name|regionsPerServer
parameter_list|(
specifier|final
name|int
name|nRegionsToAssign
parameter_list|,
specifier|final
name|HServerLoad
name|thisServersLoad
parameter_list|)
block|{
name|SortedMap
argument_list|<
name|HServerLoad
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|lightServers
init|=
operator|new
name|TreeMap
argument_list|<
name|HServerLoad
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|loadToServers
init|)
block|{
name|lightServers
operator|.
name|putAll
argument_list|(
name|this
operator|.
name|loadToServers
operator|.
name|headMap
argument_list|(
name|thisServersLoad
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|nRegions
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|HServerLoad
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|e
range|:
name|lightServers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|HServerLoad
name|lightLoad
init|=
operator|new
name|HServerLoad
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getNumberOfRequests
argument_list|()
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getNumberOfRegions
argument_list|()
argument_list|)
decl_stmt|;
do|do
block|{
name|lightLoad
operator|.
name|setNumberOfRegions
argument_list|(
name|lightLoad
operator|.
name|getNumberOfRegions
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|nRegions
operator|+=
literal|1
expr_stmt|;
block|}
do|while
condition|(
name|lightLoad
operator|.
name|compareTo
argument_list|(
name|thisServersLoad
argument_list|)
operator|<=
literal|0
operator|&&
name|nRegions
operator|<
name|nRegionsToAssign
condition|)
do|;
name|nRegions
operator|*=
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|nRegions
operator|>=
name|nRegionsToAssign
condition|)
block|{
break|break;
block|}
block|}
return|return
name|nRegions
return|;
block|}
comment|/*    * Assign all to the only server. An unlikely case but still possible.    * @param regionsToAssign    * @param serverName    * @param returnMsgs    */
specifier|private
name|void
name|assignRegionsToOneServer
parameter_list|(
specifier|final
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
name|regionsToAssign
parameter_list|,
specifier|final
name|String
name|serverName
parameter_list|,
specifier|final
name|ArrayList
argument_list|<
name|HMsg
argument_list|>
name|returnMsgs
parameter_list|)
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|HRegionInfo
name|regionInfo
range|:
name|regionsToAssign
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"assigning region "
operator|+
name|regionInfo
operator|.
name|getRegionName
argument_list|()
operator|+
literal|" to the only server "
operator|+
name|serverName
argument_list|)
expr_stmt|;
name|this
operator|.
name|unassignedRegions
operator|.
name|put
argument_list|(
name|regionInfo
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|now
argument_list|)
argument_list|)
expr_stmt|;
name|returnMsgs
operator|.
name|add
argument_list|(
operator|new
name|HMsg
argument_list|(
name|HMsg
operator|.
name|MSG_REGION_OPEN
argument_list|,
name|regionInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * HMasterInterface    */
comment|/** {@inheritDoc} */
specifier|public
name|boolean
name|isMasterRunning
parameter_list|()
block|{
return|return
operator|!
name|closed
operator|.
name|get
argument_list|()
return|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Cluster shutdown requested. Starting to quiesce servers"
argument_list|)
expr_stmt|;
name|this
operator|.
name|shutdownRequested
operator|=
literal|true
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|void
name|createTable
parameter_list|(
name|HTableDescriptor
name|desc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|isMasterRunning
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MasterNotRunningException
argument_list|()
throw|;
block|}
name|HRegionInfo
name|newRegion
init|=
operator|new
name|HRegionInfo
argument_list|(
name|desc
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|tries
init|=
literal|0
init|;
name|tries
operator|<
name|numRetries
condition|;
name|tries
operator|++
control|)
block|{
try|try
block|{
comment|// We can not access meta regions if they have not already been
comment|// assigned and scanned.  If we timeout waiting, just shutdown.
if|if
condition|(
name|this
operator|.
name|metaScannerThread
operator|.
name|waitForMetaRegionsOrClose
argument_list|()
condition|)
block|{
break|break;
block|}
name|createTable
argument_list|(
name|newRegion
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"created table "
operator|+
name|desc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|tries
operator|==
name|numRetries
operator|-
literal|1
condition|)
block|{
throw|throw
name|RemoteExceptionHandler
operator|.
name|checkIOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|createTable
parameter_list|(
specifier|final
name|HRegionInfo
name|newRegion
parameter_list|)
throws|throws
name|IOException
block|{
name|Text
name|tableName
init|=
name|newRegion
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|tableInCreation
operator|.
name|contains
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|TableExistsException
argument_list|(
literal|"Table "
operator|+
name|tableName
operator|+
literal|" in process "
operator|+
literal|"of being created"
argument_list|)
throw|;
block|}
name|tableInCreation
operator|.
name|add
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
try|try
block|{
comment|// 1. Check to see if table already exists. Get meta region where
comment|// table would sit should it exist. Open scanner on it. If a region
comment|// for the table we want to create already exists, then table already
comment|// created. Throw already-exists exception.
name|MetaRegion
name|m
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|onlineMetaRegions
init|)
block|{
name|m
operator|=
operator|(
name|onlineMetaRegions
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|?
name|onlineMetaRegions
operator|.
name|get
argument_list|(
name|onlineMetaRegions
operator|.
name|firstKey
argument_list|()
argument_list|)
else|:
operator|(
name|onlineMetaRegions
operator|.
name|containsKey
argument_list|(
name|newRegion
operator|.
name|getRegionName
argument_list|()
argument_list|)
condition|?
name|onlineMetaRegions
operator|.
name|get
argument_list|(
name|newRegion
operator|.
name|getRegionName
argument_list|()
argument_list|)
else|:
name|onlineMetaRegions
operator|.
name|get
argument_list|(
name|onlineMetaRegions
operator|.
name|headMap
argument_list|(
name|newRegion
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|lastKey
argument_list|()
argument_list|)
operator|)
operator|)
expr_stmt|;
block|}
name|Text
name|metaRegionName
init|=
name|m
operator|.
name|getRegionName
argument_list|()
decl_stmt|;
name|HRegionInterface
name|srvr
init|=
name|connection
operator|.
name|getHRegionConnection
argument_list|(
name|m
operator|.
name|getServer
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|scannerid
init|=
name|srvr
operator|.
name|openScanner
argument_list|(
name|metaRegionName
argument_list|,
name|COL_REGIONINFO_ARRAY
argument_list|,
name|tableName
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|HbaseMapWritable
name|data
init|=
name|srvr
operator|.
name|next
argument_list|(
name|scannerid
argument_list|)
decl_stmt|;
comment|// Test data and that the row for the data is for our table. If table
comment|// does not exist, scanner will return row after where our table would
comment|// be inserted if it exists so look for exact match on table name.
if|if
condition|(
name|data
operator|!=
literal|null
operator|&&
name|data
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Writable
name|k
range|:
name|data
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|HRegionInfo
operator|.
name|getTableNameFromRegionName
argument_list|(
operator|(
operator|(
name|HStoreKey
operator|)
name|k
operator|)
operator|.
name|getRow
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
comment|// Then a region for this table already exists. Ergo table exists.
throw|throw
operator|new
name|TableExistsException
argument_list|(
name|tableName
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|srvr
operator|.
name|close
argument_list|(
name|scannerid
argument_list|)
expr_stmt|;
block|}
comment|// 2. Create the HRegion
name|HRegion
name|region
init|=
name|HRegion
operator|.
name|createHRegion
argument_list|(
name|newRegion
argument_list|,
name|this
operator|.
name|rootdir
argument_list|,
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
comment|// 3. Insert into meta
name|HRegionInfo
name|info
init|=
name|region
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
name|Text
name|regionName
init|=
name|region
operator|.
name|getRegionName
argument_list|()
decl_stmt|;
name|BatchUpdate
name|b
init|=
operator|new
name|BatchUpdate
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
name|b
operator|.
name|put
argument_list|(
name|COL_REGIONINFO
argument_list|,
name|Writables
operator|.
name|getBytes
argument_list|(
name|info
argument_list|)
argument_list|)
expr_stmt|;
name|srvr
operator|.
name|batchUpdate
argument_list|(
name|metaRegionName
argument_list|,
name|b
argument_list|)
expr_stmt|;
comment|// 4. Close the new region to flush it to disk.  Close its log file too.
name|region
operator|.
name|close
argument_list|()
expr_stmt|;
name|region
operator|.
name|getLog
argument_list|()
operator|.
name|closeAndDelete
argument_list|()
expr_stmt|;
comment|// 5. Get it assigned to a server
name|this
operator|.
name|unassignedRegions
operator|.
name|put
argument_list|(
name|info
argument_list|,
name|ZERO_L
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tableInCreation
operator|.
name|remove
argument_list|(
name|newRegion
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** {@inheritDoc} */
specifier|public
name|void
name|deleteTable
parameter_list|(
name|Text
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
operator|new
name|TableDelete
argument_list|(
name|this
argument_list|,
name|tableName
argument_list|)
operator|.
name|process
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"deleted table: "
operator|+
name|tableName
argument_list|)
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|void
name|addColumn
parameter_list|(
name|Text
name|tableName
parameter_list|,
name|HColumnDescriptor
name|column
parameter_list|)
throws|throws
name|IOException
block|{
operator|new
name|AddColumn
argument_list|(
name|this
argument_list|,
name|tableName
argument_list|,
name|column
argument_list|)
operator|.
name|process
argument_list|()
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|void
name|modifyColumn
parameter_list|(
name|Text
name|tableName
parameter_list|,
name|Text
name|columnName
parameter_list|,
name|HColumnDescriptor
name|descriptor
parameter_list|)
throws|throws
name|IOException
block|{
operator|new
name|ModifyColumn
argument_list|(
name|this
argument_list|,
name|tableName
argument_list|,
name|columnName
argument_list|,
name|descriptor
argument_list|)
operator|.
name|process
argument_list|()
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|void
name|deleteColumn
parameter_list|(
name|Text
name|tableName
parameter_list|,
name|Text
name|columnName
parameter_list|)
throws|throws
name|IOException
block|{
operator|new
name|DeleteColumn
argument_list|(
name|this
argument_list|,
name|tableName
argument_list|,
name|HStoreKey
operator|.
name|extractFamily
argument_list|(
name|columnName
argument_list|)
argument_list|)
operator|.
name|process
argument_list|()
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|void
name|enableTable
parameter_list|(
name|Text
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
operator|new
name|ChangeTableState
argument_list|(
name|this
argument_list|,
name|tableName
argument_list|,
literal|true
argument_list|)
operator|.
name|process
argument_list|()
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|void
name|disableTable
parameter_list|(
name|Text
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
operator|new
name|ChangeTableState
argument_list|(
name|this
argument_list|,
name|tableName
argument_list|,
literal|false
argument_list|)
operator|.
name|process
argument_list|()
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|HServerAddress
name|findRootRegion
parameter_list|()
block|{
return|return
name|rootRegionLocation
operator|.
name|get
argument_list|()
return|;
block|}
comment|/*    * Managing leases    */
comment|/** Instantiated to monitor the health of a region server */
specifier|private
class|class
name|ServerExpirer
implements|implements
name|LeaseListener
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"hiding"
argument_list|)
specifier|private
name|String
name|server
decl_stmt|;
name|ServerExpirer
parameter_list|(
name|String
name|server
parameter_list|)
block|{
name|this
operator|.
name|server
operator|=
name|server
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|void
name|leaseExpired
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
name|server
operator|+
literal|" lease expired"
argument_list|)
expr_stmt|;
comment|// Remove the server from the known servers list and update load info
name|HServerInfo
name|info
init|=
name|serversToServerInfo
operator|.
name|remove
argument_list|(
name|server
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
name|HServerAddress
name|root
init|=
name|rootRegionLocation
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|root
operator|!=
literal|null
operator|&&
name|root
operator|.
name|equals
argument_list|(
name|info
operator|.
name|getServerAddress
argument_list|()
argument_list|)
condition|)
block|{
name|unassignRootRegion
argument_list|()
expr_stmt|;
block|}
name|String
name|serverName
init|=
name|info
operator|.
name|getServerAddress
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|HServerLoad
name|load
init|=
name|serversToLoad
operator|.
name|remove
argument_list|(
name|serverName
argument_list|)
decl_stmt|;
if|if
condition|(
name|load
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|servers
init|=
name|loadToServers
operator|.
name|get
argument_list|(
name|load
argument_list|)
decl_stmt|;
if|if
condition|(
name|servers
operator|!=
literal|null
condition|)
block|{
name|servers
operator|.
name|remove
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
name|loadToServers
operator|.
name|put
argument_list|(
name|load
argument_list|,
name|servers
argument_list|)
expr_stmt|;
block|}
block|}
name|deadServers
operator|.
name|add
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|serversToServerInfo
init|)
block|{
name|serversToServerInfo
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
comment|// NOTE: If the server was serving the root region, we cannot reassign it
comment|// here because the new server will start serving the root region before
comment|// the ProcessServerShutdown operation has a chance to split the log file.
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
name|delayedToDoQueue
operator|.
name|put
argument_list|(
operator|new
name|ProcessServerShutdown
argument_list|(
name|HMaster
operator|.
name|this
argument_list|,
name|info
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * @return Return configuration being used by this server.    */
specifier|public
name|HBaseConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|this
operator|.
name|conf
return|;
block|}
comment|/*    * Get HRegionInfo from passed META map of row values.    * Returns null if none found (and logs fact that expected COL_REGIONINFO    * was missing).  Utility method used by scanners of META tables.    * @param map Map to do lookup in.    * @return Null or found HRegionInfo.    * @throws IOException    */
name|HRegionInfo
name|getHRegionInfo
parameter_list|(
specifier|final
name|Map
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|map
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|bytes
init|=
name|map
operator|.
name|get
argument_list|(
name|COL_REGIONINFO
argument_list|)
decl_stmt|;
if|if
condition|(
name|bytes
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|COL_REGIONINFO
operator|.
name|toString
argument_list|()
operator|+
literal|" is empty; has keys: "
operator|+
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
operator|(
name|HRegionInfo
operator|)
name|Writables
operator|.
name|getWritable
argument_list|(
name|bytes
argument_list|,
operator|new
name|HRegionInfo
argument_list|()
argument_list|)
return|;
block|}
comment|/*    * Main program    */
specifier|private
specifier|static
name|void
name|printUsageAndExit
parameter_list|()
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java org.apache.hbase.HMaster "
operator|+
literal|"[--bind=hostname:port] start|stop"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
name|void
name|doMain
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|HMaster
argument_list|>
name|masterClass
parameter_list|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|1
condition|)
block|{
name|printUsageAndExit
argument_list|()
expr_stmt|;
block|}
name|HBaseConfiguration
name|conf
init|=
operator|new
name|HBaseConfiguration
argument_list|()
decl_stmt|;
comment|// Process command-line args. TODO: Better cmd-line processing
comment|// (but hopefully something not as painful as cli options).
specifier|final
name|String
name|addressArgKey
init|=
literal|"--bind="
decl_stmt|;
for|for
control|(
name|String
name|cmd
range|:
name|args
control|)
block|{
if|if
condition|(
name|cmd
operator|.
name|startsWith
argument_list|(
name|addressArgKey
argument_list|)
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|MASTER_ADDRESS
argument_list|,
name|cmd
operator|.
name|substring
argument_list|(
name|addressArgKey
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"start"
argument_list|)
condition|)
block|{
try|try
block|{
comment|// If 'local', defer to LocalHBaseCluster instance.
if|if
condition|(
name|LocalHBaseCluster
operator|.
name|isLocal
argument_list|(
name|conf
argument_list|)
condition|)
block|{
operator|(
operator|new
name|LocalHBaseCluster
argument_list|(
name|conf
argument_list|)
operator|)
operator|.
name|startup
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Constructor
argument_list|<
name|?
extends|extends
name|HMaster
argument_list|>
name|c
init|=
name|masterClass
operator|.
name|getConstructor
argument_list|(
name|HBaseConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|HMaster
name|master
init|=
name|c
operator|.
name|newInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|master
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can not start master"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"stop"
argument_list|)
condition|)
block|{
try|try
block|{
if|if
condition|(
name|LocalHBaseCluster
operator|.
name|isLocal
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|LocalHBaseCluster
operator|.
name|doLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|HBaseAdmin
name|adm
init|=
operator|new
name|HBaseAdmin
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|adm
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can not stop master"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
comment|// Print out usage if we get to here.
name|printUsageAndExit
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Main program    * @param args    */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|doMain
argument_list|(
name|args
argument_list|,
name|HMaster
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

