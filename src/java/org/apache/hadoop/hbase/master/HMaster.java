begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2009 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|RuntimeMXBean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|DelayQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|PriorityBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ClusterStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerLoad
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|LocalHBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MasterNotRunningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionHistorian
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RemoteExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ServerConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ServerConnectionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ImmutableBytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|HBaseRPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|HBaseRPCProtocolVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|HBaseServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|HMasterInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|HMasterRegionInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|HRegionInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|metrics
operator|.
name|MasterMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|InfoServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Sleeper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Writables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|VersionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|FSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|MapWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|DNS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * HMaster is the "master server" for a HBase.  * There is only one HMaster for a single HBase deployment.  *   * NOTE: This class extends Thread rather than Chore because the sleep time  * can be interrupted when there is something to do, rather than the Chore  * sleep time which is invariant.  */
end_comment

begin_class
specifier|public
class|class
name|HMaster
extends|extends
name|Thread
implements|implements
name|HConstants
implements|,
name|HMasterInterface
implements|,
name|HMasterRegionInterface
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HMaster
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
name|long
name|getProtocolVersion
parameter_list|(
name|String
name|protocol
parameter_list|,
name|long
name|clientVersion
parameter_list|)
block|{
return|return
name|HBaseRPCProtocolVersion
operator|.
name|versionID
return|;
block|}
comment|// We start out with closed flag on.  Using AtomicBoolean rather than
comment|// plain boolean because want to pass a reference to supporting threads
comment|// started here in HMaster rather than have them have to know about the
comment|// hosting class
specifier|volatile
name|AtomicBoolean
name|closed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|volatile
name|AtomicBoolean
name|shutdownRequested
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|volatile
name|boolean
name|fsOk
init|=
literal|true
decl_stmt|;
specifier|final
name|Path
name|rootdir
decl_stmt|;
specifier|private
specifier|final
name|HBaseConfiguration
name|conf
decl_stmt|;
specifier|final
name|FileSystem
name|fs
decl_stmt|;
specifier|final
name|Random
name|rand
decl_stmt|;
specifier|final
name|int
name|threadWakeFrequency
decl_stmt|;
specifier|final
name|int
name|numRetries
decl_stmt|;
specifier|final
name|long
name|maxRegionOpenTime
decl_stmt|;
specifier|final
name|int
name|leaseTimeout
decl_stmt|;
specifier|private
specifier|final
name|ZooKeeperWrapper
name|zooKeeperWrapper
decl_stmt|;
specifier|private
specifier|final
name|ZKMasterAddressWatcher
name|zkMasterAddressWatcher
decl_stmt|;
specifier|volatile
name|DelayQueue
argument_list|<
name|RegionServerOperation
argument_list|>
name|delayedToDoQueue
init|=
operator|new
name|DelayQueue
argument_list|<
name|RegionServerOperation
argument_list|>
argument_list|()
decl_stmt|;
specifier|volatile
name|BlockingQueue
argument_list|<
name|RegionServerOperation
argument_list|>
name|toDoQueue
init|=
operator|new
name|PriorityBlockingQueue
argument_list|<
name|RegionServerOperation
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|HBaseServer
name|server
decl_stmt|;
specifier|private
specifier|final
name|HServerAddress
name|address
decl_stmt|;
specifier|final
name|ServerConnection
name|connection
decl_stmt|;
specifier|final
name|int
name|metaRescanInterval
decl_stmt|;
comment|// A Sleeper that sleeps for threadWakeFrequency
specifier|private
specifier|final
name|Sleeper
name|sleeper
decl_stmt|;
comment|// Default access so accesible from unit tests. MASTER is name of the webapp
comment|// and the attribute name used stuffing this instance into web context.
name|InfoServer
name|infoServer
decl_stmt|;
comment|/** Name of master server */
specifier|public
specifier|static
specifier|final
name|String
name|MASTER
init|=
literal|"master"
decl_stmt|;
comment|/** @return InfoServer object */
specifier|public
name|InfoServer
name|getInfoServer
parameter_list|()
block|{
return|return
name|infoServer
return|;
block|}
name|ServerManager
name|serverManager
decl_stmt|;
name|RegionManager
name|regionManager
decl_stmt|;
specifier|private
name|MasterMetrics
name|metrics
decl_stmt|;
comment|/**     * Build the HMaster out of a raw configuration item.    * @param conf configuration    *     * @throws IOException    */
specifier|public
name|HMaster
parameter_list|(
name|HBaseConfiguration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
comment|// find out our address up in DNS.
name|String
name|addressStr
init|=
name|DNS
operator|.
name|getDefaultHost
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"hbase.master.dns.interface"
argument_list|,
literal|"default"
argument_list|)
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"hbase.master.dns.nameserver"
argument_list|,
literal|"default"
argument_list|)
argument_list|)
decl_stmt|;
name|addressStr
operator|+=
literal|":"
operator|+
name|conf
operator|.
name|get
argument_list|(
literal|"hbase.master.port"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|DEFAULT_MASTER_PORT
argument_list|)
argument_list|)
expr_stmt|;
name|HServerAddress
name|address
init|=
operator|new
name|HServerAddress
argument_list|(
name|addressStr
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"My address is "
operator|+
name|address
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|rootdir
operator|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|HBASE_DIR
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|FSUtils
operator|.
name|validateRootPath
argument_list|(
name|this
operator|.
name|rootdir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Not starting HMaster because the root directory path '"
operator|+
name|this
operator|.
name|rootdir
operator|+
literal|"' is not valid. Check the setting of the"
operator|+
literal|" configuration parameter '"
operator|+
name|HBASE_DIR
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|this
operator|.
name|threadWakeFrequency
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|THREAD_WAKE_FREQUENCY
argument_list|,
literal|10
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// The filesystem hbase wants to use is probably not what is set into
comment|// fs.default.name; its value is probably the default.
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
literal|"fs.default.name"
argument_list|,
name|this
operator|.
name|rootdir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|fs
operator|instanceof
name|DistributedFileSystem
condition|)
block|{
comment|// Make sure dfs is not in safe mode
name|String
name|message
init|=
literal|"Waiting for dfs to exit safe mode..."
decl_stmt|;
while|while
condition|(
operator|(
operator|(
name|DistributedFileSystem
operator|)
name|fs
operator|)
operator|.
name|setSafeMode
argument_list|(
name|FSConstants
operator|.
name|SafeModeAction
operator|.
name|SAFEMODE_GET
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|this
operator|.
name|threadWakeFrequency
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|//continue
block|}
block|}
block|}
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|HBASE_DIR
argument_list|,
name|this
operator|.
name|rootdir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|rand
operator|=
operator|new
name|Random
argument_list|()
expr_stmt|;
try|try
block|{
comment|// Make sure the hbase root directory exists!
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|rootdir
argument_list|)
condition|)
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|rootdir
argument_list|)
expr_stmt|;
name|FSUtils
operator|.
name|setVersion
argument_list|(
name|fs
argument_list|,
name|rootdir
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FSUtils
operator|.
name|checkVersion
argument_list|(
name|fs
argument_list|,
name|rootdir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Make sure the root region directory exists!
if|if
condition|(
operator|!
name|FSUtils
operator|.
name|rootRegionExists
argument_list|(
name|fs
argument_list|,
name|rootdir
argument_list|)
condition|)
block|{
name|bootstrap
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Not starting HMaster because:"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|this
operator|.
name|numRetries
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.client.retries.number"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxRegionOpenTime
operator|=
name|conf
operator|.
name|getLong
argument_list|(
literal|"hbase.hbasemaster.maxregionopen"
argument_list|,
literal|120
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|this
operator|.
name|leaseTimeout
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.master.lease.period"
argument_list|,
literal|120
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|this
operator|.
name|server
operator|=
name|HBaseRPC
operator|.
name|getServer
argument_list|(
name|this
argument_list|,
name|address
operator|.
name|getBindAddress
argument_list|()
argument_list|,
name|address
operator|.
name|getPort
argument_list|()
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.regionserver.handler.count"
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|false
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|//  The rpc-server port can be ephemeral... ensure we have the correct info
name|this
operator|.
name|address
operator|=
operator|new
name|HServerAddress
argument_list|(
name|server
operator|.
name|getListenerAddress
argument_list|()
argument_list|)
expr_stmt|;
comment|// dont retry too much
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.client.retries.number"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|this
operator|.
name|connection
operator|=
name|ServerConnectionManager
operator|.
name|getConnection
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|metaRescanInterval
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.master.meta.thread.rescanfrequency"
argument_list|,
literal|60
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|this
operator|.
name|sleeper
operator|=
operator|new
name|Sleeper
argument_list|(
name|this
operator|.
name|threadWakeFrequency
argument_list|,
name|this
operator|.
name|closed
argument_list|)
expr_stmt|;
name|zooKeeperWrapper
operator|=
operator|new
name|ZooKeeperWrapper
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|zkMasterAddressWatcher
operator|=
operator|new
name|ZKMasterAddressWatcher
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|serverManager
operator|=
operator|new
name|ServerManager
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|regionManager
operator|=
operator|new
name|RegionManager
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|writeAddressToZooKeeper
argument_list|()
expr_stmt|;
comment|// We're almost open for business
name|this
operator|.
name|closed
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"HMaster initialized on "
operator|+
name|this
operator|.
name|address
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeAddressToZooKeeper
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|zkMasterAddressWatcher
operator|.
name|waitForMasterAddressAvailability
argument_list|()
expr_stmt|;
comment|// Check if we need to shutdown instead of taking control
if|if
condition|(
name|this
operator|.
name|shutdownRequested
operator|.
name|get
argument_list|()
condition|)
block|{
return|return;
block|}
elseif|else
if|if
condition|(
name|zooKeeperWrapper
operator|.
name|writeMasterAddress
argument_list|(
name|address
argument_list|)
condition|)
block|{
name|zooKeeperWrapper
operator|.
name|setClusterState
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
specifier|private
name|void
name|bootstrap
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"BOOTSTRAP: creating ROOT and first META regions"
argument_list|)
expr_stmt|;
try|try
block|{
name|HRegion
name|root
init|=
name|HRegion
operator|.
name|createHRegion
argument_list|(
name|HRegionInfo
operator|.
name|ROOT_REGIONINFO
argument_list|,
name|this
operator|.
name|rootdir
argument_list|,
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
name|HRegion
name|meta
init|=
name|HRegion
operator|.
name|createHRegion
argument_list|(
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
argument_list|,
name|this
operator|.
name|rootdir
argument_list|,
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
comment|// Add first region from the META table to the ROOT region.
name|HRegion
operator|.
name|addRegionToMETA
argument_list|(
name|root
argument_list|,
name|meta
argument_list|)
expr_stmt|;
name|root
operator|.
name|close
argument_list|()
expr_stmt|;
name|root
operator|.
name|getLog
argument_list|()
operator|.
name|closeAndDelete
argument_list|()
expr_stmt|;
name|meta
operator|.
name|close
argument_list|()
expr_stmt|;
name|meta
operator|.
name|getLog
argument_list|()
operator|.
name|closeAndDelete
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|=
name|RemoteExceptionHandler
operator|.
name|checkIOException
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"bootstrap"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**    * Checks to see if the file system is still accessible.    * If not, sets closed    * @return false if file system is not available    */
specifier|protected
name|boolean
name|checkFileSystem
parameter_list|()
block|{
if|if
condition|(
name|fsOk
condition|)
block|{
try|try
block|{
name|FSUtils
operator|.
name|checkFileSystemAvailable
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Shutting down HBase cluster: file system not available"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|closed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fsOk
operator|=
literal|false
expr_stmt|;
block|}
block|}
return|return
name|fsOk
return|;
block|}
comment|/** @return HServerAddress of the master server */
specifier|public
name|HServerAddress
name|getMasterAddress
parameter_list|()
block|{
return|return
name|address
return|;
block|}
comment|/**    * @return Hbase root dir.    */
specifier|public
name|Path
name|getRootDir
parameter_list|()
block|{
return|return
name|this
operator|.
name|rootdir
return|;
block|}
comment|/**    * @return Read-only map of servers to serverinfo.    */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|HServerInfo
argument_list|>
name|getServersToServerInfo
parameter_list|()
block|{
return|return
name|serverManager
operator|.
name|getServersToServerInfo
argument_list|()
return|;
block|}
specifier|public
name|Map
argument_list|<
name|HServerAddress
argument_list|,
name|HServerInfo
argument_list|>
name|getServerAddressToServerInfo
parameter_list|()
block|{
return|return
name|serverManager
operator|.
name|getServerAddressToServerInfo
argument_list|()
return|;
block|}
comment|/**    * @return Read-only map of servers to load.    */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|HServerLoad
argument_list|>
name|getServersToLoad
parameter_list|()
block|{
return|return
name|serverManager
operator|.
name|getServersToLoad
argument_list|()
return|;
block|}
comment|/** @return The average load */
specifier|public
name|double
name|getAverageLoad
parameter_list|()
block|{
return|return
name|serverManager
operator|.
name|getAverageLoad
argument_list|()
return|;
block|}
comment|/** @return the number of regions on filesystem */
specifier|public
name|int
name|countRegionsOnFS
parameter_list|()
block|{
try|try
block|{
return|return
name|regionManager
operator|.
name|countRegionsOnFS
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Get count of Regions on FileSystem error : "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/**    * @return Location of the<code>-ROOT-</code> region.    */
specifier|public
name|HServerAddress
name|getRootRegionLocation
parameter_list|()
block|{
name|HServerAddress
name|rootServer
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|shutdownRequested
operator|.
name|get
argument_list|()
operator|&&
operator|!
name|closed
operator|.
name|get
argument_list|()
condition|)
block|{
name|rootServer
operator|=
name|regionManager
operator|.
name|getRootRegionLocation
argument_list|()
expr_stmt|;
block|}
return|return
name|rootServer
return|;
block|}
comment|/**    * Wait until root region is available    */
specifier|public
name|void
name|waitForRootRegionLocation
parameter_list|()
block|{
name|regionManager
operator|.
name|waitForRootRegionLocation
argument_list|()
expr_stmt|;
block|}
comment|/**    * @return Read-only map of online regions.    */
specifier|public
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|MetaRegion
argument_list|>
name|getOnlineMetaRegions
parameter_list|()
block|{
return|return
name|regionManager
operator|.
name|getOnlineMetaRegions
argument_list|()
return|;
block|}
comment|/** Main processing loop */
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
specifier|final
name|String
name|threadName
init|=
literal|"HMaster"
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
name|threadName
argument_list|)
expr_stmt|;
name|verifyClusterState
argument_list|()
expr_stmt|;
name|startServiceThreads
argument_list|()
expr_stmt|;
comment|/* Main processing loop */
try|try
block|{
while|while
condition|(
operator|!
name|closed
operator|.
name|get
argument_list|()
condition|)
block|{
comment|// check if we should be shutting down
if|if
condition|(
name|shutdownRequested
operator|.
name|get
argument_list|()
condition|)
block|{
comment|// The region servers won't all exit until we stop scanning the
comment|// meta regions
name|regionManager
operator|.
name|stopScanners
argument_list|()
expr_stmt|;
if|if
condition|(
name|serverManager
operator|.
name|numServers
argument_list|()
operator|==
literal|0
condition|)
block|{
name|startShutdown
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
comment|// work on the TodoQueue. If that fails, we should shut down.
if|if
condition|(
operator|!
name|processToDoQueue
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Unhandled exception. Starting shutdown."
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|closed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Wait for all the remaining region servers to report in.
name|serverManager
operator|.
name|letRegionServersShutdown
argument_list|()
expr_stmt|;
comment|/*      * Clean up and close up shop      */
name|RegionHistorian
operator|.
name|getInstance
argument_list|()
operator|.
name|offline
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|infoServer
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping infoServer"
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|infoServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// Stop server
name|regionManager
operator|.
name|stop
argument_list|()
expr_stmt|;
name|zooKeeperWrapper
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Join up with all threads
name|LOG
operator|.
name|info
argument_list|(
literal|"HMaster main thread exiting"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Try to get an operation off of the todo queue and perform it.    */
specifier|private
name|boolean
name|processToDoQueue
parameter_list|()
block|{
name|RegionServerOperation
name|op
init|=
literal|null
decl_stmt|;
comment|// block until the root region is online
if|if
condition|(
name|regionManager
operator|.
name|getRootRegionLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// We can't process server shutdowns unless the root region is online
name|op
operator|=
name|delayedToDoQueue
operator|.
name|poll
argument_list|()
expr_stmt|;
block|}
comment|// if there aren't any todo items in the queue, sleep for a bit.
if|if
condition|(
name|op
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|op
operator|=
name|toDoQueue
operator|.
name|poll
argument_list|(
name|threadWakeFrequency
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// continue
block|}
block|}
comment|// at this point, if there's still no todo operation, or we're supposed to
comment|// be closed, return.
if|if
condition|(
name|op
operator|==
literal|null
operator|||
name|closed
operator|.
name|get
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
try|try
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Processing todo: "
operator|+
name|op
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// perform the operation.
if|if
condition|(
operator|!
name|op
operator|.
name|process
argument_list|()
condition|)
block|{
comment|// Operation would have blocked because not all meta regions are
comment|// online. This could cause a deadlock, because this thread is waiting
comment|// for the missing meta region(s) to come back online, but since it
comment|// is waiting, it cannot process the meta region online operation it
comment|// is waiting for. So put this operation back on the queue for now.
if|if
condition|(
name|toDoQueue
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// The queue is currently empty so wait for a while to see if what
comment|// we need comes in first
name|sleeper
operator|.
name|sleep
argument_list|()
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Put "
operator|+
name|op
operator|.
name|toString
argument_list|()
operator|+
literal|" back on queue"
argument_list|)
expr_stmt|;
block|}
name|toDoQueue
operator|.
name|put
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Putting into toDoQueue was interrupted."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// There was an exception performing the operation.
if|if
condition|(
name|ex
operator|instanceof
name|RemoteException
condition|)
block|{
try|try
block|{
name|ex
operator|=
name|RemoteExceptionHandler
operator|.
name|decodeRemoteException
argument_list|(
operator|(
name|RemoteException
operator|)
name|ex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"main processing loop: "
operator|+
name|op
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// make sure the filesystem is still ok. otherwise, we're toast.
if|if
condition|(
operator|!
name|checkFileSystem
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|LOG
operator|.
name|warn
argument_list|(
literal|"Processing pending operations: "
operator|+
name|op
operator|.
name|toString
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|delayedToDoQueue
operator|.
name|put
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/*    * Verifies if this instance of HBase is fresh or the master was started    * following a failover. In the second case, it inspects the region server    * directory and gets their regions assignment.     */
specifier|private
name|void
name|verifyClusterState
parameter_list|()
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Checking cluster state..."
argument_list|)
expr_stmt|;
name|HServerAddress
name|rootLocation
init|=
name|zooKeeperWrapper
operator|.
name|readRootRegionLocation
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|HServerAddress
argument_list|>
name|addresses
init|=
name|zooKeeperWrapper
operator|.
name|scanRSDirectory
argument_list|()
decl_stmt|;
comment|// Check if this is a fresh start of the cluster
if|if
condition|(
name|addresses
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"This is a fresh start, proceeding with normal startup"
argument_list|)
expr_stmt|;
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"This is a failover, ZK inspection begins..."
argument_list|)
expr_stmt|;
name|boolean
name|isRootRegionAssigned
init|=
literal|false
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|HRegionInfo
argument_list|>
name|assignedRegions
init|=
operator|new
name|HashMap
argument_list|<
name|byte
index|[]
argument_list|,
name|HRegionInfo
argument_list|>
argument_list|()
decl_stmt|;
comment|// This is a failover case. We must:
comment|// - contact every region server to add them to the regionservers list
comment|// - get their current regions assignment
for|for
control|(
name|HServerAddress
name|address
range|:
name|addresses
control|)
block|{
name|HRegionInterface
name|hri
init|=
name|this
operator|.
name|connection
operator|.
name|getHRegionConnection
argument_list|(
name|address
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|HServerInfo
name|info
init|=
name|hri
operator|.
name|getHServerInfo
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Inspection found server "
operator|+
name|info
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|serverManager
operator|.
name|recordNewServer
argument_list|(
name|info
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|HRegionInfo
index|[]
name|regions
init|=
name|hri
operator|.
name|getRegionsAssignment
argument_list|()
decl_stmt|;
for|for
control|(
name|HRegionInfo
name|region
range|:
name|regions
control|)
block|{
if|if
condition|(
name|region
operator|.
name|isRootRegion
argument_list|()
condition|)
block|{
name|connection
operator|.
name|setRootRegionLocation
argument_list|(
operator|new
name|HRegionLocation
argument_list|(
name|region
argument_list|,
name|rootLocation
argument_list|)
argument_list|)
expr_stmt|;
name|regionManager
operator|.
name|setRootRegionLocation
argument_list|(
name|rootLocation
argument_list|)
expr_stmt|;
comment|// Undo the unassign work in the RegionManager constructor
name|regionManager
operator|.
name|removeRegion
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|isRootRegionAssigned
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|region
operator|.
name|isMetaRegion
argument_list|()
condition|)
block|{
name|MetaRegion
name|m
init|=
operator|new
name|MetaRegion
argument_list|(
operator|new
name|HServerAddress
argument_list|(
name|address
argument_list|)
argument_list|,
name|region
argument_list|)
decl_stmt|;
name|regionManager
operator|.
name|addMetaRegionToScan
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
name|assignedRegions
operator|.
name|put
argument_list|(
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|region
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Inspection found "
operator|+
name|assignedRegions
operator|.
name|size
argument_list|()
operator|+
literal|" regions, "
operator|+
operator|(
name|isRootRegionAssigned
condition|?
literal|"with -ROOT-"
else|:
literal|"but -ROOT- was MIA"
operator|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/*    * Start up all services. If any of these threads gets an unhandled exception    * then they just die with a logged message.  This should be fine because    * in general, we do not expect the master to get such unhandled exceptions    *  as OOMEs; it should be lightly loaded. See what HRegionServer does if    *  need to install an unexpected exception handler.    */
specifier|private
name|void
name|startServiceThreads
parameter_list|()
block|{
comment|// Do after main thread name has been set
name|this
operator|.
name|metrics
operator|=
operator|new
name|MasterMetrics
argument_list|()
expr_stmt|;
try|try
block|{
name|regionManager
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Put up info server.
name|int
name|port
init|=
name|this
operator|.
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.master.info.port"
argument_list|,
literal|60010
argument_list|)
decl_stmt|;
if|if
condition|(
name|port
operator|>=
literal|0
condition|)
block|{
name|String
name|a
init|=
name|this
operator|.
name|conf
operator|.
name|get
argument_list|(
literal|"hbase.master.info.bindAddress"
argument_list|,
literal|"0.0.0.0"
argument_list|)
decl_stmt|;
name|this
operator|.
name|infoServer
operator|=
operator|new
name|InfoServer
argument_list|(
name|MASTER
argument_list|,
name|a
argument_list|,
name|port
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|infoServer
operator|.
name|setAttribute
argument_list|(
name|MASTER
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|infoServer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|// Start the server so everything else is running before we start
comment|// receiving requests.
name|this
operator|.
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|RemoteException
condition|)
block|{
try|try
block|{
name|e
operator|=
name|RemoteExceptionHandler
operator|.
name|decodeRemoteException
argument_list|(
operator|(
name|RemoteException
operator|)
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"thread start"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Something happened during startup. Shut things down.
name|this
operator|.
name|closed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed startup"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Started service threads"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Start shutting down the master    */
name|void
name|startShutdown
parameter_list|()
block|{
name|closed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|regionManager
operator|.
name|stopScanners
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|toDoQueue
init|)
block|{
name|toDoQueue
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Empty the queue
name|delayedToDoQueue
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Empty shut down queue
name|toDoQueue
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
comment|// Wake main thread
block|}
name|serverManager
operator|.
name|notifyServers
argument_list|()
expr_stmt|;
block|}
comment|/*    * HMasterRegionInterface    */
specifier|public
name|MapWritable
name|regionServerStartup
parameter_list|(
specifier|final
name|HServerInfo
name|serverInfo
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Set the address for now even tho it will not be persisted on HRS side
comment|// If the address given is not the default one,
comment|// use the IP given by the user.
if|if
condition|(
name|serverInfo
operator|.
name|getServerAddress
argument_list|()
operator|.
name|getBindAddress
argument_list|()
operator|.
name|equals
argument_list|(
name|DEFAULT_HOST
argument_list|)
condition|)
block|{
name|String
name|rsAddress
init|=
name|HBaseServer
operator|.
name|getRemoteAddress
argument_list|()
decl_stmt|;
name|serverInfo
operator|.
name|setServerAddress
argument_list|(
operator|new
name|HServerAddress
argument_list|(
name|rsAddress
argument_list|,
name|serverInfo
operator|.
name|getServerAddress
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Register with server manager
name|this
operator|.
name|serverManager
operator|.
name|regionServerStartup
argument_list|(
name|serverInfo
argument_list|)
expr_stmt|;
comment|// Send back some config info
return|return
name|createConfigurationSubset
argument_list|()
return|;
block|}
comment|/**    * @return Subset of configuration to pass initializing regionservers: e.g.    * the filesystem to use and root directory to use.    */
specifier|protected
name|MapWritable
name|createConfigurationSubset
parameter_list|()
block|{
name|MapWritable
name|mw
init|=
name|addConfig
argument_list|(
operator|new
name|MapWritable
argument_list|()
argument_list|,
name|HConstants
operator|.
name|HBASE_DIR
argument_list|)
decl_stmt|;
comment|// Get the real address of the HRS.
name|String
name|rsAddress
init|=
name|HBaseServer
operator|.
name|getRemoteAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|rsAddress
operator|!=
literal|null
condition|)
block|{
name|mw
operator|.
name|put
argument_list|(
operator|new
name|Text
argument_list|(
literal|"hbase.regionserver.address"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
name|rsAddress
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|addConfig
argument_list|(
name|mw
argument_list|,
literal|"fs.default.name"
argument_list|)
return|;
block|}
specifier|private
name|MapWritable
name|addConfig
parameter_list|(
specifier|final
name|MapWritable
name|mw
parameter_list|,
specifier|final
name|String
name|key
parameter_list|)
block|{
name|mw
operator|.
name|put
argument_list|(
operator|new
name|Text
argument_list|(
name|key
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
name|this
operator|.
name|conf
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|mw
return|;
block|}
specifier|public
name|HMsg
index|[]
name|regionServerReport
parameter_list|(
name|HServerInfo
name|serverInfo
parameter_list|,
name|HMsg
name|msgs
index|[]
parameter_list|,
name|HRegionInfo
index|[]
name|mostLoadedRegions
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|serverManager
operator|.
name|regionServerReport
argument_list|(
name|serverInfo
argument_list|,
name|msgs
argument_list|,
name|mostLoadedRegions
argument_list|)
return|;
block|}
comment|/*    * HMasterInterface    */
specifier|public
name|boolean
name|isMasterRunning
parameter_list|()
block|{
return|return
operator|!
name|closed
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Cluster shutdown requested. Starting to quiesce servers"
argument_list|)
expr_stmt|;
name|this
operator|.
name|shutdownRequested
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|zooKeeperWrapper
operator|.
name|setClusterState
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|createTable
parameter_list|(
name|HTableDescriptor
name|desc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|isMasterRunning
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MasterNotRunningException
argument_list|()
throw|;
block|}
name|HRegionInfo
name|newRegion
init|=
operator|new
name|HRegionInfo
argument_list|(
name|desc
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|tries
init|=
literal|0
init|;
name|tries
operator|<
name|numRetries
condition|;
name|tries
operator|++
control|)
block|{
try|try
block|{
comment|// We can not create a table unless meta regions have already been
comment|// assigned and scanned.
if|if
condition|(
operator|!
name|regionManager
operator|.
name|areAllMetaRegionsOnline
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NotAllMetaRegionsOnlineException
argument_list|()
throw|;
block|}
name|createTable
argument_list|(
name|newRegion
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"created table "
operator|+
name|desc
operator|.
name|getNameAsString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|TableExistsException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|tries
operator|==
name|numRetries
operator|-
literal|1
condition|)
block|{
throw|throw
name|RemoteExceptionHandler
operator|.
name|checkIOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|sleeper
operator|.
name|sleep
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|synchronized
name|void
name|createTable
parameter_list|(
specifier|final
name|HRegionInfo
name|newRegion
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|tableName
init|=
name|newRegion
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getNameAsString
argument_list|()
decl_stmt|;
comment|// 1. Check to see if table already exists. Get meta region where
comment|// table would sit should it exist. Open scanner on it. If a region
comment|// for the table we want to create already exists, then table already
comment|// created. Throw already-exists exception.
name|MetaRegion
name|m
init|=
name|regionManager
operator|.
name|getFirstMetaRegionForRegion
argument_list|(
name|newRegion
argument_list|)
decl_stmt|;
name|byte
index|[]
name|metaRegionName
init|=
name|m
operator|.
name|getRegionName
argument_list|()
decl_stmt|;
name|HRegionInterface
name|srvr
init|=
name|connection
operator|.
name|getHRegionConnection
argument_list|(
name|m
operator|.
name|getServer
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|firstRowInTable
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|tableName
operator|+
literal|",,"
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|firstRowInTable
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|CATALOG_FAMILY
argument_list|,
name|REGIONINFO_QUALIFIER
argument_list|)
expr_stmt|;
name|long
name|scannerid
init|=
name|srvr
operator|.
name|openScanner
argument_list|(
name|metaRegionName
argument_list|,
name|scan
argument_list|)
decl_stmt|;
try|try
block|{
name|Result
name|data
init|=
name|srvr
operator|.
name|next
argument_list|(
name|scannerid
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
operator|&&
name|data
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|HRegionInfo
name|info
init|=
name|Writables
operator|.
name|getHRegionInfo
argument_list|(
name|data
operator|.
name|getValue
argument_list|(
name|CATALOG_FAMILY
argument_list|,
name|REGIONINFO_QUALIFIER
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getNameAsString
argument_list|()
operator|.
name|equals
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
comment|// A region for this table already exists. Ergo table exists.
throw|throw
operator|new
name|TableExistsException
argument_list|(
name|tableName
argument_list|)
throw|;
block|}
block|}
block|}
finally|finally
block|{
name|srvr
operator|.
name|close
argument_list|(
name|scannerid
argument_list|)
expr_stmt|;
block|}
name|regionManager
operator|.
name|createRegion
argument_list|(
name|newRegion
argument_list|,
name|srvr
argument_list|,
name|metaRegionName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|deleteTable
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|tableName
argument_list|,
name|ROOT_TABLE_NAME
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't delete root table"
argument_list|)
throw|;
block|}
operator|new
name|TableDelete
argument_list|(
name|this
argument_list|,
name|tableName
argument_list|)
operator|.
name|process
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"deleted table: "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addColumn
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|HColumnDescriptor
name|column
parameter_list|)
throws|throws
name|IOException
block|{
operator|new
name|AddColumn
argument_list|(
name|this
argument_list|,
name|tableName
argument_list|,
name|column
argument_list|)
operator|.
name|process
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|modifyColumn
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|columnName
parameter_list|,
name|HColumnDescriptor
name|descriptor
parameter_list|)
throws|throws
name|IOException
block|{
operator|new
name|ModifyColumn
argument_list|(
name|this
argument_list|,
name|tableName
argument_list|,
name|columnName
argument_list|,
name|descriptor
argument_list|)
operator|.
name|process
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|deleteColumn
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
name|c
parameter_list|)
throws|throws
name|IOException
block|{
operator|new
name|DeleteColumn
argument_list|(
name|this
argument_list|,
name|tableName
argument_list|,
name|KeyValue
operator|.
name|parseColumn
argument_list|(
name|c
argument_list|)
index|[
literal|0
index|]
argument_list|)
operator|.
name|process
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|enableTable
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|tableName
argument_list|,
name|ROOT_TABLE_NAME
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't enable root table"
argument_list|)
throw|;
block|}
operator|new
name|ChangeTableState
argument_list|(
name|this
argument_list|,
name|tableName
argument_list|,
literal|true
argument_list|)
operator|.
name|process
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|disableTable
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|tableName
argument_list|,
name|ROOT_TABLE_NAME
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't disable root table"
argument_list|)
throw|;
block|}
operator|new
name|ChangeTableState
argument_list|(
name|this
argument_list|,
name|tableName
argument_list|,
literal|false
argument_list|)
operator|.
name|process
argument_list|()
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
argument_list|>
name|getTableRegions
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|MetaRegion
argument_list|>
name|regions
init|=
name|regionManager
operator|.
name|getMetaRegionsForTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|byte
index|[]
name|firstRowInTable
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|tableName
argument_list|)
operator|+
literal|",,"
argument_list|)
decl_stmt|;
for|for
control|(
name|MetaRegion
name|m
range|:
name|regions
control|)
block|{
name|byte
index|[]
name|metaRegionName
init|=
name|m
operator|.
name|getRegionName
argument_list|()
decl_stmt|;
name|HRegionInterface
name|srvr
init|=
name|connection
operator|.
name|getHRegionConnection
argument_list|(
name|m
operator|.
name|getServer
argument_list|()
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|firstRowInTable
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|CATALOG_FAMILY
argument_list|,
name|REGIONINFO_QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|CATALOG_FAMILY
argument_list|,
name|SERVER_QUALIFIER
argument_list|)
expr_stmt|;
name|long
name|scannerid
init|=
name|srvr
operator|.
name|openScanner
argument_list|(
name|metaRegionName
argument_list|,
name|scan
argument_list|)
decl_stmt|;
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|Result
name|data
init|=
name|srvr
operator|.
name|next
argument_list|(
name|scannerid
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|==
literal|null
operator|||
name|data
operator|.
name|size
argument_list|()
operator|<=
literal|0
condition|)
break|break;
name|HRegionInfo
name|info
init|=
name|Writables
operator|.
name|getHRegionInfo
argument_list|(
name|data
operator|.
name|getValue
argument_list|(
name|CATALOG_FAMILY
argument_list|,
name|REGIONINFO_QUALIFIER
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|info
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|tableName
argument_list|)
operator|==
literal|0
condition|)
block|{
name|byte
index|[]
name|value
init|=
name|data
operator|.
name|getValue
argument_list|(
name|CATALOG_FAMILY
argument_list|,
name|SERVER_QUALIFIER
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|HServerAddress
name|server
init|=
operator|new
name|HServerAddress
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|value
argument_list|)
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
argument_list|(
name|info
argument_list|,
name|server
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
finally|finally
block|{
name|srvr
operator|.
name|close
argument_list|(
name|scannerid
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
name|getTableRegionClosest
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
name|rowKey
parameter_list|)
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|MetaRegion
argument_list|>
name|regions
init|=
name|regionManager
operator|.
name|getMetaRegionsForTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
for|for
control|(
name|MetaRegion
name|m
range|:
name|regions
control|)
block|{
name|byte
index|[]
name|firstRowInTable
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|tableName
argument_list|)
operator|+
literal|",,"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|metaRegionName
init|=
name|m
operator|.
name|getRegionName
argument_list|()
decl_stmt|;
name|HRegionInterface
name|srvr
init|=
name|connection
operator|.
name|getHRegionConnection
argument_list|(
name|m
operator|.
name|getServer
argument_list|()
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|firstRowInTable
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|CATALOG_FAMILY
argument_list|,
name|REGIONINFO_QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|CATALOG_FAMILY
argument_list|,
name|SERVER_QUALIFIER
argument_list|)
expr_stmt|;
name|long
name|scannerid
init|=
name|srvr
operator|.
name|openScanner
argument_list|(
name|metaRegionName
argument_list|,
name|scan
argument_list|)
decl_stmt|;
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|Result
name|data
init|=
name|srvr
operator|.
name|next
argument_list|(
name|scannerid
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|==
literal|null
operator|||
name|data
operator|.
name|size
argument_list|()
operator|<=
literal|0
condition|)
break|break;
name|HRegionInfo
name|info
init|=
name|Writables
operator|.
name|getHRegionInfo
argument_list|(
name|data
operator|.
name|getValue
argument_list|(
name|CATALOG_FAMILY
argument_list|,
name|REGIONINFO_QUALIFIER
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|info
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|tableName
argument_list|)
operator|==
literal|0
condition|)
block|{
if|if
condition|(
operator|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|info
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|rowKey
argument_list|)
operator|>=
literal|0
operator|)
operator|&&
operator|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|info
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|rowKey
argument_list|)
operator|<
literal|0
operator|)
condition|)
block|{
name|byte
index|[]
name|value
init|=
name|data
operator|.
name|getValue
argument_list|(
name|CATALOG_FAMILY
argument_list|,
name|SERVER_QUALIFIER
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|HServerAddress
name|server
init|=
operator|new
name|HServerAddress
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|value
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
argument_list|(
name|info
argument_list|,
name|server
argument_list|)
return|;
block|}
block|}
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
finally|finally
block|{
name|srvr
operator|.
name|close
argument_list|(
name|scannerid
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
name|getTableRegionFromName
parameter_list|(
specifier|final
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|tableName
init|=
name|HRegionInfo
operator|.
name|parseRegionName
argument_list|(
name|regionName
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|Set
argument_list|<
name|MetaRegion
argument_list|>
name|regions
init|=
name|regionManager
operator|.
name|getMetaRegionsForTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
for|for
control|(
name|MetaRegion
name|m
range|:
name|regions
control|)
block|{
name|byte
index|[]
name|metaRegionName
init|=
name|m
operator|.
name|getRegionName
argument_list|()
decl_stmt|;
name|HRegionInterface
name|srvr
init|=
name|connection
operator|.
name|getHRegionConnection
argument_list|(
name|m
operator|.
name|getServer
argument_list|()
argument_list|)
decl_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|CATALOG_FAMILY
argument_list|,
name|REGIONINFO_QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|CATALOG_FAMILY
argument_list|,
name|SERVER_QUALIFIER
argument_list|)
expr_stmt|;
name|Result
name|data
init|=
name|srvr
operator|.
name|get
argument_list|(
name|metaRegionName
argument_list|,
name|get
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|==
literal|null
operator|||
name|data
operator|.
name|size
argument_list|()
operator|<=
literal|0
condition|)
continue|continue;
name|HRegionInfo
name|info
init|=
name|Writables
operator|.
name|getHRegionInfo
argument_list|(
name|data
operator|.
name|getValue
argument_list|(
name|CATALOG_FAMILY
argument_list|,
name|REGIONINFO_QUALIFIER
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|data
operator|.
name|getValue
argument_list|(
name|CATALOG_FAMILY
argument_list|,
name|SERVER_QUALIFIER
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|HServerAddress
name|server
init|=
operator|new
name|HServerAddress
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|value
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
argument_list|(
name|info
argument_list|,
name|server
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Get row from meta table.    * @param row    * @param family    * @return Result    * @throws IOException    */
specifier|protected
name|Result
name|getFromMETA
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|)
throws|throws
name|IOException
block|{
name|MetaRegion
name|meta
init|=
name|this
operator|.
name|regionManager
operator|.
name|getMetaRegionForRow
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|HRegionInterface
name|srvr
init|=
name|getMETAServer
argument_list|(
name|meta
argument_list|)
decl_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
return|return
name|srvr
operator|.
name|get
argument_list|(
name|meta
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|get
argument_list|)
return|;
block|}
comment|/*    * @param meta    * @return Server connection to<code>meta</code> .META. region.    * @throws IOException    */
specifier|private
name|HRegionInterface
name|getMETAServer
parameter_list|(
specifier|final
name|MetaRegion
name|meta
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|this
operator|.
name|connection
operator|.
name|getHRegionConnection
argument_list|(
name|meta
operator|.
name|getServer
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|modifyTable
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|,
name|HConstants
operator|.
name|Modify
name|op
parameter_list|,
name|Writable
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|op
condition|)
block|{
case|case
name|TABLE_SET_HTD
case|:
if|if
condition|(
name|args
operator|==
literal|null
operator|||
name|args
operator|.
name|length
operator|<
literal|1
operator|||
operator|!
operator|(
name|args
index|[
literal|0
index|]
operator|instanceof
name|HTableDescriptor
operator|)
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"SET_HTD request requires an HTableDescriptor"
argument_list|)
throw|;
name|HTableDescriptor
name|htd
init|=
operator|(
name|HTableDescriptor
operator|)
name|args
index|[
literal|0
index|]
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"modifyTable(SET_HTD): "
operator|+
name|htd
argument_list|)
expr_stmt|;
operator|new
name|ModifyTableMeta
argument_list|(
name|this
argument_list|,
name|tableName
argument_list|,
name|htd
argument_list|)
operator|.
name|process
argument_list|()
expr_stmt|;
break|break;
case|case
name|TABLE_SPLIT
case|:
case|case
name|TABLE_COMPACT
case|:
case|case
name|TABLE_MAJOR_COMPACT
case|:
case|case
name|TABLE_FLUSH
case|:
if|if
condition|(
name|args
operator|!=
literal|null
operator|&&
name|args
operator|.
name|length
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|args
index|[
literal|0
index|]
operator|instanceof
name|ImmutableBytesWritable
operator|)
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"request argument must be ImmutableBytesWritable"
argument_list|)
throw|;
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
name|pair
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|tableName
operator|==
literal|null
condition|)
block|{
name|byte
index|[]
name|regionName
init|=
operator|(
operator|(
name|ImmutableBytesWritable
operator|)
name|args
index|[
literal|0
index|]
operator|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|pair
operator|=
name|getTableRegionFromName
argument_list|(
name|regionName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|byte
index|[]
name|rowKey
init|=
operator|(
operator|(
name|ImmutableBytesWritable
operator|)
name|args
index|[
literal|0
index|]
operator|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|pair
operator|=
name|getTableRegionClosest
argument_list|(
name|tableName
argument_list|,
name|rowKey
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pair
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|regionManager
operator|.
name|startAction
argument_list|(
name|pair
operator|.
name|getFirst
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|pair
operator|.
name|getFirst
argument_list|()
argument_list|,
name|pair
operator|.
name|getSecond
argument_list|()
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
name|pair
range|:
name|getTableRegions
argument_list|(
name|tableName
argument_list|)
control|)
name|this
operator|.
name|regionManager
operator|.
name|startAction
argument_list|(
name|pair
operator|.
name|getFirst
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|pair
operator|.
name|getFirst
argument_list|()
argument_list|,
name|pair
operator|.
name|getSecond
argument_list|()
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|CLOSE_REGION
case|:
if|if
condition|(
name|args
operator|==
literal|null
operator|||
name|args
operator|.
name|length
argument_list|<
literal|1
operator|||
name|args
operator|.
name|length
argument_list|>
literal|2
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Requires at least a region name; "
operator|+
literal|"or cannot have more than region name and servername"
argument_list|)
throw|;
block|}
comment|// Arguments are regionname and an optional server name.
name|byte
index|[]
name|regionname
init|=
operator|(
operator|(
name|ImmutableBytesWritable
operator|)
name|args
index|[
literal|0
index|]
operator|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Attempting to close region: "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|regionname
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|servername
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|servername
operator|=
name|Bytes
operator|.
name|toString
argument_list|(
operator|(
operator|(
name|ImmutableBytesWritable
operator|)
name|args
index|[
literal|1
index|]
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Need hri
name|Result
name|rr
init|=
name|getFromMETA
argument_list|(
name|regionname
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
decl_stmt|;
name|HRegionInfo
name|hri
init|=
name|getHRegionInfo
argument_list|(
name|rr
operator|.
name|getRow
argument_list|()
argument_list|,
name|rr
argument_list|)
decl_stmt|;
if|if
condition|(
name|servername
operator|==
literal|null
condition|)
block|{
comment|// Get server from the .META. if it wasn't passed as argument
name|servername
operator|=
name|Bytes
operator|.
name|toString
argument_list|(
name|rr
operator|.
name|getValue
argument_list|(
name|CATALOG_FAMILY
argument_list|,
name|SERVER_QUALIFIER
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Marking "
operator|+
name|hri
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" as closed on "
operator|+
name|servername
operator|+
literal|"; cleaning SERVER + STARTCODE; "
operator|+
literal|"master will tell regionserver to close region on next heartbeat"
argument_list|)
expr_stmt|;
name|this
operator|.
name|regionManager
operator|.
name|setClosing
argument_list|(
name|servername
argument_list|,
name|hri
argument_list|,
name|hri
operator|.
name|isOffline
argument_list|()
argument_list|)
expr_stmt|;
name|MetaRegion
name|meta
init|=
name|this
operator|.
name|regionManager
operator|.
name|getMetaRegionForRow
argument_list|(
name|regionname
argument_list|)
decl_stmt|;
name|HRegionInterface
name|srvr
init|=
name|getMETAServer
argument_list|(
name|meta
argument_list|)
decl_stmt|;
name|HRegion
operator|.
name|cleanRegionInMETA
argument_list|(
name|srvr
argument_list|,
name|meta
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|hri
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"unsupported modifyTable op "
operator|+
name|op
argument_list|)
throw|;
block|}
block|}
comment|/**    * @return cluster status    */
specifier|public
name|ClusterStatus
name|getClusterStatus
parameter_list|()
block|{
name|ClusterStatus
name|status
init|=
operator|new
name|ClusterStatus
argument_list|()
decl_stmt|;
name|status
operator|.
name|setHBaseVersion
argument_list|(
name|VersionInfo
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|status
operator|.
name|setServerInfo
argument_list|(
name|serverManager
operator|.
name|serversToServerInfo
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|status
operator|.
name|setDeadServers
argument_list|(
name|serverManager
operator|.
name|deadServers
argument_list|)
expr_stmt|;
return|return
name|status
return|;
block|}
comment|/**    * @return Server metrics    */
specifier|public
name|MasterMetrics
name|getMetrics
parameter_list|()
block|{
return|return
name|this
operator|.
name|metrics
return|;
block|}
comment|/*    * Managing leases    */
comment|/**    * @return Return configuration being used by this server.    */
specifier|public
name|HBaseConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|this
operator|.
name|conf
return|;
block|}
comment|// TODO ryan rework this function
comment|/*    * Get HRegionInfo from passed META map of row values.    * Returns null if none found (and logs fact that expected COL_REGIONINFO    * was missing).  Utility method used by scanners of META tables.    * @param row name of the row    * @param map Map to do lookup in.    * @return Null or found HRegionInfo.    * @throws IOException    */
name|HRegionInfo
name|getHRegionInfo
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|Result
name|res
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|regioninfo
init|=
name|res
operator|.
name|getValue
argument_list|(
name|CATALOG_FAMILY
argument_list|,
name|REGIONINFO_QUALIFIER
argument_list|)
decl_stmt|;
if|if
condition|(
name|regioninfo
operator|==
literal|null
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|infoMap
init|=
name|res
operator|.
name|getFamilyMap
argument_list|(
name|CATALOG_FAMILY
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|e
range|:
name|infoMap
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|CATALOG_FAMILY
argument_list|)
operator|+
literal|":"
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|warn
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|CATALOG_FAMILY
argument_list|)
operator|+
literal|":"
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|REGIONINFO_QUALIFIER
argument_list|)
operator|+
literal|" is empty for row: "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|row
argument_list|)
operator|+
literal|"; has keys: "
operator|+
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|Writables
operator|.
name|getHRegionInfo
argument_list|(
name|regioninfo
argument_list|)
return|;
block|}
comment|/*    * When we find rows in a meta region that has an empty HRegionInfo, we    * clean them up here.    *     * @param s connection to server serving meta region    * @param metaRegionName name of the meta region we scanned    * @param emptyRows the row keys that had empty HRegionInfos    */
specifier|protected
name|void
name|deleteEmptyMetaRows
parameter_list|(
name|HRegionInterface
name|s
parameter_list|,
name|byte
index|[]
name|metaRegionName
parameter_list|,
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|emptyRows
parameter_list|)
block|{
for|for
control|(
name|byte
index|[]
name|regionName
range|:
name|emptyRows
control|)
block|{
try|try
block|{
name|HRegion
operator|.
name|removeRegionFromMETA
argument_list|(
name|s
argument_list|,
name|metaRegionName
argument_list|,
name|regionName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Removed region: "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|regionName
argument_list|)
operator|+
literal|" from meta region: "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|metaRegionName
argument_list|)
operator|+
literal|" because HRegionInfo was empty"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"deleting region: "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|regionName
argument_list|)
operator|+
literal|" from meta region: "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|metaRegionName
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Get the ZK wrapper object    * @return the zookeeper wrapper    */
specifier|public
name|ZooKeeperWrapper
name|getZooKeeperWrapper
parameter_list|()
block|{
return|return
name|zooKeeperWrapper
return|;
block|}
comment|/*    * Main program    */
specifier|private
specifier|static
name|void
name|printUsageAndExit
parameter_list|()
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java org.apache.hbase.HMaster "
operator|+
literal|"[--bind=hostname:port] start|stop"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
name|void
name|doMain
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|HMaster
argument_list|>
name|masterClass
parameter_list|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|1
condition|)
block|{
name|printUsageAndExit
argument_list|()
expr_stmt|;
block|}
name|HBaseConfiguration
name|conf
init|=
operator|new
name|HBaseConfiguration
argument_list|()
decl_stmt|;
comment|// Process command-line args. TODO: Better cmd-line processing
comment|// (but hopefully something not as painful as cli options).
for|for
control|(
name|String
name|cmd
range|:
name|args
control|)
block|{
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"start"
argument_list|)
condition|)
block|{
try|try
block|{
name|RuntimeMXBean
name|runtime
init|=
name|ManagementFactory
operator|.
name|getRuntimeMXBean
argument_list|()
decl_stmt|;
if|if
condition|(
name|runtime
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"vmName="
operator|+
name|runtime
operator|.
name|getVmName
argument_list|()
operator|+
literal|", vmVendor="
operator|+
name|runtime
operator|.
name|getVmVendor
argument_list|()
operator|+
literal|", vmVersion="
operator|+
name|runtime
operator|.
name|getVmVersion
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"vmInputArguments="
operator|+
name|runtime
operator|.
name|getInputArguments
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// If 'local', defer to LocalHBaseCluster instance.
if|if
condition|(
name|LocalHBaseCluster
operator|.
name|isLocal
argument_list|(
name|conf
argument_list|)
condition|)
block|{
operator|(
operator|new
name|LocalHBaseCluster
argument_list|(
name|conf
argument_list|)
operator|)
operator|.
name|startup
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Constructor
argument_list|<
name|?
extends|extends
name|HMaster
argument_list|>
name|c
init|=
name|masterClass
operator|.
name|getConstructor
argument_list|(
name|HBaseConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|HMaster
name|master
init|=
name|c
operator|.
name|newInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|master
operator|.
name|shutdownRequested
operator|.
name|get
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Won't bring the Master up as a shutdown is requested"
argument_list|)
expr_stmt|;
return|return;
block|}
name|master
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can not start master"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"stop"
argument_list|)
condition|)
block|{
name|HBaseAdmin
name|adm
init|=
literal|null
decl_stmt|;
try|try
block|{
name|adm
operator|=
operator|new
name|HBaseAdmin
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MasterNotRunningException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"master is not running"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|adm
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can not stop master"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
comment|// Print out usage if we get to here.
name|printUsageAndExit
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Main program    * @param args    */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|doMain
argument_list|(
name|args
argument_list|,
name|HMaster
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

