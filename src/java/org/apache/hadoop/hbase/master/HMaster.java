begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|DelayQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|BatchUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|HbaseRPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|InfoServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Sleeper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Writables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|HbaseMapWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Leases
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerLoad
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RemoteExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|LocalHBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MasterNotRunningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|LeaseListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HConnectionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HStoreKey
import|;
end_import

begin_comment
comment|/**  * HMaster is the "master server" for a HBase.  * There is only one HMaster for a single HBase deployment.  */
end_comment

begin_class
specifier|public
class|class
name|HMaster
extends|extends
name|Thread
implements|implements
name|HConstants
implements|,
name|HMasterInterface
implements|,
name|HMasterRegionInterface
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HMaster
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|/** {@inheritDoc} */
specifier|public
name|long
name|getProtocolVersion
parameter_list|(
name|String
name|protocol
parameter_list|,
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|long
name|clientVersion
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|protocol
operator|.
name|equals
argument_list|(
name|HMasterInterface
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|HMasterInterface
operator|.
name|versionID
return|;
block|}
elseif|else
if|if
condition|(
name|protocol
operator|.
name|equals
argument_list|(
name|HMasterRegionInterface
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|HMasterRegionInterface
operator|.
name|versionID
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown protocol to name node: "
operator|+
name|protocol
argument_list|)
throw|;
block|}
block|}
comment|// We start out with closed flag on.  Using AtomicBoolean rather than
comment|// plain boolean because want to pass a reference to supporting threads
comment|// started here in HMaster rather than have them have to know about the
comment|// hosting class
specifier|volatile
name|AtomicBoolean
name|closed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|volatile
name|boolean
name|shutdownRequested
init|=
literal|false
decl_stmt|;
specifier|volatile
name|AtomicInteger
name|quiescedMetaServers
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|volatile
name|boolean
name|fsOk
init|=
literal|true
decl_stmt|;
specifier|final
name|Path
name|rootdir
decl_stmt|;
specifier|final
name|HBaseConfiguration
name|conf
decl_stmt|;
specifier|final
name|FileSystem
name|fs
decl_stmt|;
specifier|final
name|Random
name|rand
decl_stmt|;
specifier|final
name|int
name|threadWakeFrequency
decl_stmt|;
specifier|final
name|int
name|numRetries
decl_stmt|;
specifier|final
name|long
name|maxRegionOpenTime
decl_stmt|;
specifier|final
name|int
name|leaseTimeout
decl_stmt|;
specifier|volatile
name|DelayQueue
argument_list|<
name|RegionServerOperation
argument_list|>
name|delayedToDoQueue
init|=
operator|new
name|DelayQueue
argument_list|<
name|RegionServerOperation
argument_list|>
argument_list|()
decl_stmt|;
specifier|volatile
name|BlockingQueue
argument_list|<
name|RegionServerOperation
argument_list|>
name|toDoQueue
init|=
operator|new
name|LinkedBlockingQueue
argument_list|<
name|RegionServerOperation
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Server
name|server
decl_stmt|;
specifier|private
specifier|final
name|HServerAddress
name|address
decl_stmt|;
specifier|final
name|HConnection
name|connection
decl_stmt|;
specifier|final
name|int
name|metaRescanInterval
decl_stmt|;
comment|// A Sleeper that sleeps for threadWakeFrequency
specifier|protected
specifier|final
name|Sleeper
name|sleeper
decl_stmt|;
comment|// Default access so accesible from unit tests. MASTER is name of the webapp
comment|// and the attribute name used stuffing this instance into web context.
name|InfoServer
name|infoServer
decl_stmt|;
comment|/** Name of master server */
specifier|public
specifier|static
specifier|final
name|String
name|MASTER
init|=
literal|"master"
decl_stmt|;
comment|/** @return InfoServer object */
specifier|public
name|InfoServer
name|getInfoServer
parameter_list|()
block|{
return|return
name|infoServer
return|;
block|}
comment|/** Set of tables currently in creation. */
specifier|private
specifier|volatile
name|Set
argument_list|<
name|Text
argument_list|>
name|tableInCreation
init|=
name|Collections
operator|.
name|synchronizedSet
argument_list|(
operator|new
name|HashSet
argument_list|<
name|Text
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|ServerManager
name|serverManager
decl_stmt|;
name|RegionManager
name|regionManager
decl_stmt|;
comment|/** Build the HMaster out of a raw configuration item.    *     * @param conf - Configuration object    * @throws IOException    */
specifier|public
name|HMaster
parameter_list|(
name|HBaseConfiguration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|HBASE_DIR
argument_list|)
argument_list|)
argument_list|,
operator|new
name|HServerAddress
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|MASTER_ADDRESS
argument_list|,
name|DEFAULT_MASTER_ADDRESS
argument_list|)
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**     * Build the HMaster    * @param rd base directory of this HBase instance.  Must be fully    * qualified so includes filesystem to use.    * @param address server address and port number    * @param conf configuration    *     * @throws IOException    */
specifier|public
name|HMaster
parameter_list|(
name|Path
name|rd
parameter_list|,
name|HServerAddress
name|address
parameter_list|,
name|HBaseConfiguration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|rootdir
operator|=
name|rd
expr_stmt|;
comment|// The filesystem hbase wants to use is probably not what is set into
comment|// fs.default.name; its value is probably the default.
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
literal|"fs.default.name"
argument_list|,
name|this
operator|.
name|rootdir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|HBASE_DIR
argument_list|,
name|this
operator|.
name|rootdir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|rand
operator|=
operator|new
name|Random
argument_list|()
expr_stmt|;
name|Path
name|rootRegionDir
init|=
name|HRegion
operator|.
name|getRegionDir
argument_list|(
name|rootdir
argument_list|,
name|HRegionInfo
operator|.
name|rootRegionInfo
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Root region dir: "
operator|+
name|rootRegionDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Make sure the root directory exists!
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|rootdir
argument_list|)
condition|)
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|rootdir
argument_list|)
expr_stmt|;
name|FSUtils
operator|.
name|setVersion
argument_list|(
name|fs
argument_list|,
name|rootdir
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|fsversion
init|=
name|FSUtils
operator|.
name|checkVersion
argument_list|(
name|fs
argument_list|,
name|rootdir
argument_list|)
decl_stmt|;
if|if
condition|(
name|fsversion
operator|==
literal|null
operator|||
name|fsversion
operator|.
name|compareTo
argument_list|(
name|FILE_SYSTEM_VERSION
argument_list|)
operator|!=
literal|0
condition|)
block|{
comment|// Output on stdout so user sees it in terminal.
name|String
name|message
init|=
literal|"The HBase data files stored on the FileSystem "
operator|+
literal|"are from an earlier version of HBase. You need to run "
operator|+
literal|"'${HBASE_HOME}/bin/hbase migrate' to bring your installation "
operator|+
literal|"up-to-date."
decl_stmt|;
comment|// Output on stdout so user sees it in terminal.
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"WARNING! "
operator|+
name|message
operator|+
literal|" Master shutting down..."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|message
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|rootRegionDir
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"bootstrap: creating ROOT and first META regions"
argument_list|)
expr_stmt|;
try|try
block|{
name|HRegion
name|root
init|=
name|HRegion
operator|.
name|createHRegion
argument_list|(
name|HRegionInfo
operator|.
name|rootRegionInfo
argument_list|,
name|this
operator|.
name|rootdir
argument_list|,
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
name|HRegion
name|meta
init|=
name|HRegion
operator|.
name|createHRegion
argument_list|(
name|HRegionInfo
operator|.
name|firstMetaRegionInfo
argument_list|,
name|this
operator|.
name|rootdir
argument_list|,
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
comment|// Add first region from the META table to the ROOT region.
name|HRegion
operator|.
name|addRegionToMETA
argument_list|(
name|root
argument_list|,
name|meta
argument_list|)
expr_stmt|;
name|root
operator|.
name|close
argument_list|()
expr_stmt|;
name|root
operator|.
name|getLog
argument_list|()
operator|.
name|closeAndDelete
argument_list|()
expr_stmt|;
name|meta
operator|.
name|close
argument_list|()
expr_stmt|;
name|meta
operator|.
name|getLog
argument_list|()
operator|.
name|closeAndDelete
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|=
name|RemoteExceptionHandler
operator|.
name|checkIOException
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"bootstrap"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Not starting HMaster because:"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|this
operator|.
name|threadWakeFrequency
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|THREAD_WAKE_FREQUENCY
argument_list|,
literal|10
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|this
operator|.
name|numRetries
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.client.retries.number"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxRegionOpenTime
operator|=
name|conf
operator|.
name|getLong
argument_list|(
literal|"hbase.hbasemaster.maxregionopen"
argument_list|,
literal|30
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|this
operator|.
name|leaseTimeout
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.master.lease.period"
argument_list|,
literal|30
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|this
operator|.
name|server
operator|=
name|HbaseRPC
operator|.
name|getServer
argument_list|(
name|this
argument_list|,
name|address
operator|.
name|getBindAddress
argument_list|()
argument_list|,
name|address
operator|.
name|getPort
argument_list|()
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.regionserver.handler.count"
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|false
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|//  The rpc-server port can be ephemeral... ensure we have the correct info
name|this
operator|.
name|address
operator|=
operator|new
name|HServerAddress
argument_list|(
name|server
operator|.
name|getListenerAddress
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MASTER_ADDRESS
argument_list|,
name|address
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|connection
operator|=
name|HConnectionManager
operator|.
name|getConnection
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|metaRescanInterval
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.master.meta.thread.rescanfrequency"
argument_list|,
literal|60
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|this
operator|.
name|sleeper
operator|=
operator|new
name|Sleeper
argument_list|(
name|this
operator|.
name|threadWakeFrequency
argument_list|,
name|this
operator|.
name|closed
argument_list|)
expr_stmt|;
name|serverManager
operator|=
operator|new
name|ServerManager
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|regionManager
operator|=
operator|new
name|RegionManager
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// We're almost open for business
name|this
operator|.
name|closed
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"HMaster initialized on "
operator|+
name|this
operator|.
name|address
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Checks to see if the file system is still accessible.    * If not, sets closed    * @return false if file system is not available    */
specifier|protected
name|boolean
name|checkFileSystem
parameter_list|()
block|{
if|if
condition|(
name|fsOk
condition|)
block|{
if|if
condition|(
operator|!
name|FSUtils
operator|.
name|isFileSystemAvailable
argument_list|(
name|fs
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Shutting down HBase cluster: file system not available"
argument_list|)
expr_stmt|;
name|closed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fsOk
operator|=
literal|false
expr_stmt|;
block|}
block|}
return|return
name|fsOk
return|;
block|}
comment|/** @return HServerAddress of the master server */
specifier|public
name|HServerAddress
name|getMasterAddress
parameter_list|()
block|{
return|return
name|address
return|;
block|}
comment|/**    * @return Hbase root dir.    */
specifier|public
name|Path
name|getRootDir
parameter_list|()
block|{
return|return
name|this
operator|.
name|rootdir
return|;
block|}
comment|/**    * @return Read-only map of servers to serverinfo.    */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|HServerInfo
argument_list|>
name|getServersToServerInfo
parameter_list|()
block|{
return|return
name|serverManager
operator|.
name|getServersToServerInfo
argument_list|()
return|;
block|}
comment|/**    * @return Read-only map of servers to load.    */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|HServerLoad
argument_list|>
name|getServersToLoad
parameter_list|()
block|{
return|return
name|serverManager
operator|.
name|getServersToLoad
argument_list|()
return|;
block|}
comment|/**    * @return Location of the<code>-ROOT-</code> region.    */
specifier|public
name|HServerAddress
name|getRootRegionLocation
parameter_list|()
block|{
name|HServerAddress
name|rootServer
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|shutdownRequested
operator|&&
operator|!
name|closed
operator|.
name|get
argument_list|()
condition|)
block|{
name|rootServer
operator|=
name|regionManager
operator|.
name|getRootRegionLocation
argument_list|()
expr_stmt|;
block|}
return|return
name|rootServer
return|;
block|}
specifier|public
name|void
name|waitForRootRegionLocation
parameter_list|()
block|{
name|regionManager
operator|.
name|waitForRootRegionLocation
argument_list|()
expr_stmt|;
block|}
comment|/**    * @return Read-only map of online regions.    */
specifier|public
name|Map
argument_list|<
name|Text
argument_list|,
name|MetaRegion
argument_list|>
name|getOnlineMetaRegions
parameter_list|()
block|{
return|return
name|regionManager
operator|.
name|getOnlineMetaRegions
argument_list|()
return|;
block|}
comment|/** Main processing loop */
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
specifier|final
name|String
name|threadName
init|=
literal|"HMaster"
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
name|threadName
argument_list|)
expr_stmt|;
name|startServiceThreads
argument_list|()
expr_stmt|;
comment|/* Main processing loop */
try|try
block|{
while|while
condition|(
operator|!
name|closed
operator|.
name|get
argument_list|()
condition|)
block|{
comment|// check if we should be shutting down
if|if
condition|(
name|shutdownRequested
operator|&&
name|serverManager
operator|.
name|numServers
argument_list|()
operator|==
literal|0
condition|)
block|{
name|startShutdown
argument_list|()
expr_stmt|;
break|break;
block|}
comment|// work on the TodoQueue. If that fails, we should shut down.
if|if
condition|(
operator|!
name|processToDoQueue
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Unhandled exception. Starting shutdown."
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|closed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// The region servers won't all exit until we stop scanning the meta regions
name|regionManager
operator|.
name|stopScanners
argument_list|()
expr_stmt|;
comment|// Wait for all the remaining region servers to report in.
name|serverManager
operator|.
name|letRegionServersShutdown
argument_list|()
expr_stmt|;
comment|/*      * Clean up and close up shop      */
if|if
condition|(
name|this
operator|.
name|infoServer
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping infoServer"
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|infoServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// Stop server
name|serverManager
operator|.
name|stop
argument_list|()
expr_stmt|;
name|regionManager
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// Join up with all threads
name|LOG
operator|.
name|info
argument_list|(
literal|"HMaster main thread exiting"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Try to get an operation off of the todo queue and perform it.    */
specifier|private
name|boolean
name|processToDoQueue
parameter_list|()
block|{
name|RegionServerOperation
name|op
init|=
literal|null
decl_stmt|;
comment|// block until the root region is online
if|if
condition|(
name|regionManager
operator|.
name|getRootRegionLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// We can't process server shutdowns unless the root region is online
name|op
operator|=
name|delayedToDoQueue
operator|.
name|poll
argument_list|()
expr_stmt|;
block|}
comment|// if there aren't any todo items in the queue, sleep for a bit.
if|if
condition|(
name|op
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|op
operator|=
name|toDoQueue
operator|.
name|poll
argument_list|(
name|threadWakeFrequency
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// continue
block|}
block|}
comment|// at this point, if there's still no todo operation, or we're supposed to
comment|// be closed, return.
if|if
condition|(
name|op
operator|==
literal|null
operator|||
name|closed
operator|.
name|get
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
try|try
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Main processing loop: "
operator|+
name|op
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// perform the operation.
if|if
condition|(
operator|!
name|op
operator|.
name|process
argument_list|()
condition|)
block|{
comment|// Operation would have blocked because not all meta regions are
comment|// online. This could cause a deadlock, because this thread is waiting
comment|// for the missing meta region(s) to come back online, but since it
comment|// is waiting, it cannot process the meta region online operation it
comment|// is waiting for. So put this operation back on the queue for now.
if|if
condition|(
name|toDoQueue
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// The queue is currently empty so wait for a while to see if what
comment|// we need comes in first
name|sleeper
operator|.
name|sleep
argument_list|()
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Put "
operator|+
name|op
operator|.
name|toString
argument_list|()
operator|+
literal|" back on queue"
argument_list|)
expr_stmt|;
block|}
name|toDoQueue
operator|.
name|put
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Putting into toDoQueue was interrupted."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// There was an exception performing the operation.
if|if
condition|(
name|ex
operator|instanceof
name|RemoteException
condition|)
block|{
try|try
block|{
name|ex
operator|=
name|RemoteExceptionHandler
operator|.
name|decodeRemoteException
argument_list|(
operator|(
name|RemoteException
operator|)
name|ex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"main processing loop: "
operator|+
name|op
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// make sure the filesystem is still ok. otherwise, we're toast.
if|if
condition|(
operator|!
name|checkFileSystem
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|LOG
operator|.
name|warn
argument_list|(
literal|"Processing pending operations: "
operator|+
name|op
operator|.
name|toString
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
try|try
block|{
comment|// put the operation back on the queue... maybe it'll work next time.
name|toDoQueue
operator|.
name|put
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Putting into toDoQueue was interrupted."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"main processing loop: "
operator|+
name|op
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/*    * Start up all services. If any of these threads gets an unhandled exception    * then they just die with a logged message.  This should be fine because    * in general, we do not expect the master to get such unhandled exceptions    *  as OOMEs; it should be lightly loaded. See what HRegionServer does if    *  need to install an unexpected exception handler.    */
specifier|private
name|void
name|startServiceThreads
parameter_list|()
block|{
name|String
name|threadName
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
try|try
block|{
name|regionManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|serverManager
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Put up info server.
name|int
name|port
init|=
name|this
operator|.
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.master.info.port"
argument_list|,
literal|60010
argument_list|)
decl_stmt|;
if|if
condition|(
name|port
operator|>=
literal|0
condition|)
block|{
name|String
name|a
init|=
name|this
operator|.
name|conf
operator|.
name|get
argument_list|(
literal|"hbase.master.info.bindAddress"
argument_list|,
literal|"0.0.0.0"
argument_list|)
decl_stmt|;
name|this
operator|.
name|infoServer
operator|=
operator|new
name|InfoServer
argument_list|(
name|MASTER
argument_list|,
name|a
argument_list|,
name|port
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|infoServer
operator|.
name|setAttribute
argument_list|(
name|MASTER
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|infoServer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|// Start the server so everything else is running before we start
comment|// receiving requests.
name|this
operator|.
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|RemoteException
condition|)
block|{
try|try
block|{
name|e
operator|=
name|RemoteExceptionHandler
operator|.
name|decodeRemoteException
argument_list|(
operator|(
name|RemoteException
operator|)
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"thread start"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Something happened during startup. Shut things down.
name|this
operator|.
name|closed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed startup"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Started service threads"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Started service threads"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Start shutting down the master    */
name|void
name|startShutdown
parameter_list|()
block|{
name|closed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|regionManager
operator|.
name|stopScanners
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|toDoQueue
init|)
block|{
name|toDoQueue
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Empty the queue
name|delayedToDoQueue
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Empty shut down queue
name|toDoQueue
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
comment|// Wake main thread
block|}
name|serverManager
operator|.
name|notifyServers
argument_list|()
expr_stmt|;
block|}
comment|/*    * HMasterRegionInterface    */
comment|/** {@inheritDoc} */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|public
name|HbaseMapWritable
name|regionServerStartup
parameter_list|(
name|HServerInfo
name|serverInfo
parameter_list|)
throws|throws
name|IOException
block|{
comment|// register with server manager
name|serverManager
operator|.
name|regionServerStartup
argument_list|(
name|serverInfo
argument_list|)
expr_stmt|;
comment|// send back some config info
return|return
name|createConfigurationSubset
argument_list|()
return|;
block|}
comment|/**    * @return Subset of configuration to pass initializing regionservers: e.g.    * the filesystem to use and root directory to use.    */
specifier|protected
name|HbaseMapWritable
name|createConfigurationSubset
parameter_list|()
block|{
name|HbaseMapWritable
name|mw
init|=
name|addConfig
argument_list|(
operator|new
name|HbaseMapWritable
argument_list|()
argument_list|,
name|HConstants
operator|.
name|HBASE_DIR
argument_list|)
decl_stmt|;
return|return
name|addConfig
argument_list|(
name|mw
argument_list|,
literal|"fs.default.name"
argument_list|)
return|;
block|}
specifier|private
name|HbaseMapWritable
name|addConfig
parameter_list|(
specifier|final
name|HbaseMapWritable
name|mw
parameter_list|,
specifier|final
name|String
name|key
parameter_list|)
block|{
name|mw
operator|.
name|put
argument_list|(
operator|new
name|Text
argument_list|(
name|key
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
name|this
operator|.
name|conf
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|mw
return|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|HMsg
index|[]
name|regionServerReport
parameter_list|(
name|HServerInfo
name|serverInfo
parameter_list|,
name|HMsg
name|msgs
index|[]
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|serverManager
operator|.
name|regionServerReport
argument_list|(
name|serverInfo
argument_list|,
name|msgs
argument_list|)
return|;
block|}
comment|/*    * HMasterInterface    */
comment|/** {@inheritDoc} */
specifier|public
name|boolean
name|isMasterRunning
parameter_list|()
block|{
return|return
operator|!
name|closed
operator|.
name|get
argument_list|()
return|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Cluster shutdown requested. Starting to quiesce servers"
argument_list|)
expr_stmt|;
name|this
operator|.
name|shutdownRequested
operator|=
literal|true
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|void
name|createTable
parameter_list|(
name|HTableDescriptor
name|desc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|isMasterRunning
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MasterNotRunningException
argument_list|()
throw|;
block|}
name|HRegionInfo
name|newRegion
init|=
operator|new
name|HRegionInfo
argument_list|(
name|desc
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|tries
init|=
literal|0
init|;
name|tries
operator|<
name|numRetries
condition|;
name|tries
operator|++
control|)
block|{
try|try
block|{
comment|// We can not access meta regions if they have not already been
comment|// assigned and scanned.  If we timeout waiting, just shutdown.
if|if
condition|(
name|regionManager
operator|.
name|waitForMetaRegionsOrClose
argument_list|()
condition|)
block|{
break|break;
block|}
name|createTable
argument_list|(
name|newRegion
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"created table "
operator|+
name|desc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|tries
operator|==
name|numRetries
operator|-
literal|1
condition|)
block|{
throw|throw
name|RemoteExceptionHandler
operator|.
name|checkIOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|createTable
parameter_list|(
specifier|final
name|HRegionInfo
name|newRegion
parameter_list|)
throws|throws
name|IOException
block|{
name|Text
name|tableName
init|=
name|newRegion
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|tableInCreation
operator|.
name|contains
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|TableExistsException
argument_list|(
literal|"Table "
operator|+
name|tableName
operator|+
literal|" in process "
operator|+
literal|"of being created"
argument_list|)
throw|;
block|}
name|tableInCreation
operator|.
name|add
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
try|try
block|{
comment|// 1. Check to see if table already exists. Get meta region where
comment|// table would sit should it exist. Open scanner on it. If a region
comment|// for the table we want to create already exists, then table already
comment|// created. Throw already-exists exception.
name|MetaRegion
name|m
init|=
name|regionManager
operator|.
name|getFirstMetaRegionForRegion
argument_list|(
name|newRegion
argument_list|)
decl_stmt|;
name|Text
name|metaRegionName
init|=
name|m
operator|.
name|getRegionName
argument_list|()
decl_stmt|;
name|HRegionInterface
name|srvr
init|=
name|connection
operator|.
name|getHRegionConnection
argument_list|(
name|m
operator|.
name|getServer
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|scannerid
init|=
name|srvr
operator|.
name|openScanner
argument_list|(
name|metaRegionName
argument_list|,
name|COL_REGIONINFO_ARRAY
argument_list|,
name|tableName
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|HbaseMapWritable
name|data
init|=
name|srvr
operator|.
name|next
argument_list|(
name|scannerid
argument_list|)
decl_stmt|;
comment|// Test data and that the row for the data is for our table. If table
comment|// does not exist, scanner will return row after where our table would
comment|// be inserted if it exists so look for exact match on table name.
if|if
condition|(
name|data
operator|!=
literal|null
operator|&&
name|data
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Writable
name|k
range|:
name|data
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|HRegionInfo
operator|.
name|getTableNameFromRegionName
argument_list|(
operator|(
operator|(
name|HStoreKey
operator|)
name|k
operator|)
operator|.
name|getRow
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
comment|// Then a region for this table already exists. Ergo table exists.
throw|throw
operator|new
name|TableExistsException
argument_list|(
name|tableName
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|srvr
operator|.
name|close
argument_list|(
name|scannerid
argument_list|)
expr_stmt|;
block|}
name|regionManager
operator|.
name|createRegion
argument_list|(
name|newRegion
argument_list|,
name|srvr
argument_list|,
name|metaRegionName
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tableInCreation
operator|.
name|remove
argument_list|(
name|newRegion
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** {@inheritDoc} */
specifier|public
name|void
name|deleteTable
parameter_list|(
name|Text
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
operator|new
name|TableDelete
argument_list|(
name|this
argument_list|,
name|tableName
argument_list|)
operator|.
name|process
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"deleted table: "
operator|+
name|tableName
argument_list|)
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|void
name|addColumn
parameter_list|(
name|Text
name|tableName
parameter_list|,
name|HColumnDescriptor
name|column
parameter_list|)
throws|throws
name|IOException
block|{
operator|new
name|AddColumn
argument_list|(
name|this
argument_list|,
name|tableName
argument_list|,
name|column
argument_list|)
operator|.
name|process
argument_list|()
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|void
name|modifyColumn
parameter_list|(
name|Text
name|tableName
parameter_list|,
name|Text
name|columnName
parameter_list|,
name|HColumnDescriptor
name|descriptor
parameter_list|)
throws|throws
name|IOException
block|{
operator|new
name|ModifyColumn
argument_list|(
name|this
argument_list|,
name|tableName
argument_list|,
name|columnName
argument_list|,
name|descriptor
argument_list|)
operator|.
name|process
argument_list|()
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|void
name|deleteColumn
parameter_list|(
name|Text
name|tableName
parameter_list|,
name|Text
name|columnName
parameter_list|)
throws|throws
name|IOException
block|{
operator|new
name|DeleteColumn
argument_list|(
name|this
argument_list|,
name|tableName
argument_list|,
name|HStoreKey
operator|.
name|extractFamily
argument_list|(
name|columnName
argument_list|)
argument_list|)
operator|.
name|process
argument_list|()
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|void
name|enableTable
parameter_list|(
name|Text
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
operator|new
name|ChangeTableState
argument_list|(
name|this
argument_list|,
name|tableName
argument_list|,
literal|true
argument_list|)
operator|.
name|process
argument_list|()
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|void
name|disableTable
parameter_list|(
name|Text
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
operator|new
name|ChangeTableState
argument_list|(
name|this
argument_list|,
name|tableName
argument_list|,
literal|false
argument_list|)
operator|.
name|process
argument_list|()
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|HServerAddress
name|findRootRegion
parameter_list|()
block|{
return|return
name|regionManager
operator|.
name|getRootRegionLocation
argument_list|()
return|;
block|}
comment|/*    * Managing leases    */
comment|/**    * @return Return configuration being used by this server.    */
specifier|public
name|HBaseConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|this
operator|.
name|conf
return|;
block|}
comment|/*    * Get HRegionInfo from passed META map of row values.    * Returns null if none found (and logs fact that expected COL_REGIONINFO    * was missing).  Utility method used by scanners of META tables.    * @param map Map to do lookup in.    * @return Null or found HRegionInfo.    * @throws IOException    */
name|HRegionInfo
name|getHRegionInfo
parameter_list|(
specifier|final
name|Map
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|map
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|bytes
init|=
name|map
operator|.
name|get
argument_list|(
name|COL_REGIONINFO
argument_list|)
decl_stmt|;
if|if
condition|(
name|bytes
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|COL_REGIONINFO
operator|.
name|toString
argument_list|()
operator|+
literal|" is empty; has keys: "
operator|+
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
operator|(
name|HRegionInfo
operator|)
name|Writables
operator|.
name|getWritable
argument_list|(
name|bytes
argument_list|,
operator|new
name|HRegionInfo
argument_list|()
argument_list|)
return|;
block|}
comment|/*    * Main program    */
specifier|private
specifier|static
name|void
name|printUsageAndExit
parameter_list|()
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java org.apache.hbase.HMaster "
operator|+
literal|"[--bind=hostname:port] start|stop"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
name|void
name|doMain
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|HMaster
argument_list|>
name|masterClass
parameter_list|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|1
condition|)
block|{
name|printUsageAndExit
argument_list|()
expr_stmt|;
block|}
name|HBaseConfiguration
name|conf
init|=
operator|new
name|HBaseConfiguration
argument_list|()
decl_stmt|;
comment|// Process command-line args. TODO: Better cmd-line processing
comment|// (but hopefully something not as painful as cli options).
specifier|final
name|String
name|addressArgKey
init|=
literal|"--bind="
decl_stmt|;
for|for
control|(
name|String
name|cmd
range|:
name|args
control|)
block|{
if|if
condition|(
name|cmd
operator|.
name|startsWith
argument_list|(
name|addressArgKey
argument_list|)
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|MASTER_ADDRESS
argument_list|,
name|cmd
operator|.
name|substring
argument_list|(
name|addressArgKey
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"start"
argument_list|)
condition|)
block|{
try|try
block|{
comment|// If 'local', defer to LocalHBaseCluster instance.
if|if
condition|(
name|LocalHBaseCluster
operator|.
name|isLocal
argument_list|(
name|conf
argument_list|)
condition|)
block|{
operator|(
operator|new
name|LocalHBaseCluster
argument_list|(
name|conf
argument_list|)
operator|)
operator|.
name|startup
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Constructor
argument_list|<
name|?
extends|extends
name|HMaster
argument_list|>
name|c
init|=
name|masterClass
operator|.
name|getConstructor
argument_list|(
name|HBaseConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|HMaster
name|master
init|=
name|c
operator|.
name|newInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|master
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can not start master"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"stop"
argument_list|)
condition|)
block|{
try|try
block|{
if|if
condition|(
name|LocalHBaseCluster
operator|.
name|isLocal
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|LocalHBaseCluster
operator|.
name|doLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|HBaseAdmin
name|adm
init|=
operator|new
name|HBaseAdmin
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|adm
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can not stop master"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
comment|// Print out usage if we get to here.
name|printUsageAndExit
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Main program    * @param args    */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|doMain
argument_list|(
name|args
argument_list|,
name|HMaster
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

