begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2008 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerLoad
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|BatchUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Writables
import|;
end_import

begin_comment
comment|/**  * Class to manage assigning regions to servers, state of root and meta, etc.  */
end_comment

begin_class
class|class
name|RegionManager
implements|implements
name|HConstants
block|{
specifier|protected
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RegionManager
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|volatile
name|AtomicReference
argument_list|<
name|HServerAddress
argument_list|>
name|rootRegionLocation
init|=
operator|new
name|AtomicReference
argument_list|<
name|HServerAddress
argument_list|>
argument_list|(
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|Lock
name|splitLogLock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|RootScanner
name|rootScannerThread
decl_stmt|;
specifier|final
name|MetaScanner
name|metaScannerThread
decl_stmt|;
comment|/** Set by root scanner to indicate the number of meta regions */
specifier|private
specifier|final
name|AtomicInteger
name|numberOfMetaRegions
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
comment|/** These are the online meta regions */
specifier|private
specifier|final
name|SortedMap
argument_list|<
name|Text
argument_list|,
name|MetaRegion
argument_list|>
name|onlineMetaRegions
init|=
name|Collections
operator|.
name|synchronizedSortedMap
argument_list|(
operator|new
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|MetaRegion
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
comment|/**    * The 'unassignedRegions' table maps from a HRegionInfo to a timestamp that    * indicates the last time we *tried* to assign the region to a RegionServer.    * If the timestamp is out of date, then we can try to reassign it.     *     * We fill 'unassignedRecords' by scanning ROOT and META tables, learning the    * set of all known valid regions.    *     *<p>Items are removed from this list when a region server reports in that    * the region has been deployed.    */
specifier|private
specifier|final
name|SortedMap
argument_list|<
name|HRegionInfo
argument_list|,
name|Long
argument_list|>
name|unassignedRegions
init|=
name|Collections
operator|.
name|synchronizedSortedMap
argument_list|(
operator|new
name|TreeMap
argument_list|<
name|HRegionInfo
argument_list|,
name|Long
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
comment|/**    * Regions that have been assigned, and the server has reported that it has    * started serving it, but that we have not yet recorded in the meta table.    */
specifier|private
specifier|final
name|Set
argument_list|<
name|Text
argument_list|>
name|pendingRegions
init|=
name|Collections
operator|.
name|synchronizedSet
argument_list|(
operator|new
name|HashSet
argument_list|<
name|Text
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
comment|/**    * The 'killList' is a list of regions that are going to be closed, but not    * reopened.    */
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Text
argument_list|,
name|HRegionInfo
argument_list|>
argument_list|>
name|killList
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Text
argument_list|,
name|HRegionInfo
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/** 'killedRegions' contains regions that are in the process of being closed */
specifier|private
specifier|final
name|Set
argument_list|<
name|Text
argument_list|>
name|killedRegions
init|=
name|Collections
operator|.
name|synchronizedSet
argument_list|(
operator|new
name|HashSet
argument_list|<
name|Text
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
comment|/**    * 'regionsToDelete' contains regions that need to be deleted, but cannot be    * until the region server closes it    */
specifier|private
specifier|final
name|Set
argument_list|<
name|Text
argument_list|>
name|regionsToDelete
init|=
name|Collections
operator|.
name|synchronizedSet
argument_list|(
operator|new
name|HashSet
argument_list|<
name|Text
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|HMaster
name|master
decl_stmt|;
name|RegionManager
parameter_list|(
name|HMaster
name|master
parameter_list|)
block|{
name|this
operator|.
name|master
operator|=
name|master
expr_stmt|;
comment|// The root region
name|rootScannerThread
operator|=
operator|new
name|RootScanner
argument_list|(
name|master
argument_list|,
name|this
argument_list|)
expr_stmt|;
comment|// Scans the meta table
name|metaScannerThread
operator|=
operator|new
name|MetaScanner
argument_list|(
name|master
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|unassignRootRegion
argument_list|()
expr_stmt|;
block|}
name|void
name|start
parameter_list|()
block|{
name|Threads
operator|.
name|setDaemonThreadRunning
argument_list|(
name|rootScannerThread
argument_list|,
literal|"RegionManager.rootScanner"
argument_list|)
expr_stmt|;
name|Threads
operator|.
name|setDaemonThreadRunning
argument_list|(
name|metaScannerThread
argument_list|,
literal|"RegionManager.metaScanner"
argument_list|)
expr_stmt|;
block|}
comment|/*    * Unassign the root region.    * This method would be used in case where root region server had died    * without reporting in.  Currently, we just flounder and never recover.  We    * could 'notice' dead region server in root scanner -- if we failed access    * multiple times -- but reassigning root is catastrophic.    *     */
name|void
name|unassignRootRegion
parameter_list|()
block|{
name|rootRegionLocation
operator|.
name|set
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|master
operator|.
name|shutdownRequested
condition|)
block|{
name|unassignedRegions
operator|.
name|put
argument_list|(
name|HRegionInfo
operator|.
name|rootRegionInfo
argument_list|,
name|ZERO_L
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Assigns regions to region servers attempting to balance the load across    * all region servers    *     * @param info    * @param serverName    * @param returnMsgs    */
name|void
name|assignRegions
parameter_list|(
name|HServerInfo
name|info
parameter_list|,
name|String
name|serverName
parameter_list|,
name|ArrayList
argument_list|<
name|HMsg
argument_list|>
name|returnMsgs
parameter_list|)
block|{
synchronized|synchronized
init|(
name|unassignedRegions
init|)
block|{
comment|// We need to hold a lock on assign attempts while we figure out what to
comment|// do so that multiple threads do not execute this method in parallel
comment|// resulting in assigning the same region to multiple servers.
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
name|regionsToAssign
init|=
operator|new
name|HashSet
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|HRegionInfo
argument_list|,
name|Long
argument_list|>
name|e
range|:
name|unassignedRegions
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|HRegionInfo
name|i
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|numberOfMetaRegions
operator|.
name|get
argument_list|()
operator|!=
name|onlineMetaRegions
operator|.
name|size
argument_list|()
operator|&&
operator|!
name|i
operator|.
name|isMetaRegion
argument_list|()
condition|)
block|{
comment|// Can't assign user regions until all meta regions have been assigned
comment|// and are on-line
continue|continue;
block|}
name|long
name|diff
init|=
name|now
operator|-
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|longValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|diff
operator|>
name|master
operator|.
name|maxRegionOpenTime
condition|)
block|{
name|regionsToAssign
operator|.
name|add
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|nRegionsToAssign
init|=
name|regionsToAssign
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|nRegionsToAssign
operator|<=
literal|0
condition|)
block|{
comment|// No regions to assign.  Return.
return|return;
block|}
if|if
condition|(
name|master
operator|.
name|serverManager
operator|.
name|numServers
argument_list|()
operator|==
literal|1
condition|)
block|{
name|assignRegionsToOneServer
argument_list|(
name|regionsToAssign
argument_list|,
name|serverName
argument_list|,
name|returnMsgs
argument_list|)
expr_stmt|;
comment|// Finished.  Return.
return|return;
block|}
comment|// Multiple servers in play.
comment|// We need to allocate regions only to most lightly loaded servers.
name|HServerLoad
name|thisServersLoad
init|=
name|info
operator|.
name|getLoad
argument_list|()
decl_stmt|;
name|int
name|nregions
init|=
name|regionsPerServer
argument_list|(
name|nRegionsToAssign
argument_list|,
name|thisServersLoad
argument_list|)
decl_stmt|;
name|nRegionsToAssign
operator|-=
name|nregions
expr_stmt|;
if|if
condition|(
name|nRegionsToAssign
operator|>
literal|0
condition|)
block|{
comment|// We still have more regions to assign. See how many we can assign
comment|// before this server becomes more heavily loaded than the next
comment|// most heavily loaded server.
name|SortedMap
argument_list|<
name|HServerLoad
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|heavyServers
init|=
operator|new
name|TreeMap
argument_list|<
name|HServerLoad
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|master
operator|.
name|serverManager
operator|.
name|loadToServers
init|)
block|{
name|heavyServers
operator|.
name|putAll
argument_list|(
name|master
operator|.
name|serverManager
operator|.
name|loadToServers
operator|.
name|tailMap
argument_list|(
name|thisServersLoad
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|nservers
init|=
literal|0
decl_stmt|;
name|HServerLoad
name|heavierLoad
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|HServerLoad
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|e
range|:
name|heavyServers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|servers
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|nservers
operator|+=
name|servers
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|compareTo
argument_list|(
name|thisServersLoad
argument_list|)
operator|==
literal|0
condition|)
block|{
comment|// This is the load factor of the server we are considering
name|nservers
operator|-=
literal|1
expr_stmt|;
continue|continue;
block|}
comment|// If we get here, we are at the first load entry that is a
comment|// heavier load than the server we are considering
name|heavierLoad
operator|=
name|e
operator|.
name|getKey
argument_list|()
expr_stmt|;
break|break;
block|}
name|nregions
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|heavierLoad
operator|!=
literal|null
condition|)
block|{
comment|// There is a more heavily loaded server
for|for
control|(
name|HServerLoad
name|load
init|=
operator|new
name|HServerLoad
argument_list|(
name|thisServersLoad
operator|.
name|getNumberOfRequests
argument_list|()
argument_list|,
name|thisServersLoad
operator|.
name|getNumberOfRegions
argument_list|()
argument_list|)
init|;
name|load
operator|.
name|compareTo
argument_list|(
name|heavierLoad
argument_list|)
operator|<=
literal|0
operator|&&
name|nregions
operator|<
name|nRegionsToAssign
condition|;
name|load
operator|.
name|setNumberOfRegions
argument_list|(
name|load
operator|.
name|getNumberOfRegions
argument_list|()
operator|+
literal|1
argument_list|)
operator|,
name|nregions
operator|++
control|)
block|{
comment|// continue;
block|}
block|}
if|if
condition|(
name|nregions
operator|<
name|nRegionsToAssign
condition|)
block|{
comment|// There are some more heavily loaded servers
comment|// but we can't assign all the regions to this server.
if|if
condition|(
name|nservers
operator|>
literal|0
condition|)
block|{
comment|// There are other servers that can share the load.
comment|// Split regions that need assignment across the servers.
name|nregions
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
operator|(
literal|1.0
operator|*
name|nRegionsToAssign
operator|)
operator|/
operator|(
literal|1.0
operator|*
name|nservers
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// No other servers with same load.
comment|// Split regions over all available servers
name|nregions
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
operator|(
literal|1.0
operator|*
name|nRegionsToAssign
operator|)
operator|/
operator|(
literal|1.0
operator|*
name|master
operator|.
name|serverManager
operator|.
name|numServers
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Assign all regions to this server
name|nregions
operator|=
name|nRegionsToAssign
expr_stmt|;
block|}
name|now
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
for|for
control|(
name|HRegionInfo
name|regionInfo
range|:
name|regionsToAssign
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"assigning region "
operator|+
name|regionInfo
operator|.
name|getRegionName
argument_list|()
operator|+
literal|" to server "
operator|+
name|serverName
argument_list|)
expr_stmt|;
name|unassignedRegions
operator|.
name|put
argument_list|(
name|regionInfo
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|now
argument_list|)
argument_list|)
expr_stmt|;
name|returnMsgs
operator|.
name|add
argument_list|(
operator|new
name|HMsg
argument_list|(
name|HMsg
operator|.
name|MSG_REGION_OPEN
argument_list|,
name|regionInfo
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|--
name|nregions
operator|<=
literal|0
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
block|}
comment|/*    * @param nRegionsToAssign    * @param thisServersLoad    * @return How many regions we can assign to more lightly loaded servers    */
specifier|private
name|int
name|regionsPerServer
parameter_list|(
specifier|final
name|int
name|nRegionsToAssign
parameter_list|,
specifier|final
name|HServerLoad
name|thisServersLoad
parameter_list|)
block|{
name|SortedMap
argument_list|<
name|HServerLoad
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|lightServers
init|=
operator|new
name|TreeMap
argument_list|<
name|HServerLoad
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|master
operator|.
name|serverManager
operator|.
name|loadToServers
init|)
block|{
name|lightServers
operator|.
name|putAll
argument_list|(
name|master
operator|.
name|serverManager
operator|.
name|loadToServers
operator|.
name|headMap
argument_list|(
name|thisServersLoad
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|nRegions
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|HServerLoad
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|e
range|:
name|lightServers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|HServerLoad
name|lightLoad
init|=
operator|new
name|HServerLoad
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getNumberOfRequests
argument_list|()
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getNumberOfRegions
argument_list|()
argument_list|)
decl_stmt|;
do|do
block|{
name|lightLoad
operator|.
name|setNumberOfRegions
argument_list|(
name|lightLoad
operator|.
name|getNumberOfRegions
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|nRegions
operator|+=
literal|1
expr_stmt|;
block|}
do|while
condition|(
name|lightLoad
operator|.
name|compareTo
argument_list|(
name|thisServersLoad
argument_list|)
operator|<=
literal|0
operator|&&
name|nRegions
operator|<
name|nRegionsToAssign
condition|)
do|;
name|nRegions
operator|*=
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|nRegions
operator|>=
name|nRegionsToAssign
condition|)
block|{
break|break;
block|}
block|}
return|return
name|nRegions
return|;
block|}
comment|/*    * Assign all to the only server. An unlikely case but still possible.    * @param regionsToAssign    * @param serverName    * @param returnMsgs    */
specifier|private
name|void
name|assignRegionsToOneServer
parameter_list|(
specifier|final
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
name|regionsToAssign
parameter_list|,
specifier|final
name|String
name|serverName
parameter_list|,
specifier|final
name|ArrayList
argument_list|<
name|HMsg
argument_list|>
name|returnMsgs
parameter_list|)
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|HRegionInfo
name|regionInfo
range|:
name|regionsToAssign
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"assigning region "
operator|+
name|regionInfo
operator|.
name|getRegionName
argument_list|()
operator|+
literal|" to the only server "
operator|+
name|serverName
argument_list|)
expr_stmt|;
name|unassignedRegions
operator|.
name|put
argument_list|(
name|regionInfo
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|now
argument_list|)
argument_list|)
expr_stmt|;
name|returnMsgs
operator|.
name|add
argument_list|(
operator|new
name|HMsg
argument_list|(
name|HMsg
operator|.
name|MSG_REGION_OPEN
argument_list|,
name|regionInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @return Read-only map of online regions.    */
specifier|public
name|Map
argument_list|<
name|Text
argument_list|,
name|MetaRegion
argument_list|>
name|getOnlineMetaRegions
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableSortedMap
argument_list|(
name|onlineMetaRegions
argument_list|)
return|;
block|}
comment|/*    * Stop the root and meta scanners so that the region servers serving meta    * regions can shut down.    */
specifier|public
name|void
name|stopScanners
parameter_list|()
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"telling root scanner to stop"
argument_list|)
expr_stmt|;
block|}
name|rootScannerThread
operator|.
name|interruptIfAlive
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"telling meta scanner to stop"
argument_list|)
expr_stmt|;
block|}
name|metaScannerThread
operator|.
name|interruptIfAlive
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"meta and root scanners notified"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Stop the region assigner */
specifier|public
name|void
name|stop
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|rootScannerThread
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|rootScannerThread
operator|.
name|join
argument_list|()
expr_stmt|;
comment|// Wait for the root scanner to finish.
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|iex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"root scanner"
argument_list|,
name|iex
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|metaScannerThread
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|metaScannerThread
operator|.
name|join
argument_list|()
expr_stmt|;
comment|// Wait for meta scanner to finish.
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|iex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"meta scanner"
argument_list|,
name|iex
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|waitForMetaRegionsOrClose
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|metaScannerThread
operator|.
name|waitForMetaRegionsOrClose
argument_list|()
return|;
block|}
comment|/**    * Search our map of online meta regions to find the first meta region that     * should contain a pointer to<i>newRegion</i>.     */
specifier|public
name|MetaRegion
name|getFirstMetaRegionForRegion
parameter_list|(
name|HRegionInfo
name|newRegion
parameter_list|)
block|{
synchronized|synchronized
init|(
name|onlineMetaRegions
init|)
block|{
if|if
condition|(
name|onlineMetaRegions
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|onlineMetaRegions
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|onlineMetaRegions
operator|.
name|get
argument_list|(
name|onlineMetaRegions
operator|.
name|firstKey
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|onlineMetaRegions
operator|.
name|containsKey
argument_list|(
name|newRegion
operator|.
name|getRegionName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|onlineMetaRegions
operator|.
name|get
argument_list|(
name|newRegion
operator|.
name|getRegionName
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|onlineMetaRegions
operator|.
name|get
argument_list|(
name|onlineMetaRegions
operator|.
name|headMap
argument_list|(
name|newRegion
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|lastKey
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
block|}
comment|/**    * Get a set of all the meta regions that contain info about a given table.    */
specifier|public
name|Set
argument_list|<
name|MetaRegion
argument_list|>
name|getMetaRegionsForTable
parameter_list|(
name|Text
name|tableName
parameter_list|)
block|{
name|Text
name|firstMetaRegion
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|MetaRegion
argument_list|>
name|metaRegions
init|=
operator|new
name|HashSet
argument_list|<
name|MetaRegion
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|onlineMetaRegions
init|)
block|{
if|if
condition|(
name|onlineMetaRegions
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|firstMetaRegion
operator|=
name|onlineMetaRegions
operator|.
name|firstKey
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|onlineMetaRegions
operator|.
name|containsKey
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|firstMetaRegion
operator|=
name|tableName
expr_stmt|;
block|}
else|else
block|{
name|firstMetaRegion
operator|=
name|onlineMetaRegions
operator|.
name|headMap
argument_list|(
name|tableName
argument_list|)
operator|.
name|lastKey
argument_list|()
expr_stmt|;
block|}
name|metaRegions
operator|.
name|addAll
argument_list|(
name|onlineMetaRegions
operator|.
name|tailMap
argument_list|(
name|firstMetaRegion
argument_list|)
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|metaRegions
return|;
block|}
specifier|public
name|void
name|createRegion
parameter_list|(
name|HRegionInfo
name|newRegion
parameter_list|,
name|HRegionInterface
name|server
parameter_list|,
name|Text
name|metaRegionName
parameter_list|)
throws|throws
name|IOException
block|{
comment|// 2. Create the HRegion
name|HRegion
name|region
init|=
name|HRegion
operator|.
name|createHRegion
argument_list|(
name|newRegion
argument_list|,
name|master
operator|.
name|rootdir
argument_list|,
name|master
operator|.
name|conf
argument_list|)
decl_stmt|;
comment|// 3. Insert into meta
name|HRegionInfo
name|info
init|=
name|region
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
name|Text
name|regionName
init|=
name|region
operator|.
name|getRegionName
argument_list|()
decl_stmt|;
name|BatchUpdate
name|b
init|=
operator|new
name|BatchUpdate
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
name|b
operator|.
name|put
argument_list|(
name|COL_REGIONINFO
argument_list|,
name|Writables
operator|.
name|getBytes
argument_list|(
name|info
argument_list|)
argument_list|)
expr_stmt|;
name|server
operator|.
name|batchUpdate
argument_list|(
name|metaRegionName
argument_list|,
name|b
argument_list|)
expr_stmt|;
comment|// 4. Close the new region to flush it to disk.  Close its log file too.
name|region
operator|.
name|close
argument_list|()
expr_stmt|;
name|region
operator|.
name|getLog
argument_list|()
operator|.
name|closeAndDelete
argument_list|()
expr_stmt|;
comment|// 5. Get it assigned to a server
name|unassignedRegions
operator|.
name|put
argument_list|(
name|info
argument_list|,
name|ZERO_L
argument_list|)
expr_stmt|;
block|}
comment|/** Set a MetaRegion as online. */
specifier|public
name|void
name|putMetaRegionOnline
parameter_list|(
name|MetaRegion
name|metaRegion
parameter_list|)
block|{
name|onlineMetaRegions
operator|.
name|put
argument_list|(
name|metaRegion
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|metaRegion
argument_list|)
expr_stmt|;
block|}
comment|/** Get a list of online MetaRegions */
specifier|public
name|List
argument_list|<
name|MetaRegion
argument_list|>
name|getListOfOnlineMetaRegions
parameter_list|()
block|{
name|List
argument_list|<
name|MetaRegion
argument_list|>
name|regions
init|=
operator|new
name|ArrayList
argument_list|<
name|MetaRegion
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|onlineMetaRegions
init|)
block|{
name|regions
operator|.
name|addAll
argument_list|(
name|onlineMetaRegions
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|regions
return|;
block|}
comment|/** count of online meta regions */
specifier|public
name|int
name|numOnlineMetaRegions
parameter_list|()
block|{
return|return
name|onlineMetaRegions
operator|.
name|size
argument_list|()
return|;
block|}
comment|/** Check if a meta region is online by its name */
specifier|public
name|boolean
name|isMetaRegionOnline
parameter_list|(
name|Text
name|startKey
parameter_list|)
block|{
return|return
name|onlineMetaRegions
operator|.
name|containsKey
argument_list|(
name|startKey
argument_list|)
return|;
block|}
comment|/** Set an online MetaRegion offline - remove it from the map. **/
specifier|public
name|void
name|offlineMetaRegion
parameter_list|(
name|Text
name|startKey
parameter_list|)
block|{
name|onlineMetaRegions
operator|.
name|remove
argument_list|(
name|startKey
argument_list|)
expr_stmt|;
block|}
comment|/** Check if a region is unassigned */
specifier|public
name|boolean
name|isUnassigned
parameter_list|(
name|HRegionInfo
name|info
parameter_list|)
block|{
return|return
name|unassignedRegions
operator|.
name|containsKey
argument_list|(
name|info
argument_list|)
return|;
block|}
comment|/** Check if a region is pending */
specifier|public
name|boolean
name|isPending
parameter_list|(
name|Text
name|regionName
parameter_list|)
block|{
return|return
name|pendingRegions
operator|.
name|contains
argument_list|(
name|regionName
argument_list|)
return|;
block|}
comment|/** Set a region to unassigned */
specifier|public
name|void
name|setUnassigned
parameter_list|(
name|HRegionInfo
name|info
parameter_list|)
block|{
name|unassignedRegions
operator|.
name|put
argument_list|(
name|info
argument_list|,
name|ZERO_L
argument_list|)
expr_stmt|;
block|}
comment|/** Set a region to pending assignment */
specifier|public
name|void
name|setPending
parameter_list|(
name|Text
name|regionName
parameter_list|)
block|{
name|pendingRegions
operator|.
name|add
argument_list|(
name|regionName
argument_list|)
expr_stmt|;
block|}
comment|/** Unset region's pending status */
specifier|public
name|void
name|noLongerPending
parameter_list|(
name|Text
name|regionName
parameter_list|)
block|{
name|pendingRegions
operator|.
name|remove
argument_list|(
name|regionName
argument_list|)
expr_stmt|;
block|}
comment|/** Update the deadline for a region assignment to be completed */
specifier|public
name|void
name|updateAssignmentDeadline
parameter_list|(
name|HRegionInfo
name|info
parameter_list|)
block|{
synchronized|synchronized
init|(
name|unassignedRegions
init|)
block|{
comment|// Region server has acknowledged request to open region.
comment|// Extend region open time by max region open time.
name|unassignedRegions
operator|.
name|put
argument_list|(
name|info
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|master
operator|.
name|maxRegionOpenTime
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Unset a region's unassigned status */
specifier|public
name|void
name|noLongerUnassigned
parameter_list|(
name|HRegionInfo
name|info
parameter_list|)
block|{
name|unassignedRegions
operator|.
name|remove
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
comment|/** Mark a region to be closed and not reopened */
specifier|public
name|void
name|markClosedNoReopen
parameter_list|(
name|String
name|serverName
parameter_list|,
name|HRegionInfo
name|info
parameter_list|)
block|{
synchronized|synchronized
init|(
name|killList
init|)
block|{
name|Map
argument_list|<
name|Text
argument_list|,
name|HRegionInfo
argument_list|>
name|serverKillList
init|=
name|killList
operator|.
name|get
argument_list|(
name|serverName
argument_list|)
decl_stmt|;
if|if
condition|(
name|serverKillList
operator|!=
literal|null
condition|)
block|{
name|serverKillList
operator|.
name|put
argument_list|(
name|info
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Mark a bunch of regions as closed not reopen at once for a server */
specifier|public
name|void
name|markClosedNoReopenBulk
parameter_list|(
name|String
name|serverName
parameter_list|,
name|Map
argument_list|<
name|Text
argument_list|,
name|HRegionInfo
argument_list|>
name|map
parameter_list|)
block|{
name|killList
operator|.
name|put
argument_list|(
name|serverName
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
comment|/**     * Get a map of region names to region infos waiting to be offlined for a     * given server     */
specifier|public
name|Map
argument_list|<
name|Text
argument_list|,
name|HRegionInfo
argument_list|>
name|getMarkedClosedNoReopen
parameter_list|(
name|String
name|serverName
parameter_list|)
block|{
return|return
name|killList
operator|.
name|get
argument_list|(
name|serverName
argument_list|)
return|;
block|}
comment|/**    * Check if a region is marked as closed not reopen.    */
specifier|public
name|boolean
name|isMarkedClosedNoReopen
parameter_list|(
name|String
name|serverName
parameter_list|,
name|Text
name|regionName
parameter_list|)
block|{
synchronized|synchronized
init|(
name|killList
init|)
block|{
name|Map
argument_list|<
name|Text
argument_list|,
name|HRegionInfo
argument_list|>
name|regionsToKill
init|=
name|killList
operator|.
name|get
argument_list|(
name|serverName
argument_list|)
decl_stmt|;
return|return
operator|(
name|regionsToKill
operator|!=
literal|null
operator|&&
name|regionsToKill
operator|.
name|containsKey
argument_list|(
name|regionName
argument_list|)
operator|)
return|;
block|}
block|}
comment|/**    * Mark a region as no longer waiting to be closed and not reopened.     */
specifier|public
name|void
name|noLongerMarkedClosedNoReopen
parameter_list|(
name|String
name|serverName
parameter_list|,
name|Text
name|regionName
parameter_list|)
block|{
synchronized|synchronized
init|(
name|killList
init|)
block|{
name|Map
argument_list|<
name|Text
argument_list|,
name|HRegionInfo
argument_list|>
name|serverKillList
init|=
name|killList
operator|.
name|get
argument_list|(
name|serverName
argument_list|)
decl_stmt|;
if|if
condition|(
name|serverKillList
operator|!=
literal|null
condition|)
block|{
name|serverKillList
operator|.
name|remove
argument_list|(
name|regionName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Check if a region is closing */
specifier|public
name|boolean
name|isClosing
parameter_list|(
name|Text
name|regionName
parameter_list|)
block|{
return|return
name|killedRegions
operator|.
name|contains
argument_list|(
name|regionName
argument_list|)
return|;
block|}
comment|/** Set a region as no longer closing (closed?) */
specifier|public
name|void
name|noLongerClosing
parameter_list|(
name|Text
name|regionName
parameter_list|)
block|{
name|killedRegions
operator|.
name|remove
argument_list|(
name|regionName
argument_list|)
expr_stmt|;
block|}
comment|/** mark a region as closing */
specifier|public
name|void
name|setClosing
parameter_list|(
name|Text
name|regionName
parameter_list|)
block|{
name|killedRegions
operator|.
name|add
argument_list|(
name|regionName
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add a meta region to the scan queue    */
specifier|public
name|void
name|addMetaRegionToScan
parameter_list|(
name|MetaRegion
name|m
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|metaScannerThread
operator|.
name|addMetaRegionToScan
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
comment|/** Mark a region as to be deleted */
specifier|public
name|void
name|markRegionForDeletion
parameter_list|(
name|Text
name|regionName
parameter_list|)
block|{
name|regionsToDelete
operator|.
name|add
argument_list|(
name|regionName
argument_list|)
expr_stmt|;
block|}
comment|/** Note that a region to delete has been deleted */
specifier|public
name|void
name|regionDeleted
parameter_list|(
name|Text
name|regionName
parameter_list|)
block|{
name|regionsToDelete
operator|.
name|remove
argument_list|(
name|regionName
argument_list|)
expr_stmt|;
block|}
comment|/** Check if a region is marked for deletion */
specifier|public
name|boolean
name|isMarkedForDeletion
parameter_list|(
name|Text
name|regionName
parameter_list|)
block|{
return|return
name|regionsToDelete
operator|.
name|contains
argument_list|(
name|regionName
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isInitialRootScanComplete
parameter_list|()
block|{
return|return
name|rootScannerThread
operator|.
name|isInitialScanComplete
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isInitialMetaScanComplete
parameter_list|()
block|{
return|return
name|metaScannerThread
operator|.
name|isInitialScanComplete
argument_list|()
return|;
block|}
specifier|public
name|HServerAddress
name|getRootRegionLocation
parameter_list|()
block|{
return|return
name|rootRegionLocation
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|void
name|waitForRootRegionLocation
parameter_list|()
block|{
synchronized|synchronized
init|(
name|rootRegionLocation
init|)
block|{
while|while
condition|(
operator|!
name|master
operator|.
name|closed
operator|.
name|get
argument_list|()
operator|&&
name|rootRegionLocation
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// rootRegionLocation will be filled in when we get an 'open region'
comment|// regionServerReport message from the HRegionServer that has been
comment|// allocated the ROOT region below.
try|try
block|{
name|rootRegionLocation
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// continue
block|}
block|}
block|}
block|}
specifier|public
name|int
name|numMetaRegions
parameter_list|()
block|{
return|return
name|numberOfMetaRegions
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|void
name|incrementNumMetaRegions
parameter_list|()
block|{
name|numberOfMetaRegions
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setRootRegionLocation
parameter_list|(
name|HServerAddress
name|address
parameter_list|)
block|{
synchronized|synchronized
init|(
name|rootRegionLocation
init|)
block|{
name|rootRegionLocation
operator|.
name|set
argument_list|(
operator|new
name|HServerAddress
argument_list|(
name|address
argument_list|)
argument_list|)
expr_stmt|;
name|rootRegionLocation
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setNumMetaRegions
parameter_list|(
name|int
name|num
parameter_list|)
block|{
name|numberOfMetaRegions
operator|.
name|set
argument_list|(
name|num
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

