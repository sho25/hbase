begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2008 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerLoad
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionHistorian
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|HRegionInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|BatchUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Writables
import|;
end_import

begin_comment
comment|/**  * Class to manage assigning regions to servers, state of root and meta, etc.  */
end_comment

begin_class
class|class
name|RegionManager
implements|implements
name|HConstants
block|{
specifier|protected
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RegionManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|volatile
name|AtomicReference
argument_list|<
name|HServerAddress
argument_list|>
name|rootRegionLocation
init|=
operator|new
name|AtomicReference
argument_list|<
name|HServerAddress
argument_list|>
argument_list|(
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|Lock
name|splitLogLock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|RootScanner
name|rootScannerThread
decl_stmt|;
specifier|final
name|MetaScanner
name|metaScannerThread
decl_stmt|;
comment|/** Set by root scanner to indicate the number of meta regions */
specifier|private
specifier|final
name|AtomicInteger
name|numberOfMetaRegions
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
comment|/** These are the online meta regions */
specifier|private
specifier|final
name|SortedMap
argument_list|<
name|byte
index|[]
argument_list|,
name|MetaRegion
argument_list|>
name|onlineMetaRegions
init|=
name|Collections
operator|.
name|synchronizedSortedMap
argument_list|(
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|MetaRegion
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|OVERLOADED
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Overloaded"
argument_list|)
decl_stmt|;
comment|/**    * The 'unassignedRegions' table maps from a HRegionInfo to a timestamp that    * indicates the last time we *tried* to assign the region to a RegionServer.    * If the timestamp is out of date, then we can try to reassign it.     *     * We fill 'unassignedRecords' by scanning ROOT and META tables, learning the    * set of all known valid regions.    *     *<p>Items are removed from this list when a region server reports in that    * the region has been deployed.    *    * TODO: Need to be a sorted map?    */
specifier|private
specifier|final
name|SortedMap
argument_list|<
name|HRegionInfo
argument_list|,
name|Long
argument_list|>
name|unassignedRegions
init|=
name|Collections
operator|.
name|synchronizedSortedMap
argument_list|(
operator|new
name|TreeMap
argument_list|<
name|HRegionInfo
argument_list|,
name|Long
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
comment|/**    * Regions that have been assigned, and the server has reported that it has    * started serving it, but that we have not yet recorded in the meta table.    */
specifier|private
specifier|final
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|pendingRegions
init|=
name|Collections
operator|.
name|synchronizedSet
argument_list|(
operator|new
name|TreeSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
argument_list|)
decl_stmt|;
comment|/**    * List of regions that are going to be closed.    */
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|HRegionInfo
argument_list|>
argument_list|>
name|regionsToClose
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|HRegionInfo
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/** Regions that are in the process of being closed */
specifier|private
specifier|final
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|closingRegions
init|=
name|Collections
operator|.
name|synchronizedSet
argument_list|(
operator|new
name|TreeSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
argument_list|)
decl_stmt|;
comment|/**    * Set of regions that, once closed, should be marked as offline so that they    * are not reassigned.    */
specifier|private
specifier|final
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|regionsToOffline
init|=
name|Collections
operator|.
name|synchronizedSet
argument_list|(
operator|new
name|TreeSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
argument_list|)
decl_stmt|;
comment|// How many regions to assign a server at a time.
specifier|private
specifier|final
name|int
name|maxAssignInOneGo
decl_stmt|;
specifier|private
specifier|final
name|HMaster
name|master
decl_stmt|;
specifier|private
specifier|final
name|RegionHistorian
name|historian
decl_stmt|;
specifier|private
specifier|final
name|float
name|slop
decl_stmt|;
comment|/** Set of regions to split. */
specifier|private
specifier|final
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
argument_list|>
name|regionsToSplit
init|=
name|Collections
operator|.
name|synchronizedSortedMap
argument_list|(
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
argument_list|)
decl_stmt|;
comment|/** Set of regions to compact. */
specifier|private
specifier|final
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
argument_list|>
name|regionsToCompact
init|=
name|Collections
operator|.
name|synchronizedSortedMap
argument_list|(
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
argument_list|)
decl_stmt|;
name|RegionManager
parameter_list|(
name|HMaster
name|master
parameter_list|)
block|{
name|this
operator|.
name|master
operator|=
name|master
expr_stmt|;
name|this
operator|.
name|historian
operator|=
name|RegionHistorian
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|this
operator|.
name|maxAssignInOneGo
operator|=
name|this
operator|.
name|master
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"hbase.regions.percheckin"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|this
operator|.
name|slop
operator|=
name|this
operator|.
name|master
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getFloat
argument_list|(
literal|"hbase.regions.slop"
argument_list|,
operator|(
name|float
operator|)
literal|0.1
argument_list|)
expr_stmt|;
comment|// The root region
name|rootScannerThread
operator|=
operator|new
name|RootScanner
argument_list|(
name|master
argument_list|,
name|this
argument_list|)
expr_stmt|;
comment|// Scans the meta table
name|metaScannerThread
operator|=
operator|new
name|MetaScanner
argument_list|(
name|master
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|unassignRootRegion
argument_list|()
expr_stmt|;
block|}
name|void
name|start
parameter_list|()
block|{
name|Threads
operator|.
name|setDaemonThreadRunning
argument_list|(
name|rootScannerThread
argument_list|,
literal|"RegionManager.rootScanner"
argument_list|)
expr_stmt|;
name|Threads
operator|.
name|setDaemonThreadRunning
argument_list|(
name|metaScannerThread
argument_list|,
literal|"RegionManager.metaScanner"
argument_list|)
expr_stmt|;
block|}
comment|/*    * Unassign the root region.    * This method would be used in case where root region server had died    * without reporting in.  Currently, we just flounder and never recover.  We    * could 'notice' dead region server in root scanner -- if we failed access    * multiple times -- but reassigning root is catastrophic.    *     */
name|void
name|unassignRootRegion
parameter_list|()
block|{
name|rootRegionLocation
operator|.
name|set
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|master
operator|.
name|shutdownRequested
condition|)
block|{
name|unassignedRegions
operator|.
name|put
argument_list|(
name|HRegionInfo
operator|.
name|ROOT_REGIONINFO
argument_list|,
name|ZERO_L
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Assigns regions to region servers attempting to balance the load across    * all region servers    *     * @param info    * @param serverName    * @param returnMsgs    */
name|void
name|assignRegions
parameter_list|(
name|HServerInfo
name|info
parameter_list|,
name|String
name|serverName
parameter_list|,
name|HRegionInfo
index|[]
name|mostLoadedRegions
parameter_list|,
name|ArrayList
argument_list|<
name|HMsg
argument_list|>
name|returnMsgs
parameter_list|)
block|{
name|HServerLoad
name|thisServersLoad
init|=
name|info
operator|.
name|getLoad
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|unassignedRegions
init|)
block|{
comment|// We need to hold a lock on assign attempts while we figure out what to
comment|// do so that multiple threads do not execute this method in parallel
comment|// resulting in assigning the same region to multiple servers.
comment|// figure out what regions need to be assigned and aren't currently being
comment|// worked on elsewhere.
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
name|regionsToAssign
init|=
name|regionsAwaitingAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|regionsToAssign
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// There are no regions waiting to be assigned.
if|if
condition|(
name|allRegionsAssigned
argument_list|()
condition|)
block|{
comment|// We only do load balancing once all regions are assigned.
comment|// This prevents churn while the cluster is starting up.
name|double
name|avgLoad
init|=
name|master
operator|.
name|serverManager
operator|.
name|getAverageLoad
argument_list|()
decl_stmt|;
name|double
name|avgLoadWithSlop
init|=
name|avgLoad
operator|+
operator|(
operator|(
name|this
operator|.
name|slop
operator|!=
literal|0
operator|)
condition|?
name|avgLoad
operator|*
name|this
operator|.
name|slop
else|:
name|avgLoad
operator|)
decl_stmt|;
if|if
condition|(
name|avgLoad
operator|>
literal|2.0
operator|&&
name|thisServersLoad
operator|.
name|getNumberOfRegions
argument_list|()
operator|>
name|avgLoadWithSlop
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Server "
operator|+
name|serverName
operator|+
literal|" is overloaded. Server load: "
operator|+
name|thisServersLoad
operator|.
name|getNumberOfRegions
argument_list|()
operator|+
literal|" avg: "
operator|+
name|avgLoad
operator|+
literal|", slop: "
operator|+
name|this
operator|.
name|slop
argument_list|)
expr_stmt|;
block|}
name|unassignSomeRegions
argument_list|(
name|thisServersLoad
argument_list|,
name|avgLoad
argument_list|,
name|mostLoadedRegions
argument_list|,
name|returnMsgs
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// if there's only one server, just give it all the regions
if|if
condition|(
name|master
operator|.
name|serverManager
operator|.
name|numServers
argument_list|()
operator|==
literal|1
condition|)
block|{
name|assignRegionsToOneServer
argument_list|(
name|regionsToAssign
argument_list|,
name|serverName
argument_list|,
name|returnMsgs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// otherwise, give this server a few regions taking into account the
comment|// load of all the other servers.
name|assignRegionsToMultipleServers
argument_list|(
name|thisServersLoad
argument_list|,
name|regionsToAssign
argument_list|,
name|serverName
argument_list|,
name|returnMsgs
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Make region assignments taking into account multiple servers' loads.    */
specifier|private
name|void
name|assignRegionsToMultipleServers
parameter_list|(
specifier|final
name|HServerLoad
name|thisServersLoad
parameter_list|,
specifier|final
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
name|regionsToAssign
parameter_list|,
specifier|final
name|String
name|serverName
parameter_list|,
specifier|final
name|ArrayList
argument_list|<
name|HMsg
argument_list|>
name|returnMsgs
parameter_list|)
block|{
name|int
name|nRegionsToAssign
init|=
name|regionsToAssign
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|nregions
init|=
name|regionsPerServer
argument_list|(
name|nRegionsToAssign
argument_list|,
name|thisServersLoad
argument_list|)
decl_stmt|;
name|nRegionsToAssign
operator|-=
name|nregions
expr_stmt|;
if|if
condition|(
name|nRegionsToAssign
operator|>
literal|0
condition|)
block|{
comment|// We still have more regions to assign. See how many we can assign
comment|// before this server becomes more heavily loaded than the next
comment|// most heavily loaded server.
name|HServerLoad
name|heavierLoad
init|=
operator|new
name|HServerLoad
argument_list|()
decl_stmt|;
name|int
name|nservers
init|=
name|computeNextHeaviestLoad
argument_list|(
name|thisServersLoad
argument_list|,
name|heavierLoad
argument_list|)
decl_stmt|;
name|nregions
operator|=
literal|0
expr_stmt|;
comment|// Advance past any less-loaded servers
for|for
control|(
name|HServerLoad
name|load
init|=
operator|new
name|HServerLoad
argument_list|(
name|thisServersLoad
operator|.
name|getNumberOfRequests
argument_list|()
argument_list|,
name|thisServersLoad
operator|.
name|getNumberOfRegions
argument_list|()
argument_list|)
init|;
name|load
operator|.
name|compareTo
argument_list|(
name|heavierLoad
argument_list|)
operator|<=
literal|0
operator|&&
name|nregions
operator|<
name|nRegionsToAssign
condition|;
name|load
operator|.
name|setNumberOfRegions
argument_list|(
name|load
operator|.
name|getNumberOfRegions
argument_list|()
operator|+
literal|1
argument_list|)
operator|,
name|nregions
operator|++
control|)
block|{
comment|// continue;
block|}
if|if
condition|(
name|nregions
operator|<
name|nRegionsToAssign
condition|)
block|{
comment|// There are some more heavily loaded servers
comment|// but we can't assign all the regions to this server.
if|if
condition|(
name|nservers
operator|>
literal|0
condition|)
block|{
comment|// There are other servers that can share the load.
comment|// Split regions that need assignment across the servers.
name|nregions
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
operator|(
literal|1.0
operator|*
name|nRegionsToAssign
operator|)
operator|/
operator|(
literal|1.0
operator|*
name|nservers
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// No other servers with same load.
comment|// Split regions over all available servers
name|nregions
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
operator|(
literal|1.0
operator|*
name|nRegionsToAssign
operator|)
operator|/
operator|(
literal|1.0
operator|*
name|master
operator|.
name|serverManager
operator|.
name|numServers
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Assign all regions to this server
name|nregions
operator|=
name|nRegionsToAssign
expr_stmt|;
block|}
if|if
condition|(
name|nregions
operator|>
name|this
operator|.
name|maxAssignInOneGo
condition|)
block|{
name|nregions
operator|=
name|this
operator|.
name|maxAssignInOneGo
expr_stmt|;
block|}
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|HRegionInfo
name|regionInfo
range|:
name|regionsToAssign
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"assigning region "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|regionInfo
operator|.
name|getRegionName
argument_list|()
argument_list|)
operator|+
literal|" to server "
operator|+
name|serverName
argument_list|)
expr_stmt|;
name|unassignedRegions
operator|.
name|put
argument_list|(
name|regionInfo
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|now
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|historian
operator|.
name|addRegionAssignment
argument_list|(
name|regionInfo
argument_list|,
name|serverName
argument_list|)
expr_stmt|;
name|returnMsgs
operator|.
name|add
argument_list|(
operator|new
name|HMsg
argument_list|(
name|HMsg
operator|.
name|Type
operator|.
name|MSG_REGION_OPEN
argument_list|,
name|regionInfo
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|--
name|nregions
operator|<=
literal|0
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
comment|/*    * @param nRegionsToAssign    * @param thisServersLoad    * @return How many regions we can assign to more lightly loaded servers    */
specifier|private
name|int
name|regionsPerServer
parameter_list|(
specifier|final
name|int
name|numUnassignedRegions
parameter_list|,
specifier|final
name|HServerLoad
name|thisServersLoad
parameter_list|)
block|{
name|SortedMap
argument_list|<
name|HServerLoad
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|lightServers
init|=
operator|new
name|TreeMap
argument_list|<
name|HServerLoad
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// Get all the servers who are more lightly loaded than this one.
synchronized|synchronized
init|(
name|master
operator|.
name|serverManager
operator|.
name|loadToServers
init|)
block|{
name|lightServers
operator|.
name|putAll
argument_list|(
name|master
operator|.
name|serverManager
operator|.
name|loadToServers
operator|.
name|headMap
argument_list|(
name|thisServersLoad
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Examine the list of servers that are more lightly loaded than this one.
comment|// Pretend that we will assign regions to these more lightly loaded servers
comment|// until they reach load equal with ours. Then, see how many regions are left
comment|// unassigned. That is how many regions we should assign to this server.
name|int
name|nRegions
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|HServerLoad
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|e
range|:
name|lightServers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|HServerLoad
name|lightLoad
init|=
operator|new
name|HServerLoad
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getNumberOfRequests
argument_list|()
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getNumberOfRegions
argument_list|()
argument_list|)
decl_stmt|;
do|do
block|{
name|lightLoad
operator|.
name|setNumberOfRegions
argument_list|(
name|lightLoad
operator|.
name|getNumberOfRegions
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|nRegions
operator|+=
literal|1
expr_stmt|;
block|}
do|while
condition|(
name|lightLoad
operator|.
name|compareTo
argument_list|(
name|thisServersLoad
argument_list|)
operator|<=
literal|0
operator|&&
name|nRegions
operator|<
name|numUnassignedRegions
condition|)
do|;
name|nRegions
operator|*=
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|nRegions
operator|>=
name|numUnassignedRegions
condition|)
block|{
break|break;
block|}
block|}
return|return
name|nRegions
return|;
block|}
comment|/**    * Get the set of regions that should be assignable in this pass.    */
specifier|private
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
name|regionsAwaitingAssignment
parameter_list|()
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// set of regions we want to assign to this server
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
name|regionsToAssign
init|=
operator|new
name|HashSet
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
decl_stmt|;
comment|// Look over the set of regions that aren't currently assigned to
comment|// determine which we should assign to this server.
synchronized|synchronized
init|(
name|unassignedRegions
init|)
block|{
comment|//must synchronize when iterating
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|HRegionInfo
argument_list|,
name|Long
argument_list|>
name|e
range|:
name|unassignedRegions
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|HRegionInfo
name|i
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|numberOfMetaRegions
operator|.
name|get
argument_list|()
operator|!=
name|onlineMetaRegions
operator|.
name|size
argument_list|()
operator|&&
operator|!
name|i
operator|.
name|isMetaRegion
argument_list|()
condition|)
block|{
comment|// Can't assign user regions until all meta regions have been assigned
comment|// and are on-line
continue|continue;
block|}
comment|// If the last attempt to open this region was pretty recent, then we
comment|// don't want to try and assign it.
name|long
name|diff
init|=
name|now
operator|-
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|longValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|diff
operator|>
name|master
operator|.
name|maxRegionOpenTime
condition|)
block|{
name|regionsToAssign
operator|.
name|add
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|regionsToAssign
return|;
block|}
comment|/**    * Figure out the load that is next highest amongst all regionservers. Also,    * return how many servers exist at that load.     */
specifier|private
name|int
name|computeNextHeaviestLoad
parameter_list|(
name|HServerLoad
name|referenceLoad
parameter_list|,
name|HServerLoad
name|heavierLoad
parameter_list|)
block|{
name|SortedMap
argument_list|<
name|HServerLoad
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|heavyServers
init|=
operator|new
name|TreeMap
argument_list|<
name|HServerLoad
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|master
operator|.
name|serverManager
operator|.
name|loadToServers
init|)
block|{
name|heavyServers
operator|.
name|putAll
argument_list|(
name|master
operator|.
name|serverManager
operator|.
name|loadToServers
operator|.
name|tailMap
argument_list|(
name|referenceLoad
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|nservers
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|HServerLoad
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|e
range|:
name|heavyServers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|servers
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|nservers
operator|+=
name|servers
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|compareTo
argument_list|(
name|referenceLoad
argument_list|)
operator|==
literal|0
condition|)
block|{
comment|// This is the load factor of the server we are considering
name|nservers
operator|-=
literal|1
expr_stmt|;
continue|continue;
block|}
comment|// If we get here, we are at the first load entry that is a
comment|// heavier load than the server we are considering
name|heavierLoad
operator|.
name|setNumberOfRequests
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getNumberOfRequests
argument_list|()
argument_list|)
expr_stmt|;
name|heavierLoad
operator|.
name|setNumberOfRegions
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getNumberOfRegions
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|nservers
return|;
block|}
comment|/*    * Assign all to the only server. An unlikely case but still possible.    * @param regionsToAssign    * @param serverName    * @param returnMsgs    */
specifier|private
name|void
name|assignRegionsToOneServer
parameter_list|(
specifier|final
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
name|regionsToAssign
parameter_list|,
specifier|final
name|String
name|serverName
parameter_list|,
specifier|final
name|ArrayList
argument_list|<
name|HMsg
argument_list|>
name|returnMsgs
parameter_list|)
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|HRegionInfo
name|regionInfo
range|:
name|regionsToAssign
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"assigning region "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|regionInfo
operator|.
name|getRegionName
argument_list|()
argument_list|)
operator|+
literal|" to the only server "
operator|+
name|serverName
argument_list|)
expr_stmt|;
name|unassignedRegions
operator|.
name|put
argument_list|(
name|regionInfo
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|now
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|historian
operator|.
name|addRegionAssignment
argument_list|(
name|regionInfo
argument_list|,
name|serverName
argument_list|)
expr_stmt|;
name|returnMsgs
operator|.
name|add
argument_list|(
operator|new
name|HMsg
argument_list|(
name|HMsg
operator|.
name|Type
operator|.
name|MSG_REGION_OPEN
argument_list|,
name|regionInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * The server checking in right now is overloaded. We will tell it to close    * some or all of its most loaded regions, allowing it to reduce its load.    * The closed regions will then get picked up by other underloaded machines.    */
specifier|private
specifier|synchronized
name|void
name|unassignSomeRegions
parameter_list|(
specifier|final
name|HServerLoad
name|load
parameter_list|,
specifier|final
name|double
name|avgLoad
parameter_list|,
specifier|final
name|HRegionInfo
index|[]
name|mostLoadedRegions
parameter_list|,
name|ArrayList
argument_list|<
name|HMsg
argument_list|>
name|returnMsgs
parameter_list|)
block|{
name|int
name|numRegionsToClose
init|=
name|load
operator|.
name|getNumberOfRegions
argument_list|()
operator|-
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|avgLoad
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Choosing to reassign "
operator|+
name|numRegionsToClose
operator|+
literal|" regions. mostLoadedRegions has "
operator|+
name|mostLoadedRegions
operator|.
name|length
operator|+
literal|" regions in it."
argument_list|)
expr_stmt|;
name|int
name|regionIdx
init|=
literal|0
decl_stmt|;
name|int
name|regionsClosed
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|regionsClosed
operator|<
name|numRegionsToClose
operator|&&
name|regionIdx
operator|<
name|mostLoadedRegions
operator|.
name|length
condition|)
block|{
name|HRegionInfo
name|currentRegion
init|=
name|mostLoadedRegions
index|[
name|regionIdx
index|]
decl_stmt|;
name|regionIdx
operator|++
expr_stmt|;
comment|// skip the region if it's meta or root
if|if
condition|(
name|currentRegion
operator|.
name|isRootRegion
argument_list|()
operator|||
name|currentRegion
operator|.
name|isMetaTable
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|isClosing
argument_list|(
name|currentRegion
operator|.
name|getRegionName
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Skipping region "
operator|+
name|currentRegion
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" because it is already closing."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Going to close region "
operator|+
name|currentRegion
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
comment|// make a message to close the region
name|returnMsgs
operator|.
name|add
argument_list|(
operator|new
name|HMsg
argument_list|(
name|HMsg
operator|.
name|Type
operator|.
name|MSG_REGION_CLOSE
argument_list|,
name|currentRegion
argument_list|,
name|OVERLOADED
argument_list|)
argument_list|)
expr_stmt|;
comment|// mark the region as closing
name|setClosing
argument_list|(
name|currentRegion
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
comment|// increment the count of regions we've marked
name|regionsClosed
operator|++
expr_stmt|;
block|}
block|}
comment|/**    * @return Read-only map of online regions.    */
specifier|public
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|MetaRegion
argument_list|>
name|getOnlineMetaRegions
parameter_list|()
block|{
synchronized|synchronized
init|(
name|onlineMetaRegions
init|)
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|onlineMetaRegions
argument_list|)
return|;
block|}
block|}
comment|/**    * Stop the root and meta scanners so that the region servers serving meta    * regions can shut down.    */
specifier|public
name|void
name|stopScanners
parameter_list|()
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"telling root scanner to stop"
argument_list|)
expr_stmt|;
block|}
name|rootScannerThread
operator|.
name|interruptIfAlive
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"telling meta scanner to stop"
argument_list|)
expr_stmt|;
block|}
name|metaScannerThread
operator|.
name|interruptIfAlive
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"meta and root scanners notified"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Stop the region assigner */
specifier|public
name|void
name|stop
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|rootScannerThread
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|rootScannerThread
operator|.
name|join
argument_list|()
expr_stmt|;
comment|// Wait for the root scanner to finish.
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|iex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"root scanner"
argument_list|,
name|iex
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|metaScannerThread
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|metaScannerThread
operator|.
name|join
argument_list|()
expr_stmt|;
comment|// Wait for meta scanner to finish.
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|iex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"meta scanner"
argument_list|,
name|iex
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Block until meta regions are online or we're shutting down.    * @return true if we found meta regions, false if we're closing.    */
specifier|public
name|boolean
name|waitForMetaRegionsOrClose
parameter_list|()
block|{
return|return
name|metaScannerThread
operator|.
name|waitForMetaRegionsOrClose
argument_list|()
return|;
block|}
comment|/**    * Search our map of online meta regions to find the first meta region that     * should contain a pointer to<i>newRegion</i>.    * @param newRegion    * @return MetaRegion where the newRegion should live    */
specifier|public
name|MetaRegion
name|getFirstMetaRegionForRegion
parameter_list|(
name|HRegionInfo
name|newRegion
parameter_list|)
block|{
synchronized|synchronized
init|(
name|onlineMetaRegions
init|)
block|{
if|if
condition|(
name|onlineMetaRegions
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|onlineMetaRegions
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|onlineMetaRegions
operator|.
name|get
argument_list|(
name|onlineMetaRegions
operator|.
name|firstKey
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|onlineMetaRegions
operator|.
name|containsKey
argument_list|(
name|newRegion
operator|.
name|getRegionName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|onlineMetaRegions
operator|.
name|get
argument_list|(
name|newRegion
operator|.
name|getRegionName
argument_list|()
argument_list|)
return|;
block|}
return|return
name|onlineMetaRegions
operator|.
name|get
argument_list|(
name|onlineMetaRegions
operator|.
name|headMap
argument_list|(
name|newRegion
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|lastKey
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
comment|/**    * Get a set of all the meta regions that contain info about a given table.    * @param tableName Table you need to know all the meta regions for    * @return set of MetaRegion objects that contain the table    */
specifier|public
name|Set
argument_list|<
name|MetaRegion
argument_list|>
name|getMetaRegionsForTable
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|byte
index|[]
name|firstMetaRegion
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|MetaRegion
argument_list|>
name|metaRegions
init|=
operator|new
name|HashSet
argument_list|<
name|MetaRegion
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|META_TABLE_NAME
argument_list|)
condition|)
block|{
name|metaRegions
operator|.
name|add
argument_list|(
operator|new
name|MetaRegion
argument_list|(
name|rootRegionLocation
operator|.
name|get
argument_list|()
argument_list|,
name|HRegionInfo
operator|.
name|ROOT_REGIONINFO
operator|.
name|getRegionName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
synchronized|synchronized
init|(
name|onlineMetaRegions
init|)
block|{
if|if
condition|(
name|onlineMetaRegions
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|firstMetaRegion
operator|=
name|onlineMetaRegions
operator|.
name|firstKey
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|onlineMetaRegions
operator|.
name|containsKey
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|firstMetaRegion
operator|=
name|tableName
expr_stmt|;
block|}
else|else
block|{
name|firstMetaRegion
operator|=
name|onlineMetaRegions
operator|.
name|headMap
argument_list|(
name|tableName
argument_list|)
operator|.
name|lastKey
argument_list|()
expr_stmt|;
block|}
name|metaRegions
operator|.
name|addAll
argument_list|(
name|onlineMetaRegions
operator|.
name|tailMap
argument_list|(
name|firstMetaRegion
argument_list|)
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|metaRegions
return|;
block|}
comment|/**    * Create a new HRegion, put a row for it into META (or ROOT), and mark the    * new region unassigned so that it will get assigned to a region server.    * @param newRegion HRegionInfo for the region to create    * @param server server hosting the META (or ROOT) region where the new    * region needs to be noted    * @param metaRegionName name of the meta region where new region is to be    * written    * @throws IOException    */
specifier|public
name|void
name|createRegion
parameter_list|(
name|HRegionInfo
name|newRegion
parameter_list|,
name|HRegionInterface
name|server
parameter_list|,
name|byte
index|[]
name|metaRegionName
parameter_list|)
throws|throws
name|IOException
block|{
comment|// 2. Create the HRegion
name|HRegion
name|region
init|=
name|HRegion
operator|.
name|createHRegion
argument_list|(
name|newRegion
argument_list|,
name|master
operator|.
name|rootdir
argument_list|,
name|master
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
comment|// 3. Insert into meta
name|HRegionInfo
name|info
init|=
name|region
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
name|byte
index|[]
name|regionName
init|=
name|region
operator|.
name|getRegionName
argument_list|()
decl_stmt|;
name|BatchUpdate
name|b
init|=
operator|new
name|BatchUpdate
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
name|b
operator|.
name|put
argument_list|(
name|COL_REGIONINFO
argument_list|,
name|Writables
operator|.
name|getBytes
argument_list|(
name|info
argument_list|)
argument_list|)
expr_stmt|;
name|server
operator|.
name|batchUpdate
argument_list|(
name|metaRegionName
argument_list|,
name|b
argument_list|,
operator|-
literal|1L
argument_list|)
expr_stmt|;
comment|// 4. Close the new region to flush it to disk.  Close its log file too.
name|region
operator|.
name|close
argument_list|()
expr_stmt|;
name|region
operator|.
name|getLog
argument_list|()
operator|.
name|closeAndDelete
argument_list|()
expr_stmt|;
comment|// 5. Get it assigned to a server
name|unassignedRegions
operator|.
name|put
argument_list|(
name|info
argument_list|,
name|ZERO_L
argument_list|)
expr_stmt|;
block|}
comment|/**     * Set a MetaRegion as online.     * @param metaRegion     */
specifier|public
name|void
name|putMetaRegionOnline
parameter_list|(
name|MetaRegion
name|metaRegion
parameter_list|)
block|{
name|onlineMetaRegions
operator|.
name|put
argument_list|(
name|metaRegion
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|metaRegion
argument_list|)
expr_stmt|;
block|}
comment|/**     * Get a list of online MetaRegions     * @return list of MetaRegion objects    */
specifier|public
name|List
argument_list|<
name|MetaRegion
argument_list|>
name|getListOfOnlineMetaRegions
parameter_list|()
block|{
name|List
argument_list|<
name|MetaRegion
argument_list|>
name|regions
init|=
operator|new
name|ArrayList
argument_list|<
name|MetaRegion
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|onlineMetaRegions
init|)
block|{
name|regions
operator|.
name|addAll
argument_list|(
name|onlineMetaRegions
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|regions
return|;
block|}
comment|/**     * Count of online meta regions     * @return count of online meta regions    */
specifier|public
name|int
name|numOnlineMetaRegions
parameter_list|()
block|{
return|return
name|onlineMetaRegions
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**     * Check if a meta region is online by its name     * @param startKey name of the meta region to check    * @return true if the region is online, false otherwise    */
specifier|public
name|boolean
name|isMetaRegionOnline
parameter_list|(
name|byte
index|[]
name|startKey
parameter_list|)
block|{
return|return
name|onlineMetaRegions
operator|.
name|containsKey
argument_list|(
name|startKey
argument_list|)
return|;
block|}
comment|/**     * Set an online MetaRegion offline - remove it from the map.     * @param startKey region name    */
specifier|public
name|void
name|offlineMetaRegion
parameter_list|(
name|byte
index|[]
name|startKey
parameter_list|)
block|{
name|onlineMetaRegions
operator|.
name|remove
argument_list|(
name|startKey
argument_list|)
expr_stmt|;
block|}
comment|/**     * Check if a region is on the unassigned list    * @param info HRegionInfo to check for    * @return true if on the unassigned list, false if it isn't. Note that this    * means a region could not be on the unassigned list AND not be assigned, if    * it happens to be between states.    */
specifier|public
name|boolean
name|isUnassigned
parameter_list|(
name|HRegionInfo
name|info
parameter_list|)
block|{
return|return
name|unassignedRegions
operator|.
name|containsKey
argument_list|(
name|info
argument_list|)
return|;
block|}
comment|/**    * Check if a region is pending     * @param regionName name of the region    * @return true if pending, false otherwise    */
specifier|public
name|boolean
name|isPending
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|)
block|{
return|return
name|pendingRegions
operator|.
name|contains
argument_list|(
name|regionName
argument_list|)
return|;
block|}
comment|/**     * Set a region to unassigned     * @param info Region to set unassigned    */
specifier|public
name|void
name|setUnassigned
parameter_list|(
name|HRegionInfo
name|info
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|unassignedRegions
init|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|unassignedRegions
operator|.
name|containsKey
argument_list|(
name|info
argument_list|)
operator|&&
operator|!
name|this
operator|.
name|pendingRegions
operator|.
name|contains
argument_list|(
name|info
operator|.
name|getRegionName
argument_list|()
argument_list|)
condition|)
block|{
name|this
operator|.
name|unassignedRegions
operator|.
name|put
argument_list|(
name|info
argument_list|,
name|ZERO_L
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Set a region to pending assignment     * @param regionName    */
specifier|public
name|void
name|setPending
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|)
block|{
name|pendingRegions
operator|.
name|add
argument_list|(
name|regionName
argument_list|)
expr_stmt|;
block|}
comment|/**    * Unset region's pending status     * @param regionName     */
specifier|public
name|void
name|noLongerPending
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|)
block|{
name|pendingRegions
operator|.
name|remove
argument_list|(
name|regionName
argument_list|)
expr_stmt|;
block|}
comment|/**    * Extend the update assignment deadline for a region.    * @param info Region whose deadline you want to extend    */
specifier|public
name|void
name|updateAssignmentDeadline
parameter_list|(
name|HRegionInfo
name|info
parameter_list|)
block|{
synchronized|synchronized
init|(
name|unassignedRegions
init|)
block|{
comment|// Region server is reporting in that its working on region open
comment|// (We can get more than one of these messages if region is replaying
comment|// a bunch of edits and taking a while to open).
comment|// Extend region open time by max region open time.
name|this
operator|.
name|unassignedRegions
operator|.
name|put
argument_list|(
name|info
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|this
operator|.
name|master
operator|.
name|maxRegionOpenTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**     * Unset a region's unassigned status     * @param info Region you want to take off the unassigned list    */
specifier|public
name|void
name|noLongerUnassigned
parameter_list|(
name|HRegionInfo
name|info
parameter_list|)
block|{
name|unassignedRegions
operator|.
name|remove
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
comment|/**    * Mark a region to be closed. Server manager will inform hosting region server    * to close the region at its next opportunity.    * @param serverName address info of server    * @param info region to close    */
specifier|public
name|void
name|markToClose
parameter_list|(
name|String
name|serverName
parameter_list|,
name|HRegionInfo
name|info
parameter_list|)
block|{
synchronized|synchronized
init|(
name|regionsToClose
init|)
block|{
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|HRegionInfo
argument_list|>
name|serverToClose
init|=
name|regionsToClose
operator|.
name|get
argument_list|(
name|serverName
argument_list|)
decl_stmt|;
if|if
condition|(
name|serverToClose
operator|!=
literal|null
condition|)
block|{
name|serverToClose
operator|.
name|put
argument_list|(
name|info
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Mark a bunch of regions as to close at once for a server     * @param serverName address info of server    * @param map map of region names to region infos of regions to close    */
specifier|public
name|void
name|markToCloseBulk
parameter_list|(
name|String
name|serverName
parameter_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|HRegionInfo
argument_list|>
name|map
parameter_list|)
block|{
synchronized|synchronized
init|(
name|regionsToClose
init|)
block|{
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|HRegionInfo
argument_list|>
name|regions
init|=
name|regionsToClose
operator|.
name|get
argument_list|(
name|serverName
argument_list|)
decl_stmt|;
if|if
condition|(
name|regions
operator|!=
literal|null
condition|)
block|{
name|regions
operator|.
name|putAll
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|regions
operator|=
name|map
expr_stmt|;
block|}
name|regionsToClose
operator|.
name|put
argument_list|(
name|serverName
argument_list|,
name|regions
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**     * Remove the map of region names to region infos waiting to be offlined for a     * given server    *      * @param serverName    * @return map of region names to region infos to close    */
specifier|public
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|HRegionInfo
argument_list|>
name|removeMarkedToClose
parameter_list|(
name|String
name|serverName
parameter_list|)
block|{
return|return
name|regionsToClose
operator|.
name|remove
argument_list|(
name|serverName
argument_list|)
return|;
block|}
comment|/**    * Check if a region is marked as to close    * @param serverName address info of server    * @param regionName name of the region we might want to close    * @return true if the region is marked to close, false otherwise    */
specifier|public
name|boolean
name|isMarkedToClose
parameter_list|(
name|String
name|serverName
parameter_list|,
name|byte
index|[]
name|regionName
parameter_list|)
block|{
synchronized|synchronized
init|(
name|regionsToClose
init|)
block|{
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|HRegionInfo
argument_list|>
name|serverToClose
init|=
name|regionsToClose
operator|.
name|get
argument_list|(
name|serverName
argument_list|)
decl_stmt|;
return|return
operator|(
name|serverToClose
operator|!=
literal|null
operator|&&
name|serverToClose
operator|.
name|containsKey
argument_list|(
name|regionName
argument_list|)
operator|)
return|;
block|}
block|}
comment|/**    * Mark a region as no longer waiting to be closed. Either it was closed or     * we don't want to close it anymore for some reason.    * @param serverName address info of server    * @param regionName name of the region    */
specifier|public
name|void
name|noLongerMarkedToClose
parameter_list|(
name|String
name|serverName
parameter_list|,
name|byte
index|[]
name|regionName
parameter_list|)
block|{
synchronized|synchronized
init|(
name|regionsToClose
init|)
block|{
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|HRegionInfo
argument_list|>
name|serverToClose
init|=
name|regionsToClose
operator|.
name|get
argument_list|(
name|serverName
argument_list|)
decl_stmt|;
if|if
condition|(
name|serverToClose
operator|!=
literal|null
condition|)
block|{
name|serverToClose
operator|.
name|remove
argument_list|(
name|regionName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Called when all regions for a particular server have been closed    *     * @param serverName    */
specifier|public
name|void
name|allRegionsClosed
parameter_list|(
name|String
name|serverName
parameter_list|)
block|{
name|regionsToClose
operator|.
name|remove
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
block|}
comment|/**     * Check if a region is closing     * @param regionName     * @return true if the region is marked as closing, false otherwise    */
specifier|public
name|boolean
name|isClosing
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|)
block|{
return|return
name|closingRegions
operator|.
name|contains
argument_list|(
name|regionName
argument_list|)
return|;
block|}
comment|/**     * Set a region as no longer closing (closed?)     * @param regionName    */
specifier|public
name|void
name|noLongerClosing
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|)
block|{
name|closingRegions
operator|.
name|remove
argument_list|(
name|regionName
argument_list|)
expr_stmt|;
block|}
comment|/**     * Mark a region as closing     * @param regionName    */
specifier|public
name|void
name|setClosing
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|)
block|{
name|closingRegions
operator|.
name|add
argument_list|(
name|regionName
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add a meta region to the scan queue    * @param m MetaRegion that needs to get scanned    * @throws InterruptedException    */
specifier|public
name|void
name|addMetaRegionToScan
parameter_list|(
name|MetaRegion
name|m
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|metaScannerThread
operator|.
name|addMetaRegionToScan
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
comment|/**     * Note that a region should be offlined as soon as its closed.     * @param regionName    */
specifier|public
name|void
name|markRegionForOffline
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|)
block|{
name|regionsToOffline
operator|.
name|add
argument_list|(
name|regionName
argument_list|)
expr_stmt|;
block|}
comment|/**     * Check if a region is marked for offline     * @param regionName    * @return true if marked for offline, false otherwise    */
specifier|public
name|boolean
name|isMarkedForOffline
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|)
block|{
return|return
name|regionsToOffline
operator|.
name|contains
argument_list|(
name|regionName
argument_list|)
return|;
block|}
comment|/**     * Region was offlined as planned, remove it from the list to offline     * @param regionName    */
specifier|public
name|void
name|regionOfflined
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|)
block|{
name|regionsToOffline
operator|.
name|remove
argument_list|(
name|regionName
argument_list|)
expr_stmt|;
block|}
comment|/**     * Check if the initial root scan has been completed.    * @return true if scan completed, false otherwise    */
specifier|public
name|boolean
name|isInitialRootScanComplete
parameter_list|()
block|{
return|return
name|rootScannerThread
operator|.
name|isInitialScanComplete
argument_list|()
return|;
block|}
comment|/**     * Check if the initial meta scan has been completed.    * @return true if meta completed, false otherwise    */
specifier|public
name|boolean
name|isInitialMetaScanComplete
parameter_list|()
block|{
return|return
name|metaScannerThread
operator|.
name|isInitialScanComplete
argument_list|()
return|;
block|}
comment|/**     * @return true if the initial meta scan is complete and there are no    * unassigned or pending regions    */
specifier|public
name|boolean
name|allRegionsAssigned
parameter_list|()
block|{
return|return
name|isInitialMetaScanComplete
argument_list|()
operator|&&
name|unassignedRegions
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|&&
name|pendingRegions
operator|.
name|size
argument_list|()
operator|==
literal|0
return|;
block|}
comment|/**     * Get the root region location.    * @return HServerAddress describing root region server.    */
specifier|public
name|HServerAddress
name|getRootRegionLocation
parameter_list|()
block|{
return|return
name|rootRegionLocation
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Block until either the root region location is available or we're shutting    * down.    */
specifier|public
name|void
name|waitForRootRegionLocation
parameter_list|()
block|{
synchronized|synchronized
init|(
name|rootRegionLocation
init|)
block|{
while|while
condition|(
operator|!
name|master
operator|.
name|closed
operator|.
name|get
argument_list|()
operator|&&
name|rootRegionLocation
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// rootRegionLocation will be filled in when we get an 'open region'
comment|// regionServerReport message from the HRegionServer that has been
comment|// allocated the ROOT region below.
try|try
block|{
name|rootRegionLocation
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// continue
block|}
block|}
block|}
block|}
comment|/**    * Return the number of meta regions.    * @return number of meta regions    */
specifier|public
name|int
name|numMetaRegions
parameter_list|()
block|{
return|return
name|numberOfMetaRegions
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Bump the count of meta regions up one    */
specifier|public
name|void
name|incrementNumMetaRegions
parameter_list|()
block|{
name|numberOfMetaRegions
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
comment|/**    * Set the root region location.    * @param address Address of the region server where the root lives    */
specifier|public
name|void
name|setRootRegionLocation
parameter_list|(
name|HServerAddress
name|address
parameter_list|)
block|{
synchronized|synchronized
init|(
name|rootRegionLocation
init|)
block|{
name|rootRegionLocation
operator|.
name|set
argument_list|(
operator|new
name|HServerAddress
argument_list|(
name|address
argument_list|)
argument_list|)
expr_stmt|;
name|rootRegionLocation
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Set the number of meta regions.    * @param num Number of meta regions    */
specifier|public
name|void
name|setNumMetaRegions
parameter_list|(
name|int
name|num
parameter_list|)
block|{
name|numberOfMetaRegions
operator|.
name|set
argument_list|(
name|num
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param regionName    */
specifier|public
name|void
name|startAction
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|,
name|HRegionInfo
name|info
parameter_list|,
name|HServerAddress
name|server
parameter_list|,
name|int
name|op
parameter_list|)
block|{
switch|switch
condition|(
name|op
condition|)
block|{
case|case
name|HConstants
operator|.
name|MODIFY_TABLE_SPLIT
case|:
name|regionsToSplit
operator|.
name|put
argument_list|(
name|regionName
argument_list|,
operator|new
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
argument_list|(
name|info
argument_list|,
name|server
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|HConstants
operator|.
name|MODIFY_TABLE_COMPACT
case|:
name|regionsToCompact
operator|.
name|put
argument_list|(
name|regionName
argument_list|,
operator|new
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
argument_list|(
name|info
argument_list|,
name|server
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"illegal table action "
operator|+
name|op
argument_list|)
throw|;
block|}
block|}
comment|/**    * @param regionName    */
specifier|public
name|void
name|endAction
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|,
name|int
name|op
parameter_list|)
block|{
switch|switch
condition|(
name|op
condition|)
block|{
case|case
name|HConstants
operator|.
name|MODIFY_TABLE_SPLIT
case|:
name|regionsToSplit
operator|.
name|remove
argument_list|(
name|regionName
argument_list|)
expr_stmt|;
break|break;
case|case
name|HConstants
operator|.
name|MODIFY_TABLE_COMPACT
case|:
name|regionsToCompact
operator|.
name|remove
argument_list|(
name|regionName
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"illegal table action "
operator|+
name|op
argument_list|)
throw|;
block|}
block|}
comment|/**    * @param regionName    */
specifier|public
name|void
name|endActions
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|)
block|{
name|regionsToSplit
operator|.
name|remove
argument_list|(
name|regionName
argument_list|)
expr_stmt|;
name|regionsToCompact
operator|.
name|remove
argument_list|(
name|regionName
argument_list|)
expr_stmt|;
block|}
comment|/**    * Send messages to the given region server asking it to split any    * regions in 'regionsToSplit'    * @param serverInfo    * @param returnMsgs    */
specifier|public
name|void
name|applyActions
parameter_list|(
name|HServerInfo
name|serverInfo
parameter_list|,
name|ArrayList
argument_list|<
name|HMsg
argument_list|>
name|returnMsgs
parameter_list|)
block|{
name|HServerAddress
name|addr
init|=
name|serverInfo
operator|.
name|getServerAddress
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
argument_list|>
name|i
init|=
name|regionsToCompact
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
name|pair
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|addr
operator|.
name|equals
argument_list|(
name|pair
operator|.
name|getSecond
argument_list|()
argument_list|)
condition|)
block|{
name|returnMsgs
operator|.
name|add
argument_list|(
operator|new
name|HMsg
argument_list|(
name|HMsg
operator|.
name|Type
operator|.
name|MSG_REGION_COMPACT
argument_list|,
name|pair
operator|.
name|getFirst
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|i
operator|=
name|regionsToSplit
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
name|pair
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|addr
operator|.
name|equals
argument_list|(
name|pair
operator|.
name|getSecond
argument_list|()
argument_list|)
condition|)
block|{
name|returnMsgs
operator|.
name|add
argument_list|(
operator|new
name|HMsg
argument_list|(
name|HMsg
operator|.
name|Type
operator|.
name|MSG_REGION_SPLIT
argument_list|,
name|pair
operator|.
name|getFirst
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

