begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2008 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerLoad
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionHistorian
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|HRegionInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Writables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWrapper
import|;
end_import

begin_comment
comment|/**  * Class to manage assigning regions to servers, state of root and meta, etc.  */
end_comment

begin_class
class|class
name|RegionManager
implements|implements
name|HConstants
block|{
specifier|protected
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RegionManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|AtomicReference
argument_list|<
name|HServerAddress
argument_list|>
name|rootRegionLocation
init|=
operator|new
name|AtomicReference
argument_list|<
name|HServerAddress
argument_list|>
argument_list|(
literal|null
argument_list|)
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|safeMode
init|=
literal|true
decl_stmt|;
specifier|final
name|Lock
name|splitLogLock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|RootScanner
name|rootScannerThread
decl_stmt|;
specifier|final
name|MetaScanner
name|metaScannerThread
decl_stmt|;
comment|/** Set by root scanner to indicate the number of meta regions */
specifier|private
specifier|final
name|AtomicInteger
name|numberOfMetaRegions
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
comment|/** These are the online meta regions */
specifier|private
specifier|final
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|MetaRegion
argument_list|>
name|onlineMetaRegions
init|=
operator|new
name|ConcurrentSkipListMap
argument_list|<
name|byte
index|[]
argument_list|,
name|MetaRegion
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|OVERLOADED
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Overloaded"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|META_REGION_PREFIX
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|".META.,"
argument_list|)
decl_stmt|;
comment|/**    * Map of region name to RegionState for regions that are in transition such as    *     * unassigned -> pendingOpen -> open    * closing -> pendingClose -> closed; if (closed&& !offline) -> unassigned    *     * At the end of a transition, removeRegion is used to remove the region from    * the map (since it is no longer in transition)    *     * Note: Needs to be SortedMap so we can specify a comparator    *     * @see RegionState inner-class below    */
specifier|final
name|SortedMap
argument_list|<
name|String
argument_list|,
name|RegionState
argument_list|>
name|regionsInTransition
init|=
name|Collections
operator|.
name|synchronizedSortedMap
argument_list|(
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|RegionState
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
comment|// How many regions to assign a server at a time.
specifier|private
specifier|final
name|int
name|maxAssignInOneGo
decl_stmt|;
specifier|final
name|HMaster
name|master
decl_stmt|;
specifier|private
specifier|final
name|RegionHistorian
name|historian
decl_stmt|;
specifier|private
specifier|final
name|LoadBalancer
name|loadBalancer
decl_stmt|;
comment|/** Set of regions to split. */
specifier|private
specifier|final
name|SortedMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
argument_list|>
name|regionsToSplit
init|=
name|Collections
operator|.
name|synchronizedSortedMap
argument_list|(
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
argument_list|)
decl_stmt|;
comment|/** Set of regions to compact. */
specifier|private
specifier|final
name|SortedMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
argument_list|>
name|regionsToCompact
init|=
name|Collections
operator|.
name|synchronizedSortedMap
argument_list|(
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
argument_list|)
decl_stmt|;
comment|/** Set of regions to major compact. */
specifier|private
specifier|final
name|SortedMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
argument_list|>
name|regionsToMajorCompact
init|=
name|Collections
operator|.
name|synchronizedSortedMap
argument_list|(
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
argument_list|)
decl_stmt|;
comment|/** Set of regions to flush. */
specifier|private
specifier|final
name|SortedMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
argument_list|>
name|regionsToFlush
init|=
name|Collections
operator|.
name|synchronizedSortedMap
argument_list|(
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ZooKeeperWrapper
name|zooKeeperWrapper
decl_stmt|;
specifier|private
specifier|final
name|int
name|zooKeeperNumRetries
decl_stmt|;
specifier|private
specifier|final
name|int
name|zooKeeperPause
decl_stmt|;
name|RegionManager
parameter_list|(
name|HMaster
name|master
parameter_list|)
block|{
name|HBaseConfiguration
name|conf
init|=
name|master
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|this
operator|.
name|master
operator|=
name|master
expr_stmt|;
name|this
operator|.
name|historian
operator|=
name|RegionHistorian
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|this
operator|.
name|maxAssignInOneGo
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.regions.percheckin"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|this
operator|.
name|loadBalancer
operator|=
operator|new
name|LoadBalancer
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// The root region
name|rootScannerThread
operator|=
operator|new
name|RootScanner
argument_list|(
name|master
argument_list|)
expr_stmt|;
comment|// Scans the meta table
name|metaScannerThread
operator|=
operator|new
name|MetaScanner
argument_list|(
name|master
argument_list|)
expr_stmt|;
name|zooKeeperWrapper
operator|=
name|master
operator|.
name|getZooKeeperWrapper
argument_list|()
expr_stmt|;
name|zooKeeperNumRetries
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|ZOOKEEPER_RETRIES
argument_list|,
name|DEFAULT_ZOOKEEPER_RETRIES
argument_list|)
expr_stmt|;
name|zooKeeperPause
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|ZOOKEEPER_PAUSE
argument_list|,
name|DEFAULT_ZOOKEEPER_PAUSE
argument_list|)
expr_stmt|;
name|reassignRootRegion
argument_list|()
expr_stmt|;
block|}
name|void
name|start
parameter_list|()
block|{
name|Threads
operator|.
name|setDaemonThreadRunning
argument_list|(
name|rootScannerThread
argument_list|,
literal|"RegionManager.rootScanner"
argument_list|)
expr_stmt|;
name|Threads
operator|.
name|setDaemonThreadRunning
argument_list|(
name|metaScannerThread
argument_list|,
literal|"RegionManager.metaScanner"
argument_list|)
expr_stmt|;
block|}
name|void
name|unsetRootRegion
parameter_list|()
block|{
synchronized|synchronized
init|(
name|regionsInTransition
init|)
block|{
name|rootRegionLocation
operator|.
name|set
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|regionsInTransition
operator|.
name|remove
argument_list|(
name|HRegionInfo
operator|.
name|ROOT_REGIONINFO
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"-ROOT- region unset (but not set to be reassigned)"
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|reassignRootRegion
parameter_list|()
block|{
name|unsetRootRegion
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|master
operator|.
name|shutdownRequested
operator|.
name|get
argument_list|()
condition|)
block|{
synchronized|synchronized
init|(
name|regionsInTransition
init|)
block|{
name|RegionState
name|s
init|=
operator|new
name|RegionState
argument_list|(
name|HRegionInfo
operator|.
name|ROOT_REGIONINFO
argument_list|)
decl_stmt|;
name|s
operator|.
name|setUnassigned
argument_list|()
expr_stmt|;
name|regionsInTransition
operator|.
name|put
argument_list|(
name|HRegionInfo
operator|.
name|ROOT_REGIONINFO
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"ROOT inserted into regionsInTransition"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*    * Assigns regions to region servers attempting to balance the load across    * all region servers. Note that no synchronization is necessary as the caller     * (ServerManager.processMsgs) already owns the monitor for the RegionManager.    *     * @param info    * @param mostLoadedRegions    * @param returnMsgs    */
name|void
name|assignRegions
parameter_list|(
name|HServerInfo
name|info
parameter_list|,
name|HRegionInfo
index|[]
name|mostLoadedRegions
parameter_list|,
name|ArrayList
argument_list|<
name|HMsg
argument_list|>
name|returnMsgs
parameter_list|)
block|{
name|HServerLoad
name|thisServersLoad
init|=
name|info
operator|.
name|getLoad
argument_list|()
decl_stmt|;
name|boolean
name|isSingleServer
init|=
name|master
operator|.
name|serverManager
operator|.
name|numServers
argument_list|()
operator|==
literal|1
decl_stmt|;
comment|// figure out what regions need to be assigned and aren't currently being
comment|// worked on elsewhere.
name|Set
argument_list|<
name|RegionState
argument_list|>
name|regionsToAssign
init|=
name|regionsAwaitingAssignment
argument_list|(
name|info
operator|.
name|getServerAddress
argument_list|()
argument_list|,
name|isSingleServer
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionsToAssign
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// There are no regions waiting to be assigned.
if|if
condition|(
operator|!
name|inSafeMode
argument_list|()
condition|)
block|{
comment|// We only do load balancing once all regions are assigned.
comment|// This prevents churn while the cluster is starting up.
name|loadBalancer
operator|.
name|loadBalancing
argument_list|(
name|info
argument_list|,
name|mostLoadedRegions
argument_list|,
name|returnMsgs
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// if there's only one server, just give it all the regions
if|if
condition|(
name|isSingleServer
condition|)
block|{
name|assignRegionsToOneServer
argument_list|(
name|regionsToAssign
argument_list|,
name|info
argument_list|,
name|returnMsgs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// otherwise, give this server a few regions taking into account the
comment|// load of all the other servers.
name|assignRegionsToMultipleServers
argument_list|(
name|thisServersLoad
argument_list|,
name|regionsToAssign
argument_list|,
name|info
argument_list|,
name|returnMsgs
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*    * Make region assignments taking into account multiple servers' loads.    *    * Note that no synchronization is needed while we iterate over    * regionsInTransition because this method is only called by assignRegions    * whose caller owns the monitor for RegionManager    */
specifier|private
name|void
name|assignRegionsToMultipleServers
parameter_list|(
specifier|final
name|HServerLoad
name|thisServersLoad
parameter_list|,
specifier|final
name|Set
argument_list|<
name|RegionState
argument_list|>
name|regionsToAssign
parameter_list|,
specifier|final
name|HServerInfo
name|info
parameter_list|,
specifier|final
name|ArrayList
argument_list|<
name|HMsg
argument_list|>
name|returnMsgs
parameter_list|)
block|{
name|boolean
name|isMetaAssign
init|=
literal|false
decl_stmt|;
for|for
control|(
name|RegionState
name|s
range|:
name|regionsToAssign
control|)
block|{
if|if
condition|(
name|s
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|isMetaRegion
argument_list|()
condition|)
name|isMetaAssign
operator|=
literal|true
expr_stmt|;
block|}
name|int
name|nRegionsToAssign
init|=
name|regionsToAssign
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|nregions
init|=
name|regionsPerServer
argument_list|(
name|nRegionsToAssign
argument_list|,
name|thisServersLoad
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Assigning for "
operator|+
name|info
operator|+
literal|": total nregions to assign="
operator|+
name|nRegionsToAssign
operator|+
literal|", nregions to reach balance="
operator|+
name|nregions
operator|+
literal|", isMetaAssign="
operator|+
name|isMetaAssign
argument_list|)
expr_stmt|;
name|nRegionsToAssign
operator|-=
name|nregions
expr_stmt|;
if|if
condition|(
name|nRegionsToAssign
operator|>
literal|0
operator|||
name|isMetaAssign
condition|)
block|{
comment|// We still have more regions to assign. See how many we can assign
comment|// before this server becomes more heavily loaded than the next
comment|// most heavily loaded server.
name|HServerLoad
name|heavierLoad
init|=
operator|new
name|HServerLoad
argument_list|()
decl_stmt|;
name|int
name|nservers
init|=
name|computeNextHeaviestLoad
argument_list|(
name|thisServersLoad
argument_list|,
name|heavierLoad
argument_list|)
decl_stmt|;
name|nregions
operator|=
literal|0
expr_stmt|;
comment|// Advance past any less-loaded servers
for|for
control|(
name|HServerLoad
name|load
init|=
operator|new
name|HServerLoad
argument_list|(
name|thisServersLoad
argument_list|)
init|;
name|load
operator|.
name|compareTo
argument_list|(
name|heavierLoad
argument_list|)
operator|<=
literal|0
operator|&&
name|nregions
operator|<
name|nRegionsToAssign
condition|;
name|load
operator|.
name|setNumberOfRegions
argument_list|(
name|load
operator|.
name|getNumberOfRegions
argument_list|()
operator|+
literal|1
argument_list|)
operator|,
name|nregions
operator|++
control|)
block|{
comment|// continue;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Doing for "
operator|+
name|info
operator|+
literal|" nregions: "
operator|+
name|nregions
operator|+
literal|" and nRegionsToAssign: "
operator|+
name|nRegionsToAssign
argument_list|)
expr_stmt|;
if|if
condition|(
name|nregions
operator|<
name|nRegionsToAssign
condition|)
block|{
comment|// There are some more heavily loaded servers
comment|// but we can't assign all the regions to this server.
if|if
condition|(
name|nservers
operator|>
literal|0
condition|)
block|{
comment|// There are other servers that can share the load.
comment|// Split regions that need assignment across the servers.
name|nregions
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
operator|(
literal|1.0
operator|*
name|nRegionsToAssign
operator|)
operator|/
operator|(
literal|1.0
operator|*
name|nservers
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// No other servers with same load.
comment|// Split regions over all available servers
name|nregions
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
operator|(
literal|1.0
operator|*
name|nRegionsToAssign
operator|)
operator|/
operator|(
literal|1.0
operator|*
name|master
operator|.
name|serverManager
operator|.
name|numServers
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Assign all regions to this server
name|nregions
operator|=
name|nRegionsToAssign
expr_stmt|;
block|}
if|if
condition|(
name|nregions
operator|>
name|this
operator|.
name|maxAssignInOneGo
condition|)
block|{
name|nregions
operator|=
name|this
operator|.
name|maxAssignInOneGo
expr_stmt|;
block|}
for|for
control|(
name|RegionState
name|s
range|:
name|regionsToAssign
control|)
block|{
name|doRegionAssignment
argument_list|(
name|s
argument_list|,
name|info
argument_list|,
name|returnMsgs
argument_list|)
expr_stmt|;
if|if
condition|(
operator|--
name|nregions
operator|<=
literal|0
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
comment|/*    * Assign all to the only server. An unlikely case but still possible.    *     * Note that no synchronization is needed on regionsInTransition while    * iterating on it because the only caller is assignRegions whose caller owns     * the monitor for RegionManager    *     * @param regionsToAssign    * @param serverName    * @param returnMsgs    */
specifier|private
name|void
name|assignRegionsToOneServer
parameter_list|(
specifier|final
name|Set
argument_list|<
name|RegionState
argument_list|>
name|regionsToAssign
parameter_list|,
specifier|final
name|HServerInfo
name|info
parameter_list|,
specifier|final
name|ArrayList
argument_list|<
name|HMsg
argument_list|>
name|returnMsgs
parameter_list|)
block|{
for|for
control|(
name|RegionState
name|s
range|:
name|regionsToAssign
control|)
block|{
name|doRegionAssignment
argument_list|(
name|s
argument_list|,
name|info
argument_list|,
name|returnMsgs
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Do single region assignment.    * @param rs    * @param sinfo    * @param returnMsgs    */
specifier|private
name|void
name|doRegionAssignment
parameter_list|(
specifier|final
name|RegionState
name|rs
parameter_list|,
specifier|final
name|HServerInfo
name|sinfo
parameter_list|,
specifier|final
name|ArrayList
argument_list|<
name|HMsg
argument_list|>
name|returnMsgs
parameter_list|)
block|{
name|String
name|regionName
init|=
name|rs
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Assigning region "
operator|+
name|regionName
operator|+
literal|" to "
operator|+
name|sinfo
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|rs
operator|.
name|setPendingOpen
argument_list|(
name|sinfo
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|regionsInTransition
operator|.
name|put
argument_list|(
name|regionName
argument_list|,
name|rs
argument_list|)
expr_stmt|;
comment|// Since the meta/root may not be available at this moment, we
try|try
block|{
comment|// TODO move this into an actual class, and use the RetryableMetaOperation
name|master
operator|.
name|toDoQueue
operator|.
name|put
argument_list|(
operator|new
name|RegionServerOperation
argument_list|(
name|master
argument_list|)
block|{
specifier|protected
name|boolean
name|process
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|rootAvailable
argument_list|()
operator|||
operator|!
name|metaTableAvailable
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
comment|// the two above us will put us on the delayed queue
block|}
comment|// this call can cause problems if meta/root is offline!
name|historian
operator|.
name|addRegionAssignment
argument_list|(
name|rs
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|sinfo
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"RegionAssignmentHistorian from "
operator|+
name|sinfo
operator|.
name|getServerName
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore and don't write the region historian
name|LOG
operator|.
name|info
argument_list|(
literal|"doRegionAssignment: Couldn't queue the region historian due to exception: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
name|returnMsgs
operator|.
name|add
argument_list|(
operator|new
name|HMsg
argument_list|(
name|HMsg
operator|.
name|Type
operator|.
name|MSG_REGION_OPEN
argument_list|,
name|rs
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*    * @param nRegionsToAssign    * @param thisServersLoad    * @return How many regions we can assign to more lightly loaded servers    */
specifier|private
name|int
name|regionsPerServer
parameter_list|(
specifier|final
name|int
name|numUnassignedRegions
parameter_list|,
specifier|final
name|HServerLoad
name|thisServersLoad
parameter_list|)
block|{
name|SortedMap
argument_list|<
name|HServerLoad
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|lightServers
init|=
operator|new
name|TreeMap
argument_list|<
name|HServerLoad
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// Get all the servers who are more lightly loaded than this one.
synchronized|synchronized
init|(
name|master
operator|.
name|serverManager
operator|.
name|loadToServers
init|)
block|{
name|lightServers
operator|.
name|putAll
argument_list|(
name|master
operator|.
name|serverManager
operator|.
name|loadToServers
operator|.
name|headMap
argument_list|(
name|thisServersLoad
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Examine the list of servers that are more lightly loaded than this one.
comment|// Pretend that we will assign regions to these more lightly loaded servers
comment|// until they reach load equal with ours. Then, see how many regions are left
comment|// unassigned. That is how many regions we should assign to this server.
name|int
name|nRegions
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|HServerLoad
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|e
range|:
name|lightServers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|HServerLoad
name|lightLoad
init|=
operator|new
name|HServerLoad
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
do|do
block|{
name|lightLoad
operator|.
name|setNumberOfRegions
argument_list|(
name|lightLoad
operator|.
name|getNumberOfRegions
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|nRegions
operator|+=
literal|1
expr_stmt|;
block|}
do|while
condition|(
name|lightLoad
operator|.
name|compareTo
argument_list|(
name|thisServersLoad
argument_list|)
operator|<=
literal|0
operator|&&
name|nRegions
operator|<
name|numUnassignedRegions
condition|)
do|;
name|nRegions
operator|*=
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|nRegions
operator|>=
name|numUnassignedRegions
condition|)
block|{
break|break;
block|}
block|}
return|return
name|nRegions
return|;
block|}
comment|/*    * Get the set of regions that should be assignable in this pass.    *     * Note that no synchronization on regionsInTransition is needed because the    * only caller (assignRegions, whose caller is ServerManager.processMsgs) owns    * the monitor for RegionManager    */
specifier|private
name|Set
argument_list|<
name|RegionState
argument_list|>
name|regionsAwaitingAssignment
parameter_list|(
name|HServerAddress
name|addr
parameter_list|,
name|boolean
name|isSingleServer
parameter_list|)
block|{
comment|// set of regions we want to assign to this server
name|Set
argument_list|<
name|RegionState
argument_list|>
name|regionsToAssign
init|=
operator|new
name|HashSet
argument_list|<
name|RegionState
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|isMetaServer
init|=
name|isMetaServer
argument_list|(
name|addr
argument_list|)
decl_stmt|;
comment|// Handle if root is unassigned... only assign root if root is offline.
name|RegionState
name|rootState
init|=
name|regionsInTransition
operator|.
name|get
argument_list|(
name|HRegionInfo
operator|.
name|ROOT_REGIONINFO
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rootState
operator|!=
literal|null
operator|&&
name|rootState
operator|.
name|isUnassigned
argument_list|()
condition|)
block|{
comment|// make sure root isnt assigned here first.
comment|// if so return 'empty list'
comment|// by definition there is no way this could be a ROOT region (since it's
comment|// unassigned) so just make sure it isn't hosting META regions.
if|if
condition|(
operator|!
name|isMetaServer
condition|)
block|{
name|regionsToAssign
operator|.
name|add
argument_list|(
name|rootState
argument_list|)
expr_stmt|;
block|}
return|return
name|regionsToAssign
return|;
block|}
comment|// Look over the set of regions that aren't currently assigned to
comment|// determine which we should assign to this server.
name|boolean
name|reassigningMetas
init|=
name|numberOfMetaRegions
operator|.
name|get
argument_list|()
operator|!=
name|onlineMetaRegions
operator|.
name|size
argument_list|()
decl_stmt|;
name|boolean
name|isMetaOrRoot
init|=
name|isMetaServer
operator|||
name|isRootServer
argument_list|(
name|addr
argument_list|)
decl_stmt|;
if|if
condition|(
name|reassigningMetas
operator|&&
name|isMetaOrRoot
operator|&&
operator|!
name|isSingleServer
condition|)
block|{
return|return
name|regionsToAssign
return|;
comment|// dont assign anything to this server.
block|}
for|for
control|(
name|RegionState
name|s
range|:
name|regionsInTransition
operator|.
name|values
argument_list|()
control|)
block|{
name|HRegionInfo
name|i
init|=
name|s
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|reassigningMetas
operator|&&
operator|!
name|i
operator|.
name|isMetaRegion
argument_list|()
condition|)
block|{
comment|// Can't assign user regions until all meta regions have been assigned
comment|// and are on-line
continue|continue;
block|}
if|if
condition|(
name|s
operator|.
name|isUnassigned
argument_list|()
condition|)
block|{
name|regionsToAssign
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|regionsToAssign
return|;
block|}
comment|/*    * Figure out the load that is next highest amongst all regionservers. Also,    * return how many servers exist at that load.     */
specifier|private
name|int
name|computeNextHeaviestLoad
parameter_list|(
name|HServerLoad
name|referenceLoad
parameter_list|,
name|HServerLoad
name|heavierLoad
parameter_list|)
block|{
name|SortedMap
argument_list|<
name|HServerLoad
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|heavyServers
init|=
operator|new
name|TreeMap
argument_list|<
name|HServerLoad
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|master
operator|.
name|serverManager
operator|.
name|loadToServers
init|)
block|{
name|heavyServers
operator|.
name|putAll
argument_list|(
name|master
operator|.
name|serverManager
operator|.
name|loadToServers
operator|.
name|tailMap
argument_list|(
name|referenceLoad
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|nservers
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|HServerLoad
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|e
range|:
name|heavyServers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|servers
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|nservers
operator|+=
name|servers
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|compareTo
argument_list|(
name|referenceLoad
argument_list|)
operator|==
literal|0
condition|)
block|{
comment|// This is the load factor of the server we are considering
name|nservers
operator|-=
literal|1
expr_stmt|;
continue|continue;
block|}
comment|// If we get here, we are at the first load entry that is a
comment|// heavier load than the server we are considering
name|heavierLoad
operator|.
name|setNumberOfRequests
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getNumberOfRequests
argument_list|()
argument_list|)
expr_stmt|;
name|heavierLoad
operator|.
name|setNumberOfRegions
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getNumberOfRegions
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|nservers
return|;
block|}
comment|/*    * The server checking in right now is overloaded. We will tell it to close    * some or all of its most loaded regions, allowing it to reduce its load.    * The closed regions will then get picked up by other underloaded machines.    *    * Note that no synchronization is needed because the only caller     * (assignRegions) whose caller owns the monitor for RegionManager    */
name|void
name|unassignSomeRegions
parameter_list|(
specifier|final
name|HServerInfo
name|info
parameter_list|,
name|int
name|numRegionsToClose
parameter_list|,
specifier|final
name|HRegionInfo
index|[]
name|mostLoadedRegions
parameter_list|,
name|ArrayList
argument_list|<
name|HMsg
argument_list|>
name|returnMsgs
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Choosing to reassign "
operator|+
name|numRegionsToClose
operator|+
literal|" regions. mostLoadedRegions has "
operator|+
name|mostLoadedRegions
operator|.
name|length
operator|+
literal|" regions in it."
argument_list|)
expr_stmt|;
name|int
name|regionIdx
init|=
literal|0
decl_stmt|;
name|int
name|regionsClosed
init|=
literal|0
decl_stmt|;
name|int
name|skipped
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|regionsClosed
operator|<
name|numRegionsToClose
operator|&&
name|regionIdx
operator|<
name|mostLoadedRegions
operator|.
name|length
condition|)
block|{
name|HRegionInfo
name|currentRegion
init|=
name|mostLoadedRegions
index|[
name|regionIdx
index|]
decl_stmt|;
name|regionIdx
operator|++
expr_stmt|;
comment|// skip the region if it's meta or root
if|if
condition|(
name|currentRegion
operator|.
name|isRootRegion
argument_list|()
operator|||
name|currentRegion
operator|.
name|isMetaTable
argument_list|()
condition|)
block|{
continue|continue;
block|}
specifier|final
name|String
name|regionName
init|=
name|currentRegion
operator|.
name|getRegionNameAsString
argument_list|()
decl_stmt|;
if|if
condition|(
name|regionIsInTransition
argument_list|(
name|regionName
argument_list|)
condition|)
block|{
name|skipped
operator|++
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Going to close region "
operator|+
name|regionName
argument_list|)
expr_stmt|;
block|}
comment|// make a message to close the region
name|returnMsgs
operator|.
name|add
argument_list|(
operator|new
name|HMsg
argument_list|(
name|HMsg
operator|.
name|Type
operator|.
name|MSG_REGION_CLOSE
argument_list|,
name|currentRegion
argument_list|,
name|OVERLOADED
argument_list|)
argument_list|)
expr_stmt|;
comment|// mark the region as closing
name|setClosing
argument_list|(
name|info
operator|.
name|getServerName
argument_list|()
argument_list|,
name|currentRegion
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setPendingClose
argument_list|(
name|regionName
argument_list|)
expr_stmt|;
comment|// increment the count of regions we've marked
name|regionsClosed
operator|++
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Skipped "
operator|+
name|skipped
operator|+
literal|" region(s) that are in transition states"
argument_list|)
expr_stmt|;
block|}
specifier|static
class|class
name|TableDirFilter
implements|implements
name|PathFilter
block|{
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
comment|// skip the region servers' log dirs&& version file
comment|// HBASE-1112 want to sperate the log dirs from table's data dirs by a special character.
name|String
name|pathname
init|=
name|path
operator|.
name|getName
argument_list|()
decl_stmt|;
return|return
operator|!
name|pathname
operator|.
name|startsWith
argument_list|(
literal|"log_"
argument_list|)
operator|&&
operator|!
name|pathname
operator|.
name|equals
argument_list|(
name|VERSION_FILE_NAME
argument_list|)
return|;
block|}
block|}
specifier|static
class|class
name|RegionDirFilter
implements|implements
name|PathFilter
block|{
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
return|return
operator|!
name|path
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|HREGION_COMPACTIONDIR_NAME
argument_list|)
return|;
block|}
block|}
comment|/**    * @return the rough number of the regions on fs    * Note: this method simply counts the regions on fs by accumulating all the dirs     * in each table dir (${HBASE_ROOT}/$TABLE) and skipping logfiles, compaction dirs.    * @throws IOException     */
specifier|public
name|int
name|countRegionsOnFS
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|regions
init|=
literal|0
decl_stmt|;
name|FileStatus
index|[]
name|tableDirs
init|=
name|master
operator|.
name|fs
operator|.
name|listStatus
argument_list|(
name|master
operator|.
name|rootdir
argument_list|,
operator|new
name|TableDirFilter
argument_list|()
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|regionDirs
decl_stmt|;
name|RegionDirFilter
name|rdf
init|=
operator|new
name|RegionDirFilter
argument_list|()
decl_stmt|;
for|for
control|(
name|FileStatus
name|tabledir
range|:
name|tableDirs
control|)
block|{
if|if
condition|(
name|tabledir
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|regionDirs
operator|=
name|master
operator|.
name|fs
operator|.
name|listStatus
argument_list|(
name|tabledir
operator|.
name|getPath
argument_list|()
argument_list|,
name|rdf
argument_list|)
expr_stmt|;
name|regions
operator|+=
name|regionDirs
operator|.
name|length
expr_stmt|;
block|}
block|}
return|return
name|regions
return|;
block|}
comment|/**    * @return Read-only map of online regions.    */
specifier|public
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|MetaRegion
argument_list|>
name|getOnlineMetaRegions
parameter_list|()
block|{
synchronized|synchronized
init|(
name|onlineMetaRegions
init|)
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|onlineMetaRegions
argument_list|)
return|;
block|}
block|}
specifier|public
name|boolean
name|metaRegionsInTransition
parameter_list|()
block|{
synchronized|synchronized
init|(
name|onlineMetaRegions
init|)
block|{
for|for
control|(
name|MetaRegion
name|metaRegion
range|:
name|onlineMetaRegions
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|regionName
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|metaRegion
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionIsInTransition
argument_list|(
name|regionName
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Stop the root and meta scanners so that the region servers serving meta    * regions can shut down.    */
specifier|public
name|void
name|stopScanners
parameter_list|()
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"telling root scanner to stop"
argument_list|)
expr_stmt|;
block|}
name|rootScannerThread
operator|.
name|interruptIfAlive
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"telling meta scanner to stop"
argument_list|)
expr_stmt|;
block|}
name|metaScannerThread
operator|.
name|interruptIfAlive
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"meta and root scanners notified"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Stop the region assigner */
specifier|public
name|void
name|stop
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|rootScannerThread
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|rootScannerThread
operator|.
name|join
argument_list|()
expr_stmt|;
comment|// Wait for the root scanner to finish.
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|iex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"root scanner"
argument_list|,
name|iex
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|metaScannerThread
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|metaScannerThread
operator|.
name|join
argument_list|()
expr_stmt|;
comment|// Wait for meta scanner to finish.
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|iex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"meta scanner"
argument_list|,
name|iex
argument_list|)
expr_stmt|;
block|}
name|zooKeeperWrapper
operator|.
name|clearRSDirectory
argument_list|()
expr_stmt|;
name|zooKeeperWrapper
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Block until meta regions are online or we're shutting down.    * @return true if we found meta regions, false if we're closing.    */
specifier|public
name|boolean
name|areAllMetaRegionsOnline
parameter_list|()
block|{
synchronized|synchronized
init|(
name|onlineMetaRegions
init|)
block|{
return|return
operator|(
name|rootRegionLocation
operator|.
name|get
argument_list|()
operator|!=
literal|null
operator|&&
name|numberOfMetaRegions
operator|.
name|get
argument_list|()
operator|==
name|onlineMetaRegions
operator|.
name|size
argument_list|()
operator|)
return|;
block|}
block|}
comment|/**    * Search our map of online meta regions to find the first meta region that     * should contain a pointer to<i>newRegion</i>.    * @param newRegion    * @return MetaRegion where the newRegion should live    */
specifier|public
name|MetaRegion
name|getFirstMetaRegionForRegion
parameter_list|(
name|HRegionInfo
name|newRegion
parameter_list|)
block|{
synchronized|synchronized
init|(
name|onlineMetaRegions
init|)
block|{
if|if
condition|(
name|onlineMetaRegions
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|onlineMetaRegions
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|onlineMetaRegions
operator|.
name|get
argument_list|(
name|onlineMetaRegions
operator|.
name|firstKey
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|onlineMetaRegions
operator|.
name|containsKey
argument_list|(
name|newRegion
operator|.
name|getRegionName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|onlineMetaRegions
operator|.
name|get
argument_list|(
name|newRegion
operator|.
name|getRegionName
argument_list|()
argument_list|)
return|;
block|}
return|return
name|onlineMetaRegions
operator|.
name|get
argument_list|(
name|onlineMetaRegions
operator|.
name|headMap
argument_list|(
name|newRegion
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|lastKey
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
comment|/**    * Get a set of all the meta regions that contain info about a given table.    * @param tableName Table you need to know all the meta regions for    * @return set of MetaRegion objects that contain the table    * @throws NotAllMetaRegionsOnlineException    */
specifier|public
name|Set
argument_list|<
name|MetaRegion
argument_list|>
name|getMetaRegionsForTable
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|NotAllMetaRegionsOnlineException
block|{
name|byte
index|[]
name|firstMetaRegion
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|MetaRegion
argument_list|>
name|metaRegions
init|=
operator|new
name|HashSet
argument_list|<
name|MetaRegion
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|META_TABLE_NAME
argument_list|)
condition|)
block|{
if|if
condition|(
name|rootRegionLocation
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotAllMetaRegionsOnlineException
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|HConstants
operator|.
name|ROOT_TABLE_NAME
argument_list|)
argument_list|)
throw|;
block|}
name|metaRegions
operator|.
name|add
argument_list|(
operator|new
name|MetaRegion
argument_list|(
name|rootRegionLocation
operator|.
name|get
argument_list|()
argument_list|,
name|HRegionInfo
operator|.
name|ROOT_REGIONINFO
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|areAllMetaRegionsOnline
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NotAllMetaRegionsOnlineException
argument_list|()
throw|;
block|}
synchronized|synchronized
init|(
name|onlineMetaRegions
init|)
block|{
if|if
condition|(
name|onlineMetaRegions
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|firstMetaRegion
operator|=
name|onlineMetaRegions
operator|.
name|firstKey
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|onlineMetaRegions
operator|.
name|containsKey
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|firstMetaRegion
operator|=
name|tableName
expr_stmt|;
block|}
else|else
block|{
name|firstMetaRegion
operator|=
name|onlineMetaRegions
operator|.
name|headMap
argument_list|(
name|tableName
argument_list|)
operator|.
name|lastKey
argument_list|()
expr_stmt|;
block|}
name|metaRegions
operator|.
name|addAll
argument_list|(
name|onlineMetaRegions
operator|.
name|tailMap
argument_list|(
name|firstMetaRegion
argument_list|)
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|metaRegions
return|;
block|}
comment|/**    * Get metaregion that would host passed in row.    * @param row Row need to know all the meta regions for    * @return MetaRegion for passed row.    * @throws NotAllMetaRegionsOnlineException    */
specifier|public
name|MetaRegion
name|getMetaRegionForRow
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|)
throws|throws
name|NotAllMetaRegionsOnlineException
block|{
if|if
condition|(
operator|!
name|areAllMetaRegionsOnline
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NotAllMetaRegionsOnlineException
argument_list|()
throw|;
block|}
comment|// Row might be in -ROOT- table.  If so, return -ROOT- region.
name|int
name|prefixlen
init|=
name|META_REGION_PREFIX
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|row
operator|.
name|length
operator|>
name|prefixlen
operator|&&
name|Bytes
operator|.
name|compareTo
argument_list|(
name|META_REGION_PREFIX
argument_list|,
literal|0
argument_list|,
name|prefixlen
argument_list|,
name|row
argument_list|,
literal|0
argument_list|,
name|prefixlen
argument_list|)
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|MetaRegion
argument_list|(
name|this
operator|.
name|master
operator|.
name|getRootRegionLocation
argument_list|()
argument_list|,
name|HRegionInfo
operator|.
name|ROOT_REGIONINFO
argument_list|)
return|;
block|}
return|return
name|this
operator|.
name|onlineMetaRegions
operator|.
name|floorEntry
argument_list|(
name|row
argument_list|)
operator|.
name|getValue
argument_list|()
return|;
block|}
comment|/**    * Create a new HRegion, put a row for it into META (or ROOT), and mark the    * new region unassigned so that it will get assigned to a region server.    * @param newRegion HRegionInfo for the region to create    * @param server server hosting the META (or ROOT) region where the new    * region needs to be noted    * @param metaRegionName name of the meta region where new region is to be    * written    * @throws IOException    */
specifier|public
name|void
name|createRegion
parameter_list|(
name|HRegionInfo
name|newRegion
parameter_list|,
name|HRegionInterface
name|server
parameter_list|,
name|byte
index|[]
name|metaRegionName
parameter_list|)
throws|throws
name|IOException
block|{
comment|// 2. Create the HRegion
name|HRegion
name|region
init|=
name|HRegion
operator|.
name|createHRegion
argument_list|(
name|newRegion
argument_list|,
name|master
operator|.
name|rootdir
argument_list|,
name|master
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
comment|// 3. Insert into meta
name|HRegionInfo
name|info
init|=
name|region
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
name|byte
index|[]
name|regionName
init|=
name|region
operator|.
name|getRegionName
argument_list|()
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
name|byte
index|[]
name|infoBytes
init|=
name|Writables
operator|.
name|getBytes
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|String
name|infoString
init|=
operator|new
name|String
argument_list|(
name|infoBytes
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|CATALOG_FAMILY
argument_list|,
name|REGIONINFO_QUALIFIER
argument_list|,
name|Writables
operator|.
name|getBytes
argument_list|(
name|info
argument_list|)
argument_list|)
expr_stmt|;
name|server
operator|.
name|put
argument_list|(
name|metaRegionName
argument_list|,
name|put
argument_list|)
expr_stmt|;
comment|// 4. Close the new region to flush it to disk.  Close its log file too.
name|region
operator|.
name|close
argument_list|()
expr_stmt|;
name|region
operator|.
name|getLog
argument_list|()
operator|.
name|closeAndDelete
argument_list|()
expr_stmt|;
comment|// 5. Get it assigned to a server
name|setUnassigned
argument_list|(
name|info
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**     * Set a MetaRegion as online.     * @param metaRegion     */
specifier|public
name|void
name|putMetaRegionOnline
parameter_list|(
name|MetaRegion
name|metaRegion
parameter_list|)
block|{
name|onlineMetaRegions
operator|.
name|put
argument_list|(
name|metaRegion
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|metaRegion
argument_list|)
expr_stmt|;
block|}
comment|/**     * Get a list of online MetaRegions     * @return list of MetaRegion objects    */
specifier|public
name|List
argument_list|<
name|MetaRegion
argument_list|>
name|getListOfOnlineMetaRegions
parameter_list|()
block|{
name|List
argument_list|<
name|MetaRegion
argument_list|>
name|regions
decl_stmt|;
synchronized|synchronized
init|(
name|onlineMetaRegions
init|)
block|{
name|regions
operator|=
operator|new
name|ArrayList
argument_list|<
name|MetaRegion
argument_list|>
argument_list|(
name|onlineMetaRegions
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|regions
return|;
block|}
comment|/**     * Count of online meta regions     * @return count of online meta regions    */
specifier|public
name|int
name|numOnlineMetaRegions
parameter_list|()
block|{
return|return
name|onlineMetaRegions
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**     * Check if a meta region is online by its name     * @param startKey name of the meta region to check    * @return true if the region is online, false otherwise    */
specifier|public
name|boolean
name|isMetaRegionOnline
parameter_list|(
name|byte
index|[]
name|startKey
parameter_list|)
block|{
return|return
name|onlineMetaRegions
operator|.
name|containsKey
argument_list|(
name|startKey
argument_list|)
return|;
block|}
comment|/**     * Set an online MetaRegion offline - remove it from the map.     * @param startKey region name    * @return the MetaRegion that was taken offline.    */
specifier|public
name|MetaRegion
name|offlineMetaRegion
parameter_list|(
name|byte
index|[]
name|startKey
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"META region removed from onlineMetaRegions"
argument_list|)
expr_stmt|;
return|return
name|onlineMetaRegions
operator|.
name|remove
argument_list|(
name|startKey
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isRootServer
parameter_list|(
name|HServerAddress
name|server
parameter_list|)
block|{
if|if
condition|(
name|master
operator|.
name|getRootRegionLocation
argument_list|()
operator|!=
literal|null
operator|&&
name|server
operator|.
name|equals
argument_list|(
name|master
operator|.
name|getRootRegionLocation
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
comment|/**    * Returns the list of byte[] start-keys for any .META. regions hosted    * on the indicated server.    *    * @param server server address    * @return list of meta region start-keys.    */
specifier|public
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|listMetaRegionsForServer
parameter_list|(
name|HServerAddress
name|server
parameter_list|)
block|{
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|metas
init|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|MetaRegion
name|region
range|:
name|onlineMetaRegions
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|server
operator|.
name|equals
argument_list|(
name|region
operator|.
name|getServer
argument_list|()
argument_list|)
condition|)
block|{
name|metas
operator|.
name|add
argument_list|(
name|region
operator|.
name|getStartKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|metas
return|;
block|}
comment|/**    * Does this server have any META regions open on it, or any meta    * regions being assigned to it?    *    * @param server Server IP:port    * @return true if server has meta region assigned    */
specifier|public
name|boolean
name|isMetaServer
parameter_list|(
name|HServerAddress
name|server
parameter_list|)
block|{
for|for
control|(
name|MetaRegion
name|region
range|:
name|onlineMetaRegions
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|server
operator|.
name|equals
argument_list|(
name|region
operator|.
name|getServer
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
comment|// This might be expensive, but we need to make sure we dont
comment|// get double assignment to the same regionserver.
for|for
control|(
name|RegionState
name|s
range|:
name|regionsInTransition
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|s
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|isMetaRegion
argument_list|()
operator|&&
operator|!
name|s
operator|.
name|isUnassigned
argument_list|()
operator|&&
name|s
operator|.
name|getServerName
argument_list|()
operator|!=
literal|null
operator|&&
name|s
operator|.
name|getServerName
argument_list|()
operator|.
name|equals
argument_list|(
name|server
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
comment|// Has an outstanding meta region to be assigned.
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Call to take this metaserver offline for immediate reassignment.  Used only    * when we know a region has shut down cleanly.    *    * A meta server is a server that hosts either -ROOT- or any .META. regions.    *    * If you are considering a unclean shutdown potentially, use ProcessServerShutdown which    * calls other methods to immediately unassign root/meta but delay the reassign until the    * log has been split.    *    * @param server the server that went down    * @return true if this was in fact a meta server, false if it did not carry meta regions.    */
specifier|public
specifier|synchronized
name|boolean
name|offlineMetaServer
parameter_list|(
name|HServerAddress
name|server
parameter_list|)
block|{
name|boolean
name|hasMeta
init|=
literal|false
decl_stmt|;
comment|// check to see if ROOT and/or .META. are on this server, reassign them.
comment|// use master.getRootRegionLocation.
if|if
condition|(
name|master
operator|.
name|getRootRegionLocation
argument_list|()
operator|!=
literal|null
operator|&&
name|server
operator|.
name|equals
argument_list|(
name|master
operator|.
name|getRootRegionLocation
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Offlined ROOT server: "
operator|+
name|server
argument_list|)
expr_stmt|;
name|reassignRootRegion
argument_list|()
expr_stmt|;
name|hasMeta
operator|=
literal|true
expr_stmt|;
block|}
comment|// AND
for|for
control|(
name|MetaRegion
name|region
range|:
name|onlineMetaRegions
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|server
operator|.
name|equals
argument_list|(
name|region
operator|.
name|getServer
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Offlining META region: "
operator|+
name|region
argument_list|)
expr_stmt|;
name|offlineMetaRegion
argument_list|(
name|region
operator|.
name|getStartKey
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set for reassignment.
name|setUnassigned
argument_list|(
name|region
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hasMeta
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|hasMeta
return|;
block|}
comment|/**    * Remove a region from the region state map.    *     * @param info    */
specifier|public
name|void
name|removeRegion
parameter_list|(
name|HRegionInfo
name|info
parameter_list|)
block|{
name|this
operator|.
name|regionsInTransition
operator|.
name|remove
argument_list|(
name|info
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param regionName    * @return true if the named region is in a transition state    */
specifier|public
name|boolean
name|regionIsInTransition
parameter_list|(
name|String
name|regionName
parameter_list|)
block|{
return|return
name|regionsInTransition
operator|.
name|containsKey
argument_list|(
name|regionName
argument_list|)
return|;
block|}
comment|/**    * @param regionName    * @return true if the region is unassigned, pendingOpen or open    */
specifier|public
name|boolean
name|regionIsOpening
parameter_list|(
name|String
name|regionName
parameter_list|)
block|{
name|RegionState
name|state
init|=
name|regionsInTransition
operator|.
name|get
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|!=
literal|null
condition|)
block|{
return|return
name|state
operator|.
name|isOpening
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**     * Set a region to unassigned     * @param info Region to set unassigned    * @param force if true mark region unassigned whatever its current state    */
specifier|public
name|void
name|setUnassigned
parameter_list|(
name|HRegionInfo
name|info
parameter_list|,
name|boolean
name|force
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|regionsInTransition
init|)
block|{
name|RegionState
name|s
init|=
name|regionsInTransition
operator|.
name|get
argument_list|(
name|info
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
name|s
operator|=
operator|new
name|RegionState
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|regionsInTransition
operator|.
name|put
argument_list|(
name|info
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|force
operator|||
operator|(
operator|!
name|s
operator|.
name|isPendingOpen
argument_list|()
operator|&&
operator|!
name|s
operator|.
name|isOpen
argument_list|()
operator|)
condition|)
block|{
name|s
operator|.
name|setUnassigned
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**     * Check if a region is on the unassigned list    * @param info HRegionInfo to check for    * @return true if on the unassigned list, false if it isn't. Note that this    * means a region could not be on the unassigned list AND not be assigned, if    * it happens to be between states.    */
specifier|public
name|boolean
name|isUnassigned
parameter_list|(
name|HRegionInfo
name|info
parameter_list|)
block|{
synchronized|synchronized
init|(
name|regionsInTransition
init|)
block|{
name|RegionState
name|s
init|=
name|regionsInTransition
operator|.
name|get
argument_list|(
name|info
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
return|return
name|s
operator|.
name|isUnassigned
argument_list|()
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Check if a region has been assigned and we're waiting for a response from    * the region server.    *     * @param regionName name of the region    * @return true if open, false otherwise    */
specifier|public
name|boolean
name|isPendingOpen
parameter_list|(
name|String
name|regionName
parameter_list|)
block|{
synchronized|synchronized
init|(
name|regionsInTransition
init|)
block|{
name|RegionState
name|s
init|=
name|regionsInTransition
operator|.
name|get
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
return|return
name|s
operator|.
name|isPendingOpen
argument_list|()
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Region has been assigned to a server and the server has told us it is open    * @param regionName    */
specifier|public
name|void
name|setOpen
parameter_list|(
name|String
name|regionName
parameter_list|)
block|{
synchronized|synchronized
init|(
name|regionsInTransition
init|)
block|{
name|RegionState
name|s
init|=
name|regionsInTransition
operator|.
name|get
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|s
operator|.
name|setOpen
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * @param regionName    * @return true if region is marked to be offlined.    */
specifier|public
name|boolean
name|isOfflined
parameter_list|(
name|String
name|regionName
parameter_list|)
block|{
synchronized|synchronized
init|(
name|regionsInTransition
init|)
block|{
name|RegionState
name|s
init|=
name|regionsInTransition
operator|.
name|get
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
return|return
name|s
operator|.
name|isOfflined
argument_list|()
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**     * Mark a region as closing     * @param serverName    * @param regionInfo    * @param setOffline    */
specifier|public
name|void
name|setClosing
parameter_list|(
specifier|final
name|String
name|serverName
parameter_list|,
specifier|final
name|HRegionInfo
name|regionInfo
parameter_list|,
specifier|final
name|boolean
name|setOffline
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|regionsInTransition
init|)
block|{
name|RegionState
name|s
init|=
name|this
operator|.
name|regionsInTransition
operator|.
name|get
argument_list|(
name|regionInfo
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
name|s
operator|=
operator|new
name|RegionState
argument_list|(
name|regionInfo
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|setClosing
argument_list|(
name|serverName
argument_list|,
name|setOffline
argument_list|)
expr_stmt|;
name|this
operator|.
name|regionsInTransition
operator|.
name|put
argument_list|(
name|regionInfo
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**     * Remove the map of region names to region infos waiting to be offlined for a     * given server    *      * @param serverName    * @return set of infos to close    */
specifier|public
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
name|getMarkedToClose
parameter_list|(
name|String
name|serverName
parameter_list|)
block|{
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
name|result
init|=
operator|new
name|HashSet
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|regionsInTransition
init|)
block|{
for|for
control|(
name|RegionState
name|s
range|:
name|regionsInTransition
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|s
operator|.
name|isClosing
argument_list|()
operator|&&
operator|!
name|s
operator|.
name|isPendingClose
argument_list|()
operator|&&
operator|!
name|s
operator|.
name|isClosed
argument_list|()
operator|&&
name|s
operator|.
name|getServerName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|serverName
argument_list|)
operator|==
literal|0
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|s
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**    * Called when we have told a region server to close the region    *     * @param regionName    */
specifier|public
name|void
name|setPendingClose
parameter_list|(
name|String
name|regionName
parameter_list|)
block|{
synchronized|synchronized
init|(
name|regionsInTransition
init|)
block|{
name|RegionState
name|s
init|=
name|regionsInTransition
operator|.
name|get
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|s
operator|.
name|setPendingClose
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * @param regionName    */
specifier|public
name|void
name|setClosed
parameter_list|(
name|String
name|regionName
parameter_list|)
block|{
synchronized|synchronized
init|(
name|regionsInTransition
init|)
block|{
name|RegionState
name|s
init|=
name|regionsInTransition
operator|.
name|get
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|s
operator|.
name|setClosed
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Add a meta region to the scan queue    * @param m MetaRegion that needs to get scanned    */
specifier|public
name|void
name|addMetaRegionToScan
parameter_list|(
name|MetaRegion
name|m
parameter_list|)
block|{
name|metaScannerThread
operator|.
name|addMetaRegionToScan
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
comment|/**     * Check if the initial root scan has been completed.    * @return true if scan completed, false otherwise    */
specifier|public
name|boolean
name|isInitialRootScanComplete
parameter_list|()
block|{
return|return
name|rootScannerThread
operator|.
name|isInitialScanComplete
argument_list|()
return|;
block|}
comment|/**     * Check if the initial meta scan has been completed.    * @return true if meta completed, false otherwise    */
specifier|public
name|boolean
name|isInitialMetaScanComplete
parameter_list|()
block|{
return|return
name|metaScannerThread
operator|.
name|isInitialScanComplete
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|tellZooKeeperOutOfSafeMode
parameter_list|()
block|{
for|for
control|(
name|int
name|attempt
init|=
literal|0
init|;
name|attempt
operator|<
name|zooKeeperNumRetries
condition|;
operator|++
name|attempt
control|)
block|{
if|if
condition|(
name|zooKeeperWrapper
operator|.
name|writeOutOfSafeMode
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
name|sleep
argument_list|(
name|attempt
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to tell ZooKeeper we're out of safe mode after "
operator|+
name|zooKeeperNumRetries
operator|+
literal|" retries"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|/**     * @return true if the initial meta scan is complete and there are no    * unassigned or pending regions    */
specifier|public
name|boolean
name|inSafeMode
parameter_list|()
block|{
if|if
condition|(
name|safeMode
condition|)
block|{
if|if
condition|(
name|isInitialMetaScanComplete
argument_list|()
operator|&&
name|regionsInTransition
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|&&
name|tellZooKeeperOutOfSafeMode
argument_list|()
condition|)
block|{
name|master
operator|.
name|connection
operator|.
name|unsetRootRegionLocation
argument_list|()
expr_stmt|;
name|safeMode
operator|=
literal|false
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"exiting safe mode"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"in safe mode"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|safeMode
return|;
block|}
comment|/**     * Get the root region location.    * @return HServerAddress describing root region server.    */
specifier|public
name|HServerAddress
name|getRootRegionLocation
parameter_list|()
block|{
return|return
name|rootRegionLocation
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Block until either the root region location is available or we're shutting    * down.    */
specifier|public
name|void
name|waitForRootRegionLocation
parameter_list|()
block|{
synchronized|synchronized
init|(
name|rootRegionLocation
init|)
block|{
while|while
condition|(
operator|!
name|master
operator|.
name|closed
operator|.
name|get
argument_list|()
operator|&&
name|rootRegionLocation
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// rootRegionLocation will be filled in when we get an 'open region'
comment|// regionServerReport message from the HRegionServer that has been
comment|// allocated the ROOT region below.
try|try
block|{
comment|// Cycle rather than hold here in case master is closed meantime.
name|rootRegionLocation
operator|.
name|wait
argument_list|(
name|this
operator|.
name|master
operator|.
name|threadWakeFrequency
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// continue
block|}
block|}
block|}
block|}
comment|/**    * Return the number of meta regions.    * @return number of meta regions    */
specifier|public
name|int
name|numMetaRegions
parameter_list|()
block|{
return|return
name|numberOfMetaRegions
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Bump the count of meta regions up one    */
specifier|public
name|void
name|incrementNumMetaRegions
parameter_list|()
block|{
name|numberOfMetaRegions
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
specifier|private
name|long
name|getPauseTime
parameter_list|(
name|int
name|tries
parameter_list|)
block|{
name|int
name|attempt
init|=
name|tries
decl_stmt|;
if|if
condition|(
name|attempt
operator|>=
name|RETRY_BACKOFF
operator|.
name|length
condition|)
block|{
name|attempt
operator|=
name|RETRY_BACKOFF
operator|.
name|length
operator|-
literal|1
expr_stmt|;
block|}
return|return
name|this
operator|.
name|zooKeeperPause
operator|*
name|RETRY_BACKOFF
index|[
name|attempt
index|]
return|;
block|}
specifier|private
name|void
name|sleep
parameter_list|(
name|int
name|attempt
parameter_list|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|getPauseTime
argument_list|(
name|attempt
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// continue
block|}
block|}
specifier|private
name|void
name|writeRootRegionLocationToZooKeeper
parameter_list|(
name|HServerAddress
name|address
parameter_list|)
block|{
for|for
control|(
name|int
name|attempt
init|=
literal|0
init|;
name|attempt
operator|<
name|zooKeeperNumRetries
condition|;
operator|++
name|attempt
control|)
block|{
if|if
condition|(
name|zooKeeperWrapper
operator|.
name|writeRootRegionLocation
argument_list|(
name|address
argument_list|)
condition|)
block|{
return|return;
block|}
name|sleep
argument_list|(
name|attempt
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to write root region location to ZooKeeper after "
operator|+
name|zooKeeperNumRetries
operator|+
literal|" retries, shutting down"
argument_list|)
expr_stmt|;
name|this
operator|.
name|master
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|/**    * Set the root region location.    * @param address Address of the region server where the root lives    */
specifier|public
name|void
name|setRootRegionLocation
parameter_list|(
name|HServerAddress
name|address
parameter_list|)
block|{
name|writeRootRegionLocationToZooKeeper
argument_list|(
name|address
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|rootRegionLocation
init|)
block|{
name|rootRegionLocation
operator|.
name|set
argument_list|(
operator|new
name|HServerAddress
argument_list|(
name|address
argument_list|)
argument_list|)
expr_stmt|;
name|rootRegionLocation
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Set the number of meta regions.    * @param num Number of meta regions    */
specifier|public
name|void
name|setNumMetaRegions
parameter_list|(
name|int
name|num
parameter_list|)
block|{
name|numberOfMetaRegions
operator|.
name|set
argument_list|(
name|num
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param regionName    * @param info    * @param server    * @param op    */
specifier|public
name|void
name|startAction
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|,
name|HRegionInfo
name|info
parameter_list|,
name|HServerAddress
name|server
parameter_list|,
name|HConstants
operator|.
name|Modify
name|op
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding operation "
operator|+
name|op
operator|+
literal|" from tasklist"
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|op
condition|)
block|{
case|case
name|TABLE_SPLIT
case|:
name|startAction
argument_list|(
name|regionName
argument_list|,
name|info
argument_list|,
name|server
argument_list|,
name|this
operator|.
name|regionsToSplit
argument_list|)
expr_stmt|;
break|break;
case|case
name|TABLE_COMPACT
case|:
name|startAction
argument_list|(
name|regionName
argument_list|,
name|info
argument_list|,
name|server
argument_list|,
name|this
operator|.
name|regionsToCompact
argument_list|)
expr_stmt|;
break|break;
case|case
name|TABLE_MAJOR_COMPACT
case|:
name|startAction
argument_list|(
name|regionName
argument_list|,
name|info
argument_list|,
name|server
argument_list|,
name|this
operator|.
name|regionsToMajorCompact
argument_list|)
expr_stmt|;
break|break;
case|case
name|TABLE_FLUSH
case|:
name|startAction
argument_list|(
name|regionName
argument_list|,
name|info
argument_list|,
name|server
argument_list|,
name|this
operator|.
name|regionsToFlush
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"illegal table action "
operator|+
name|op
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|startAction
parameter_list|(
specifier|final
name|byte
index|[]
name|regionName
parameter_list|,
specifier|final
name|HRegionInfo
name|info
parameter_list|,
specifier|final
name|HServerAddress
name|server
parameter_list|,
specifier|final
name|SortedMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
argument_list|>
name|map
parameter_list|)
block|{
name|map
operator|.
name|put
argument_list|(
name|regionName
argument_list|,
operator|new
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
argument_list|(
name|info
argument_list|,
name|server
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param regionName    * @param op    */
specifier|public
name|void
name|endAction
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|,
name|HConstants
operator|.
name|Modify
name|op
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removing operation "
operator|+
name|op
operator|+
literal|" from tasklist"
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|op
condition|)
block|{
case|case
name|TABLE_SPLIT
case|:
name|this
operator|.
name|regionsToSplit
operator|.
name|remove
argument_list|(
name|regionName
argument_list|)
expr_stmt|;
break|break;
case|case
name|TABLE_COMPACT
case|:
name|this
operator|.
name|regionsToCompact
operator|.
name|remove
argument_list|(
name|regionName
argument_list|)
expr_stmt|;
break|break;
case|case
name|TABLE_MAJOR_COMPACT
case|:
name|this
operator|.
name|regionsToMajorCompact
operator|.
name|remove
argument_list|(
name|regionName
argument_list|)
expr_stmt|;
break|break;
case|case
name|TABLE_FLUSH
case|:
name|this
operator|.
name|regionsToFlush
operator|.
name|remove
argument_list|(
name|regionName
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"illegal table action "
operator|+
name|op
argument_list|)
throw|;
block|}
block|}
comment|/**    * @param regionName    */
specifier|public
name|void
name|endActions
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|)
block|{
name|regionsToSplit
operator|.
name|remove
argument_list|(
name|regionName
argument_list|)
expr_stmt|;
name|regionsToCompact
operator|.
name|remove
argument_list|(
name|regionName
argument_list|)
expr_stmt|;
block|}
comment|/**    * Send messages to the given region server asking it to split any    * regions in 'regionsToSplit', etc.    * @param serverInfo    * @param returnMsgs    */
specifier|public
name|void
name|applyActions
parameter_list|(
name|HServerInfo
name|serverInfo
parameter_list|,
name|ArrayList
argument_list|<
name|HMsg
argument_list|>
name|returnMsgs
parameter_list|)
block|{
name|applyActions
argument_list|(
name|serverInfo
argument_list|,
name|returnMsgs
argument_list|,
name|this
operator|.
name|regionsToCompact
argument_list|,
name|HMsg
operator|.
name|Type
operator|.
name|MSG_REGION_COMPACT
argument_list|)
expr_stmt|;
name|applyActions
argument_list|(
name|serverInfo
argument_list|,
name|returnMsgs
argument_list|,
name|this
operator|.
name|regionsToSplit
argument_list|,
name|HMsg
operator|.
name|Type
operator|.
name|MSG_REGION_SPLIT
argument_list|)
expr_stmt|;
name|applyActions
argument_list|(
name|serverInfo
argument_list|,
name|returnMsgs
argument_list|,
name|this
operator|.
name|regionsToFlush
argument_list|,
name|HMsg
operator|.
name|Type
operator|.
name|MSG_REGION_FLUSH
argument_list|)
expr_stmt|;
name|applyActions
argument_list|(
name|serverInfo
argument_list|,
name|returnMsgs
argument_list|,
name|this
operator|.
name|regionsToMajorCompact
argument_list|,
name|HMsg
operator|.
name|Type
operator|.
name|MSG_REGION_MAJOR_COMPACT
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|applyActions
parameter_list|(
specifier|final
name|HServerInfo
name|serverInfo
parameter_list|,
specifier|final
name|ArrayList
argument_list|<
name|HMsg
argument_list|>
name|returnMsgs
parameter_list|,
specifier|final
name|SortedMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
argument_list|>
name|map
parameter_list|,
specifier|final
name|HMsg
operator|.
name|Type
name|msg
parameter_list|)
block|{
name|HServerAddress
name|addr
init|=
name|serverInfo
operator|.
name|getServerAddress
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|map
init|)
block|{
name|Iterator
argument_list|<
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
argument_list|>
name|i
init|=
name|map
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
name|pair
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|addr
operator|.
name|equals
argument_list|(
name|pair
operator|.
name|getSecond
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Sending "
operator|+
name|msg
operator|+
literal|" "
operator|+
name|pair
operator|.
name|getFirst
argument_list|()
operator|+
literal|" to "
operator|+
name|addr
argument_list|)
expr_stmt|;
block|}
name|returnMsgs
operator|.
name|add
argument_list|(
operator|new
name|HMsg
argument_list|(
name|msg
argument_list|,
name|pair
operator|.
name|getFirst
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Class to balance region servers load.    * It keeps Region Servers load in slop range by unassigning Regions    * from most loaded servers.    *     * Equilibrium is reached when load of all serves are in slop range    * [avgLoadMinusSlop, avgLoadPlusSlop], where     *  avgLoadPlusSlop = Math.ceil(avgLoad * (1 + this.slop)), and    *  avgLoadMinusSlop = Math.floor(avgLoad * (1 - this.slop)) - 1.    */
specifier|private
class|class
name|LoadBalancer
block|{
specifier|private
name|float
name|slop
decl_stmt|;
comment|// hbase.regions.slop
specifier|private
specifier|final
name|int
name|maxRegToClose
decl_stmt|;
comment|// hbase.regions.close.max
name|LoadBalancer
parameter_list|(
name|HBaseConfiguration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|slop
operator|=
name|conf
operator|.
name|getFloat
argument_list|(
literal|"hbase.regions.slop"
argument_list|,
operator|(
name|float
operator|)
literal|0.1
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|slop
operator|<=
literal|0
condition|)
name|this
operator|.
name|slop
operator|=
literal|1
expr_stmt|;
comment|//maxRegToClose to constrain balance closing per one iteration
comment|// -1 to turn off
comment|// TODO: change default in HBASE-862, need a suggestion
name|this
operator|.
name|maxRegToClose
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.regions.close.max"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**      * Balance server load by unassigning some regions.      *       * @param info - server info      * @param mostLoadedRegions - array of most loaded regions      * @param returnMsgs - array of return massages      */
name|void
name|loadBalancing
parameter_list|(
name|HServerInfo
name|info
parameter_list|,
name|HRegionInfo
index|[]
name|mostLoadedRegions
parameter_list|,
name|ArrayList
argument_list|<
name|HMsg
argument_list|>
name|returnMsgs
parameter_list|)
block|{
name|HServerLoad
name|servLoad
init|=
name|info
operator|.
name|getLoad
argument_list|()
decl_stmt|;
name|double
name|avg
init|=
name|master
operator|.
name|serverManager
operator|.
name|getAverageLoad
argument_list|()
decl_stmt|;
comment|// nothing to balance if server load not more then average load
if|if
condition|(
name|servLoad
operator|.
name|getLoad
argument_list|()
operator|<=
name|Math
operator|.
name|ceil
argument_list|(
name|avg
argument_list|)
operator|||
name|avg
operator|<=
literal|2.0
condition|)
return|return;
comment|// check if server is overloaded
name|int
name|numRegionsToClose
init|=
name|balanceFromOverloaded
argument_list|(
name|servLoad
argument_list|,
name|avg
argument_list|)
decl_stmt|;
comment|// check if we can unload server by low loaded servers
if|if
condition|(
name|numRegionsToClose
operator|<=
literal|0
condition|)
name|balanceToLowloaded
argument_list|(
name|info
operator|.
name|getServerName
argument_list|()
argument_list|,
name|servLoad
argument_list|,
name|avg
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxRegToClose
operator|>
literal|0
condition|)
name|numRegionsToClose
operator|=
name|Math
operator|.
name|min
argument_list|(
name|numRegionsToClose
argument_list|,
name|maxRegToClose
argument_list|)
expr_stmt|;
if|if
condition|(
name|numRegionsToClose
operator|>
literal|0
condition|)
block|{
name|unassignSomeRegions
argument_list|(
name|info
argument_list|,
name|numRegionsToClose
argument_list|,
name|mostLoadedRegions
argument_list|,
name|returnMsgs
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*       * Check if server load is not overloaded (with load> avgLoadPlusSlop).      * @return number of regions to unassign.      */
specifier|private
name|int
name|balanceFromOverloaded
parameter_list|(
name|HServerLoad
name|srvLoad
parameter_list|,
name|double
name|avgLoad
parameter_list|)
block|{
name|int
name|avgLoadPlusSlop
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|avgLoad
operator|*
operator|(
literal|1
operator|+
name|this
operator|.
name|slop
operator|)
argument_list|)
decl_stmt|;
name|int
name|numSrvRegs
init|=
name|srvLoad
operator|.
name|getNumberOfRegions
argument_list|()
decl_stmt|;
if|if
condition|(
name|numSrvRegs
operator|>
name|avgLoadPlusSlop
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Server is overloaded: load="
operator|+
name|numSrvRegs
operator|+
literal|", avg="
operator|+
name|avgLoad
operator|+
literal|", slop="
operator|+
name|this
operator|.
name|slop
argument_list|)
expr_stmt|;
block|}
return|return
name|numSrvRegs
operator|-
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|avgLoad
argument_list|)
return|;
block|}
return|return
literal|0
return|;
block|}
comment|/*       * Check if server is most loaded and can be unloaded to       * low loaded servers (with load< avgLoadMinusSlop).      * @return number of regions to unassign.      */
specifier|private
name|int
name|balanceToLowloaded
parameter_list|(
name|String
name|srvName
parameter_list|,
name|HServerLoad
name|srvLoad
parameter_list|,
name|double
name|avgLoad
parameter_list|)
block|{
name|SortedMap
argument_list|<
name|HServerLoad
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|loadToServers
init|=
name|master
operator|.
name|serverManager
operator|.
name|getLoadToServers
argument_list|()
decl_stmt|;
comment|// check if server most loaded
if|if
condition|(
operator|!
name|loadToServers
operator|.
name|get
argument_list|(
name|loadToServers
operator|.
name|lastKey
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|srvName
argument_list|)
condition|)
return|return
literal|0
return|;
comment|// this server is most loaded, we will try to unload it by lowest
comment|// loaded servers
name|int
name|avgLoadMinusSlop
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|avgLoad
operator|*
operator|(
literal|1
operator|-
name|this
operator|.
name|slop
operator|)
argument_list|)
operator|-
literal|1
decl_stmt|;
name|int
name|lowestLoad
init|=
name|loadToServers
operator|.
name|firstKey
argument_list|()
operator|.
name|getNumberOfRegions
argument_list|()
decl_stmt|;
if|if
condition|(
name|lowestLoad
operator|>=
name|avgLoadMinusSlop
condition|)
return|return
literal|0
return|;
comment|// there is no low loaded servers
name|int
name|lowSrvCount
init|=
name|loadToServers
operator|.
name|get
argument_list|(
name|loadToServers
operator|.
name|firstKey
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|numRegionsToClose
init|=
literal|0
decl_stmt|;
name|int
name|numSrvRegs
init|=
name|srvLoad
operator|.
name|getNumberOfRegions
argument_list|()
decl_stmt|;
name|int
name|numMoveToLowLoaded
init|=
operator|(
name|avgLoadMinusSlop
operator|-
name|lowestLoad
operator|)
operator|*
name|lowSrvCount
decl_stmt|;
name|numRegionsToClose
operator|=
name|numSrvRegs
operator|-
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|avgLoad
argument_list|)
expr_stmt|;
name|numRegionsToClose
operator|=
name|Math
operator|.
name|min
argument_list|(
name|numRegionsToClose
argument_list|,
name|numMoveToLowLoaded
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Server "
operator|+
name|srvName
operator|+
literal|" will be unloaded for "
operator|+
literal|"balance. Server load: "
operator|+
name|numSrvRegs
operator|+
literal|" avg: "
operator|+
name|avgLoad
operator|+
literal|", regions can be moved: "
operator|+
name|numMoveToLowLoaded
argument_list|)
expr_stmt|;
block|}
return|return
name|numRegionsToClose
return|;
block|}
block|}
comment|/**    * @return Snapshot of regionsintransition as a sorted Map.    */
name|NavigableMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getRegionsInTransition
parameter_list|()
block|{
name|NavigableMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|result
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|regionsInTransition
init|)
block|{
if|if
condition|(
name|this
operator|.
name|regionsInTransition
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|result
return|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|RegionState
argument_list|>
name|e
range|:
name|this
operator|.
name|regionsInTransition
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|result
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**    * @param regionname Name to clear from regions in transistion.    * @return True if we removed an element for the passed regionname.    */
name|boolean
name|clearFromInTransition
parameter_list|(
specifier|final
name|byte
index|[]
name|regionname
parameter_list|)
block|{
name|boolean
name|result
init|=
literal|false
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|regionsInTransition
init|)
block|{
if|if
condition|(
name|this
operator|.
name|regionsInTransition
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|result
return|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|RegionState
argument_list|>
name|e
range|:
name|this
operator|.
name|regionsInTransition
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|regionname
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|)
condition|)
block|{
name|this
operator|.
name|regionsInTransition
operator|.
name|remove
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removed "
operator|+
name|e
operator|.
name|getKey
argument_list|()
operator|+
literal|", "
operator|+
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
comment|/*    * State of a Region as it transitions from closed to open, etc.  See    * note on regionsInTransition data member above for listing of state    * transitions.    */
specifier|private
specifier|static
class|class
name|RegionState
implements|implements
name|Comparable
argument_list|<
name|RegionState
argument_list|>
block|{
specifier|private
specifier|final
name|HRegionInfo
name|regionInfo
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|unassigned
init|=
literal|false
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|pendingOpen
init|=
literal|false
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|open
init|=
literal|false
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|closing
init|=
literal|false
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|pendingClose
init|=
literal|false
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|offlined
init|=
literal|false
decl_stmt|;
comment|/* Set when region is assigned or closing */
specifier|private
specifier|volatile
name|String
name|serverName
init|=
literal|null
decl_stmt|;
comment|/* Constructor */
name|RegionState
parameter_list|(
name|HRegionInfo
name|info
parameter_list|)
block|{
name|this
operator|.
name|regionInfo
operator|=
name|info
expr_stmt|;
block|}
specifier|synchronized
name|HRegionInfo
name|getRegionInfo
parameter_list|()
block|{
return|return
name|this
operator|.
name|regionInfo
return|;
block|}
specifier|synchronized
name|byte
index|[]
name|getRegionName
parameter_list|()
block|{
return|return
name|this
operator|.
name|regionInfo
operator|.
name|getRegionName
argument_list|()
return|;
block|}
comment|/*      * @return Server this region was assigned to      */
specifier|synchronized
name|String
name|getServerName
parameter_list|()
block|{
return|return
name|this
operator|.
name|serverName
return|;
block|}
comment|/*      * @return true if the region is being opened      */
specifier|synchronized
name|boolean
name|isOpening
parameter_list|()
block|{
return|return
name|this
operator|.
name|unassigned
operator|||
name|this
operator|.
name|pendingOpen
operator|||
name|this
operator|.
name|open
return|;
block|}
comment|/*      * @return true if region is unassigned      */
specifier|synchronized
name|boolean
name|isUnassigned
parameter_list|()
block|{
return|return
name|unassigned
return|;
block|}
comment|/*      * Note: callers of this method (reassignRootRegion,       * regionsAwaitingAssignment, setUnassigned) ensure that this method is not      * called unless it is safe to do so.      */
specifier|synchronized
name|void
name|setUnassigned
parameter_list|()
block|{
name|this
operator|.
name|unassigned
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|pendingOpen
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|open
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|closing
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|pendingClose
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|closed
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|offlined
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|serverName
operator|=
literal|null
expr_stmt|;
block|}
specifier|synchronized
name|boolean
name|isPendingOpen
parameter_list|()
block|{
return|return
name|pendingOpen
return|;
block|}
comment|/*      * @param serverName Server region was assigned to.      */
specifier|synchronized
name|void
name|setPendingOpen
parameter_list|(
specifier|final
name|String
name|serverName
parameter_list|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|unassigned
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot assign a region that is not currently unassigned. "
operator|+
literal|"FIX!! State: "
operator|+
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|unassigned
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|pendingOpen
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|open
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|closing
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|pendingClose
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|closed
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|offlined
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|serverName
operator|=
name|serverName
expr_stmt|;
block|}
specifier|synchronized
name|boolean
name|isOpen
parameter_list|()
block|{
return|return
name|open
return|;
block|}
specifier|synchronized
name|void
name|setOpen
parameter_list|()
block|{
if|if
condition|(
operator|!
name|pendingOpen
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot set a region as open if it has not been pending. "
operator|+
literal|"FIX!! State: "
operator|+
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|unassigned
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|pendingOpen
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|open
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|closing
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|pendingClose
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|closed
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|offlined
operator|=
literal|false
expr_stmt|;
block|}
specifier|synchronized
name|boolean
name|isClosing
parameter_list|()
block|{
return|return
name|closing
return|;
block|}
specifier|synchronized
name|void
name|setClosing
parameter_list|(
name|String
name|serverName
parameter_list|,
name|boolean
name|setOffline
parameter_list|)
block|{
name|this
operator|.
name|unassigned
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|pendingOpen
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|open
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|closing
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|pendingClose
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|closed
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|offlined
operator|=
name|setOffline
expr_stmt|;
name|this
operator|.
name|serverName
operator|=
name|serverName
expr_stmt|;
block|}
specifier|synchronized
name|boolean
name|isPendingClose
parameter_list|()
block|{
return|return
name|this
operator|.
name|pendingClose
return|;
block|}
specifier|synchronized
name|void
name|setPendingClose
parameter_list|()
block|{
if|if
condition|(
operator|!
name|closing
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot set a region as pending close if it has not been "
operator|+
literal|"closing.  FIX!! State: "
operator|+
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|unassigned
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|pendingOpen
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|open
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|closing
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|pendingClose
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|closed
operator|=
literal|false
expr_stmt|;
block|}
specifier|synchronized
name|boolean
name|isClosed
parameter_list|()
block|{
return|return
name|this
operator|.
name|closed
return|;
block|}
specifier|synchronized
name|void
name|setClosed
parameter_list|()
block|{
if|if
condition|(
operator|!
name|pendingClose
operator|&&
operator|!
name|pendingOpen
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot set a region to be closed if it was not already marked as"
operator|+
literal|" pending close or pending open. State: "
operator|+
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|this
operator|.
name|unassigned
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|pendingOpen
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|open
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|closing
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|pendingClose
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|closed
operator|=
literal|true
expr_stmt|;
block|}
specifier|synchronized
name|boolean
name|isOfflined
parameter_list|()
block|{
return|return
name|this
operator|.
name|offlined
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|String
name|toString
parameter_list|()
block|{
return|return
operator|(
literal|"name="
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|getRegionName
argument_list|()
argument_list|)
operator|+
literal|", unassigned="
operator|+
name|this
operator|.
name|unassigned
operator|+
literal|", pendingOpen="
operator|+
name|this
operator|.
name|pendingOpen
operator|+
literal|", open="
operator|+
name|this
operator|.
name|open
operator|+
literal|", closing="
operator|+
name|this
operator|.
name|closing
operator|+
literal|", pendingClose="
operator|+
name|this
operator|.
name|pendingClose
operator|+
literal|", closed="
operator|+
name|this
operator|.
name|closed
operator|+
literal|", offlined="
operator|+
name|this
operator|.
name|offlined
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|this
operator|.
name|compareTo
argument_list|(
operator|(
name|RegionState
operator|)
name|o
argument_list|)
operator|==
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Bytes
operator|.
name|toString
argument_list|(
name|getRegionName
argument_list|()
argument_list|)
operator|.
name|hashCode
argument_list|()
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|RegionState
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
name|Bytes
operator|.
name|compareTo
argument_list|(
name|getRegionName
argument_list|()
argument_list|,
name|o
operator|.
name|getRegionName
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

