begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2008 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|BatchUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**   * ProcessRegionOpen is instantiated when a region server reports that it is  * serving a region. This applies to all meta and user regions except the   * root region which is handled specially.  */
end_comment

begin_class
class|class
name|ProcessRegionOpen
extends|extends
name|ProcessRegionStatusChange
block|{
specifier|protected
specifier|final
name|HServerAddress
name|serverAddress
decl_stmt|;
specifier|protected
specifier|final
name|byte
index|[]
name|startCode
decl_stmt|;
comment|/**    * @param master    * @param info    * @param regionInfo    * @throws IOException    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|public
name|ProcessRegionOpen
parameter_list|(
name|HMaster
name|master
parameter_list|,
name|HServerInfo
name|info
parameter_list|,
name|HRegionInfo
name|regionInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|master
argument_list|,
name|regionInfo
argument_list|)
expr_stmt|;
name|this
operator|.
name|serverAddress
operator|=
name|info
operator|.
name|getServerAddress
argument_list|()
expr_stmt|;
name|this
operator|.
name|startCode
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|info
operator|.
name|getStartCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"PendingOpenOperation from "
operator|+
name|serverAddress
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|process
parameter_list|()
throws|throws
name|IOException
block|{
name|Boolean
name|result
init|=
operator|new
name|RetryableMetaOperation
argument_list|<
name|Boolean
argument_list|>
argument_list|(
name|this
operator|.
name|metaRegion
argument_list|,
name|this
operator|.
name|master
argument_list|)
block|{
specifier|public
name|Boolean
name|call
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
name|regionInfo
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" open on "
operator|+
name|serverAddress
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|metaRegionAvailable
argument_list|()
condition|)
block|{
comment|// We can't proceed unless the meta region we are going to update
comment|// is online. metaRegionAvailable() has put this operation on the
comment|// delayedToDoQueue, so return true so the operation is not put
comment|// back on the toDoQueue
return|return
literal|true
return|;
block|}
comment|// Register the newly-available Region's location.
name|LOG
operator|.
name|info
argument_list|(
literal|"updating row "
operator|+
name|regionInfo
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" in region "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|metaRegionName
argument_list|)
operator|+
literal|" with startcode "
operator|+
name|Bytes
operator|.
name|toLong
argument_list|(
name|startCode
argument_list|)
operator|+
literal|" and server "
operator|+
name|serverAddress
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|BatchUpdate
name|b
init|=
operator|new
name|BatchUpdate
argument_list|(
name|regionInfo
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
name|b
operator|.
name|put
argument_list|(
name|COL_SERVER
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|serverAddress
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|put
argument_list|(
name|COL_STARTCODE
argument_list|,
name|startCode
argument_list|)
expr_stmt|;
name|server
operator|.
name|batchUpdate
argument_list|(
name|metaRegionName
argument_list|,
name|b
argument_list|)
expr_stmt|;
if|if
condition|(
name|isMetaTable
condition|)
block|{
comment|// It's a meta region.
name|MetaRegion
name|m
init|=
operator|new
name|MetaRegion
argument_list|(
name|serverAddress
argument_list|,
name|regionInfo
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|regionInfo
operator|.
name|getStartKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|master
operator|.
name|regionManager
operator|.
name|isInitialMetaScanComplete
argument_list|()
condition|)
block|{
comment|// Put it on the queue to be scanned for the first time.
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding "
operator|+
name|m
operator|.
name|toString
argument_list|()
operator|+
literal|" to regions to scan"
argument_list|)
expr_stmt|;
name|master
operator|.
name|regionManager
operator|.
name|addMetaRegionToScan
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Putting into metaRegionsToScan was interrupted."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// Add it to the online meta regions
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding to onlineMetaRegions: "
operator|+
name|m
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|master
operator|.
name|regionManager
operator|.
name|putMetaRegionOnline
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
block|}
comment|// If updated successfully, remove from pending list.
name|master
operator|.
name|regionManager
operator|.
name|noLongerPending
argument_list|(
name|regionInfo
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
operator|.
name|doWithRetries
argument_list|()
decl_stmt|;
return|return
name|result
operator|==
literal|null
condition|?
literal|true
else|:
name|result
return|;
block|}
block|}
end_class

end_unit

