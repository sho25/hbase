begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2009 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|WatchedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
operator|.
name|Event
operator|.
name|EventType
import|;
end_import

begin_comment
comment|/**  * ZooKeeper watcher for the master address. Used by the HMaster to wait for  * the event when master address ZNode gets deleted. When multiple masters are  * brought up, they race to become master by writing to write their address to  * ZooKeeper. Whoever wins becomes the master, and the rest wait for that  * ephemeral node in ZooKeeper to get deleted (meaning the master went down), at  * which point they try to write to it again.  */
end_comment

begin_class
specifier|public
class|class
name|ZKMasterAddressWatcher
implements|implements
name|Watcher
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ZKMasterAddressWatcher
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ZooKeeperWrapper
name|zooKeeper
decl_stmt|;
comment|/**    * Create a watcher with a ZooKeeperWrapper instance.    * @param zooKeeper ZooKeeperWrapper to use to talk to ZooKeeper.    */
specifier|public
name|ZKMasterAddressWatcher
parameter_list|(
name|ZooKeeperWrapper
name|zooKeeper
parameter_list|)
block|{
name|this
operator|.
name|zooKeeper
operator|=
name|zooKeeper
expr_stmt|;
block|}
comment|/**    * @see org.apache.zookeeper.Watcher#process(org.apache.zookeeper.WatchedEvent)    */
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|process
parameter_list|(
name|WatchedEvent
name|event
parameter_list|)
block|{
name|EventType
name|type
init|=
name|event
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|EventType
operator|.
name|NodeDeleted
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Master address ZNode deleted, notifying waiting masters"
argument_list|)
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Wait for master address to be available. This sets a watch in ZooKeeper and    * blocks until the master address ZNode gets deleted.    */
specifier|public
specifier|synchronized
name|void
name|waitForMasterAddressAvailability
parameter_list|()
block|{
while|while
condition|(
name|zooKeeper
operator|.
name|readMasterAddress
argument_list|(
name|this
argument_list|)
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Waiting for master address ZNode to be deleted"
argument_list|)
expr_stmt|;
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{       }
block|}
block|}
block|}
end_class

end_unit

