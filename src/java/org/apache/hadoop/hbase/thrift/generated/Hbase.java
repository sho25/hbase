begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|/**  * Autogenerated by Thrift  *  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|transport
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|Hbase
block|{
specifier|public
interface|interface
name|Iface
block|{
comment|/**      * List all the userspace tables.      * @return - returns a list of names      */
specifier|public
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|getTableNames
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
function_decl|;
comment|/**      * List all the column families assoicated with a table.      * @param tableName table name      * @return list of column family descriptors      */
specifier|public
name|AbstractMap
argument_list|<
name|byte
index|[]
argument_list|,
name|ColumnDescriptor
argument_list|>
name|getColumnDescriptors
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
function_decl|;
comment|/**      * List the regions associated with a table.      * @param tableName table name      * @return list of region descriptors      */
specifier|public
name|ArrayList
argument_list|<
name|RegionDescriptor
argument_list|>
name|getTableRegions
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
function_decl|;
comment|/**      * Create a table with the specified column families.  The name      * field for each ColumnDescriptor must be set and must end in a      * colon (:).  All other fields are optional and will get default      * values if not explicitly specified.      *       * @param tableName name of table to create      * @param columnFamilies list of column family descriptors      *       * @throws IllegalArgument if an input parameter is invalid      * @throws AlreadyExists if the table name already exists      */
specifier|public
name|void
name|createTable
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|ArrayList
argument_list|<
name|ColumnDescriptor
argument_list|>
name|columnFamilies
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|AlreadyExists
throws|,
name|TException
function_decl|;
comment|/**      * Deletes a table      * @param tableName name of table to delete      * @throws NotFound if table doesn't exist on server      */
specifier|public
name|void
name|deleteTable
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOError
throws|,
name|NotFound
throws|,
name|TException
function_decl|;
comment|/**      * Get a single value for the specified table, row, and column at the      * latest timestamp.      *       * @param tableName name of table      * @param row row key      * @param column column name      * @return value for specified row/column      */
specifier|public
name|byte
index|[]
name|get
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|column
parameter_list|)
throws|throws
name|IOError
throws|,
name|NotFound
throws|,
name|TException
function_decl|;
comment|/**      * Get the specified number of versions for the specified table,      * row, and column.      *       * @param tableName name of table      * @param row row key      * @param column column name      * @param numVersions number of versions to retrieve      * @return list of values for specified row/column      */
specifier|public
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|getVer
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|column
parameter_list|,
name|int
name|numVersions
parameter_list|)
throws|throws
name|IOError
throws|,
name|NotFound
throws|,
name|TException
function_decl|;
comment|/**      * Get the specified number of versions for the specified table,      * row, and column.  Only versions less than or equal to the specified      * timestamp will be returned.      *       * @param tableName name of table      * @param row row key      * @param column column name      * @param timestamp timestamp      * @param numVersions number of versions to retrieve      * @return list of values for specified row/column      */
specifier|public
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|getVerTs
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|column
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|int
name|numVersions
parameter_list|)
throws|throws
name|IOError
throws|,
name|NotFound
throws|,
name|TException
function_decl|;
comment|/**      * Get all the data for the specified table and row at the latest      * timestamp.      *       * @param tableName name of table      * @param row row key      * @return Map of columns to values.  Map is empty if row does not exist.      */
specifier|public
name|AbstractMap
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|getRow
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
function_decl|;
comment|/**      * Get all the data for the specified table and row at the specified      * timestamp.      *       * @param tableName of table      * @param row row key      * @param timestamp timestamp      * @return Map of columns to values.  Map is empty if row does not exist.      */
specifier|public
name|AbstractMap
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|getRowTs
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
function_decl|;
comment|/**      * Put a single value at the specified table, row, and column.      * To put muliple values in a single transaction, or to specify      * a non-default timestamp, use {@link #mutateRow} and/or      * {@link #mutateRowTs}      *       * @param tableName name of table      * @param row row key      * @param column column name      */
specifier|public
name|void
name|put
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|column
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
function_decl|;
comment|/**      * Apply a series of mutations (updates/deletes) to a row in a      * single transaction.  If an exception is thrown, then the      * transaction is aborted.  Default current timestamp is used, and      * all entries will have an identical timestamp.      *       * @param tableName name of table      * @param row row key      * @param mutations list of mutation commands      */
specifier|public
name|void
name|mutateRow
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|ArrayList
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
function_decl|;
comment|/**      * Apply a series of mutations (updates/deletes) to a row in a      * single transaction.  If an exception is thrown, then the      * transaction is aborted.  The specified timestamp is used, and      * all entries will have an identical timestamp.      *       * @param tableName name of table      * @param row row key      * @param mutations list of mutation commands      * @param timestamp timestamp      */
specifier|public
name|void
name|mutateRowTs
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|ArrayList
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
function_decl|;
comment|/**      * Apply a series of batches (each a series of mutations on a single row)      * in a single transaction.  If an exception is thrown, then the      * transaction is aborted.  Default current timestamp is used, and      * all entries will have an identical timestamp.      *       * @param tableName name of table      * @param rowBatches list of row batches      */
specifier|public
name|void
name|mutateRows
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|ArrayList
argument_list|<
name|BatchMutation
argument_list|>
name|rowBatches
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
function_decl|;
comment|/**      * Apply a series of batches (each a series of mutations on a single row)      * in a single transaction.  If an exception is thrown, then the      * transaction is aborted.  The specified timestamp is used, and      * all entries will have an identical timestamp.      *       * @param tableName name of table      * @param rowBatches list of row batches      * @param timestamp timestamp      */
specifier|public
name|void
name|mutateRowsTs
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|ArrayList
argument_list|<
name|BatchMutation
argument_list|>
name|rowBatches
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
function_decl|;
comment|/**      * Delete all cells that match the passed row and column.      *       * @param tableName name of table      * @param row Row to update      * @param column name of column whose value is to be deleted      */
specifier|public
name|void
name|deleteAll
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|column
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
function_decl|;
comment|/**      * Delete all cells that match the passed row and column and whose      * timestamp is equal-to or older than the passed timestamp.      *       * @param tableName name of table      * @param row Row to update      * @param column name of column whose value is to be deleted      * @param timestamp timestamp      */
specifier|public
name|void
name|deleteAllTs
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|column
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
function_decl|;
comment|/**      * Completely delete the row's cells.      *       * @param tableName name of table      * @param row key of the row to be completely deleted.      */
specifier|public
name|void
name|deleteAllRow
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
function_decl|;
comment|/**      * Completely delete the row's cells marked with a timestamp      * equal-to or older than the passed timestamp.      *       * @param tableName name of table      * @param row key of the row to be completely deleted.      * @param timestamp timestamp      */
specifier|public
name|void
name|deleteAllRowTs
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
function_decl|;
comment|/**      * Get a scanner on the current table starting at the specified row and      * ending at the last row in the table.  Return the specified columns.      *       * @param columns columns to scan. If column name is a column family, all      * columns of the specified column family are returned.  Its also possible      * to pass a regex in the column qualifier.      * @param tableName name of table      * @param startRow starting row in table to scan.  send "" (empty string) to      *                 start at the first row.      *       * @return scanner id to be used with other scanner procedures      */
specifier|public
name|int
name|scannerOpen
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|startRow
parameter_list|,
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
function_decl|;
comment|/**      * Get a scanner on the current table starting and stopping at the      * specified rows.  ending at the last row in the table.  Return the      * specified columns.      *       * @param columns columns to scan. If column name is a column family, all      * columns of the specified column family are returned.  Its also possible      * to pass a regex in the column qualifier.      * @param tableName name of table      * @param startRow starting row in table to scan.  send "" (empty string) to      *                 start at the first row.      * @param stopRow row to stop scanning on.  This row is *not* included in the      *                scanner's results      *       * @return scanner id to be used with other scanner procedures      */
specifier|public
name|int
name|scannerOpenWithStop
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|startRow
parameter_list|,
name|byte
index|[]
name|stopRow
parameter_list|,
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
function_decl|;
comment|/**      * Get a scanner on the current table starting at the specified row and      * ending at the last row in the table.  Return the specified columns.      * Only values with the specified timestamp are returned.      *       * @param columns columns to scan. If column name is a column family, all      * columns of the specified column family are returned.  Its also possible      * to pass a regex in the column qualifier.      * @param tableName name of table      * @param startRow starting row in table to scan.  send "" (empty string) to      *                 start at the first row.      * @param timestamp timestamp      *       * @return scanner id to be used with other scanner procedures      */
specifier|public
name|int
name|scannerOpenTs
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|startRow
parameter_list|,
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
function_decl|;
comment|/**      * Get a scanner on the current table starting and stopping at the      * specified rows.  ending at the last row in the table.  Return the      * specified columns.  Only values with the specified timestamp are      * returned.      *       * @param columns columns to scan. If column name is a column family, all      * columns of the specified column family are returned.  Its also possible      * to pass a regex in the column qualifier.      * @param tableName name of table      * @param startRow starting row in table to scan.  send "" (empty string) to      *                 start at the first row.      * @param stopRow row to stop scanning on.  This row is *not* included      *                in the scanner's results      * @param timestamp timestamp      *       * @return scanner id to be used with other scanner procedures      */
specifier|public
name|int
name|scannerOpenWithStopTs
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|startRow
parameter_list|,
name|byte
index|[]
name|stopRow
parameter_list|,
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
function_decl|;
comment|/**      * Returns the scanner's current row value and advances to the next      * row in the table.  When there are no more rows in the table, or a key      * greater-than-or-equal-to the scanner's specified stopRow is reached,      * a NotFound exception is returned.      *       * @param id id of a scanner returned by scannerOpen      * @return a ScanEntry object representing the current row's values      * @throws IllegalArgument if ScannerID is invalid      * @throws NotFound when the scanner reaches the end      */
specifier|public
name|ScanEntry
name|scannerGet
parameter_list|(
name|int
name|id
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|NotFound
throws|,
name|TException
function_decl|;
comment|/**      * Closes the server-state associated with an open scanner.      *       * @param id id of a scanner returned by scannerOpen      * @throws IllegalArgument if ScannerID is invalid      */
specifier|public
name|void
name|scannerClose
parameter_list|(
name|int
name|id
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
function_decl|;
block|}
specifier|public
specifier|static
class|class
name|Client
implements|implements
name|Iface
block|{
specifier|public
name|Client
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
block|{
name|this
argument_list|(
name|prot
argument_list|,
name|prot
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Client
parameter_list|(
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
block|{
name|iprot_
operator|=
name|iprot
expr_stmt|;
name|oprot_
operator|=
name|oprot
expr_stmt|;
block|}
specifier|protected
name|TProtocol
name|iprot_
decl_stmt|;
specifier|protected
name|TProtocol
name|oprot_
decl_stmt|;
specifier|protected
name|int
name|seqid_
decl_stmt|;
specifier|public
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|getTableNames
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
name|send_getTableNames
argument_list|()
expr_stmt|;
return|return
name|recv_getTableNames
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_getTableNames
parameter_list|()
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getTableNames"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|getTableNames_args
name|args
init|=
operator|new
name|getTableNames_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|recv_getTableNames
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
name|getTableNames_result
name|result
init|=
operator|new
name|getTableNames_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|io
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"getTableNames failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|AbstractMap
argument_list|<
name|byte
index|[]
argument_list|,
name|ColumnDescriptor
argument_list|>
name|getColumnDescriptors
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
name|send_getColumnDescriptors
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
return|return
name|recv_getColumnDescriptors
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_getColumnDescriptors
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getColumnDescriptors"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|getColumnDescriptors_args
name|args
init|=
operator|new
name|getColumnDescriptors_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|AbstractMap
argument_list|<
name|byte
index|[]
argument_list|,
name|ColumnDescriptor
argument_list|>
name|recv_getColumnDescriptors
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
name|getColumnDescriptors_result
name|result
init|=
operator|new
name|getColumnDescriptors_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|io
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"getColumnDescriptors failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|ArrayList
argument_list|<
name|RegionDescriptor
argument_list|>
name|getTableRegions
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
name|send_getTableRegions
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
return|return
name|recv_getTableRegions
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_getTableRegions
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getTableRegions"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|getTableRegions_args
name|args
init|=
operator|new
name|getTableRegions_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|ArrayList
argument_list|<
name|RegionDescriptor
argument_list|>
name|recv_getTableRegions
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
name|getTableRegions_result
name|result
init|=
operator|new
name|getTableRegions_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|io
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"getTableRegions failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|createTable
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|ArrayList
argument_list|<
name|ColumnDescriptor
argument_list|>
name|columnFamilies
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|AlreadyExists
throws|,
name|TException
block|{
name|send_createTable
argument_list|(
name|tableName
argument_list|,
name|columnFamilies
argument_list|)
expr_stmt|;
name|recv_createTable
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|send_createTable
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|ArrayList
argument_list|<
name|ColumnDescriptor
argument_list|>
name|columnFamilies
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"createTable"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|createTable_args
name|args
init|=
operator|new
name|createTable_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|args
operator|.
name|columnFamilies
operator|=
name|columnFamilies
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|recv_createTable
parameter_list|()
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|AlreadyExists
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
name|createTable_result
name|result
init|=
operator|new
name|createTable_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|io
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|ia
condition|)
block|{
throw|throw
name|result
operator|.
name|ia
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|exist
condition|)
block|{
throw|throw
name|result
operator|.
name|exist
throw|;
block|}
return|return;
block|}
specifier|public
name|void
name|deleteTable
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOError
throws|,
name|NotFound
throws|,
name|TException
block|{
name|send_deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|recv_deleteTable
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|send_deleteTable
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"deleteTable"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|deleteTable_args
name|args
init|=
operator|new
name|deleteTable_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|recv_deleteTable
parameter_list|()
throws|throws
name|IOError
throws|,
name|NotFound
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
name|deleteTable_result
name|result
init|=
operator|new
name|deleteTable_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|io
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|nf
condition|)
block|{
throw|throw
name|result
operator|.
name|nf
throw|;
block|}
return|return;
block|}
specifier|public
name|byte
index|[]
name|get
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|column
parameter_list|)
throws|throws
name|IOError
throws|,
name|NotFound
throws|,
name|TException
block|{
name|send_get
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|column
argument_list|)
expr_stmt|;
return|return
name|recv_get
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_get
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|column
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|get_args
name|args
init|=
operator|new
name|get_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|args
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|args
operator|.
name|column
operator|=
name|column
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|byte
index|[]
name|recv_get
parameter_list|()
throws|throws
name|IOError
throws|,
name|NotFound
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
name|get_result
name|result
init|=
operator|new
name|get_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|io
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|nf
condition|)
block|{
throw|throw
name|result
operator|.
name|nf
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"get failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|getVer
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|column
parameter_list|,
name|int
name|numVersions
parameter_list|)
throws|throws
name|IOError
throws|,
name|NotFound
throws|,
name|TException
block|{
name|send_getVer
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|numVersions
argument_list|)
expr_stmt|;
return|return
name|recv_getVer
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_getVer
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|column
parameter_list|,
name|int
name|numVersions
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getVer"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|getVer_args
name|args
init|=
operator|new
name|getVer_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|args
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|args
operator|.
name|column
operator|=
name|column
expr_stmt|;
name|args
operator|.
name|numVersions
operator|=
name|numVersions
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|recv_getVer
parameter_list|()
throws|throws
name|IOError
throws|,
name|NotFound
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
name|getVer_result
name|result
init|=
operator|new
name|getVer_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|io
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|nf
condition|)
block|{
throw|throw
name|result
operator|.
name|nf
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"getVer failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|getVerTs
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|column
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|int
name|numVersions
parameter_list|)
throws|throws
name|IOError
throws|,
name|NotFound
throws|,
name|TException
block|{
name|send_getVerTs
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|timestamp
argument_list|,
name|numVersions
argument_list|)
expr_stmt|;
return|return
name|recv_getVerTs
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_getVerTs
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|column
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|int
name|numVersions
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getVerTs"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|getVerTs_args
name|args
init|=
operator|new
name|getVerTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|args
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|args
operator|.
name|column
operator|=
name|column
expr_stmt|;
name|args
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|args
operator|.
name|numVersions
operator|=
name|numVersions
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|recv_getVerTs
parameter_list|()
throws|throws
name|IOError
throws|,
name|NotFound
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
name|getVerTs_result
name|result
init|=
operator|new
name|getVerTs_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|io
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|nf
condition|)
block|{
throw|throw
name|result
operator|.
name|nf
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"getVerTs failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|AbstractMap
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|getRow
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
name|send_getRow
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|)
expr_stmt|;
return|return
name|recv_getRow
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_getRow
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getRow"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|getRow_args
name|args
init|=
operator|new
name|getRow_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|args
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|AbstractMap
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|recv_getRow
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
name|getRow_result
name|result
init|=
operator|new
name|getRow_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|io
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"getRow failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|AbstractMap
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|getRowTs
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
name|send_getRowTs
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
return|return
name|recv_getRowTs
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_getRowTs
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getRowTs"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|getRowTs_args
name|args
init|=
operator|new
name|getRowTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|args
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|args
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|AbstractMap
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|recv_getRowTs
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
name|getRowTs_result
name|result
init|=
operator|new
name|getRowTs_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|io
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"getRowTs failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|put
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|column
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
block|{
name|send_put
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|recv_put
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|send_put
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|column
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"put"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|put_args
name|args
init|=
operator|new
name|put_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|args
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|args
operator|.
name|column
operator|=
name|column
expr_stmt|;
name|args
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|recv_put
parameter_list|()
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
name|put_result
name|result
init|=
operator|new
name|put_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|io
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|ia
condition|)
block|{
throw|throw
name|result
operator|.
name|ia
throw|;
block|}
return|return;
block|}
specifier|public
name|void
name|mutateRow
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|ArrayList
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
block|{
name|send_mutateRow
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|mutations
argument_list|)
expr_stmt|;
name|recv_mutateRow
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|send_mutateRow
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|ArrayList
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"mutateRow"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|mutateRow_args
name|args
init|=
operator|new
name|mutateRow_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|args
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|args
operator|.
name|mutations
operator|=
name|mutations
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|recv_mutateRow
parameter_list|()
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
name|mutateRow_result
name|result
init|=
operator|new
name|mutateRow_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|io
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|ia
condition|)
block|{
throw|throw
name|result
operator|.
name|ia
throw|;
block|}
return|return;
block|}
specifier|public
name|void
name|mutateRowTs
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|ArrayList
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
block|{
name|send_mutateRowTs
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|mutations
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
name|recv_mutateRowTs
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|send_mutateRowTs
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|ArrayList
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"mutateRowTs"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|mutateRowTs_args
name|args
init|=
operator|new
name|mutateRowTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|args
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|args
operator|.
name|mutations
operator|=
name|mutations
expr_stmt|;
name|args
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|recv_mutateRowTs
parameter_list|()
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
name|mutateRowTs_result
name|result
init|=
operator|new
name|mutateRowTs_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|io
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|ia
condition|)
block|{
throw|throw
name|result
operator|.
name|ia
throw|;
block|}
return|return;
block|}
specifier|public
name|void
name|mutateRows
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|ArrayList
argument_list|<
name|BatchMutation
argument_list|>
name|rowBatches
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
block|{
name|send_mutateRows
argument_list|(
name|tableName
argument_list|,
name|rowBatches
argument_list|)
expr_stmt|;
name|recv_mutateRows
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|send_mutateRows
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|ArrayList
argument_list|<
name|BatchMutation
argument_list|>
name|rowBatches
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"mutateRows"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|mutateRows_args
name|args
init|=
operator|new
name|mutateRows_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|args
operator|.
name|rowBatches
operator|=
name|rowBatches
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|recv_mutateRows
parameter_list|()
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
name|mutateRows_result
name|result
init|=
operator|new
name|mutateRows_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|io
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|ia
condition|)
block|{
throw|throw
name|result
operator|.
name|ia
throw|;
block|}
return|return;
block|}
specifier|public
name|void
name|mutateRowsTs
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|ArrayList
argument_list|<
name|BatchMutation
argument_list|>
name|rowBatches
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
block|{
name|send_mutateRowsTs
argument_list|(
name|tableName
argument_list|,
name|rowBatches
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
name|recv_mutateRowsTs
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|send_mutateRowsTs
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|ArrayList
argument_list|<
name|BatchMutation
argument_list|>
name|rowBatches
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"mutateRowsTs"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|mutateRowsTs_args
name|args
init|=
operator|new
name|mutateRowsTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|args
operator|.
name|rowBatches
operator|=
name|rowBatches
expr_stmt|;
name|args
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|recv_mutateRowsTs
parameter_list|()
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
name|mutateRowsTs_result
name|result
init|=
operator|new
name|mutateRowsTs_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|io
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|ia
condition|)
block|{
throw|throw
name|result
operator|.
name|ia
throw|;
block|}
return|return;
block|}
specifier|public
name|void
name|deleteAll
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|column
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
name|send_deleteAll
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|column
argument_list|)
expr_stmt|;
name|recv_deleteAll
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|send_deleteAll
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|column
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"deleteAll"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|deleteAll_args
name|args
init|=
operator|new
name|deleteAll_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|args
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|args
operator|.
name|column
operator|=
name|column
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|recv_deleteAll
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
name|deleteAll_result
name|result
init|=
operator|new
name|deleteAll_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|io
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
return|return;
block|}
specifier|public
name|void
name|deleteAllTs
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|column
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
name|send_deleteAllTs
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
name|recv_deleteAllTs
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|send_deleteAllTs
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|column
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"deleteAllTs"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|deleteAllTs_args
name|args
init|=
operator|new
name|deleteAllTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|args
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|args
operator|.
name|column
operator|=
name|column
expr_stmt|;
name|args
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|recv_deleteAllTs
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
name|deleteAllTs_result
name|result
init|=
operator|new
name|deleteAllTs_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|io
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
return|return;
block|}
specifier|public
name|void
name|deleteAllRow
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
name|send_deleteAllRow
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|recv_deleteAllRow
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|send_deleteAllRow
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"deleteAllRow"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|deleteAllRow_args
name|args
init|=
operator|new
name|deleteAllRow_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|args
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|recv_deleteAllRow
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
name|deleteAllRow_result
name|result
init|=
operator|new
name|deleteAllRow_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|io
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
return|return;
block|}
specifier|public
name|void
name|deleteAllRowTs
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
name|send_deleteAllRowTs
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
name|recv_deleteAllRowTs
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|send_deleteAllRowTs
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"deleteAllRowTs"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|deleteAllRowTs_args
name|args
init|=
operator|new
name|deleteAllRowTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|args
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|args
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|recv_deleteAllRowTs
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
name|deleteAllRowTs_result
name|result
init|=
operator|new
name|deleteAllRowTs_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|io
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
return|return;
block|}
specifier|public
name|int
name|scannerOpen
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|startRow
parameter_list|,
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
name|send_scannerOpen
argument_list|(
name|tableName
argument_list|,
name|startRow
argument_list|,
name|columns
argument_list|)
expr_stmt|;
return|return
name|recv_scannerOpen
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_scannerOpen
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|startRow
parameter_list|,
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"scannerOpen"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|scannerOpen_args
name|args
init|=
operator|new
name|scannerOpen_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|args
operator|.
name|startRow
operator|=
name|startRow
expr_stmt|;
name|args
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|recv_scannerOpen
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
name|scannerOpen_result
name|result
init|=
operator|new
name|scannerOpen_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|io
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"scannerOpen failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|int
name|scannerOpenWithStop
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|startRow
parameter_list|,
name|byte
index|[]
name|stopRow
parameter_list|,
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
name|send_scannerOpenWithStop
argument_list|(
name|tableName
argument_list|,
name|startRow
argument_list|,
name|stopRow
argument_list|,
name|columns
argument_list|)
expr_stmt|;
return|return
name|recv_scannerOpenWithStop
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_scannerOpenWithStop
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|startRow
parameter_list|,
name|byte
index|[]
name|stopRow
parameter_list|,
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"scannerOpenWithStop"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|scannerOpenWithStop_args
name|args
init|=
operator|new
name|scannerOpenWithStop_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|args
operator|.
name|startRow
operator|=
name|startRow
expr_stmt|;
name|args
operator|.
name|stopRow
operator|=
name|stopRow
expr_stmt|;
name|args
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|recv_scannerOpenWithStop
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
name|scannerOpenWithStop_result
name|result
init|=
operator|new
name|scannerOpenWithStop_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|io
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"scannerOpenWithStop failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|int
name|scannerOpenTs
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|startRow
parameter_list|,
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
name|send_scannerOpenTs
argument_list|(
name|tableName
argument_list|,
name|startRow
argument_list|,
name|columns
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
return|return
name|recv_scannerOpenTs
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_scannerOpenTs
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|startRow
parameter_list|,
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"scannerOpenTs"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|scannerOpenTs_args
name|args
init|=
operator|new
name|scannerOpenTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|args
operator|.
name|startRow
operator|=
name|startRow
expr_stmt|;
name|args
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
name|args
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|recv_scannerOpenTs
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
name|scannerOpenTs_result
name|result
init|=
operator|new
name|scannerOpenTs_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|io
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"scannerOpenTs failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|int
name|scannerOpenWithStopTs
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|startRow
parameter_list|,
name|byte
index|[]
name|stopRow
parameter_list|,
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
name|send_scannerOpenWithStopTs
argument_list|(
name|tableName
argument_list|,
name|startRow
argument_list|,
name|stopRow
argument_list|,
name|columns
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
return|return
name|recv_scannerOpenWithStopTs
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_scannerOpenWithStopTs
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|startRow
parameter_list|,
name|byte
index|[]
name|stopRow
parameter_list|,
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"scannerOpenWithStopTs"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|scannerOpenWithStopTs_args
name|args
init|=
operator|new
name|scannerOpenWithStopTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|args
operator|.
name|startRow
operator|=
name|startRow
expr_stmt|;
name|args
operator|.
name|stopRow
operator|=
name|stopRow
expr_stmt|;
name|args
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
name|args
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|recv_scannerOpenWithStopTs
parameter_list|()
throws|throws
name|IOError
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
name|scannerOpenWithStopTs_result
name|result
init|=
operator|new
name|scannerOpenWithStopTs_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|io
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"scannerOpenWithStopTs failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|ScanEntry
name|scannerGet
parameter_list|(
name|int
name|id
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|NotFound
throws|,
name|TException
block|{
name|send_scannerGet
argument_list|(
name|id
argument_list|)
expr_stmt|;
return|return
name|recv_scannerGet
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_scannerGet
parameter_list|(
name|int
name|id
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"scannerGet"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|scannerGet_args
name|args
init|=
operator|new
name|scannerGet_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|ScanEntry
name|recv_scannerGet
parameter_list|()
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|NotFound
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
name|scannerGet_result
name|result
init|=
operator|new
name|scannerGet_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|io
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|ia
condition|)
block|{
throw|throw
name|result
operator|.
name|ia
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|nf
condition|)
block|{
throw|throw
name|result
operator|.
name|nf
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"scannerGet failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|scannerClose
parameter_list|(
name|int
name|id
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
block|{
name|send_scannerClose
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|recv_scannerClose
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|send_scannerClose
parameter_list|(
name|int
name|id
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"scannerClose"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|scannerClose_args
name|args
init|=
operator|new
name|scannerClose_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|recv_scannerClose
parameter_list|()
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
name|scannerClose_result
name|result
init|=
operator|new
name|scannerClose_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|io
condition|)
block|{
throw|throw
name|result
operator|.
name|io
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|ia
condition|)
block|{
throw|throw
name|result
operator|.
name|ia
throw|;
block|}
return|return;
block|}
block|}
specifier|public
specifier|static
class|class
name|Processor
implements|implements
name|TProcessor
block|{
specifier|public
name|Processor
parameter_list|(
name|Iface
name|iface
parameter_list|)
block|{
name|iface_
operator|=
name|iface
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"getTableNames"
argument_list|,
operator|new
name|getTableNames
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"getColumnDescriptors"
argument_list|,
operator|new
name|getColumnDescriptors
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"getTableRegions"
argument_list|,
operator|new
name|getTableRegions
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"createTable"
argument_list|,
operator|new
name|createTable
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"deleteTable"
argument_list|,
operator|new
name|deleteTable
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"get"
argument_list|,
operator|new
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"getVer"
argument_list|,
operator|new
name|getVer
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"getVerTs"
argument_list|,
operator|new
name|getVerTs
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"getRow"
argument_list|,
operator|new
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"getRowTs"
argument_list|,
operator|new
name|getRowTs
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"put"
argument_list|,
operator|new
name|put
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"mutateRow"
argument_list|,
operator|new
name|mutateRow
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"mutateRowTs"
argument_list|,
operator|new
name|mutateRowTs
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"mutateRows"
argument_list|,
operator|new
name|mutateRows
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"mutateRowsTs"
argument_list|,
operator|new
name|mutateRowsTs
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"deleteAll"
argument_list|,
operator|new
name|deleteAll
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"deleteAllTs"
argument_list|,
operator|new
name|deleteAllTs
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"deleteAllRow"
argument_list|,
operator|new
name|deleteAllRow
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"deleteAllRowTs"
argument_list|,
operator|new
name|deleteAllRowTs
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"scannerOpen"
argument_list|,
operator|new
name|scannerOpen
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"scannerOpenWithStop"
argument_list|,
operator|new
name|scannerOpenWithStop
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"scannerOpenTs"
argument_list|,
operator|new
name|scannerOpenTs
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"scannerOpenWithStopTs"
argument_list|,
operator|new
name|scannerOpenWithStopTs
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"scannerGet"
argument_list|,
operator|new
name|scannerGet
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"scannerClose"
argument_list|,
operator|new
name|scannerClose
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
interface|interface
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
function_decl|;
block|}
specifier|private
name|Iface
name|iface_
decl_stmt|;
specifier|protected
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|ProcessFunction
argument_list|>
name|processMap_
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ProcessFunction
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|boolean
name|process
parameter_list|(
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
name|ProcessFunction
name|fn
init|=
name|processMap_
operator|.
name|get
argument_list|(
name|msg
operator|.
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|fn
operator|==
literal|null
condition|)
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|UNKNOWN_METHOD
argument_list|,
literal|"Invalid method name: '"
operator|+
name|msg
operator|.
name|name
operator|+
literal|"'"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
name|msg
operator|.
name|name
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|msg
operator|.
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
name|fn
operator|.
name|process
argument_list|(
name|msg
operator|.
name|seqid
argument_list|,
name|iprot
argument_list|,
name|oprot
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
class|class
name|getTableNames
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|getTableNames_args
name|args
init|=
operator|new
name|getTableNames_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|getTableNames_result
name|result
init|=
operator|new
name|getTableNames_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|getTableNames
argument_list|()
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getTableNames"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|getColumnDescriptors
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|getColumnDescriptors_args
name|args
init|=
operator|new
name|getColumnDescriptors_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|getColumnDescriptors_result
name|result
init|=
operator|new
name|getColumnDescriptors_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|getColumnDescriptors
argument_list|(
name|args
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getColumnDescriptors"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|getTableRegions
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|getTableRegions_args
name|args
init|=
operator|new
name|getTableRegions_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|getTableRegions_result
name|result
init|=
operator|new
name|getTableRegions_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|getTableRegions
argument_list|(
name|args
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getTableRegions"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|createTable
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|createTable_args
name|args
init|=
operator|new
name|createTable_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|createTable_result
name|result
init|=
operator|new
name|createTable_result
argument_list|()
decl_stmt|;
try|try
block|{
name|iface_
operator|.
name|createTable
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|columnFamilies
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|result
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|ia
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AlreadyExists
name|exist
parameter_list|)
block|{
name|result
operator|.
name|exist
operator|=
name|exist
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|exist
operator|=
literal|true
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"createTable"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|deleteTable
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|deleteTable_args
name|args
init|=
operator|new
name|deleteTable_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|deleteTable_result
name|result
init|=
operator|new
name|deleteTable_result
argument_list|()
decl_stmt|;
try|try
block|{
name|iface_
operator|.
name|deleteTable
argument_list|(
name|args
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotFound
name|nf
parameter_list|)
block|{
name|result
operator|.
name|nf
operator|=
name|nf
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|nf
operator|=
literal|true
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"deleteTable"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|get
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|get_args
name|args
init|=
operator|new
name|get_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|get_result
name|result
init|=
operator|new
name|get_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|get
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|row
argument_list|,
name|args
operator|.
name|column
argument_list|)
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotFound
name|nf
parameter_list|)
block|{
name|result
operator|.
name|nf
operator|=
name|nf
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|nf
operator|=
literal|true
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|getVer
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|getVer_args
name|args
init|=
operator|new
name|getVer_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|getVer_result
name|result
init|=
operator|new
name|getVer_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|getVer
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|row
argument_list|,
name|args
operator|.
name|column
argument_list|,
name|args
operator|.
name|numVersions
argument_list|)
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotFound
name|nf
parameter_list|)
block|{
name|result
operator|.
name|nf
operator|=
name|nf
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|nf
operator|=
literal|true
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getVer"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|getVerTs
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|getVerTs_args
name|args
init|=
operator|new
name|getVerTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|getVerTs_result
name|result
init|=
operator|new
name|getVerTs_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|getVerTs
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|row
argument_list|,
name|args
operator|.
name|column
argument_list|,
name|args
operator|.
name|timestamp
argument_list|,
name|args
operator|.
name|numVersions
argument_list|)
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotFound
name|nf
parameter_list|)
block|{
name|result
operator|.
name|nf
operator|=
name|nf
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|nf
operator|=
literal|true
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getVerTs"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|getRow
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|getRow_args
name|args
init|=
operator|new
name|getRow_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|getRow_result
name|result
init|=
operator|new
name|getRow_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|getRow
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|row
argument_list|)
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getRow"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|getRowTs
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|getRowTs_args
name|args
init|=
operator|new
name|getRowTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|getRowTs_result
name|result
init|=
operator|new
name|getRowTs_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|getRowTs
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|row
argument_list|,
name|args
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"getRowTs"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|put
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|put_args
name|args
init|=
operator|new
name|put_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|put_result
name|result
init|=
operator|new
name|put_result
argument_list|()
decl_stmt|;
try|try
block|{
name|iface_
operator|.
name|put
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|row
argument_list|,
name|args
operator|.
name|column
argument_list|,
name|args
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|result
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|ia
operator|=
literal|true
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"put"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|mutateRow
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|mutateRow_args
name|args
init|=
operator|new
name|mutateRow_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|mutateRow_result
name|result
init|=
operator|new
name|mutateRow_result
argument_list|()
decl_stmt|;
try|try
block|{
name|iface_
operator|.
name|mutateRow
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|row
argument_list|,
name|args
operator|.
name|mutations
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|result
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|ia
operator|=
literal|true
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"mutateRow"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|mutateRowTs
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|mutateRowTs_args
name|args
init|=
operator|new
name|mutateRowTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|mutateRowTs_result
name|result
init|=
operator|new
name|mutateRowTs_result
argument_list|()
decl_stmt|;
try|try
block|{
name|iface_
operator|.
name|mutateRowTs
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|row
argument_list|,
name|args
operator|.
name|mutations
argument_list|,
name|args
operator|.
name|timestamp
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|result
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|ia
operator|=
literal|true
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"mutateRowTs"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|mutateRows
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|mutateRows_args
name|args
init|=
operator|new
name|mutateRows_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|mutateRows_result
name|result
init|=
operator|new
name|mutateRows_result
argument_list|()
decl_stmt|;
try|try
block|{
name|iface_
operator|.
name|mutateRows
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|rowBatches
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|result
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|ia
operator|=
literal|true
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"mutateRows"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|mutateRowsTs
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|mutateRowsTs_args
name|args
init|=
operator|new
name|mutateRowsTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|mutateRowsTs_result
name|result
init|=
operator|new
name|mutateRowsTs_result
argument_list|()
decl_stmt|;
try|try
block|{
name|iface_
operator|.
name|mutateRowsTs
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|rowBatches
argument_list|,
name|args
operator|.
name|timestamp
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|result
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|ia
operator|=
literal|true
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"mutateRowsTs"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|deleteAll
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|deleteAll_args
name|args
init|=
operator|new
name|deleteAll_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|deleteAll_result
name|result
init|=
operator|new
name|deleteAll_result
argument_list|()
decl_stmt|;
try|try
block|{
name|iface_
operator|.
name|deleteAll
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|row
argument_list|,
name|args
operator|.
name|column
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"deleteAll"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|deleteAllTs
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|deleteAllTs_args
name|args
init|=
operator|new
name|deleteAllTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|deleteAllTs_result
name|result
init|=
operator|new
name|deleteAllTs_result
argument_list|()
decl_stmt|;
try|try
block|{
name|iface_
operator|.
name|deleteAllTs
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|row
argument_list|,
name|args
operator|.
name|column
argument_list|,
name|args
operator|.
name|timestamp
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"deleteAllTs"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|deleteAllRow
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|deleteAllRow_args
name|args
init|=
operator|new
name|deleteAllRow_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|deleteAllRow_result
name|result
init|=
operator|new
name|deleteAllRow_result
argument_list|()
decl_stmt|;
try|try
block|{
name|iface_
operator|.
name|deleteAllRow
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|row
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"deleteAllRow"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|deleteAllRowTs
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|deleteAllRowTs_args
name|args
init|=
operator|new
name|deleteAllRowTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|deleteAllRowTs_result
name|result
init|=
operator|new
name|deleteAllRowTs_result
argument_list|()
decl_stmt|;
try|try
block|{
name|iface_
operator|.
name|deleteAllRowTs
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|row
argument_list|,
name|args
operator|.
name|timestamp
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"deleteAllRowTs"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|scannerOpen
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|scannerOpen_args
name|args
init|=
operator|new
name|scannerOpen_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|scannerOpen_result
name|result
init|=
operator|new
name|scannerOpen_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|scannerOpen
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|startRow
argument_list|,
name|args
operator|.
name|columns
argument_list|)
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"scannerOpen"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|scannerOpenWithStop
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|scannerOpenWithStop_args
name|args
init|=
operator|new
name|scannerOpenWithStop_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|scannerOpenWithStop_result
name|result
init|=
operator|new
name|scannerOpenWithStop_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|scannerOpenWithStop
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|startRow
argument_list|,
name|args
operator|.
name|stopRow
argument_list|,
name|args
operator|.
name|columns
argument_list|)
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"scannerOpenWithStop"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|scannerOpenTs
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|scannerOpenTs_args
name|args
init|=
operator|new
name|scannerOpenTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|scannerOpenTs_result
name|result
init|=
operator|new
name|scannerOpenTs_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|scannerOpenTs
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|startRow
argument_list|,
name|args
operator|.
name|columns
argument_list|,
name|args
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"scannerOpenTs"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|scannerOpenWithStopTs
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|scannerOpenWithStopTs_args
name|args
init|=
operator|new
name|scannerOpenWithStopTs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|scannerOpenWithStopTs_result
name|result
init|=
operator|new
name|scannerOpenWithStopTs_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|scannerOpenWithStopTs
argument_list|(
name|args
operator|.
name|tableName
argument_list|,
name|args
operator|.
name|startRow
argument_list|,
name|args
operator|.
name|stopRow
argument_list|,
name|args
operator|.
name|columns
argument_list|,
name|args
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"scannerOpenWithStopTs"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|scannerGet
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|scannerGet_args
name|args
init|=
operator|new
name|scannerGet_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|scannerGet_result
name|result
init|=
operator|new
name|scannerGet_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|scannerGet
argument_list|(
name|args
operator|.
name|id
argument_list|)
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|result
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|ia
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotFound
name|nf
parameter_list|)
block|{
name|result
operator|.
name|nf
operator|=
name|nf
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|nf
operator|=
literal|true
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"scannerGet"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|scannerClose
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|scannerClose_args
name|args
init|=
operator|new
name|scannerClose_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|scannerClose_result
name|result
init|=
operator|new
name|scannerClose_result
argument_list|()
decl_stmt|;
try|try
block|{
name|iface_
operator|.
name|scannerClose
argument_list|(
name|args
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|result
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|result
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|ia
operator|=
literal|true
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"scannerClose"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|getTableNames_args
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|getTableNames_args
parameter_list|()
block|{     }
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"getTableNames_args"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getTableNames_args("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|getTableNames_result
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|success
decl_stmt|;
specifier|public
name|IOError
name|io
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
block|{
specifier|public
name|boolean
name|success
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|io
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|getTableNames_result
parameter_list|()
block|{     }
specifier|public
name|getTableNames_result
parameter_list|(
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|success
parameter_list|,
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list9
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|_list9
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i10
init|=
literal|0
init|;
name|_i10
operator|<
name|_list9
operator|.
name|size
condition|;
operator|++
name|_i10
control|)
block|{
name|byte
index|[]
name|_elem11
init|=
literal|null
decl_stmt|;
name|_elem11
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem11
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"getTableNames_result"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"success"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|LIST
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|0
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|byte
index|[]
name|_iter12
range|:
name|this
operator|.
name|success
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter12
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|io
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"io"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getTableNames_result("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",io:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|getColumnDescriptors_args
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|byte
index|[]
name|tableName
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
block|{
specifier|public
name|boolean
name|tableName
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|getColumnDescriptors_args
parameter_list|()
block|{     }
specifier|public
name|getColumnDescriptors_args
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tableName
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tableName
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"getColumnDescriptors_args"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"tableName"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getColumnDescriptors_args("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|getColumnDescriptors_result
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|AbstractMap
argument_list|<
name|byte
index|[]
argument_list|,
name|ColumnDescriptor
argument_list|>
name|success
decl_stmt|;
specifier|public
name|IOError
name|io
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
block|{
specifier|public
name|boolean
name|success
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|io
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|getColumnDescriptors_result
parameter_list|()
block|{     }
specifier|public
name|getColumnDescriptors_result
parameter_list|(
name|AbstractMap
argument_list|<
name|byte
index|[]
argument_list|,
name|ColumnDescriptor
argument_list|>
name|success
parameter_list|,
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|TMap
name|_map13
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|success
operator|=
operator|new
name|HashMap
argument_list|<
name|byte
index|[]
argument_list|,
name|ColumnDescriptor
argument_list|>
argument_list|(
literal|2
operator|*
name|_map13
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i14
init|=
literal|0
init|;
name|_i14
operator|<
name|_map13
operator|.
name|size
condition|;
operator|++
name|_i14
control|)
block|{
name|byte
index|[]
name|_key15
decl_stmt|;
name|ColumnDescriptor
name|_val16
decl_stmt|;
name|_key15
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val16
operator|=
operator|new
name|ColumnDescriptor
argument_list|()
expr_stmt|;
name|_val16
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|put
argument_list|(
name|_key15
argument_list|,
name|_val16
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"getColumnDescriptors_result"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"success"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|MAP
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|0
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|TMap
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|byte
index|[]
name|_iter17
range|:
name|this
operator|.
name|success
operator|.
name|keySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter17
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|get
argument_list|(
name|_iter17
argument_list|)
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|io
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"io"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getColumnDescriptors_result("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",io:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|getTableRegions_args
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|byte
index|[]
name|tableName
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
block|{
specifier|public
name|boolean
name|tableName
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|getTableRegions_args
parameter_list|()
block|{     }
specifier|public
name|getTableRegions_args
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tableName
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tableName
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"getTableRegions_args"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"tableName"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getTableRegions_args("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|getTableRegions_result
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|ArrayList
argument_list|<
name|RegionDescriptor
argument_list|>
name|success
decl_stmt|;
specifier|public
name|IOError
name|io
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
block|{
specifier|public
name|boolean
name|success
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|io
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|getTableRegions_result
parameter_list|()
block|{     }
specifier|public
name|getTableRegions_result
parameter_list|(
name|ArrayList
argument_list|<
name|RegionDescriptor
argument_list|>
name|success
parameter_list|,
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list18
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|RegionDescriptor
argument_list|>
argument_list|(
name|_list18
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i19
init|=
literal|0
init|;
name|_i19
operator|<
name|_list18
operator|.
name|size
condition|;
operator|++
name|_i19
control|)
block|{
name|RegionDescriptor
name|_elem20
init|=
operator|new
name|RegionDescriptor
argument_list|()
decl_stmt|;
name|_elem20
operator|=
operator|new
name|RegionDescriptor
argument_list|()
expr_stmt|;
name|_elem20
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem20
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"getTableRegions_result"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"success"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|LIST
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|0
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|RegionDescriptor
name|_iter21
range|:
name|this
operator|.
name|success
control|)
block|{
name|_iter21
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|io
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"io"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getTableRegions_result("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",io:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|createTable_args
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|byte
index|[]
name|tableName
decl_stmt|;
specifier|public
name|ArrayList
argument_list|<
name|ColumnDescriptor
argument_list|>
name|columnFamilies
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
block|{
specifier|public
name|boolean
name|tableName
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|columnFamilies
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|createTable_args
parameter_list|()
block|{     }
specifier|public
name|createTable_args
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|ArrayList
argument_list|<
name|ColumnDescriptor
argument_list|>
name|columnFamilies
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tableName
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|columnFamilies
operator|=
name|columnFamilies
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|columnFamilies
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tableName
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list22
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|columnFamilies
operator|=
operator|new
name|ArrayList
argument_list|<
name|ColumnDescriptor
argument_list|>
argument_list|(
name|_list22
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i23
init|=
literal|0
init|;
name|_i23
operator|<
name|_list22
operator|.
name|size
condition|;
operator|++
name|_i23
control|)
block|{
name|ColumnDescriptor
name|_elem24
init|=
operator|new
name|ColumnDescriptor
argument_list|()
decl_stmt|;
name|_elem24
operator|=
operator|new
name|ColumnDescriptor
argument_list|()
expr_stmt|;
name|_elem24
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|columnFamilies
operator|.
name|add
argument_list|(
name|_elem24
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|__isset
operator|.
name|columnFamilies
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"createTable_args"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"tableName"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|columnFamilies
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"columnFamilies"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|LIST
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|this
operator|.
name|columnFamilies
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ColumnDescriptor
name|_iter25
range|:
name|this
operator|.
name|columnFamilies
control|)
block|{
name|_iter25
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"createTable_args("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",columnFamilies:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|columnFamilies
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|createTable_result
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|IOError
name|io
decl_stmt|;
specifier|public
name|IllegalArgument
name|ia
decl_stmt|;
specifier|public
name|AlreadyExists
name|exist
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
block|{
specifier|public
name|boolean
name|io
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|ia
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|exist
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|createTable_result
parameter_list|()
block|{     }
specifier|public
name|createTable_result
parameter_list|(
name|IOError
name|io
parameter_list|,
name|IllegalArgument
name|ia
parameter_list|,
name|AlreadyExists
name|exist
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|ia
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|exist
operator|=
name|exist
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|exist
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|ia
operator|=
operator|new
name|IllegalArgument
argument_list|()
expr_stmt|;
name|this
operator|.
name|ia
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|ia
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|exist
operator|=
operator|new
name|AlreadyExists
argument_list|()
expr_stmt|;
name|this
operator|.
name|exist
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|exist
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"createTable_result"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|io
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"io"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|ia
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|ia
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"ia"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|ia
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|exist
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|exist
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"exist"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|3
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|exist
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"createTable_result("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",ia:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|ia
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",exist:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|exist
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|deleteTable_args
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|byte
index|[]
name|tableName
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
block|{
specifier|public
name|boolean
name|tableName
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|deleteTable_args
parameter_list|()
block|{     }
specifier|public
name|deleteTable_args
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tableName
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tableName
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"deleteTable_args"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"tableName"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"deleteTable_args("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|deleteTable_result
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|IOError
name|io
decl_stmt|;
specifier|public
name|NotFound
name|nf
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
block|{
specifier|public
name|boolean
name|io
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|nf
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|deleteTable_result
parameter_list|()
block|{     }
specifier|public
name|deleteTable_result
parameter_list|(
name|IOError
name|io
parameter_list|,
name|NotFound
name|nf
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|nf
operator|=
name|nf
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|nf
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|nf
operator|=
operator|new
name|NotFound
argument_list|()
expr_stmt|;
name|this
operator|.
name|nf
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|nf
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"deleteTable_result"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|io
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"io"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|nf
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|nf
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"nf"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|nf
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"deleteTable_result("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",nf:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|nf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|get_args
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|byte
index|[]
name|tableName
decl_stmt|;
specifier|public
name|byte
index|[]
name|row
decl_stmt|;
specifier|public
name|byte
index|[]
name|column
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
block|{
specifier|public
name|boolean
name|tableName
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|row
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|column
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|get_args
parameter_list|()
block|{     }
specifier|public
name|get_args
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|column
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tableName
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|row
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|column
operator|=
name|column
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|column
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tableName
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|row
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|column
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|column
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_args"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"tableName"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|row
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"row"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|column
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"column"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|3
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|column
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_args("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",row:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",column:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|column
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|get_result
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|byte
index|[]
name|success
decl_stmt|;
specifier|public
name|IOError
name|io
decl_stmt|;
specifier|public
name|NotFound
name|nf
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
block|{
specifier|public
name|boolean
name|success
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|io
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|nf
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|get_result
parameter_list|()
block|{     }
specifier|public
name|get_result
parameter_list|(
name|byte
index|[]
name|success
parameter_list|,
name|IOError
name|io
parameter_list|,
name|NotFound
name|nf
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|nf
operator|=
name|nf
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|nf
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|success
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|nf
operator|=
operator|new
name|NotFound
argument_list|()
expr_stmt|;
name|this
operator|.
name|nf
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|nf
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_result"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"success"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|0
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|io
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"io"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|nf
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|nf
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"nf"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|nf
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_result("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",io:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",nf:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|nf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|getVer_args
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|byte
index|[]
name|tableName
decl_stmt|;
specifier|public
name|byte
index|[]
name|row
decl_stmt|;
specifier|public
name|byte
index|[]
name|column
decl_stmt|;
specifier|public
name|int
name|numVersions
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
block|{
specifier|public
name|boolean
name|tableName
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|row
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|column
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|numVersions
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|getVer_args
parameter_list|()
block|{     }
specifier|public
name|getVer_args
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|column
parameter_list|,
name|int
name|numVersions
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tableName
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|row
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|column
operator|=
name|column
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|column
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|numVersions
operator|=
name|numVersions
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|numVersions
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tableName
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|row
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|column
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|column
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I32
condition|)
block|{
name|this
operator|.
name|numVersions
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|numVersions
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"getVer_args"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"tableName"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|row
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"row"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|column
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"column"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|3
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|column
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|field
operator|.
name|name
operator|=
literal|"numVersions"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|I32
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|4
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|this
operator|.
name|numVersions
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getVer_args("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",row:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",column:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|column
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",numVersions:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|numVersions
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|getVer_result
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|success
decl_stmt|;
specifier|public
name|IOError
name|io
decl_stmt|;
specifier|public
name|NotFound
name|nf
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
block|{
specifier|public
name|boolean
name|success
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|io
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|nf
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|getVer_result
parameter_list|()
block|{     }
specifier|public
name|getVer_result
parameter_list|(
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|success
parameter_list|,
name|IOError
name|io
parameter_list|,
name|NotFound
name|nf
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|nf
operator|=
name|nf
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|nf
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list26
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|_list26
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i27
init|=
literal|0
init|;
name|_i27
operator|<
name|_list26
operator|.
name|size
condition|;
operator|++
name|_i27
control|)
block|{
name|byte
index|[]
name|_elem28
init|=
literal|null
decl_stmt|;
name|_elem28
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem28
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|nf
operator|=
operator|new
name|NotFound
argument_list|()
expr_stmt|;
name|this
operator|.
name|nf
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|nf
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"getVer_result"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"success"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|LIST
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|0
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|byte
index|[]
name|_iter29
range|:
name|this
operator|.
name|success
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter29
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|io
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"io"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|nf
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|nf
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"nf"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|nf
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getVer_result("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",io:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",nf:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|nf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|getVerTs_args
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|byte
index|[]
name|tableName
decl_stmt|;
specifier|public
name|byte
index|[]
name|row
decl_stmt|;
specifier|public
name|byte
index|[]
name|column
decl_stmt|;
specifier|public
name|long
name|timestamp
decl_stmt|;
specifier|public
name|int
name|numVersions
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
block|{
specifier|public
name|boolean
name|tableName
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|row
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|column
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|timestamp
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|numVersions
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|getVerTs_args
parameter_list|()
block|{     }
specifier|public
name|getVerTs_args
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|column
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|int
name|numVersions
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tableName
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|row
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|column
operator|=
name|column
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|column
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|timestamp
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|numVersions
operator|=
name|numVersions
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|numVersions
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tableName
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|row
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|column
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|column
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I64
condition|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|timestamp
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|5
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I32
condition|)
block|{
name|this
operator|.
name|numVersions
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|numVersions
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"getVerTs_args"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"tableName"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|row
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"row"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|column
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"column"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|3
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|column
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|field
operator|.
name|name
operator|=
literal|"timestamp"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|I64
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|4
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI64
argument_list|(
name|this
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|field
operator|.
name|name
operator|=
literal|"numVersions"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|I32
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|5
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|this
operator|.
name|numVersions
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getVerTs_args("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",row:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",column:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|column
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",timestamp:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",numVersions:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|numVersions
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|getVerTs_result
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|success
decl_stmt|;
specifier|public
name|IOError
name|io
decl_stmt|;
specifier|public
name|NotFound
name|nf
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
block|{
specifier|public
name|boolean
name|success
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|io
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|nf
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|getVerTs_result
parameter_list|()
block|{     }
specifier|public
name|getVerTs_result
parameter_list|(
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|success
parameter_list|,
name|IOError
name|io
parameter_list|,
name|NotFound
name|nf
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|nf
operator|=
name|nf
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|nf
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list30
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|_list30
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i31
init|=
literal|0
init|;
name|_i31
operator|<
name|_list30
operator|.
name|size
condition|;
operator|++
name|_i31
control|)
block|{
name|byte
index|[]
name|_elem32
init|=
literal|null
decl_stmt|;
name|_elem32
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem32
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|nf
operator|=
operator|new
name|NotFound
argument_list|()
expr_stmt|;
name|this
operator|.
name|nf
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|nf
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"getVerTs_result"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"success"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|LIST
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|0
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|byte
index|[]
name|_iter33
range|:
name|this
operator|.
name|success
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter33
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|io
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"io"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|nf
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|nf
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"nf"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|nf
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getVerTs_result("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",io:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",nf:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|nf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|getRow_args
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|byte
index|[]
name|tableName
decl_stmt|;
specifier|public
name|byte
index|[]
name|row
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
block|{
specifier|public
name|boolean
name|tableName
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|row
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|getRow_args
parameter_list|()
block|{     }
specifier|public
name|getRow_args
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tableName
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|row
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tableName
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|row
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"getRow_args"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"tableName"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|row
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"row"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getRow_args("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",row:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|getRow_result
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|AbstractMap
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|success
decl_stmt|;
specifier|public
name|IOError
name|io
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
block|{
specifier|public
name|boolean
name|success
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|io
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|getRow_result
parameter_list|()
block|{     }
specifier|public
name|getRow_result
parameter_list|(
name|AbstractMap
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|success
parameter_list|,
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|TMap
name|_map34
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|success
operator|=
operator|new
name|HashMap
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|(
literal|2
operator|*
name|_map34
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i35
init|=
literal|0
init|;
name|_i35
operator|<
name|_map34
operator|.
name|size
condition|;
operator|++
name|_i35
control|)
block|{
name|byte
index|[]
name|_key36
decl_stmt|;
name|byte
index|[]
name|_val37
decl_stmt|;
name|_key36
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val37
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|put
argument_list|(
name|_key36
argument_list|,
name|_val37
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"getRow_result"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"success"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|MAP
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|0
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|TMap
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|byte
index|[]
name|_iter38
range|:
name|this
operator|.
name|success
operator|.
name|keySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter38
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|success
operator|.
name|get
argument_list|(
name|_iter38
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|io
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"io"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getRow_result("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",io:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|getRowTs_args
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|byte
index|[]
name|tableName
decl_stmt|;
specifier|public
name|byte
index|[]
name|row
decl_stmt|;
specifier|public
name|long
name|timestamp
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
block|{
specifier|public
name|boolean
name|tableName
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|row
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|timestamp
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|getRowTs_args
parameter_list|()
block|{     }
specifier|public
name|getRowTs_args
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|long
name|timestamp
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tableName
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|row
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|timestamp
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tableName
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|row
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I64
condition|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|timestamp
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"getRowTs_args"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"tableName"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|row
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"row"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|field
operator|.
name|name
operator|=
literal|"timestamp"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|I64
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|3
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI64
argument_list|(
name|this
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getRowTs_args("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",row:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",timestamp:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|getRowTs_result
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|AbstractMap
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|success
decl_stmt|;
specifier|public
name|IOError
name|io
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
block|{
specifier|public
name|boolean
name|success
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|io
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|getRowTs_result
parameter_list|()
block|{     }
specifier|public
name|getRowTs_result
parameter_list|(
name|AbstractMap
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|success
parameter_list|,
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|TMap
name|_map39
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|success
operator|=
operator|new
name|HashMap
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|(
literal|2
operator|*
name|_map39
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i40
init|=
literal|0
init|;
name|_i40
operator|<
name|_map39
operator|.
name|size
condition|;
operator|++
name|_i40
control|)
block|{
name|byte
index|[]
name|_key41
decl_stmt|;
name|byte
index|[]
name|_val42
decl_stmt|;
name|_key41
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val42
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|put
argument_list|(
name|_key41
argument_list|,
name|_val42
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"getRowTs_result"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"success"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|MAP
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|0
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|TMap
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|byte
index|[]
name|_iter43
range|:
name|this
operator|.
name|success
operator|.
name|keySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter43
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|success
operator|.
name|get
argument_list|(
name|_iter43
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|io
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"io"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"getRowTs_result("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",io:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|put_args
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|byte
index|[]
name|tableName
decl_stmt|;
specifier|public
name|byte
index|[]
name|row
decl_stmt|;
specifier|public
name|byte
index|[]
name|column
decl_stmt|;
specifier|public
name|byte
index|[]
name|value
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
block|{
specifier|public
name|boolean
name|tableName
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|row
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|column
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|value
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|put_args
parameter_list|()
block|{     }
specifier|public
name|put_args
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|column
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tableName
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|row
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|column
operator|=
name|column
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|column
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|value
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tableName
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|row
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|column
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|column
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|value
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|value
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"put_args"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"tableName"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|row
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"row"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|column
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"column"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|3
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|column
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|value
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"value"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|4
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|value
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"put_args("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",row:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",column:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|column
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",value:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|value
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|put_result
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|IOError
name|io
decl_stmt|;
specifier|public
name|IllegalArgument
name|ia
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
block|{
specifier|public
name|boolean
name|io
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|ia
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|put_result
parameter_list|()
block|{     }
specifier|public
name|put_result
parameter_list|(
name|IOError
name|io
parameter_list|,
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|ia
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|ia
operator|=
operator|new
name|IllegalArgument
argument_list|()
expr_stmt|;
name|this
operator|.
name|ia
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|ia
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"put_result"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|io
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"io"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|ia
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|ia
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"ia"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|ia
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"put_result("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",ia:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|ia
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|mutateRow_args
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|byte
index|[]
name|tableName
decl_stmt|;
specifier|public
name|byte
index|[]
name|row
decl_stmt|;
specifier|public
name|ArrayList
argument_list|<
name|Mutation
argument_list|>
name|mutations
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
block|{
specifier|public
name|boolean
name|tableName
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|row
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|mutations
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|mutateRow_args
parameter_list|()
block|{     }
specifier|public
name|mutateRow_args
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|ArrayList
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tableName
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|row
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|mutations
operator|=
name|mutations
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|mutations
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tableName
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|row
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list44
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|mutations
operator|=
operator|new
name|ArrayList
argument_list|<
name|Mutation
argument_list|>
argument_list|(
name|_list44
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i45
init|=
literal|0
init|;
name|_i45
operator|<
name|_list44
operator|.
name|size
condition|;
operator|++
name|_i45
control|)
block|{
name|Mutation
name|_elem46
init|=
operator|new
name|Mutation
argument_list|()
decl_stmt|;
name|_elem46
operator|=
operator|new
name|Mutation
argument_list|()
expr_stmt|;
name|_elem46
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|mutations
operator|.
name|add
argument_list|(
name|_elem46
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|__isset
operator|.
name|mutations
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"mutateRow_args"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"tableName"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|row
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"row"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|mutations
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"mutations"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|LIST
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|3
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|this
operator|.
name|mutations
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Mutation
name|_iter47
range|:
name|this
operator|.
name|mutations
control|)
block|{
name|_iter47
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"mutateRow_args("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",row:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",mutations:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|mutations
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|mutateRow_result
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|IOError
name|io
decl_stmt|;
specifier|public
name|IllegalArgument
name|ia
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
block|{
specifier|public
name|boolean
name|io
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|ia
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|mutateRow_result
parameter_list|()
block|{     }
specifier|public
name|mutateRow_result
parameter_list|(
name|IOError
name|io
parameter_list|,
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|ia
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|ia
operator|=
operator|new
name|IllegalArgument
argument_list|()
expr_stmt|;
name|this
operator|.
name|ia
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|ia
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"mutateRow_result"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|io
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"io"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|ia
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|ia
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"ia"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|ia
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"mutateRow_result("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",ia:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|ia
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|mutateRowTs_args
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|byte
index|[]
name|tableName
decl_stmt|;
specifier|public
name|byte
index|[]
name|row
decl_stmt|;
specifier|public
name|ArrayList
argument_list|<
name|Mutation
argument_list|>
name|mutations
decl_stmt|;
specifier|public
name|long
name|timestamp
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
block|{
specifier|public
name|boolean
name|tableName
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|row
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|mutations
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|timestamp
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|mutateRowTs_args
parameter_list|()
block|{     }
specifier|public
name|mutateRowTs_args
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|ArrayList
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|,
name|long
name|timestamp
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tableName
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|row
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|mutations
operator|=
name|mutations
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|mutations
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|timestamp
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tableName
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|row
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list48
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|mutations
operator|=
operator|new
name|ArrayList
argument_list|<
name|Mutation
argument_list|>
argument_list|(
name|_list48
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i49
init|=
literal|0
init|;
name|_i49
operator|<
name|_list48
operator|.
name|size
condition|;
operator|++
name|_i49
control|)
block|{
name|Mutation
name|_elem50
init|=
operator|new
name|Mutation
argument_list|()
decl_stmt|;
name|_elem50
operator|=
operator|new
name|Mutation
argument_list|()
expr_stmt|;
name|_elem50
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|mutations
operator|.
name|add
argument_list|(
name|_elem50
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|__isset
operator|.
name|mutations
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I64
condition|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|timestamp
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"mutateRowTs_args"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"tableName"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|row
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"row"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|mutations
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"mutations"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|LIST
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|3
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|this
operator|.
name|mutations
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Mutation
name|_iter51
range|:
name|this
operator|.
name|mutations
control|)
block|{
name|_iter51
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|field
operator|.
name|name
operator|=
literal|"timestamp"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|I64
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|4
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI64
argument_list|(
name|this
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"mutateRowTs_args("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",row:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",mutations:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|mutations
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",timestamp:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|mutateRowTs_result
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|IOError
name|io
decl_stmt|;
specifier|public
name|IllegalArgument
name|ia
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
block|{
specifier|public
name|boolean
name|io
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|ia
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|mutateRowTs_result
parameter_list|()
block|{     }
specifier|public
name|mutateRowTs_result
parameter_list|(
name|IOError
name|io
parameter_list|,
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|ia
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|ia
operator|=
operator|new
name|IllegalArgument
argument_list|()
expr_stmt|;
name|this
operator|.
name|ia
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|ia
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"mutateRowTs_result"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|io
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"io"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|ia
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|ia
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"ia"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|ia
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"mutateRowTs_result("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",ia:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|ia
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|mutateRows_args
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|byte
index|[]
name|tableName
decl_stmt|;
specifier|public
name|ArrayList
argument_list|<
name|BatchMutation
argument_list|>
name|rowBatches
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
block|{
specifier|public
name|boolean
name|tableName
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|rowBatches
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|mutateRows_args
parameter_list|()
block|{     }
specifier|public
name|mutateRows_args
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|ArrayList
argument_list|<
name|BatchMutation
argument_list|>
name|rowBatches
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tableName
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|rowBatches
operator|=
name|rowBatches
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|rowBatches
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tableName
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list52
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|rowBatches
operator|=
operator|new
name|ArrayList
argument_list|<
name|BatchMutation
argument_list|>
argument_list|(
name|_list52
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i53
init|=
literal|0
init|;
name|_i53
operator|<
name|_list52
operator|.
name|size
condition|;
operator|++
name|_i53
control|)
block|{
name|BatchMutation
name|_elem54
init|=
operator|new
name|BatchMutation
argument_list|()
decl_stmt|;
name|_elem54
operator|=
operator|new
name|BatchMutation
argument_list|()
expr_stmt|;
name|_elem54
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|rowBatches
operator|.
name|add
argument_list|(
name|_elem54
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|__isset
operator|.
name|rowBatches
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"mutateRows_args"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"tableName"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|rowBatches
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"rowBatches"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|LIST
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|this
operator|.
name|rowBatches
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|BatchMutation
name|_iter55
range|:
name|this
operator|.
name|rowBatches
control|)
block|{
name|_iter55
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"mutateRows_args("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",rowBatches:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|rowBatches
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|mutateRows_result
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|IOError
name|io
decl_stmt|;
specifier|public
name|IllegalArgument
name|ia
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
block|{
specifier|public
name|boolean
name|io
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|ia
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|mutateRows_result
parameter_list|()
block|{     }
specifier|public
name|mutateRows_result
parameter_list|(
name|IOError
name|io
parameter_list|,
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|ia
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|ia
operator|=
operator|new
name|IllegalArgument
argument_list|()
expr_stmt|;
name|this
operator|.
name|ia
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|ia
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"mutateRows_result"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|io
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"io"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|ia
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|ia
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"ia"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|ia
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"mutateRows_result("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",ia:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|ia
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|mutateRowsTs_args
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|byte
index|[]
name|tableName
decl_stmt|;
specifier|public
name|ArrayList
argument_list|<
name|BatchMutation
argument_list|>
name|rowBatches
decl_stmt|;
specifier|public
name|long
name|timestamp
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
block|{
specifier|public
name|boolean
name|tableName
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|rowBatches
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|timestamp
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|mutateRowsTs_args
parameter_list|()
block|{     }
specifier|public
name|mutateRowsTs_args
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|ArrayList
argument_list|<
name|BatchMutation
argument_list|>
name|rowBatches
parameter_list|,
name|long
name|timestamp
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tableName
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|rowBatches
operator|=
name|rowBatches
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|rowBatches
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|timestamp
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tableName
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list56
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|rowBatches
operator|=
operator|new
name|ArrayList
argument_list|<
name|BatchMutation
argument_list|>
argument_list|(
name|_list56
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i57
init|=
literal|0
init|;
name|_i57
operator|<
name|_list56
operator|.
name|size
condition|;
operator|++
name|_i57
control|)
block|{
name|BatchMutation
name|_elem58
init|=
operator|new
name|BatchMutation
argument_list|()
decl_stmt|;
name|_elem58
operator|=
operator|new
name|BatchMutation
argument_list|()
expr_stmt|;
name|_elem58
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|rowBatches
operator|.
name|add
argument_list|(
name|_elem58
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|__isset
operator|.
name|rowBatches
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I64
condition|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|timestamp
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"mutateRowsTs_args"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"tableName"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|rowBatches
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"rowBatches"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|LIST
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|this
operator|.
name|rowBatches
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|BatchMutation
name|_iter59
range|:
name|this
operator|.
name|rowBatches
control|)
block|{
name|_iter59
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|field
operator|.
name|name
operator|=
literal|"timestamp"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|I64
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|3
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI64
argument_list|(
name|this
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"mutateRowsTs_args("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",rowBatches:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|rowBatches
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",timestamp:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|mutateRowsTs_result
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|IOError
name|io
decl_stmt|;
specifier|public
name|IllegalArgument
name|ia
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
block|{
specifier|public
name|boolean
name|io
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|ia
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|mutateRowsTs_result
parameter_list|()
block|{     }
specifier|public
name|mutateRowsTs_result
parameter_list|(
name|IOError
name|io
parameter_list|,
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|ia
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|ia
operator|=
operator|new
name|IllegalArgument
argument_list|()
expr_stmt|;
name|this
operator|.
name|ia
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|ia
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"mutateRowsTs_result"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|io
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"io"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|ia
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|ia
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"ia"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|ia
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"mutateRowsTs_result("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",ia:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|ia
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|deleteAll_args
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|byte
index|[]
name|tableName
decl_stmt|;
specifier|public
name|byte
index|[]
name|row
decl_stmt|;
specifier|public
name|byte
index|[]
name|column
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
block|{
specifier|public
name|boolean
name|tableName
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|row
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|column
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|deleteAll_args
parameter_list|()
block|{     }
specifier|public
name|deleteAll_args
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|column
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tableName
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|row
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|column
operator|=
name|column
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|column
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tableName
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|row
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|column
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|column
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"deleteAll_args"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"tableName"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|row
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"row"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|column
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"column"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|3
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|column
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"deleteAll_args("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",row:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",column:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|column
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|deleteAll_result
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|IOError
name|io
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
block|{
specifier|public
name|boolean
name|io
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|deleteAll_result
parameter_list|()
block|{     }
specifier|public
name|deleteAll_result
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"deleteAll_result"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|io
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"io"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"deleteAll_result("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|deleteAllTs_args
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|byte
index|[]
name|tableName
decl_stmt|;
specifier|public
name|byte
index|[]
name|row
decl_stmt|;
specifier|public
name|byte
index|[]
name|column
decl_stmt|;
specifier|public
name|long
name|timestamp
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
block|{
specifier|public
name|boolean
name|tableName
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|row
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|column
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|timestamp
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|deleteAllTs_args
parameter_list|()
block|{     }
specifier|public
name|deleteAllTs_args
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|column
parameter_list|,
name|long
name|timestamp
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tableName
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|row
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|column
operator|=
name|column
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|column
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|timestamp
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tableName
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|row
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|column
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|column
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I64
condition|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|timestamp
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"deleteAllTs_args"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"tableName"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|row
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"row"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|column
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"column"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|3
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|column
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|field
operator|.
name|name
operator|=
literal|"timestamp"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|I64
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|4
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI64
argument_list|(
name|this
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"deleteAllTs_args("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",row:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",column:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|column
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",timestamp:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|deleteAllTs_result
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|IOError
name|io
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
block|{
specifier|public
name|boolean
name|io
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|deleteAllTs_result
parameter_list|()
block|{     }
specifier|public
name|deleteAllTs_result
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"deleteAllTs_result"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|io
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"io"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"deleteAllTs_result("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|deleteAllRow_args
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|byte
index|[]
name|tableName
decl_stmt|;
specifier|public
name|byte
index|[]
name|row
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
block|{
specifier|public
name|boolean
name|tableName
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|row
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|deleteAllRow_args
parameter_list|()
block|{     }
specifier|public
name|deleteAllRow_args
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tableName
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|row
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tableName
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|row
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"deleteAllRow_args"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"tableName"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|row
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"row"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"deleteAllRow_args("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",row:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|deleteAllRow_result
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|IOError
name|io
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
block|{
specifier|public
name|boolean
name|io
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|deleteAllRow_result
parameter_list|()
block|{     }
specifier|public
name|deleteAllRow_result
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"deleteAllRow_result"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|io
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"io"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"deleteAllRow_result("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|deleteAllRowTs_args
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|byte
index|[]
name|tableName
decl_stmt|;
specifier|public
name|byte
index|[]
name|row
decl_stmt|;
specifier|public
name|long
name|timestamp
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
block|{
specifier|public
name|boolean
name|tableName
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|row
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|timestamp
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|deleteAllRowTs_args
parameter_list|()
block|{     }
specifier|public
name|deleteAllRowTs_args
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|long
name|timestamp
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tableName
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|row
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|timestamp
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tableName
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|row
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I64
condition|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|timestamp
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"deleteAllRowTs_args"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"tableName"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|row
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"row"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|field
operator|.
name|name
operator|=
literal|"timestamp"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|I64
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|3
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI64
argument_list|(
name|this
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"deleteAllRowTs_args("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",row:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|row
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",timestamp:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|deleteAllRowTs_result
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|IOError
name|io
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
block|{
specifier|public
name|boolean
name|io
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|deleteAllRowTs_result
parameter_list|()
block|{     }
specifier|public
name|deleteAllRowTs_result
parameter_list|(
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"deleteAllRowTs_result"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|io
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"io"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"deleteAllRowTs_result("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|scannerOpen_args
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|byte
index|[]
name|tableName
decl_stmt|;
specifier|public
name|byte
index|[]
name|startRow
decl_stmt|;
specifier|public
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
block|{
specifier|public
name|boolean
name|tableName
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|startRow
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|columns
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|scannerOpen_args
parameter_list|()
block|{     }
specifier|public
name|scannerOpen_args
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|startRow
parameter_list|,
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tableName
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|startRow
operator|=
name|startRow
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|startRow
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|columns
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tableName
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|startRow
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|startRow
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list60
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|_list60
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i61
init|=
literal|0
init|;
name|_i61
operator|<
name|_list60
operator|.
name|size
condition|;
operator|++
name|_i61
control|)
block|{
name|byte
index|[]
name|_elem62
init|=
literal|null
decl_stmt|;
name|_elem62
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|columns
operator|.
name|add
argument_list|(
name|_elem62
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|__isset
operator|.
name|columns
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"scannerOpen_args"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"tableName"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|startRow
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"startRow"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|startRow
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|columns
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"columns"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|LIST
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|3
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|columns
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|byte
index|[]
name|_iter63
range|:
name|this
operator|.
name|columns
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter63
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"scannerOpen_args("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",startRow:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|startRow
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",columns:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|columns
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|scannerOpen_result
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|int
name|success
decl_stmt|;
specifier|public
name|IOError
name|io
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
block|{
specifier|public
name|boolean
name|success
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|io
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|scannerOpen_result
parameter_list|()
block|{     }
specifier|public
name|scannerOpen_result
parameter_list|(
name|int
name|success
parameter_list|,
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I32
condition|)
block|{
name|this
operator|.
name|success
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"scannerOpen_result"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"success"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|I32
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|0
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|io
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"io"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"scannerOpen_result("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",io:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|scannerOpenWithStop_args
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|byte
index|[]
name|tableName
decl_stmt|;
specifier|public
name|byte
index|[]
name|startRow
decl_stmt|;
specifier|public
name|byte
index|[]
name|stopRow
decl_stmt|;
specifier|public
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
block|{
specifier|public
name|boolean
name|tableName
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|startRow
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|stopRow
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|columns
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|scannerOpenWithStop_args
parameter_list|()
block|{     }
specifier|public
name|scannerOpenWithStop_args
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|startRow
parameter_list|,
name|byte
index|[]
name|stopRow
parameter_list|,
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tableName
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|startRow
operator|=
name|startRow
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|startRow
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|stopRow
operator|=
name|stopRow
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|stopRow
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|columns
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tableName
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|startRow
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|startRow
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|stopRow
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|stopRow
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list64
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|_list64
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i65
init|=
literal|0
init|;
name|_i65
operator|<
name|_list64
operator|.
name|size
condition|;
operator|++
name|_i65
control|)
block|{
name|byte
index|[]
name|_elem66
init|=
literal|null
decl_stmt|;
name|_elem66
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|columns
operator|.
name|add
argument_list|(
name|_elem66
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|__isset
operator|.
name|columns
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"scannerOpenWithStop_args"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"tableName"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|startRow
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"startRow"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|startRow
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|stopRow
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"stopRow"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|3
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|stopRow
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|columns
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"columns"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|LIST
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|4
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|columns
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|byte
index|[]
name|_iter67
range|:
name|this
operator|.
name|columns
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter67
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"scannerOpenWithStop_args("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",startRow:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|startRow
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",stopRow:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|stopRow
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",columns:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|columns
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|scannerOpenWithStop_result
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|int
name|success
decl_stmt|;
specifier|public
name|IOError
name|io
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
block|{
specifier|public
name|boolean
name|success
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|io
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|scannerOpenWithStop_result
parameter_list|()
block|{     }
specifier|public
name|scannerOpenWithStop_result
parameter_list|(
name|int
name|success
parameter_list|,
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I32
condition|)
block|{
name|this
operator|.
name|success
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"scannerOpenWithStop_result"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"success"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|I32
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|0
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|io
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"io"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"scannerOpenWithStop_result("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",io:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|scannerOpenTs_args
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|byte
index|[]
name|tableName
decl_stmt|;
specifier|public
name|byte
index|[]
name|startRow
decl_stmt|;
specifier|public
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
decl_stmt|;
specifier|public
name|long
name|timestamp
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
block|{
specifier|public
name|boolean
name|tableName
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|startRow
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|columns
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|timestamp
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|scannerOpenTs_args
parameter_list|()
block|{     }
specifier|public
name|scannerOpenTs_args
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|startRow
parameter_list|,
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tableName
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|startRow
operator|=
name|startRow
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|startRow
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|columns
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|timestamp
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tableName
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|startRow
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|startRow
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list68
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|_list68
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i69
init|=
literal|0
init|;
name|_i69
operator|<
name|_list68
operator|.
name|size
condition|;
operator|++
name|_i69
control|)
block|{
name|byte
index|[]
name|_elem70
init|=
literal|null
decl_stmt|;
name|_elem70
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|columns
operator|.
name|add
argument_list|(
name|_elem70
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|__isset
operator|.
name|columns
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I64
condition|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|timestamp
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"scannerOpenTs_args"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"tableName"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|startRow
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"startRow"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|startRow
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|columns
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"columns"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|LIST
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|3
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|columns
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|byte
index|[]
name|_iter71
range|:
name|this
operator|.
name|columns
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter71
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|field
operator|.
name|name
operator|=
literal|"timestamp"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|I64
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|4
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI64
argument_list|(
name|this
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"scannerOpenTs_args("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",startRow:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|startRow
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",columns:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|columns
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",timestamp:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|scannerOpenTs_result
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|int
name|success
decl_stmt|;
specifier|public
name|IOError
name|io
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
block|{
specifier|public
name|boolean
name|success
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|io
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|scannerOpenTs_result
parameter_list|()
block|{     }
specifier|public
name|scannerOpenTs_result
parameter_list|(
name|int
name|success
parameter_list|,
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I32
condition|)
block|{
name|this
operator|.
name|success
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"scannerOpenTs_result"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"success"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|I32
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|0
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|io
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"io"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"scannerOpenTs_result("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",io:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|scannerOpenWithStopTs_args
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|byte
index|[]
name|tableName
decl_stmt|;
specifier|public
name|byte
index|[]
name|startRow
decl_stmt|;
specifier|public
name|byte
index|[]
name|stopRow
decl_stmt|;
specifier|public
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
decl_stmt|;
specifier|public
name|long
name|timestamp
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
block|{
specifier|public
name|boolean
name|tableName
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|startRow
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|stopRow
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|columns
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|timestamp
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|scannerOpenWithStopTs_args
parameter_list|()
block|{     }
specifier|public
name|scannerOpenWithStopTs_args
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|startRow
parameter_list|,
name|byte
index|[]
name|stopRow
parameter_list|,
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tableName
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|startRow
operator|=
name|startRow
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|startRow
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|stopRow
operator|=
name|stopRow
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|stopRow
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|columns
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|timestamp
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tableName
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|startRow
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|startRow
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|stopRow
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|stopRow
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list72
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|_list72
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i73
init|=
literal|0
init|;
name|_i73
operator|<
name|_list72
operator|.
name|size
condition|;
operator|++
name|_i73
control|)
block|{
name|byte
index|[]
name|_elem74
init|=
literal|null
decl_stmt|;
name|_elem74
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|this
operator|.
name|columns
operator|.
name|add
argument_list|(
name|_elem74
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|__isset
operator|.
name|columns
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|5
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I64
condition|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|timestamp
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"scannerOpenWithStopTs_args"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"tableName"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|startRow
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"startRow"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|startRow
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|stopRow
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"stopRow"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|3
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|this
operator|.
name|stopRow
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|columns
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"columns"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|LIST
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|4
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|columns
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|byte
index|[]
name|_iter75
range|:
name|this
operator|.
name|columns
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter75
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|field
operator|.
name|name
operator|=
literal|"timestamp"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|I64
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|5
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI64
argument_list|(
name|this
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"scannerOpenWithStopTs_args("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",startRow:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|startRow
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",stopRow:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|stopRow
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",columns:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|columns
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",timestamp:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|scannerOpenWithStopTs_result
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|int
name|success
decl_stmt|;
specifier|public
name|IOError
name|io
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
block|{
specifier|public
name|boolean
name|success
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|io
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|scannerOpenWithStopTs_result
parameter_list|()
block|{     }
specifier|public
name|scannerOpenWithStopTs_result
parameter_list|(
name|int
name|success
parameter_list|,
name|IOError
name|io
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I32
condition|)
block|{
name|this
operator|.
name|success
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"scannerOpenWithStopTs_result"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"success"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|I32
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|0
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|io
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"io"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"scannerOpenWithStopTs_result("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",io:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|scannerGet_args
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|int
name|id
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
block|{
specifier|public
name|boolean
name|id
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|scannerGet_args
parameter_list|()
block|{     }
specifier|public
name|scannerGet_args
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|id
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I32
condition|)
block|{
name|this
operator|.
name|id
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|id
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"scannerGet_args"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
name|field
operator|.
name|name
operator|=
literal|"id"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|I32
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|this
operator|.
name|id
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"scannerGet_args("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"id:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|id
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|scannerGet_result
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|ScanEntry
name|success
decl_stmt|;
specifier|public
name|IOError
name|io
decl_stmt|;
specifier|public
name|IllegalArgument
name|ia
decl_stmt|;
specifier|public
name|NotFound
name|nf
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
block|{
specifier|public
name|boolean
name|success
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|io
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|ia
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|nf
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|scannerGet_result
parameter_list|()
block|{     }
specifier|public
name|scannerGet_result
parameter_list|(
name|ScanEntry
name|success
parameter_list|,
name|IOError
name|io
parameter_list|,
name|IllegalArgument
name|ia
parameter_list|,
name|NotFound
name|nf
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|ia
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|nf
operator|=
name|nf
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|nf
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|ScanEntry
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|ia
operator|=
operator|new
name|IllegalArgument
argument_list|()
expr_stmt|;
name|this
operator|.
name|ia
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|ia
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|nf
operator|=
operator|new
name|NotFound
argument_list|()
expr_stmt|;
name|this
operator|.
name|nf
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|nf
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"scannerGet_result"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"success"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|0
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|io
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"io"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|ia
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|ia
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"ia"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|ia
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|nf
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|nf
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"nf"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|3
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|nf
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"scannerGet_result("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",io:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",ia:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|ia
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",nf:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|nf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|scannerClose_args
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|int
name|id
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
block|{
specifier|public
name|boolean
name|id
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|scannerClose_args
parameter_list|()
block|{     }
specifier|public
name|scannerClose_args
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|id
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I32
condition|)
block|{
name|this
operator|.
name|id
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|id
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"scannerClose_args"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
name|field
operator|.
name|name
operator|=
literal|"id"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|I32
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|this
operator|.
name|id
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"scannerClose_args("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"id:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|id
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|scannerClose_result
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|IOError
name|io
decl_stmt|;
specifier|public
name|IllegalArgument
name|ia
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
block|{
specifier|public
name|boolean
name|io
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|ia
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|scannerClose_result
parameter_list|()
block|{     }
specifier|public
name|scannerClose_result
parameter_list|(
name|IOError
name|io
parameter_list|,
name|IllegalArgument
name|ia
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|ia
operator|=
name|ia
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|ia
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IOError
argument_list|()
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|io
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|ia
operator|=
operator|new
name|IllegalArgument
argument_list|()
expr_stmt|;
name|this
operator|.
name|ia
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|ia
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"scannerClose_result"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|io
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|io
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"io"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|io
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|ia
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|ia
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"ia"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|ia
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"scannerClose_result("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"io:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|io
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",ia:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|ia
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

