begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MasterNotRunningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|WhileMatchFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|PrefixFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|BatchUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|RowResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|AlreadyExists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|BatchMutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|ColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|Hbase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|IOError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|IllegalArgument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|Mutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|TRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|TCell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|TRowResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TBinaryProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|server
operator|.
name|TServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|server
operator|.
name|TThreadPoolServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TServerSocket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TServerTransport
import|;
end_import

begin_comment
comment|/**  * ThriftServer - this class starts up a Thrift server which implements the  * Hbase API specified in the Hbase.thrift IDL file.  */
end_comment

begin_class
specifier|public
class|class
name|ThriftServer
block|{
comment|/**    * The HBaseHandler is a glue object that connects Thrift RPC calls to the    * HBase client API primarily defined in the HBaseAdmin and HTable objects.    */
specifier|public
specifier|static
class|class
name|HBaseHandler
implements|implements
name|Hbase
operator|.
name|Iface
block|{
specifier|protected
name|HBaseConfiguration
name|conf
init|=
operator|new
name|HBaseConfiguration
argument_list|()
decl_stmt|;
specifier|protected
name|HBaseAdmin
name|admin
init|=
literal|null
decl_stmt|;
specifier|protected
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// nextScannerId and scannerMap are used to manage scanner state
specifier|protected
name|int
name|nextScannerId
init|=
literal|0
decl_stmt|;
specifier|protected
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|ResultScanner
argument_list|>
name|scannerMap
init|=
literal|null
decl_stmt|;
comment|/**      * Returns a list of all the column families for a given htable.      *       * @param table      * @return      * @throws IOException      */
name|byte
index|[]
index|[]
name|getAllColumns
parameter_list|(
name|HTable
name|table
parameter_list|)
throws|throws
name|IOException
block|{
name|HColumnDescriptor
index|[]
name|cds
init|=
name|table
operator|.
name|getTableDescriptor
argument_list|()
operator|.
name|getColumnFamilies
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|columns
init|=
operator|new
name|byte
index|[
name|cds
operator|.
name|length
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cds
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|columns
index|[
name|i
index|]
operator|=
name|cds
index|[
name|i
index|]
operator|.
name|getNameWithColon
argument_list|()
expr_stmt|;
block|}
return|return
name|columns
return|;
block|}
comment|/**      * Creates and returns an HTable instance from a given table name.      *       * @param tableName      *          name of table      * @return HTable object      * @throws IOException      * @throws IOError      */
specifier|protected
name|HTable
name|getTable
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOError
throws|,
name|IOException
block|{
return|return
operator|new
name|HTable
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|tableName
argument_list|)
return|;
block|}
comment|/**      * Assigns a unique ID to the scanner and adds the mapping to an internal      * hash-map.      *       * @param scanner      * @return integer scanner id      */
specifier|protected
specifier|synchronized
name|int
name|addScanner
parameter_list|(
name|ResultScanner
name|scanner
parameter_list|)
block|{
name|int
name|id
init|=
name|nextScannerId
operator|++
decl_stmt|;
name|scannerMap
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|scanner
argument_list|)
expr_stmt|;
return|return
name|id
return|;
block|}
comment|/**      * Returns the scanner associated with the specified ID.      *       * @param id      * @return a Scanner, or null if ID was invalid.      */
specifier|protected
specifier|synchronized
name|ResultScanner
name|getScanner
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
name|scannerMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
return|;
block|}
comment|/**      * Removes the scanner associated with the specified ID from the internal      * id->scanner hash-map.      *       * @param id      * @return a Scanner, or null if ID was invalid.      */
specifier|protected
specifier|synchronized
name|ResultScanner
name|removeScanner
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
name|scannerMap
operator|.
name|remove
argument_list|(
name|id
argument_list|)
return|;
block|}
comment|/**      * Constructs an HBaseHandler object.      *       * @throws MasterNotRunningException      */
name|HBaseHandler
parameter_list|()
throws|throws
name|MasterNotRunningException
block|{
name|conf
operator|=
operator|new
name|HBaseConfiguration
argument_list|()
expr_stmt|;
name|admin
operator|=
operator|new
name|HBaseAdmin
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scannerMap
operator|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|ResultScanner
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|enableTable
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOError
block|{
try|try
block|{
name|admin
operator|.
name|enableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|disableTable
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOError
block|{
try|try
block|{
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|boolean
name|isTableEnabled
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOError
block|{
try|try
block|{
return|return
name|HTable
operator|.
name|isTableEnabled
argument_list|(
name|tableName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|compact
parameter_list|(
name|byte
index|[]
name|tableNameOrRegionName
parameter_list|)
throws|throws
name|IOError
block|{
try|try
block|{
name|admin
operator|.
name|compact
argument_list|(
name|tableNameOrRegionName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|majorCompact
parameter_list|(
name|byte
index|[]
name|tableNameOrRegionName
parameter_list|)
throws|throws
name|IOError
block|{
try|try
block|{
name|admin
operator|.
name|majorCompact
argument_list|(
name|tableNameOrRegionName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|getTableNames
parameter_list|()
throws|throws
name|IOError
block|{
try|try
block|{
name|HTableDescriptor
index|[]
name|tables
init|=
name|this
operator|.
name|admin
operator|.
name|listTables
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|tables
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tables
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|tables
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|TRegionInfo
argument_list|>
name|getTableRegions
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOError
block|{
try|try
block|{
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
name|regionsInfo
init|=
name|table
operator|.
name|getRegionsInfo
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TRegionInfo
argument_list|>
name|regions
init|=
operator|new
name|ArrayList
argument_list|<
name|TRegionInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|HRegionInfo
name|regionInfo
range|:
name|regionsInfo
operator|.
name|keySet
argument_list|()
control|)
block|{
name|TRegionInfo
name|region
init|=
operator|new
name|TRegionInfo
argument_list|()
decl_stmt|;
name|region
operator|.
name|startKey
operator|=
name|regionInfo
operator|.
name|getStartKey
argument_list|()
expr_stmt|;
name|region
operator|.
name|endKey
operator|=
name|regionInfo
operator|.
name|getEndKey
argument_list|()
expr_stmt|;
name|region
operator|.
name|id
operator|=
name|regionInfo
operator|.
name|getRegionId
argument_list|()
expr_stmt|;
name|region
operator|.
name|name
operator|=
name|regionInfo
operator|.
name|getRegionName
argument_list|()
expr_stmt|;
name|region
operator|.
name|version
operator|=
name|regionInfo
operator|.
name|getVersion
argument_list|()
expr_stmt|;
name|regions
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
return|return
name|regions
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Deprecated
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|get
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|column
parameter_list|)
throws|throws
name|IOError
block|{
name|byte
index|[]
index|[]
name|famAndQf
init|=
name|KeyValue
operator|.
name|parseColumn
argument_list|(
name|column
argument_list|)
decl_stmt|;
return|return
name|get
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|famAndQf
index|[
literal|1
index|]
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|get
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|)
throws|throws
name|IOError
block|{
try|try
block|{
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|qualifier
operator|==
literal|null
operator|||
name|qualifier
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|get
operator|.
name|addFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
block|}
name|Result
name|result
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|Cell
name|cell
init|=
name|result
operator|.
name|getCellValue
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
decl_stmt|;
return|return
name|ThriftUtilities
operator|.
name|cellFromHBase
argument_list|(
name|cell
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Deprecated
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|getVer
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|column
parameter_list|,
name|int
name|numVersions
parameter_list|)
throws|throws
name|IOError
block|{
name|byte
index|[]
index|[]
name|famAndQf
init|=
name|KeyValue
operator|.
name|parseColumn
argument_list|(
name|column
argument_list|)
decl_stmt|;
return|return
name|getVer
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|famAndQf
index|[
literal|1
index|]
argument_list|,
name|numVersions
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|getVer
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|int
name|numVersions
parameter_list|)
throws|throws
name|IOError
block|{
try|try
block|{
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|numVersions
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
name|result
operator|.
name|sorted
argument_list|()
control|)
block|{
name|cells
operator|.
name|add
argument_list|(
operator|new
name|Cell
argument_list|(
name|kv
operator|.
name|getValue
argument_list|()
argument_list|,
name|kv
operator|.
name|getTimestamp
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ThriftUtilities
operator|.
name|cellFromHBase
argument_list|(
name|cells
operator|.
name|toArray
argument_list|(
operator|new
name|Cell
index|[
literal|0
index|]
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Deprecated
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|getVerTs
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|column
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|int
name|numVersions
parameter_list|)
throws|throws
name|IOError
block|{
name|byte
index|[]
index|[]
name|famAndQf
init|=
name|KeyValue
operator|.
name|parseColumn
argument_list|(
name|column
argument_list|)
decl_stmt|;
return|return
name|getVerTs
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|famAndQf
index|[
literal|1
index|]
argument_list|,
name|timestamp
argument_list|,
name|numVersions
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|getVerTs
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|int
name|numVersions
parameter_list|)
throws|throws
name|IOError
block|{
try|try
block|{
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|get
operator|.
name|setTimeRange
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|numVersions
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|KeyValue
index|[]
name|kvs
init|=
name|result
operator|.
name|sorted
argument_list|()
decl_stmt|;
if|if
condition|(
name|kvs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|KeyValue
name|kv
range|:
name|kvs
control|)
block|{
name|cells
operator|.
name|add
argument_list|(
operator|new
name|Cell
argument_list|(
name|kv
operator|.
name|getValue
argument_list|()
argument_list|,
name|kv
operator|.
name|getTimestamp
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ThriftUtilities
operator|.
name|cellFromHBase
argument_list|(
name|cells
operator|.
name|toArray
argument_list|(
operator|new
name|Cell
index|[
literal|0
index|]
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRow
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|)
throws|throws
name|IOError
block|{
return|return
name|getRowWithColumnsTs
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
literal|null
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRowWithColumns
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
parameter_list|)
throws|throws
name|IOError
block|{
return|return
name|getRowWithColumnsTs
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|columns
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRowTs
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOError
block|{
return|return
name|getRowWithColumnsTs
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
literal|null
argument_list|,
name|timestamp
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRowWithColumnsTs
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOError
block|{
try|try
block|{
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|columns
operator|==
literal|null
condition|)
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|setTimeStamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
return|return
name|ThriftUtilities
operator|.
name|rowResultFromHBase
argument_list|(
name|result
operator|.
name|getRowResult
argument_list|()
argument_list|)
return|;
block|}
name|byte
index|[]
index|[]
name|columnArr
init|=
name|columns
operator|.
name|toArray
argument_list|(
operator|new
name|byte
index|[
name|columns
operator|.
name|size
argument_list|()
index|]
index|[]
argument_list|)
decl_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|column
range|:
name|columnArr
control|)
block|{
name|byte
index|[]
index|[]
name|famAndQf
init|=
name|KeyValue
operator|.
name|parseColumn
argument_list|(
name|column
argument_list|)
decl_stmt|;
if|if
condition|(
name|famAndQf
index|[
literal|1
index|]
operator|==
literal|null
operator|||
name|famAndQf
index|[
literal|1
index|]
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|get
operator|.
name|addFamily
argument_list|(
name|famAndQf
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|get
operator|.
name|addColumn
argument_list|(
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|famAndQf
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|get
operator|.
name|setTimeStamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
return|return
name|ThriftUtilities
operator|.
name|rowResultFromHBase
argument_list|(
name|result
operator|.
name|getRowResult
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|deleteAll
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|column
parameter_list|)
throws|throws
name|IOError
block|{
name|deleteAllTs
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|deleteAllTs
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|column
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOError
block|{
try|try
block|{
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|famAndQf
init|=
name|KeyValue
operator|.
name|parseColumn
argument_list|(
name|column
argument_list|)
decl_stmt|;
if|if
condition|(
name|famAndQf
index|[
literal|1
index|]
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|delete
operator|.
name|deleteFamily
argument_list|(
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|delete
operator|.
name|deleteColumns
argument_list|(
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|famAndQf
index|[
literal|1
index|]
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|deleteAllRow
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|)
throws|throws
name|IOError
block|{
name|deleteAllRowTs
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|deleteAllRowTs
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOError
block|{
try|try
block|{
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|row
argument_list|,
name|timestamp
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|table
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|createTable
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|List
argument_list|<
name|ColumnDescriptor
argument_list|>
name|columnFamilies
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|AlreadyExists
block|{
try|try
block|{
if|if
condition|(
name|admin
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AlreadyExists
argument_list|(
literal|"table name already in use"
argument_list|)
throw|;
block|}
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
for|for
control|(
name|ColumnDescriptor
name|col
range|:
name|columnFamilies
control|)
block|{
name|HColumnDescriptor
name|colDesc
init|=
name|ThriftUtilities
operator|.
name|colDescFromThrift
argument_list|(
name|col
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
name|colDesc
argument_list|)
expr_stmt|;
block|}
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgument
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|deleteTable
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOError
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"deleteTable: table="
operator|+
operator|new
name|String
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
operator|!
name|admin
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
literal|"table does not exist"
argument_list|)
throw|;
block|}
name|admin
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|mutateRow
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
block|{
name|mutateRowTs
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|mutations
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|mutateRowTs
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
block|{
name|HTable
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|table
operator|=
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|setTimeStamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|row
argument_list|)
decl_stmt|;
for|for
control|(
name|Mutation
name|m
range|:
name|mutations
control|)
block|{
name|byte
index|[]
index|[]
name|famAndQf
init|=
name|KeyValue
operator|.
name|parseColumn
argument_list|(
name|m
operator|.
name|column
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|isDelete
condition|)
block|{
if|if
condition|(
name|famAndQf
index|[
literal|1
index|]
operator|.
name|length
operator|==
literal|0
condition|)
name|delete
operator|.
name|deleteFamily
argument_list|(
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
else|else
name|delete
operator|.
name|deleteColumns
argument_list|(
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|famAndQf
index|[
literal|1
index|]
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|put
operator|.
name|add
argument_list|(
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|famAndQf
index|[
literal|1
index|]
argument_list|,
name|m
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|delete
operator|.
name|isEmpty
argument_list|()
condition|)
name|table
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|put
operator|.
name|isEmpty
argument_list|()
condition|)
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgument
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|mutateRows
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|rowBatches
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
block|{
name|mutateRowsTs
argument_list|(
name|tableName
argument_list|,
name|rowBatches
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|mutateRowsTs
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|rowBatches
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
block|{
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<
name|Put
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Delete
argument_list|>
name|deletes
init|=
operator|new
name|ArrayList
argument_list|<
name|Delete
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|BatchMutation
name|batch
range|:
name|rowBatches
control|)
block|{
name|byte
index|[]
name|row
init|=
name|batch
operator|.
name|row
decl_stmt|;
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
init|=
name|batch
operator|.
name|mutations
decl_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|setTimeStamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
for|for
control|(
name|Mutation
name|m
range|:
name|mutations
control|)
block|{
name|byte
index|[]
index|[]
name|famAndQf
init|=
name|KeyValue
operator|.
name|parseColumn
argument_list|(
name|m
operator|.
name|column
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|isDelete
condition|)
block|{
comment|// no qualifier, family only.
if|if
condition|(
name|famAndQf
index|[
literal|1
index|]
operator|.
name|length
operator|==
literal|0
condition|)
name|delete
operator|.
name|deleteFamily
argument_list|(
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
else|else
name|delete
operator|.
name|deleteColumns
argument_list|(
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|famAndQf
index|[
literal|1
index|]
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|put
operator|.
name|add
argument_list|(
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|famAndQf
index|[
literal|1
index|]
argument_list|,
name|m
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|delete
operator|.
name|isEmpty
argument_list|()
condition|)
name|deletes
operator|.
name|add
argument_list|(
name|delete
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|put
operator|.
name|isEmpty
argument_list|()
condition|)
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
name|HTable
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|table
operator|=
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|puts
operator|.
name|isEmpty
argument_list|()
condition|)
name|table
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
for|for
control|(
name|Delete
name|del
range|:
name|deletes
control|)
block|{
name|table
operator|.
name|delete
argument_list|(
name|del
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgument
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Deprecated
specifier|public
name|long
name|atomicIncrement
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|column
parameter_list|,
name|long
name|amount
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
block|{
name|byte
index|[]
index|[]
name|famAndQf
init|=
name|KeyValue
operator|.
name|parseColumn
argument_list|(
name|column
argument_list|)
decl_stmt|;
return|return
name|atomicIncrement
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|famAndQf
index|[
literal|1
index|]
argument_list|,
name|amount
argument_list|)
return|;
block|}
specifier|public
name|long
name|atomicIncrement
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
name|amount
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
block|{
name|HTable
name|table
decl_stmt|;
try|try
block|{
name|table
operator|=
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
return|return
name|table
operator|.
name|incrementColumnValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|amount
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|scannerClose
parameter_list|(
name|int
name|id
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"scannerClose: id="
operator|+
name|id
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|getScanner
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|scanner
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgument
argument_list|(
literal|"scanner ID is invalid"
argument_list|)
throw|;
block|}
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|removeScanner
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|scannerGetList
parameter_list|(
name|int
name|id
parameter_list|,
name|int
name|nbRows
parameter_list|)
throws|throws
name|IllegalArgument
throws|,
name|IOError
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"scannerGetList: id="
operator|+
name|id
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|getScanner
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|scanner
condition|)
block|{
throw|throw
operator|new
name|IllegalArgument
argument_list|(
literal|"scanner ID is invalid"
argument_list|)
throw|;
block|}
name|Result
index|[]
name|results
init|=
literal|null
decl_stmt|;
try|try
block|{
name|results
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|nbRows
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|results
condition|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|TRowResult
argument_list|>
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|ThriftUtilities
operator|.
name|rowResultFromHBase
argument_list|(
name|results
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|scannerGet
parameter_list|(
name|int
name|id
parameter_list|)
throws|throws
name|IllegalArgument
throws|,
name|IOError
block|{
return|return
name|scannerGetList
argument_list|(
name|id
argument_list|,
literal|1
argument_list|)
return|;
block|}
specifier|public
name|int
name|scannerOpen
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|startRow
parameter_list|,
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
parameter_list|)
throws|throws
name|IOError
block|{
try|try
block|{
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|columnsArray
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|(
name|columns
operator|==
literal|null
operator|)
operator|||
operator|(
name|columns
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
name|columnsArray
operator|=
name|getAllColumns
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|columnsArray
operator|=
name|columns
operator|.
name|toArray
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
index|[]
argument_list|)
expr_stmt|;
block|}
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|startRow
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumns
argument_list|(
name|columnsArray
argument_list|)
expr_stmt|;
return|return
name|addScanner
argument_list|(
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|int
name|scannerOpenWithStop
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|startRow
parameter_list|,
name|byte
index|[]
name|stopRow
parameter_list|,
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
try|try
block|{
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|columnsArray
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|(
name|columns
operator|==
literal|null
operator|)
operator|||
operator|(
name|columns
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
name|columnsArray
operator|=
name|getAllColumns
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|columnsArray
operator|=
name|columns
operator|.
name|toArray
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
index|[]
argument_list|)
expr_stmt|;
block|}
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|startRow
argument_list|,
name|stopRow
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumns
argument_list|(
name|columnsArray
argument_list|)
expr_stmt|;
return|return
name|addScanner
argument_list|(
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|scannerOpenWithPrefix
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|startAndPrefix
parameter_list|,
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
try|try
block|{
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|columnsArray
init|=
literal|null
decl_stmt|;
name|columnsArray
operator|=
name|columns
operator|.
name|toArray
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
index|[]
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|startAndPrefix
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumns
argument_list|(
name|columnsArray
argument_list|)
expr_stmt|;
name|Filter
name|f
init|=
operator|new
name|WhileMatchFilter
argument_list|(
operator|new
name|PrefixFilter
argument_list|(
name|startAndPrefix
argument_list|)
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
return|return
name|addScanner
argument_list|(
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|int
name|scannerOpenTs
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|startRow
parameter_list|,
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
try|try
block|{
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|columnsArray
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|(
name|columns
operator|==
literal|null
operator|)
operator|||
operator|(
name|columns
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
name|columnsArray
operator|=
name|getAllColumns
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|columnsArray
operator|=
name|columns
operator|.
name|toArray
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
index|[]
argument_list|)
expr_stmt|;
block|}
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|startRow
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumns
argument_list|(
name|columnsArray
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setTimeRange
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
return|return
name|addScanner
argument_list|(
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|int
name|scannerOpenWithStopTs
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|startRow
parameter_list|,
name|byte
index|[]
name|stopRow
parameter_list|,
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
try|try
block|{
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|columnsArray
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|(
name|columns
operator|==
literal|null
operator|)
operator|||
operator|(
name|columns
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
name|columnsArray
operator|=
name|getAllColumns
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|columnsArray
operator|=
name|columns
operator|.
name|toArray
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
index|[]
argument_list|)
expr_stmt|;
block|}
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|startRow
argument_list|,
name|stopRow
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumns
argument_list|(
name|columnsArray
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setTimeRange
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
return|return
name|addScanner
argument_list|(
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|ColumnDescriptor
argument_list|>
name|getColumnDescriptors
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
try|try
block|{
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|ColumnDescriptor
argument_list|>
name|columns
init|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|ColumnDescriptor
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|desc
init|=
name|table
operator|.
name|getTableDescriptor
argument_list|()
decl_stmt|;
for|for
control|(
name|HColumnDescriptor
name|e
range|:
name|desc
operator|.
name|getFamilies
argument_list|()
control|)
block|{
name|ColumnDescriptor
name|col
init|=
name|ThriftUtilities
operator|.
name|colDescFromHbase
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|columns
operator|.
name|put
argument_list|(
name|col
operator|.
name|name
argument_list|,
name|col
argument_list|)
expr_stmt|;
block|}
return|return
name|columns
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
comment|//
comment|// Main program and support routines
comment|//
specifier|private
specifier|static
name|void
name|printUsageAndExit
parameter_list|()
block|{
name|printUsageAndExit
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|printUsageAndExit
parameter_list|(
specifier|final
name|String
name|message
parameter_list|)
block|{
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Usage: java org.apache.hadoop.hbase.thrift.ThriftServer "
operator|+
literal|"--help | [--port=PORT] start"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Arguments:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" start Start thrift server"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" stop  Stop thrift server"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Options:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" port  Port to listen on. Default: 9090"
argument_list|)
expr_stmt|;
comment|// System.out.println(" bind  Address to bind on. Default: 0.0.0.0.");
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" help  Print this message and exit"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/*    * Start up the Thrift server.    * @param args    */
specifier|protected
specifier|static
name|void
name|doMain
parameter_list|(
specifier|final
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|1
condition|)
block|{
name|printUsageAndExit
argument_list|()
expr_stmt|;
block|}
name|int
name|port
init|=
literal|9090
decl_stmt|;
comment|// String bindAddress = "0.0.0.0";
comment|// Process command-line args. TODO: Better cmd-line processing
comment|// (but hopefully something not as painful as cli options).
comment|//    final String addressArgKey = "--bind=";
specifier|final
name|String
name|portArgKey
init|=
literal|"--port="
decl_stmt|;
for|for
control|(
name|String
name|cmd
range|:
name|args
control|)
block|{
comment|//      if (cmd.startsWith(addressArgKey)) {
comment|//        bindAddress = cmd.substring(addressArgKey.length());
comment|//        continue;
comment|//      } else
if|if
condition|(
name|cmd
operator|.
name|startsWith
argument_list|(
name|portArgKey
argument_list|)
condition|)
block|{
name|port
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
name|portArgKey
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"--help"
argument_list|)
operator|||
name|cmd
operator|.
name|equals
argument_list|(
literal|"-h"
argument_list|)
condition|)
block|{
name|printUsageAndExit
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"start"
argument_list|)
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"stop"
argument_list|)
condition|)
block|{
name|printUsageAndExit
argument_list|(
literal|"To shutdown the thrift server run "
operator|+
literal|"bin/hbase-daemon.sh stop thrift or send a kill signal to "
operator|+
literal|"the thrift server pid"
argument_list|)
expr_stmt|;
block|}
comment|// Print out usage if we get to here.
name|printUsageAndExit
argument_list|()
expr_stmt|;
block|}
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"ThriftServer"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"starting HBase Thrift server on port "
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|port
argument_list|)
argument_list|)
expr_stmt|;
name|HBaseHandler
name|handler
init|=
operator|new
name|HBaseHandler
argument_list|()
decl_stmt|;
name|Hbase
operator|.
name|Processor
name|processor
init|=
operator|new
name|Hbase
operator|.
name|Processor
argument_list|(
name|handler
argument_list|)
decl_stmt|;
name|TServerTransport
name|serverTransport
init|=
operator|new
name|TServerSocket
argument_list|(
name|port
argument_list|)
decl_stmt|;
name|TProtocolFactory
name|protFactory
init|=
operator|new
name|TBinaryProtocol
operator|.
name|Factory
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|TServer
name|server
init|=
operator|new
name|TThreadPoolServer
argument_list|(
name|processor
argument_list|,
name|serverTransport
argument_list|,
name|protFactory
argument_list|)
decl_stmt|;
name|server
operator|.
name|serve
argument_list|()
expr_stmt|;
block|}
comment|/**    * @param args    * @throws Exception     */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|doMain
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

