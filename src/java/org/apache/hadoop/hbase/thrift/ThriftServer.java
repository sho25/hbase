begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|MalformedInputException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HScannerInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HStoreKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MasterNotRunningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|AlreadyExists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|ColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|Hbase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|IOError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|IllegalArgument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|Mutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|NotFound
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|RegionDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|ScanEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TBinaryProtocol
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|server
operator|.
name|TServer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|server
operator|.
name|TThreadPoolServer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TServerSocket
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TServerTransport
import|;
end_import

begin_comment
comment|/**  * ThriftServer - this class starts up a Thrift server which implements the  * Hbase API specified in the Hbase.thrift IDL file.  */
end_comment

begin_class
specifier|public
class|class
name|ThriftServer
block|{
comment|/**    * The HBaseHandler is a glue object that connects Thrift RPC calls to the    * HBase client API primarily defined in the HBaseAdmin and HTable objects.    */
specifier|public
specifier|static
class|class
name|HBaseHandler
implements|implements
name|Hbase
operator|.
name|Iface
block|{
specifier|protected
name|HBaseConfiguration
name|conf
init|=
operator|new
name|HBaseConfiguration
argument_list|()
decl_stmt|;
specifier|protected
name|HBaseAdmin
name|admin
init|=
literal|null
decl_stmt|;
specifier|protected
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// nextScannerId and scannerMap are used to manage scanner state
specifier|protected
name|int
name|nextScannerId
init|=
literal|0
decl_stmt|;
specifier|protected
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|HScannerInterface
argument_list|>
name|scannerMap
init|=
literal|null
decl_stmt|;
comment|/**      * Creates and returns an HTable instance from a given table name.      *       * @param tableName      *          name of table      * @return HTable object      * @throws IOException      * @throws IOException      */
specifier|protected
name|HTable
name|getTable
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOError
throws|,
name|IOException
block|{
return|return
operator|new
name|HTable
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|getText
argument_list|(
name|tableName
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Assigns a unique ID to the scanner and adds the mapping to an internal      * hash-map.      *       * @param scanner      * @return integer scanner id      */
specifier|protected
specifier|synchronized
name|int
name|addScanner
parameter_list|(
name|HScannerInterface
name|scanner
parameter_list|)
block|{
name|int
name|id
init|=
name|nextScannerId
operator|++
decl_stmt|;
name|scannerMap
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|scanner
argument_list|)
expr_stmt|;
return|return
name|id
return|;
block|}
comment|/**      * Returns the scanner associated with the specified ID.      *       * @param id      * @return a HScannerInterface, or null if ID was invalid.      */
specifier|protected
specifier|synchronized
name|HScannerInterface
name|getScanner
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
name|scannerMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
return|;
block|}
comment|/**      * Removes the scanner associated with the specified ID from the internal      * id->scanner hash-map.      *       * @param id      * @return a HScannerInterface, or null if ID was invalid.      */
specifier|protected
specifier|synchronized
name|HScannerInterface
name|removeScanner
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
name|scannerMap
operator|.
name|remove
argument_list|(
name|id
argument_list|)
return|;
block|}
comment|/**      * Constructs an HBaseHandler object.      *       * @throws MasterNotRunningException      */
name|HBaseHandler
parameter_list|()
throws|throws
name|MasterNotRunningException
block|{
name|conf
operator|=
operator|new
name|HBaseConfiguration
argument_list|()
expr_stmt|;
name|admin
operator|=
operator|new
name|HBaseAdmin
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scannerMap
operator|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|HScannerInterface
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/**      * Converts a byte array to a Text object after validating the UTF-8      * encoding.      *       * @param buf      *          UTF-8 encoded bytes      * @return Text object      * @throws IllegalArgument      */
name|Text
name|getText
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|)
throws|throws
name|IOError
block|{
try|try
block|{
name|Text
operator|.
name|validateUTF8
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedInputException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
literal|"invalid UTF-8 encoding in row or column name"
argument_list|)
throw|;
block|}
return|return
operator|new
name|Text
argument_list|(
name|buf
argument_list|)
return|;
block|}
comment|//
comment|// The Thrift Hbase.Iface interface is implemented below.
comment|// Documentation for the methods and datastructures is the Hbase.thrift file
comment|// used to generate the interface.
comment|//
specifier|public
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|getTableNames
parameter_list|()
throws|throws
name|IOError
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"getTableNames"
argument_list|)
expr_stmt|;
try|try
block|{
name|HTableDescriptor
index|[]
name|tables
init|=
name|this
operator|.
name|admin
operator|.
name|listTables
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|tables
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tables
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|tables
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|ArrayList
argument_list|<
name|RegionDescriptor
argument_list|>
name|getTableRegions
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOError
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"getTableRegions: "
operator|+
operator|new
name|String
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Text
index|[]
name|startKeys
init|=
name|table
operator|.
name|getStartKeys
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|RegionDescriptor
argument_list|>
name|regions
init|=
operator|new
name|ArrayList
argument_list|<
name|RegionDescriptor
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|startKeys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|RegionDescriptor
name|region
init|=
operator|new
name|RegionDescriptor
argument_list|()
decl_stmt|;
name|region
operator|.
name|startKey
operator|=
name|startKeys
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|()
expr_stmt|;
name|regions
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
return|return
name|regions
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|byte
index|[]
name|get
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|column
parameter_list|)
throws|throws
name|NotFound
throws|,
name|IOError
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"get: table="
operator|+
operator|new
name|String
argument_list|(
name|tableName
argument_list|)
operator|+
literal|", row="
operator|+
operator|new
name|String
argument_list|(
name|row
argument_list|)
operator|+
literal|", col="
operator|+
operator|new
name|String
argument_list|(
name|column
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|table
operator|.
name|get
argument_list|(
name|getText
argument_list|(
name|row
argument_list|)
argument_list|,
name|getText
argument_list|(
name|column
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotFound
argument_list|()
throw|;
block|}
return|return
name|value
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|getVer
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|column
parameter_list|,
name|int
name|numVersions
parameter_list|)
throws|throws
name|IOError
throws|,
name|NotFound
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"getVer: table="
operator|+
operator|new
name|String
argument_list|(
name|tableName
argument_list|)
operator|+
literal|", row="
operator|+
operator|new
name|String
argument_list|(
name|row
argument_list|)
operator|+
literal|", col="
operator|+
operator|new
name|String
argument_list|(
name|column
argument_list|)
operator|+
literal|", numVers="
operator|+
name|numVersions
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|values
init|=
name|table
operator|.
name|get
argument_list|(
name|getText
argument_list|(
name|row
argument_list|)
argument_list|,
name|getText
argument_list|(
name|column
argument_list|)
argument_list|,
name|numVersions
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotFound
argument_list|()
throw|;
block|}
return|return
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|values
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|getVerTs
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|column
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|int
name|numVersions
parameter_list|)
throws|throws
name|IOError
throws|,
name|NotFound
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"getVerTs: table="
operator|+
operator|new
name|String
argument_list|(
name|tableName
argument_list|)
operator|+
literal|", row="
operator|+
operator|new
name|String
argument_list|(
name|row
argument_list|)
operator|+
literal|", col="
operator|+
operator|new
name|String
argument_list|(
name|column
argument_list|)
operator|+
literal|", ts="
operator|+
name|timestamp
operator|+
literal|", numVers="
operator|+
name|numVersions
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|values
init|=
name|table
operator|.
name|get
argument_list|(
name|getText
argument_list|(
name|row
argument_list|)
argument_list|,
name|getText
argument_list|(
name|column
argument_list|)
argument_list|,
name|timestamp
argument_list|,
name|numVersions
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotFound
argument_list|()
throw|;
block|}
return|return
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|values
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|AbstractMap
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|getRow
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|)
throws|throws
name|IOError
block|{
return|return
name|getRowTs
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
return|;
block|}
specifier|public
name|AbstractMap
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|getRowTs
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOError
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"getRowTs: table="
operator|+
operator|new
name|String
argument_list|(
name|tableName
argument_list|)
operator|+
literal|", row="
operator|+
operator|new
name|String
argument_list|(
name|row
argument_list|)
operator|+
literal|", ts="
operator|+
name|timestamp
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|SortedMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|values
init|=
name|table
operator|.
name|getRow
argument_list|(
name|getText
argument_list|(
name|row
argument_list|)
argument_list|,
name|timestamp
argument_list|)
decl_stmt|;
comment|// copy the map from type<Text, byte[]> to<byte[], byte[]>
name|HashMap
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|returnValues
init|=
operator|new
name|HashMap
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|e
range|:
name|values
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|returnValues
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|returnValues
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|put
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|column
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"put: table="
operator|+
operator|new
name|String
argument_list|(
name|tableName
argument_list|)
operator|+
literal|", row="
operator|+
operator|new
name|String
argument_list|(
name|row
argument_list|)
operator|+
literal|", col="
operator|+
operator|new
name|String
argument_list|(
name|column
argument_list|)
operator|+
literal|", value.length="
operator|+
name|value
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|long
name|lockid
init|=
name|table
operator|.
name|startUpdate
argument_list|(
name|getText
argument_list|(
name|row
argument_list|)
argument_list|)
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
name|lockid
argument_list|,
name|getText
argument_list|(
name|column
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|table
operator|.
name|commit
argument_list|(
name|lockid
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgument
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|deleteAll
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|column
parameter_list|)
throws|throws
name|IOError
block|{
name|deleteAllTs
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|deleteAllTs
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|column
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOError
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"deleteAllTs: table="
operator|+
operator|new
name|String
argument_list|(
name|tableName
argument_list|)
operator|+
literal|", row="
operator|+
operator|new
name|String
argument_list|(
name|row
argument_list|)
operator|+
literal|", col="
operator|+
operator|new
name|String
argument_list|(
name|column
argument_list|)
operator|+
literal|", ts="
operator|+
name|timestamp
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|table
operator|.
name|deleteAll
argument_list|(
name|getText
argument_list|(
name|row
argument_list|)
argument_list|,
name|getText
argument_list|(
name|column
argument_list|)
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|deleteAllRow
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|)
throws|throws
name|IOError
block|{
name|deleteAllRowTs
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|deleteAllRowTs
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOError
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"deleteAllRowTs: table="
operator|+
operator|new
name|String
argument_list|(
name|tableName
argument_list|)
operator|+
literal|", row="
operator|+
operator|new
name|String
argument_list|(
name|row
argument_list|)
operator|+
literal|", ts="
operator|+
name|timestamp
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|table
operator|.
name|deleteAll
argument_list|(
name|getText
argument_list|(
name|row
argument_list|)
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|createTable
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|ArrayList
argument_list|<
name|ColumnDescriptor
argument_list|>
name|columnFamilies
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|AlreadyExists
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"createTable: table="
operator|+
operator|new
name|String
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Text
name|tableStr
init|=
name|getText
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|admin
operator|.
name|tableExists
argument_list|(
name|tableStr
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AlreadyExists
argument_list|(
literal|"table name already in use"
argument_list|)
throw|;
block|}
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableStr
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ColumnDescriptor
name|col
range|:
name|columnFamilies
control|)
block|{
name|HColumnDescriptor
name|colDesc
init|=
name|ThriftUtilities
operator|.
name|colDescFromThrift
argument_list|(
name|col
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
name|colDesc
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"createTable:     col="
operator|+
name|colDesc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgument
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|deleteTable
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOError
throws|,
name|NotFound
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"deleteTable: table="
operator|+
operator|new
name|String
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Text
name|tableStr
init|=
name|getText
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|admin
operator|.
name|tableExists
argument_list|(
name|tableStr
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|NotFound
argument_list|()
throw|;
block|}
name|admin
operator|.
name|deleteTable
argument_list|(
name|tableStr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|mutateRow
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|ArrayList
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
block|{
name|mutateRowTs
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|mutations
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|mutateRowTs
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|ArrayList
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"mutateRowTs: table="
operator|+
operator|new
name|String
argument_list|(
name|tableName
argument_list|)
operator|+
literal|", row="
operator|+
operator|new
name|String
argument_list|(
name|row
argument_list|)
operator|+
literal|", ts="
operator|+
name|timestamp
operator|+
literal|" mutations="
operator|+
name|mutations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Mutation
name|m
range|:
name|mutations
control|)
block|{
if|if
condition|(
name|m
operator|.
name|isDelete
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"mutateRowTs:    : delete - "
operator|+
name|getText
argument_list|(
name|m
operator|.
name|column
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"mutateRowTs:    : put - "
operator|+
name|getText
argument_list|(
name|m
operator|.
name|column
argument_list|)
operator|+
literal|" => "
operator|+
name|m
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Long
name|lockid
init|=
literal|null
decl_stmt|;
name|HTable
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|table
operator|=
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|lockid
operator|=
name|table
operator|.
name|startUpdate
argument_list|(
name|getText
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Mutation
name|m
range|:
name|mutations
control|)
block|{
if|if
condition|(
name|m
operator|.
name|isDelete
condition|)
block|{
name|table
operator|.
name|delete
argument_list|(
name|lockid
argument_list|,
name|getText
argument_list|(
name|m
operator|.
name|column
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|table
operator|.
name|put
argument_list|(
name|lockid
argument_list|,
name|getText
argument_list|(
name|m
operator|.
name|column
argument_list|)
argument_list|,
name|m
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|table
operator|.
name|commit
argument_list|(
name|lockid
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|lockid
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|abort
argument_list|(
name|lockid
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
if|if
condition|(
name|lockid
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|abort
argument_list|(
name|lockid
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|IllegalArgument
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|scannerClose
parameter_list|(
name|int
name|id
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"scannerClose: id="
operator|+
name|id
argument_list|)
expr_stmt|;
name|HScannerInterface
name|scanner
init|=
name|getScanner
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|scanner
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgument
argument_list|(
literal|"scanner ID is invalid"
argument_list|)
throw|;
block|}
try|try
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|removeScanner
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|ScanEntry
name|scannerGet
parameter_list|(
name|int
name|id
parameter_list|)
throws|throws
name|IllegalArgument
throws|,
name|NotFound
throws|,
name|IOError
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"scannerGet: id="
operator|+
name|id
argument_list|)
expr_stmt|;
name|HScannerInterface
name|scanner
init|=
name|getScanner
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|scanner
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgument
argument_list|(
literal|"scanner ID is invalid"
argument_list|)
throw|;
block|}
name|HStoreKey
name|key
init|=
operator|new
name|HStoreKey
argument_list|()
decl_stmt|;
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|results
init|=
operator|new
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|scanner
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|results
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|NotFound
argument_list|(
literal|"end of scanner reached"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|ScanEntry
name|retval
init|=
operator|new
name|ScanEntry
argument_list|()
decl_stmt|;
name|retval
operator|.
name|row
operator|=
name|key
operator|.
name|getRow
argument_list|()
operator|.
name|getBytes
argument_list|()
expr_stmt|;
name|retval
operator|.
name|columns
operator|=
operator|new
name|HashMap
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|(
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|SortedMap
operator|.
name|Entry
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|e
range|:
name|results
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|retval
operator|.
name|columns
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
specifier|public
name|int
name|scannerOpen
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|startRow
parameter_list|,
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
parameter_list|)
throws|throws
name|IOError
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"scannerOpen: table="
operator|+
name|getText
argument_list|(
name|tableName
argument_list|)
operator|+
literal|", start="
operator|+
name|getText
argument_list|(
name|startRow
argument_list|)
operator|+
literal|", columns="
operator|+
name|columns
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Text
index|[]
name|columnsText
init|=
operator|new
name|Text
index|[
name|columns
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|columnsText
index|[
name|i
index|]
operator|=
name|getText
argument_list|(
name|columns
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|HScannerInterface
name|scanner
init|=
name|table
operator|.
name|obtainScanner
argument_list|(
name|columnsText
argument_list|,
name|getText
argument_list|(
name|startRow
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|addScanner
argument_list|(
name|scanner
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|int
name|scannerOpenWithStop
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|startRow
parameter_list|,
name|byte
index|[]
name|stopRow
parameter_list|,
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"scannerOpen: table="
operator|+
name|getText
argument_list|(
name|tableName
argument_list|)
operator|+
literal|", start="
operator|+
name|getText
argument_list|(
name|startRow
argument_list|)
operator|+
literal|", stop="
operator|+
name|getText
argument_list|(
name|stopRow
argument_list|)
operator|+
literal|", columns="
operator|+
name|columns
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Text
index|[]
name|columnsText
init|=
operator|new
name|Text
index|[
name|columns
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|columnsText
index|[
name|i
index|]
operator|=
name|getText
argument_list|(
name|columns
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|HScannerInterface
name|scanner
init|=
name|table
operator|.
name|obtainScanner
argument_list|(
name|columnsText
argument_list|,
name|getText
argument_list|(
name|startRow
argument_list|)
argument_list|,
name|getText
argument_list|(
name|stopRow
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|addScanner
argument_list|(
name|scanner
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|int
name|scannerOpenTs
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|startRow
parameter_list|,
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"scannerOpen: table="
operator|+
name|getText
argument_list|(
name|tableName
argument_list|)
operator|+
literal|", start="
operator|+
name|getText
argument_list|(
name|startRow
argument_list|)
operator|+
literal|", columns="
operator|+
name|columns
operator|.
name|toString
argument_list|()
operator|+
literal|", timestamp="
operator|+
name|timestamp
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Text
index|[]
name|columnsText
init|=
operator|new
name|Text
index|[
name|columns
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|columnsText
index|[
name|i
index|]
operator|=
name|getText
argument_list|(
name|columns
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|HScannerInterface
name|scanner
init|=
name|table
operator|.
name|obtainScanner
argument_list|(
name|columnsText
argument_list|,
name|getText
argument_list|(
name|startRow
argument_list|)
argument_list|,
name|timestamp
argument_list|)
decl_stmt|;
return|return
name|addScanner
argument_list|(
name|scanner
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|int
name|scannerOpenWithStopTs
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|startRow
parameter_list|,
name|byte
index|[]
name|stopRow
parameter_list|,
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"scannerOpen: table="
operator|+
name|getText
argument_list|(
name|tableName
argument_list|)
operator|+
literal|", start="
operator|+
name|getText
argument_list|(
name|startRow
argument_list|)
operator|+
literal|", stop="
operator|+
name|getText
argument_list|(
name|stopRow
argument_list|)
operator|+
literal|", columns="
operator|+
name|columns
operator|.
name|toString
argument_list|()
operator|+
literal|", timestamp="
operator|+
name|timestamp
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Text
index|[]
name|columnsText
init|=
operator|new
name|Text
index|[
name|columns
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|columnsText
index|[
name|i
index|]
operator|=
name|getText
argument_list|(
name|columns
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|HScannerInterface
name|scanner
init|=
name|table
operator|.
name|obtainScanner
argument_list|(
name|columnsText
argument_list|,
name|getText
argument_list|(
name|startRow
argument_list|)
argument_list|,
name|getText
argument_list|(
name|stopRow
argument_list|)
argument_list|,
name|timestamp
argument_list|)
decl_stmt|;
return|return
name|addScanner
argument_list|(
name|scanner
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|AbstractMap
argument_list|<
name|byte
index|[]
argument_list|,
name|ColumnDescriptor
argument_list|>
name|getColumnDescriptors
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"getColumnDescriptors: table="
operator|+
operator|new
name|String
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|HashMap
argument_list|<
name|byte
index|[]
argument_list|,
name|ColumnDescriptor
argument_list|>
name|columns
init|=
operator|new
name|HashMap
argument_list|<
name|byte
index|[]
argument_list|,
name|ColumnDescriptor
argument_list|>
argument_list|()
decl_stmt|;
name|HTable
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|desc
init|=
name|table
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Text
argument_list|,
name|HColumnDescriptor
argument_list|>
name|e
range|:
name|desc
operator|.
name|families
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ColumnDescriptor
name|col
init|=
name|ThriftUtilities
operator|.
name|colDescFromHbase
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|columns
operator|.
name|put
argument_list|(
name|col
operator|.
name|name
argument_list|,
name|col
argument_list|)
expr_stmt|;
block|}
return|return
name|columns
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
comment|//
comment|// Main program and support routines
comment|//
specifier|private
specifier|static
name|void
name|printUsageAndExit
parameter_list|()
block|{
name|printUsageAndExit
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|printUsageAndExit
parameter_list|(
specifier|final
name|String
name|message
parameter_list|)
block|{
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Usage: java org.apache.hadoop.hbase.thrift.ThriftServer "
operator|+
literal|"--help | [--port=PORT] start"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Arguments:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" start Start thrift server"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" stop  Stop thrift server"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Options:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" port  Port to listen on. Default: 9090"
argument_list|)
expr_stmt|;
comment|// System.out.println(" bind  Address to bind on. Default: 0.0.0.0.");
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" help  Print this message and exit"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/*    * Start up the REST servlet in standalone mode.    * @param args    */
specifier|protected
specifier|static
name|void
name|doMain
parameter_list|(
specifier|final
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|1
condition|)
block|{
name|printUsageAndExit
argument_list|()
expr_stmt|;
block|}
name|int
name|port
init|=
literal|9090
decl_stmt|;
comment|// String bindAddress = "0.0.0.0";
comment|// Process command-line args. TODO: Better cmd-line processing
comment|// (but hopefully something not as painful as cli options).
comment|//    final String addressArgKey = "--bind=";
specifier|final
name|String
name|portArgKey
init|=
literal|"--port="
decl_stmt|;
for|for
control|(
name|String
name|cmd
range|:
name|args
control|)
block|{
comment|//      if (cmd.startsWith(addressArgKey)) {
comment|//        bindAddress = cmd.substring(addressArgKey.length());
comment|//        continue;
comment|//      } else
if|if
condition|(
name|cmd
operator|.
name|startsWith
argument_list|(
name|portArgKey
argument_list|)
condition|)
block|{
name|port
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
name|portArgKey
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"--help"
argument_list|)
operator|||
name|cmd
operator|.
name|equals
argument_list|(
literal|"-h"
argument_list|)
condition|)
block|{
name|printUsageAndExit
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"start"
argument_list|)
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"stop"
argument_list|)
condition|)
block|{
name|printUsageAndExit
argument_list|(
literal|"To shutdown the thrift server run "
operator|+
literal|"bin/hbase-daemon.sh stop thrift or send a kill signal to "
operator|+
literal|"the thrift server pid"
argument_list|)
expr_stmt|;
block|}
comment|// Print out usage if we get to here.
name|printUsageAndExit
argument_list|()
expr_stmt|;
block|}
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"ThriftServer"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"starting HBase Thrift server on port "
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|port
argument_list|)
argument_list|)
expr_stmt|;
name|HBaseHandler
name|handler
init|=
operator|new
name|HBaseHandler
argument_list|()
decl_stmt|;
name|Hbase
operator|.
name|Processor
name|processor
init|=
operator|new
name|Hbase
operator|.
name|Processor
argument_list|(
name|handler
argument_list|)
decl_stmt|;
name|TServerTransport
name|serverTransport
init|=
operator|new
name|TServerSocket
argument_list|(
name|port
argument_list|)
decl_stmt|;
name|TProtocolFactory
name|protFactory
init|=
operator|new
name|TBinaryProtocol
operator|.
name|Factory
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|TServer
name|server
init|=
operator|new
name|TThreadPoolServer
argument_list|(
name|processor
argument_list|,
name|serverTransport
argument_list|,
name|protFactory
argument_list|)
decl_stmt|;
name|server
operator|.
name|serve
argument_list|()
expr_stmt|;
block|}
comment|/**    * @param args    * @throws Exception     */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|doMain
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

