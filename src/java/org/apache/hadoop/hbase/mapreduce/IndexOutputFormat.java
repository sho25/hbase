begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ImmutableBytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Similarity
import|;
end_import

begin_comment
comment|/**  * Create a local index, unwrap Lucene documents created by reduce, add them to  * the index, and copy the index to the destination.  */
end_comment

begin_class
specifier|public
class|class
name|IndexOutputFormat
extends|extends
name|FileOutputFormat
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|LuceneDocumentWrapper
argument_list|>
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|IndexOutputFormat
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Random generator. */
specifier|private
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
comment|/**    * Returns the record writer.    *     * @param context  The current task context.    * @return The record writer.    * @throws IOException When there is an issue with the writer.    * @see org.apache.hadoop.mapreduce.lib.output.FileOutputFormat#getRecordWriter(org.apache.hadoop.mapreduce.TaskAttemptContext)    */
annotation|@
name|Override
specifier|public
name|RecordWriter
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|LuceneDocumentWrapper
argument_list|>
name|getRecordWriter
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|perm
init|=
operator|new
name|Path
argument_list|(
name|FileOutputFormat
operator|.
name|getOutputPath
argument_list|(
name|context
argument_list|)
argument_list|,
name|FileOutputFormat
operator|.
name|getUniqueFile
argument_list|(
name|context
argument_list|,
literal|"part"
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
comment|// null for "dirsProp" means no predefined directories
specifier|final
name|Path
name|temp
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getLocalPath
argument_list|(
literal|"mapred.local.dir"
argument_list|,
literal|"index/_"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"To index into "
operator|+
name|perm
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|context
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
comment|// delete old, if any
name|fs
operator|.
name|delete
argument_list|(
name|perm
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|IndexConfiguration
name|indexConf
init|=
operator|new
name|IndexConfiguration
argument_list|()
decl_stmt|;
name|String
name|content
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
literal|"hbase.index.conf"
argument_list|)
decl_stmt|;
if|if
condition|(
name|content
operator|!=
literal|null
condition|)
block|{
name|indexConf
operator|.
name|addFromXML
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
name|String
name|analyzerName
init|=
name|indexConf
operator|.
name|getAnalyzerName
argument_list|()
decl_stmt|;
name|Analyzer
name|analyzer
decl_stmt|;
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|analyzerClass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|analyzerName
argument_list|)
decl_stmt|;
name|analyzer
operator|=
operator|(
name|Analyzer
operator|)
name|analyzerClass
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error in creating an analyzer object "
operator|+
name|analyzerName
argument_list|)
throw|;
block|}
comment|// build locally first
specifier|final
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|fs
operator|.
name|startLocalOutput
argument_list|(
name|perm
argument_list|,
name|temp
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|analyzer
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// no delete, so no need for maxBufferedDeleteTerms
name|writer
operator|.
name|setMaxBufferedDocs
argument_list|(
name|indexConf
operator|.
name|getMaxBufferedDocs
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|setMaxFieldLength
argument_list|(
name|indexConf
operator|.
name|getMaxFieldLength
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|setMaxMergeDocs
argument_list|(
name|indexConf
operator|.
name|getMaxMergeDocs
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|setMergeFactor
argument_list|(
name|indexConf
operator|.
name|getMergeFactor
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|similarityName
init|=
name|indexConf
operator|.
name|getSimilarityName
argument_list|()
decl_stmt|;
if|if
condition|(
name|similarityName
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|similarityClass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|similarityName
argument_list|)
decl_stmt|;
name|Similarity
name|similarity
init|=
operator|(
name|Similarity
operator|)
name|similarityClass
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|writer
operator|.
name|setSimilarity
argument_list|(
name|similarity
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error in creating a similarty object "
operator|+
name|similarityName
argument_list|)
throw|;
block|}
block|}
name|writer
operator|.
name|setUseCompoundFile
argument_list|(
name|indexConf
operator|.
name|isUseCompoundFile
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|IndexRecordWriter
argument_list|(
name|context
argument_list|,
name|fs
argument_list|,
name|writer
argument_list|,
name|indexConf
argument_list|,
name|perm
argument_list|,
name|temp
argument_list|)
return|;
block|}
block|}
end_class

end_unit

