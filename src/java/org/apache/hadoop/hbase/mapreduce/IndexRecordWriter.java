begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ImmutableBytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import

begin_comment
comment|/**  * Writes the records into a Lucene index writer.  */
end_comment

begin_class
specifier|public
class|class
name|IndexRecordWriter
extends|extends
name|RecordWriter
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|LuceneDocumentWrapper
argument_list|>
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|IndexRecordWriter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|long
name|docCount
init|=
literal|0
decl_stmt|;
specifier|private
name|TaskAttemptContext
name|context
init|=
literal|null
decl_stmt|;
specifier|private
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
specifier|private
name|IndexWriter
name|writer
init|=
literal|null
decl_stmt|;
specifier|private
name|IndexConfiguration
name|indexConf
init|=
literal|null
decl_stmt|;
specifier|private
name|Path
name|perm
init|=
literal|null
decl_stmt|;
specifier|private
name|Path
name|temp
init|=
literal|null
decl_stmt|;
comment|/**    * Creates a new instance.    *     * @param context  The task context.    * @param fs  The file system.    * @param writer  The index writer.    * @param indexConf  The index configuration.    * @param perm  The permanent path in the DFS.    * @param temp  The temporary local path.    */
specifier|public
name|IndexRecordWriter
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|IndexWriter
name|writer
parameter_list|,
name|IndexConfiguration
name|indexConf
parameter_list|,
name|Path
name|perm
parameter_list|,
name|Path
name|temp
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|writer
operator|=
name|writer
expr_stmt|;
name|this
operator|.
name|indexConf
operator|=
name|indexConf
expr_stmt|;
name|this
operator|.
name|perm
operator|=
name|perm
expr_stmt|;
name|this
operator|.
name|temp
operator|=
name|temp
expr_stmt|;
block|}
comment|/**    * Writes the record into an index.    *     * @param key  The current key.    * @param value  The current value.    * @throws IOException When the index is faulty.    * @see org.apache.hadoop.mapreduce.RecordWriter#write(java.lang.Object, java.lang.Object)    */
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|ImmutableBytesWritable
name|key
parameter_list|,
name|LuceneDocumentWrapper
name|value
parameter_list|)
throws|throws
name|IOException
block|{
comment|// unwrap and index doc
name|Document
name|doc
init|=
name|value
operator|.
name|get
argument_list|()
decl_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|docCount
operator|++
expr_stmt|;
name|context
operator|.
name|progress
argument_list|()
expr_stmt|;
block|}
comment|/**    * Closes the writer.    *     * @param context  The current context.    * @throws IOException When closing the writer fails.    * @see org.apache.hadoop.mapreduce.RecordWriter#close(org.apache.hadoop.mapreduce.TaskAttemptContext)    */
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
comment|// spawn a thread to give progress heartbeats
name|HeartbeatsThread
name|prog
init|=
operator|new
name|HeartbeatsThread
argument_list|()
decl_stmt|;
try|try
block|{
name|prog
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// optimize index
if|if
condition|(
name|indexConf
operator|.
name|doOptimize
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Optimizing index."
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|optimize
argument_list|()
expr_stmt|;
block|}
comment|// close index
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Done indexing "
operator|+
name|docCount
operator|+
literal|" docs."
argument_list|)
expr_stmt|;
block|}
comment|// copy to perm destination in dfs
name|fs
operator|.
name|completeLocalOutput
argument_list|(
name|perm
argument_list|,
name|temp
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Copy done."
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|prog
operator|.
name|setClosed
argument_list|()
expr_stmt|;
block|}
block|}
class|class
name|HeartbeatsThread
extends|extends
name|Thread
block|{
comment|/** Flag to track when to finish. */
specifier|private
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
comment|/**      * Runs the thread. Sending heart beats to the framework.      *       * @see java.lang.Runnable#run()      */
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|context
operator|.
name|setStatus
argument_list|(
literal|"Closing"
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|closed
condition|)
block|{
try|try
block|{
name|context
operator|.
name|progress
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
continue|continue;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
return|return;
block|}
block|}
block|}
comment|/**      * Switches the flag.       */
specifier|public
name|void
name|setClosed
parameter_list|()
block|{
name|closed
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

