begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_comment
comment|/**  * An HColumnDescriptor contains information about a column family such as the  * number of versions, compression settings, etc.  *   * It is used as input when creating a table or adding a column. Once set, the  * parameters that specify a column cannot be changed without deleting the  * column and recreating it. If there is data stored in the column, it will be  * deleted when the column is deleted.  */
end_comment

begin_class
specifier|public
class|class
name|HColumnDescriptor
implements|implements
name|WritableComparable
block|{
comment|// For future backward compatibility
comment|// Version 3 was when column names becaome byte arrays and when we picked up
comment|// Time-to-live feature.  Version 4 was when we moved to byte arrays, HBASE-82.
specifier|private
specifier|static
specifier|final
name|byte
name|COLUMN_DESCRIPTOR_VERSION
init|=
operator|(
name|byte
operator|)
literal|4
decl_stmt|;
comment|/**     * The type of compression.    * @see org.apache.hadoop.io.SequenceFile.Writer    */
specifier|public
specifier|static
enum|enum
name|CompressionType
block|{
comment|/** Do not compress records. */
name|NONE
block|,
comment|/** Compress values only, each separately. */
name|RECORD
block|,
comment|/** Compress sequences of records together in blocks. */
name|BLOCK
block|}
comment|/**    * Default compression type.    */
specifier|public
specifier|static
specifier|final
name|CompressionType
name|DEFAULT_COMPRESSION_TYPE
init|=
name|CompressionType
operator|.
name|NONE
decl_stmt|;
comment|/**    * Default number of versions of a record to keep.    */
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_N_VERSIONS
init|=
literal|3
decl_stmt|;
comment|/**    * Default setting for whether to serve from memory or not.    */
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_IN_MEMORY
init|=
literal|false
decl_stmt|;
comment|/**    * Default setting for whether to use a block cache or not.    */
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_BLOCK_CACHE_ENABLED
init|=
literal|false
decl_stmt|;
comment|/**    * Default maximum length of cell contents.    */
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_VALUE_LENGTH
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
comment|/**    * Default time to live of cell contents.    */
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_TIME_TO_LIVE
init|=
name|HConstants
operator|.
name|FOREVER
decl_stmt|;
comment|/**    * Default bloom filter description.    */
specifier|public
specifier|static
specifier|final
name|BloomFilterDescriptor
name|DEFAULT_BLOOM_FILTER_DESCRIPTOR
init|=
literal|null
decl_stmt|;
comment|// Column family name
specifier|private
name|byte
index|[]
name|name
decl_stmt|;
comment|// Number of versions to keep
specifier|private
name|int
name|maxVersions
init|=
name|DEFAULT_N_VERSIONS
decl_stmt|;
comment|// Compression setting if any
specifier|private
name|CompressionType
name|compressionType
init|=
name|DEFAULT_COMPRESSION_TYPE
decl_stmt|;
comment|// Serve reads from in-memory cache
specifier|private
name|boolean
name|inMemory
init|=
name|DEFAULT_IN_MEMORY
decl_stmt|;
comment|// Serve reads from in-memory block cache
specifier|private
name|boolean
name|blockCacheEnabled
init|=
name|DEFAULT_BLOCK_CACHE_ENABLED
decl_stmt|;
comment|// Maximum value size
specifier|private
name|int
name|maxValueLength
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
comment|// Time to live of cell contents, in seconds from last timestamp
specifier|private
name|int
name|timeToLive
init|=
name|HConstants
operator|.
name|FOREVER
decl_stmt|;
comment|// True if bloom filter was specified
specifier|private
name|boolean
name|bloomFilterSpecified
init|=
literal|false
decl_stmt|;
comment|// Descriptor of bloom filter
specifier|private
name|BloomFilterDescriptor
name|bloomFilter
init|=
name|DEFAULT_BLOOM_FILTER_DESCRIPTOR
decl_stmt|;
comment|/**    * Default constructor. Must be present for Writable.    */
specifier|public
name|HColumnDescriptor
parameter_list|()
block|{
name|this
operator|.
name|name
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Construct a column descriptor specifying only the family name     * The other attributes are defaulted.    *     * @param columnName - column family name    */
specifier|public
name|HColumnDescriptor
parameter_list|(
specifier|final
name|String
name|columnName
parameter_list|)
block|{
name|this
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|columnName
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Construct a column descriptor specifying only the family name     * The other attributes are defaulted.    *     * @param columnName - column family name    */
specifier|public
name|HColumnDescriptor
parameter_list|(
specifier|final
name|Text
name|columnName
parameter_list|)
block|{
name|this
argument_list|(
name|columnName
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Construct a column descriptor specifying only the family name     * The other attributes are defaulted.    *     * @param columnName Column family name.  Must have the ':' ending.    */
specifier|public
name|HColumnDescriptor
parameter_list|(
specifier|final
name|byte
index|[]
name|columnName
parameter_list|)
block|{
name|this
argument_list|(
name|columnName
operator|==
literal|null
operator|||
name|columnName
operator|.
name|length
operator|<=
literal|0
condition|?
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
else|:
name|columnName
argument_list|,
name|DEFAULT_N_VERSIONS
argument_list|,
name|DEFAULT_COMPRESSION_TYPE
argument_list|,
name|DEFAULT_IN_MEMORY
argument_list|,
name|DEFAULT_BLOCK_CACHE_ENABLED
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|DEFAULT_TIME_TO_LIVE
argument_list|,
name|DEFAULT_BLOOM_FILTER_DESCRIPTOR
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructor    * @param columnName Column family name.  Must have the ':' ending.    * @param maxVersions Maximum number of versions to keep    * @param compression Compression type    * @param inMemory If true, column data should be kept in an HRegionServer's    * cache    * @param blockCacheEnabled If true, MapFile blocks should be cached    * @param maxValueLength Restrict values to&lt;= this value    * @param timeToLive Time-to-live of cell contents, in seconds from last timestamp    * (use HConstants.FOREVER for unlimited TTL)    * @param bloomFilter Enable the specified bloom filter for this column    *     * @throws IllegalArgumentException if passed a family name that is made of     * other than 'word' characters: i.e.<code>[a-zA-Z_0-9]</code> and does not    * end in a<code>:</code>    * @throws IllegalArgumentException if the number of versions is&lt;= 0    */
specifier|public
name|HColumnDescriptor
parameter_list|(
specifier|final
name|byte
index|[]
name|columnName
parameter_list|,
specifier|final
name|int
name|maxVersions
parameter_list|,
specifier|final
name|CompressionType
name|compression
parameter_list|,
specifier|final
name|boolean
name|inMemory
parameter_list|,
specifier|final
name|boolean
name|blockCacheEnabled
parameter_list|,
specifier|final
name|int
name|maxValueLength
parameter_list|,
specifier|final
name|int
name|timeToLive
parameter_list|,
specifier|final
name|BloomFilterDescriptor
name|bloomFilter
parameter_list|)
block|{
name|isLegalFamilyName
argument_list|(
name|columnName
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|stripColon
argument_list|(
name|columnName
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxVersions
operator|<=
literal|0
condition|)
block|{
comment|// TODO: Allow maxVersion of 0 to be the way you say "Keep all versions".
comment|// Until there is support, consider 0 or< 0 -- a configuration error.
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Maximum versions must be positive"
argument_list|)
throw|;
block|}
name|this
operator|.
name|maxVersions
operator|=
name|maxVersions
expr_stmt|;
name|this
operator|.
name|inMemory
operator|=
name|inMemory
expr_stmt|;
name|this
operator|.
name|blockCacheEnabled
operator|=
name|blockCacheEnabled
expr_stmt|;
name|this
operator|.
name|maxValueLength
operator|=
name|maxValueLength
expr_stmt|;
name|this
operator|.
name|timeToLive
operator|=
name|timeToLive
expr_stmt|;
name|this
operator|.
name|bloomFilter
operator|=
name|bloomFilter
expr_stmt|;
name|this
operator|.
name|bloomFilterSpecified
operator|=
name|this
operator|.
name|bloomFilter
operator|==
literal|null
condition|?
literal|false
else|:
literal|true
expr_stmt|;
name|this
operator|.
name|compressionType
operator|=
name|compression
expr_stmt|;
block|}
specifier|private
specifier|static
name|byte
index|[]
name|stripColon
parameter_list|(
specifier|final
name|byte
index|[]
name|n
parameter_list|)
block|{
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|n
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
comment|// Have the stored family name be absent the colon delimiter
name|System
operator|.
name|arraycopy
argument_list|(
name|n
argument_list|,
literal|0
argument_list|,
name|result
argument_list|,
literal|0
argument_list|,
name|n
operator|.
name|length
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * @param b Family name.    * @return<code>b</code>    * @throws IllegalArgumentException If not null and not a legitimate family    * name: i.e. 'printable' and ends in a ':' (Null passes are allowed because    *<code>b</code> can be null when deserializing).    */
specifier|public
specifier|static
name|byte
index|[]
name|isLegalFamilyName
parameter_list|(
specifier|final
name|byte
index|[]
name|b
parameter_list|)
block|{
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
return|return
name|b
return|;
block|}
if|if
condition|(
name|b
index|[
name|b
operator|.
name|length
operator|-
literal|1
index|]
operator|!=
literal|':'
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Family names must end in a colon: "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|b
argument_list|)
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
operator|(
name|b
operator|.
name|length
operator|-
literal|1
operator|)
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|Character
operator|.
name|isLetterOrDigit
argument_list|(
name|b
index|[
name|i
index|]
argument_list|)
operator|||
name|b
index|[
name|i
index|]
operator|==
literal|'_'
operator|||
name|b
index|[
name|i
index|]
operator|==
literal|'.'
condition|)
block|{
continue|continue;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal character<"
operator|+
name|b
index|[
name|i
index|]
operator|+
literal|">. Family names  can only contain  'word characters' and must end"
operator|+
literal|"with a colon: "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|b
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|b
return|;
block|}
comment|/**    * @return Name of this column family    */
specifier|public
name|byte
index|[]
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/** @return compression type being used for the column family */
specifier|public
name|CompressionType
name|getCompression
parameter_list|()
block|{
return|return
name|this
operator|.
name|compressionType
return|;
block|}
comment|/** @return maximum number of versions */
specifier|public
name|int
name|getMaxVersions
parameter_list|()
block|{
return|return
name|this
operator|.
name|maxVersions
return|;
block|}
comment|/**    * @return Compression type setting.    */
specifier|public
name|CompressionType
name|getCompressionType
parameter_list|()
block|{
return|return
name|this
operator|.
name|compressionType
return|;
block|}
comment|/**    * @return True if we are to keep all in use HRegionServer cache.    */
specifier|public
name|boolean
name|isInMemory
parameter_list|()
block|{
return|return
name|this
operator|.
name|inMemory
return|;
block|}
comment|/**    * @return Maximum value length.    */
specifier|public
name|int
name|getMaxValueLength
parameter_list|()
block|{
return|return
name|this
operator|.
name|maxValueLength
return|;
block|}
comment|/**    * @return Time to live.    */
specifier|public
name|int
name|getTimeToLive
parameter_list|()
block|{
return|return
name|this
operator|.
name|timeToLive
return|;
block|}
comment|/**    * @return True if MapFile blocks should be cached.    */
specifier|public
name|boolean
name|isBlockCacheEnabled
parameter_list|()
block|{
return|return
name|blockCacheEnabled
return|;
block|}
comment|/**    * @return Bloom filter descriptor or null if none set.    */
specifier|public
name|BloomFilterDescriptor
name|getBloomFilter
parameter_list|()
block|{
return|return
name|this
operator|.
name|bloomFilter
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"{name: "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|name
argument_list|)
operator|+
literal|", max versions: "
operator|+
name|maxVersions
operator|+
literal|", compression: "
operator|+
name|this
operator|.
name|compressionType
operator|+
literal|", in memory: "
operator|+
name|inMemory
operator|+
literal|", block cache enabled: "
operator|+
name|blockCacheEnabled
operator|+
literal|", max length: "
operator|+
name|maxValueLength
operator|+
literal|", time to live: "
operator|+
operator|(
name|timeToLive
operator|==
name|HConstants
operator|.
name|FOREVER
condition|?
literal|"FOREVER"
else|:
name|Integer
operator|.
name|toString
argument_list|(
name|timeToLive
argument_list|)
operator|)
operator|+
literal|", bloom filter: "
operator|+
operator|(
name|bloomFilterSpecified
condition|?
name|bloomFilter
operator|.
name|toString
argument_list|()
else|:
literal|"none"
operator|)
operator|+
literal|"}"
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|compareTo
argument_list|(
name|obj
argument_list|)
operator|==
literal|0
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|Bytes
operator|.
name|hashCode
argument_list|(
name|this
operator|.
name|name
argument_list|)
decl_stmt|;
name|result
operator|^=
name|Integer
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|maxVersions
argument_list|)
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|^=
name|this
operator|.
name|compressionType
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|^=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|inMemory
argument_list|)
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|^=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|blockCacheEnabled
argument_list|)
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|^=
name|Integer
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|maxValueLength
argument_list|)
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|^=
name|Integer
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|timeToLive
argument_list|)
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|^=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|bloomFilterSpecified
argument_list|)
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|^=
name|Byte
operator|.
name|valueOf
argument_list|(
name|COLUMN_DESCRIPTOR_VERSION
argument_list|)
operator|.
name|hashCode
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|bloomFilterSpecified
condition|)
block|{
name|result
operator|^=
name|this
operator|.
name|bloomFilter
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|// Writable
comment|/** {@inheritDoc} */
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|versionNumber
init|=
name|in
operator|.
name|readByte
argument_list|()
decl_stmt|;
if|if
condition|(
name|versionNumber
operator|<=
literal|2
condition|)
block|{
name|Text
name|t
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|t
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|t
operator|.
name|getBytes
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|name
operator|=
name|Bytes
operator|.
name|readByteArray
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|maxVersions
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|int
name|ordinal
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|this
operator|.
name|compressionType
operator|=
name|CompressionType
operator|.
name|values
argument_list|()
index|[
name|ordinal
index|]
expr_stmt|;
name|this
operator|.
name|inMemory
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|this
operator|.
name|maxValueLength
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|this
operator|.
name|bloomFilterSpecified
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
if|if
condition|(
name|bloomFilterSpecified
condition|)
block|{
name|bloomFilter
operator|=
operator|new
name|BloomFilterDescriptor
argument_list|()
expr_stmt|;
name|bloomFilter
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|versionNumber
operator|>
literal|1
condition|)
block|{
name|this
operator|.
name|blockCacheEnabled
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|versionNumber
operator|>
literal|2
condition|)
block|{
name|this
operator|.
name|timeToLive
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** {@inheritDoc} */
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeByte
argument_list|(
name|COLUMN_DESCRIPTOR_VERSION
argument_list|)
expr_stmt|;
name|Bytes
operator|.
name|writeByteArray
argument_list|(
name|out
argument_list|,
name|this
operator|.
name|name
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|this
operator|.
name|maxVersions
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|this
operator|.
name|compressionType
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|this
operator|.
name|inMemory
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|this
operator|.
name|maxValueLength
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|this
operator|.
name|bloomFilterSpecified
argument_list|)
expr_stmt|;
if|if
condition|(
name|bloomFilterSpecified
condition|)
block|{
name|bloomFilter
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeBoolean
argument_list|(
name|this
operator|.
name|blockCacheEnabled
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|this
operator|.
name|timeToLive
argument_list|)
expr_stmt|;
block|}
comment|// Comparable
comment|/** {@inheritDoc} */
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|HColumnDescriptor
name|other
init|=
operator|(
name|HColumnDescriptor
operator|)
name|o
decl_stmt|;
name|int
name|result
init|=
name|Bytes
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|name
argument_list|,
name|other
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|0
condition|)
block|{
name|result
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|maxVersions
argument_list|)
operator|.
name|compareTo
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|other
operator|.
name|maxVersions
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|==
literal|0
condition|)
block|{
name|result
operator|=
name|this
operator|.
name|compressionType
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|compressionType
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|inMemory
operator|==
name|other
operator|.
name|inMemory
condition|)
block|{
name|result
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|inMemory
condition|)
block|{
name|result
operator|=
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
literal|1
expr_stmt|;
block|}
block|}
if|if
condition|(
name|result
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|blockCacheEnabled
operator|==
name|other
operator|.
name|blockCacheEnabled
condition|)
block|{
name|result
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|blockCacheEnabled
condition|)
block|{
name|result
operator|=
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
literal|1
expr_stmt|;
block|}
block|}
if|if
condition|(
name|result
operator|==
literal|0
condition|)
block|{
name|result
operator|=
name|other
operator|.
name|maxValueLength
operator|-
name|this
operator|.
name|maxValueLength
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|==
literal|0
condition|)
block|{
name|result
operator|=
name|other
operator|.
name|timeToLive
operator|-
name|this
operator|.
name|timeToLive
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|bloomFilterSpecified
operator|==
name|other
operator|.
name|bloomFilterSpecified
condition|)
block|{
name|result
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|bloomFilterSpecified
condition|)
block|{
name|result
operator|=
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
literal|1
expr_stmt|;
block|}
block|}
if|if
condition|(
name|result
operator|==
literal|0
operator|&&
name|this
operator|.
name|bloomFilterSpecified
condition|)
block|{
name|result
operator|=
name|this
operator|.
name|bloomFilter
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|bloomFilter
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

