begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2009 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|migration
operator|.
name|nineteen
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Migrate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
operator|.
name|DirFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|GenericOptionsParser
import|;
end_import

begin_comment
comment|/**  * Mapper that rewrites hbase 0.19 HStoreFiles as 0.20 StoreFiles.  * Creates passed directories as input and output.  On startup, it checks  * filesystem is 0.19 generation.  It then crawls the filesystem to find the  * files to migrate writing a file into the input directory.  Next it starts up  * the MR job to rewrite the 0.19 HStoreFiles as 0.20 StoreFiles deleting the  * old as it goes.  Presumption is that only  * one file per in the family Store else stuff breaks; i.e. the 0.19 install  * was major compacted before migration began.  */
end_comment

begin_class
specifier|public
class|class
name|HStoreFileToStoreFile
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HStoreFileToStoreFile
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JOBNAME
init|=
literal|"hsf2sf"
decl_stmt|;
specifier|public
specifier|static
class|class
name|Map
extends|extends
name|Mapper
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|,
name|LongWritable
argument_list|,
name|LongWritable
argument_list|>
block|{
specifier|protected
name|void
name|map
parameter_list|(
name|LongWritable
name|key
parameter_list|,
name|Text
name|value
parameter_list|,
name|Mapper
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|,
name|LongWritable
argument_list|,
name|LongWritable
argument_list|>
operator|.
name|Context
name|context
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|InterruptedException
block|{
name|HBaseConfiguration
name|c
init|=
operator|new
name|HBaseConfiguration
argument_list|(
name|context
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|Migrate
operator|.
name|rewrite
argument_list|(
name|c
argument_list|,
name|FileSystem
operator|.
name|get
argument_list|(
name|c
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|writeInputFiles
parameter_list|(
specifier|final
name|HBaseConfiguration
name|conf
parameter_list|,
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|FSUtils
operator|.
name|isPre020FileLayout
argument_list|(
name|fs
argument_list|,
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Not a pre-0.20 filesystem"
argument_list|)
throw|;
block|}
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|dir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Input exists -- please specify empty input dir"
argument_list|)
throw|;
block|}
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"mapfiles"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|gathermapfiles
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|gathermapfiles
parameter_list|(
specifier|final
name|HBaseConfiguration
name|conf
parameter_list|,
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|FSDataOutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Presumes any directory under hbase.rootdir is a table.
name|FileStatus
index|[]
name|tableDirs
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
argument_list|,
operator|new
name|DirFilter
argument_list|(
name|fs
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tableDirs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// Inside a table, there are compaction.dir directories to skip.
comment|// Otherwise, all else should be regions.  Then in each region, should
comment|// only be family directories.  Under each of these, should be a mapfile
comment|// and info directory and in these only one file.
name|Path
name|d
init|=
name|tableDirs
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|HConstants
operator|.
name|HREGION_LOGDIR_NAME
argument_list|)
condition|)
continue|continue;
name|FileStatus
index|[]
name|regionDirs
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|d
argument_list|,
operator|new
name|DirFilter
argument_list|(
name|fs
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|regionDirs
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|Path
name|dd
init|=
name|regionDirs
index|[
name|j
index|]
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|dd
operator|.
name|equals
argument_list|(
name|HConstants
operator|.
name|HREGION_COMPACTIONDIR_NAME
argument_list|)
condition|)
continue|continue;
comment|// Else its a region name.  Now look in region for families.
name|FileStatus
index|[]
name|familyDirs
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|dd
argument_list|,
operator|new
name|DirFilter
argument_list|(
name|fs
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|familyDirs
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
name|Path
name|family
init|=
name|familyDirs
index|[
name|k
index|]
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|FileStatus
index|[]
name|infoAndMapfile
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|family
argument_list|)
decl_stmt|;
comment|// Assert that only info and mapfile in family dir.
if|if
condition|(
name|infoAndMapfile
operator|.
name|length
operator|!=
literal|0
operator|&&
name|infoAndMapfile
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|family
operator|.
name|toString
argument_list|()
operator|+
literal|" has more than just info and mapfile: "
operator|+
name|infoAndMapfile
operator|.
name|length
argument_list|)
throw|;
block|}
comment|// Make sure directory named info or mapfile.
for|for
control|(
name|int
name|ll
init|=
literal|0
init|;
name|ll
operator|<
literal|2
condition|;
name|ll
operator|++
control|)
block|{
if|if
condition|(
name|infoAndMapfile
index|[
name|ll
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"info"
argument_list|)
operator|||
name|infoAndMapfile
index|[
name|ll
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"mapfiles"
argument_list|)
condition|)
continue|continue;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected directory name: "
operator|+
name|infoAndMapfile
index|[
name|ll
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
throw|;
block|}
comment|// Now in family, there are 'mapfile' and 'info' subdirs.  Just
comment|// look in the 'mapfile' subdir.
name|FileStatus
index|[]
name|familyStatus
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|family
argument_list|,
literal|"mapfiles"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|familyStatus
operator|.
name|length
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|family
operator|.
name|toString
argument_list|()
operator|+
literal|" has "
operator|+
name|familyStatus
operator|.
name|length
operator|+
literal|" files."
argument_list|)
throw|;
block|}
comment|// If we got here, then this is good.  Add the mapfile to out
name|String
name|str
init|=
name|familyStatus
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|makeQualified
argument_list|(
name|fs
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|str
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|str
operator|+
literal|"\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|HBaseConfiguration
name|conf
init|=
operator|new
name|HBaseConfiguration
argument_list|()
decl_stmt|;
name|String
index|[]
name|otherArgs
init|=
operator|new
name|GenericOptionsParser
argument_list|(
name|conf
argument_list|,
name|args
argument_list|)
operator|.
name|getRemainingArgs
argument_list|()
decl_stmt|;
if|if
condition|(
name|otherArgs
operator|.
name|length
operator|<
literal|2
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ERROR: Wrong number of parameters: "
operator|+
name|args
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: "
operator|+
name|HStoreFileToStoreFile
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"<inputdir><output>"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|Path
name|input
init|=
operator|new
name|Path
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|writeInputFiles
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
operator|new
name|Job
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|job
operator|.
name|setJarByClass
argument_list|(
name|HStoreFileToStoreFile
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setJobName
argument_list|(
name|JOBNAME
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|Map
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|job
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|Path
name|output
init|=
operator|new
name|Path
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|output
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
condition|?
literal|0
else|:
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

