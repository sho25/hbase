begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|migration
operator|.
name|nineteen
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|migration
operator|.
name|nineteen
operator|.
name|io
operator|.
name|BloomFilterMapFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|migration
operator|.
name|nineteen
operator|.
name|io
operator|.
name|HalfMapFileReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|migration
operator|.
name|nineteen
operator|.
name|io
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|MapFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
import|;
end_import

begin_comment
comment|/**  * A HStore data file.  HStores usually have one or more of these files.  They  * are produced by flushing the memcache to disk.  *  *<p>Each HStore maintains a bunch of different data files. The filename is a  * mix of the parent dir, the region name, the column name, and a file  * identifier. The name may also be a reference to a store file located  * elsewhere. This class handles all that path-building stuff for you.  *   *<p>An HStoreFile usually tracks 4 things: its parent dir, the region  * identifier, the column family, and the file identifier.  If you know those  * four things, you know how to obtain the right HStoreFile.  HStoreFiles may  * also reference store files in another region serving either from  * the top-half of the remote file or from the bottom-half.  Such references  * are made fast splitting regions.  *   *<p>Plain HStoreFiles are named for a randomly generated id as in:  *<code>1278437856009925445</code>  A file by this name is made in both the  *<code>mapfiles</code> and<code>info</code> subdirectories of a  * HStore columnfamily directoy: E.g. If the column family is 'anchor:', then  * under the region directory there is a subdirectory named 'anchor' within  * which is a 'mapfiles' and 'info' subdirectory.  In each will be found a  * file named something like<code>1278437856009925445</code>, one to hold the  * data in 'mapfiles' and one under 'info' that holds the sequence id for this  * store file.  *   *<p>References to store files located over in some other region look like  * this:  *<code>1278437856009925445.hbaserepository,qAReLZD-OyQORZWq_vqR1k==,959247014679548184</code>:  * i.e. an id followed by the name of the referenced region.  The data  * ('mapfiles') of HStoreFile references are empty. The accompanying  *<code>info</code> file contains the  * midkey, the id of the remote store we're referencing and whether we're  * to serve the top or bottom region of the remote store file.  Note, a region  * is not splitable if it has instances of store file references (References  * are cleaned up by compactions).  *   *<p>When merging or splitting HRegions, we might want to modify one of the   * params for an HStoreFile (effectively moving it elsewhere).  */
end_comment

begin_class
specifier|public
class|class
name|HStoreFile
implements|implements
name|HConstants
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HStoreFile
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|byte
name|INFO_SEQ_NUM
init|=
literal|0
decl_stmt|;
specifier|static
specifier|final
name|byte
name|MAJOR_COMPACTION
init|=
name|INFO_SEQ_NUM
operator|+
literal|1
decl_stmt|;
specifier|static
specifier|final
name|String
name|HSTORE_DATFILE_DIR
init|=
literal|"mapfiles"
decl_stmt|;
specifier|static
specifier|final
name|String
name|HSTORE_INFO_DIR
init|=
literal|"info"
decl_stmt|;
specifier|static
specifier|final
name|String
name|HSTORE_FILTER_DIR
init|=
literal|"filter"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Path
name|basedir
decl_stmt|;
specifier|private
specifier|final
name|int
name|encodedRegionName
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|colFamily
decl_stmt|;
specifier|private
specifier|final
name|long
name|fileId
decl_stmt|;
specifier|private
specifier|final
name|HBaseConfiguration
name|conf
decl_stmt|;
specifier|private
specifier|final
name|FileSystem
name|fs
decl_stmt|;
specifier|private
specifier|final
name|Reference
name|reference
decl_stmt|;
specifier|private
specifier|final
name|HRegionInfo
name|hri
decl_stmt|;
comment|/* If true, this file was product of a major compaction.    */
specifier|private
name|boolean
name|majorCompaction
init|=
literal|false
decl_stmt|;
specifier|private
name|long
name|indexLength
decl_stmt|;
comment|/**    * Constructor that fully initializes the object    * @param conf Configuration object    * @param basedir qualified path that is parent of region directory    * @param colFamily name of the column family    * @param fileId file identifier    * @param ref Reference to another HStoreFile.    * @param hri The region info for this file (HACK HBASE-868). TODO: Fix.    * @throws IOException    */
name|HStoreFile
parameter_list|(
name|HBaseConfiguration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Path
name|basedir
parameter_list|,
specifier|final
name|HRegionInfo
name|hri
parameter_list|,
name|byte
index|[]
name|colFamily
parameter_list|,
name|long
name|fileId
parameter_list|,
specifier|final
name|Reference
name|ref
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|basedir
argument_list|,
name|hri
argument_list|,
name|colFamily
argument_list|,
name|fileId
argument_list|,
name|ref
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructor that fully initializes the object    * @param conf Configuration object    * @param basedir qualified path that is parent of region directory    * @param colFamily name of the column family    * @param fileId file identifier    * @param ref Reference to another HStoreFile.    * @param hri The region info for this file (HACK HBASE-868). TODO: Fix.    * @param mc Try if this file was result of a major compression.    * @throws IOException    */
name|HStoreFile
parameter_list|(
name|HBaseConfiguration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Path
name|basedir
parameter_list|,
specifier|final
name|HRegionInfo
name|hri
parameter_list|,
name|byte
index|[]
name|colFamily
parameter_list|,
name|long
name|fileId
parameter_list|,
specifier|final
name|Reference
name|ref
parameter_list|,
specifier|final
name|boolean
name|mc
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|basedir
operator|=
name|basedir
expr_stmt|;
name|this
operator|.
name|encodedRegionName
operator|=
name|hri
operator|.
name|getEncodedName
argument_list|()
expr_stmt|;
name|this
operator|.
name|colFamily
operator|=
name|colFamily
expr_stmt|;
name|this
operator|.
name|hri
operator|=
name|hri
expr_stmt|;
name|long
name|id
init|=
name|fileId
decl_stmt|;
if|if
condition|(
name|id
operator|==
operator|-
literal|1
condition|)
block|{
name|Path
name|mapdir
init|=
name|HStoreFile
operator|.
name|getMapDir
argument_list|(
name|basedir
argument_list|,
name|encodedRegionName
argument_list|,
name|colFamily
argument_list|)
decl_stmt|;
name|Path
name|testpath
init|=
literal|null
decl_stmt|;
do|do
block|{
name|id
operator|=
name|Math
operator|.
name|abs
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
name|testpath
operator|=
operator|new
name|Path
argument_list|(
name|mapdir
argument_list|,
name|createHStoreFilename
argument_list|(
name|id
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|testpath
argument_list|)
condition|)
do|;
block|}
name|this
operator|.
name|fileId
operator|=
name|id
expr_stmt|;
comment|// If a reference, construction does not write the pointer files.  Thats
comment|// done by invocations of writeReferenceFiles(hsf, fs). Happens at split.
name|this
operator|.
name|reference
operator|=
name|ref
expr_stmt|;
name|this
operator|.
name|majorCompaction
operator|=
name|mc
expr_stmt|;
block|}
comment|/** @return the region name */
name|boolean
name|isReference
parameter_list|()
block|{
return|return
name|reference
operator|!=
literal|null
return|;
block|}
name|Reference
name|getReference
parameter_list|()
block|{
return|return
name|reference
return|;
block|}
name|int
name|getEncodedRegionName
parameter_list|()
block|{
return|return
name|this
operator|.
name|encodedRegionName
return|;
block|}
comment|/** @return the column family */
name|byte
index|[]
name|getColFamily
parameter_list|()
block|{
return|return
name|colFamily
return|;
block|}
comment|/** @return the file identifier */
name|long
name|getFileId
parameter_list|()
block|{
return|return
name|fileId
return|;
block|}
comment|// Build full filenames from those components
comment|/** @return path for MapFile */
name|Path
name|getMapFilePath
parameter_list|()
block|{
if|if
condition|(
name|isReference
argument_list|()
condition|)
block|{
return|return
name|getMapFilePath
argument_list|(
name|encodedRegionName
argument_list|,
name|fileId
argument_list|,
name|reference
operator|.
name|getEncodedRegionName
argument_list|()
argument_list|)
return|;
block|}
return|return
name|getMapFilePath
argument_list|(
name|this
operator|.
name|encodedRegionName
argument_list|,
name|fileId
argument_list|)
return|;
block|}
specifier|private
name|Path
name|getMapFilePath
parameter_list|(
specifier|final
name|Reference
name|r
parameter_list|)
block|{
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
return|return
name|getMapFilePath
argument_list|()
return|;
block|}
return|return
name|getMapFilePath
argument_list|(
name|r
operator|.
name|getEncodedRegionName
argument_list|()
argument_list|,
name|r
operator|.
name|getFileId
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|Path
name|getMapFilePath
parameter_list|(
specifier|final
name|int
name|encodedName
parameter_list|,
specifier|final
name|long
name|fid
parameter_list|)
block|{
return|return
name|getMapFilePath
argument_list|(
name|encodedName
argument_list|,
name|fid
argument_list|,
name|HRegionInfo
operator|.
name|NO_HASH
argument_list|)
return|;
block|}
specifier|private
name|Path
name|getMapFilePath
parameter_list|(
specifier|final
name|int
name|encodedName
parameter_list|,
specifier|final
name|long
name|fid
parameter_list|,
specifier|final
name|int
name|ern
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|HStoreFile
operator|.
name|getMapDir
argument_list|(
name|basedir
argument_list|,
name|encodedName
argument_list|,
name|colFamily
argument_list|)
argument_list|,
name|createHStoreFilename
argument_list|(
name|fid
argument_list|,
name|ern
argument_list|)
argument_list|)
return|;
block|}
comment|/** @return path for info file */
name|Path
name|getInfoFilePath
parameter_list|()
block|{
if|if
condition|(
name|isReference
argument_list|()
condition|)
block|{
return|return
name|getInfoFilePath
argument_list|(
name|encodedRegionName
argument_list|,
name|fileId
argument_list|,
name|reference
operator|.
name|getEncodedRegionName
argument_list|()
argument_list|)
return|;
block|}
return|return
name|getInfoFilePath
argument_list|(
name|encodedRegionName
argument_list|,
name|fileId
argument_list|)
return|;
block|}
specifier|private
name|Path
name|getInfoFilePath
parameter_list|(
specifier|final
name|int
name|encodedName
parameter_list|,
specifier|final
name|long
name|fid
parameter_list|)
block|{
return|return
name|getInfoFilePath
argument_list|(
name|encodedName
argument_list|,
name|fid
argument_list|,
name|HRegionInfo
operator|.
name|NO_HASH
argument_list|)
return|;
block|}
specifier|private
name|Path
name|getInfoFilePath
parameter_list|(
specifier|final
name|int
name|encodedName
parameter_list|,
specifier|final
name|long
name|fid
parameter_list|,
specifier|final
name|int
name|ern
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|HStoreFile
operator|.
name|getInfoDir
argument_list|(
name|basedir
argument_list|,
name|encodedName
argument_list|,
name|colFamily
argument_list|)
argument_list|,
name|createHStoreFilename
argument_list|(
name|fid
argument_list|,
name|ern
argument_list|)
argument_list|)
return|;
block|}
comment|// File handling
comment|/*    * Split by making two new store files that reference top and bottom regions    * of original store file.    * @param midKey    * @param dstA    * @param dstB    * @param fs    * @param c    * @throws IOException    *    * @param midKey the key which will be the starting key of the second region    * @param dstA the file which will contain keys from the start of the source    * @param dstB the file which will contain keys from midKey to end of source    * @param fs file system    * @param c configuration    * @throws IOException    */
name|void
name|splitStoreFile
parameter_list|(
specifier|final
name|HStoreFile
name|dstA
parameter_list|,
specifier|final
name|HStoreFile
name|dstB
parameter_list|,
specifier|final
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|dstA
operator|.
name|writeReferenceFiles
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|dstB
operator|.
name|writeReferenceFiles
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
name|void
name|writeReferenceFiles
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|createOrFail
argument_list|(
name|fs
argument_list|,
name|getMapFilePath
argument_list|()
argument_list|)
expr_stmt|;
name|writeSplitInfo
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
comment|/*    * If reference, create and write the remote store file id, the midkey and    * whether we're going against the top file region of the referent out to    * the info file.     * @param p Path to info file.    * @param hsf    * @param fs    * @throws IOException    */
specifier|private
name|void
name|writeSplitInfo
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|p
init|=
name|getInfoFilePath
argument_list|()
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|p
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"File already exists "
operator|+
name|p
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|p
argument_list|)
decl_stmt|;
try|try
block|{
name|reference
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * @see #writeSplitInfo(FileSystem fs)    */
specifier|static
name|Reference
name|readSplitInfo
parameter_list|(
specifier|final
name|Path
name|p
parameter_list|,
specifier|final
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|p
argument_list|)
decl_stmt|;
try|try
block|{
name|Reference
name|r
init|=
operator|new
name|Reference
argument_list|()
decl_stmt|;
name|r
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|createOrFail
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|p
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"File already exists "
operator|+
name|p
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|fs
operator|.
name|createNewFile
argument_list|(
name|p
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed create of "
operator|+
name|p
argument_list|)
throw|;
block|}
block|}
comment|/**     * Reads in an info file    *    * @param filesystem file system    * @return The sequence id contained in the info file    * @throws IOException    */
name|long
name|loadInfo
parameter_list|(
specifier|final
name|FileSystem
name|filesystem
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|p
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isReference
argument_list|()
condition|)
block|{
name|p
operator|=
name|getInfoFilePath
argument_list|(
name|reference
operator|.
name|getEncodedRegionName
argument_list|()
argument_list|,
name|this
operator|.
name|reference
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|p
operator|=
name|getInfoFilePath
argument_list|()
expr_stmt|;
block|}
name|long
name|length
init|=
name|filesystem
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|boolean
name|hasMoreThanSeqNum
init|=
name|length
operator|>
operator|(
name|Byte
operator|.
name|SIZE
operator|+
name|Bytes
operator|.
name|SIZEOF_LONG
operator|)
decl_stmt|;
name|DataInputStream
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
name|filesystem
operator|.
name|open
argument_list|(
name|p
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|byte
name|flag
init|=
name|in
operator|.
name|readByte
argument_list|()
decl_stmt|;
if|if
condition|(
name|flag
operator|==
name|INFO_SEQ_NUM
condition|)
block|{
if|if
condition|(
name|hasMoreThanSeqNum
condition|)
block|{
name|flag
operator|=
name|in
operator|.
name|readByte
argument_list|()
expr_stmt|;
if|if
condition|(
name|flag
operator|==
name|MAJOR_COMPACTION
condition|)
block|{
name|this
operator|.
name|majorCompaction
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|in
operator|.
name|readLong
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot process log file: "
operator|+
name|p
argument_list|)
throw|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Writes the file-identifier to disk    *     * @param filesystem file system    * @param infonum file id    * @throws IOException    */
name|void
name|writeInfo
parameter_list|(
specifier|final
name|FileSystem
name|filesystem
parameter_list|,
specifier|final
name|long
name|infonum
parameter_list|)
throws|throws
name|IOException
block|{
name|writeInfo
argument_list|(
name|filesystem
argument_list|,
name|infonum
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Writes the file-identifier to disk    *     * @param filesystem file system    * @param infonum file id    * @param mc True if this file is product of a major compaction    * @throws IOException    */
name|void
name|writeInfo
parameter_list|(
specifier|final
name|FileSystem
name|filesystem
parameter_list|,
specifier|final
name|long
name|infonum
parameter_list|,
specifier|final
name|boolean
name|mc
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|p
init|=
name|getInfoFilePath
argument_list|()
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|filesystem
operator|.
name|create
argument_list|(
name|p
argument_list|)
decl_stmt|;
try|try
block|{
name|out
operator|.
name|writeByte
argument_list|(
name|INFO_SEQ_NUM
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|infonum
argument_list|)
expr_stmt|;
if|if
condition|(
name|mc
condition|)
block|{
comment|// Set whether major compaction flag on this file.
name|this
operator|.
name|majorCompaction
operator|=
name|mc
expr_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
name|MAJOR_COMPACTION
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|mc
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Delete store map files.    * @throws IOException     */
specifier|public
name|void
name|delete
parameter_list|()
throws|throws
name|IOException
block|{
name|fs
operator|.
name|delete
argument_list|(
name|getMapFilePath
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|getInfoFilePath
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Renames the mapfiles and info directories under the passed    *<code>hsf</code> directory.    * @param fs    * @param hsf    * @return True if succeeded.    * @throws IOException    */
specifier|public
name|boolean
name|rename
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|HStoreFile
name|hsf
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|src
init|=
name|getMapFilePath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|src
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|src
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|boolean
name|success
init|=
name|fs
operator|.
name|rename
argument_list|(
name|src
argument_list|,
name|hsf
operator|.
name|getMapFilePath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed rename of "
operator|+
name|src
operator|+
literal|" to "
operator|+
name|hsf
operator|.
name|getMapFilePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|src
operator|=
name|getInfoFilePath
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|src
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|src
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|success
operator|=
name|fs
operator|.
name|rename
argument_list|(
name|src
argument_list|,
name|hsf
operator|.
name|getInfoFilePath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed rename of "
operator|+
name|src
operator|+
literal|" to "
operator|+
name|hsf
operator|.
name|getInfoFilePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|success
return|;
block|}
comment|/**    * Get reader for the store file map file.    * Client is responsible for closing file when done.    * @param fs    * @param bloomFilter If true, a bloom filter exists    * @param blockCacheEnabled If true, MapFile blocks should be cached.    * @return BloomFilterMapFile.Reader    * @throws IOException    */
specifier|public
specifier|synchronized
name|BloomFilterMapFile
operator|.
name|Reader
name|getReader
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|boolean
name|bloomFilter
parameter_list|,
specifier|final
name|boolean
name|blockCacheEnabled
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isReference
argument_list|()
condition|)
block|{
return|return
operator|new
name|HalfMapFileReader
argument_list|(
name|fs
argument_list|,
name|getMapFilePath
argument_list|(
name|reference
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|conf
argument_list|,
name|reference
operator|.
name|getFileRegion
argument_list|()
argument_list|,
name|reference
operator|.
name|getMidkey
argument_list|()
argument_list|,
name|bloomFilter
argument_list|,
name|blockCacheEnabled
argument_list|,
name|this
operator|.
name|hri
argument_list|)
return|;
block|}
return|return
operator|new
name|BloomFilterMapFile
operator|.
name|Reader
argument_list|(
name|fs
argument_list|,
name|getMapFilePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|conf
argument_list|,
name|bloomFilter
argument_list|,
name|blockCacheEnabled
argument_list|,
name|this
operator|.
name|hri
argument_list|)
return|;
block|}
comment|/**    * Get a store file writer.    * Client is responsible for closing file when done.    * @param fs    * @param compression Pass<code>SequenceFile.CompressionType.NONE</code>    * for none.    * @param bloomFilter If true, create a bloom filter    * @param nrows number of rows expected. Required if bloomFilter is true.    * @return MapFile.Writer    * @throws IOException    */
specifier|public
name|MapFile
operator|.
name|Writer
name|getWriter
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|SequenceFile
operator|.
name|CompressionType
name|compression
parameter_list|,
specifier|final
name|boolean
name|bloomFilter
parameter_list|,
name|int
name|nrows
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isReference
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Illegal Access: Cannot get a writer on a"
operator|+
literal|"HStoreFile reference"
argument_list|)
throw|;
block|}
return|return
operator|new
name|BloomFilterMapFile
operator|.
name|Writer
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|getMapFilePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|compression
argument_list|,
name|bloomFilter
argument_list|,
name|nrows
argument_list|,
name|this
operator|.
name|hri
argument_list|)
return|;
block|}
comment|/**    * @return Length of the store map file.  If a reference, size is    * approximation.    * @throws IOException    */
specifier|public
name|long
name|length
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|getMapFilePath
argument_list|(
name|reference
argument_list|)
argument_list|,
name|MapFile
operator|.
name|DATA_FILE_NAME
argument_list|)
decl_stmt|;
name|long
name|l
init|=
name|p
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
return|return
operator|(
name|isReference
argument_list|()
operator|)
condition|?
name|l
operator|/
literal|2
else|:
name|l
return|;
block|}
comment|/**    * @return Length of the store map file index.    * @throws IOException    */
specifier|public
specifier|synchronized
name|long
name|indexLength
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|indexLength
operator|==
literal|0
condition|)
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|getMapFilePath
argument_list|(
name|reference
argument_list|)
argument_list|,
name|MapFile
operator|.
name|INDEX_FILE_NAME
argument_list|)
decl_stmt|;
name|indexLength
operator|=
name|p
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
operator|.
name|getLen
argument_list|()
expr_stmt|;
block|}
return|return
name|indexLength
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|encodedRegionName
operator|+
literal|"/"
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|colFamily
argument_list|)
operator|+
literal|"/"
operator|+
name|fileId
operator|+
operator|(
name|isReference
argument_list|()
condition|?
literal|"-"
operator|+
name|reference
operator|.
name|toString
argument_list|()
else|:
literal|""
operator|)
return|;
block|}
comment|/**    * @return True if this file was made by a major compaction.    */
specifier|public
name|boolean
name|isMajorCompaction
parameter_list|()
block|{
return|return
name|this
operator|.
name|majorCompaction
return|;
block|}
specifier|private
specifier|static
name|String
name|createHStoreFilename
parameter_list|(
specifier|final
name|long
name|fid
parameter_list|,
specifier|final
name|int
name|encodedRegionName
parameter_list|)
block|{
return|return
name|Long
operator|.
name|toString
argument_list|(
name|fid
argument_list|)
operator|+
operator|(
operator|(
name|encodedRegionName
operator|!=
name|HRegionInfo
operator|.
name|NO_HASH
operator|)
condition|?
literal|"."
operator|+
name|encodedRegionName
else|:
literal|""
operator|)
return|;
block|}
comment|/**    * @param dir Base directory    * @param encodedRegionName Encoding of region name.    * @param f Column family.    * @return path for map file directory    */
specifier|public
specifier|static
name|Path
name|getMapDir
parameter_list|(
name|Path
name|dir
parameter_list|,
name|int
name|encodedRegionName
parameter_list|,
specifier|final
name|byte
index|[]
name|f
parameter_list|)
block|{
return|return
name|getFamilySubDir
argument_list|(
name|dir
argument_list|,
name|encodedRegionName
argument_list|,
name|f
argument_list|,
name|HSTORE_DATFILE_DIR
argument_list|)
return|;
block|}
comment|/**    * @param dir Base directory    * @param encodedRegionName Encoding of region name.    * @param f Column family.    * @return the info directory path    */
specifier|public
specifier|static
name|Path
name|getInfoDir
parameter_list|(
name|Path
name|dir
parameter_list|,
name|int
name|encodedRegionName
parameter_list|,
name|byte
index|[]
name|f
parameter_list|)
block|{
return|return
name|getFamilySubDir
argument_list|(
name|dir
argument_list|,
name|encodedRegionName
argument_list|,
name|f
argument_list|,
name|HSTORE_INFO_DIR
argument_list|)
return|;
block|}
comment|/**    * @param dir Base directory    * @param encodedRegionName Encoding of region name.    * @param f Column family.    * @return the bloom filter directory path    */
annotation|@
name|Deprecated
specifier|public
specifier|static
name|Path
name|getFilterDir
parameter_list|(
name|Path
name|dir
parameter_list|,
name|int
name|encodedRegionName
parameter_list|,
specifier|final
name|byte
index|[]
name|f
parameter_list|)
block|{
return|return
name|getFamilySubDir
argument_list|(
name|dir
argument_list|,
name|encodedRegionName
argument_list|,
name|f
argument_list|,
name|HSTORE_FILTER_DIR
argument_list|)
return|;
block|}
comment|/*    * @param base Base directory    * @param encodedRegionName Encoding of region name.    * @param f Column family.    * @param subdir Subdirectory to create under column family/store directory.    * @return    */
specifier|private
specifier|static
name|Path
name|getFamilySubDir
parameter_list|(
specifier|final
name|Path
name|base
parameter_list|,
specifier|final
name|int
name|encodedRegionName
parameter_list|,
specifier|final
name|byte
index|[]
name|f
parameter_list|,
specifier|final
name|String
name|subdir
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|base
argument_list|,
operator|new
name|Path
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|encodedRegionName
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|f
argument_list|)
argument_list|,
name|subdir
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

