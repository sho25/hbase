begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2006-7 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/*******************************************************************************  * HMaster is the "master server" for a HBase.  * There is only one HMaster for a single HBase deployment.  ******************************************************************************/
end_comment

begin_class
specifier|public
class|class
name|HMaster
extends|extends
name|HGlobals
implements|implements
name|HConstants
implements|,
name|HMasterInterface
implements|,
name|HMasterRegionInterface
block|{
specifier|private
name|boolean
name|closed
decl_stmt|;
specifier|private
name|Path
name|dir
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|FileSystem
name|fs
decl_stmt|;
specifier|private
name|Random
name|rand
decl_stmt|;
specifier|private
name|long
name|maxRegionOpenTime
decl_stmt|;
comment|// The 'msgQueue' is used to assign work to the client processor thread
specifier|private
name|Vector
argument_list|<
name|PendingOperation
argument_list|>
name|msgQueue
decl_stmt|;
specifier|private
name|Leases
name|serverLeases
decl_stmt|;
specifier|private
name|Server
name|server
decl_stmt|;
specifier|private
name|HClient
name|client
decl_stmt|;
specifier|private
name|long
name|metaRescanInterval
decl_stmt|;
specifier|private
name|HServerAddress
name|rootRegionLocation
decl_stmt|;
comment|//////////////////////////////////////////////////////////////////////////////
comment|// The ROOT/META scans, performed each time a meta region comes on-line
comment|// Since both have identical structure, we only need one class to get the work
comment|// done, however we have to create separate objects for each.
comment|//////////////////////////////////////////////////////////////////////////////
specifier|private
name|boolean
name|rootScanned
decl_stmt|;
specifier|private
name|int
name|numMetaRegions
decl_stmt|;
comment|/**    * How do we know if all regions are assigned?    *     * 1. After the initial scan of the root and meta regions, all regions known    *    at that time will have been or are in the process of being assigned.    *     * 2. When a region is split the region server notifies the master of the split    *    and the new regions are assigned. But suppose the master loses the split    *    message? We need to periodically rescan the root and meta regions.    *        *    - If we rescan, any regions that are new but not assigned will have no    *      server info. Any regions that are not being served by the same server    *      will get re-assigned.    *          *      - Thus a periodic rescan of the root region will find any new meta    *        regions where we missed the meta split message or we failed to detect    *        a server death and consequently need to assign the region to a new    *        server.    *            *      - if we keep track of all the known meta regions, then we can rescan    *        them periodically. If we do this then we can detect an regions for    *        which we missed a region split message.    *            * Thus just keeping track of all the meta regions permits periodic rescanning    * which will detect unassigned regions (new or otherwise) without the need to    * keep track of every region.    *     * So the root region scanner needs to wake up    * 1. when the master receives notification that the root region has been opened.    * 2. periodically after the first scan    *     * The meta scanner needs to wake up:    * 1. when a meta region comes on line    * 2. periodically to rescan the known meta regions    *     * A meta region is not 'known' until it has been scanned once.    *            */
specifier|private
class|class
name|RootScanner
implements|implements
name|Runnable
block|{
specifier|public
name|RootScanner
parameter_list|()
block|{     }
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Text
name|cols
index|[]
init|=
block|{
name|ROOT_COLUMN_FAMILY
block|}
decl_stmt|;
name|Text
name|firstRow
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
operator|!
name|closed
operator|)
condition|)
block|{
name|int
name|metaRegions
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|rootRegionLocation
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|rootRegionLocation
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{           }
block|}
name|HRegionInterface
name|server
init|=
literal|null
decl_stmt|;
name|HScannerInterface
name|scanner
init|=
literal|null
decl_stmt|;
try|try
block|{
name|server
operator|=
name|client
operator|.
name|getHRegionConnection
argument_list|(
name|rootRegionLocation
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|server
operator|.
name|openScanner
argument_list|(
name|rootRegionInfo
operator|.
name|regionName
argument_list|,
name|cols
argument_list|,
name|firstRow
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|iex
parameter_list|)
block|{
try|try
block|{
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|iex2
parameter_list|)
block|{           }
break|break;
block|}
try|try
block|{
name|HStoreKey
name|key
init|=
operator|new
name|HStoreKey
argument_list|()
decl_stmt|;
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|results
init|=
operator|new
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|DataInputBuffer
name|inbuf
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
while|while
condition|(
name|scanner
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|results
argument_list|)
condition|)
block|{
name|byte
name|hRegionInfoBytes
index|[]
init|=
name|results
operator|.
name|get
argument_list|(
name|ROOT_COL_REGIONINFO
argument_list|)
decl_stmt|;
name|inbuf
operator|.
name|reset
argument_list|(
name|hRegionInfoBytes
argument_list|,
name|hRegionInfoBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|HRegionInfo
name|info
init|=
operator|new
name|HRegionInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|readFields
argument_list|(
name|inbuf
argument_list|)
expr_stmt|;
name|byte
name|serverBytes
index|[]
init|=
name|results
operator|.
name|get
argument_list|(
name|ROOT_COL_SERVER
argument_list|)
decl_stmt|;
name|String
name|serverName
init|=
operator|new
name|String
argument_list|(
name|serverBytes
argument_list|,
name|UTF8_ENCODING
argument_list|)
decl_stmt|;
name|byte
name|startCodeBytes
index|[]
init|=
name|results
operator|.
name|get
argument_list|(
name|ROOT_COL_STARTCODE
argument_list|)
decl_stmt|;
name|long
name|startCode
init|=
name|Long
operator|.
name|decode
argument_list|(
operator|new
name|String
argument_list|(
name|startCodeBytes
argument_list|,
name|UTF8_ENCODING
argument_list|)
argument_list|)
decl_stmt|;
comment|// Note META region to load.
name|HServerInfo
name|storedInfo
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|serversToServerInfo
init|)
block|{
name|storedInfo
operator|=
name|serversToServerInfo
operator|.
name|get
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
if|if
condition|(
name|storedInfo
operator|==
literal|null
operator|||
name|storedInfo
operator|.
name|getStartCode
argument_list|()
operator|!=
name|startCode
condition|)
block|{
comment|// The current assignment is no good; load the region.
synchronized|synchronized
init|(
name|unassignedRegions
init|)
block|{
name|unassignedRegions
operator|.
name|put
argument_list|(
name|info
operator|.
name|regionName
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|assignAttempts
operator|.
name|put
argument_list|(
name|info
operator|.
name|regionName
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
name|metaRegions
operator|+=
literal|1
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|iex
parameter_list|)
block|{         }
finally|finally
block|{
try|try
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|iex2
parameter_list|)
block|{           }
block|}
name|rootScanned
operator|=
literal|true
expr_stmt|;
name|numMetaRegions
operator|=
name|metaRegions
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|metaRescanInterval
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{         }
block|}
block|}
block|}
specifier|private
name|RootScanner
name|rootScanner
decl_stmt|;
specifier|private
name|Thread
name|rootScannerThread
decl_stmt|;
comment|/** Contains information the meta scanner needs to process a "new" meta region */
specifier|private
class|class
name|MetaRegion
block|{
specifier|public
name|HServerAddress
name|server
decl_stmt|;
specifier|public
name|Text
name|regionName
decl_stmt|;
specifier|public
name|Text
name|startKey
decl_stmt|;
block|}
comment|/** Work for the meta scanner is queued up here */
specifier|private
name|Vector
argument_list|<
name|MetaRegion
argument_list|>
name|metaRegionsToScan
decl_stmt|;
specifier|private
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|MetaRegion
argument_list|>
name|knownMetaRegions
decl_stmt|;
specifier|private
name|Boolean
name|allMetaRegionsScanned
decl_stmt|;
comment|/**    * MetaScanner scans a region either in the META table.    *     * When a meta server comes on line, a MetaRegion object is queued up by    * regionServerReport() and this thread wakes up.    *    * It's important to do this work in a separate thread, or else the blocking     * action would prevent other work from getting done.    */
specifier|private
class|class
name|MetaScanner
implements|implements
name|Runnable
block|{
specifier|private
specifier|final
name|Text
name|cols
index|[]
init|=
block|{
name|META_COLUMN_FAMILY
block|}
decl_stmt|;
specifier|private
specifier|final
name|Text
name|firstRow
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
specifier|public
name|MetaScanner
parameter_list|()
block|{     }
specifier|private
name|void
name|scanRegion
parameter_list|(
name|MetaRegion
name|region
parameter_list|)
block|{
name|HRegionInterface
name|server
init|=
literal|null
decl_stmt|;
name|HScannerInterface
name|scanner
init|=
literal|null
decl_stmt|;
try|try
block|{
name|server
operator|=
name|client
operator|.
name|getHRegionConnection
argument_list|(
name|region
operator|.
name|server
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|server
operator|.
name|openScanner
argument_list|(
name|region
operator|.
name|regionName
argument_list|,
name|cols
argument_list|,
name|firstRow
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|iex
parameter_list|)
block|{
try|try
block|{
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|iex2
parameter_list|)
block|{         }
return|return;
block|}
try|try
block|{
name|HStoreKey
name|key
init|=
operator|new
name|HStoreKey
argument_list|()
decl_stmt|;
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|results
init|=
operator|new
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|DataInputBuffer
name|inbuf
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
while|while
condition|(
name|scanner
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|results
argument_list|)
condition|)
block|{
name|byte
name|hRegionInfoBytes
index|[]
init|=
name|results
operator|.
name|get
argument_list|(
name|META_COL_REGIONINFO
argument_list|)
decl_stmt|;
name|inbuf
operator|.
name|reset
argument_list|(
name|hRegionInfoBytes
argument_list|,
name|hRegionInfoBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|HRegionInfo
name|info
init|=
operator|new
name|HRegionInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|readFields
argument_list|(
name|inbuf
argument_list|)
expr_stmt|;
name|byte
name|serverBytes
index|[]
init|=
name|results
operator|.
name|get
argument_list|(
name|META_COL_SERVER
argument_list|)
decl_stmt|;
name|String
name|serverName
init|=
operator|new
name|String
argument_list|(
name|serverBytes
argument_list|,
name|UTF8_ENCODING
argument_list|)
decl_stmt|;
name|byte
name|startCodeBytes
index|[]
init|=
name|results
operator|.
name|get
argument_list|(
name|META_COL_STARTCODE
argument_list|)
decl_stmt|;
name|long
name|startCode
init|=
name|Long
operator|.
name|decode
argument_list|(
operator|new
name|String
argument_list|(
name|startCodeBytes
argument_list|,
name|UTF8_ENCODING
argument_list|)
argument_list|)
decl_stmt|;
comment|// Note HRegion to load.
name|HServerInfo
name|storedInfo
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|serversToServerInfo
init|)
block|{
name|storedInfo
operator|=
name|serversToServerInfo
operator|.
name|get
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
if|if
condition|(
name|storedInfo
operator|==
literal|null
operator|||
name|storedInfo
operator|.
name|getStartCode
argument_list|()
operator|!=
name|startCode
condition|)
block|{
comment|// The current assignment is no good; load the region.
synchronized|synchronized
init|(
name|unassignedRegions
init|)
block|{
name|unassignedRegions
operator|.
name|put
argument_list|(
name|info
operator|.
name|regionName
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|assignAttempts
operator|.
name|put
argument_list|(
name|info
operator|.
name|regionName
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|iex
parameter_list|)
block|{       }
finally|finally
block|{
try|try
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|iex2
parameter_list|)
block|{         }
block|}
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
operator|(
operator|!
name|closed
operator|)
condition|)
block|{
name|MetaRegion
name|region
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|region
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|metaRegionsToScan
init|)
block|{
if|if
condition|(
name|metaRegionsToScan
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|region
operator|=
name|metaRegionsToScan
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|region
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|metaRegionsToScan
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{             }
block|}
block|}
name|scanRegion
argument_list|(
name|region
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|knownMetaRegions
init|)
block|{
name|knownMetaRegions
operator|.
name|put
argument_list|(
name|region
operator|.
name|startKey
argument_list|,
name|region
argument_list|)
expr_stmt|;
if|if
condition|(
name|rootScanned
operator|&&
name|knownMetaRegions
operator|.
name|size
argument_list|()
operator|==
name|numMetaRegions
condition|)
block|{
name|allMetaRegionsScanned
operator|=
literal|true
expr_stmt|;
name|allMetaRegionsScanned
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
do|do
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|metaRescanInterval
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{           }
if|if
condition|(
operator|!
name|allMetaRegionsScanned
condition|)
block|{
break|break;
comment|// A region must have split
block|}
comment|// Rescan the known meta regions every so often
name|Vector
argument_list|<
name|MetaRegion
argument_list|>
name|v
init|=
operator|new
name|Vector
argument_list|<
name|MetaRegion
argument_list|>
argument_list|()
decl_stmt|;
name|v
operator|.
name|addAll
argument_list|(
name|knownMetaRegions
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|MetaRegion
argument_list|>
name|i
init|=
name|v
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|scanRegion
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
block|}
block|}
specifier|private
name|MetaScanner
name|metaScanner
decl_stmt|;
specifier|private
name|Thread
name|metaScannerThread
decl_stmt|;
comment|// Client processing
specifier|private
name|ClientProcessor
name|clientProcessor
decl_stmt|;
specifier|private
name|Thread
name|clientProcessorThread
decl_stmt|;
comment|// The 'unassignedRegions' table maps from a region name to a HRegionInfo record,
comment|// which includes the region's table, its id, and its start/end keys.
comment|//
comment|// We fill 'unassignedRecords' by scanning ROOT and META tables, learning the
comment|// set of all known valid regions.
specifier|private
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|HRegionInfo
argument_list|>
name|unassignedRegions
decl_stmt|;
comment|// The 'assignAttempts' table maps from regions to a timestamp that indicates
comment|// the last time we *tried* to assign the region to a RegionServer. If the
comment|// timestamp is out of date, then we can try to reassign it.
specifier|private
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|Long
argument_list|>
name|assignAttempts
decl_stmt|;
comment|// 'killList' indicates regions that we hope to close and then never reopen
comment|// (because we're merging them, say).
specifier|private
name|TreeMap
argument_list|<
name|String
argument_list|,
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|HRegionInfo
argument_list|>
argument_list|>
name|killList
decl_stmt|;
comment|// 'serversToServerInfo' maps from the String to its HServerInfo
specifier|private
name|TreeMap
argument_list|<
name|String
argument_list|,
name|HServerInfo
argument_list|>
name|serversToServerInfo
decl_stmt|;
comment|/** Build the HMaster out of a raw configuration item. */
specifier|public
name|HMaster
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|HREGION_DIR
argument_list|,
name|DEFAULT_HREGION_DIR
argument_list|)
argument_list|)
argument_list|,
operator|new
name|HServerAddress
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|MASTER_DEFAULT_NAME
argument_list|)
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**     * Build the HMaster    * @param dir         - base directory    * @param address     - server address and port number    * @param conf        - configuration    *     * @throws IOException    */
specifier|public
name|HMaster
parameter_list|(
name|Path
name|dir
parameter_list|,
name|HServerAddress
name|address
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|closed
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|dir
operator|=
name|dir
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|rand
operator|=
operator|new
name|Random
argument_list|()
expr_stmt|;
comment|// Make sure the root directory exists!
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|dir
argument_list|)
condition|)
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
name|Path
name|rootRegionDir
init|=
name|HStoreFile
operator|.
name|getHRegionDir
argument_list|(
name|dir
argument_list|,
name|rootRegionInfo
operator|.
name|regionName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|rootRegionDir
argument_list|)
condition|)
block|{
comment|// Bootstrap! Need to create the root region and the first meta region.
comment|//TODO is the root region self referential?
name|HRegion
name|root
init|=
name|createNewHRegion
argument_list|(
name|rootTableDesc
argument_list|,
literal|0L
argument_list|)
decl_stmt|;
name|HRegion
name|meta
init|=
name|createNewHRegion
argument_list|(
name|metaTableDesc
argument_list|,
literal|1L
argument_list|)
decl_stmt|;
name|addTableToMeta
argument_list|(
name|root
argument_list|,
name|meta
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|maxRegionOpenTime
operator|=
name|conf
operator|.
name|getLong
argument_list|(
literal|"hbase.hbasemaster.maxregionopen"
argument_list|,
literal|30
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|this
operator|.
name|msgQueue
operator|=
operator|new
name|Vector
argument_list|<
name|PendingOperation
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|serverLeases
operator|=
operator|new
name|Leases
argument_list|(
name|conf
operator|.
name|getLong
argument_list|(
literal|"hbase.master.lease.period"
argument_list|,
literal|15
operator|*
literal|1000
argument_list|)
argument_list|,
name|conf
operator|.
name|getLong
argument_list|(
literal|"hbase.master.lease.thread.wakefrequency"
argument_list|,
literal|15
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|server
operator|=
name|RPC
operator|.
name|getServer
argument_list|(
name|this
argument_list|,
name|address
operator|.
name|getBindAddress
argument_list|()
argument_list|,
name|address
operator|.
name|getPort
argument_list|()
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.hregionserver.handler.count"
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|false
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|client
operator|=
operator|new
name|HClient
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|metaRescanInterval
operator|=
name|conf
operator|.
name|getLong
argument_list|(
literal|"hbase.master.meta.thread.rescanfrequency"
argument_list|,
literal|60
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// The root region
name|this
operator|.
name|rootRegionLocation
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|rootScanned
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|rootScanner
operator|=
operator|new
name|RootScanner
argument_list|()
expr_stmt|;
name|this
operator|.
name|rootScannerThread
operator|=
operator|new
name|Thread
argument_list|(
name|rootScanner
argument_list|,
literal|"HMaster.rootScanner"
argument_list|)
expr_stmt|;
comment|// Scans the meta table
name|this
operator|.
name|numMetaRegions
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|metaRegionsToScan
operator|=
operator|new
name|Vector
argument_list|<
name|MetaRegion
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|knownMetaRegions
operator|=
operator|new
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|MetaRegion
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|allMetaRegionsScanned
operator|=
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|metaScanner
operator|=
operator|new
name|MetaScanner
argument_list|()
expr_stmt|;
name|this
operator|.
name|metaScannerThread
operator|=
operator|new
name|Thread
argument_list|(
name|metaScanner
argument_list|,
literal|"HMaster.metaScanner"
argument_list|)
expr_stmt|;
comment|// Process updates to meta asychronously
name|this
operator|.
name|clientProcessor
operator|=
operator|new
name|ClientProcessor
argument_list|()
expr_stmt|;
name|this
operator|.
name|clientProcessorThread
operator|=
operator|new
name|Thread
argument_list|(
name|clientProcessor
argument_list|,
literal|"HMaster.clientProcessor"
argument_list|)
expr_stmt|;
name|this
operator|.
name|unassignedRegions
operator|=
operator|new
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|HRegionInfo
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|unassignedRegions
operator|.
name|put
argument_list|(
name|rootRegionInfo
operator|.
name|regionName
argument_list|,
name|rootRegionInfo
argument_list|)
expr_stmt|;
name|this
operator|.
name|assignAttempts
operator|=
operator|new
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|assignAttempts
operator|.
name|put
argument_list|(
name|rootRegionInfo
operator|.
name|regionName
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|this
operator|.
name|killList
operator|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|HRegionInfo
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|serversToServerInfo
operator|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|HServerInfo
argument_list|>
argument_list|()
expr_stmt|;
comment|// We're almost open for business
name|this
operator|.
name|closed
operator|=
literal|false
expr_stmt|;
try|try
block|{
comment|// Start things up
name|this
operator|.
name|rootScannerThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|this
operator|.
name|metaScannerThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|this
operator|.
name|clientProcessorThread
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Start the server last so everything else is running before we start
comment|// receiving requests
name|this
operator|.
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Something happend during startup. Shut things down.
name|this
operator|.
name|closed
operator|=
literal|true
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/** Turn off the HMaster.  Turn off all the threads, close files, etc. */
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|closed
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|iex
parameter_list|)
block|{     }
try|try
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
name|server
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|iex
parameter_list|)
block|{     }
try|try
block|{
name|clientProcessorThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|iex
parameter_list|)
block|{     }
try|try
block|{
name|metaScannerThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|iex
parameter_list|)
block|{     }
try|try
block|{
name|rootScannerThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|iex
parameter_list|)
block|{     }
block|}
comment|//////////////////////////////////////////////////////////////////////////////
comment|// HMasterRegionInterface
comment|//////////////////////////////////////////////////////////////////////////////
comment|/** HRegionServers call this method upon startup. */
specifier|public
name|void
name|regionServerStartup
parameter_list|(
name|HServerInfo
name|serverInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|server
init|=
name|serverInfo
operator|.
name|getServerAddress
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|HServerInfo
name|storedInfo
init|=
literal|null
decl_stmt|;
comment|// If we get the startup message but there's an old server by that
comment|// name, then we can timeout the old one right away and register
comment|// the new one.
synchronized|synchronized
init|(
name|serversToServerInfo
init|)
block|{
name|storedInfo
operator|=
name|serversToServerInfo
operator|.
name|get
argument_list|(
name|server
argument_list|)
expr_stmt|;
if|if
condition|(
name|storedInfo
operator|!=
literal|null
condition|)
block|{
name|serversToServerInfo
operator|.
name|remove
argument_list|(
name|server
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|msgQueue
init|)
block|{
name|msgQueue
operator|.
name|add
argument_list|(
operator|new
name|PendingServerShutdown
argument_list|(
name|storedInfo
argument_list|)
argument_list|)
expr_stmt|;
name|msgQueue
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Either way, record the new server
name|serversToServerInfo
operator|.
name|put
argument_list|(
name|server
argument_list|,
name|serverInfo
argument_list|)
expr_stmt|;
name|Text
name|serverLabel
init|=
operator|new
name|Text
argument_list|(
name|server
argument_list|)
decl_stmt|;
name|serverLeases
operator|.
name|createLease
argument_list|(
name|serverLabel
argument_list|,
name|serverLabel
argument_list|,
operator|new
name|ServerExpirer
argument_list|(
name|server
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** HRegionServers call this method repeatedly. */
specifier|public
name|HMsg
index|[]
name|regionServerReport
parameter_list|(
name|HServerInfo
name|serverInfo
parameter_list|,
name|HMsg
name|msgs
index|[]
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|server
init|=
name|serverInfo
operator|.
name|getServerAddress
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|serversToServerInfo
init|)
block|{
name|HServerInfo
name|storedInfo
init|=
name|serversToServerInfo
operator|.
name|get
argument_list|(
name|server
argument_list|)
decl_stmt|;
if|if
condition|(
name|storedInfo
operator|==
literal|null
condition|)
block|{
comment|// The HBaseMaster may have been restarted.
comment|// Tell the RegionServer to start over and call regionServerStartup()
name|HMsg
name|returnMsgs
index|[]
init|=
operator|new
name|HMsg
index|[
literal|1
index|]
decl_stmt|;
name|returnMsgs
index|[
literal|0
index|]
operator|=
operator|new
name|HMsg
argument_list|(
name|HMsg
operator|.
name|MSG_CALL_SERVER_STARTUP
argument_list|)
expr_stmt|;
return|return
name|returnMsgs
return|;
block|}
elseif|else
if|if
condition|(
name|storedInfo
operator|.
name|getStartCode
argument_list|()
operator|!=
name|serverInfo
operator|.
name|getStartCode
argument_list|()
condition|)
block|{
comment|// This state is reachable if:
comment|//
comment|// 1) RegionServer A started
comment|// 2) RegionServer B started on the same machine, then
comment|//    clobbered A in regionServerStartup.
comment|// 3) RegionServer A returns, expecting to work as usual.
comment|//
comment|// The answer is to ask A to shut down for good.
name|HMsg
name|returnMsgs
index|[]
init|=
operator|new
name|HMsg
index|[
literal|1
index|]
decl_stmt|;
name|returnMsgs
index|[
literal|0
index|]
operator|=
operator|new
name|HMsg
argument_list|(
name|HMsg
operator|.
name|MSG_REGIONSERVER_ALREADY_RUNNING
argument_list|)
expr_stmt|;
return|return
name|returnMsgs
return|;
block|}
else|else
block|{
comment|// All's well.  Renew the server's lease.
comment|// This will always succeed; otherwise, the fetch of serversToServerInfo
comment|// would have failed above.
name|Text
name|serverLabel
init|=
operator|new
name|Text
argument_list|(
name|server
argument_list|)
decl_stmt|;
name|serverLeases
operator|.
name|renewLease
argument_list|(
name|serverLabel
argument_list|,
name|serverLabel
argument_list|)
expr_stmt|;
comment|// Refresh the info object
name|serversToServerInfo
operator|.
name|put
argument_list|(
name|server
argument_list|,
name|serverInfo
argument_list|)
expr_stmt|;
comment|// Next, process messages for this server
return|return
name|processMsgs
argument_list|(
name|serverInfo
argument_list|,
name|msgs
argument_list|)
return|;
block|}
block|}
block|}
comment|/** Process all the incoming messages from a server that's contacted us. */
name|HMsg
index|[]
name|processMsgs
parameter_list|(
name|HServerInfo
name|info
parameter_list|,
name|HMsg
name|incomingMsgs
index|[]
parameter_list|)
throws|throws
name|IOException
block|{
name|Vector
argument_list|<
name|HMsg
argument_list|>
name|returnMsgs
init|=
operator|new
name|Vector
argument_list|<
name|HMsg
argument_list|>
argument_list|()
decl_stmt|;
comment|// Process the kill list
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|HRegionInfo
argument_list|>
name|regionsToKill
init|=
name|killList
operator|.
name|get
argument_list|(
name|info
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionsToKill
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|HRegionInfo
argument_list|>
name|i
init|=
name|regionsToKill
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|returnMsgs
operator|.
name|add
argument_list|(
operator|new
name|HMsg
argument_list|(
name|HMsg
operator|.
name|MSG_REGION_CLOSE_AND_DELETE
argument_list|,
name|i
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Get reports on what the RegionServer did.
synchronized|synchronized
init|(
name|unassignedRegions
init|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|incomingMsgs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|HRegionInfo
name|region
init|=
name|incomingMsgs
index|[
name|i
index|]
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|incomingMsgs
index|[
name|i
index|]
operator|.
name|getMsg
argument_list|()
condition|)
block|{
case|case
name|HMsg
operator|.
name|MSG_REPORT_OPEN
case|:
name|HRegionInfo
name|regionInfo
init|=
name|unassignedRegions
operator|.
name|get
argument_list|(
name|region
operator|.
name|regionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionInfo
operator|==
literal|null
condition|)
block|{
comment|// This Region should not have been opened.
comment|// Ask the server to shut it down, but don't report it as closed.
comment|// Otherwise the HMaster will think the Region was closed on purpose,
comment|// and then try to reopen it elsewhere; that's not what we want.
name|returnMsgs
operator|.
name|add
argument_list|(
operator|new
name|HMsg
argument_list|(
name|HMsg
operator|.
name|MSG_REGION_CLOSE_WITHOUT_REPORT
argument_list|,
name|region
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Remove from unassigned list so we don't assign it to someone else
name|unassignedRegions
operator|.
name|remove
argument_list|(
name|region
operator|.
name|regionName
argument_list|)
expr_stmt|;
name|assignAttempts
operator|.
name|remove
argument_list|(
name|region
operator|.
name|regionName
argument_list|)
expr_stmt|;
if|if
condition|(
name|region
operator|.
name|regionName
operator|.
name|compareTo
argument_list|(
name|rootRegionInfo
operator|.
name|regionName
argument_list|)
operator|==
literal|0
condition|)
block|{
comment|// Store the Root Region location (in memory)
name|rootRegionLocation
operator|=
operator|new
name|HServerAddress
argument_list|(
name|info
operator|.
name|getServerAddress
argument_list|()
argument_list|)
expr_stmt|;
comment|// Wake up the root scanner
name|rootRegionLocation
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
name|region
operator|.
name|regionName
operator|.
name|find
argument_list|(
name|META_TABLE_NAME
operator|.
name|toString
argument_list|()
argument_list|)
operator|==
literal|0
condition|)
block|{
comment|// It's a meta region. Put it on the queue to be scanned.
name|MetaRegion
name|r
init|=
operator|new
name|MetaRegion
argument_list|()
decl_stmt|;
name|r
operator|.
name|server
operator|=
name|info
operator|.
name|getServerAddress
argument_list|()
expr_stmt|;
name|r
operator|.
name|regionName
operator|=
name|region
operator|.
name|regionName
expr_stmt|;
name|r
operator|.
name|startKey
operator|=
name|region
operator|.
name|startKey
expr_stmt|;
synchronized|synchronized
init|(
name|metaRegionsToScan
init|)
block|{
name|metaRegionsToScan
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|metaRegionsToScan
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Queue up an update to note the region location.
synchronized|synchronized
init|(
name|msgQueue
init|)
block|{
name|msgQueue
operator|.
name|add
argument_list|(
operator|new
name|PendingOpenReport
argument_list|(
name|info
argument_list|,
name|region
operator|.
name|regionName
argument_list|)
argument_list|)
expr_stmt|;
name|msgQueue
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
break|break;
case|case
name|HMsg
operator|.
name|MSG_REPORT_CLOSE
case|:
if|if
condition|(
name|region
operator|.
name|regionName
operator|.
name|compareTo
argument_list|(
name|rootRegionInfo
operator|.
name|regionName
argument_list|)
operator|==
literal|0
condition|)
block|{
comment|// Root region
name|rootRegionLocation
operator|=
literal|null
expr_stmt|;
name|unassignedRegions
operator|.
name|put
argument_list|(
name|region
operator|.
name|regionName
argument_list|,
name|region
argument_list|)
expr_stmt|;
name|assignAttempts
operator|.
name|put
argument_list|(
name|region
operator|.
name|regionName
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|reassignRegion
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|regionsToKill
operator|.
name|containsKey
argument_list|(
name|region
operator|.
name|regionName
argument_list|)
condition|)
block|{
name|regionsToKill
operator|.
name|remove
argument_list|(
name|region
operator|.
name|regionName
argument_list|)
expr_stmt|;
if|if
condition|(
name|regionsToKill
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|killList
operator|.
name|put
argument_list|(
name|info
operator|.
name|toString
argument_list|()
argument_list|,
name|regionsToKill
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|killList
operator|.
name|remove
argument_list|(
name|info
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|reassignRegion
operator|=
literal|false
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|msgQueue
init|)
block|{
name|msgQueue
operator|.
name|add
argument_list|(
operator|new
name|PendingCloseReport
argument_list|(
name|region
argument_list|,
name|reassignRegion
argument_list|)
argument_list|)
expr_stmt|;
name|msgQueue
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
comment|// NOTE: we cannot put the region into unassignedRegions as that
comment|//       could create a race with the pending close if it gets
comment|//       reassigned before the close is processed.
block|}
break|break;
case|case
name|HMsg
operator|.
name|MSG_NEW_REGION
case|:
if|if
condition|(
name|region
operator|.
name|regionName
operator|.
name|find
argument_list|(
name|META_TABLE_NAME
operator|.
name|toString
argument_list|()
argument_list|)
operator|==
literal|0
condition|)
block|{
comment|// A meta region has split.
name|allMetaRegionsScanned
operator|=
literal|false
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|unassignedRegions
init|)
block|{
name|unassignedRegions
operator|.
name|put
argument_list|(
name|region
operator|.
name|regionName
argument_list|,
name|region
argument_list|)
expr_stmt|;
name|assignAttempts
operator|.
name|put
argument_list|(
name|region
operator|.
name|regionName
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Impossible state during msg processing.  Instruction: "
operator|+
name|incomingMsgs
index|[
name|i
index|]
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|// Figure out what the RegionServer ought to do, and write back.
if|if
condition|(
name|unassignedRegions
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// Open new regions as necessary
name|int
name|targetForServer
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|unassignedRegions
operator|.
name|size
argument_list|()
operator|/
operator|(
literal|1.0
operator|*
name|serversToServerInfo
operator|.
name|size
argument_list|()
operator|)
argument_list|)
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Text
argument_list|>
name|it
init|=
name|unassignedRegions
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Text
name|curRegionName
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|HRegionInfo
name|regionInfo
init|=
name|unassignedRegions
operator|.
name|get
argument_list|(
name|curRegionName
argument_list|)
decl_stmt|;
name|long
name|assignedTime
init|=
name|assignAttempts
operator|.
name|get
argument_list|(
name|curRegionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|now
operator|-
name|assignedTime
operator|>
name|maxRegionOpenTime
condition|)
block|{
name|returnMsgs
operator|.
name|add
argument_list|(
operator|new
name|HMsg
argument_list|(
name|HMsg
operator|.
name|MSG_REGION_OPEN
argument_list|,
name|regionInfo
argument_list|)
argument_list|)
expr_stmt|;
name|assignAttempts
operator|.
name|put
argument_list|(
name|curRegionName
argument_list|,
name|now
argument_list|)
expr_stmt|;
name|counter
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|counter
operator|>=
name|targetForServer
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
return|return
operator|(
name|HMsg
index|[]
operator|)
name|returnMsgs
operator|.
name|toArray
argument_list|(
operator|new
name|HMsg
index|[
name|returnMsgs
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|//////////////////////////////////////////////////////////////////////////////
comment|// Some internal classes to manage msg-passing and client operations
comment|//////////////////////////////////////////////////////////////////////////////
specifier|private
class|class
name|ClientProcessor
implements|implements
name|Runnable
block|{
specifier|public
name|ClientProcessor
parameter_list|()
block|{     }
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
operator|!
name|closed
condition|)
block|{
name|PendingOperation
name|op
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|msgQueue
init|)
block|{
while|while
condition|(
name|msgQueue
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
try|try
block|{
name|msgQueue
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|iex
parameter_list|)
block|{             }
block|}
name|op
operator|=
name|msgQueue
operator|.
name|elementAt
argument_list|(
name|msgQueue
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|msgQueue
operator|.
name|removeElementAt
argument_list|(
name|msgQueue
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|op
operator|.
name|process
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
synchronized|synchronized
init|(
name|msgQueue
init|)
block|{
name|msgQueue
operator|.
name|insertElementAt
argument_list|(
name|op
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|abstract
class|class
name|PendingOperation
block|{
specifier|protected
specifier|final
name|Text
index|[]
name|columns
init|=
block|{
name|META_COLUMN_FAMILY
block|}
decl_stmt|;
specifier|protected
specifier|final
name|Text
name|startRow
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
specifier|protected
name|long
name|clientId
decl_stmt|;
specifier|public
name|PendingOperation
parameter_list|()
block|{
name|this
operator|.
name|clientId
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|abstract
name|void
name|process
parameter_list|()
throws|throws
name|IOException
function_decl|;
block|}
class|class
name|PendingServerShutdown
extends|extends
name|PendingOperation
block|{
name|String
name|deadServer
decl_stmt|;
name|long
name|oldStartCode
decl_stmt|;
specifier|public
name|PendingServerShutdown
parameter_list|(
name|HServerInfo
name|serverInfo
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|deadServer
operator|=
name|serverInfo
operator|.
name|getServerAddress
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|this
operator|.
name|oldStartCode
operator|=
name|serverInfo
operator|.
name|getStartCode
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|scanMetaRegion
parameter_list|(
name|HRegionInterface
name|server
parameter_list|,
name|HScannerInterface
name|scanner
parameter_list|,
name|Text
name|regionName
parameter_list|)
throws|throws
name|IOException
block|{
name|Vector
argument_list|<
name|HStoreKey
argument_list|>
name|toDoList
init|=
operator|new
name|Vector
argument_list|<
name|HStoreKey
argument_list|>
argument_list|()
decl_stmt|;
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|HRegionInfo
argument_list|>
name|regions
init|=
operator|new
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|HRegionInfo
argument_list|>
argument_list|()
decl_stmt|;
name|DataInputBuffer
name|inbuf
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
try|try
block|{
name|HStoreKey
name|key
init|=
operator|new
name|HStoreKey
argument_list|()
decl_stmt|;
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|results
init|=
operator|new
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|scanner
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|results
argument_list|)
condition|)
block|{
name|byte
name|serverBytes
index|[]
init|=
name|results
operator|.
name|get
argument_list|(
name|META_COL_SERVER
argument_list|)
decl_stmt|;
name|String
name|serverName
init|=
operator|new
name|String
argument_list|(
name|serverBytes
argument_list|,
name|UTF8_ENCODING
argument_list|)
decl_stmt|;
if|if
condition|(
name|deadServer
operator|.
name|compareTo
argument_list|(
name|serverName
argument_list|)
operator|!=
literal|0
condition|)
block|{
comment|// This isn't the server you're looking for - move along
continue|continue;
block|}
name|byte
name|startCodeBytes
index|[]
init|=
name|results
operator|.
name|get
argument_list|(
name|META_COL_STARTCODE
argument_list|)
decl_stmt|;
name|long
name|startCode
init|=
name|Long
operator|.
name|decode
argument_list|(
operator|new
name|String
argument_list|(
name|startCodeBytes
argument_list|,
name|UTF8_ENCODING
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldStartCode
operator|!=
name|startCode
condition|)
block|{
comment|// Close but no cigar
continue|continue;
block|}
comment|// Bingo! Found it.
name|byte
name|hRegionInfoBytes
index|[]
init|=
name|results
operator|.
name|get
argument_list|(
name|META_COL_REGIONINFO
argument_list|)
decl_stmt|;
name|inbuf
operator|.
name|reset
argument_list|(
name|hRegionInfoBytes
argument_list|,
name|hRegionInfoBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|HRegionInfo
name|info
init|=
operator|new
name|HRegionInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|readFields
argument_list|(
name|inbuf
argument_list|)
expr_stmt|;
comment|// Add to our to do lists
name|toDoList
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|regions
operator|.
name|put
argument_list|(
name|info
operator|.
name|regionName
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Remove server from root/meta entries
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|toDoList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|long
name|lockid
init|=
name|server
operator|.
name|startUpdate
argument_list|(
name|regionName
argument_list|,
name|clientId
argument_list|,
name|toDoList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
name|server
operator|.
name|delete
argument_list|(
name|regionName
argument_list|,
name|clientId
argument_list|,
name|lockid
argument_list|,
name|META_COL_SERVER
argument_list|)
expr_stmt|;
name|server
operator|.
name|delete
argument_list|(
name|regionName
argument_list|,
name|clientId
argument_list|,
name|lockid
argument_list|,
name|META_COL_STARTCODE
argument_list|)
expr_stmt|;
name|server
operator|.
name|commit
argument_list|(
name|regionName
argument_list|,
name|clientId
argument_list|,
name|lockid
argument_list|)
expr_stmt|;
block|}
comment|// Put all the regions we found on the unassigned region list
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Text
argument_list|,
name|HRegionInfo
argument_list|>
argument_list|>
name|i
init|=
name|regions
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|Text
argument_list|,
name|HRegionInfo
argument_list|>
name|e
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Text
name|region
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|HRegionInfo
name|regionInfo
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|unassignedRegions
init|)
block|{
name|unassignedRegions
operator|.
name|put
argument_list|(
name|region
argument_list|,
name|regionInfo
argument_list|)
expr_stmt|;
name|assignAttempts
operator|.
name|put
argument_list|(
name|region
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|process
parameter_list|()
throws|throws
name|IOException
block|{
comment|// We can not scan every meta region if they have not already been assigned
comment|// and scanned.
while|while
condition|(
operator|!
name|allMetaRegionsScanned
condition|)
block|{
try|try
block|{
name|allMetaRegionsScanned
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{         }
block|}
comment|// First scan the ROOT region
name|HRegionInterface
name|server
init|=
name|client
operator|.
name|getHRegionConnection
argument_list|(
name|rootRegionLocation
argument_list|)
decl_stmt|;
name|HScannerInterface
name|scanner
init|=
name|server
operator|.
name|openScanner
argument_list|(
name|rootRegionInfo
operator|.
name|regionName
argument_list|,
name|columns
argument_list|,
name|startRow
argument_list|)
decl_stmt|;
name|scanMetaRegion
argument_list|(
name|server
argument_list|,
name|scanner
argument_list|,
name|rootRegionInfo
operator|.
name|regionName
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|MetaRegion
argument_list|>
name|i
init|=
name|knownMetaRegions
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|MetaRegion
name|r
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|server
operator|=
name|client
operator|.
name|getHRegionConnection
argument_list|(
name|r
operator|.
name|server
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|server
operator|.
name|openScanner
argument_list|(
name|r
operator|.
name|regionName
argument_list|,
name|columns
argument_list|,
name|startRow
argument_list|)
expr_stmt|;
name|scanMetaRegion
argument_list|(
name|server
argument_list|,
name|scanner
argument_list|,
name|r
operator|.
name|regionName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** PendingCloseReport is a close message that is saved in a different thread. */
class|class
name|PendingCloseReport
extends|extends
name|PendingOperation
block|{
name|HRegionInfo
name|regionInfo
decl_stmt|;
name|boolean
name|reassignRegion
decl_stmt|;
name|boolean
name|rootRegion
decl_stmt|;
specifier|public
name|PendingCloseReport
parameter_list|(
name|HRegionInfo
name|regionInfo
parameter_list|,
name|boolean
name|reassignRegion
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|regionInfo
operator|=
name|regionInfo
expr_stmt|;
name|this
operator|.
name|reassignRegion
operator|=
name|reassignRegion
expr_stmt|;
comment|// If the region closing down is a meta region then we need to update
comment|// the ROOT table
if|if
condition|(
name|this
operator|.
name|regionInfo
operator|.
name|regionName
operator|.
name|find
argument_list|(
name|metaTableDesc
operator|.
name|getName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|==
literal|0
condition|)
block|{
name|this
operator|.
name|rootRegion
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|rootRegion
operator|=
literal|false
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|process
parameter_list|()
throws|throws
name|IOException
block|{
comment|// We can not access any meta region if they have not already been assigned
comment|// and scanned.
while|while
condition|(
operator|!
name|allMetaRegionsScanned
condition|)
block|{
try|try
block|{
name|allMetaRegionsScanned
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{         }
block|}
comment|// Mark the Region as unavailable in the appropriate meta table
name|Text
name|metaRegionName
decl_stmt|;
name|HRegionInterface
name|server
decl_stmt|;
if|if
condition|(
name|rootRegion
condition|)
block|{
name|metaRegionName
operator|=
name|rootRegionInfo
operator|.
name|regionName
expr_stmt|;
name|server
operator|=
name|client
operator|.
name|getHRegionConnection
argument_list|(
name|rootRegionLocation
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Text
name|metaStartRow
init|=
name|knownMetaRegions
operator|.
name|headMap
argument_list|(
name|regionInfo
operator|.
name|regionName
argument_list|)
operator|.
name|lastKey
argument_list|()
decl_stmt|;
name|MetaRegion
name|r
init|=
name|knownMetaRegions
operator|.
name|get
argument_list|(
name|metaStartRow
argument_list|)
decl_stmt|;
name|metaRegionName
operator|=
name|r
operator|.
name|regionName
expr_stmt|;
name|server
operator|=
name|client
operator|.
name|getHRegionConnection
argument_list|(
name|r
operator|.
name|server
argument_list|)
expr_stmt|;
block|}
name|long
name|lockid
init|=
name|server
operator|.
name|startUpdate
argument_list|(
name|metaRegionName
argument_list|,
name|clientId
argument_list|,
name|regionInfo
operator|.
name|regionName
argument_list|)
decl_stmt|;
name|server
operator|.
name|delete
argument_list|(
name|metaRegionName
argument_list|,
name|clientId
argument_list|,
name|lockid
argument_list|,
name|META_COL_SERVER
argument_list|)
expr_stmt|;
name|server
operator|.
name|delete
argument_list|(
name|metaRegionName
argument_list|,
name|clientId
argument_list|,
name|lockid
argument_list|,
name|META_COL_STARTCODE
argument_list|)
expr_stmt|;
name|server
operator|.
name|commit
argument_list|(
name|metaRegionName
argument_list|,
name|clientId
argument_list|,
name|lockid
argument_list|)
expr_stmt|;
if|if
condition|(
name|reassignRegion
condition|)
block|{
synchronized|synchronized
init|(
name|unassignedRegions
init|)
block|{
name|unassignedRegions
operator|.
name|put
argument_list|(
name|regionInfo
operator|.
name|regionName
argument_list|,
name|regionInfo
argument_list|)
expr_stmt|;
name|assignAttempts
operator|.
name|put
argument_list|(
name|regionInfo
operator|.
name|regionName
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/** PendingOpenReport is an open message that is saved in a different thread. */
class|class
name|PendingOpenReport
extends|extends
name|PendingOperation
block|{
name|boolean
name|rootRegion
decl_stmt|;
name|Text
name|regionName
decl_stmt|;
name|BytesWritable
name|serverAddress
decl_stmt|;
name|BytesWritable
name|startCode
decl_stmt|;
specifier|public
name|PendingOpenReport
parameter_list|(
name|HServerInfo
name|info
parameter_list|,
name|Text
name|regionName
parameter_list|)
block|{
if|if
condition|(
name|regionName
operator|.
name|find
argument_list|(
name|metaTableDesc
operator|.
name|getName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|==
literal|0
condition|)
block|{
comment|// The region which just came on-line is a META region.
comment|// We need to look in the ROOT region for its information.
name|this
operator|.
name|rootRegion
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// Just an ordinary region. Look for it in the META table.
name|this
operator|.
name|rootRegion
operator|=
literal|false
expr_stmt|;
block|}
name|this
operator|.
name|regionName
operator|=
name|regionName
expr_stmt|;
try|try
block|{
name|this
operator|.
name|serverAddress
operator|=
operator|new
name|BytesWritable
argument_list|(
name|info
operator|.
name|getServerAddress
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
name|UTF8_ENCODING
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|startCode
operator|=
operator|new
name|BytesWritable
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|info
operator|.
name|getStartCode
argument_list|()
argument_list|)
operator|.
name|getBytes
argument_list|(
name|UTF8_ENCODING
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{       }
block|}
specifier|public
name|void
name|process
parameter_list|()
throws|throws
name|IOException
block|{
comment|// We can not access any meta region if they have not already been assigned
comment|// and scanned.
while|while
condition|(
operator|!
name|allMetaRegionsScanned
condition|)
block|{
try|try
block|{
name|allMetaRegionsScanned
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{         }
block|}
comment|// Register the newly-available Region's location.
name|Text
name|metaRegionName
decl_stmt|;
name|HRegionInterface
name|server
decl_stmt|;
if|if
condition|(
name|rootRegion
condition|)
block|{
name|metaRegionName
operator|=
name|rootRegionInfo
operator|.
name|regionName
expr_stmt|;
name|server
operator|=
name|client
operator|.
name|getHRegionConnection
argument_list|(
name|rootRegionLocation
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Text
name|metaStartRow
init|=
name|knownMetaRegions
operator|.
name|headMap
argument_list|(
name|regionName
argument_list|)
operator|.
name|lastKey
argument_list|()
decl_stmt|;
name|MetaRegion
name|r
init|=
name|knownMetaRegions
operator|.
name|get
argument_list|(
name|metaStartRow
argument_list|)
decl_stmt|;
name|metaRegionName
operator|=
name|r
operator|.
name|regionName
expr_stmt|;
name|server
operator|=
name|client
operator|.
name|getHRegionConnection
argument_list|(
name|r
operator|.
name|server
argument_list|)
expr_stmt|;
block|}
name|long
name|lockid
init|=
name|server
operator|.
name|startUpdate
argument_list|(
name|metaRegionName
argument_list|,
name|clientId
argument_list|,
name|regionName
argument_list|)
decl_stmt|;
name|server
operator|.
name|put
argument_list|(
name|metaRegionName
argument_list|,
name|clientId
argument_list|,
name|lockid
argument_list|,
name|META_COL_SERVER
argument_list|,
name|serverAddress
argument_list|)
expr_stmt|;
name|server
operator|.
name|put
argument_list|(
name|metaRegionName
argument_list|,
name|clientId
argument_list|,
name|lockid
argument_list|,
name|META_COL_STARTCODE
argument_list|,
name|startCode
argument_list|)
expr_stmt|;
name|server
operator|.
name|commit
argument_list|(
name|metaRegionName
argument_list|,
name|clientId
argument_list|,
name|lockid
argument_list|)
expr_stmt|;
block|}
block|}
comment|//////////////////////////////////////////////////////////////////////////////
comment|// HMasterInterface
comment|//////////////////////////////////////////////////////////////////////////////
specifier|public
name|void
name|createTable
parameter_list|(
name|HTableDescriptor
name|desc
parameter_list|)
throws|throws
name|IOException
block|{
name|HRegionInfo
name|newRegion
init|=
operator|new
name|HRegionInfo
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|,
name|desc
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// We can not access any meta region if they have not already been assigned
comment|// and scanned.
while|while
condition|(
operator|!
name|allMetaRegionsScanned
condition|)
block|{
try|try
block|{
name|allMetaRegionsScanned
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{       }
block|}
comment|// 1. Check to see if table already exists
name|Text
name|metaStartRow
init|=
name|knownMetaRegions
operator|.
name|headMap
argument_list|(
name|newRegion
operator|.
name|regionName
argument_list|)
operator|.
name|lastKey
argument_list|()
decl_stmt|;
name|MetaRegion
name|m
init|=
name|knownMetaRegions
operator|.
name|get
argument_list|(
name|metaStartRow
argument_list|)
decl_stmt|;
name|Text
name|metaRegionName
init|=
name|m
operator|.
name|regionName
decl_stmt|;
name|HRegionInterface
name|server
init|=
name|client
operator|.
name|getHRegionConnection
argument_list|(
name|m
operator|.
name|server
argument_list|)
decl_stmt|;
name|BytesWritable
name|bytes
init|=
name|server
operator|.
name|get
argument_list|(
name|metaRegionName
argument_list|,
name|desc
operator|.
name|getName
argument_list|()
argument_list|,
name|META_COL_REGIONINFO
argument_list|)
decl_stmt|;
if|if
condition|(
name|bytes
operator|!=
literal|null
operator|&&
name|bytes
operator|.
name|getSize
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|byte
index|[]
name|infoBytes
init|=
name|bytes
operator|.
name|get
argument_list|()
decl_stmt|;
name|DataInputBuffer
name|inbuf
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
name|inbuf
operator|.
name|reset
argument_list|(
name|infoBytes
argument_list|,
name|infoBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|HRegionInfo
name|info
init|=
operator|new
name|HRegionInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|readFields
argument_list|(
name|inbuf
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|tableDesc
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|desc
operator|.
name|getName
argument_list|()
argument_list|)
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"table already exists"
argument_list|)
throw|;
block|}
block|}
comment|// 2. Create the HRegion
name|HRegion
name|r
init|=
name|createNewHRegion
argument_list|(
name|desc
argument_list|,
name|newRegion
operator|.
name|regionId
argument_list|)
decl_stmt|;
comment|// 3. Insert into meta
name|HRegionInfo
name|info
init|=
name|r
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
name|Text
name|regionName
init|=
name|r
operator|.
name|getRegionName
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|byteValue
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|s
init|=
operator|new
name|DataOutputStream
argument_list|(
name|byteValue
argument_list|)
decl_stmt|;
name|info
operator|.
name|write
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|long
name|clientId
init|=
name|rand
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|long
name|lockid
init|=
name|server
operator|.
name|startUpdate
argument_list|(
name|metaRegionName
argument_list|,
name|clientId
argument_list|,
name|regionName
argument_list|)
decl_stmt|;
name|server
operator|.
name|put
argument_list|(
name|metaRegionName
argument_list|,
name|clientId
argument_list|,
name|lockid
argument_list|,
name|META_COL_REGIONINFO
argument_list|,
operator|new
name|BytesWritable
argument_list|(
name|byteValue
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|server
operator|.
name|commit
argument_list|(
name|metaRegionName
argument_list|,
name|clientId
argument_list|,
name|lockid
argument_list|)
expr_stmt|;
comment|// 4. Get it assigned to a server
synchronized|synchronized
init|(
name|unassignedRegions
init|)
block|{
name|unassignedRegions
operator|.
name|put
argument_list|(
name|regionName
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|assignAttempts
operator|.
name|put
argument_list|(
name|regionName
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Internal method to create a new HRegion. Used by createTable and by the    * bootstrap code in the HMaster constructor    *     * @param desc        - table descriptor    * @param regionId    - region id    * @return            - new HRegion    *     * @throws IOException    */
specifier|private
name|HRegion
name|createNewHRegion
parameter_list|(
name|HTableDescriptor
name|desc
parameter_list|,
name|long
name|regionId
parameter_list|)
throws|throws
name|IOException
block|{
name|HRegionInfo
name|info
init|=
operator|new
name|HRegionInfo
argument_list|(
name|regionId
argument_list|,
name|desc
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Path
name|regionDir
init|=
name|HStoreFile
operator|.
name|getHRegionDir
argument_list|(
name|dir
argument_list|,
name|info
operator|.
name|regionName
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|regionDir
argument_list|)
expr_stmt|;
return|return
operator|new
name|HRegion
argument_list|(
name|dir
argument_list|,
operator|new
name|HLog
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|regionDir
argument_list|,
literal|"log"
argument_list|)
argument_list|,
name|conf
argument_list|)
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|,
name|info
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Inserts a new table's meta information into the meta table. Used by    * the HMaster bootstrap code.    *     * @param meta                - HRegion to be updated    * @param table               - HRegion of new table    *     * @throws IOException    */
specifier|private
name|void
name|addTableToMeta
parameter_list|(
name|HRegion
name|meta
parameter_list|,
name|HRegion
name|table
parameter_list|)
throws|throws
name|IOException
block|{
comment|// The row key is the region name
name|long
name|writeid
init|=
name|meta
operator|.
name|startUpdate
argument_list|(
name|table
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|bytes
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|s
init|=
operator|new
name|DataOutputStream
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|table
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|write
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|s
operator|.
name|writeLong
argument_list|(
name|table
operator|.
name|getRegionId
argument_list|()
argument_list|)
expr_stmt|;
name|meta
operator|.
name|put
argument_list|(
name|writeid
argument_list|,
name|META_COL_REGIONINFO
argument_list|,
name|bytes
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|bytes
operator|.
name|reset
argument_list|()
expr_stmt|;
operator|new
name|HServerAddress
argument_list|()
operator|.
name|write
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|meta
operator|.
name|put
argument_list|(
name|writeid
argument_list|,
name|META_COL_SERVER
argument_list|,
name|bytes
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|bytes
operator|.
name|reset
argument_list|()
expr_stmt|;
name|s
operator|.
name|writeLong
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|meta
operator|.
name|put
argument_list|(
name|writeid
argument_list|,
name|META_COL_STARTCODE
argument_list|,
name|bytes
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|meta
operator|.
name|commit
argument_list|(
name|writeid
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|deleteTable
parameter_list|(
name|Text
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|Text
index|[]
name|columns
init|=
block|{
name|META_COLUMN_FAMILY
block|}
decl_stmt|;
comment|// We can not access any meta region if they have not already been assigned
comment|// and scanned.
while|while
condition|(
operator|!
name|allMetaRegionsScanned
condition|)
block|{
try|try
block|{
name|allMetaRegionsScanned
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{       }
block|}
for|for
control|(
name|Iterator
argument_list|<
name|MetaRegion
argument_list|>
name|i
init|=
name|knownMetaRegions
operator|.
name|tailMap
argument_list|(
name|tableName
argument_list|)
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
comment|// Find all the regions that make up this table
name|long
name|clientId
init|=
name|rand
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|MetaRegion
name|m
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|HRegionInterface
name|server
init|=
name|client
operator|.
name|getHRegionConnection
argument_list|(
name|m
operator|.
name|server
argument_list|)
decl_stmt|;
try|try
block|{
name|HScannerInterface
name|scanner
init|=
name|server
operator|.
name|openScanner
argument_list|(
name|m
operator|.
name|regionName
argument_list|,
name|columns
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|HStoreKey
name|key
init|=
operator|new
name|HStoreKey
argument_list|()
decl_stmt|;
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|results
init|=
operator|new
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|DataInputBuffer
name|inbuf
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
name|Vector
argument_list|<
name|Text
argument_list|>
name|rowsToDelete
init|=
operator|new
name|Vector
argument_list|<
name|Text
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|scanner
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|results
argument_list|)
condition|)
block|{
name|byte
name|hRegionInfoBytes
index|[]
init|=
name|results
operator|.
name|get
argument_list|(
name|META_COL_REGIONINFO
argument_list|)
decl_stmt|;
name|inbuf
operator|.
name|reset
argument_list|(
name|hRegionInfoBytes
argument_list|,
name|hRegionInfoBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|HRegionInfo
name|info
init|=
operator|new
name|HRegionInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|readFields
argument_list|(
name|inbuf
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|tableDesc
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|tableName
argument_list|)
operator|>
literal|0
condition|)
block|{
break|break;
comment|// Beyond any more entries for this table
block|}
comment|// Is it being served?
name|byte
name|serverBytes
index|[]
init|=
name|results
operator|.
name|get
argument_list|(
name|META_COL_SERVER
argument_list|)
decl_stmt|;
name|String
name|serverName
init|=
operator|new
name|String
argument_list|(
name|serverBytes
argument_list|,
name|UTF8_ENCODING
argument_list|)
decl_stmt|;
name|byte
name|startCodeBytes
index|[]
init|=
name|results
operator|.
name|get
argument_list|(
name|META_COL_STARTCODE
argument_list|)
decl_stmt|;
name|long
name|startCode
init|=
name|Long
operator|.
name|decode
argument_list|(
operator|new
name|String
argument_list|(
name|startCodeBytes
argument_list|,
name|UTF8_ENCODING
argument_list|)
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|serversToServerInfo
init|)
block|{
name|HServerInfo
name|s
init|=
name|serversToServerInfo
operator|.
name|get
argument_list|(
name|serverName
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
operator|&&
name|s
operator|.
name|getStartCode
argument_list|()
operator|==
name|startCode
condition|)
block|{
comment|// It is being served. Tell the server to stop it and not report back
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|HRegionInfo
argument_list|>
name|regionsToKill
init|=
name|killList
operator|.
name|get
argument_list|(
name|serverName
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionsToKill
operator|==
literal|null
condition|)
block|{
name|regionsToKill
operator|=
operator|new
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|HRegionInfo
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|regionsToKill
operator|.
name|put
argument_list|(
name|info
operator|.
name|regionName
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|killList
operator|.
name|put
argument_list|(
name|serverName
argument_list|,
name|regionsToKill
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Iterator
argument_list|<
name|Text
argument_list|>
name|row
init|=
name|rowsToDelete
operator|.
name|iterator
argument_list|()
init|;
name|row
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|long
name|lockid
init|=
name|server
operator|.
name|startUpdate
argument_list|(
name|m
operator|.
name|regionName
argument_list|,
name|clientId
argument_list|,
name|row
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|server
operator|.
name|delete
argument_list|(
name|m
operator|.
name|regionName
argument_list|,
name|clientId
argument_list|,
name|lockid
argument_list|,
name|columns
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|server
operator|.
name|commit
argument_list|(
name|m
operator|.
name|regionName
argument_list|,
name|clientId
argument_list|,
name|lockid
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|HServerAddress
name|findRootRegion
parameter_list|()
block|{
return|return
name|rootRegionLocation
return|;
block|}
comment|//////////////////////////////////////////////////////////////////////////////
comment|// Managing leases
comment|//////////////////////////////////////////////////////////////////////////////
class|class
name|ServerExpirer
extends|extends
name|LeaseListener
block|{
name|String
name|server
init|=
literal|null
decl_stmt|;
specifier|public
name|ServerExpirer
parameter_list|(
name|String
name|server
parameter_list|)
block|{
name|this
operator|.
name|server
operator|=
operator|new
name|String
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|leaseExpired
parameter_list|()
block|{
name|HServerInfo
name|storedInfo
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|serversToServerInfo
init|)
block|{
name|storedInfo
operator|=
name|serversToServerInfo
operator|.
name|remove
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|msgQueue
init|)
block|{
name|msgQueue
operator|.
name|add
argument_list|(
operator|new
name|PendingServerShutdown
argument_list|(
name|storedInfo
argument_list|)
argument_list|)
expr_stmt|;
name|msgQueue
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

