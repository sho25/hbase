begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|BatchUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|RowResult
import|;
end_import

begin_comment
comment|/**  * Interface for transactional region servers.  *   *<p>NOTE: if you change the interface, you must change the RPC version  * number in HBaseRPCProtocolVersion  *   */
end_comment

begin_interface
specifier|public
interface|interface
name|TransactionalRegionInterface
extends|extends
name|HRegionInterface
block|{
comment|/**    * Sent to initiate a transaction.    *     * @param transactionId    * @param regionName name of region    * @throws IOException    */
specifier|public
name|void
name|beginTransaction
parameter_list|(
name|long
name|transactionId
parameter_list|,
specifier|final
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Retrieve a single value from the specified region for the specified row and    * column keys    *    * @param transactionId    * @param regionName name of region    * @param row row key    * @param column column key    * @return alue for that region/row/column    * @throws IOException    */
specifier|public
name|Cell
name|get
parameter_list|(
name|long
name|transactionId
parameter_list|,
specifier|final
name|byte
index|[]
name|regionName
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|column
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Get the specified number of versions of the specified row and column    *     * @param transactionId    * @param regionName region name    * @param row row key    * @param column column key    * @param numVersions number of versions to return    * @return array of values    * @throws IOException    */
specifier|public
name|Cell
index|[]
name|get
parameter_list|(
name|long
name|transactionId
parameter_list|,
specifier|final
name|byte
index|[]
name|regionName
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|column
parameter_list|,
specifier|final
name|int
name|numVersions
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Get the specified number of versions of the specified row and column with    * the specified timestamp.    *     * @param transactionId    * @param regionName region name    * @param row row key    * @param column column key    * @param timestamp timestamp    * @param numVersions number of versions to return    * @return array of values    * @throws IOException    */
specifier|public
name|Cell
index|[]
name|get
parameter_list|(
name|long
name|transactionId
parameter_list|,
specifier|final
name|byte
index|[]
name|regionName
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|column
parameter_list|,
specifier|final
name|long
name|timestamp
parameter_list|,
specifier|final
name|int
name|numVersions
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Get all the data for the specified row at a given timestamp    *     * @param transactionId    * @param regionName region name    * @param row row key    * @param ts timestamp    * @return map of values    * @throws IOException    */
specifier|public
name|RowResult
name|getRow
parameter_list|(
name|long
name|transactionId
parameter_list|,
specifier|final
name|byte
index|[]
name|regionName
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|long
name|ts
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Get selected columns for the specified row at a given timestamp.    *     * @param transactionId    * @param regionName region name    * @param row row key    * @param columns colums to get    * @param ts timestamp    * @return map of values    * @throws IOException    */
specifier|public
name|RowResult
name|getRow
parameter_list|(
name|long
name|transactionId
parameter_list|,
specifier|final
name|byte
index|[]
name|regionName
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
index|[]
name|columns
parameter_list|,
specifier|final
name|long
name|ts
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Get selected columns for the specified row at the latest timestamp.    *     * @param transactionId    * @param regionName region name    * @param row row key    * @param columns columns to get    * @return map of values    * @throws IOException    */
specifier|public
name|RowResult
name|getRow
parameter_list|(
name|long
name|transactionId
parameter_list|,
specifier|final
name|byte
index|[]
name|regionName
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
index|[]
name|columns
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Delete all cells that match the passed row and whose timestamp is equal-to    * or older than the passed timestamp.    *     * @param transactionId    * @param regionName region name    * @param delete    * @throws IOException    */
specifier|public
name|void
name|delete
parameter_list|(
name|long
name|transactionId
parameter_list|,
name|byte
index|[]
name|regionName
parameter_list|,
name|Delete
name|delete
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Opens a remote scanner with a RowFilter.    *     * @param transactionId    * @param regionName name of region to scan    * @param scan    * @return scannerId scanner identifier used in other calls    * @throws IOException    */
specifier|public
name|long
name|openScanner
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|,
specifier|final
name|byte
index|[]
name|regionName
parameter_list|,
name|Scan
name|scan
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Applies a batch of updates via one RPC    *     * @param transactionId    * @param regionName name of the region to update    * @param b BatchUpdate    * @throws IOException    */
specifier|public
name|void
name|batchUpdate
parameter_list|(
name|long
name|transactionId
parameter_list|,
specifier|final
name|byte
index|[]
name|regionName
parameter_list|,
specifier|final
name|BatchUpdate
name|b
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Ask if we can commit the given transaction.    *    * @param regionName    * @param transactionId    * @return true if we can commit    * @throws IOException    */
specifier|public
name|boolean
name|commitRequest
parameter_list|(
specifier|final
name|byte
index|[]
name|regionName
parameter_list|,
name|long
name|transactionId
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Commit the transaction.    *    * @param regionName    * @param transactionId    * @throws IOException    */
specifier|public
name|void
name|commit
parameter_list|(
specifier|final
name|byte
index|[]
name|regionName
parameter_list|,
name|long
name|transactionId
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Abort the transaction.    *    * @param regionName    * @param transactionId    * @throws IOException    */
specifier|public
name|void
name|abort
parameter_list|(
specifier|final
name|byte
index|[]
name|regionName
parameter_list|,
name|long
name|transactionId
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
end_interface

end_unit

