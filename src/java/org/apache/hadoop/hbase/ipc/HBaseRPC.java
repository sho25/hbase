begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ConnectException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|SocketFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RetriesExhaustedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|HbaseObjectWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|VersionedProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_comment
comment|/** A simple RPC mechanism.  *  * This is a local hbase copy of the hadoop RPC so we can do things like  * address HADOOP-414 for hbase-only and try other hbase-specific  * optimizations like using our own version of ObjectWritable.  Class has been  * renamed to avoid confusing it w/ hadoop versions.  *<p>  *   *  * A<i>protocol</i> is a Java interface.  All parameters and return types must  * be one of:  *  *<ul><li>a primitive type,<code>boolean</code>,<code>byte</code>,  *<code>char</code>,<code>short</code>,<code>int</code>,<code>long</code>,  *<code>float</code>,<code>double</code>, or<code>void</code>; or</li>  *  *<li>a {@link String}; or</li>  *  *<li>a {@link Writable}; or</li>  *  *<li>an array of the above types</li></ul>  *  * All methods in the protocol should throw only IOException.  No field data of  * the protocol instance is transmitted.  */
end_comment

begin_class
specifier|public
class|class
name|HBaseRPC
block|{
comment|// Leave this out in the hadoop ipc package but keep class name.  Do this
comment|// so that we dont' get the logging of this class's invocations by doing our
comment|// blanket enabling DEBUG on the o.a.h.h. package.
specifier|protected
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"org.apache.hadoop.ipc.HbaseRPC"
argument_list|)
decl_stmt|;
specifier|private
name|HBaseRPC
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|// no public ctor
comment|// Special code that means 'not-encoded'.
specifier|private
specifier|static
specifier|final
name|byte
name|NOT_ENCODED
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
name|byte
name|code
init|=
name|NOT_ENCODED
operator|+
literal|1
decl_stmt|;
comment|/** Add a new interface to the ipc map.    * @param c Class whose methods we'll add to the map of methods to codes    * (and vice versa).    * @param startCode Current state of the byte code.    * @return State of<code>code</code> when this method is done.    */
specifier|public
specifier|static
name|byte
name|addToMap
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|c
parameter_list|,
specifier|final
name|byte
name|startCode
parameter_list|)
block|{
if|if
condition|(
name|Invocation
operator|.
name|CODE_TO_METHODNAME
operator|.
name|get
argument_list|(
name|startCode
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Code "
operator|+
name|startCode
operator|+
literal|"already had entry"
argument_list|)
throw|;
block|}
name|byte
name|localCode
init|=
name|startCode
decl_stmt|;
name|Method
index|[]
name|methods
init|=
name|c
operator|.
name|getMethods
argument_list|()
decl_stmt|;
comment|// There are no guarantees about the order in which items are returned in
comment|// so do a sort (Was seeing that sort was one way on one server and then
comment|// another on different server).
name|Arrays
operator|.
name|sort
argument_list|(
name|methods
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Method
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Method
name|left
parameter_list|,
name|Method
name|right
parameter_list|)
block|{
return|return
name|left
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|right
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|methods
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Invocation
operator|.
name|addToMap
argument_list|(
name|methods
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|,
name|localCode
operator|++
argument_list|)
expr_stmt|;
block|}
return|return
name|localCode
return|;
block|}
static|static
block|{
name|code
operator|=
name|HBaseRPC
operator|.
name|addToMap
argument_list|(
name|VersionedProtocol
operator|.
name|class
argument_list|,
name|code
argument_list|)
expr_stmt|;
name|code
operator|=
name|HBaseRPC
operator|.
name|addToMap
argument_list|(
name|HMasterInterface
operator|.
name|class
argument_list|,
name|code
argument_list|)
expr_stmt|;
name|code
operator|=
name|HBaseRPC
operator|.
name|addToMap
argument_list|(
name|HMasterRegionInterface
operator|.
name|class
argument_list|,
name|code
argument_list|)
expr_stmt|;
name|code
operator|=
name|HBaseRPC
operator|.
name|addToMap
argument_list|(
name|HRegionInterface
operator|.
name|class
argument_list|,
name|code
argument_list|)
expr_stmt|;
block|}
comment|/** A method invocation, including the method name and its parameters.*/
specifier|private
specifier|static
class|class
name|Invocation
implements|implements
name|Writable
implements|,
name|Configurable
block|{
comment|// Here, for hbase, we maintain two static maps of method names to code and
comment|// vice versa.
specifier|static
specifier|final
name|Map
argument_list|<
name|Byte
argument_list|,
name|String
argument_list|>
name|CODE_TO_METHODNAME
init|=
operator|new
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Byte
argument_list|>
name|METHODNAME_TO_CODE
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Byte
argument_list|>
argument_list|()
decl_stmt|;
comment|// End of hbase modifications.
specifier|private
name|String
name|methodName
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|Class
index|[]
name|parameterClasses
decl_stmt|;
specifier|private
name|Object
index|[]
name|parameters
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
comment|/** default constructor */
specifier|public
name|Invocation
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**      * @param method      * @param parameters      */
specifier|public
name|Invocation
parameter_list|(
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|parameters
parameter_list|)
block|{
name|this
operator|.
name|methodName
operator|=
name|method
operator|.
name|getName
argument_list|()
expr_stmt|;
name|this
operator|.
name|parameterClasses
operator|=
name|method
operator|.
name|getParameterTypes
argument_list|()
expr_stmt|;
name|this
operator|.
name|parameters
operator|=
name|parameters
expr_stmt|;
block|}
comment|/** @return The name of the method invoked. */
specifier|public
name|String
name|getMethodName
parameter_list|()
block|{
return|return
name|methodName
return|;
block|}
comment|/** @return The parameter classes. */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|Class
index|[]
name|getParameterClasses
parameter_list|()
block|{
return|return
name|parameterClasses
return|;
block|}
comment|/** @return The parameter instances. */
specifier|public
name|Object
index|[]
name|getParameters
parameter_list|()
block|{
return|return
name|parameters
return|;
block|}
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
name|code
init|=
name|in
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|methodName
operator|=
name|CODE_TO_METHODNAME
operator|.
name|get
argument_list|(
name|Byte
operator|.
name|valueOf
argument_list|(
name|code
argument_list|)
argument_list|)
expr_stmt|;
name|parameters
operator|=
operator|new
name|Object
index|[
name|in
operator|.
name|readInt
argument_list|()
index|]
expr_stmt|;
name|parameterClasses
operator|=
operator|new
name|Class
index|[
name|parameters
operator|.
name|length
index|]
expr_stmt|;
name|HbaseObjectWritable
name|objectWritable
init|=
operator|new
name|HbaseObjectWritable
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parameters
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|parameters
index|[
name|i
index|]
operator|=
name|HbaseObjectWritable
operator|.
name|readObject
argument_list|(
name|in
argument_list|,
name|objectWritable
argument_list|,
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
name|parameterClasses
index|[
name|i
index|]
operator|=
name|objectWritable
operator|.
name|getDeclaredClass
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|writeMethodNameCode
argument_list|(
name|out
argument_list|,
name|this
operator|.
name|methodName
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|parameterClasses
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parameterClasses
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|HbaseObjectWritable
operator|.
name|writeObject
argument_list|(
name|out
argument_list|,
name|parameters
index|[
name|i
index|]
argument_list|,
name|parameterClasses
index|[
name|i
index|]
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|(
literal|256
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|methodName
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parameters
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
name|buffer
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|parameters
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|this
operator|.
name|conf
return|;
block|}
comment|// Hbase additions.
specifier|static
name|void
name|addToMap
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|byte
name|code
parameter_list|)
block|{
if|if
condition|(
name|METHODNAME_TO_CODE
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return;
block|}
name|METHODNAME_TO_CODE
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|Byte
operator|.
name|valueOf
argument_list|(
name|code
argument_list|)
argument_list|)
expr_stmt|;
name|CODE_TO_METHODNAME
operator|.
name|put
argument_list|(
name|Byte
operator|.
name|valueOf
argument_list|(
name|code
argument_list|)
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
comment|/*      * Write out the code byte for passed Class.      * @param out      * @param c      * @throws IOException      */
specifier|static
name|void
name|writeMethodNameCode
parameter_list|(
specifier|final
name|DataOutput
name|out
parameter_list|,
specifier|final
name|String
name|methodname
parameter_list|)
throws|throws
name|IOException
block|{
name|Byte
name|code
init|=
name|METHODNAME_TO_CODE
operator|.
name|get
argument_list|(
name|methodname
argument_list|)
decl_stmt|;
if|if
condition|(
name|code
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unsupported type "
operator|+
name|methodname
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"No code for unexpected "
operator|+
name|methodname
argument_list|)
throw|;
block|}
name|out
operator|.
name|writeByte
argument_list|(
name|code
operator|.
name|byteValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// End of hbase additions.
block|}
comment|/* Cache a client using its socket factory as the hash key */
specifier|static
specifier|private
class|class
name|ClientCache
block|{
specifier|private
name|Map
argument_list|<
name|SocketFactory
argument_list|,
name|HBaseClient
argument_list|>
name|clients
init|=
operator|new
name|HashMap
argument_list|<
name|SocketFactory
argument_list|,
name|HBaseClient
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|ClientCache
parameter_list|()
block|{}
comment|/**      * Construct& cache an IPC client with the user-provided SocketFactory       * if no cached client exists.      *       * @param conf Configuration      * @return an IPC client      */
specifier|protected
specifier|synchronized
name|HBaseClient
name|getClient
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|SocketFactory
name|factory
parameter_list|)
block|{
comment|// Construct& cache client.  The configuration is only used for timeout,
comment|// and Clients have connection pools.  So we can either (a) lose some
comment|// connection pooling and leak sockets, or (b) use the same timeout for all
comment|// configurations.  Since the IPC is usually intended globally, not
comment|// per-job, we choose (a).
name|HBaseClient
name|client
init|=
name|clients
operator|.
name|get
argument_list|(
name|factory
argument_list|)
decl_stmt|;
if|if
condition|(
name|client
operator|==
literal|null
condition|)
block|{
comment|// Make an hbase client instead of hadoop Client.
name|client
operator|=
operator|new
name|HBaseClient
argument_list|(
name|HbaseObjectWritable
operator|.
name|class
argument_list|,
name|conf
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|clients
operator|.
name|put
argument_list|(
name|factory
argument_list|,
name|client
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|client
operator|.
name|incCount
argument_list|()
expr_stmt|;
block|}
return|return
name|client
return|;
block|}
comment|/**      * Construct& cache an IPC client with the default SocketFactory       * if no cached client exists.      *       * @param conf Configuration      * @return an IPC client      */
specifier|protected
specifier|synchronized
name|HBaseClient
name|getClient
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|getClient
argument_list|(
name|conf
argument_list|,
name|SocketFactory
operator|.
name|getDefault
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Stop a RPC client connection       * A RPC client is closed only when its reference count becomes zero.      */
specifier|protected
name|void
name|stopClient
parameter_list|(
name|HBaseClient
name|client
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|client
operator|.
name|decCount
argument_list|()
expr_stmt|;
if|if
condition|(
name|client
operator|.
name|isZeroReference
argument_list|()
condition|)
block|{
name|clients
operator|.
name|remove
argument_list|(
name|client
operator|.
name|getSocketFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|client
operator|.
name|isZeroReference
argument_list|()
condition|)
block|{
name|client
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
specifier|final
specifier|static
name|ClientCache
name|CLIENTS
init|=
operator|new
name|ClientCache
argument_list|()
decl_stmt|;
specifier|private
specifier|static
class|class
name|Invoker
implements|implements
name|InvocationHandler
block|{
specifier|private
name|InetSocketAddress
name|address
decl_stmt|;
specifier|private
name|UserGroupInformation
name|ticket
decl_stmt|;
specifier|private
name|HBaseClient
name|client
decl_stmt|;
specifier|private
name|boolean
name|isClosed
init|=
literal|false
decl_stmt|;
comment|/**      * @param address      * @param ticket      * @param conf      * @param factory      */
specifier|public
name|Invoker
parameter_list|(
name|InetSocketAddress
name|address
parameter_list|,
name|UserGroupInformation
name|ticket
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|SocketFactory
name|factory
parameter_list|)
block|{
name|this
operator|.
name|address
operator|=
name|address
expr_stmt|;
name|this
operator|.
name|ticket
operator|=
name|ticket
expr_stmt|;
name|this
operator|.
name|client
operator|=
name|CLIENTS
operator|.
name|getClient
argument_list|(
name|conf
argument_list|,
name|factory
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
specifier|final
name|boolean
name|logDebug
init|=
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
decl_stmt|;
name|long
name|startTime
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|logDebug
condition|)
block|{
name|startTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
name|HbaseObjectWritable
name|value
init|=
operator|(
name|HbaseObjectWritable
operator|)
name|client
operator|.
name|call
argument_list|(
operator|new
name|Invocation
argument_list|(
name|method
argument_list|,
name|args
argument_list|)
argument_list|,
name|address
argument_list|,
name|ticket
argument_list|)
decl_stmt|;
if|if
condition|(
name|logDebug
condition|)
block|{
name|long
name|callTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Call: "
operator|+
name|method
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|callTime
argument_list|)
expr_stmt|;
block|}
return|return
name|value
operator|.
name|get
argument_list|()
return|;
block|}
comment|/* close the IPC client that's responsible for this invoker's RPCs */
specifier|synchronized
specifier|protected
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isClosed
condition|)
block|{
name|isClosed
operator|=
literal|true
expr_stmt|;
name|CLIENTS
operator|.
name|stopClient
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * A version mismatch for the RPC protocol.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
specifier|public
specifier|static
class|class
name|VersionMismatch
extends|extends
name|IOException
block|{
specifier|private
name|String
name|interfaceName
decl_stmt|;
specifier|private
name|long
name|clientVersion
decl_stmt|;
specifier|private
name|long
name|serverVersion
decl_stmt|;
comment|/**      * Create a version mismatch exception      * @param interfaceName the name of the protocol mismatch      * @param clientVersion the client's version of the protocol      * @param serverVersion the server's version of the protocol      */
specifier|public
name|VersionMismatch
parameter_list|(
name|String
name|interfaceName
parameter_list|,
name|long
name|clientVersion
parameter_list|,
name|long
name|serverVersion
parameter_list|)
block|{
name|super
argument_list|(
literal|"Protocol "
operator|+
name|interfaceName
operator|+
literal|" version mismatch. (client = "
operator|+
name|clientVersion
operator|+
literal|", server = "
operator|+
name|serverVersion
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|this
operator|.
name|interfaceName
operator|=
name|interfaceName
expr_stmt|;
name|this
operator|.
name|clientVersion
operator|=
name|clientVersion
expr_stmt|;
name|this
operator|.
name|serverVersion
operator|=
name|serverVersion
expr_stmt|;
block|}
comment|/**      * Get the interface name      * @return the java class name       *          (eg. org.apache.hadoop.mapred.InterTrackerProtocol)      */
specifier|public
name|String
name|getInterfaceName
parameter_list|()
block|{
return|return
name|interfaceName
return|;
block|}
comment|/**      * @return the client's preferred version      */
specifier|public
name|long
name|getClientVersion
parameter_list|()
block|{
return|return
name|clientVersion
return|;
block|}
comment|/**      * @return the server's agreed to version.      */
specifier|public
name|long
name|getServerVersion
parameter_list|()
block|{
return|return
name|serverVersion
return|;
block|}
block|}
comment|/**    * @param protocol    * @param clientVersion    * @param addr    * @param conf    * @param maxAttempts    * @param timeout    * @return proxy    * @throws IOException    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
name|VersionedProtocol
name|waitForProxy
parameter_list|(
name|Class
name|protocol
parameter_list|,
name|long
name|clientVersion
parameter_list|,
name|InetSocketAddress
name|addr
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|int
name|maxAttempts
parameter_list|,
name|long
name|timeout
parameter_list|)
throws|throws
name|IOException
block|{
comment|// HBase does limited number of reconnects which is different from hadoop.
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|IOException
name|ioe
decl_stmt|;
name|int
name|reconnectAttempts
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
return|return
name|getProxy
argument_list|(
name|protocol
argument_list|,
name|clientVersion
argument_list|,
name|addr
argument_list|,
name|conf
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ConnectException
name|se
parameter_list|)
block|{
comment|// namenode has not been started
name|LOG
operator|.
name|info
argument_list|(
literal|"Server at "
operator|+
name|addr
operator|+
literal|" not available yet, Zzzzz..."
argument_list|)
expr_stmt|;
name|ioe
operator|=
name|se
expr_stmt|;
if|if
condition|(
name|maxAttempts
operator|>=
literal|0
operator|&&
operator|++
name|reconnectAttempts
operator|>=
name|maxAttempts
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Server at "
operator|+
name|addr
operator|+
literal|" could not be reached after "
operator|+
name|reconnectAttempts
operator|+
literal|" tries, giving up."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RetriesExhaustedException
argument_list|(
name|addr
operator|.
name|toString
argument_list|()
argument_list|,
literal|"unknown"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"unknown"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|reconnectAttempts
operator|-
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|Throwable
argument_list|>
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|te
parameter_list|)
block|{
comment|// namenode is busy
name|LOG
operator|.
name|info
argument_list|(
literal|"Problem connecting to server: "
operator|+
name|addr
argument_list|)
expr_stmt|;
name|ioe
operator|=
name|te
expr_stmt|;
block|}
comment|// check if timed out
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|timeout
operator|>=
name|startTime
condition|)
block|{
throw|throw
name|ioe
throw|;
block|}
comment|// wait for retry
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
comment|// IGNORE
block|}
block|}
block|}
comment|/**    * Construct a client-side proxy object that implements the named protocol,    * talking to a server at the named address.    *    * @param protocol    * @param clientVersion    * @param addr    * @param conf    * @param factory    * @return proxy    * @throws IOException    */
specifier|public
specifier|static
name|VersionedProtocol
name|getProxy
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|protocol
parameter_list|,
name|long
name|clientVersion
parameter_list|,
name|InetSocketAddress
name|addr
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|SocketFactory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getProxy
argument_list|(
name|protocol
argument_list|,
name|clientVersion
argument_list|,
name|addr
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|,
name|factory
argument_list|)
return|;
block|}
comment|/**    * Construct a client-side proxy object that implements the named protocol,    * talking to a server at the named address.    *    * @param protocol    * @param clientVersion    * @param addr    * @param ticket    * @param conf    * @param factory    * @return proxy    * @throws IOException    */
specifier|public
specifier|static
name|VersionedProtocol
name|getProxy
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|protocol
parameter_list|,
name|long
name|clientVersion
parameter_list|,
name|InetSocketAddress
name|addr
parameter_list|,
name|UserGroupInformation
name|ticket
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|SocketFactory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
name|VersionedProtocol
name|proxy
init|=
operator|(
name|VersionedProtocol
operator|)
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|protocol
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
index|[]
block|{
name|protocol
block|}
argument_list|,
operator|new
name|Invoker
argument_list|(
name|addr
argument_list|,
name|ticket
argument_list|,
name|conf
argument_list|,
name|factory
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|serverVersion
init|=
name|proxy
operator|.
name|getProtocolVersion
argument_list|(
name|protocol
operator|.
name|getName
argument_list|()
argument_list|,
name|clientVersion
argument_list|)
decl_stmt|;
if|if
condition|(
name|serverVersion
operator|==
name|clientVersion
condition|)
block|{
return|return
name|proxy
return|;
block|}
throw|throw
operator|new
name|VersionMismatch
argument_list|(
name|protocol
operator|.
name|getName
argument_list|()
argument_list|,
name|clientVersion
argument_list|,
name|serverVersion
argument_list|)
throw|;
block|}
comment|/**    * Construct a client-side proxy object with the default SocketFactory    *     * @param protocol    * @param clientVersion    * @param addr    * @param conf    * @return a proxy instance    * @throws IOException    */
specifier|public
specifier|static
name|VersionedProtocol
name|getProxy
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|protocol
parameter_list|,
name|long
name|clientVersion
parameter_list|,
name|InetSocketAddress
name|addr
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getProxy
argument_list|(
name|protocol
argument_list|,
name|clientVersion
argument_list|,
name|addr
argument_list|,
name|conf
argument_list|,
name|NetUtils
operator|.
name|getDefaultSocketFactory
argument_list|(
name|conf
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Stop this proxy and release its invoker's resource    * @param proxy the proxy to be stopped    */
specifier|public
specifier|static
name|void
name|stopProxy
parameter_list|(
name|VersionedProtocol
name|proxy
parameter_list|)
block|{
if|if
condition|(
name|proxy
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|Invoker
operator|)
name|Proxy
operator|.
name|getInvocationHandler
argument_list|(
name|proxy
argument_list|)
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Expert: Make multiple, parallel calls to a set of servers.    *    * @param method    * @param params    * @param addrs    * @param conf    * @return values    * @throws IOException    */
specifier|public
specifier|static
name|Object
index|[]
name|call
parameter_list|(
name|Method
name|method
parameter_list|,
name|Object
index|[]
index|[]
name|params
parameter_list|,
name|InetSocketAddress
index|[]
name|addrs
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Invocation
index|[]
name|invocations
init|=
operator|new
name|Invocation
index|[
name|params
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|params
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|invocations
index|[
name|i
index|]
operator|=
operator|new
name|Invocation
argument_list|(
name|method
argument_list|,
name|params
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|HBaseClient
name|client
init|=
name|CLIENTS
operator|.
name|getClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|Writable
index|[]
name|wrappedValues
init|=
name|client
operator|.
name|call
argument_list|(
name|invocations
argument_list|,
name|addrs
argument_list|)
decl_stmt|;
if|if
condition|(
name|method
operator|.
name|getReturnType
argument_list|()
operator|==
name|Void
operator|.
name|TYPE
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Object
index|[]
name|values
init|=
operator|(
name|Object
index|[]
operator|)
name|Array
operator|.
name|newInstance
argument_list|(
name|method
operator|.
name|getReturnType
argument_list|()
argument_list|,
name|wrappedValues
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|wrappedValues
index|[
name|i
index|]
operator|!=
literal|null
condition|)
name|values
index|[
name|i
index|]
operator|=
operator|(
operator|(
name|HbaseObjectWritable
operator|)
name|wrappedValues
index|[
name|i
index|]
operator|)
operator|.
name|get
argument_list|()
expr_stmt|;
return|return
name|values
return|;
block|}
finally|finally
block|{
name|CLIENTS
operator|.
name|stopClient
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Construct a server for a protocol implementation instance listening on a    * port and address.    *    * @param instance    * @param bindAddress    * @param port    * @param conf    * @return Server    * @throws IOException    */
specifier|public
specifier|static
name|Server
name|getServer
parameter_list|(
specifier|final
name|Object
name|instance
parameter_list|,
specifier|final
name|String
name|bindAddress
parameter_list|,
specifier|final
name|int
name|port
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getServer
argument_list|(
name|instance
argument_list|,
name|bindAddress
argument_list|,
name|port
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
name|conf
argument_list|)
return|;
block|}
comment|/**    * Construct a server for a protocol implementation instance listening on a    * port and address.    *    * @param instance    * @param bindAddress    * @param port    * @param numHandlers    * @param verbose    * @param conf    * @return Server    * @throws IOException    */
specifier|public
specifier|static
name|Server
name|getServer
parameter_list|(
specifier|final
name|Object
name|instance
parameter_list|,
specifier|final
name|String
name|bindAddress
parameter_list|,
specifier|final
name|int
name|port
parameter_list|,
specifier|final
name|int
name|numHandlers
parameter_list|,
specifier|final
name|boolean
name|verbose
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|Server
argument_list|(
name|instance
argument_list|,
name|conf
argument_list|,
name|bindAddress
argument_list|,
name|port
argument_list|,
name|numHandlers
argument_list|,
name|verbose
argument_list|)
return|;
block|}
comment|/** An RPC Server. */
specifier|public
specifier|static
class|class
name|Server
extends|extends
name|HBaseServer
block|{
specifier|private
name|Object
name|instance
decl_stmt|;
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|implementation
decl_stmt|;
specifier|private
name|boolean
name|verbose
decl_stmt|;
comment|/**      * Construct an RPC server.      * @param instance the instance whose methods will be called      * @param conf the configuration to use      * @param bindAddress the address to bind on to listen for connection      * @param port the port to listen for connections on      * @throws IOException      */
specifier|public
name|Server
parameter_list|(
name|Object
name|instance
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|String
name|bindAddress
parameter_list|,
name|int
name|port
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|instance
argument_list|,
name|conf
argument_list|,
name|bindAddress
argument_list|,
name|port
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|classNameBase
parameter_list|(
name|String
name|className
parameter_list|)
block|{
name|String
index|[]
name|names
init|=
name|className
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|names
operator|==
literal|null
operator|||
name|names
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|className
return|;
block|}
return|return
name|names
index|[
name|names
operator|.
name|length
operator|-
literal|1
index|]
return|;
block|}
comment|/** Construct an RPC server.      * @param instance the instance whose methods will be called      * @param conf the configuration to use      * @param bindAddress the address to bind on to listen for connection      * @param port the port to listen for connections on      * @param numHandlers the number of method handler threads to run      * @param verbose whether each call should be logged      * @throws IOException      */
specifier|public
name|Server
parameter_list|(
name|Object
name|instance
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|String
name|bindAddress
parameter_list|,
name|int
name|port
parameter_list|,
name|int
name|numHandlers
parameter_list|,
name|boolean
name|verbose
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|bindAddress
argument_list|,
name|port
argument_list|,
name|Invocation
operator|.
name|class
argument_list|,
name|numHandlers
argument_list|,
name|conf
argument_list|,
name|classNameBase
argument_list|(
name|instance
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|instance
operator|=
name|instance
expr_stmt|;
name|this
operator|.
name|implementation
operator|=
name|instance
operator|.
name|getClass
argument_list|()
expr_stmt|;
name|this
operator|.
name|verbose
operator|=
name|verbose
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Writable
name|call
parameter_list|(
name|Writable
name|param
parameter_list|,
name|long
name|receivedTime
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|Invocation
name|call
init|=
operator|(
name|Invocation
operator|)
name|param
decl_stmt|;
if|if
condition|(
name|verbose
condition|)
name|log
argument_list|(
literal|"Call: "
operator|+
name|call
argument_list|)
expr_stmt|;
name|Method
name|method
init|=
name|implementation
operator|.
name|getMethod
argument_list|(
name|call
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|call
operator|.
name|getParameterClasses
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|method
operator|.
name|invoke
argument_list|(
name|instance
argument_list|,
name|call
operator|.
name|getParameters
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|processingTime
init|=
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
argument_list|)
decl_stmt|;
name|int
name|qTime
init|=
call|(
name|int
call|)
argument_list|(
name|startTime
operator|-
name|receivedTime
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Served: "
operator|+
name|call
operator|.
name|getMethodName
argument_list|()
operator|+
literal|" queueTime= "
operator|+
name|qTime
operator|+
literal|" procesingTime= "
operator|+
name|processingTime
argument_list|)
expr_stmt|;
name|rpcMetrics
operator|.
name|rpcQueueTime
operator|.
name|inc
argument_list|(
name|qTime
argument_list|)
expr_stmt|;
name|rpcMetrics
operator|.
name|rpcProcessingTime
operator|.
name|inc
argument_list|(
name|processingTime
argument_list|)
expr_stmt|;
block|}
name|rpcMetrics
operator|.
name|rpcQueueTime
operator|.
name|inc
argument_list|(
name|qTime
argument_list|)
expr_stmt|;
name|rpcMetrics
operator|.
name|rpcProcessingTime
operator|.
name|inc
argument_list|(
name|processingTime
argument_list|)
expr_stmt|;
name|rpcMetrics
operator|.
name|inc
argument_list|(
name|call
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|processingTime
argument_list|)
expr_stmt|;
if|if
condition|(
name|verbose
condition|)
name|log
argument_list|(
literal|"Return: "
operator|+
name|value
argument_list|)
expr_stmt|;
return|return
operator|new
name|HbaseObjectWritable
argument_list|(
name|method
operator|.
name|getReturnType
argument_list|()
argument_list|,
name|value
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
name|Throwable
name|target
init|=
name|e
operator|.
name|getTargetException
argument_list|()
decl_stmt|;
if|if
condition|(
name|target
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|target
throw|;
block|}
name|IOException
name|ioe
init|=
operator|new
name|IOException
argument_list|(
name|target
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|ioe
operator|.
name|setStackTrace
argument_list|(
name|target
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|IOException
name|ioe
init|=
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|ioe
operator|.
name|setStackTrace
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
block|}
block|}
specifier|protected
specifier|static
name|void
name|log
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|String
name|v
init|=
name|value
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|null
operator|&&
name|v
operator|.
name|length
argument_list|()
operator|>
literal|55
condition|)
name|v
operator|=
name|v
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|55
argument_list|)
operator|+
literal|"..."
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

