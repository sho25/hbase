begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|EmptyWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MiniZooKeeperCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|UnknownScannerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|TestReplication
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestReplication
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Configuration
name|conf1
decl_stmt|;
specifier|private
specifier|static
name|Configuration
name|conf2
decl_stmt|;
specifier|private
specifier|static
name|ZooKeeperWrapper
name|zkw1
decl_stmt|;
specifier|private
specifier|static
name|ZooKeeperWrapper
name|zkw2
decl_stmt|;
specifier|private
specifier|static
name|HTable
name|htable1
decl_stmt|;
specifier|private
specifier|static
name|HTable
name|htable2
decl_stmt|;
specifier|private
specifier|static
name|HBaseTestingUtility
name|utility1
decl_stmt|;
specifier|private
specifier|static
name|HBaseTestingUtility
name|utility2
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NB_ROWS_IN_BATCH
init|=
literal|100
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|SLEEP_TIME
init|=
literal|500
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NB_RETRIES
init|=
literal|10
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|famName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|noRepfamName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"norep"
argument_list|)
decl_stmt|;
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|conf1
operator|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
expr_stmt|;
name|conf1
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_ZNODE_PARENT
argument_list|,
literal|"/1"
argument_list|)
expr_stmt|;
comment|// smaller block size and capacity to trigger more operations
comment|// and test them
name|conf1
operator|.
name|setInt
argument_list|(
literal|"hbase.regionserver.hlog.blocksize"
argument_list|,
literal|1024
operator|*
literal|20
argument_list|)
expr_stmt|;
name|conf1
operator|.
name|setInt
argument_list|(
literal|"replication.source.size.capacity"
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|conf1
operator|.
name|setLong
argument_list|(
literal|"replication.source.sleepforretries"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf1
operator|.
name|setInt
argument_list|(
literal|"hbase.regionserver.maxlogs"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|conf1
operator|.
name|setLong
argument_list|(
literal|"hbase.master.logcleaner.ttl"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|conf1
operator|.
name|setLong
argument_list|(
literal|"hbase.client.retries.number"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|conf1
operator|.
name|setLong
argument_list|(
literal|"hbase.regions.percheckin"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf1
operator|.
name|setBoolean
argument_list|(
name|HConstants
operator|.
name|REPLICATION_ENABLE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf1
operator|.
name|setBoolean
argument_list|(
literal|"dfs.support.append"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf1
operator|.
name|setLong
argument_list|(
name|HConstants
operator|.
name|THREAD_WAKE_FREQUENCY
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|utility1
operator|=
operator|new
name|HBaseTestingUtility
argument_list|(
name|conf1
argument_list|)
expr_stmt|;
name|utility1
operator|.
name|startMiniZKCluster
argument_list|()
expr_stmt|;
name|MiniZooKeeperCluster
name|miniZK
init|=
name|utility1
operator|.
name|getZkCluster
argument_list|()
decl_stmt|;
name|zkw1
operator|=
name|ZooKeeperWrapper
operator|.
name|createInstance
argument_list|(
name|conf1
argument_list|,
literal|"cluster1"
argument_list|)
expr_stmt|;
name|zkw1
operator|.
name|writeZNode
argument_list|(
literal|"/1"
argument_list|,
literal|"replication"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|zkw1
operator|.
name|writeZNode
argument_list|(
literal|"/1/replication"
argument_list|,
literal|"master"
argument_list|,
name|conf1
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_QUORUM
argument_list|)
operator|+
literal|":"
operator|+
name|conf1
operator|.
name|get
argument_list|(
literal|"hbase.zookeeper.property.clientPort"
argument_list|)
operator|+
literal|":/1"
argument_list|)
expr_stmt|;
name|setIsReplication
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Setup first Zk"
argument_list|)
expr_stmt|;
name|conf2
operator|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
expr_stmt|;
name|conf2
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_ZNODE_PARENT
argument_list|,
literal|"/2"
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|setInt
argument_list|(
literal|"hbase.client.retries.number"
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|setBoolean
argument_list|(
name|HConstants
operator|.
name|REPLICATION_ENABLE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|setBoolean
argument_list|(
literal|"dfs.support.append"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|setLong
argument_list|(
literal|"hbase.regions.percheckin"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|utility2
operator|=
operator|new
name|HBaseTestingUtility
argument_list|(
name|conf2
argument_list|)
expr_stmt|;
name|utility2
operator|.
name|setZkCluster
argument_list|(
name|miniZK
argument_list|)
expr_stmt|;
name|zkw2
operator|=
name|ZooKeeperWrapper
operator|.
name|createInstance
argument_list|(
name|conf2
argument_list|,
literal|"cluster2"
argument_list|)
expr_stmt|;
name|zkw2
operator|.
name|writeZNode
argument_list|(
literal|"/2"
argument_list|,
literal|"replication"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|zkw2
operator|.
name|writeZNode
argument_list|(
literal|"/2/replication"
argument_list|,
literal|"master"
argument_list|,
name|conf1
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_QUORUM
argument_list|)
operator|+
literal|":"
operator|+
name|conf1
operator|.
name|get
argument_list|(
literal|"hbase.zookeeper.property.clientPort"
argument_list|)
operator|+
literal|":/1"
argument_list|)
expr_stmt|;
name|zkw1
operator|.
name|writeZNode
argument_list|(
literal|"/1/replication/peers"
argument_list|,
literal|"1"
argument_list|,
name|conf2
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_QUORUM
argument_list|)
operator|+
literal|":"
operator|+
name|conf2
operator|.
name|get
argument_list|(
literal|"hbase.zookeeper.property.clientPort"
argument_list|)
operator|+
literal|":/2"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Setup second Zk"
argument_list|)
expr_stmt|;
name|utility1
operator|.
name|startMiniCluster
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|utility2
operator|.
name|startMiniCluster
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|HTableDescriptor
name|table
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|table
operator|.
name|setDeferredLogFlush
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|HColumnDescriptor
name|fam
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|famName
argument_list|)
decl_stmt|;
name|fam
operator|.
name|setScope
argument_list|(
name|HConstants
operator|.
name|REPLICATION_SCOPE_GLOBAL
argument_list|)
expr_stmt|;
name|table
operator|.
name|addFamily
argument_list|(
name|fam
argument_list|)
expr_stmt|;
name|fam
operator|=
operator|new
name|HColumnDescriptor
argument_list|(
name|noRepfamName
argument_list|)
expr_stmt|;
name|table
operator|.
name|addFamily
argument_list|(
name|fam
argument_list|)
expr_stmt|;
name|HBaseAdmin
name|admin1
init|=
operator|new
name|HBaseAdmin
argument_list|(
name|conf1
argument_list|)
decl_stmt|;
name|HBaseAdmin
name|admin2
init|=
operator|new
name|HBaseAdmin
argument_list|(
name|conf2
argument_list|)
decl_stmt|;
name|admin1
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|admin2
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|htable1
operator|=
operator|new
name|HTable
argument_list|(
name|conf1
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|htable1
operator|.
name|setWriteBufferSize
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
name|htable2
operator|=
operator|new
name|HTable
argument_list|(
name|conf2
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|setIsReplication
parameter_list|(
name|boolean
name|rep
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Set rep "
operator|+
name|rep
argument_list|)
expr_stmt|;
name|zkw1
operator|.
name|writeZNode
argument_list|(
literal|"/1/replication"
argument_list|,
literal|"state"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|rep
argument_list|)
argument_list|)
expr_stmt|;
comment|// Takes some ms for ZK to fire the watcher
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
block|}
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|setIsReplication
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|utility1
operator|.
name|truncateTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|utility2
operator|.
name|truncateTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// If test is flaky, set that sleep higher
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
operator|*
literal|8
argument_list|)
expr_stmt|;
name|setIsReplication
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|utility2
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
name|utility1
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
comment|/**    * Add a row, check it's replicated, delete it, check's gone    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testSimplePutDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testSimplePutDelete"
argument_list|)
expr_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|famName
argument_list|,
name|row
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|htable1
operator|=
operator|new
name|HTable
argument_list|(
name|conf1
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|htable1
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|HTable
name|table2
init|=
operator|new
name|HTable
argument_list|(
name|conf2
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NB_RETRIES
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
name|NB_RETRIES
operator|-
literal|1
condition|)
block|{
name|fail
argument_list|(
literal|"Waited too much time for put replication"
argument_list|)
expr_stmt|;
block|}
name|Result
name|res
init|=
name|table2
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Row not available"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertArrayEquals
argument_list|(
name|res
operator|.
name|value
argument_list|()
argument_list|,
name|row
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|Delete
name|del
init|=
operator|new
name|Delete
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|htable1
operator|.
name|delete
argument_list|(
name|del
argument_list|)
expr_stmt|;
name|table2
operator|=
operator|new
name|HTable
argument_list|(
name|conf2
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NB_RETRIES
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
name|NB_RETRIES
operator|-
literal|1
condition|)
block|{
name|fail
argument_list|(
literal|"Waited too much time for del replication"
argument_list|)
expr_stmt|;
block|}
name|Result
name|res
init|=
name|table2
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|size
argument_list|()
operator|>=
literal|1
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Row not deleted"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
comment|/**    * Try a small batch upload using the write buffer, check it's replicated    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testSmallBatch
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testSmallBatch"
argument_list|)
expr_stmt|;
name|Put
name|put
decl_stmt|;
comment|// normal Batch tests
name|htable1
operator|.
name|setAutoFlush
argument_list|(
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NB_ROWS_IN_BATCH
condition|;
name|i
operator|++
control|)
block|{
name|put
operator|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|famName
argument_list|,
name|row
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|htable1
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
name|htable1
operator|.
name|flushCommits
argument_list|()
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|ResultScanner
name|scanner1
init|=
name|htable1
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|Result
index|[]
name|res1
init|=
name|scanner1
operator|.
name|next
argument_list|(
name|NB_ROWS_IN_BATCH
argument_list|)
decl_stmt|;
name|scanner1
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|NB_ROWS_IN_BATCH
argument_list|,
name|res1
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NB_RETRIES
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
name|NB_RETRIES
operator|-
literal|1
condition|)
block|{
name|fail
argument_list|(
literal|"Waited too much time for normal batch replication"
argument_list|)
expr_stmt|;
block|}
name|ResultScanner
name|scanner
init|=
name|htable2
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|Result
index|[]
name|res
init|=
name|scanner
operator|.
name|next
argument_list|(
name|NB_ROWS_IN_BATCH
argument_list|)
decl_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|res
operator|.
name|length
operator|!=
name|NB_ROWS_IN_BATCH
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Only got "
operator|+
name|res
operator|.
name|length
operator|+
literal|" rows"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
name|htable1
operator|.
name|setAutoFlush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test stopping replication, trying to insert, make sure nothing's    * replicated, enable it, try replicating and it should work    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testStartStop
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test stopping replication
name|setIsReplication
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"stop start"
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|famName
argument_list|,
name|row
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|htable1
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"stop start"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NB_RETRIES
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
name|NB_RETRIES
operator|-
literal|1
condition|)
block|{
break|break;
block|}
name|Result
name|res
init|=
name|htable2
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|size
argument_list|()
operator|>=
literal|1
condition|)
block|{
name|fail
argument_list|(
literal|"Replication wasn't stopped"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Row not replicated, let's wait a bit more..."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Test restart replication
name|setIsReplication
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|htable1
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NB_RETRIES
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
name|NB_RETRIES
operator|-
literal|1
condition|)
block|{
name|fail
argument_list|(
literal|"Waited too much time for put replication"
argument_list|)
expr_stmt|;
block|}
name|Result
name|res
init|=
name|htable2
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Row not available"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertArrayEquals
argument_list|(
name|res
operator|.
name|value
argument_list|()
argument_list|,
name|row
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|put
operator|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"do not rep"
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|noRepfamName
argument_list|,
name|row
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|htable1
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"do not rep"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NB_RETRIES
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
name|NB_RETRIES
operator|-
literal|1
condition|)
block|{
break|break;
block|}
name|Result
name|res
init|=
name|htable2
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|size
argument_list|()
operator|>=
literal|1
condition|)
block|{
name|fail
argument_list|(
literal|"Not supposed to be replicated"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Row not replicated, let's wait a bit more..."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Do a more intense version testSmallBatch, one  that will trigger    * hlog rolling and other non-trivial code paths    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|loadTesting
parameter_list|()
throws|throws
name|Exception
block|{
name|htable1
operator|.
name|setWriteBufferSize
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
name|htable1
operator|.
name|setAutoFlush
argument_list|(
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NB_ROWS_IN_BATCH
operator|*
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|famName
argument_list|,
name|row
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|htable1
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
name|htable1
operator|.
name|flushCommits
argument_list|()
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|ResultScanner
name|scanner
init|=
name|htable1
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|Result
index|[]
name|res
init|=
name|scanner
operator|.
name|next
argument_list|(
name|NB_ROWS_IN_BATCH
operator|*
literal|100
argument_list|)
decl_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|NB_ROWS_IN_BATCH
operator|*
literal|10
argument_list|,
name|res
operator|.
name|length
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NB_RETRIES
condition|;
name|i
operator|++
control|)
block|{
name|scanner
operator|=
name|htable2
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|res
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|NB_ROWS_IN_BATCH
operator|*
literal|100
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|res
operator|.
name|length
operator|!=
name|NB_ROWS_IN_BATCH
operator|*
literal|10
condition|)
block|{
if|if
condition|(
name|i
operator|==
name|NB_RETRIES
operator|-
literal|1
condition|)
block|{
name|int
name|lastRow
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|res
control|)
block|{
name|int
name|currentRow
init|=
name|Bytes
operator|.
name|toInt
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
name|lastRow
operator|+
literal|1
init|;
name|row
operator|<
name|currentRow
condition|;
name|row
operator|++
control|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Row missing: "
operator|+
name|row
argument_list|)
expr_stmt|;
block|}
name|lastRow
operator|=
name|currentRow
expr_stmt|;
block|}
name|LOG
operator|.
name|error
argument_list|(
literal|"Last row: "
operator|+
name|lastRow
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Waited too much time for normal batch replication, "
operator|+
name|res
operator|.
name|length
operator|+
literal|" instead of "
operator|+
name|NB_ROWS_IN_BATCH
operator|*
literal|10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Only got "
operator|+
name|res
operator|.
name|length
operator|+
literal|" rows"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
comment|/**    * Load up multiple tables over 2 region servers and kill a source during    * the upload. The failover happens internally.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|queueFailover
parameter_list|()
throws|throws
name|Exception
block|{
name|utility1
operator|.
name|createMultiRegions
argument_list|(
name|htable1
argument_list|,
name|famName
argument_list|)
expr_stmt|;
comment|// killing the RS with .META. can result into failed puts until we solve
comment|// IO fencing
name|int
name|rsToKill1
init|=
name|utility1
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getServerWithMeta
argument_list|()
operator|==
literal|0
condition|?
literal|1
else|:
literal|0
decl_stmt|;
name|int
name|rsToKill2
init|=
name|utility2
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getServerWithMeta
argument_list|()
operator|==
literal|0
condition|?
literal|1
else|:
literal|0
decl_stmt|;
comment|// Takes about 20 secs to run the full loading, kill around the middle
name|Thread
name|killer1
init|=
name|killARegionServer
argument_list|(
name|utility1
argument_list|,
literal|7500
argument_list|,
name|rsToKill1
argument_list|)
decl_stmt|;
name|Thread
name|killer2
init|=
name|killARegionServer
argument_list|(
name|utility2
argument_list|,
literal|10000
argument_list|,
name|rsToKill2
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Start loading table"
argument_list|)
expr_stmt|;
name|int
name|initialCount
init|=
name|utility1
operator|.
name|loadTable
argument_list|(
name|htable1
argument_list|,
name|famName
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Done loading table"
argument_list|)
expr_stmt|;
name|killer1
operator|.
name|join
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|killer2
operator|.
name|join
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Done waiting for threads"
argument_list|)
expr_stmt|;
name|Result
index|[]
name|res
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|ResultScanner
name|scanner
init|=
name|htable1
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|res
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|initialCount
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|UnknownScannerException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Cluster wasn't ready yet, restarting scanner"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Test we actually have all the rows, we may miss some because we
comment|// don't have IO fencing.
if|if
condition|(
name|res
operator|.
name|length
operator|!=
name|initialCount
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"We lost some rows on the master cluster!"
argument_list|)
expr_stmt|;
comment|// We don't really expect the other cluster to have more rows
name|initialCount
operator|=
name|res
operator|.
name|length
expr_stmt|;
block|}
name|Scan
name|scan2
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|int
name|lastCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NB_RETRIES
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
name|NB_RETRIES
operator|-
literal|1
condition|)
block|{
name|fail
argument_list|(
literal|"Waited too much time for queueFailover replication"
argument_list|)
expr_stmt|;
block|}
name|ResultScanner
name|scanner2
init|=
name|htable2
operator|.
name|getScanner
argument_list|(
name|scan2
argument_list|)
decl_stmt|;
name|Result
index|[]
name|res2
init|=
name|scanner2
operator|.
name|next
argument_list|(
name|initialCount
operator|*
literal|2
argument_list|)
decl_stmt|;
name|scanner2
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|res2
operator|.
name|length
operator|<
name|initialCount
condition|)
block|{
if|if
condition|(
name|lastCount
operator|<
name|res2
operator|.
name|length
condition|)
block|{
name|i
operator|--
expr_stmt|;
comment|// Don't increment timeout if we make progress
block|}
name|lastCount
operator|=
name|res2
operator|.
name|length
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Only got "
operator|+
name|lastCount
operator|+
literal|" rows instead of "
operator|+
name|initialCount
operator|+
literal|" current i="
operator|+
name|i
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
operator|*
literal|2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
specifier|private
specifier|static
name|Thread
name|killARegionServer
parameter_list|(
specifier|final
name|HBaseTestingUtility
name|utility
parameter_list|,
specifier|final
name|long
name|timeout
parameter_list|,
specifier|final
name|int
name|rs
parameter_list|)
block|{
name|Thread
name|killer
init|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
name|utility
operator|.
name|expireRegionServerSession
argument_list|(
name|rs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|killer
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|killer
return|;
block|}
block|}
end_class

end_unit

