begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MultithreadedTestUtil
operator|.
name|TestContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MultithreadedTestUtil
operator|.
name|TestThread
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
specifier|public
class|class
name|TestAcidGuarantees
block|{
specifier|protected
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestAcidGuarantees
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|TABLE_NAME
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"TestAcidGuarantees"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|FAMILY_A
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|FAMILY_B
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|FAMILY_C
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"C"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|QUALIFIER_NAME
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"data"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
index|[]
index|[]
name|FAMILIES
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|FAMILY_A
block|,
name|FAMILY_B
block|,
name|FAMILY_C
block|}
decl_stmt|;
specifier|private
name|HBaseTestingUtility
name|util
decl_stmt|;
specifier|public
specifier|static
name|int
name|NUM_COLS_TO_CHECK
init|=
literal|50
decl_stmt|;
specifier|private
name|void
name|createTableIfMissing
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|util
operator|.
name|createTable
argument_list|(
name|TABLE_NAME
argument_list|,
name|FAMILIES
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TableExistsException
name|tee
parameter_list|)
block|{     }
block|}
specifier|public
name|TestAcidGuarantees
parameter_list|()
block|{
name|util
operator|=
operator|new
name|HBaseTestingUtility
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|AtomicityWriter
extends|extends
name|TestThread
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|byte
name|data
index|[]
init|=
operator|new
name|byte
index|[
literal|10
index|]
decl_stmt|;
name|byte
name|targetRow
index|[]
decl_stmt|;
name|byte
name|targetFamilies
index|[]
index|[]
decl_stmt|;
name|HTable
name|table
decl_stmt|;
name|AtomicLong
name|numWritten
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|public
name|AtomicityWriter
parameter_list|(
name|TestContext
name|ctx
parameter_list|,
name|byte
name|targetRow
index|[]
parameter_list|,
name|byte
name|targetFamilies
index|[]
index|[]
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|this
operator|.
name|targetRow
operator|=
name|targetRow
expr_stmt|;
name|this
operator|.
name|targetFamilies
operator|=
name|targetFamilies
expr_stmt|;
name|table
operator|=
operator|new
name|HTable
argument_list|(
name|ctx
operator|.
name|getConf
argument_list|()
argument_list|,
name|TABLE_NAME
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|doAnAction
parameter_list|()
throws|throws
name|Exception
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|targetRow
argument_list|)
decl_stmt|;
name|rand
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
for|for
control|(
name|byte
index|[]
name|family
range|:
name|targetFamilies
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_COLS_TO_CHECK
condition|;
name|i
operator|++
control|)
block|{
name|byte
name|qualifier
index|[]
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col"
operator|+
name|i
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
block|}
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|numWritten
operator|.
name|getAndIncrement
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|AtomicityReader
extends|extends
name|TestThread
block|{
name|byte
name|targetRow
index|[]
decl_stmt|;
name|byte
name|targetFamilies
index|[]
index|[]
decl_stmt|;
name|HTable
name|table
decl_stmt|;
name|int
name|numVerified
init|=
literal|0
decl_stmt|;
name|AtomicLong
name|numRead
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|public
name|AtomicityReader
parameter_list|(
name|TestContext
name|ctx
parameter_list|,
name|byte
name|targetRow
index|[]
parameter_list|,
name|byte
name|targetFamilies
index|[]
index|[]
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|this
operator|.
name|targetRow
operator|=
name|targetRow
expr_stmt|;
name|this
operator|.
name|targetFamilies
operator|=
name|targetFamilies
expr_stmt|;
name|table
operator|=
operator|new
name|HTable
argument_list|(
name|ctx
operator|.
name|getConf
argument_list|()
argument_list|,
name|TABLE_NAME
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|doAnAction
parameter_list|()
throws|throws
name|Exception
block|{
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|targetRow
argument_list|)
decl_stmt|;
name|Result
name|res
init|=
name|table
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
name|byte
index|[]
name|gotValue
init|=
literal|null
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|family
range|:
name|targetFamilies
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_COLS_TO_CHECK
condition|;
name|i
operator|++
control|)
block|{
name|byte
name|qualifier
index|[]
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col"
operator|+
name|i
argument_list|)
decl_stmt|;
name|byte
name|thisValue
index|[]
init|=
name|res
operator|.
name|getValue
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
decl_stmt|;
if|if
condition|(
name|gotValue
operator|!=
literal|null
operator|&&
operator|!
name|Bytes
operator|.
name|equals
argument_list|(
name|gotValue
argument_list|,
name|thisValue
argument_list|)
condition|)
block|{
name|gotFailure
argument_list|(
name|gotValue
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
name|numVerified
operator|++
expr_stmt|;
name|gotValue
operator|=
name|thisValue
expr_stmt|;
block|}
block|}
name|numRead
operator|.
name|getAndIncrement
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|gotFailure
parameter_list|(
name|byte
index|[]
name|expected
parameter_list|,
name|Result
name|res
parameter_list|)
block|{
name|StringBuilder
name|msg
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|"Failed after "
argument_list|)
operator|.
name|append
argument_list|(
name|numVerified
argument_list|)
operator|.
name|append
argument_list|(
literal|"!"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|"Expected="
argument_list|)
operator|.
name|append
argument_list|(
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|"Got:\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
name|res
operator|.
name|list
argument_list|()
control|)
block|{
name|msg
operator|.
name|append
argument_list|(
name|kv
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|" val= "
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|kv
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|runTestAtomicity
parameter_list|(
name|long
name|millisToRun
parameter_list|)
throws|throws
name|Exception
block|{
name|createTableIfMissing
argument_list|()
expr_stmt|;
name|TestContext
name|ctx
init|=
operator|new
name|TestContext
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|byte
name|row
index|[]
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test_row"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|AtomicityWriter
argument_list|>
name|writers
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|AtomicityWriter
name|writer
init|=
operator|new
name|AtomicityWriter
argument_list|(
name|ctx
argument_list|,
name|row
argument_list|,
name|FAMILIES
argument_list|)
decl_stmt|;
name|writers
operator|.
name|add
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|addThread
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|AtomicityReader
argument_list|>
name|readers
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|AtomicityReader
name|reader
init|=
operator|new
name|AtomicityReader
argument_list|(
name|ctx
argument_list|,
name|row
argument_list|,
name|FAMILIES
argument_list|)
decl_stmt|;
name|readers
operator|.
name|add
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|addThread
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
name|ctx
operator|.
name|startThreads
argument_list|()
expr_stmt|;
name|ctx
operator|.
name|waitFor
argument_list|(
name|millisToRun
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|stop
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished test. Writers:"
argument_list|)
expr_stmt|;
for|for
control|(
name|AtomicityWriter
name|writer
range|:
name|writers
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"  wrote "
operator|+
name|writer
operator|.
name|numWritten
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Readers:"
argument_list|)
expr_stmt|;
for|for
control|(
name|AtomicityReader
name|reader
range|:
name|readers
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"  read "
operator|+
name|reader
operator|.
name|numRead
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAtomicity
parameter_list|()
throws|throws
name|Exception
block|{
name|util
operator|.
name|startMiniCluster
argument_list|(
literal|3
argument_list|)
expr_stmt|;
try|try
block|{
name|runTestAtomicity
argument_list|(
literal|20000
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|util
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
name|args
index|[]
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|c
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|TestAcidGuarantees
name|test
init|=
operator|new
name|TestAcidGuarantees
argument_list|()
decl_stmt|;
name|test
operator|.
name|setConf
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|test
operator|.
name|runTestAtomicity
argument_list|(
literal|5
operator|*
literal|60
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setConf
parameter_list|(
name|Configuration
name|c
parameter_list|)
block|{
name|util
operator|=
operator|new
name|HBaseTestingUtility
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

