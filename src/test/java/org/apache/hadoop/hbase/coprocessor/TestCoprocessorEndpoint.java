begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|coprocessor
operator|.
name|Batch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|coprocessor
operator|.
name|Exec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|HbaseObjectWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataInputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * TestEndpoint: test cases to verify coprocessor Endpoint  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|MediumTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestCoprocessorEndpoint
block|{
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|TEST_TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"TestTable"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|TEST_FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"TestFamily"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|TEST_QUALIFIER
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"TestQualifier"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|ROW
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRow"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|protocolName
init|=
literal|"org.apache.hadoop.hbase.CustomProtocol"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|methodName
init|=
literal|"myFunc"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|ROWSIZE
init|=
literal|20
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|rowSeperator1
init|=
literal|5
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|rowSeperator2
init|=
literal|12
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
index|[]
name|ROWS
init|=
name|makeN
argument_list|(
name|ROW
argument_list|,
name|ROWSIZE
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|HBaseTestingUtility
name|util
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|MiniHBaseCluster
name|cluster
init|=
literal|null
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setupBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
comment|// set configure to indicate which cp should be loaded
name|Configuration
name|conf
init|=
name|util
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|CoprocessorHost
operator|.
name|REGION_COPROCESSOR_CONF_KEY
argument_list|,
literal|"org.apache.hadoop.hbase.coprocessor.ColumnAggregationEndpoint"
argument_list|,
literal|"org.apache.hadoop.hbase.coprocessor.GenericEndpoint"
argument_list|)
expr_stmt|;
name|util
operator|.
name|startMiniCluster
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|cluster
operator|=
name|util
operator|.
name|getMiniHBaseCluster
argument_list|()
expr_stmt|;
name|HTable
name|table
init|=
name|util
operator|.
name|createTable
argument_list|(
name|TEST_TABLE
argument_list|,
name|TEST_FAMILY
argument_list|)
decl_stmt|;
name|util
operator|.
name|createMultiRegions
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|table
argument_list|,
name|TEST_FAMILY
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
block|,
name|ROWS
index|[
name|rowSeperator1
index|]
block|,
name|ROWS
index|[
name|rowSeperator2
index|]
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ROWSIZE
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|put
operator|.
name|setWriteToWAL
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|TEST_FAMILY
argument_list|,
name|TEST_QUALIFIER
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
comment|// sleep here is an ugly hack to allow region transitions to finish
name|long
name|timeout
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
operator|(
literal|15
operator|*
literal|1000
operator|)
decl_stmt|;
while|while
condition|(
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|timeout
operator|)
operator|&&
operator|(
name|table
operator|.
name|getRegionsInfo
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|2
operator|)
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|250
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|util
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGeneric
parameter_list|()
throws|throws
name|Throwable
block|{
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|TEST_TABLE
argument_list|)
decl_stmt|;
name|GenericProtocol
name|protocol
init|=
name|table
operator|.
name|coprocessorProxy
argument_list|(
name|GenericProtocol
operator|.
name|class
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRow"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|workResult1
init|=
name|protocol
operator|.
name|doWork
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|workResult1
argument_list|)
expr_stmt|;
name|byte
index|[]
name|workResult2
init|=
name|protocol
operator|.
name|doWork
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|}
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|}
argument_list|,
name|workResult2
argument_list|)
expr_stmt|;
name|byte
name|workResult3
init|=
name|protocol
operator|.
name|doWork
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|,
name|workResult3
argument_list|)
expr_stmt|;
name|char
name|workResult4
init|=
name|protocol
operator|.
name|doWork
argument_list|(
literal|'c'
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|'c'
argument_list|,
name|workResult4
argument_list|)
expr_stmt|;
name|boolean
name|workResult5
init|=
name|protocol
operator|.
name|doWork
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|workResult5
argument_list|)
expr_stmt|;
name|short
name|workResult6
init|=
name|protocol
operator|.
name|doWork
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
name|workResult6
argument_list|)
expr_stmt|;
name|int
name|workResult7
init|=
name|protocol
operator|.
name|doWork
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|workResult7
argument_list|)
expr_stmt|;
name|long
name|workResult8
init|=
name|protocol
operator|.
name|doWork
argument_list|(
literal|5l
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5l
argument_list|,
name|workResult8
argument_list|)
expr_stmt|;
name|double
name|workResult9
init|=
name|protocol
operator|.
name|doWork
argument_list|(
literal|6d
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|6d
argument_list|,
name|workResult9
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|float
name|workResult10
init|=
name|protocol
operator|.
name|doWork
argument_list|(
literal|6f
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|6f
argument_list|,
name|workResult10
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|Text
name|workResult11
init|=
name|protocol
operator|.
name|doWork
argument_list|(
operator|new
name|Text
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|workResult11
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAggregation
parameter_list|()
throws|throws
name|Throwable
block|{
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|TEST_TABLE
argument_list|)
decl_stmt|;
name|Scan
name|scan
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|results
decl_stmt|;
comment|// scan: for all regions
name|results
operator|=
name|table
operator|.
name|coprocessorExec
argument_list|(
name|ColumnAggregationProtocol
operator|.
name|class
argument_list|,
name|ROWS
index|[
name|rowSeperator1
operator|-
literal|1
index|]
argument_list|,
name|ROWS
index|[
name|rowSeperator2
operator|+
literal|1
index|]
argument_list|,
operator|new
name|Batch
operator|.
name|Call
argument_list|<
name|ColumnAggregationProtocol
argument_list|,
name|Long
argument_list|>
argument_list|()
block|{
specifier|public
name|Long
name|call
parameter_list|(
name|ColumnAggregationProtocol
name|instance
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|instance
operator|.
name|sum
argument_list|(
name|TEST_FAMILY
argument_list|,
name|TEST_QUALIFIER
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|int
name|sumResult
init|=
literal|0
decl_stmt|;
name|int
name|expectedResult
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|e
range|:
name|results
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|sumResult
operator|+=
name|e
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ROWSIZE
condition|;
name|i
operator|++
control|)
block|{
name|expectedResult
operator|+=
name|i
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Invalid result"
argument_list|,
name|sumResult
argument_list|,
name|expectedResult
argument_list|)
expr_stmt|;
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// scan: for region 2 and region 3
name|results
operator|=
name|table
operator|.
name|coprocessorExec
argument_list|(
name|ColumnAggregationProtocol
operator|.
name|class
argument_list|,
name|ROWS
index|[
name|rowSeperator1
operator|+
literal|1
index|]
argument_list|,
name|ROWS
index|[
name|rowSeperator2
operator|+
literal|1
index|]
argument_list|,
operator|new
name|Batch
operator|.
name|Call
argument_list|<
name|ColumnAggregationProtocol
argument_list|,
name|Long
argument_list|>
argument_list|()
block|{
specifier|public
name|Long
name|call
parameter_list|(
name|ColumnAggregationProtocol
name|instance
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|instance
operator|.
name|sum
argument_list|(
name|TEST_FAMILY
argument_list|,
name|TEST_QUALIFIER
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|sumResult
operator|=
literal|0
expr_stmt|;
name|expectedResult
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|e
range|:
name|results
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|sumResult
operator|+=
name|e
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|rowSeperator1
init|;
name|i
operator|<
name|ROWSIZE
condition|;
name|i
operator|++
control|)
block|{
name|expectedResult
operator|+=
name|i
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Invalid result"
argument_list|,
name|sumResult
argument_list|,
name|expectedResult
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExecDeserialization
parameter_list|()
throws|throws
name|IOException
block|{
name|DataOutputBuffer
name|dob
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|dob
operator|.
name|writeUTF
argument_list|(
name|methodName
argument_list|)
expr_stmt|;
name|dob
operator|.
name|writeInt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|HbaseObjectWritable
operator|.
name|writeObject
argument_list|(
name|dob
argument_list|,
name|scan
argument_list|,
name|Scan
operator|.
name|class
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|dob
operator|.
name|writeUTF
argument_list|(
literal|"org.apache.hadoop.hbase.client.Scan"
argument_list|)
expr_stmt|;
name|Bytes
operator|.
name|writeByteArray
argument_list|(
name|dob
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'a'
block|}
argument_list|)
expr_stmt|;
comment|// this is the dynamic protocol name
name|dob
operator|.
name|writeUTF
argument_list|(
name|protocolName
argument_list|)
expr_stmt|;
name|DataInputBuffer
name|dib
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
name|dib
operator|.
name|reset
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|,
name|dob
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|Exec
name|after
init|=
operator|new
name|Exec
argument_list|()
decl_stmt|;
name|after
operator|.
name|readFields
argument_list|(
name|dib
argument_list|)
expr_stmt|;
comment|// no error thrown
name|assertEquals
argument_list|(
name|after
operator|.
name|getProtocolName
argument_list|()
argument_list|,
name|protocolName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|after
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|methodName
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|byte
index|[]
index|[]
name|makeN
parameter_list|(
name|byte
index|[]
name|base
parameter_list|,
name|int
name|n
parameter_list|)
block|{
name|byte
index|[]
index|[]
name|ret
init|=
operator|new
name|byte
index|[
name|n
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|ret
index|[
name|i
index|]
operator|=
name|Bytes
operator|.
name|add
argument_list|(
name|base
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%02d"
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Rule
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ResourceCheckerJUnitRule
name|cu
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ResourceCheckerJUnitRule
argument_list|()
decl_stmt|;
block|}
end_class

end_unit

