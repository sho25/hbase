begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|CoprocessorProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|WALEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Verifies ProcessRowEndpoint works.  * The tested RowProcessor performs two scans and a read-modify-write.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestProcessRowEndpoint
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestProcessRowEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testtable"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|TABLE2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testtable2"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|ROW
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testrow"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|FAM
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"friendlist"
argument_list|)
decl_stmt|;
comment|// Column names
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|A
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|B
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|C
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|D
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"d"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|E
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"e"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|F
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|G
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"g"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|REQUESTS
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"requests"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|HBaseTestingUtility
name|util
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|volatile
name|int
name|numRequests
decl_stmt|;
specifier|private
name|CountDownLatch
name|startSignal
decl_stmt|;
specifier|private
name|CountDownLatch
name|doneSignal
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setupBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|util
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CoprocessorHost
operator|.
name|REGION_COPROCESSOR_CONF_KEY
argument_list|,
name|FriendsOfFriendsEndpoint
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|util
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|util
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingle
parameter_list|()
throws|throws
name|Throwable
block|{
name|HTable
name|table
init|=
name|prepareTestData
argument_list|(
name|TABLE
argument_list|,
name|util
argument_list|)
decl_stmt|;
name|verifyProcessRow
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|numRequests
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyProcessRow
parameter_list|(
name|HTable
name|table
parameter_list|)
throws|throws
name|Throwable
block|{
name|FriendsOfFriendsProtocol
name|processor
init|=
name|table
operator|.
name|coprocessorProxy
argument_list|(
name|FriendsOfFriendsProtocol
operator|.
name|class
argument_list|,
name|ROW
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|processor
operator|.
name|query
argument_list|(
name|ROW
argument_list|,
name|A
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|friendsOfFriends
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
name|result
operator|.
name|raw
argument_list|()
control|)
block|{
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|kv
operator|.
name|getQualifier
argument_list|()
argument_list|,
name|REQUESTS
argument_list|)
condition|)
block|{
name|numRequests
operator|=
name|Bytes
operator|.
name|toInt
argument_list|(
name|kv
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
for|for
control|(
name|byte
name|val
range|:
name|kv
operator|.
name|getValue
argument_list|()
control|)
block|{
name|friendsOfFriends
operator|.
name|add
argument_list|(
operator|(
name|char
operator|)
name|val
operator|+
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|expected
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"d"
block|,
literal|"e"
block|,
literal|"f"
block|,
literal|"g"
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|friendsOfFriends
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testThreads
parameter_list|()
throws|throws
name|Exception
block|{
name|HTable
name|table
init|=
name|prepareTestData
argument_list|(
name|TABLE2
argument_list|,
name|util
argument_list|)
decl_stmt|;
name|int
name|numThreads
init|=
literal|1000
decl_stmt|;
name|startSignal
operator|=
operator|new
name|CountDownLatch
argument_list|(
name|numThreads
argument_list|)
expr_stmt|;
name|doneSignal
operator|=
operator|new
name|CountDownLatch
argument_list|(
name|numThreads
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
operator|++
name|i
control|)
block|{
operator|new
name|Thread
argument_list|(
operator|new
name|QueryRunner
argument_list|(
name|table
argument_list|)
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|startSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
name|doneSignal
operator|.
name|await
argument_list|()
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"row keyvalues:"
operator|+
name|stringifyKvs
argument_list|(
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numThreads
argument_list|,
name|numRequests
argument_list|)
expr_stmt|;
block|}
class|class
name|QueryRunner
implements|implements
name|Runnable
block|{
specifier|final
name|HTable
name|table
decl_stmt|;
name|QueryRunner
parameter_list|(
specifier|final
name|HTable
name|table
parameter_list|)
block|{
name|this
operator|.
name|table
operator|=
name|table
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|startSignal
operator|.
name|await
argument_list|()
expr_stmt|;
name|verifyProcessRow
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|doneSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|static
name|HTable
name|prepareTestData
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|HBaseTestingUtility
name|util
parameter_list|)
throws|throws
name|Exception
block|{
name|HTable
name|table
init|=
name|util
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAM
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAM
argument_list|,
name|A
argument_list|,
name|Bytes
operator|.
name|add
argument_list|(
name|B
argument_list|,
name|C
argument_list|)
argument_list|)
expr_stmt|;
comment|// B, C are friends of A
name|put
operator|.
name|add
argument_list|(
name|FAM
argument_list|,
name|B
argument_list|,
name|Bytes
operator|.
name|add
argument_list|(
name|D
argument_list|,
name|E
argument_list|,
name|F
argument_list|)
argument_list|)
expr_stmt|;
comment|// D, E, F are friends of B
name|put
operator|.
name|add
argument_list|(
name|FAM
argument_list|,
name|C
argument_list|,
name|G
argument_list|)
expr_stmt|;
comment|// G is a friend of C
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
return|return
name|table
return|;
block|}
comment|/**    * Coprocessor protocol that finds friends of friends of a person and    * update the number of requests.    */
specifier|public
specifier|static
interface|interface
name|FriendsOfFriendsProtocol
extends|extends
name|CoprocessorProtocol
block|{
comment|/**      * Query a person's friends of friends      */
name|Result
name|query
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|person
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
comment|/**    * Finds friends of friends of a person and update the number of requests.    */
specifier|public
specifier|static
class|class
name|FriendsOfFriendsEndpoint
extends|extends
name|BaseEndpointCoprocessor
implements|implements
name|FriendsOfFriendsProtocol
implements|,
name|RowProcessor
argument_list|<
name|Result
argument_list|>
block|{
name|byte
index|[]
name|row
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|person
init|=
literal|null
decl_stmt|;
name|Result
name|result
init|=
literal|null
decl_stmt|;
comment|//
comment|// FriendsOfFriendsProtocol method
comment|//
annotation|@
name|Override
specifier|public
name|Result
name|query
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|person
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|person
operator|=
name|person
expr_stmt|;
name|HRegion
name|region
init|=
operator|(
operator|(
name|RegionCoprocessorEnvironment
operator|)
name|getEnvironment
argument_list|()
operator|)
operator|.
name|getRegion
argument_list|()
decl_stmt|;
name|region
operator|.
name|processRow
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|getResult
argument_list|()
return|;
block|}
comment|//
comment|// RowProcessor methods
comment|//
name|FriendsOfFriendsEndpoint
parameter_list|()
block|{     }
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getRow
parameter_list|()
block|{
return|return
name|row
return|;
block|}
annotation|@
name|Override
specifier|public
name|Result
name|getResult
parameter_list|()
block|{
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|readOnly
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|long
name|now
parameter_list|,
name|RowProcessor
operator|.
name|RowScanner
name|scanner
parameter_list|,
name|List
argument_list|<
name|KeyValue
argument_list|>
name|mutations
parameter_list|,
name|WALEdit
name|walEdit
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
block|{
comment|// First scan to get friends of the person and numRequests
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|row
argument_list|,
name|row
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAM
argument_list|,
name|person
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAM
argument_list|,
name|REQUESTS
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|doScan
argument_list|(
name|scan
argument_list|,
name|kvs
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"first scan:"
operator|+
name|stringifyKvs
argument_list|(
name|kvs
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|numRequests
init|=
literal|0
decl_stmt|;
comment|// Second scan to get friends of friends
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|row
argument_list|,
name|row
argument_list|)
decl_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
name|kvs
control|)
block|{
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|kv
operator|.
name|getQualifier
argument_list|()
argument_list|,
name|REQUESTS
argument_list|)
condition|)
block|{
name|numRequests
operator|=
name|Bytes
operator|.
name|toInt
argument_list|(
name|kv
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|byte
index|[]
name|friends
init|=
name|kv
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|byte
name|f
range|:
name|friends
control|)
block|{
name|scan
operator|.
name|addColumn
argument_list|(
name|FAM
argument_list|,
operator|new
name|byte
index|[]
block|{
name|f
block|}
argument_list|)
expr_stmt|;
block|}
block|}
name|scanner
operator|.
name|doScan
argument_list|(
name|scan
argument_list|,
name|kvs
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"second scan:"
operator|+
name|stringifyKvs
argument_list|(
name|kvs
argument_list|)
argument_list|)
expr_stmt|;
name|numRequests
operator|+=
literal|1
expr_stmt|;
comment|// Construct mutations and Result
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|FAM
argument_list|,
name|REQUESTS
argument_list|,
name|now
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|numRequests
argument_list|)
argument_list|)
decl_stmt|;
name|mutations
operator|.
name|clear
argument_list|()
expr_stmt|;
name|mutations
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"final result:"
operator|+
name|stringifyKvs
argument_list|(
name|kvs
argument_list|)
operator|+
literal|" mutations:"
operator|+
name|stringifyKvs
argument_list|(
name|mutations
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|Result
argument_list|(
name|kvs
argument_list|)
expr_stmt|;
comment|// Inject some meta data to the walEdit
name|KeyValue
name|metaKv
init|=
operator|new
name|KeyValue
argument_list|(
name|getRow
argument_list|()
argument_list|,
name|HLog
operator|.
name|METAFAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"FriendsOfFriends query"
argument_list|)
argument_list|,
name|person
argument_list|)
decl_stmt|;
name|walEdit
operator|.
name|add
argument_list|(
name|metaKv
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|person
operator|=
name|Bytes
operator|.
name|readByteArray
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|Bytes
operator|.
name|readByteArray
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|result
operator|=
operator|new
name|Result
argument_list|()
expr_stmt|;
name|result
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|Bytes
operator|.
name|writeByteArray
argument_list|(
name|out
argument_list|,
name|person
argument_list|)
expr_stmt|;
name|Bytes
operator|.
name|writeByteArray
argument_list|(
name|out
argument_list|,
name|row
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
operator|new
name|Result
argument_list|()
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|UUID
name|getClusterId
parameter_list|()
block|{
return|return
name|HConstants
operator|.
name|DEFAULT_CLUSTER_ID
return|;
block|}
block|}
specifier|static
name|String
name|stringifyKvs
parameter_list|(
name|Collection
argument_list|<
name|KeyValue
argument_list|>
name|kvs
parameter_list|)
block|{
name|StringBuilder
name|out
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|out
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
name|kvs
control|)
block|{
name|byte
index|[]
name|col
init|=
name|kv
operator|.
name|getQualifier
argument_list|()
decl_stmt|;
name|byte
index|[]
name|val
init|=
name|kv
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|col
argument_list|,
name|REQUESTS
argument_list|)
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|col
argument_list|)
operator|+
literal|":"
operator|+
name|Bytes
operator|.
name|toInt
argument_list|(
name|val
argument_list|)
operator|+
literal|" "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|append
argument_list|(
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|col
argument_list|)
operator|+
literal|":"
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|val
argument_list|)
operator|+
literal|" "
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|out
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Rule
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ResourceCheckerJUnitRule
name|cu
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ResourceCheckerJUnitRule
argument_list|()
decl_stmt|;
block|}
end_class

end_unit

