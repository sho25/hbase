begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|IsolationLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|BaseRowProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|InternalScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|WALEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Verifies ProcessRowEndpoint works.  * The tested RowProcessor performs two scans and a read-modify-write.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestRowProcessorEndpoint
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestRowProcessorEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testtable"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|ROW
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testrow"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|ROW2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testrow2"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|FAM
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"friendlist"
argument_list|)
decl_stmt|;
comment|// Column names
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|A
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|B
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|C
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|D
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"d"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|E
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"e"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|F
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|G
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"g"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|COUNTER
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"counter"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|failures
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|HBaseTestingUtility
name|util
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|volatile
name|int
name|expectedCounter
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
name|int
name|rowSize
decl_stmt|,
name|row2Size
decl_stmt|;
specifier|private
specifier|volatile
specifier|static
name|HTable
name|table
init|=
literal|null
decl_stmt|;
specifier|private
specifier|volatile
specifier|static
name|boolean
name|swapped
init|=
literal|false
decl_stmt|;
specifier|private
specifier|volatile
name|CountDownLatch
name|startSignal
decl_stmt|;
specifier|private
specifier|volatile
name|CountDownLatch
name|doneSignal
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setupBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|util
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CoprocessorHost
operator|.
name|REGION_COPROCESSOR_CONF_KEY
argument_list|,
name|RowProcessorEndpoint
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.client.retries.number"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
literal|"hbase.hregion.row.processor.timeout"
argument_list|,
literal|1000L
argument_list|)
expr_stmt|;
name|util
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|util
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|prepareTestData
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|util
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|disableTable
argument_list|(
name|TABLE
argument_list|)
expr_stmt|;
name|util
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|deleteTable
argument_list|(
name|TABLE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore table not found
block|}
name|table
operator|=
name|util
operator|.
name|createTable
argument_list|(
name|TABLE
argument_list|,
name|FAM
argument_list|)
expr_stmt|;
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAM
argument_list|,
name|A
argument_list|,
name|Bytes
operator|.
name|add
argument_list|(
name|B
argument_list|,
name|C
argument_list|)
argument_list|)
expr_stmt|;
comment|// B, C are friends of A
name|put
operator|.
name|add
argument_list|(
name|FAM
argument_list|,
name|B
argument_list|,
name|Bytes
operator|.
name|add
argument_list|(
name|D
argument_list|,
name|E
argument_list|,
name|F
argument_list|)
argument_list|)
expr_stmt|;
comment|// D, E, F are friends of B
name|put
operator|.
name|add
argument_list|(
name|FAM
argument_list|,
name|C
argument_list|,
name|G
argument_list|)
expr_stmt|;
comment|// G is a friend of C
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|rowSize
operator|=
name|put
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW2
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAM
argument_list|,
name|D
argument_list|,
name|E
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAM
argument_list|,
name|F
argument_list|,
name|G
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|row2Size
operator|=
name|put
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleScan
parameter_list|()
throws|throws
name|Throwable
block|{
name|prepareTestData
argument_list|()
expr_stmt|;
name|RowProcessorProtocol
name|protocol
init|=
name|table
operator|.
name|coprocessorProxy
argument_list|(
name|RowProcessorProtocol
operator|.
name|class
argument_list|,
name|ROW
argument_list|)
decl_stmt|;
name|RowProcessorEndpoint
operator|.
name|FriendsOfFriendsProcessor
name|processor
init|=
operator|new
name|RowProcessorEndpoint
operator|.
name|FriendsOfFriendsProcessor
argument_list|(
name|ROW
argument_list|,
name|A
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|result
init|=
name|protocol
operator|.
name|process
argument_list|(
name|processor
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|expected
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"d"
block|,
literal|"e"
block|,
literal|"f"
block|,
literal|"g"
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"row keyvalues:"
operator|+
name|stringifyKvs
argument_list|(
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadModifyWrite
parameter_list|()
throws|throws
name|Throwable
block|{
name|prepareTestData
argument_list|()
expr_stmt|;
name|failures
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|int
name|numThreads
init|=
literal|1000
decl_stmt|;
name|concurrentExec
argument_list|(
operator|new
name|IncrementRunner
argument_list|()
argument_list|,
name|numThreads
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"row keyvalues:"
operator|+
name|stringifyKvs
argument_list|(
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|finalCounter
init|=
name|incrementCounter
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|numThreads
operator|+
literal|1
argument_list|,
name|finalCounter
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|failures
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
class|class
name|IncrementRunner
implements|implements
name|Runnable
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|incrementCounter
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|int
name|incrementCounter
parameter_list|(
name|HTable
name|table
parameter_list|)
throws|throws
name|Throwable
block|{
name|RowProcessorProtocol
name|protocol
init|=
name|table
operator|.
name|coprocessorProxy
argument_list|(
name|RowProcessorProtocol
operator|.
name|class
argument_list|,
name|ROW
argument_list|)
decl_stmt|;
name|RowProcessorEndpoint
operator|.
name|IncrementCounterProcessor
name|processor
init|=
operator|new
name|RowProcessorEndpoint
operator|.
name|IncrementCounterProcessor
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|int
name|counterValue
init|=
name|protocol
operator|.
name|process
argument_list|(
name|processor
argument_list|)
decl_stmt|;
return|return
name|counterValue
return|;
block|}
specifier|private
name|void
name|concurrentExec
parameter_list|(
specifier|final
name|Runnable
name|task
parameter_list|,
specifier|final
name|int
name|numThreads
parameter_list|)
throws|throws
name|Throwable
block|{
name|startSignal
operator|=
operator|new
name|CountDownLatch
argument_list|(
name|numThreads
argument_list|)
expr_stmt|;
name|doneSignal
operator|=
operator|new
name|CountDownLatch
argument_list|(
name|numThreads
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
operator|++
name|i
control|)
block|{
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|startSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|startSignal
operator|.
name|await
argument_list|()
expr_stmt|;
name|task
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|failures
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|doneSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|doneSignal
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultipleRows
parameter_list|()
throws|throws
name|Throwable
block|{
name|prepareTestData
argument_list|()
expr_stmt|;
name|failures
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|int
name|numThreads
init|=
literal|1000
decl_stmt|;
name|concurrentExec
argument_list|(
operator|new
name|SwapRowsRunner
argument_list|()
argument_list|,
name|numThreads
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"row keyvalues:"
operator|+
name|stringifyKvs
argument_list|(
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"row2 keyvalues:"
operator|+
name|stringifyKvs
argument_list|(
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW2
argument_list|)
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rowSize
argument_list|,
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|row2Size
argument_list|,
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW2
argument_list|)
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|failures
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
class|class
name|SwapRowsRunner
implements|implements
name|Runnable
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|swapRows
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|swapRows
parameter_list|(
name|HTable
name|table
parameter_list|)
throws|throws
name|Throwable
block|{
name|RowProcessorProtocol
name|protocol
init|=
name|table
operator|.
name|coprocessorProxy
argument_list|(
name|RowProcessorProtocol
operator|.
name|class
argument_list|,
name|ROW
argument_list|)
decl_stmt|;
name|RowProcessorEndpoint
operator|.
name|RowSwapProcessor
name|processor
init|=
operator|new
name|RowProcessorEndpoint
operator|.
name|RowSwapProcessor
argument_list|(
name|ROW
argument_list|,
name|ROW2
argument_list|)
decl_stmt|;
name|protocol
operator|.
name|process
argument_list|(
name|processor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTimeout
parameter_list|()
throws|throws
name|Throwable
block|{
name|prepareTestData
argument_list|()
expr_stmt|;
name|RowProcessorProtocol
name|protocol
init|=
name|table
operator|.
name|coprocessorProxy
argument_list|(
name|RowProcessorProtocol
operator|.
name|class
argument_list|,
name|ROW
argument_list|)
decl_stmt|;
name|RowProcessorEndpoint
operator|.
name|TimeoutProcessor
name|processor
init|=
operator|new
name|RowProcessorEndpoint
operator|.
name|TimeoutProcessor
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|boolean
name|exceptionCaught
init|=
literal|false
decl_stmt|;
try|try
block|{
name|protocol
operator|.
name|process
argument_list|(
name|processor
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exceptionCaught
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exceptionCaught
argument_list|)
expr_stmt|;
block|}
comment|/**    * This class defines two RowProcessors:    * IncrementCounterProcessor and FriendsOfFriendsProcessor.    *    * We define the RowProcessors as the inner class of the endpoint.    * So they can be loaded with the endpoint on the coprocessor.    */
specifier|public
specifier|static
class|class
name|RowProcessorEndpoint
extends|extends
name|BaseRowProcessorEndpoint
implements|implements
name|RowProcessorProtocol
block|{
specifier|public
specifier|static
class|class
name|IncrementCounterProcessor
extends|extends
name|BaseRowProcessor
argument_list|<
name|Integer
argument_list|>
implements|implements
name|Writable
block|{
name|int
name|counter
init|=
literal|0
decl_stmt|;
name|byte
index|[]
name|row
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
comment|/**        * Empty constructor for Writable        */
name|IncrementCounterProcessor
parameter_list|()
block|{       }
name|IncrementCounterProcessor
parameter_list|(
name|byte
index|[]
name|row
parameter_list|)
block|{
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|byte
index|[]
argument_list|>
name|getRowsToLock
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singleton
argument_list|(
name|row
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|getResult
parameter_list|()
block|{
return|return
name|counter
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|readOnly
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|long
name|now
parameter_list|,
name|HRegion
name|region
parameter_list|,
name|List
argument_list|<
name|KeyValue
argument_list|>
name|mutations
parameter_list|,
name|WALEdit
name|walEdit
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Scan current counter
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|row
argument_list|,
name|row
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAM
argument_list|,
name|COUNTER
argument_list|)
expr_stmt|;
name|doScan
argument_list|(
name|region
argument_list|,
name|scan
argument_list|,
name|kvs
argument_list|)
expr_stmt|;
name|counter
operator|=
name|kvs
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|?
literal|0
else|:
name|Bytes
operator|.
name|toInt
argument_list|(
name|kvs
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assert counter value
name|assertEquals
argument_list|(
name|expectedCounter
argument_list|,
name|counter
argument_list|)
expr_stmt|;
comment|// Increment counter and send it to both memstore and wal edit
name|counter
operator|+=
literal|1
expr_stmt|;
name|expectedCounter
operator|+=
literal|1
expr_stmt|;
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|FAM
argument_list|,
name|COUNTER
argument_list|,
name|now
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|counter
argument_list|)
argument_list|)
decl_stmt|;
name|mutations
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
name|walEdit
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
comment|// We can also inject some meta data to the walEdit
name|KeyValue
name|metaKv
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|HLog
operator|.
name|METAFAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"I just increment counter"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|counter
argument_list|)
argument_list|)
decl_stmt|;
name|walEdit
operator|.
name|add
argument_list|(
name|metaKv
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|row
operator|=
name|Bytes
operator|.
name|readByteArray
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|counter
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|Bytes
operator|.
name|writeByteArray
argument_list|(
name|out
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|counter
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|FriendsOfFriendsProcessor
extends|extends
name|BaseRowProcessor
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
implements|implements
name|Writable
block|{
name|byte
index|[]
name|row
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|person
init|=
literal|null
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|/**        * Empty constructor for Writable        */
name|FriendsOfFriendsProcessor
parameter_list|()
block|{       }
name|FriendsOfFriendsProcessor
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|person
parameter_list|)
block|{
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|person
operator|=
name|person
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|byte
index|[]
argument_list|>
name|getRowsToLock
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singleton
argument_list|(
name|row
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getResult
parameter_list|()
block|{
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|readOnly
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|long
name|now
parameter_list|,
name|HRegion
name|region
parameter_list|,
name|List
argument_list|<
name|KeyValue
argument_list|>
name|mutations
parameter_list|,
name|WALEdit
name|walEdit
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
block|{
comment|// First scan to get friends of the person
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|row
argument_list|,
name|row
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAM
argument_list|,
name|person
argument_list|)
expr_stmt|;
name|doScan
argument_list|(
name|region
argument_list|,
name|scan
argument_list|,
name|kvs
argument_list|)
expr_stmt|;
block|}
comment|// Second scan to get friends of friends
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|row
argument_list|,
name|row
argument_list|)
decl_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
name|kvs
control|)
block|{
name|byte
index|[]
name|friends
init|=
name|kv
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|byte
name|f
range|:
name|friends
control|)
block|{
name|scan
operator|.
name|addColumn
argument_list|(
name|FAM
argument_list|,
operator|new
name|byte
index|[]
block|{
name|f
block|}
argument_list|)
expr_stmt|;
block|}
block|}
name|doScan
argument_list|(
name|region
argument_list|,
name|scan
argument_list|,
name|kvs
argument_list|)
expr_stmt|;
comment|// Collect result
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
name|kvs
control|)
block|{
for|for
control|(
name|byte
name|b
range|:
name|kv
operator|.
name|getValue
argument_list|()
control|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|(
name|char
operator|)
name|b
operator|+
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|person
operator|=
name|Bytes
operator|.
name|readByteArray
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|Bytes
operator|.
name|readByteArray
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|int
name|size
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|Bytes
operator|.
name|writeByteArray
argument_list|(
name|out
argument_list|,
name|person
argument_list|)
expr_stmt|;
name|Bytes
operator|.
name|writeByteArray
argument_list|(
name|out
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|s
range|:
name|result
control|)
block|{
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|RowSwapProcessor
extends|extends
name|BaseRowProcessor
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
implements|implements
name|Writable
block|{
name|byte
index|[]
name|row1
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
name|byte
index|[]
name|row2
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
comment|/**        * Empty constructor for Writable        */
name|RowSwapProcessor
parameter_list|()
block|{       }
name|RowSwapProcessor
parameter_list|(
name|byte
index|[]
name|row1
parameter_list|,
name|byte
index|[]
name|row2
parameter_list|)
block|{
name|this
operator|.
name|row1
operator|=
name|row1
expr_stmt|;
name|this
operator|.
name|row2
operator|=
name|row2
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|byte
index|[]
argument_list|>
name|getRowsToLock
parameter_list|()
block|{
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|rows
init|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|rows
operator|.
name|add
argument_list|(
name|row1
argument_list|)
expr_stmt|;
name|rows
operator|.
name|add
argument_list|(
name|row2
argument_list|)
expr_stmt|;
return|return
name|rows
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|readOnly
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|long
name|now
parameter_list|,
name|HRegion
name|region
parameter_list|,
name|List
argument_list|<
name|KeyValue
argument_list|>
name|mutations
parameter_list|,
name|WALEdit
name|walEdit
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Scan both rows
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvs1
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvs2
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|doScan
argument_list|(
name|region
argument_list|,
operator|new
name|Scan
argument_list|(
name|row1
argument_list|,
name|row1
argument_list|)
argument_list|,
name|kvs1
argument_list|)
expr_stmt|;
name|doScan
argument_list|(
name|region
argument_list|,
operator|new
name|Scan
argument_list|(
name|row2
argument_list|,
name|row2
argument_list|)
argument_list|,
name|kvs2
argument_list|)
expr_stmt|;
comment|// Assert swapped
if|if
condition|(
name|swapped
condition|)
block|{
name|assertEquals
argument_list|(
name|rowSize
argument_list|,
name|kvs2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|row2Size
argument_list|,
name|kvs1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|rowSize
argument_list|,
name|kvs1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|row2Size
argument_list|,
name|kvs2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|swapped
operator|=
operator|!
name|swapped
expr_stmt|;
comment|// Add and delete keyvalues
name|List
argument_list|<
name|List
argument_list|<
name|KeyValue
argument_list|>
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|KeyValue
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|kvs
operator|.
name|add
argument_list|(
name|kvs1
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
name|kvs2
argument_list|)
expr_stmt|;
name|byte
index|[]
index|[]
name|rows
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|row1
block|,
name|row2
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|kvs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|KeyValue
name|kv
range|:
name|kvs
operator|.
name|get
argument_list|(
name|i
argument_list|)
control|)
block|{
comment|// Delete from the current row and add to the other row
name|KeyValue
name|kvDelete
init|=
operator|new
name|KeyValue
argument_list|(
name|rows
index|[
name|i
index|]
argument_list|,
name|kv
operator|.
name|getFamily
argument_list|()
argument_list|,
name|kv
operator|.
name|getQualifier
argument_list|()
argument_list|,
name|kv
operator|.
name|getTimestamp
argument_list|()
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Delete
argument_list|)
decl_stmt|;
name|KeyValue
name|kvAdd
init|=
operator|new
name|KeyValue
argument_list|(
name|rows
index|[
literal|1
operator|-
name|i
index|]
argument_list|,
name|kv
operator|.
name|getFamily
argument_list|()
argument_list|,
name|kv
operator|.
name|getQualifier
argument_list|()
argument_list|,
name|now
argument_list|,
name|kv
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|mutations
operator|.
name|add
argument_list|(
name|kvDelete
argument_list|)
expr_stmt|;
name|walEdit
operator|.
name|add
argument_list|(
name|kvDelete
argument_list|)
expr_stmt|;
name|mutations
operator|.
name|add
argument_list|(
name|kvAdd
argument_list|)
expr_stmt|;
name|walEdit
operator|.
name|add
argument_list|(
name|kvAdd
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|row1
operator|=
name|Bytes
operator|.
name|readByteArray
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|row2
operator|=
name|Bytes
operator|.
name|readByteArray
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|Bytes
operator|.
name|writeByteArray
argument_list|(
name|out
argument_list|,
name|row1
argument_list|)
expr_stmt|;
name|Bytes
operator|.
name|writeByteArray
argument_list|(
name|out
argument_list|,
name|row2
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|TimeoutProcessor
extends|extends
name|BaseRowProcessor
argument_list|<
name|Void
argument_list|>
implements|implements
name|Writable
block|{
name|byte
index|[]
name|row
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
comment|/**        * Empty constructor for Writable        */
specifier|public
name|TimeoutProcessor
parameter_list|()
block|{       }
specifier|public
name|TimeoutProcessor
parameter_list|(
name|byte
index|[]
name|row
parameter_list|)
block|{
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
block|}
specifier|public
name|Collection
argument_list|<
name|byte
index|[]
argument_list|>
name|getRowsToLock
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singleton
argument_list|(
name|row
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|long
name|now
parameter_list|,
name|HRegion
name|region
parameter_list|,
name|List
argument_list|<
name|KeyValue
argument_list|>
name|mutations
parameter_list|,
name|WALEdit
name|walEdit
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
comment|// Sleep for a long time so it timeout
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
operator|*
literal|1000L
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|readOnly
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|row
operator|=
name|Bytes
operator|.
name|readByteArray
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|Bytes
operator|.
name|writeByteArray
argument_list|(
name|out
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|doScan
parameter_list|(
name|HRegion
name|region
parameter_list|,
name|Scan
name|scan
parameter_list|,
name|List
argument_list|<
name|KeyValue
argument_list|>
name|result
parameter_list|)
throws|throws
name|IOException
block|{
name|InternalScanner
name|scanner
init|=
literal|null
decl_stmt|;
try|try
block|{
name|scan
operator|.
name|setIsolationLevel
argument_list|(
name|IsolationLevel
operator|.
name|READ_UNCOMMITTED
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
name|scanner
operator|.
name|next
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|scanner
operator|!=
literal|null
condition|)
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|static
name|String
name|stringifyKvs
parameter_list|(
name|Collection
argument_list|<
name|KeyValue
argument_list|>
name|kvs
parameter_list|)
block|{
name|StringBuilder
name|out
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|out
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
if|if
condition|(
name|kvs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|KeyValue
name|kv
range|:
name|kvs
control|)
block|{
name|byte
index|[]
name|col
init|=
name|kv
operator|.
name|getQualifier
argument_list|()
decl_stmt|;
name|byte
index|[]
name|val
init|=
name|kv
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|col
argument_list|,
name|COUNTER
argument_list|)
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|col
argument_list|)
operator|+
literal|":"
operator|+
name|Bytes
operator|.
name|toInt
argument_list|(
name|val
argument_list|)
operator|+
literal|" "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|append
argument_list|(
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|col
argument_list|)
operator|+
literal|":"
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|val
argument_list|)
operator|+
literal|" "
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|out
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|out
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Rule
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ResourceCheckerJUnitRule
name|cu
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ResourceCheckerJUnitRule
argument_list|()
decl_stmt|;
block|}
end_class

end_unit

