begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|catalog
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ConnectException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Abortable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NotAllMetaRegionsOnlineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|HRegionInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_comment
comment|/**  * Test {@link CatalogTracker}  */
end_comment

begin_class
specifier|public
class|class
name|TestCatalogTracker
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestCatalogTracker
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HServerAddress
name|HSA
init|=
operator|new
name|HServerAddress
argument_list|(
literal|"example.org:1234"
argument_list|)
decl_stmt|;
specifier|private
name|ZooKeeperWatcher
name|watcher
decl_stmt|;
specifier|private
name|Abortable
name|abortable
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|UTIL
operator|.
name|startMiniZKCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|IOException
block|{
name|UTIL
operator|.
name|getZkCluster
argument_list|()
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|abortable
operator|=
operator|new
name|Abortable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|abort
parameter_list|(
name|String
name|why
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|why
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
name|this
operator|.
name|watcher
operator|=
operator|new
name|ZooKeeperWatcher
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|this
operator|.
name|abortable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
block|{
name|this
operator|.
name|watcher
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|CatalogTracker
name|constructAndStartCatalogTracker
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|constructAndStartCatalogTracker
argument_list|(
literal|null
argument_list|)
return|;
block|}
specifier|private
name|CatalogTracker
name|constructAndStartCatalogTracker
parameter_list|(
specifier|final
name|HConnection
name|c
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|CatalogTracker
name|ct
init|=
operator|new
name|CatalogTracker
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|c
argument_list|,
name|this
operator|.
name|abortable
argument_list|)
decl_stmt|;
name|ct
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|ct
return|;
block|}
comment|/**    * Test interruptable while blocking wait on root and meta.    * @throws IOException    * @throws InterruptedException    */
annotation|@
name|Test
specifier|public
name|void
name|testInterruptWaitOnMetaAndRoot
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|CatalogTracker
name|ct
init|=
name|constructAndStartCatalogTracker
argument_list|()
decl_stmt|;
name|HServerAddress
name|hsa
init|=
name|ct
operator|.
name|getRootLocation
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|hsa
argument_list|)
expr_stmt|;
name|HServerAddress
name|meta
init|=
name|ct
operator|.
name|getMetaLocation
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|meta
argument_list|)
expr_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|ct
operator|.
name|waitForMeta
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Interrupted"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|t
operator|.
name|isAlive
argument_list|()
condition|)
name|Threads
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Threads
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|isAlive
argument_list|()
argument_list|)
expr_stmt|;
name|ct
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// Join the thread... should exit shortly.
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMetaServerConnectionFails
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|KeeperException
block|{
name|HConnection
name|connection
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HConnection
operator|.
name|class
argument_list|)
decl_stmt|;
name|ConnectException
name|connectException
init|=
operator|new
name|ConnectException
argument_list|(
literal|"Connection refused"
argument_list|)
decl_stmt|;
specifier|final
name|HRegionInterface
name|implementation
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HRegionInterface
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|implementation
operator|.
name|get
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|,
operator|(
name|Get
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
name|connectException
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|connection
operator|.
name|getHRegionConnection
argument_list|(
operator|(
name|HServerAddress
operator|)
name|Matchers
operator|.
name|anyObject
argument_list|()
argument_list|,
name|Matchers
operator|.
name|anyBoolean
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|implementation
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|connection
operator|.
name|getHRegionConnection
argument_list|(
operator|new
name|HServerAddress
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|CatalogTracker
name|ct
init|=
name|constructAndStartCatalogTracker
argument_list|(
name|connection
argument_list|)
decl_stmt|;
try|try
block|{
name|RootLocationEditor
operator|.
name|setRootLocation
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
operator|new
name|HServerAddress
argument_list|(
literal|"example.com:1234"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|ct
operator|.
name|verifyMetaRegionLocation
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Clean out root location or later tests will be confused... they presume
comment|// start fresh in zk.
name|RootLocationEditor
operator|.
name|deleteRootLocation
argument_list|(
name|this
operator|.
name|watcher
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test get of root region fails properly if nothing to connect to.    * @throws IOException    * @throws InterruptedException    * @throws KeeperException    */
annotation|@
name|Test
specifier|public
name|void
name|testVerifyRootRegionLocationFails
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|KeeperException
block|{
name|HConnection
name|connection
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HConnection
operator|.
name|class
argument_list|)
decl_stmt|;
name|ConnectException
name|connectException
init|=
operator|new
name|ConnectException
argument_list|(
literal|"Connection refused"
argument_list|)
decl_stmt|;
specifier|final
name|HRegionInterface
name|implementation
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HRegionInterface
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|implementation
operator|.
name|getRegionInfo
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
name|connectException
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|connection
operator|.
name|getHRegionConnection
argument_list|(
operator|(
name|HServerAddress
operator|)
name|Matchers
operator|.
name|anyObject
argument_list|()
argument_list|,
name|Matchers
operator|.
name|anyBoolean
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|implementation
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|connection
operator|.
name|getHRegionConnection
argument_list|(
operator|new
name|HServerAddress
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|CatalogTracker
name|ct
init|=
name|constructAndStartCatalogTracker
argument_list|(
name|connection
argument_list|)
decl_stmt|;
try|try
block|{
name|RootLocationEditor
operator|.
name|setRootLocation
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
operator|new
name|HServerAddress
argument_list|(
literal|"example.com:1234"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|ct
operator|.
name|verifyRootRegionLocation
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Clean out root location or later tests will be confused... they presume
comment|// start fresh in zk.
name|RootLocationEditor
operator|.
name|deleteRootLocation
argument_list|(
name|this
operator|.
name|watcher
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NotAllMetaRegionsOnlineException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testTimeoutWaitForRoot
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|CatalogTracker
name|ct
init|=
name|constructAndStartCatalogTracker
argument_list|()
decl_stmt|;
name|ct
operator|.
name|waitForRoot
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NotAllMetaRegionsOnlineException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testTimeoutWaitForMeta
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|CatalogTracker
name|ct
init|=
name|constructAndStartCatalogTracker
argument_list|()
decl_stmt|;
name|ct
operator|.
name|waitForMeta
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test waiting on root w/ no timeout specified.    * @throws IOException    * @throws InterruptedException    * @throws KeeperException    */
annotation|@
name|Test
specifier|public
name|void
name|testNoTimeoutWaitForRoot
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|KeeperException
block|{
specifier|final
name|CatalogTracker
name|ct
init|=
name|constructAndStartCatalogTracker
argument_list|()
decl_stmt|;
name|HServerAddress
name|hsa
init|=
name|ct
operator|.
name|getRootLocation
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|hsa
argument_list|)
expr_stmt|;
comment|// Now test waiting on root location getting set.
name|Thread
name|t
init|=
operator|new
name|WaitOnMetaThread
argument_list|(
name|ct
argument_list|)
decl_stmt|;
name|startWaitAliveThenWaitItLives
argument_list|(
name|t
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
comment|// Set a root location.
name|hsa
operator|=
name|setRootLocation
argument_list|()
expr_stmt|;
comment|// Join the thread... should exit shortly.
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
comment|// Now root is available.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ct
operator|.
name|getRootLocation
argument_list|()
operator|.
name|equals
argument_list|(
name|hsa
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|HServerAddress
name|setRootLocation
parameter_list|()
throws|throws
name|KeeperException
block|{
name|RootLocationEditor
operator|.
name|setRootLocation
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|HSA
argument_list|)
expr_stmt|;
return|return
name|HSA
return|;
block|}
comment|/**    * Test waiting on meta w/ no timeout specified.    * @throws IOException    * @throws InterruptedException    * @throws KeeperException    */
annotation|@
name|Test
specifier|public
name|void
name|testNoTimeoutWaitForMeta
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|KeeperException
block|{
comment|// Mock an HConnection and a HRegionInterface implementation.  Have the
comment|// HConnection return the HRI.  Have the HRI return a few mocked up responses
comment|// to make our test work.
name|HConnection
name|connection
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HConnection
operator|.
name|class
argument_list|)
decl_stmt|;
name|HRegionInterface
name|mockHRI
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HRegionInterface
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Make the HRI return an answer no matter how Get is called.  Same for
comment|// getHRegionInfo.  Thats enough for this test.
name|Mockito
operator|.
name|when
argument_list|(
name|connection
operator|.
name|getHRegionConnection
argument_list|(
operator|(
name|HServerAddress
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyBoolean
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockHRI
argument_list|)
expr_stmt|;
specifier|final
name|CatalogTracker
name|ct
init|=
name|constructAndStartCatalogTracker
argument_list|(
name|connection
argument_list|)
decl_stmt|;
name|HServerAddress
name|hsa
init|=
name|ct
operator|.
name|getMetaLocation
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|hsa
argument_list|)
expr_stmt|;
comment|// Now test waiting on meta location getting set.
name|Thread
name|t
init|=
operator|new
name|WaitOnMetaThread
argument_list|(
name|ct
argument_list|)
block|{
annotation|@
name|Override
name|void
name|doWaiting
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|this
operator|.
name|ct
operator|.
name|waitForMeta
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|startWaitAliveThenWaitItLives
argument_list|(
name|t
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
comment|// Now the ct is up... set into the mocks some answers that make it look
comment|// like things have been getting assigned.  Make it so we'll return a
comment|// location (no matter what the Get is).  Same for getHRegionInfo -- always
comment|// just return the meta region.
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|SERVER_QUALIFIER
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|HSA
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Result
name|result
init|=
operator|new
name|Result
argument_list|(
name|kvs
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockHRI
operator|.
name|get
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|,
operator|(
name|Get
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockHRI
operator|.
name|getRegionInfo
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
argument_list|)
expr_stmt|;
comment|// This should trigger wake up of meta wait (Its the removal of the meta
comment|// region unassigned node that triggers catalogtrackers that a meta has
comment|// been assigned.
name|String
name|node
init|=
name|ct
operator|.
name|getMetaNodeTracker
argument_list|()
operator|.
name|getNode
argument_list|()
decl_stmt|;
name|ZKUtil
operator|.
name|createAndFailSilent
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|MetaEditor
operator|.
name|updateMetaLocation
argument_list|(
name|ct
argument_list|,
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
argument_list|,
operator|new
name|HServerInfo
argument_list|(
name|HSA
argument_list|,
operator|-
literal|1
argument_list|,
literal|"example.com"
argument_list|)
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|deleteNode
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|node
argument_list|)
expr_stmt|;
comment|// Join the thread... should exit shortly.
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
comment|// Now meta is available.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ct
operator|.
name|getMetaLocation
argument_list|()
operator|.
name|equals
argument_list|(
name|HSA
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|startWaitAliveThenWaitItLives
parameter_list|(
specifier|final
name|Thread
name|t
parameter_list|,
specifier|final
name|int
name|ms
parameter_list|)
block|{
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|t
operator|.
name|isAlive
argument_list|()
condition|)
block|{
comment|// Wait
block|}
comment|// Wait one second.
name|Threads
operator|.
name|sleep
argument_list|(
name|ms
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Assert "
operator|+
name|t
operator|.
name|getName
argument_list|()
operator|+
literal|" still waiting"
argument_list|,
name|t
operator|.
name|isAlive
argument_list|()
argument_list|)
expr_stmt|;
block|}
class|class
name|CountingProgressable
implements|implements
name|Progressable
block|{
specifier|final
name|AtomicInteger
name|counter
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|progress
parameter_list|()
block|{
name|this
operator|.
name|counter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Wait on META.    * Default is wait on -ROOT-.    */
class|class
name|WaitOnMetaThread
extends|extends
name|Thread
block|{
specifier|final
name|CatalogTracker
name|ct
decl_stmt|;
name|WaitOnMetaThread
parameter_list|(
specifier|final
name|CatalogTracker
name|ct
parameter_list|)
block|{
name|super
argument_list|(
literal|"WaitOnMeta"
argument_list|)
expr_stmt|;
name|this
operator|.
name|ct
operator|=
name|ct
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|doWaiting
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed wait"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Exiting "
operator|+
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|void
name|doWaiting
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|this
operator|.
name|ct
operator|.
name|waitForRoot
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

