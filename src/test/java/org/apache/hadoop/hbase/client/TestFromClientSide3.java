begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|HRegionInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|LargeTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestFromClientSide3
block|{
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|ROW
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRow"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testFamily"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|QUALIFIER
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifier"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|VALUE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testValue"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|int
name|SLAVES
init|=
literal|3
decl_stmt|;
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
literal|"hbase.online.schema.update.enable"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
name|SLAVES
argument_list|)
expr_stmt|;
block|}
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Nothing to do.
block|}
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Nothing to do.
block|}
specifier|private
name|void
name|randomCFPuts
parameter_list|(
name|HTable
name|table
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|int
name|nPuts
parameter_list|)
throws|throws
name|Exception
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nPuts
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|qualifier
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|performMultiplePutAndFlush
parameter_list|(
name|HBaseAdmin
name|admin
parameter_list|,
name|HTable
name|table
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|int
name|nFlushes
parameter_list|,
name|int
name|nPuts
parameter_list|)
throws|throws
name|Exception
block|{
comment|// connection needed for poll-wait
name|HConnection
name|conn
init|=
name|HConnectionManager
operator|.
name|getConnection
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|HRegionLocation
name|loc
init|=
name|table
operator|.
name|getRegionLocation
argument_list|(
name|row
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|HRegionInterface
name|server
init|=
name|conn
operator|.
name|getHRegionConnection
argument_list|(
name|loc
operator|.
name|getHostname
argument_list|()
argument_list|,
name|loc
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|regName
init|=
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nFlushes
condition|;
name|i
operator|++
control|)
block|{
name|randomCFPuts
argument_list|(
name|table
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|nPuts
argument_list|)
expr_stmt|;
name|int
name|sfCount
init|=
name|server
operator|.
name|getStoreFileList
argument_list|(
name|regName
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// TODO: replace this api with a synchronous flush after HBASE-2949
name|admin
operator|.
name|flush
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
comment|// synchronously poll wait for a new storefile to appear (flush happened)
while|while
condition|(
name|server
operator|.
name|getStoreFileList
argument_list|(
name|regName
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|size
argument_list|()
operator|==
name|sfCount
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|40
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// override the config settings at the CF level and ensure priority
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testAdvancedConfigOverride
parameter_list|()
throws|throws
name|Exception
block|{
comment|/*      * Overall idea: (1) create 3 store files and issue a compaction. config's      * compaction.min == 3, so should work. (2) Increase the compaction.min      * toggle in the HTD to 5 and modify table. If we use the HTD value instead      * of the default config value, adding 3 files and issuing a compaction      * SHOULD NOT work (3) Decrease the compaction.min toggle in the HCD to 2      * and modify table. The CF schema should override the Table schema and now      * cause a minor compaction.      */
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.hstore.compaction.min"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|String
name|tableName
init|=
literal|"testAdvancedConfigOverride"
decl_stmt|;
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|HTable
name|hTable
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLE
argument_list|,
name|FAMILY
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|HBaseAdmin
name|admin
init|=
operator|new
name|HBaseAdmin
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|HConnection
name|connection
init|=
name|HConnectionManager
operator|.
name|getConnection
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
comment|// Create 3 store files.
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
name|performMultiplePutAndFlush
argument_list|(
name|admin
argument_list|,
name|hTable
argument_list|,
name|row
argument_list|,
name|FAMILY
argument_list|,
literal|3
argument_list|,
literal|100
argument_list|)
expr_stmt|;
comment|// Verify we have multiple store files.
name|HRegionLocation
name|loc
init|=
name|hTable
operator|.
name|getRegionLocation
argument_list|(
name|row
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|byte
index|[]
name|regionName
init|=
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
decl_stmt|;
name|HRegionInterface
name|server
init|=
name|connection
operator|.
name|getHRegionConnection
argument_list|(
name|loc
operator|.
name|getHostname
argument_list|()
argument_list|,
name|loc
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|server
operator|.
name|getStoreFileList
argument_list|(
name|regionName
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
comment|// Issue a compaction request
name|admin
operator|.
name|compact
argument_list|(
name|TABLE
argument_list|)
expr_stmt|;
comment|// poll wait for the compactions to happen
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
operator|*
literal|1000
operator|/
literal|40
condition|;
operator|++
name|i
control|)
block|{
comment|// The number of store files after compaction should be lesser.
name|loc
operator|=
name|hTable
operator|.
name|getRegionLocation
argument_list|(
name|row
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|isOffline
argument_list|()
condition|)
block|{
name|regionName
operator|=
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
expr_stmt|;
name|server
operator|=
name|connection
operator|.
name|getHRegionConnection
argument_list|(
name|loc
operator|.
name|getHostname
argument_list|()
argument_list|,
name|loc
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|server
operator|.
name|getStoreFileList
argument_list|(
name|regionName
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|size
argument_list|()
operator|<=
literal|1
condition|)
block|{
break|break;
block|}
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|40
argument_list|)
expr_stmt|;
block|}
comment|// verify the compactions took place and that we didn't just time out
name|assertTrue
argument_list|(
name|server
operator|.
name|getStoreFileList
argument_list|(
name|regionName
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|size
argument_list|()
operator|<=
literal|1
argument_list|)
expr_stmt|;
comment|// change the compaction.min config option for this table to 5
name|LOG
operator|.
name|info
argument_list|(
literal|"hbase.hstore.compaction.min should now be 5"
argument_list|)
expr_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|hTable
operator|.
name|getTableDescriptor
argument_list|()
argument_list|)
decl_stmt|;
name|htd
operator|.
name|setValue
argument_list|(
literal|"hbase.hstore.compaction.min"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|modifyTable
argument_list|(
name|TABLE
argument_list|,
name|htd
argument_list|)
expr_stmt|;
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|st
decl_stmt|;
while|while
condition|(
literal|null
operator|!=
operator|(
name|st
operator|=
name|admin
operator|.
name|getAlterStatus
argument_list|(
name|TABLE
argument_list|)
operator|)
operator|&&
name|st
operator|.
name|getFirst
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|st
operator|.
name|getFirst
argument_list|()
operator|+
literal|" regions left to update"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|40
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"alter status finished"
argument_list|)
expr_stmt|;
comment|// Create 3 more store files.
name|performMultiplePutAndFlush
argument_list|(
name|admin
argument_list|,
name|hTable
argument_list|,
name|row
argument_list|,
name|FAMILY
argument_list|,
literal|3
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// Issue a compaction request
name|admin
operator|.
name|compact
argument_list|(
name|TABLE
argument_list|)
expr_stmt|;
comment|// This time, the compaction request should not happen
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|int
name|sfCount
init|=
literal|0
decl_stmt|;
name|loc
operator|=
name|hTable
operator|.
name|getRegionLocation
argument_list|(
name|row
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|regionName
operator|=
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
expr_stmt|;
name|server
operator|=
name|connection
operator|.
name|getHRegionConnection
argument_list|(
name|loc
operator|.
name|getHostname
argument_list|()
argument_list|,
name|loc
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|sfCount
operator|=
name|server
operator|.
name|getStoreFileList
argument_list|(
name|regionName
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|sfCount
operator|>
literal|1
argument_list|)
expr_stmt|;
comment|// change an individual CF's config option to 2& online schema update
name|LOG
operator|.
name|info
argument_list|(
literal|"hbase.hstore.compaction.min should now be 2"
argument_list|)
expr_stmt|;
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|htd
operator|.
name|getFamily
argument_list|(
name|FAMILY
argument_list|)
argument_list|)
decl_stmt|;
name|hcd
operator|.
name|setValue
argument_list|(
literal|"hbase.hstore.compaction.min"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
name|admin
operator|.
name|modifyTable
argument_list|(
name|TABLE
argument_list|,
name|htd
argument_list|)
expr_stmt|;
while|while
condition|(
literal|null
operator|!=
operator|(
name|st
operator|=
name|admin
operator|.
name|getAlterStatus
argument_list|(
name|TABLE
argument_list|)
operator|)
operator|&&
name|st
operator|.
name|getFirst
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|st
operator|.
name|getFirst
argument_list|()
operator|+
literal|" regions left to update"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|40
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"alter status finished"
argument_list|)
expr_stmt|;
comment|// Issue a compaction request
name|admin
operator|.
name|compact
argument_list|(
name|TABLE
argument_list|)
expr_stmt|;
comment|// poll wait for the compactions to happen
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
operator|*
literal|1000
operator|/
literal|40
condition|;
operator|++
name|i
control|)
block|{
name|loc
operator|=
name|hTable
operator|.
name|getRegionLocation
argument_list|(
name|row
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|regionName
operator|=
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
expr_stmt|;
try|try
block|{
name|server
operator|=
name|connection
operator|.
name|getHRegionConnection
argument_list|(
name|loc
operator|.
name|getHostname
argument_list|()
argument_list|,
name|loc
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|server
operator|.
name|getStoreFileList
argument_list|(
name|regionName
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|size
argument_list|()
operator|<
name|sfCount
condition|)
block|{
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Waiting for region to come online: "
operator|+
name|regionName
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|40
argument_list|)
expr_stmt|;
block|}
comment|// verify the compaction took place and that we didn't just time out
name|assertTrue
argument_list|(
name|server
operator|.
name|getStoreFileList
argument_list|(
name|regionName
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|size
argument_list|()
operator|<
name|sfCount
argument_list|)
expr_stmt|;
comment|// Finally, ensure that we can remove a custom config value after we made it
name|LOG
operator|.
name|info
argument_list|(
literal|"Removing CF config value"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"hbase.hstore.compaction.min should now be 5"
argument_list|)
expr_stmt|;
name|hcd
operator|=
operator|new
name|HColumnDescriptor
argument_list|(
name|htd
operator|.
name|getFamily
argument_list|(
name|FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|hcd
operator|.
name|setValue
argument_list|(
literal|"hbase.hstore.compaction.min"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
name|admin
operator|.
name|modifyTable
argument_list|(
name|TABLE
argument_list|,
name|htd
argument_list|)
expr_stmt|;
while|while
condition|(
literal|null
operator|!=
operator|(
name|st
operator|=
name|admin
operator|.
name|getAlterStatus
argument_list|(
name|TABLE
argument_list|)
operator|)
operator|&&
name|st
operator|.
name|getFirst
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|st
operator|.
name|getFirst
argument_list|()
operator|+
literal|" regions left to update"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|40
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"alter status finished"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|hTable
operator|.
name|getTableDescriptor
argument_list|()
operator|.
name|getFamily
argument_list|(
name|FAMILY
argument_list|)
operator|.
name|getValue
argument_list|(
literal|"hbase.hstore.compaction.min"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Rule
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ResourceCheckerJUnitRule
name|cu
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ResourceCheckerJUnitRule
argument_list|()
decl_stmt|;
block|}
end_class

end_unit

