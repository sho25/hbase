begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|AssertionFailedError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|catalog
operator|.
name|CatalogTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|migration
operator|.
name|HRegionInfo090x
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|catalog
operator|.
name|MetaEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|catalog
operator|.
name|MetaReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Writables
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
specifier|public
class|class
name|TestMetaMigration
block|{
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|MiniHBaseCluster
name|miniHBaseCluster
init|=
literal|null
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|miniHBaseCluster
operator|=
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHRegionInfoForMigration
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testHRegionInfoForMigration"
argument_list|)
expr_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
literal|"testMetaMigration"
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
literal|"family"
argument_list|)
argument_list|)
expr_stmt|;
name|HRegionInfo090x
name|hrim
init|=
operator|new
name|HRegionInfo090x
argument_list|(
name|htd
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"INFO 1 = "
operator|+
name|hrim
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
name|Writables
operator|.
name|getBytes
argument_list|(
name|hrim
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|" BYtes.toString = "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|bytes
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|" HTD bytes = "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|Writables
operator|.
name|getBytes
argument_list|(
name|hrim
operator|.
name|getTableDesc
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|HRegionInfo090x
name|info
init|=
name|Writables
operator|.
name|getHRegionInfoForMigration
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"info = "
operator|+
name|info
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"END testHRegionInfoForMigration"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetaUpdatedFlagInROOT
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testMetaUpdatedFlagInROOT"
argument_list|)
expr_stmt|;
name|boolean
name|metaUpdated
init|=
name|miniHBaseCluster
operator|.
name|getMaster
argument_list|()
operator|.
name|isMetaHRIUpdated
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|metaUpdated
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"END testMetaUpdatedFlagInROOT"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdatesOnMetaWithLegacyHRI
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testMetaWithLegacyHRI"
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
literal|"testMetaMigration"
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILY
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|TEST_UTIL
operator|.
name|createMultiRegionsWithLegacyHRI
argument_list|(
name|conf
argument_list|,
name|htd
argument_list|,
name|FAMILY
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|HConstants
operator|.
name|EMPTY_START_ROW
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"region_a"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"region_b"
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|CatalogTracker
name|ct
init|=
name|miniHBaseCluster
operator|.
name|getMaster
argument_list|()
operator|.
name|getCatalogTracker
argument_list|()
decl_stmt|;
comment|// just for this test set it to false.
name|MetaEditor
operator|.
name|updateRootWithMetaMigrationStatus
argument_list|(
name|ct
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|MetaReader
operator|.
name|fullScanMetaAndPrint
argument_list|(
name|ct
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"MEta Print completed.testUpdatesOnMetaWithLegacyHRI"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HTableDescriptor
argument_list|>
name|htds
init|=
name|MetaEditor
operator|.
name|updateMetaWithNewRegionInfo
argument_list|(
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|htds
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assert that the flag in ROOT is updated to reflect the correct status
name|boolean
name|metaUpdated
init|=
name|miniHBaseCluster
operator|.
name|getMaster
argument_list|()
operator|.
name|isMetaHRIUpdated
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|metaUpdated
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"END testMetaWithLegacyHRI"
argument_list|)
expr_stmt|;
block|}
comment|//@Test
specifier|public
name|void
name|dtestUpdatesOnMetaWithNewHRI
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testMetaWithLegacyHRI"
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
literal|"testMetaMigration"
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILY
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|TEST_UTIL
operator|.
name|createMultiRegionsWithNewHRI
argument_list|(
name|conf
argument_list|,
name|htd
argument_list|,
name|FAMILY
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|HConstants
operator|.
name|EMPTY_START_ROW
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"region_a"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"region_b"
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HTableDescriptor
argument_list|>
name|htds
init|=
name|MetaEditor
operator|.
name|updateMetaWithNewRegionInfo
argument_list|(
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|htds
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|assertEquals
parameter_list|(
name|int
name|expected
parameter_list|,
name|int
name|actual
parameter_list|)
block|{
if|if
condition|(
name|expected
operator|!=
name|actual
condition|)
block|{
throw|throw
operator|new
name|AssertionFailedError
argument_list|(
literal|"expected:<"
operator|+
name|expected
operator|+
literal|"> but was:<"
operator|+
name|actual
operator|+
literal|">"
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|void
name|assertEquals
parameter_list|(
name|boolean
name|expected
parameter_list|,
name|boolean
name|actual
parameter_list|)
block|{
if|if
condition|(
name|expected
operator|!=
name|actual
condition|)
block|{
throw|throw
operator|new
name|AssertionFailedError
argument_list|(
literal|"expected:<"
operator|+
name|expected
operator|+
literal|"> but was:<"
operator|+
name|actual
operator|+
literal|">"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

