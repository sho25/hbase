begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2011 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|EventHandler
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLogUtilsForTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|InvalidFamilyOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * Class to test HBaseAdmin.  * Spins up the minicluster once at test start and then takes it down afterward.  * Add any testing of HBaseAdmin functionality here.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|LargeTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestAdmin
block|{
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
name|HBaseAdmin
name|admin
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
literal|"hbase.online.schema.update.enable"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.regionserver.msginterval"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.client.pause"
argument_list|,
literal|250
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.client.retries.number"
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
literal|"hbase.master.enabletable.roundrobin"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|admin
operator|=
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{   }
annotation|@
name|Test
specifier|public
name|void
name|testSplitFlushCompactUnknownTable
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|String
name|unknowntable
init|=
literal|"fubar"
decl_stmt|;
name|Exception
name|exception
init|=
literal|null
decl_stmt|;
try|try
block|{
name|this
operator|.
name|admin
operator|.
name|compact
argument_list|(
name|unknowntable
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exception
operator|instanceof
name|TableNotFoundException
argument_list|)
expr_stmt|;
name|exception
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|this
operator|.
name|admin
operator|.
name|flush
argument_list|(
name|unknowntable
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exception
operator|instanceof
name|TableNotFoundException
argument_list|)
expr_stmt|;
name|exception
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|this
operator|.
name|admin
operator|.
name|split
argument_list|(
name|unknowntable
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exception
operator|instanceof
name|TableNotFoundException
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteEditUnknownColumnFamilyAndOrTable
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Test we get exception if we try to
specifier|final
name|String
name|nonexistent
init|=
literal|"nonexistent"
decl_stmt|;
name|HColumnDescriptor
name|nonexistentHcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|nonexistent
argument_list|)
decl_stmt|;
name|Exception
name|exception
init|=
literal|null
decl_stmt|;
try|try
block|{
name|this
operator|.
name|admin
operator|.
name|addColumn
argument_list|(
name|nonexistent
argument_list|,
name|nonexistentHcd
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exception
operator|instanceof
name|TableNotFoundException
argument_list|)
expr_stmt|;
name|exception
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|this
operator|.
name|admin
operator|.
name|deleteTable
argument_list|(
name|nonexistent
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exception
operator|instanceof
name|TableNotFoundException
argument_list|)
expr_stmt|;
name|exception
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|this
operator|.
name|admin
operator|.
name|deleteColumn
argument_list|(
name|nonexistent
argument_list|,
name|nonexistent
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exception
operator|instanceof
name|TableNotFoundException
argument_list|)
expr_stmt|;
name|exception
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|this
operator|.
name|admin
operator|.
name|disableTable
argument_list|(
name|nonexistent
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exception
operator|instanceof
name|TableNotFoundException
argument_list|)
expr_stmt|;
name|exception
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|this
operator|.
name|admin
operator|.
name|enableTable
argument_list|(
name|nonexistent
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exception
operator|instanceof
name|TableNotFoundException
argument_list|)
expr_stmt|;
name|exception
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|this
operator|.
name|admin
operator|.
name|modifyColumn
argument_list|(
name|nonexistent
argument_list|,
name|nonexistentHcd
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exception
operator|instanceof
name|TableNotFoundException
argument_list|)
expr_stmt|;
name|exception
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|nonexistent
argument_list|)
decl_stmt|;
name|this
operator|.
name|admin
operator|.
name|modifyTable
argument_list|(
name|htd
operator|.
name|getName
argument_list|()
argument_list|,
name|htd
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exception
operator|instanceof
name|TableNotFoundException
argument_list|)
expr_stmt|;
comment|// Now make it so at least the table exists and then do tests against a
comment|// nonexistent column family -- see if we get right exceptions.
specifier|final
name|String
name|tableName
init|=
literal|"t"
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
literal|"cf"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|admin
operator|.
name|createTable
argument_list|(
name|htd
argument_list|)
expr_stmt|;
try|try
block|{
name|exception
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|this
operator|.
name|admin
operator|.
name|deleteColumn
argument_list|(
name|htd
operator|.
name|getName
argument_list|()
argument_list|,
name|nonexistentHcd
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exception
operator|instanceof
name|InvalidFamilyOperationException
argument_list|)
expr_stmt|;
name|exception
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|this
operator|.
name|admin
operator|.
name|modifyColumn
argument_list|(
name|htd
operator|.
name|getName
argument_list|()
argument_list|,
name|nonexistentHcd
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exception
operator|instanceof
name|InvalidFamilyOperationException
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|this
operator|.
name|admin
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDisableAndEnableTable
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|qualifier
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|table
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testDisableAndEnableTable"
argument_list|)
decl_stmt|;
name|HTable
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|table
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|qualifier
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|this
operator|.
name|admin
operator|.
name|disableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Table must be disabled."
argument_list|,
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getZKTable
argument_list|()
operator|.
name|isDisabledTable
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|table
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test that table is disabled
name|get
operator|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|boolean
name|ok
init|=
literal|false
decl_stmt|;
try|try
block|{
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotServingRegionException
name|e
parameter_list|)
block|{
name|ok
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RetriesExhaustedException
name|e
parameter_list|)
block|{
name|ok
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|this
operator|.
name|admin
operator|.
name|enableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Table must be enabled."
argument_list|,
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getZKTable
argument_list|()
operator|.
name|isEnabledTable
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|table
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test that table is enabled
try|try
block|{
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RetriesExhaustedException
name|e
parameter_list|)
block|{
name|ok
operator|=
literal|false
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|ht
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDisableAndEnableTables
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|qualifier
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|table1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testDisableAndEnableTable1"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|table2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testDisableAndEnableTable2"
argument_list|)
decl_stmt|;
name|HTable
name|ht1
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|table1
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
decl_stmt|;
name|HTable
name|ht2
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|table2
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|qualifier
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|ht1
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|ht2
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|ht1
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|ht2
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|this
operator|.
name|admin
operator|.
name|disableTables
argument_list|(
literal|"testDisableAndEnableTable.*"
argument_list|)
expr_stmt|;
comment|// Test that tables are disabled
name|get
operator|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|boolean
name|ok
init|=
literal|false
decl_stmt|;
try|try
block|{
name|ht1
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|ht2
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotServingRegionException
name|e
parameter_list|)
block|{
name|ok
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RetriesExhaustedException
name|e
parameter_list|)
block|{
name|ok
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|this
operator|.
name|admin
operator|.
name|enableTables
argument_list|(
literal|"testDisableAndEnableTable.*"
argument_list|)
expr_stmt|;
comment|// Test that tables are enabled
try|try
block|{
name|ht1
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RetriesExhaustedException
name|e
parameter_list|)
block|{
name|ok
operator|=
literal|false
expr_stmt|;
block|}
try|try
block|{
name|ht2
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RetriesExhaustedException
name|e
parameter_list|)
block|{
name|ok
operator|=
literal|false
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|ht1
operator|.
name|close
argument_list|()
expr_stmt|;
name|ht2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateTable
parameter_list|()
throws|throws
name|IOException
block|{
name|HTableDescriptor
index|[]
name|tables
init|=
name|admin
operator|.
name|listTables
argument_list|()
decl_stmt|;
name|int
name|numTables
init|=
name|tables
operator|.
name|length
decl_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testCreateTable"
argument_list|)
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|tables
operator|=
name|this
operator|.
name|admin
operator|.
name|listTables
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|numTables
operator|+
literal|1
argument_list|,
name|tables
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Table must be enabled."
argument_list|,
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getZKTable
argument_list|()
operator|.
name|isEnabledTable
argument_list|(
literal|"testCreateTable"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTableDescriptor
parameter_list|()
throws|throws
name|IOException
block|{
name|HColumnDescriptor
name|fam1
init|=
operator|new
name|HColumnDescriptor
argument_list|(
literal|"fam1"
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|fam2
init|=
operator|new
name|HColumnDescriptor
argument_list|(
literal|"fam2"
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|fam3
init|=
operator|new
name|HColumnDescriptor
argument_list|(
literal|"fam3"
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
literal|"myTestTable"
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|fam1
argument_list|)
expr_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|fam2
argument_list|)
expr_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|fam3
argument_list|)
expr_stmt|;
name|this
operator|.
name|admin
operator|.
name|createTable
argument_list|(
name|htd
argument_list|)
expr_stmt|;
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|"myTestTable"
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|confirmedHtd
init|=
name|table
operator|.
name|getTableDescriptor
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|htd
operator|.
name|compareTo
argument_list|(
name|confirmedHtd
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHColumnValidName
parameter_list|()
block|{
name|boolean
name|exceptionThrown
init|=
literal|false
decl_stmt|;
try|try
block|{
name|HColumnDescriptor
name|fam1
init|=
operator|new
name|HColumnDescriptor
argument_list|(
literal|"\\test\\abc"
argument_list|)
decl_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
name|exceptionThrown
operator|=
literal|true
expr_stmt|;
name|assertTrue
argument_list|(
name|exceptionThrown
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Verify schema modification takes.    * @throws IOException    * @throws InterruptedException    */
annotation|@
name|Test
specifier|public
name|void
name|testOnlineChangeTableSchema
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"changeTableSchemaOnline"
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
literal|"hbase.online.schema.update.enable"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|HTableDescriptor
index|[]
name|tables
init|=
name|admin
operator|.
name|listTables
argument_list|()
decl_stmt|;
name|int
name|numTables
init|=
name|tables
operator|.
name|length
decl_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|tables
operator|=
name|this
operator|.
name|admin
operator|.
name|listTables
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|numTables
operator|+
literal|1
argument_list|,
name|tables
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// FIRST, do htabledescriptor changes.
name|HTableDescriptor
name|htd
init|=
name|this
operator|.
name|admin
operator|.
name|getTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
comment|// Make a copy and assert copy is good.
name|HTableDescriptor
name|copy
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|htd
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|htd
operator|.
name|equals
argument_list|(
name|copy
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now amend the copy. Introduce differences.
name|long
name|newFlushSize
init|=
name|htd
operator|.
name|getMemStoreFlushSize
argument_list|()
operator|/
literal|2
decl_stmt|;
name|copy
operator|.
name|setMemStoreFlushSize
argument_list|(
name|newFlushSize
argument_list|)
expr_stmt|;
specifier|final
name|String
name|key
init|=
literal|"anyoldkey"
decl_stmt|;
name|assertTrue
argument_list|(
name|htd
operator|.
name|getValue
argument_list|(
name|key
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
name|copy
operator|.
name|setValue
argument_list|(
name|key
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|boolean
name|expectedException
init|=
literal|false
decl_stmt|;
try|try
block|{
name|modifyTable
argument_list|(
name|tableName
argument_list|,
name|copy
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TableNotDisabledException
name|re
parameter_list|)
block|{
name|expectedException
operator|=
literal|true
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|expectedException
argument_list|)
expr_stmt|;
name|HTableDescriptor
name|modifiedHtd
init|=
name|this
operator|.
name|admin
operator|.
name|getTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|htd
operator|.
name|equals
argument_list|(
name|modifiedHtd
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|copy
operator|.
name|equals
argument_list|(
name|modifiedHtd
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newFlushSize
argument_list|,
name|modifiedHtd
operator|.
name|getMemStoreFlushSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|key
argument_list|,
name|modifiedHtd
operator|.
name|getValue
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now work on column family changes.
name|htd
operator|=
name|this
operator|.
name|admin
operator|.
name|getTableDescriptor
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|int
name|countOfFamilies
init|=
name|modifiedHtd
operator|.
name|getFamilies
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|countOfFamilies
operator|>
literal|0
argument_list|)
expr_stmt|;
name|HColumnDescriptor
name|hcd
init|=
name|modifiedHtd
operator|.
name|getFamilies
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|maxversions
init|=
name|hcd
operator|.
name|getMaxVersions
argument_list|()
decl_stmt|;
specifier|final
name|int
name|newMaxVersions
init|=
name|maxversions
operator|+
literal|1
decl_stmt|;
name|hcd
operator|.
name|setMaxVersions
argument_list|(
name|newMaxVersions
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|hcdName
init|=
name|hcd
operator|.
name|getName
argument_list|()
decl_stmt|;
name|expectedException
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|this
operator|.
name|admin
operator|.
name|modifyColumn
argument_list|(
name|tableName
argument_list|,
name|hcd
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TableNotDisabledException
name|re
parameter_list|)
block|{
name|expectedException
operator|=
literal|true
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|expectedException
argument_list|)
expr_stmt|;
name|modifiedHtd
operator|=
name|this
operator|.
name|admin
operator|.
name|getTableDescriptor
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|HColumnDescriptor
name|modifiedHcd
init|=
name|modifiedHtd
operator|.
name|getFamily
argument_list|(
name|hcdName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|newMaxVersions
argument_list|,
name|modifiedHcd
operator|.
name|getMaxVersions
argument_list|()
argument_list|)
expr_stmt|;
comment|// Try adding a column
name|assertFalse
argument_list|(
name|this
operator|.
name|admin
operator|.
name|isTableDisabled
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|xtracolName
init|=
literal|"xtracol"
decl_stmt|;
name|htd
operator|=
name|this
operator|.
name|admin
operator|.
name|getTableDescriptor
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|HColumnDescriptor
name|xtracol
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|xtracolName
argument_list|)
decl_stmt|;
name|xtracol
operator|.
name|setValue
argument_list|(
name|xtracolName
argument_list|,
name|xtracolName
argument_list|)
expr_stmt|;
name|expectedException
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|this
operator|.
name|admin
operator|.
name|addColumn
argument_list|(
name|tableName
argument_list|,
name|xtracol
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TableNotDisabledException
name|re
parameter_list|)
block|{
name|expectedException
operator|=
literal|true
expr_stmt|;
block|}
comment|// Add column should work even if the table is enabled
name|assertFalse
argument_list|(
name|expectedException
argument_list|)
expr_stmt|;
name|modifiedHtd
operator|=
name|this
operator|.
name|admin
operator|.
name|getTableDescriptor
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|hcd
operator|=
name|modifiedHtd
operator|.
name|getFamily
argument_list|(
name|xtracol
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hcd
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hcd
operator|.
name|getValue
argument_list|(
name|xtracolName
argument_list|)
operator|.
name|equals
argument_list|(
name|xtracolName
argument_list|)
argument_list|)
expr_stmt|;
comment|// Delete the just-added column.
name|this
operator|.
name|admin
operator|.
name|deleteColumn
argument_list|(
name|tableName
argument_list|,
name|xtracol
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|modifiedHtd
operator|=
name|this
operator|.
name|admin
operator|.
name|getTableDescriptor
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|hcd
operator|=
name|modifiedHtd
operator|.
name|getFamily
argument_list|(
name|xtracol
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hcd
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|// Delete the table
name|this
operator|.
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|this
operator|.
name|admin
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|this
operator|.
name|admin
operator|.
name|listTables
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|this
operator|.
name|admin
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testShouldFailOnlineSchemaUpdateIfOnlineSchemaIsNotEnabled
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"changeTableSchemaOnlineFailure"
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
literal|"hbase.online.schema.update.enable"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|HTableDescriptor
index|[]
name|tables
init|=
name|admin
operator|.
name|listTables
argument_list|()
decl_stmt|;
name|int
name|numTables
init|=
name|tables
operator|.
name|length
decl_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|tables
operator|=
name|this
operator|.
name|admin
operator|.
name|listTables
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|numTables
operator|+
literal|1
argument_list|,
name|tables
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// FIRST, do htabledescriptor changes.
name|HTableDescriptor
name|htd
init|=
name|this
operator|.
name|admin
operator|.
name|getTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
comment|// Make a copy and assert copy is good.
name|HTableDescriptor
name|copy
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|htd
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|htd
operator|.
name|equals
argument_list|(
name|copy
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now amend the copy. Introduce differences.
name|long
name|newFlushSize
init|=
name|htd
operator|.
name|getMemStoreFlushSize
argument_list|()
operator|/
literal|2
decl_stmt|;
name|copy
operator|.
name|setMemStoreFlushSize
argument_list|(
name|newFlushSize
argument_list|)
expr_stmt|;
specifier|final
name|String
name|key
init|=
literal|"anyoldkey"
decl_stmt|;
name|assertTrue
argument_list|(
name|htd
operator|.
name|getValue
argument_list|(
name|key
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
name|copy
operator|.
name|setValue
argument_list|(
name|key
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|boolean
name|expectedException
init|=
literal|false
decl_stmt|;
try|try
block|{
name|modifyTable
argument_list|(
name|tableName
argument_list|,
name|copy
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TableNotDisabledException
name|re
parameter_list|)
block|{
name|expectedException
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Online schema update should not happen."
argument_list|,
name|expectedException
argument_list|)
expr_stmt|;
block|}
comment|/**    * Modify table is async so wait on completion of the table operation in master.    * @param tableName    * @param htd    * @throws IOException    */
specifier|private
name|void
name|modifyTable
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|,
specifier|final
name|HTableDescriptor
name|htd
parameter_list|)
throws|throws
name|IOException
block|{
name|MasterServices
name|services
init|=
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|ExecutorService
name|executor
init|=
name|services
operator|.
name|getExecutorService
argument_list|()
decl_stmt|;
name|AtomicBoolean
name|done
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|executor
operator|.
name|registerListener
argument_list|(
name|EventType
operator|.
name|C_M_MODIFY_TABLE
argument_list|,
operator|new
name|DoneListener
argument_list|(
name|done
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|admin
operator|.
name|modifyTable
argument_list|(
name|tableName
argument_list|,
name|htd
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|done
operator|.
name|get
argument_list|()
condition|)
block|{
synchronized|synchronized
init|(
name|done
init|)
block|{
try|try
block|{
name|done
operator|.
name|wait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|executor
operator|.
name|unregisterListener
argument_list|(
name|EventType
operator|.
name|C_M_MODIFY_TABLE
argument_list|)
expr_stmt|;
block|}
comment|/**    * Listens for when an event is done in Master.    */
specifier|static
class|class
name|DoneListener
implements|implements
name|EventHandler
operator|.
name|EventHandlerListener
block|{
specifier|private
specifier|final
name|AtomicBoolean
name|done
decl_stmt|;
name|DoneListener
parameter_list|(
specifier|final
name|AtomicBoolean
name|done
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|done
operator|=
name|done
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterProcess
parameter_list|(
name|EventHandler
name|event
parameter_list|)
block|{
name|this
operator|.
name|done
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|done
init|)
block|{
comment|// Wake anyone waiting on this value to change.
name|this
operator|.
name|done
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeProcess
parameter_list|(
name|EventHandler
name|event
parameter_list|)
block|{
comment|// continue
block|}
block|}
specifier|protected
name|void
name|verifyRoundRobinDistribution
parameter_list|(
name|HTable
name|ht
parameter_list|,
name|int
name|expectedRegions
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|numRS
init|=
name|ht
operator|.
name|getConnection
argument_list|()
operator|.
name|getCurrentNrHRS
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
name|regions
init|=
name|ht
operator|.
name|getRegionsInfo
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|HServerAddress
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|server2Regions
init|=
operator|new
name|HashMap
argument_list|<
name|HServerAddress
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
name|entry
range|:
name|regions
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|HServerAddress
name|server
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regs
init|=
name|server2Regions
operator|.
name|get
argument_list|(
name|server
argument_list|)
decl_stmt|;
if|if
condition|(
name|regs
operator|==
literal|null
condition|)
block|{
name|regs
operator|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
expr_stmt|;
name|server2Regions
operator|.
name|put
argument_list|(
name|server
argument_list|,
name|regs
argument_list|)
expr_stmt|;
block|}
name|regs
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|float
name|average
init|=
operator|(
name|float
operator|)
name|expectedRegions
operator|/
name|numRS
decl_stmt|;
name|int
name|min
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|average
argument_list|)
decl_stmt|;
name|int
name|max
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|average
argument_list|)
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regionList
range|:
name|server2Regions
operator|.
name|values
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|regionList
operator|.
name|size
argument_list|()
operator|==
name|min
operator|||
name|regionList
operator|.
name|size
argument_list|()
operator|==
name|max
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateTableWithRegions
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testCreateTableWithRegions"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|splitKeys
init|=
block|{
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|3
block|,
literal|3
block|,
literal|3
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|4
block|,
literal|4
block|,
literal|4
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|5
block|,
literal|5
block|,
literal|5
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|6
block|,
literal|6
block|,
literal|6
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|7
block|,
literal|7
block|,
literal|7
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|8
block|,
literal|8
block|,
literal|8
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|9
block|,
literal|9
block|,
literal|9
block|}
block|,     }
decl_stmt|;
name|int
name|expectedRegions
init|=
name|splitKeys
operator|.
name|length
operator|+
literal|1
decl_stmt|;
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|,
name|splitKeys
argument_list|)
expr_stmt|;
name|HTable
name|ht
init|=
operator|new
name|HTable
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
name|regions
init|=
name|ht
operator|.
name|getRegionsInfo
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Tried to create "
operator|+
name|expectedRegions
operator|+
literal|" regions "
operator|+
literal|"but only found "
operator|+
name|regions
operator|.
name|size
argument_list|()
argument_list|,
name|expectedRegions
argument_list|,
name|regions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Found "
operator|+
name|regions
operator|.
name|size
argument_list|()
operator|+
literal|" regions"
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|HRegionInfo
argument_list|>
name|hris
init|=
name|regions
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|HRegionInfo
name|hri
init|=
name|hris
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
operator|==
literal|null
operator|||
name|hri
operator|.
name|getStartKey
argument_list|()
operator|.
name|length
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|3
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|3
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|4
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|4
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|5
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|5
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|6
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|6
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|7
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|7
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|8
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|8
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
operator|==
literal|null
operator|||
name|hri
operator|.
name|getEndKey
argument_list|()
operator|.
name|length
operator|==
literal|0
argument_list|)
expr_stmt|;
name|verifyRoundRobinDistribution
argument_list|(
name|ht
argument_list|,
name|expectedRegions
argument_list|)
expr_stmt|;
name|ht
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Now test using start/end with a number of regions
comment|// Use 80 bit numbers to make sure we aren't limited
name|byte
index|[]
name|startKey
init|=
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
decl_stmt|;
name|byte
index|[]
name|endKey
init|=
block|{
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|}
decl_stmt|;
comment|// Splitting into 10 regions, we expect (null,1) ... (9, null)
comment|// with (1,2) (2,3) (3,4) (4,5) (5,6) (6,7) (7,8) (8,9) in the middle
name|expectedRegions
operator|=
literal|10
expr_stmt|;
name|byte
index|[]
name|TABLE_2
init|=
name|Bytes
operator|.
name|add
argument_list|(
name|tableName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"_2"
argument_list|)
argument_list|)
decl_stmt|;
name|desc
operator|=
operator|new
name|HTableDescriptor
argument_list|(
name|TABLE_2
argument_list|)
expr_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|=
operator|new
name|HBaseAdmin
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|,
name|startKey
argument_list|,
name|endKey
argument_list|,
name|expectedRegions
argument_list|)
expr_stmt|;
name|HTable
name|ht2
init|=
operator|new
name|HTable
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|TABLE_2
argument_list|)
decl_stmt|;
name|regions
operator|=
name|ht2
operator|.
name|getRegionsInfo
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Tried to create "
operator|+
name|expectedRegions
operator|+
literal|" regions "
operator|+
literal|"but only found "
operator|+
name|regions
operator|.
name|size
argument_list|()
argument_list|,
name|expectedRegions
argument_list|,
name|regions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Found "
operator|+
name|regions
operator|.
name|size
argument_list|()
operator|+
literal|" regions"
argument_list|)
expr_stmt|;
name|hris
operator|=
name|regions
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
operator|==
literal|null
operator|||
name|hri
operator|.
name|getStartKey
argument_list|()
operator|.
name|length
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
operator|==
literal|null
operator|||
name|hri
operator|.
name|getEndKey
argument_list|()
operator|.
name|length
operator|==
literal|0
argument_list|)
expr_stmt|;
name|verifyRoundRobinDistribution
argument_list|(
name|ht2
argument_list|,
name|expectedRegions
argument_list|)
expr_stmt|;
name|ht2
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Try once more with something that divides into something infinite
name|startKey
operator|=
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
expr_stmt|;
name|endKey
operator|=
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
expr_stmt|;
name|expectedRegions
operator|=
literal|5
expr_stmt|;
name|byte
index|[]
name|TABLE_3
init|=
name|Bytes
operator|.
name|add
argument_list|(
name|tableName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"_3"
argument_list|)
argument_list|)
decl_stmt|;
name|desc
operator|=
operator|new
name|HTableDescriptor
argument_list|(
name|TABLE_3
argument_list|)
expr_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|=
operator|new
name|HBaseAdmin
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|,
name|startKey
argument_list|,
name|endKey
argument_list|,
name|expectedRegions
argument_list|)
expr_stmt|;
name|HTable
name|ht3
init|=
operator|new
name|HTable
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|TABLE_3
argument_list|)
decl_stmt|;
name|regions
operator|=
name|ht3
operator|.
name|getRegionsInfo
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Tried to create "
operator|+
name|expectedRegions
operator|+
literal|" regions "
operator|+
literal|"but only found "
operator|+
name|regions
operator|.
name|size
argument_list|()
argument_list|,
name|expectedRegions
argument_list|,
name|regions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Found "
operator|+
name|regions
operator|.
name|size
argument_list|()
operator|+
literal|" regions"
argument_list|)
expr_stmt|;
name|verifyRoundRobinDistribution
argument_list|(
name|ht3
argument_list|,
name|expectedRegions
argument_list|)
expr_stmt|;
name|ht3
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Try an invalid case where there are duplicate split keys
name|splitKeys
operator|=
operator|new
name|byte
index|[]
index|[]
block|{
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|3
block|,
literal|3
block|,
literal|3
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|}
block|}
expr_stmt|;
name|byte
index|[]
name|TABLE_4
init|=
name|Bytes
operator|.
name|add
argument_list|(
name|tableName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"_4"
argument_list|)
argument_list|)
decl_stmt|;
name|desc
operator|=
operator|new
name|HTableDescriptor
argument_list|(
name|TABLE_4
argument_list|)
expr_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|HBaseAdmin
name|ladmin
init|=
operator|new
name|HBaseAdmin
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|ladmin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|,
name|splitKeys
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should not be able to create this table because of "
operator|+
literal|"duplicate split keys"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
comment|// Expected
block|}
name|ladmin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableExist
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|table
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testTableExist"
argument_list|)
decl_stmt|;
name|boolean
name|exist
init|=
literal|false
decl_stmt|;
name|exist
operator|=
name|this
operator|.
name|admin
operator|.
name|tableExists
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exist
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|table
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
name|exist
operator|=
name|this
operator|.
name|admin
operator|.
name|tableExists
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exist
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests forcing split from client and having scanners successfully ride over split.    * @throws Exception    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testForceSplit
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
index|[]
name|familyNames
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf"
argument_list|)
block|}
decl_stmt|;
name|int
index|[]
name|rowCounts
init|=
operator|new
name|int
index|[]
block|{
literal|6000
block|}
decl_stmt|;
name|int
name|numVersions
init|=
name|HColumnDescriptor
operator|.
name|DEFAULT_VERSIONS
decl_stmt|;
name|int
name|blockSize
init|=
literal|256
decl_stmt|;
name|splitTest
argument_list|(
literal|null
argument_list|,
name|familyNames
argument_list|,
name|rowCounts
argument_list|,
name|numVersions
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
name|byte
index|[]
name|splitKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|3500
argument_list|)
decl_stmt|;
name|splitTest
argument_list|(
name|splitKey
argument_list|,
name|familyNames
argument_list|,
name|rowCounts
argument_list|,
name|numVersions
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test round-robin assignment on enableTable.    *    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testEnableTableRoundRobinAssignment
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testEnableTableAssignment"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|splitKeys
init|=
block|{
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|3
block|,
literal|3
block|,
literal|3
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|4
block|,
literal|4
block|,
literal|4
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|5
block|,
literal|5
block|,
literal|5
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|6
block|,
literal|6
block|,
literal|6
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|7
block|,
literal|7
block|,
literal|7
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|8
block|,
literal|8
block|,
literal|8
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|9
block|,
literal|9
block|,
literal|9
block|}
block|}
decl_stmt|;
name|int
name|expectedRegions
init|=
name|splitKeys
operator|.
name|length
operator|+
literal|1
decl_stmt|;
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|,
name|splitKeys
argument_list|)
expr_stmt|;
name|HTable
name|ht
init|=
operator|new
name|HTable
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
name|regions
init|=
name|ht
operator|.
name|getRegionsInfo
argument_list|()
decl_stmt|;
name|ht
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Tried to create "
operator|+
name|expectedRegions
operator|+
literal|" regions "
operator|+
literal|"but only found "
operator|+
name|regions
operator|.
name|size
argument_list|()
argument_list|,
name|expectedRegions
argument_list|,
name|regions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Disable table.
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// Enable table, use round-robin assignment to assign regions.
name|admin
operator|.
name|enableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// Check the assignment.
name|HTable
name|metaTable
init|=
operator|new
name|HTable
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|HConstants
operator|.
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regionInfos
init|=
name|admin
operator|.
name|getTableRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|serverMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|j
init|=
name|regionInfos
operator|.
name|size
argument_list|()
init|;
name|i
operator|<
name|j
condition|;
name|i
operator|++
control|)
block|{
name|HRegionInfo
name|hri
init|=
name|regionInfos
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|metaTable
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|String
name|server
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|SERVER_QUALIFIER
argument_list|)
argument_list|)
decl_stmt|;
name|Integer
name|regioncount
init|=
name|serverMap
operator|.
name|get
argument_list|(
name|server
argument_list|)
decl_stmt|;
if|if
condition|(
name|regioncount
operator|==
literal|null
condition|)
block|{
name|regioncount
operator|=
literal|0
expr_stmt|;
block|}
name|regioncount
operator|++
expr_stmt|;
name|serverMap
operator|.
name|put
argument_list|(
name|server
argument_list|,
name|regioncount
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|entryList
init|=
operator|new
name|ArrayList
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|(
name|serverMap
operator|.
name|entrySet
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|entryList
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|oa
parameter_list|,
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|ob
parameter_list|)
block|{
return|return
operator|(
name|oa
operator|.
name|getValue
argument_list|()
operator|-
name|ob
operator|.
name|getValue
argument_list|()
operator|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|entryList
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|entryList
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getValue
argument_list|()
operator|-
name|entryList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
operator|)
operator|<
literal|2
argument_list|)
expr_stmt|;
block|}
comment|/**    * Multi-family scenario. Tests forcing split from client and    * having scanners successfully ride over split.    * @throws Exception    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testForceSplitMultiFamily
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numVersions
init|=
name|HColumnDescriptor
operator|.
name|DEFAULT_VERSIONS
decl_stmt|;
comment|// use small HFile block size so that we can have lots of blocks in HFile
comment|// Otherwise, if there is only one block,
comment|// HFileBlockIndex.midKey()'s value == startKey
name|int
name|blockSize
init|=
literal|256
decl_stmt|;
name|byte
index|[]
index|[]
name|familyNames
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf1"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf2"
argument_list|)
block|}
decl_stmt|;
comment|// one of the column families isn't splittable
name|int
index|[]
name|rowCounts
init|=
operator|new
name|int
index|[]
block|{
literal|6000
block|,
literal|1
block|}
decl_stmt|;
name|splitTest
argument_list|(
literal|null
argument_list|,
name|familyNames
argument_list|,
name|rowCounts
argument_list|,
name|numVersions
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
name|rowCounts
operator|=
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|6000
block|}
expr_stmt|;
name|splitTest
argument_list|(
literal|null
argument_list|,
name|familyNames
argument_list|,
name|rowCounts
argument_list|,
name|numVersions
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
comment|// one column family has much smaller data than the other
comment|// the split key should be based on the largest column family
name|rowCounts
operator|=
operator|new
name|int
index|[]
block|{
literal|6000
block|,
literal|300
block|}
expr_stmt|;
name|splitTest
argument_list|(
literal|null
argument_list|,
name|familyNames
argument_list|,
name|rowCounts
argument_list|,
name|numVersions
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
name|rowCounts
operator|=
operator|new
name|int
index|[]
block|{
literal|300
block|,
literal|6000
block|}
expr_stmt|;
name|splitTest
argument_list|(
literal|null
argument_list|,
name|familyNames
argument_list|,
name|rowCounts
argument_list|,
name|numVersions
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
block|}
name|void
name|splitTest
parameter_list|(
name|byte
index|[]
name|splitPoint
parameter_list|,
name|byte
index|[]
index|[]
name|familyNames
parameter_list|,
name|int
index|[]
name|rowCounts
parameter_list|,
name|int
name|numVersions
parameter_list|,
name|int
name|blockSize
parameter_list|)
throws|throws
name|Exception
block|{
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testForceSplit"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|admin
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|HTable
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|familyNames
argument_list|,
name|numVersions
argument_list|,
name|blockSize
argument_list|)
decl_stmt|;
try|try
block|{
name|int
name|rowCount
init|=
literal|0
decl_stmt|;
comment|// insert rows into column families. The number of rows that have values
comment|// in a specific column family is decided by rowCounts[familyIndex]
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|familyNames
operator|.
name|length
condition|;
name|index
operator|++
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rowCounts
index|[
name|index
index|]
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|k
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|familyNames
index|[
name|index
index|]
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|k
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rowCount
operator|<
name|rowCounts
index|[
name|index
index|]
condition|)
block|{
name|rowCount
operator|=
name|rowCounts
index|[
name|index
index|]
expr_stmt|;
block|}
block|}
comment|// get the initial layout (should just be one region)
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
name|m
init|=
name|table
operator|.
name|getRegionsInfo
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Initial regions ("
operator|+
name|m
operator|.
name|size
argument_list|()
operator|+
literal|"): "
operator|+
name|m
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|m
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
comment|// Verify row count
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|int
name|rows
init|=
literal|0
decl_stmt|;
for|for
control|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|Result
name|result
range|:
name|scanner
control|)
block|{
name|rows
operator|++
expr_stmt|;
block|}
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|rowCount
argument_list|,
name|rows
argument_list|)
expr_stmt|;
comment|// Have an outstanding scan going on to make sure we can scan over splits.
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scanner
operator|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
comment|// Scan first row so we are into first region before split happens.
name|scanner
operator|.
name|next
argument_list|()
expr_stmt|;
specifier|final
name|AtomicInteger
name|count
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
literal|"CheckForSplit"
argument_list|)
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
continue|continue;
block|}
comment|// check again    table = new HTable(conf, tableName);
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
name|regions
init|=
literal|null
decl_stmt|;
try|try
block|{
name|regions
operator|=
name|table
operator|.
name|getRegionsInfo
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|regions
operator|==
literal|null
condition|)
continue|continue;
name|count
operator|.
name|set
argument_list|(
name|regions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|.
name|get
argument_list|()
operator|>=
literal|2
condition|)
break|break;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cycle waiting on split"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Split the table
name|this
operator|.
name|admin
operator|.
name|split
argument_list|(
name|tableName
argument_list|,
name|splitPoint
argument_list|)
expr_stmt|;
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
comment|// Verify row count
name|rows
operator|=
literal|1
expr_stmt|;
comment|// We counted one row above.
for|for
control|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|Result
name|result
range|:
name|scanner
control|)
block|{
name|rows
operator|++
expr_stmt|;
if|if
condition|(
name|rows
operator|>
name|rowCount
condition|)
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Scanned more than expected ("
operator|+
name|rowCount
operator|+
literal|")"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|rowCount
argument_list|,
name|rows
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
name|regions
init|=
literal|null
decl_stmt|;
try|try
block|{
name|regions
operator|=
name|table
operator|.
name|getRegionsInfo
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|regions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|HRegionInfo
index|[]
name|r
init|=
name|regions
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|HRegionInfo
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|splitPoint
operator|!=
literal|null
condition|)
block|{
comment|// make sure the split point matches our explicit configuration
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|splitPoint
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|r
index|[
literal|0
index|]
operator|.
name|getEndKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|splitPoint
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|r
index|[
literal|1
index|]
operator|.
name|getStartKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Properly split on "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|splitPoint
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|familyNames
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|int
name|splitKey
init|=
name|Bytes
operator|.
name|toInt
argument_list|(
name|r
index|[
literal|0
index|]
operator|.
name|getEndKey
argument_list|()
argument_list|)
decl_stmt|;
comment|// check if splitKey is based on the largest column family
comment|// in terms of it store size
name|int
name|deltaForLargestFamily
init|=
name|Math
operator|.
name|abs
argument_list|(
name|rowCount
operator|/
literal|2
operator|-
name|splitKey
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|familyNames
operator|.
name|length
condition|;
name|index
operator|++
control|)
block|{
name|int
name|delta
init|=
name|Math
operator|.
name|abs
argument_list|(
name|rowCounts
index|[
name|index
index|]
operator|/
literal|2
operator|-
name|splitKey
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|delta
operator|>=
name|deltaForLargestFamily
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|TEST_UTIL
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * HADOOP-2156    * @throws IOException    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testEmptyHHTableDescriptor
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|admin
operator|.
name|createTable
argument_list|(
operator|new
name|HTableDescriptor
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testInvalidHColumnDescriptor
parameter_list|()
throws|throws
name|IOException
block|{
operator|new
name|HColumnDescriptor
argument_list|(
literal|"/cfamily/name"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|36000
argument_list|)
specifier|public
name|void
name|testEnableDisableAddColumnDeleteColumn
parameter_list|()
throws|throws
name|Exception
block|{
name|ZooKeeperWatcher
name|zkw
init|=
name|HBaseTestingUtility
operator|.
name|getZooKeeperWatcher
argument_list|(
name|TEST_UTIL
argument_list|)
decl_stmt|;
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testMasterAdmin"
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|ZKTable
operator|.
name|isEnabledTable
argument_list|(
name|zkw
argument_list|,
literal|"testMasterAdmin"
argument_list|)
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
try|try
block|{
operator|new
name|HTable
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionOfflineException
name|e
parameter_list|)
block|{
comment|// Expected
block|}
name|this
operator|.
name|admin
operator|.
name|addColumn
argument_list|(
name|tableName
argument_list|,
operator|new
name|HColumnDescriptor
argument_list|(
literal|"col2"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|admin
operator|.
name|enableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|admin
operator|.
name|deleteColumn
argument_list|(
name|tableName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TableNotDisabledException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|this
operator|.
name|admin
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateBadTables
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|msg
init|=
literal|null
decl_stmt|;
try|try
block|{
name|this
operator|.
name|admin
operator|.
name|createTable
argument_list|(
name|HTableDescriptor
operator|.
name|ROOT_TABLEDESC
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|msg
operator|=
name|e
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Unexcepted exception message "
operator|+
name|msg
argument_list|,
name|msg
operator|!=
literal|null
operator|&&
name|msg
operator|.
name|startsWith
argument_list|(
name|IllegalArgumentException
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|msg
operator|.
name|contains
argument_list|(
name|HTableDescriptor
operator|.
name|ROOT_TABLEDESC
operator|.
name|getNameAsString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|msg
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|this
operator|.
name|admin
operator|.
name|createTable
argument_list|(
name|HTableDescriptor
operator|.
name|META_TABLEDESC
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|msg
operator|=
name|e
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Unexcepted exception message "
operator|+
name|msg
argument_list|,
name|msg
operator|!=
literal|null
operator|&&
name|msg
operator|.
name|startsWith
argument_list|(
name|IllegalArgumentException
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|msg
operator|.
name|contains
argument_list|(
name|HTableDescriptor
operator|.
name|META_TABLEDESC
operator|.
name|getNameAsString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now try and do concurrent creation with a bunch of threads.
specifier|final
name|HTableDescriptor
name|threadDesc
init|=
operator|new
name|HTableDescriptor
argument_list|(
literal|"threaded_testCreateBadTables"
argument_list|)
decl_stmt|;
name|threadDesc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|10
decl_stmt|;
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
name|count
index|]
decl_stmt|;
specifier|final
name|AtomicInteger
name|successes
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|failures
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|HBaseAdmin
name|localAdmin
init|=
name|this
operator|.
name|admin
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|localAdmin
operator|.
name|createTable
argument_list|(
name|threadDesc
argument_list|)
expr_stmt|;
name|successes
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TableExistsException
name|e
parameter_list|)
block|{
name|failures
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed threaded create"
operator|+
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
while|while
condition|(
name|threads
index|[
name|i
index|]
operator|.
name|isAlive
argument_list|()
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// continue
block|}
block|}
block|}
comment|// All threads are now dead.  Count up how many tables were created and
comment|// how many failed w/ appropriate exception.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|successes
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|count
operator|-
literal|1
argument_list|,
name|failures
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test for hadoop-1581 'HBASE: Unopenable tablename bug'.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testTableNameClash
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|name
init|=
literal|"testTableNameClash"
decl_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
operator|new
name|HTableDescriptor
argument_list|(
name|name
operator|+
literal|"SOMEUPPERCASE"
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
operator|new
name|HTableDescriptor
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
comment|// Before fix, below would fail throwing a NoServerForRegionException.
operator|new
name|HTable
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|name
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/***    * HMaster.createTable used to be kind of synchronous call    * Thus creating of table with lots of regions can cause RPC timeout    * After the fix to make createTable truly async, RPC timeout shouldn't be an    * issue anymore    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testCreateTableRPCTimeOut
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|name
init|=
literal|"testCreateTableRPCTimeOut"
decl_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_RPC_TIMEOUT_KEY
argument_list|,
literal|1500
argument_list|)
expr_stmt|;
name|int
name|expectedRegions
init|=
literal|100
decl_stmt|;
comment|// Use 80 bit numbers to make sure we aren't limited
name|byte
index|[]
name|startKey
init|=
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
decl_stmt|;
name|byte
index|[]
name|endKey
init|=
block|{
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|}
decl_stmt|;
name|HBaseAdmin
name|hbaseadmin
init|=
operator|new
name|HBaseAdmin
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|hbaseadmin
operator|.
name|createTable
argument_list|(
operator|new
name|HTableDescriptor
argument_list|(
name|name
argument_list|)
argument_list|,
name|startKey
argument_list|,
name|endKey
argument_list|,
name|expectedRegions
argument_list|)
expr_stmt|;
name|hbaseadmin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test read only tables    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testReadOnlyTable
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|name
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testReadOnlyTable"
argument_list|)
decl_stmt|;
name|HTable
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|name
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"somedata"
argument_list|)
decl_stmt|;
comment|// This used to use an empty row... That must have been a bug
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test that user table names can contain '-' and '.' so long as they do not    * start with same. HBASE-771    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testTableNames
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
index|[]
name|illegalNames
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"-bad"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|".bad"
argument_list|)
block|,
name|HConstants
operator|.
name|ROOT_TABLE_NAME
block|,
name|HConstants
operator|.
name|META_TABLE_NAME
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|illegalNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
operator|new
name|HTableDescriptor
argument_list|(
name|illegalNames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Did not detect '"
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|illegalNames
index|[
name|i
index|]
argument_list|)
operator|+
literal|"' as an illegal user table name"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
name|byte
index|[]
name|legalName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"g-oo.d"
argument_list|)
decl_stmt|;
try|try
block|{
operator|new
name|HTableDescriptor
argument_list|(
name|legalName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Legal user table name: '"
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|legalName
argument_list|)
operator|+
literal|"' caused IllegalArgumentException: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * For HADOOP-2579    * @throws IOException    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|TableExistsException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testTableExistsExceptionWithATable
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|name
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testTableExistsExceptionWithATable"
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|name
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|name
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
block|}
comment|/**    * Can't disable a table if the table isn't in enabled state    * @throws IOException    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|TableNotEnabledException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testTableNotEnabledExceptionWithATable
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|name
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testTableNotEnabledExceptionWithATable"
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|name
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|this
operator|.
name|admin
operator|.
name|disableTable
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|admin
operator|.
name|disableTable
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**    * Can't enable a table if the table isn't in disabled state    * @throws IOException    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|TableNotDisabledException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testTableNotDisabledExceptionWithATable
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|name
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testTableNotDisabledExceptionWithATable"
argument_list|)
decl_stmt|;
name|HTable
name|t
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|name
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
decl_stmt|;
try|try
block|{
name|this
operator|.
name|admin
operator|.
name|enableTable
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * For HADOOP-2579    * @throws IOException    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|TableNotFoundException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testTableNotFoundExceptionWithoutAnyTables
parameter_list|()
throws|throws
name|IOException
block|{
operator|new
name|HTable
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|"testTableNotFoundExceptionWithoutAnyTables"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testShouldCloseTheRegionBasedOnTheEncodedRegionName
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|TABLENAME
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"TestHBACloseRegion"
argument_list|)
decl_stmt|;
name|createTableWithDefaultConf
argument_list|(
name|TABLENAME
argument_list|)
expr_stmt|;
name|HRegionInfo
name|info
init|=
literal|null
decl_stmt|;
name|HRegionServer
name|rs
init|=
name|TEST_UTIL
operator|.
name|getRSForFirstRegionInTable
argument_list|(
name|TABLENAME
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|onlineRegions
init|=
name|rs
operator|.
name|getOnlineRegions
argument_list|()
decl_stmt|;
for|for
control|(
name|HRegionInfo
name|regionInfo
range|:
name|onlineRegions
control|)
block|{
if|if
condition|(
operator|!
name|regionInfo
operator|.
name|isMetaTable
argument_list|()
condition|)
block|{
name|info
operator|=
name|regionInfo
expr_stmt|;
name|admin
operator|.
name|closeRegionWithEncodedRegionName
argument_list|(
name|regionInfo
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|rs
operator|.
name|getServerName
argument_list|()
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|onlineRegions
operator|=
name|rs
operator|.
name|getOnlineRegions
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"The region should not be present in online regions list."
argument_list|,
name|onlineRegions
operator|.
name|contains
argument_list|(
name|info
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCloseRegionIfInvalidRegionNameIsPassed
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|TABLENAME
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"TestHBACloseRegion1"
argument_list|)
decl_stmt|;
name|createTableWithDefaultConf
argument_list|(
name|TABLENAME
argument_list|)
expr_stmt|;
name|HRegionInfo
name|info
init|=
literal|null
decl_stmt|;
name|HRegionServer
name|rs
init|=
name|TEST_UTIL
operator|.
name|getRSForFirstRegionInTable
argument_list|(
name|TABLENAME
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|onlineRegions
init|=
name|rs
operator|.
name|getOnlineRegions
argument_list|()
decl_stmt|;
for|for
control|(
name|HRegionInfo
name|regionInfo
range|:
name|onlineRegions
control|)
block|{
if|if
condition|(
operator|!
name|regionInfo
operator|.
name|isMetaTable
argument_list|()
condition|)
block|{
if|if
condition|(
name|regionInfo
operator|.
name|getRegionNameAsString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"TestHBACloseRegion1"
argument_list|)
condition|)
block|{
name|info
operator|=
name|regionInfo
expr_stmt|;
name|admin
operator|.
name|closeRegionWithEncodedRegionName
argument_list|(
literal|"sample"
argument_list|,
name|rs
operator|.
name|getServerName
argument_list|()
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|onlineRegions
operator|=
name|rs
operator|.
name|getOnlineRegions
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The region should be present in online regions list."
argument_list|,
name|onlineRegions
operator|.
name|contains
argument_list|(
name|info
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCloseRegionThatFetchesTheHRIFromMeta
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|TABLENAME
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"TestHBACloseRegion2"
argument_list|)
decl_stmt|;
name|createTableWithDefaultConf
argument_list|(
name|TABLENAME
argument_list|)
expr_stmt|;
name|HRegionInfo
name|info
init|=
literal|null
decl_stmt|;
name|HRegionServer
name|rs
init|=
name|TEST_UTIL
operator|.
name|getRSForFirstRegionInTable
argument_list|(
name|TABLENAME
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|onlineRegions
init|=
name|rs
operator|.
name|getOnlineRegions
argument_list|()
decl_stmt|;
for|for
control|(
name|HRegionInfo
name|regionInfo
range|:
name|onlineRegions
control|)
block|{
if|if
condition|(
operator|!
name|regionInfo
operator|.
name|isMetaTable
argument_list|()
condition|)
block|{
if|if
condition|(
name|regionInfo
operator|.
name|getRegionNameAsString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"TestHBACloseRegion2"
argument_list|)
condition|)
block|{
name|info
operator|=
name|regionInfo
expr_stmt|;
name|admin
operator|.
name|closeRegion
argument_list|(
name|regionInfo
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|,
name|rs
operator|.
name|getServerName
argument_list|()
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|boolean
name|isInList
init|=
name|rs
operator|.
name|getOnlineRegions
argument_list|()
operator|.
name|contains
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|long
name|timeout
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|2000
decl_stmt|;
while|while
condition|(
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|timeout
operator|)
operator|&&
operator|(
name|isInList
operator|)
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|isInList
operator|=
name|rs
operator|.
name|getOnlineRegions
argument_list|()
operator|.
name|contains
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"The region should not be present in online regions list."
argument_list|,
name|isInList
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCloseRegionWhenServerNameIsNull
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|TABLENAME
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"TestHBACloseRegion3"
argument_list|)
decl_stmt|;
name|createTableWithDefaultConf
argument_list|(
name|TABLENAME
argument_list|)
expr_stmt|;
name|HRegionServer
name|rs
init|=
name|TEST_UTIL
operator|.
name|getRSForFirstRegionInTable
argument_list|(
name|TABLENAME
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|onlineRegions
init|=
name|rs
operator|.
name|getOnlineRegions
argument_list|()
decl_stmt|;
for|for
control|(
name|HRegionInfo
name|regionInfo
range|:
name|onlineRegions
control|)
block|{
if|if
condition|(
operator|!
name|regionInfo
operator|.
name|isMetaTable
argument_list|()
condition|)
block|{
if|if
condition|(
name|regionInfo
operator|.
name|getRegionNameAsString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"TestHBACloseRegion3"
argument_list|)
condition|)
block|{
name|admin
operator|.
name|closeRegionWithEncodedRegionName
argument_list|(
name|regionInfo
operator|.
name|getEncodedName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|fail
argument_list|(
literal|"The test should throw exception if the servername passed is null."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{     }
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCloseRegionWhenServerNameIsEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|TABLENAME
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"TestHBACloseRegionWhenServerNameIsEmpty"
argument_list|)
decl_stmt|;
name|createTableWithDefaultConf
argument_list|(
name|TABLENAME
argument_list|)
expr_stmt|;
name|HRegionServer
name|rs
init|=
name|TEST_UTIL
operator|.
name|getRSForFirstRegionInTable
argument_list|(
name|TABLENAME
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|onlineRegions
init|=
name|rs
operator|.
name|getOnlineRegions
argument_list|()
decl_stmt|;
for|for
control|(
name|HRegionInfo
name|regionInfo
range|:
name|onlineRegions
control|)
block|{
if|if
condition|(
operator|!
name|regionInfo
operator|.
name|isMetaTable
argument_list|()
condition|)
block|{
if|if
condition|(
name|regionInfo
operator|.
name|getRegionNameAsString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"TestHBACloseRegionWhenServerNameIsEmpty"
argument_list|)
condition|)
block|{
name|admin
operator|.
name|closeRegionWithEncodedRegionName
argument_list|(
name|regionInfo
operator|.
name|getEncodedName
argument_list|()
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|fail
argument_list|(
literal|"The test should throw exception if the servername passed is empty."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{     }
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCloseRegionWhenEncodedRegionNameIsNotGiven
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|TABLENAME
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"TestHBACloseRegion4"
argument_list|)
decl_stmt|;
name|createTableWithDefaultConf
argument_list|(
name|TABLENAME
argument_list|)
expr_stmt|;
name|HRegionInfo
name|info
init|=
literal|null
decl_stmt|;
name|HRegionServer
name|rs
init|=
name|TEST_UTIL
operator|.
name|getRSForFirstRegionInTable
argument_list|(
name|TABLENAME
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|onlineRegions
init|=
name|rs
operator|.
name|getOnlineRegions
argument_list|()
decl_stmt|;
for|for
control|(
name|HRegionInfo
name|regionInfo
range|:
name|onlineRegions
control|)
block|{
if|if
condition|(
operator|!
name|regionInfo
operator|.
name|isMetaTable
argument_list|()
condition|)
block|{
if|if
condition|(
name|regionInfo
operator|.
name|getRegionNameAsString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"TestHBACloseRegion4"
argument_list|)
condition|)
block|{
name|info
operator|=
name|regionInfo
expr_stmt|;
name|admin
operator|.
name|closeRegionWithEncodedRegionName
argument_list|(
name|regionInfo
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|,
name|rs
operator|.
name|getServerName
argument_list|()
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|onlineRegions
operator|=
name|rs
operator|.
name|getOnlineRegions
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The region should be present in online regions list."
argument_list|,
name|onlineRegions
operator|.
name|contains
argument_list|(
name|info
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|HBaseAdmin
name|createTable
parameter_list|(
name|byte
index|[]
name|TABLENAME
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|config
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|HBaseAdmin
name|admin
init|=
operator|new
name|HBaseAdmin
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TABLENAME
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|htd
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|admin
return|;
block|}
specifier|private
name|void
name|createTableWithDefaultConf
parameter_list|(
name|byte
index|[]
name|TABLENAME
parameter_list|)
throws|throws
name|IOException
block|{
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TABLENAME
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|htd
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * For HBASE-2556    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testGetTableRegions
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testGetTableRegions"
argument_list|)
decl_stmt|;
name|int
name|expectedRegions
init|=
literal|10
decl_stmt|;
comment|// Use 80 bit numbers to make sure we aren't limited
name|byte
index|[]
name|startKey
init|=
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
decl_stmt|;
name|byte
index|[]
name|endKey
init|=
block|{
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|}
decl_stmt|;
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|,
name|startKey
argument_list|,
name|endKey
argument_list|,
name|expectedRegions
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|RegionInfos
init|=
name|admin
operator|.
name|getTableRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Tried to create "
operator|+
name|expectedRegions
operator|+
literal|" regions "
operator|+
literal|"but only found "
operator|+
name|RegionInfos
operator|.
name|size
argument_list|()
argument_list|,
name|expectedRegions
argument_list|,
name|RegionInfos
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHLogRollWriting
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpforLogRolling
argument_list|()
expr_stmt|;
name|String
name|className
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|StringBuilder
name|v
init|=
operator|new
name|StringBuilder
argument_list|(
name|className
argument_list|)
decl_stmt|;
while|while
condition|(
name|v
operator|.
name|length
argument_list|()
operator|<
literal|1000
condition|)
block|{
name|v
operator|.
name|append
argument_list|(
name|className
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|v
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|HRegionServer
name|regionServer
init|=
name|startAndWriteData
argument_list|(
literal|"TestLogRolling"
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"after writing there are "
operator|+
name|HLogUtilsForTests
operator|.
name|getNumLogFiles
argument_list|(
name|regionServer
operator|.
name|getWAL
argument_list|()
argument_list|)
operator|+
literal|" log files"
argument_list|)
expr_stmt|;
comment|// flush all regions
name|List
argument_list|<
name|HRegion
argument_list|>
name|regions
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegion
argument_list|>
argument_list|(
name|regionServer
operator|.
name|getOnlineRegionsLocalContext
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|HRegion
name|r
range|:
name|regions
control|)
block|{
name|r
operator|.
name|flushcache
argument_list|()
expr_stmt|;
block|}
name|admin
operator|.
name|rollHLogWriter
argument_list|(
name|regionServer
operator|.
name|getServerName
argument_list|()
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|count
init|=
name|HLogUtilsForTests
operator|.
name|getNumLogFiles
argument_list|(
name|regionServer
operator|.
name|getWAL
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"after flushing all regions and rolling logs there are "
operator|+
name|count
operator|+
literal|" log files"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
literal|"actual count: "
operator|+
name|count
operator|)
argument_list|,
name|count
operator|<=
literal|2
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setUpforLogRolling
parameter_list|()
block|{
comment|// Force a region split after every 768KB
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setLong
argument_list|(
name|HConstants
operator|.
name|HREGION_MAX_FILESIZE
argument_list|,
literal|768L
operator|*
literal|1024L
argument_list|)
expr_stmt|;
comment|// We roll the log after every 32 writes
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.regionserver.maxlogentries"
argument_list|,
literal|32
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.regionserver.logroll.errors.tolerated"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"ipc.ping.interval"
argument_list|,
literal|10
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"ipc.socket.timeout"
argument_list|,
literal|10
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.rpc.timeout"
argument_list|,
literal|10
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// For less frequently updated regions flush after every 2 flushes
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.hregion.memstore.optionalflushcount"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// We flush the cache after every 8192 bytes
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HREGION_MEMSTORE_FLUSH_SIZE
argument_list|,
literal|8192
argument_list|)
expr_stmt|;
comment|// Increase the amount of time between client retries
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setLong
argument_list|(
literal|"hbase.client.pause"
argument_list|,
literal|10
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// Reduce thread wake frequency so that other threads can get
comment|// a chance to run.
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|THREAD_WAKE_FREQUENCY
argument_list|,
literal|2
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|/**** configuration for testLogRollOnDatanodeDeath ****/
comment|// make sure log.hflush() calls syncFs() to open a pipeline
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
literal|"dfs.support.append"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// lower the namenode& datanode heartbeat so the namenode
comment|// quickly detects datanode failures
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"heartbeat.recheck.interval"
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"dfs.heartbeat.interval"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// the namenode might still try to choose the recently-dead datanode
comment|// for a pipeline, so try to a new pipeline multiple times
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"dfs.client.block.write.retries"
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.regionserver.hlog.tolerable.lowreplication"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.regionserver.hlog.lowreplication.rolllimit"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
specifier|private
name|HRegionServer
name|startAndWriteData
parameter_list|(
name|String
name|tableName
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|IOException
block|{
comment|// When the META table can be opened, the region servers are running
operator|new
name|HTable
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|HConstants
operator|.
name|META_TABLE_NAME
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|HRegionServer
name|regionServer
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegionServerThreads
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionServer
argument_list|()
decl_stmt|;
comment|// Create the test table and open it
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|regionServer
operator|=
name|TEST_UTIL
operator|.
name|getRSForFirstRegionInTable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|256
condition|;
name|i
operator|++
control|)
block|{
comment|// 256 writes should cause 8 log rolls
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
operator|+
name|String
operator|.
name|format
argument_list|(
literal|"%1$04d"
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
literal|null
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|32
operator|==
literal|0
condition|)
block|{
comment|// After every 32 writes sleep to let the log roller run
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// continue
block|}
block|}
block|}
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|regionServer
return|;
block|}
comment|/**    * HBASE-4417 checkHBaseAvailable() doesn't close zk connections    */
annotation|@
name|Test
specifier|public
name|void
name|testCheckHBaseAvailableClosesConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|int
name|initialCount
init|=
name|HConnectionTestingUtility
operator|.
name|getConnectionCount
argument_list|()
decl_stmt|;
name|HBaseAdmin
operator|.
name|checkHBaseAvailable
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|int
name|finalCount
init|=
name|HConnectionTestingUtility
operator|.
name|getConnectionCount
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|initialCount
argument_list|,
name|finalCount
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check that we have an exception if the cluster is not there.    */
annotation|@
name|Test
specifier|public
name|void
name|testCheckHBaseAvailableWithoutCluster
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
comment|// Change the ZK address to go to something not used.
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.zookeeper.quorum"
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.zookeeper.quorum"
argument_list|,
literal|9999
argument_list|)
operator|+
literal|10
argument_list|)
expr_stmt|;
name|int
name|initialCount
init|=
name|HConnectionTestingUtility
operator|.
name|getConnectionCount
argument_list|()
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
name|HBaseAdmin
operator|.
name|checkHBaseAvailable
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MasterNotRunningException
name|ignored
parameter_list|)
block|{     }
catch|catch
parameter_list|(
name|ZooKeeperConnectionException
name|ignored
parameter_list|)
block|{     }
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|int
name|finalCount
init|=
name|HConnectionTestingUtility
operator|.
name|getConnectionCount
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|initialCount
argument_list|,
name|finalCount
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"It took "
operator|+
operator|(
name|end
operator|-
name|start
operator|)
operator|+
literal|" ms to find out that"
operator|+
literal|" HBase was not available"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Rule
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ResourceCheckerJUnitRule
name|cu
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ResourceCheckerJUnitRule
argument_list|()
decl_stmt|;
block|}
end_class

end_unit

