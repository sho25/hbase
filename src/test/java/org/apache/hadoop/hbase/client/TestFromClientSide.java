begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2009 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SynchronousQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
operator|.
name|DaemonThreadFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|metrics
operator|.
name|ScanMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|BinaryComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|CompareFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|CompareFilter
operator|.
name|CompareOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FilterList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|KeyOnlyFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|PrefixFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|QualifierFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|RegexStringComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|RowFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|SingleColumnValueFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|WhileMatchFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|BlockCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|CacheConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataInputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * Run tests that use the HBase clients; {@link HTable} and {@link HTablePool}.  * Sets up the HBase mini cluster once at start and runs through all client tests.  * Each creates a table named for the method and does its stuff against that.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|LargeTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestFromClientSide
block|{
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|ROW
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRow"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testFamily"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|QUALIFIER
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifier"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|VALUE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testValue"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|int
name|SLAVES
init|=
literal|3
decl_stmt|;
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
comment|// We need more than one region server in this test
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
name|SLAVES
argument_list|)
expr_stmt|;
block|}
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Nothing to do.
block|}
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Nothing to do.
block|}
comment|/**    * Basic client side validation of HBASE-4536    */
annotation|@
name|Test
specifier|public
name|void
name|testKeepDeletedCells
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|byte
index|[]
name|TABLENAME
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testKeepDeletesCells"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|C0
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c0"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|T1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"T1"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|T2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"T2"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|T3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"T3"
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILY
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_MIN_VERSIONS
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_VERSIONS
argument_list|,
literal|true
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_COMPRESSION
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_IN_MEMORY
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_BLOCKCACHE
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_BLOCKSIZE
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_TTL
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_BLOOMFILTER
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_REPLICATION_SCOPE
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TABLENAME
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|Configuration
name|c
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|HTable
name|h
init|=
operator|new
name|HTable
argument_list|(
name|c
argument_list|,
name|TABLENAME
argument_list|)
decl_stmt|;
name|long
name|ts
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|T1
argument_list|,
name|ts
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|C0
argument_list|,
name|T1
argument_list|)
expr_stmt|;
name|h
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|T1
argument_list|,
name|ts
operator|+
literal|2
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|C0
argument_list|,
name|T2
argument_list|)
expr_stmt|;
name|h
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|T1
argument_list|,
name|ts
operator|+
literal|4
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|C0
argument_list|,
name|T3
argument_list|)
expr_stmt|;
name|h
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|T1
argument_list|,
name|ts
operator|+
literal|2
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|h
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|d
operator|=
operator|new
name|Delete
argument_list|(
name|T1
argument_list|,
name|ts
operator|+
literal|3
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|d
operator|.
name|deleteColumns
argument_list|(
name|FAMILY
argument_list|,
name|C0
argument_list|,
name|ts
operator|+
literal|3
argument_list|)
expr_stmt|;
name|h
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|T1
argument_list|)
decl_stmt|;
comment|// does *not* include the delete
name|g
operator|.
name|setTimeRange
argument_list|(
literal|0
argument_list|,
name|ts
operator|+
literal|3
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|h
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|T2
argument_list|,
name|r
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|C0
argument_list|)
argument_list|)
expr_stmt|;
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|(
name|T1
argument_list|)
decl_stmt|;
name|s
operator|.
name|setTimeRange
argument_list|(
literal|0
argument_list|,
name|ts
operator|+
literal|3
argument_list|)
expr_stmt|;
name|s
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|h
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|KeyValue
index|[]
name|kvs
init|=
name|scanner
operator|.
name|next
argument_list|()
operator|.
name|raw
argument_list|()
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|T2
argument_list|,
name|kvs
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|T1
argument_list|,
name|kvs
index|[
literal|1
index|]
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|(
name|T1
argument_list|)
expr_stmt|;
name|s
operator|.
name|setRaw
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|s
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
name|scanner
operator|=
name|h
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|kvs
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|.
name|raw
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|kvs
index|[
literal|0
index|]
operator|.
name|isDeleteFamily
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|T3
argument_list|,
name|kvs
index|[
literal|1
index|]
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|kvs
index|[
literal|2
index|]
operator|.
name|isDelete
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|T2
argument_list|,
name|kvs
index|[
literal|3
index|]
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|T1
argument_list|,
name|kvs
index|[
literal|4
index|]
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|h
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * HBASE-2468 use case 1 and 2: region info de/serialization    */
annotation|@
name|Test
specifier|public
name|void
name|testRegionCacheDeSerialization
parameter_list|()
throws|throws
name|Exception
block|{
comment|// 1. test serialization.
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testRegionCacheDeSerialization"
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|TABLENAME
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testCachePrewarm2"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLENAME
argument_list|,
name|FAMILY
argument_list|)
expr_stmt|;
comment|// Set up test table:
comment|// Create table:
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|TABLENAME
argument_list|)
decl_stmt|;
comment|// Create multiple regions for this table
name|TEST_UTIL
operator|.
name|createMultiRegions
argument_list|(
name|table
argument_list|,
name|FAMILY
argument_list|)
expr_stmt|;
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
decl_stmt|;
while|while
condition|(
name|scanner
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
continue|continue;
name|Path
name|tempPath
init|=
operator|new
name|Path
argument_list|(
name|TEST_UTIL
operator|.
name|getDataTestDir
argument_list|()
argument_list|,
literal|"regions.dat"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|tempFileName
init|=
name|tempPath
operator|.
name|toString
argument_list|()
decl_stmt|;
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
name|tempFileName
argument_list|)
decl_stmt|;
name|DataOutputStream
name|dos
init|=
operator|new
name|DataOutputStream
argument_list|(
name|fos
argument_list|)
decl_stmt|;
comment|// serialize the region info and output to a local file.
name|table
operator|.
name|serializeRegionInfo
argument_list|(
name|dos
argument_list|)
expr_stmt|;
name|dos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|dos
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// read a local file and deserialize the region info from it.
name|FileInputStream
name|fis
init|=
operator|new
name|FileInputStream
argument_list|(
name|tempFileName
argument_list|)
decl_stmt|;
name|DataInputStream
name|dis
init|=
operator|new
name|DataInputStream
argument_list|(
name|fis
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
name|deserRegions
init|=
name|table
operator|.
name|deserializeRegionInfo
argument_list|(
name|dis
argument_list|)
decl_stmt|;
name|dis
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// regions obtained from meta scanner.
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
name|loadedRegions
init|=
name|table
operator|.
name|getRegionsInfo
argument_list|()
decl_stmt|;
comment|// set the deserialized regions to the global cache.
name|table
operator|.
name|getConnection
argument_list|()
operator|.
name|clearRegionCache
argument_list|()
expr_stmt|;
name|table
operator|.
name|getConnection
argument_list|()
operator|.
name|prewarmRegionCache
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|deserRegions
argument_list|)
expr_stmt|;
comment|// verify whether the 2 maps are identical or not.
name|assertEquals
argument_list|(
literal|"Number of cached region is incorrect"
argument_list|,
name|HConnectionManager
operator|.
name|getCachedRegionCount
argument_list|(
name|conf
argument_list|,
name|TABLENAME
argument_list|)
argument_list|,
name|loadedRegions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify each region is prefetched or not.
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
name|e
range|:
name|loadedRegions
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|HRegionInfo
name|hri
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|HConnectionManager
operator|.
name|isRegionCached
argument_list|(
name|conf
argument_list|,
name|hri
operator|.
name|getTableName
argument_list|()
argument_list|,
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// delete the temp file
name|File
name|f
init|=
operator|new
name|java
operator|.
name|io
operator|.
name|File
argument_list|(
name|tempFileName
argument_list|)
decl_stmt|;
name|f
operator|.
name|delete
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finishing testRegionCacheDeSerialization"
argument_list|)
expr_stmt|;
block|}
comment|/**    * HBASE-2468 use case 3:    */
annotation|@
name|Test
specifier|public
name|void
name|testRegionCachePreWarm
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testRegionCachePreWarm"
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|TABLENAME
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testCachePrewarm"
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
comment|// Set up test table:
comment|// Create table:
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLENAME
argument_list|,
name|FAMILY
argument_list|)
expr_stmt|;
comment|// disable region cache for the table.
name|HTable
operator|.
name|setRegionCachePrefetch
argument_list|(
name|conf
argument_list|,
name|TABLENAME
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"The table is disabled for region cache prefetch"
argument_list|,
name|HTable
operator|.
name|getRegionCachePrefetch
argument_list|(
name|conf
argument_list|,
name|TABLENAME
argument_list|)
argument_list|)
expr_stmt|;
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|TABLENAME
argument_list|)
decl_stmt|;
comment|// create many regions for the table.
name|TEST_UTIL
operator|.
name|createMultiRegions
argument_list|(
name|table
argument_list|,
name|FAMILY
argument_list|)
expr_stmt|;
comment|// This count effectively waits until the regions have been
comment|// fully assigned
name|TEST_UTIL
operator|.
name|countRows
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|table
operator|.
name|getConnection
argument_list|()
operator|.
name|clearRegionCache
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Clearing cache should have 0 cached "
argument_list|,
literal|0
argument_list|,
name|HConnectionManager
operator|.
name|getCachedRegionCount
argument_list|(
name|conf
argument_list|,
name|TABLENAME
argument_list|)
argument_list|)
expr_stmt|;
comment|// A Get is suppose to do a region lookup request
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaa"
argument_list|)
argument_list|)
decl_stmt|;
name|table
operator|.
name|get
argument_list|(
name|g
argument_list|)
expr_stmt|;
comment|// only one region should be cached if the cache prefetch is disabled.
name|assertEquals
argument_list|(
literal|"Number of cached region is incorrect "
argument_list|,
literal|1
argument_list|,
name|HConnectionManager
operator|.
name|getCachedRegionCount
argument_list|(
name|conf
argument_list|,
name|TABLENAME
argument_list|)
argument_list|)
expr_stmt|;
comment|// now we enable cached prefetch.
name|HTable
operator|.
name|setRegionCachePrefetch
argument_list|(
name|conf
argument_list|,
name|TABLENAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The table is enabled for region cache prefetch"
argument_list|,
name|HTable
operator|.
name|getRegionCachePrefetch
argument_list|(
name|conf
argument_list|,
name|TABLENAME
argument_list|)
argument_list|)
expr_stmt|;
name|HTable
operator|.
name|setRegionCachePrefetch
argument_list|(
name|conf
argument_list|,
name|TABLENAME
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"The table is disabled for region cache prefetch"
argument_list|,
name|HTable
operator|.
name|getRegionCachePrefetch
argument_list|(
name|conf
argument_list|,
name|TABLENAME
argument_list|)
argument_list|)
expr_stmt|;
name|HTable
operator|.
name|setRegionCachePrefetch
argument_list|(
name|conf
argument_list|,
name|TABLENAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The table is enabled for region cache prefetch"
argument_list|,
name|HTable
operator|.
name|getRegionCachePrefetch
argument_list|(
name|conf
argument_list|,
name|TABLENAME
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|getConnection
argument_list|()
operator|.
name|clearRegionCache
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Number of cached region is incorrect "
argument_list|,
literal|0
argument_list|,
name|HConnectionManager
operator|.
name|getCachedRegionCount
argument_list|(
name|conf
argument_list|,
name|TABLENAME
argument_list|)
argument_list|)
expr_stmt|;
comment|// if there is a cache miss, some additional regions should be prefetched.
name|Get
name|g2
init|=
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"bbb"
argument_list|)
argument_list|)
decl_stmt|;
name|table
operator|.
name|get
argument_list|(
name|g2
argument_list|)
expr_stmt|;
comment|// Get the configured number of cache read-ahead regions.
name|int
name|prefetchRegionNumber
init|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.client.prefetch.limit"
argument_list|,
literal|10
argument_list|)
decl_stmt|;
comment|// the total number of cached regions == region('aaa") + prefeched regions.
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing how many regions cached"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Number of cached region is incorrect "
argument_list|,
name|prefetchRegionNumber
argument_list|,
name|HConnectionManager
operator|.
name|getCachedRegionCount
argument_list|(
name|conf
argument_list|,
name|TABLENAME
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|getConnection
argument_list|()
operator|.
name|clearRegionCache
argument_list|()
expr_stmt|;
name|Get
name|g3
init|=
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
decl_stmt|;
name|table
operator|.
name|get
argument_list|(
name|g3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Number of cached region is incorrect "
argument_list|,
name|prefetchRegionNumber
argument_list|,
name|HConnectionManager
operator|.
name|getCachedRegionCount
argument_list|(
name|conf
argument_list|,
name|TABLENAME
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finishing testRegionCachePreWarm"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verifies that getConfiguration returns the same Configuration object used    * to create the HTable instance.    */
annotation|@
name|Test
specifier|public
name|void
name|testGetConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testGetConfiguration"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|FAMILIES
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"foo"
argument_list|)
block|}
decl_stmt|;
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|HTable
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLE
argument_list|,
name|FAMILIES
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|conf
argument_list|,
name|table
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test from client side of an involved filter against a multi family that    * involves deletes.    *    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testWeirdCacheBehaviour
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testWeirdCacheBehaviour"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|FAMILIES
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-blob"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-type"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-date"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-tags"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-group"
argument_list|)
block|}
decl_stmt|;
name|HTable
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLE
argument_list|,
name|FAMILIES
argument_list|)
decl_stmt|;
name|String
name|value
init|=
literal|"this is the value"
decl_stmt|;
name|String
name|value2
init|=
literal|"this is some other value"
decl_stmt|;
name|String
name|keyPrefix1
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|keyPrefix2
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|keyPrefix3
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|putRows
argument_list|(
name|ht
argument_list|,
literal|3
argument_list|,
name|value
argument_list|,
name|keyPrefix1
argument_list|)
expr_stmt|;
name|putRows
argument_list|(
name|ht
argument_list|,
literal|3
argument_list|,
name|value
argument_list|,
name|keyPrefix2
argument_list|)
expr_stmt|;
name|putRows
argument_list|(
name|ht
argument_list|,
literal|3
argument_list|,
name|value
argument_list|,
name|keyPrefix3
argument_list|)
expr_stmt|;
name|ht
operator|.
name|flushCommits
argument_list|()
expr_stmt|;
name|putRows
argument_list|(
name|ht
argument_list|,
literal|3
argument_list|,
name|value2
argument_list|,
name|keyPrefix1
argument_list|)
expr_stmt|;
name|putRows
argument_list|(
name|ht
argument_list|,
literal|3
argument_list|,
name|value2
argument_list|,
name|keyPrefix2
argument_list|)
expr_stmt|;
name|putRows
argument_list|(
name|ht
argument_list|,
literal|3
argument_list|,
name|value2
argument_list|,
name|keyPrefix3
argument_list|)
expr_stmt|;
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|TABLE
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Checking values for key: "
operator|+
name|keyPrefix1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Got back incorrect number of rows from scan"
argument_list|,
literal|3
argument_list|,
name|getNumberOfRows
argument_list|(
name|keyPrefix1
argument_list|,
name|value2
argument_list|,
name|table
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Checking values for key: "
operator|+
name|keyPrefix2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Got back incorrect number of rows from scan"
argument_list|,
literal|3
argument_list|,
name|getNumberOfRows
argument_list|(
name|keyPrefix2
argument_list|,
name|value2
argument_list|,
name|table
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Checking values for key: "
operator|+
name|keyPrefix3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Got back incorrect number of rows from scan"
argument_list|,
literal|3
argument_list|,
name|getNumberOfRows
argument_list|(
name|keyPrefix3
argument_list|,
name|value2
argument_list|,
name|table
argument_list|)
argument_list|)
expr_stmt|;
name|deleteColumns
argument_list|(
name|ht
argument_list|,
name|value2
argument_list|,
name|keyPrefix1
argument_list|)
expr_stmt|;
name|deleteColumns
argument_list|(
name|ht
argument_list|,
name|value2
argument_list|,
name|keyPrefix2
argument_list|)
expr_stmt|;
name|deleteColumns
argument_list|(
name|ht
argument_list|,
name|value2
argument_list|,
name|keyPrefix3
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Starting important checks....."
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Got back incorrect number of rows from scan: "
operator|+
name|keyPrefix1
argument_list|,
literal|0
argument_list|,
name|getNumberOfRows
argument_list|(
name|keyPrefix1
argument_list|,
name|value2
argument_list|,
name|table
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Got back incorrect number of rows from scan: "
operator|+
name|keyPrefix2
argument_list|,
literal|0
argument_list|,
name|getNumberOfRows
argument_list|(
name|keyPrefix2
argument_list|,
name|value2
argument_list|,
name|table
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Got back incorrect number of rows from scan: "
operator|+
name|keyPrefix3
argument_list|,
literal|0
argument_list|,
name|getNumberOfRows
argument_list|(
name|keyPrefix3
argument_list|,
name|value2
argument_list|,
name|table
argument_list|)
argument_list|)
expr_stmt|;
name|ht
operator|.
name|setScannerCaching
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Got back incorrect number of rows from scan"
argument_list|,
literal|0
argument_list|,
name|getNumberOfRows
argument_list|(
name|keyPrefix1
argument_list|,
name|value2
argument_list|,
name|table
argument_list|)
argument_list|)
expr_stmt|;
name|ht
operator|.
name|setScannerCaching
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Got back incorrect number of rows from scan"
argument_list|,
literal|0
argument_list|,
name|getNumberOfRows
argument_list|(
name|keyPrefix2
argument_list|,
name|value2
argument_list|,
name|table
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|deleteColumns
parameter_list|(
name|HTable
name|ht
parameter_list|,
name|String
name|value
parameter_list|,
name|String
name|keyPrefix
parameter_list|)
throws|throws
name|IOException
block|{
name|ResultScanner
name|scanner
init|=
name|buildScanner
argument_list|(
name|keyPrefix
argument_list|,
name|value
argument_list|,
name|ht
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Result
argument_list|>
name|it
init|=
name|scanner
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Result
name|result
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
name|delete
operator|.
name|deleteColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-tags"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual2"
argument_list|)
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Did not perform correct number of deletes"
argument_list|,
literal|3
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
specifier|private
name|int
name|getNumberOfRows
parameter_list|(
name|String
name|keyPrefix
parameter_list|,
name|String
name|value
parameter_list|,
name|HTable
name|ht
parameter_list|)
throws|throws
name|Exception
block|{
name|ResultScanner
name|resultScanner
init|=
name|buildScanner
argument_list|(
name|keyPrefix
argument_list|,
name|value
argument_list|,
name|ht
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Result
argument_list|>
name|scanner
init|=
name|resultScanner
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|numberOfResults
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|scanner
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Result
name|result
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Got back key: "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
name|result
operator|.
name|raw
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"kv="
operator|+
name|kv
operator|.
name|toString
argument_list|()
operator|+
literal|", "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|kv
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|numberOfResults
operator|++
expr_stmt|;
block|}
return|return
name|numberOfResults
return|;
block|}
specifier|private
name|ResultScanner
name|buildScanner
parameter_list|(
name|String
name|keyPrefix
parameter_list|,
name|String
name|value
parameter_list|,
name|HTable
name|ht
parameter_list|)
throws|throws
name|IOException
block|{
comment|// OurFilterList allFilters = new OurFilterList();
name|FilterList
name|allFilters
init|=
operator|new
name|FilterList
argument_list|(
comment|/* FilterList.Operator.MUST_PASS_ALL */
argument_list|)
decl_stmt|;
name|allFilters
operator|.
name|addFilter
argument_list|(
operator|new
name|PrefixFilter
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|keyPrefix
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|SingleColumnValueFilter
name|filter
init|=
operator|new
name|SingleColumnValueFilter
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-tags"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual2"
argument_list|)
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|value
argument_list|)
argument_list|)
decl_stmt|;
name|filter
operator|.
name|setFilterIfMissing
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|allFilters
operator|.
name|addFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
comment|// allFilters.addFilter(new
comment|// RowExcludingSingleColumnValueFilter(Bytes.toBytes("trans-tags"),
comment|// Bytes.toBytes("qual2"), CompareOp.EQUAL, Bytes.toBytes(value)));
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-blob"
argument_list|)
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-type"
argument_list|)
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-date"
argument_list|)
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-tags"
argument_list|)
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-group"
argument_list|)
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
name|allFilters
argument_list|)
expr_stmt|;
return|return
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
return|;
block|}
specifier|private
name|void
name|putRows
parameter_list|(
name|HTable
name|ht
parameter_list|,
name|int
name|numRows
parameter_list|,
name|String
name|value
parameter_list|,
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRows
condition|;
name|i
operator|++
control|)
block|{
name|String
name|row
init|=
name|key
operator|+
literal|"_"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Saving row: %s, with value %s"
argument_list|,
name|row
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|setWriteToWAL
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-blob"
argument_list|)
argument_list|,
literal|null
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value for blob"
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-type"
argument_list|)
argument_list|,
literal|null
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"statement"
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-date"
argument_list|)
argument_list|,
literal|null
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"20090921010101999"
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-tags"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual2"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-group"
argument_list|)
argument_list|,
literal|null
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"adhocTransactionGroupId"
argument_list|)
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test filters when multiple regions.  It does counts.  Needs eye-balling of    * logs to ensure that we're not scanning more regions that we're supposed to.    * Related to the TestFilterAcrossRegions over in the o.a.h.h.filter package.    * @throws IOException    * @throws InterruptedException    */
annotation|@
name|Test
specifier|public
name|void
name|testFilterAcrossMultipleRegions
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|byte
index|[]
name|name
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testFilterAcrossMutlipleRegions"
argument_list|)
decl_stmt|;
name|HTable
name|t
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|name
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
name|int
name|rowCount
init|=
name|TEST_UTIL
operator|.
name|loadTable
argument_list|(
name|t
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
name|assertRowCount
argument_list|(
name|t
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
comment|// Split the table.  Should split on a reasonable key; 'lqj'
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
name|regions
init|=
name|splitTable
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|assertRowCount
argument_list|(
name|t
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
comment|// Get end key of first region.
name|byte
index|[]
name|endKey
init|=
name|regions
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getEndKey
argument_list|()
decl_stmt|;
comment|// Count rows with a filter that stops us before passed 'endKey'.
comment|// Should be count of rows in first region.
name|int
name|endKeyCount
init|=
name|countRows
argument_list|(
name|t
argument_list|,
name|createScanWithRowFilter
argument_list|(
name|endKey
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|endKeyCount
operator|<
name|rowCount
argument_list|)
expr_stmt|;
comment|// How do I know I did not got to second region?  Thats tough.  Can't really
comment|// do that in client-side region test.  I verified by tracing in debugger.
comment|// I changed the messages that come out when set to DEBUG so should see
comment|// when scanner is done. Says "Finished with scanning..." with region name.
comment|// Check that its finished in right region.
comment|// New test.  Make it so scan goes into next region by one and then two.
comment|// Make sure count comes out right.
name|byte
index|[]
name|key
init|=
operator|new
name|byte
index|[]
block|{
name|endKey
index|[
literal|0
index|]
block|,
name|endKey
index|[
literal|1
index|]
block|,
call|(
name|byte
call|)
argument_list|(
name|endKey
index|[
literal|2
index|]
operator|+
literal|1
argument_list|)
block|}
decl_stmt|;
name|int
name|plusOneCount
init|=
name|countRows
argument_list|(
name|t
argument_list|,
name|createScanWithRowFilter
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|endKeyCount
operator|+
literal|1
argument_list|,
name|plusOneCount
argument_list|)
expr_stmt|;
name|key
operator|=
operator|new
name|byte
index|[]
block|{
name|endKey
index|[
literal|0
index|]
block|,
name|endKey
index|[
literal|1
index|]
block|,
call|(
name|byte
call|)
argument_list|(
name|endKey
index|[
literal|2
index|]
operator|+
literal|2
argument_list|)
block|}
expr_stmt|;
name|int
name|plusTwoCount
init|=
name|countRows
argument_list|(
name|t
argument_list|,
name|createScanWithRowFilter
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|endKeyCount
operator|+
literal|2
argument_list|,
name|plusTwoCount
argument_list|)
expr_stmt|;
comment|// New test.  Make it so I scan one less than endkey.
name|key
operator|=
operator|new
name|byte
index|[]
block|{
name|endKey
index|[
literal|0
index|]
block|,
name|endKey
index|[
literal|1
index|]
block|,
call|(
name|byte
call|)
argument_list|(
name|endKey
index|[
literal|2
index|]
operator|-
literal|1
argument_list|)
block|}
expr_stmt|;
name|int
name|minusOneCount
init|=
name|countRows
argument_list|(
name|t
argument_list|,
name|createScanWithRowFilter
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|endKeyCount
operator|-
literal|1
argument_list|,
name|minusOneCount
argument_list|)
expr_stmt|;
comment|// For above test... study logs.  Make sure we do "Finished with scanning.."
comment|// in first region and that we do not fall into the next region.
name|key
operator|=
operator|new
name|byte
index|[]
block|{
literal|'a'
block|,
literal|'a'
block|,
literal|'a'
block|}
expr_stmt|;
name|int
name|countBBB
init|=
name|countRows
argument_list|(
name|t
argument_list|,
name|createScanWithRowFilter
argument_list|(
name|key
argument_list|,
literal|null
argument_list|,
name|CompareFilter
operator|.
name|CompareOp
operator|.
name|EQUAL
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|countBBB
argument_list|)
expr_stmt|;
name|int
name|countGreater
init|=
name|countRows
argument_list|(
name|t
argument_list|,
name|createScanWithRowFilter
argument_list|(
name|endKey
argument_list|,
literal|null
argument_list|,
name|CompareFilter
operator|.
name|CompareOp
operator|.
name|GREATER_OR_EQUAL
argument_list|)
argument_list|)
decl_stmt|;
comment|// Because started at start of table.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|countGreater
argument_list|)
expr_stmt|;
name|countGreater
operator|=
name|countRows
argument_list|(
name|t
argument_list|,
name|createScanWithRowFilter
argument_list|(
name|endKey
argument_list|,
name|endKey
argument_list|,
name|CompareFilter
operator|.
name|CompareOp
operator|.
name|GREATER_OR_EQUAL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rowCount
operator|-
name|endKeyCount
argument_list|,
name|countGreater
argument_list|)
expr_stmt|;
block|}
comment|/*    * @param key    * @return Scan with RowFilter that does LESS than passed key.    */
specifier|private
name|Scan
name|createScanWithRowFilter
parameter_list|(
specifier|final
name|byte
index|[]
name|key
parameter_list|)
block|{
return|return
name|createScanWithRowFilter
argument_list|(
name|key
argument_list|,
literal|null
argument_list|,
name|CompareFilter
operator|.
name|CompareOp
operator|.
name|LESS
argument_list|)
return|;
block|}
comment|/*    * @param key    * @param op    * @param startRow    * @return Scan with RowFilter that does CompareOp op on passed key.    */
specifier|private
name|Scan
name|createScanWithRowFilter
parameter_list|(
specifier|final
name|byte
index|[]
name|key
parameter_list|,
specifier|final
name|byte
index|[]
name|startRow
parameter_list|,
name|CompareFilter
operator|.
name|CompareOp
name|op
parameter_list|)
block|{
comment|// Make sure key is of some substance... non-null and> than first key.
name|assertTrue
argument_list|(
name|key
operator|!=
literal|null
operator|&&
name|key
operator|.
name|length
operator|>
literal|0
operator|&&
name|Bytes
operator|.
name|BYTES_COMPARATOR
operator|.
name|compare
argument_list|(
name|key
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'a'
block|,
literal|'a'
block|,
literal|'a'
block|}
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Key="
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|Scan
name|s
init|=
name|startRow
operator|==
literal|null
condition|?
operator|new
name|Scan
argument_list|()
else|:
operator|new
name|Scan
argument_list|(
name|startRow
argument_list|)
decl_stmt|;
name|Filter
name|f
init|=
operator|new
name|RowFilter
argument_list|(
name|op
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
name|f
operator|=
operator|new
name|WhileMatchFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
comment|/*    * @param t    * @param s    * @return Count of rows in table.    * @throws IOException    */
specifier|private
name|int
name|countRows
parameter_list|(
specifier|final
name|HTable
name|t
parameter_list|,
specifier|final
name|Scan
name|s
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Assert all rows in table.
name|ResultScanner
name|scanner
init|=
name|t
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|scanner
control|)
block|{
name|count
operator|++
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// LOG.info("Count=" + count + ", row=" + Bytes.toString(result.getRow()));
block|}
return|return
name|count
return|;
block|}
specifier|private
name|void
name|assertRowCount
parameter_list|(
specifier|final
name|HTable
name|t
parameter_list|,
specifier|final
name|int
name|expected
parameter_list|)
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|countRows
argument_list|(
name|t
argument_list|,
operator|new
name|Scan
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*    * Split table into multiple regions.    * @param t Table to split.    * @return Map of regions to servers.    * @throws IOException    */
specifier|private
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
name|splitTable
parameter_list|(
specifier|final
name|HTable
name|t
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// Split this table in two.
name|HBaseAdmin
name|admin
init|=
operator|new
name|HBaseAdmin
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|admin
operator|.
name|split
argument_list|(
name|t
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
name|regions
init|=
name|waitOnSplit
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|regions
operator|.
name|size
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
return|return
name|regions
return|;
block|}
comment|/*    * Wait on table split.  May return because we waited long enough on the split    * and it didn't happen.  Caller should check.    * @param t    * @return Map of table regions; caller needs to check table actually split.    */
specifier|private
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
name|waitOnSplit
parameter_list|(
specifier|final
name|HTable
name|t
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
name|regions
init|=
name|t
operator|.
name|getRegionsInfo
argument_list|()
decl_stmt|;
name|int
name|originalCount
init|=
name|regions
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"hbase.test.retries"
argument_list|,
literal|30
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|regions
operator|=
name|t
operator|.
name|getRegionsInfo
argument_list|()
expr_stmt|;
if|if
condition|(
name|regions
operator|.
name|size
argument_list|()
operator|>
name|originalCount
condition|)
break|break;
block|}
return|return
name|regions
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSuperSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testSuperSimple"
argument_list|)
decl_stmt|;
name|HTable
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLE
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|TABLE
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected null result"
argument_list|,
name|result
operator|==
literal|null
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMaxKeyValueSize
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testMaxKeyValueSize"
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|String
name|oldMaxSize
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"hbase.client.keyvalue.maxsize"
argument_list|)
decl_stmt|;
name|HTable
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLE
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
operator|new
name|byte
index|[
literal|4
operator|*
literal|1024
operator|*
literal|1024
index|]
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
try|try
block|{
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.client.keyvalue.maxsize"
argument_list|,
literal|2
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|TABLE
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testMaxKeyValueSize2"
argument_list|)
expr_stmt|;
name|ht
operator|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLE
argument_list|,
name|FAMILY
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Inserting a too large KeyValue worked, should throw exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{}
name|conf
operator|.
name|set
argument_list|(
literal|"hbase.client.keyvalue.maxsize"
argument_list|,
name|oldMaxSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilters
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testFilters"
argument_list|)
decl_stmt|;
name|HTable
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLE
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|ROWS
init|=
name|makeN
argument_list|(
name|ROW
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|QUALIFIERS
init|=
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col0-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col1-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col2-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col3-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col4-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col5-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col6-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col7-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col8-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col9-<d2v1>-<d3v2>"
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|put
operator|.
name|setWriteToWAL
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILY
argument_list|)
expr_stmt|;
name|Filter
name|filter
init|=
operator|new
name|QualifierFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|RegexStringComparator
argument_list|(
literal|"col[1-5]"
argument_list|)
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|int
name|expectedIndex
init|=
literal|1
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
control|)
block|{
name|assertEquals
argument_list|(
name|result
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|raw
argument_list|()
index|[
literal|0
index|]
operator|.
name|getRow
argument_list|()
argument_list|,
name|ROWS
index|[
name|expectedIndex
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|raw
argument_list|()
index|[
literal|0
index|]
operator|.
name|getQualifier
argument_list|()
argument_list|,
name|QUALIFIERS
index|[
name|expectedIndex
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|expectedIndex
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expectedIndex
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testKeyOnlyFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testKeyOnlyFilter"
argument_list|)
decl_stmt|;
name|HTable
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLE
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|ROWS
init|=
name|makeN
argument_list|(
name|ROW
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|QUALIFIERS
init|=
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col0-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col1-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col2-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col3-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col4-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col5-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col6-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col7-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col8-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col9-<d2v1>-<d3v2>"
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|put
operator|.
name|setWriteToWAL
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILY
argument_list|)
expr_stmt|;
name|Filter
name|filter
init|=
operator|new
name|KeyOnlyFilter
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
control|)
block|{
name|assertEquals
argument_list|(
name|result
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|result
operator|.
name|raw
argument_list|()
index|[
literal|0
index|]
operator|.
name|getValueLength
argument_list|()
argument_list|,
name|Bytes
operator|.
name|SIZEOF_INT
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toInt
argument_list|(
name|result
operator|.
name|raw
argument_list|()
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|,
name|VALUE
operator|.
name|length
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|count
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test simple table and non-existent row cases.    */
annotation|@
name|Test
specifier|public
name|void
name|testSimpleMissing
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testSimpleMissing"
argument_list|)
decl_stmt|;
name|HTable
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLE
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|ROWS
init|=
name|makeN
argument_list|(
name|ROW
argument_list|,
literal|4
argument_list|)
decl_stmt|;
comment|// Try to get a row on an empty table
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILY
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|ROWS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILY
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Insert a row
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Try to get empty rows around it
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILY
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Try to scan empty rows around it
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|ROWS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Make sure we can actually get the row
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|2
index|]
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILY
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|2
index|]
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|2
index|]
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
comment|// Make sure we can scan the row
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|2
index|]
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|ROWS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|2
index|]
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|2
index|]
argument_list|,
name|ROWS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|2
index|]
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test basic puts, gets, scans, and deletes for a single row    * in a multiple family table.    */
annotation|@
name|Test
specifier|public
name|void
name|testSingleRowMultipleFamily
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testSingleRowMultipleFamily"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|ROWS
init|=
name|makeN
argument_list|(
name|ROW
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|FAMILIES
init|=
name|makeNAscii
argument_list|(
name|FAMILY
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|QUALIFIERS
init|=
name|makeN
argument_list|(
name|QUALIFIER
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|VALUES
init|=
name|makeN
argument_list|(
name|VALUE
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|HTable
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLE
argument_list|,
name|FAMILIES
argument_list|)
decl_stmt|;
name|Get
name|get
decl_stmt|;
name|Scan
name|scan
decl_stmt|;
name|Delete
name|delete
decl_stmt|;
name|Put
name|put
decl_stmt|;
name|Result
name|result
decl_stmt|;
comment|////////////////////////////////////////////////////////////////////////////
comment|// Insert one column to one family
comment|////////////////////////////////////////////////////////////////////////////
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Get the single column
name|getVerifySingleColumn
argument_list|(
name|ht
argument_list|,
name|ROWS
argument_list|,
literal|0
argument_list|,
name|FAMILIES
argument_list|,
literal|4
argument_list|,
name|QUALIFIERS
argument_list|,
literal|0
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Scan the single column
name|scanVerifySingleColumn
argument_list|(
name|ht
argument_list|,
name|ROWS
argument_list|,
literal|0
argument_list|,
name|FAMILIES
argument_list|,
literal|4
argument_list|,
name|QUALIFIERS
argument_list|,
literal|0
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Get empty results around inserted column
name|getVerifySingleEmpty
argument_list|(
name|ht
argument_list|,
name|ROWS
argument_list|,
literal|0
argument_list|,
name|FAMILIES
argument_list|,
literal|4
argument_list|,
name|QUALIFIERS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Scan empty results around inserted column
name|scanVerifySingleEmpty
argument_list|(
name|ht
argument_list|,
name|ROWS
argument_list|,
literal|0
argument_list|,
name|FAMILIES
argument_list|,
literal|4
argument_list|,
name|QUALIFIERS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|////////////////////////////////////////////////////////////////////////////
comment|// Flush memstore and run same tests from storefiles
comment|////////////////////////////////////////////////////////////////////////////
name|TEST_UTIL
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// Redo get and scan tests from storefile
name|getVerifySingleColumn
argument_list|(
name|ht
argument_list|,
name|ROWS
argument_list|,
literal|0
argument_list|,
name|FAMILIES
argument_list|,
literal|4
argument_list|,
name|QUALIFIERS
argument_list|,
literal|0
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|scanVerifySingleColumn
argument_list|(
name|ht
argument_list|,
name|ROWS
argument_list|,
literal|0
argument_list|,
name|FAMILIES
argument_list|,
literal|4
argument_list|,
name|QUALIFIERS
argument_list|,
literal|0
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|getVerifySingleEmpty
argument_list|(
name|ht
argument_list|,
name|ROWS
argument_list|,
literal|0
argument_list|,
name|FAMILIES
argument_list|,
literal|4
argument_list|,
name|QUALIFIERS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|scanVerifySingleEmpty
argument_list|(
name|ht
argument_list|,
name|ROWS
argument_list|,
literal|0
argument_list|,
name|FAMILIES
argument_list|,
literal|4
argument_list|,
name|QUALIFIERS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|////////////////////////////////////////////////////////////////////////////
comment|// Now, Test reading from memstore and storefiles at once
comment|////////////////////////////////////////////////////////////////////////////
comment|// Insert multiple columns to two other families
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|,
name|VALUES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|7
index|]
argument_list|,
name|VALUES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|7
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|7
index|]
argument_list|,
name|VALUES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|9
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Get multiple columns across multiple families and get empties around it
name|singleRowGetTest
argument_list|(
name|ht
argument_list|,
name|ROWS
argument_list|,
name|FAMILIES
argument_list|,
name|QUALIFIERS
argument_list|,
name|VALUES
argument_list|)
expr_stmt|;
comment|// Scan multiple columns across multiple families and scan empties around it
name|singleRowScanTest
argument_list|(
name|ht
argument_list|,
name|ROWS
argument_list|,
name|FAMILIES
argument_list|,
name|QUALIFIERS
argument_list|,
name|VALUES
argument_list|)
expr_stmt|;
comment|////////////////////////////////////////////////////////////////////////////
comment|// Flush the table again
comment|////////////////////////////////////////////////////////////////////////////
name|TEST_UTIL
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// Redo tests again
name|singleRowGetTest
argument_list|(
name|ht
argument_list|,
name|ROWS
argument_list|,
name|FAMILIES
argument_list|,
name|QUALIFIERS
argument_list|,
name|VALUES
argument_list|)
expr_stmt|;
name|singleRowScanTest
argument_list|(
name|ht
argument_list|,
name|ROWS
argument_list|,
name|FAMILIES
argument_list|,
name|QUALIFIERS
argument_list|,
name|VALUES
argument_list|)
expr_stmt|;
comment|// Insert more data to memstore
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|8
index|]
argument_list|,
name|VALUES
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|9
index|]
argument_list|,
name|VALUES
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|////////////////////////////////////////////////////////////////////////////
comment|// Delete a storefile column
comment|////////////////////////////////////////////////////////////////////////////
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|delete
operator|.
name|deleteColumns
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
comment|// Try to get deleted column
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Try to scan deleted column
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Make sure we can still get a column before it and after it
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|,
name|VALUES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|8
index|]
argument_list|,
name|VALUES
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
comment|// Make sure we can still scan a column before it and after it
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|,
name|VALUES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|8
index|]
argument_list|,
name|VALUES
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
comment|////////////////////////////////////////////////////////////////////////////
comment|// Delete a memstore column
comment|////////////////////////////////////////////////////////////////////////////
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|delete
operator|.
name|deleteColumns
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
comment|// Try to get deleted column
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Try to scan deleted column
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Make sure we can still get a column before it and after it
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|,
name|VALUES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|9
index|]
argument_list|,
name|VALUES
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
comment|// Make sure we can still scan a column before it and after it
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|,
name|VALUES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|9
index|]
argument_list|,
name|VALUES
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
comment|////////////////////////////////////////////////////////////////////////////
comment|// Delete joint storefile/memstore family
comment|////////////////////////////////////////////////////////////////////////////
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|delete
operator|.
name|deleteFamily
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
comment|// Try to get storefile column in deleted family
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Try to get memstore column in deleted family
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Try to get deleted family
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Try to scan storefile column in deleted family
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Try to scan memstore column in deleted family
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Try to scan deleted family
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Make sure we can still get another family
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|9
index|]
argument_list|,
name|VALUES
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
comment|// Make sure we can still scan another family
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|,
name|VALUES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|9
index|]
argument_list|,
name|VALUES
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
comment|////////////////////////////////////////////////////////////////////////////
comment|// Flush everything and rerun delete tests
comment|////////////////////////////////////////////////////////////////////////////
name|TEST_UTIL
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// Try to get storefile column in deleted family
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Try to get memstore column in deleted family
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Try to get deleted family
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Try to scan storefile column in deleted family
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Try to scan memstore column in deleted family
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Try to scan deleted family
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Make sure we can still get another family
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|9
index|]
argument_list|,
name|VALUES
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
comment|// Make sure we can still scan another family
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|,
name|VALUES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|9
index|]
argument_list|,
name|VALUES
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNull
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testNull"
argument_list|)
decl_stmt|;
comment|// Null table name (should NOT work)
try|try
block|{
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
literal|null
argument_list|,
name|FAMILY
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Creating a table with null name passed, should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{}
comment|// Null family (should NOT work)
try|try
block|{
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLE
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Creating a table with a null family passed, should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{}
name|HTable
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLE
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
comment|// Null row (should NOT work)
try|try
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Inserting a null row worked, should throw exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{}
comment|// Null qualifier (should work)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
literal|null
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|getTestNull
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|scanTestNull
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|delete
operator|.
name|deleteColumns
argument_list|(
name|FAMILY
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
comment|// Use a new table
name|byte
index|[]
name|TABLE2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testNull2"
argument_list|)
decl_stmt|;
name|ht
operator|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLE2
argument_list|,
name|FAMILY
argument_list|)
expr_stmt|;
comment|// Empty qualifier, byte[0] instead of null (should work)
try|try
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|getTestNull
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|scanTestNull
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
comment|// Flush and try again
name|TEST_UTIL
operator|.
name|flush
argument_list|()
expr_stmt|;
name|getTestNull
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|scanTestNull
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|delete
operator|.
name|deleteColumns
argument_list|(
name|FAMILY
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Using a row with null qualifier threw exception, should "
argument_list|)
throw|;
block|}
comment|// Null value
try|try
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|delete
operator|.
name|deleteColumns
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Null values should be allowed, but threw exception"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVersions
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testVersions"
argument_list|)
decl_stmt|;
name|long
index|[]
name|STAMPS
init|=
name|makeStamps
argument_list|(
literal|20
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|VALUES
init|=
name|makeNAscii
argument_list|(
name|VALUE
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|HTable
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLE
argument_list|,
name|FAMILY
argument_list|,
literal|10
argument_list|)
decl_stmt|;
comment|// Insert 4 versions of same column
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Verify we can get each one properly
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
comment|// Verify we don't accidentally get others
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
comment|// Ensure maxVersions in query is respected
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Flush and redo
name|TEST_UTIL
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// Verify we can get each one properly
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
comment|// Verify we don't accidentally get others
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
comment|// Ensure maxVersions in query is respected
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Add some memstore and retest
comment|// Insert 4 more versions of same column and a dupe
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|6
index|]
argument_list|,
name|VALUES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|7
index|]
argument_list|,
name|VALUES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|8
index|]
argument_list|,
name|VALUES
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Ensure maxVersions in query is respected
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|,
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|7
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|7
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|,
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|7
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|7
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|,
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|7
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|7
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|,
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|7
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|7
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|7
argument_list|)
expr_stmt|;
comment|// Verify we can get each one properly
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|7
index|]
argument_list|,
name|VALUES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|7
index|]
argument_list|,
name|VALUES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
comment|// Verify we don't accidentally get others
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
comment|// Ensure maxVersions of table is respected
name|TEST_UTIL
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// Insert 4 more versions of same column and a dupe
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|9
index|]
argument_list|,
name|VALUES
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|11
index|]
argument_list|,
name|VALUES
index|[
literal|11
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|13
index|]
argument_list|,
name|VALUES
index|[
literal|13
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|15
index|]
argument_list|,
name|VALUES
index|[
literal|15
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|7
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|,
name|STAMPS
index|[
literal|9
index|]
block|,
name|STAMPS
index|[
literal|11
index|]
block|,
name|STAMPS
index|[
literal|13
index|]
block|,
name|STAMPS
index|[
literal|15
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|7
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|,
name|VALUES
index|[
literal|9
index|]
block|,
name|VALUES
index|[
literal|11
index|]
block|,
name|VALUES
index|[
literal|13
index|]
block|,
name|VALUES
index|[
literal|15
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|7
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|,
name|STAMPS
index|[
literal|9
index|]
block|,
name|STAMPS
index|[
literal|11
index|]
block|,
name|STAMPS
index|[
literal|13
index|]
block|,
name|STAMPS
index|[
literal|15
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|7
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|,
name|VALUES
index|[
literal|9
index|]
block|,
name|VALUES
index|[
literal|11
index|]
block|,
name|VALUES
index|[
literal|13
index|]
block|,
name|VALUES
index|[
literal|15
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|)
expr_stmt|;
comment|// Delete a version in the memstore and a version in a storefile
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|delete
operator|.
name|deleteColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|11
index|]
argument_list|)
expr_stmt|;
name|delete
operator|.
name|deleteColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
comment|// Test that it's gone
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|,
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|,
name|STAMPS
index|[
literal|9
index|]
block|,
name|STAMPS
index|[
literal|13
index|]
block|,
name|STAMPS
index|[
literal|15
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|,
name|VALUES
index|[
literal|9
index|]
block|,
name|VALUES
index|[
literal|13
index|]
block|,
name|VALUES
index|[
literal|15
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|,
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|,
name|STAMPS
index|[
literal|9
index|]
block|,
name|STAMPS
index|[
literal|13
index|]
block|,
name|STAMPS
index|[
literal|15
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|,
name|VALUES
index|[
literal|9
index|]
block|,
name|VALUES
index|[
literal|13
index|]
block|,
name|VALUES
index|[
literal|15
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVersionLimits
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testVersionLimits"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|FAMILIES
init|=
name|makeNAscii
argument_list|(
name|FAMILY
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|int
index|[]
name|LIMITS
init|=
block|{
literal|1
block|,
literal|3
block|,
literal|5
block|}
decl_stmt|;
name|long
index|[]
name|STAMPS
init|=
name|makeStamps
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|VALUES
init|=
name|makeNAscii
argument_list|(
name|VALUE
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|HTable
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLE
argument_list|,
name|FAMILIES
argument_list|,
name|LIMITS
argument_list|)
decl_stmt|;
comment|// Insert limit + 1 on each family
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|6
index|]
argument_list|,
name|VALUES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Verify we only get the right number out of each
comment|// Family0
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Family1
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|,
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|,
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|,
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|,
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Family2
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// Try all families
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected 9 keys but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|9
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected 9 keys but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|9
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected 9 keys but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|9
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected 9 keys but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|9
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected 9 keys but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|9
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected 9 keys but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|9
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeletes
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testDeletes"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|ROWS
init|=
name|makeNAscii
argument_list|(
name|ROW
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|FAMILIES
init|=
name|makeNAscii
argument_list|(
name|FAMILY
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|VALUES
init|=
name|makeN
argument_list|(
name|VALUE
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|long
index|[]
name|ts
init|=
block|{
literal|1000
block|,
literal|2000
block|,
literal|3000
block|,
literal|4000
block|,
literal|5000
block|}
decl_stmt|;
name|HTable
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLE
argument_list|,
name|FAMILIES
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|delete
operator|.
name|deleteFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|ts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|1
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|1
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Test delete latest version
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|,
name|ts
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|,
name|ts
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|,
name|ts
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|delete
operator|.
name|deleteColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
comment|// ts[4]
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|1
index|]
block|,
name|ts
index|[
literal|2
index|]
block|,
name|ts
index|[
literal|3
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|1
index|]
block|,
name|ts
index|[
literal|2
index|]
block|,
name|ts
index|[
literal|3
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Test for HBASE-1847
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|delete
operator|.
name|deleteColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
comment|// Cleanup null qualifier
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|delete
operator|.
name|deleteColumns
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
comment|// Expected client behavior might be that you can re-put deleted values
comment|// But alas, this is not to be.  We can't put them back in either case.
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// 1000
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
comment|// 5000
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// It used to be due to the internal implementation of Get, that
comment|// the Get() call would return ts[4] UNLIKE the Scan below. With
comment|// the switch to using Scan for Get this is no longer the case.
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|1
index|]
block|,
name|ts
index|[
literal|2
index|]
block|,
name|ts
index|[
literal|3
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// The Scanner returns the previous values, the expected-naive-unexpected behavior
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|1
index|]
block|,
name|ts
index|[
literal|2
index|]
block|,
name|ts
index|[
literal|3
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Test deleting an entire family from one row but not the other various ways
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Assert that above went in.
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected 4 key but received "
operator|+
name|result
operator|.
name|size
argument_list|()
operator|+
literal|": "
operator|+
name|result
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|delete
operator|.
name|deleteFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROWS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|delete
operator|.
name|deleteColumns
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROWS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|delete
operator|.
name|deleteColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|delete
operator|.
name|deleteColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|delete
operator|.
name|deleteColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected 2 keys but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|0
index|]
block|,
name|ts
index|[
literal|1
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|0
index|]
block|,
name|VALUES
index|[
literal|1
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected 2 keys but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|0
index|]
block|,
name|ts
index|[
literal|1
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|0
index|]
block|,
name|VALUES
index|[
literal|1
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected 2 keys but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected 2 keys but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|2
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|2
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|2
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|2
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Test if we delete the family first in one row (HBASE-1541)
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROWS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|delete
operator|.
name|deleteFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected 1 key but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected 2 keys but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|result
operator|=
name|scanner
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected 1 key but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|raw
argument_list|()
index|[
literal|0
index|]
operator|.
name|getRow
argument_list|()
argument_list|,
name|ROWS
index|[
literal|3
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|raw
argument_list|()
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|()
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|scanner
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected 2 keys but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|raw
argument_list|()
index|[
literal|0
index|]
operator|.
name|getRow
argument_list|()
argument_list|,
name|ROWS
index|[
literal|4
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|raw
argument_list|()
index|[
literal|1
index|]
operator|.
name|getRow
argument_list|()
argument_list|,
name|ROWS
index|[
literal|4
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|raw
argument_list|()
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|()
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|raw
argument_list|()
index|[
literal|1
index|]
operator|.
name|getValue
argument_list|()
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Add test of bulk deleting.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|bytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|put
operator|.
name|setWriteToWAL
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|bytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|Delete
argument_list|>
name|deletes
init|=
operator|new
name|ArrayList
argument_list|<
name|Delete
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|bytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|delete
operator|.
name|deleteFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|deletes
operator|.
name|add
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
name|ht
operator|.
name|delete
argument_list|(
name|deletes
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|bytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Baseline "scalability" test.    *    * Tests one hundred families, one million columns, one million versions    */
annotation|@
name|Ignore
annotation|@
name|Test
specifier|public
name|void
name|testMillions
parameter_list|()
throws|throws
name|Exception
block|{
comment|// 100 families
comment|// millions of columns
comment|// millions of versions
block|}
annotation|@
name|Ignore
annotation|@
name|Test
specifier|public
name|void
name|testMultipleRegionsAndBatchPuts
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Two family table
comment|// Insert lots of rows
comment|// Insert to the same row with batched puts
comment|// Insert to multiple rows with batched puts
comment|// Split the table
comment|// Get row from first region
comment|// Get row from second region
comment|// Scan all rows
comment|// Insert to multiple regions with batched puts
comment|// Get row from first region
comment|// Get row from second region
comment|// Scan all rows
block|}
annotation|@
name|Ignore
annotation|@
name|Test
specifier|public
name|void
name|testMultipleRowMultipleFamily
parameter_list|()
throws|throws
name|Exception
block|{    }
comment|//
comment|// JIRA Testers
comment|//
comment|/**    * HBASE-867    *    If millions of columns in a column family, hbase scanner won't come up    *    *    Test will create numRows rows, each with numColsPerRow columns    *    (1 version each), and attempt to scan them all.    *    *    To test at scale, up numColsPerRow to the millions    *    (have not gotten that to work running as junit though)    */
annotation|@
name|Test
specifier|public
name|void
name|testJiraTest867
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numRows
init|=
literal|10
decl_stmt|;
name|int
name|numColsPerRow
init|=
literal|2000
decl_stmt|;
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testJiraTest867"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|ROWS
init|=
name|makeN
argument_list|(
name|ROW
argument_list|,
name|numRows
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|QUALIFIERS
init|=
name|makeN
argument_list|(
name|QUALIFIER
argument_list|,
name|numColsPerRow
argument_list|)
decl_stmt|;
name|HTable
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLE
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
comment|// Insert rows
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRows
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|put
operator|.
name|setWriteToWAL
argument_list|(
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numColsPerRow
condition|;
name|j
operator|++
control|)
block|{
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|j
index|]
argument_list|,
name|QUALIFIERS
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Put expected to contain "
operator|+
name|numColsPerRow
operator|+
literal|" columns but "
operator|+
literal|"only contains "
operator|+
name|put
operator|.
name|size
argument_list|()
argument_list|,
name|put
operator|.
name|size
argument_list|()
operator|==
name|numColsPerRow
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
comment|// Get a row
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
name|numRows
operator|-
literal|1
index|]
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertNumKeys
argument_list|(
name|result
argument_list|,
name|numColsPerRow
argument_list|)
expr_stmt|;
name|KeyValue
index|[]
name|keys
init|=
name|result
operator|.
name|raw
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|result
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertKey
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|,
name|ROWS
index|[
name|numRows
operator|-
literal|1
index|]
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Scan the rows
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|ResultScanner
name|scanner
init|=
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|int
name|rowCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|result
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|assertNumKeys
argument_list|(
name|result
argument_list|,
name|numColsPerRow
argument_list|)
expr_stmt|;
name|KeyValue
index|[]
name|kvs
init|=
name|result
operator|.
name|raw
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numColsPerRow
condition|;
name|i
operator|++
control|)
block|{
name|assertKey
argument_list|(
name|kvs
index|[
name|i
index|]
argument_list|,
name|ROWS
index|[
name|rowCount
index|]
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|rowCount
operator|++
expr_stmt|;
block|}
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected to scan "
operator|+
name|numRows
operator|+
literal|" rows but actually scanned "
operator|+
name|rowCount
operator|+
literal|" rows"
argument_list|,
name|rowCount
operator|==
name|numRows
argument_list|)
expr_stmt|;
comment|// flush and try again
name|TEST_UTIL
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// Get a row
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
name|numRows
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNumKeys
argument_list|(
name|result
argument_list|,
name|numColsPerRow
argument_list|)
expr_stmt|;
name|keys
operator|=
name|result
operator|.
name|raw
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|result
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertKey
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|,
name|ROWS
index|[
name|numRows
operator|-
literal|1
index|]
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Scan the rows
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scanner
operator|=
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|rowCount
operator|=
literal|0
expr_stmt|;
while|while
condition|(
operator|(
name|result
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|assertNumKeys
argument_list|(
name|result
argument_list|,
name|numColsPerRow
argument_list|)
expr_stmt|;
name|KeyValue
index|[]
name|kvs
init|=
name|result
operator|.
name|raw
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numColsPerRow
condition|;
name|i
operator|++
control|)
block|{
name|assertKey
argument_list|(
name|kvs
index|[
name|i
index|]
argument_list|,
name|ROWS
index|[
name|rowCount
index|]
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|rowCount
operator|++
expr_stmt|;
block|}
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected to scan "
operator|+
name|numRows
operator|+
literal|" rows but actually scanned "
operator|+
name|rowCount
operator|+
literal|" rows"
argument_list|,
name|rowCount
operator|==
name|numRows
argument_list|)
expr_stmt|;
block|}
comment|/**    * HBASE-861    *    get with timestamp will return a value if there is a version with an    *    earlier timestamp    */
annotation|@
name|Test
specifier|public
name|void
name|testJiraTest861
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testJiraTest861"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|VALUES
init|=
name|makeNAscii
argument_list|(
name|VALUE
argument_list|,
literal|7
argument_list|)
decl_stmt|;
name|long
index|[]
name|STAMPS
init|=
name|makeStamps
argument_list|(
literal|7
argument_list|)
decl_stmt|;
name|HTable
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLE
argument_list|,
name|FAMILY
argument_list|,
literal|10
argument_list|)
decl_stmt|;
comment|// Insert three versions
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Get the middle value
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
comment|// Try to get one version before (expect fail)
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// Try to get one version after (expect fail)
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
comment|// Try same from storefile
name|TEST_UTIL
operator|.
name|flush
argument_list|()
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
comment|// Insert two more versions surrounding others, into memstore
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|6
index|]
argument_list|,
name|VALUES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Check we can get everything we should and can't get what we shouldn't
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|6
index|]
argument_list|,
name|VALUES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
comment|// Try same from two storefiles
name|TEST_UTIL
operator|.
name|flush
argument_list|()
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|6
index|]
argument_list|,
name|VALUES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
block|}
comment|/**    * HBASE-33    *    Add a HTable get/obtainScanner method that retrieves all versions of a    *    particular column and row between two timestamps    */
annotation|@
name|Test
specifier|public
name|void
name|testJiraTest33
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testJiraTest33"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|VALUES
init|=
name|makeNAscii
argument_list|(
name|VALUE
argument_list|,
literal|7
argument_list|)
decl_stmt|;
name|long
index|[]
name|STAMPS
init|=
name|makeStamps
argument_list|(
literal|7
argument_list|)
decl_stmt|;
name|HTable
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLE
argument_list|,
name|FAMILY
argument_list|,
literal|10
argument_list|)
decl_stmt|;
comment|// Insert lots versions
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|getVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|getVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|getVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|getVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|scanVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|scanVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|scanVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|scanVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// Try same from storefile
name|TEST_UTIL
operator|.
name|flush
argument_list|()
expr_stmt|;
name|getVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|getVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|getVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|getVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|scanVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|scanVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|scanVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|scanVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
comment|/**    * HBASE-1014    *    commit(BatchUpdate) method should return timestamp    */
annotation|@
name|Test
specifier|public
name|void
name|testJiraTest1014
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testJiraTest1014"
argument_list|)
decl_stmt|;
name|HTable
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLE
argument_list|,
name|FAMILY
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|long
name|manualStamp
init|=
literal|12345
decl_stmt|;
comment|// Insert lots versions
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|manualStamp
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|manualStamp
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|manualStamp
operator|-
literal|1
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|manualStamp
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * HBASE-1182    *    Scan for columns> some timestamp    */
annotation|@
name|Test
specifier|public
name|void
name|testJiraTest1182
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testJiraTest1182"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|VALUES
init|=
name|makeNAscii
argument_list|(
name|VALUE
argument_list|,
literal|7
argument_list|)
decl_stmt|;
name|long
index|[]
name|STAMPS
init|=
name|makeStamps
argument_list|(
literal|7
argument_list|)
decl_stmt|;
name|HTable
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLE
argument_list|,
name|FAMILY
argument_list|,
literal|10
argument_list|)
decl_stmt|;
comment|// Insert lots versions
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|getVersionRangeAndVerifyGreaterThan
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|getVersionRangeAndVerifyGreaterThan
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|getVersionRangeAndVerifyGreaterThan
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|scanVersionRangeAndVerifyGreaterThan
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|scanVersionRangeAndVerifyGreaterThan
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|scanVersionRangeAndVerifyGreaterThan
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// Try same from storefile
name|TEST_UTIL
operator|.
name|flush
argument_list|()
expr_stmt|;
name|getVersionRangeAndVerifyGreaterThan
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|getVersionRangeAndVerifyGreaterThan
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|getVersionRangeAndVerifyGreaterThan
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|scanVersionRangeAndVerifyGreaterThan
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|scanVersionRangeAndVerifyGreaterThan
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|scanVersionRangeAndVerifyGreaterThan
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
comment|/**    * HBASE-52    *    Add a means of scanning over all versions    */
annotation|@
name|Test
specifier|public
name|void
name|testJiraTest52
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testJiraTest52"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|VALUES
init|=
name|makeNAscii
argument_list|(
name|VALUE
argument_list|,
literal|7
argument_list|)
decl_stmt|;
name|long
index|[]
name|STAMPS
init|=
name|makeStamps
argument_list|(
literal|7
argument_list|)
decl_stmt|;
name|HTable
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLE
argument_list|,
name|FAMILY
argument_list|,
literal|10
argument_list|)
decl_stmt|;
comment|// Insert lots versions
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|getAllVersionsAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|scanAllVersionsAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// Try same from storefile
name|TEST_UTIL
operator|.
name|flush
argument_list|()
expr_stmt|;
name|getAllVersionsAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|scanAllVersionsAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// Bulk Testers
comment|//
specifier|private
name|void
name|getVersionRangeAndVerifyGreaterThan
parameter_list|(
name|HTable
name|ht
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
index|[]
name|stamps
parameter_list|,
name|byte
index|[]
index|[]
name|values
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
throws|throws
name|IOException
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|get
operator|.
name|setTimeRange
argument_list|(
name|stamps
index|[
name|start
operator|+
literal|1
index|]
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|stamps
argument_list|,
name|values
argument_list|,
name|start
operator|+
literal|1
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|getVersionRangeAndVerify
parameter_list|(
name|HTable
name|ht
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
index|[]
name|stamps
parameter_list|,
name|byte
index|[]
index|[]
name|values
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
throws|throws
name|IOException
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|get
operator|.
name|setTimeRange
argument_list|(
name|stamps
index|[
name|start
index|]
argument_list|,
name|stamps
index|[
name|end
index|]
operator|+
literal|1
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|stamps
argument_list|,
name|values
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|getAllVersionsAndVerify
parameter_list|(
name|HTable
name|ht
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
index|[]
name|stamps
parameter_list|,
name|byte
index|[]
index|[]
name|values
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
throws|throws
name|IOException
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|stamps
argument_list|,
name|values
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|scanVersionRangeAndVerifyGreaterThan
parameter_list|(
name|HTable
name|ht
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
index|[]
name|stamps
parameter_list|,
name|byte
index|[]
index|[]
name|values
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setTimeRange
argument_list|(
name|stamps
index|[
name|start
operator|+
literal|1
index|]
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|stamps
argument_list|,
name|values
argument_list|,
name|start
operator|+
literal|1
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|scanVersionRangeAndVerify
parameter_list|(
name|HTable
name|ht
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
index|[]
name|stamps
parameter_list|,
name|byte
index|[]
index|[]
name|values
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setTimeRange
argument_list|(
name|stamps
index|[
name|start
index|]
argument_list|,
name|stamps
index|[
name|end
index|]
operator|+
literal|1
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|stamps
argument_list|,
name|values
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|scanAllVersionsAndVerify
parameter_list|(
name|HTable
name|ht
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
index|[]
name|stamps
parameter_list|,
name|byte
index|[]
index|[]
name|values
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|stamps
argument_list|,
name|values
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|getVersionAndVerify
parameter_list|(
name|HTable
name|ht
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
name|stamp
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|Exception
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|get
operator|.
name|setTimeStamp
argument_list|(
name|stamp
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|stamp
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|getVersionAndVerifyMissing
parameter_list|(
name|HTable
name|ht
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
name|stamp
parameter_list|)
throws|throws
name|Exception
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|get
operator|.
name|setTimeStamp
argument_list|(
name|stamp
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|scanVersionAndVerify
parameter_list|(
name|HTable
name|ht
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
name|stamp
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|Exception
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setTimeStamp
argument_list|(
name|stamp
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|stamp
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|scanVersionAndVerifyMissing
parameter_list|(
name|HTable
name|ht
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
name|stamp
parameter_list|)
throws|throws
name|Exception
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setTimeStamp
argument_list|(
name|stamp
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|getTestNull
parameter_list|(
name|HTable
name|ht
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|Exception
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
literal|null
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|scanTestNull
parameter_list|(
name|HTable
name|ht
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|Exception
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|singleRowGetTest
parameter_list|(
name|HTable
name|ht
parameter_list|,
name|byte
index|[]
index|[]
name|ROWS
parameter_list|,
name|byte
index|[]
index|[]
name|FAMILIES
parameter_list|,
name|byte
index|[]
index|[]
name|QUALIFIERS
parameter_list|,
name|byte
index|[]
index|[]
name|VALUES
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Single column from memstore
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// Single column from storefile
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
comment|// Single column from storefile, family match
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|7
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|7
index|]
argument_list|,
name|VALUES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
comment|// Two columns, one from memstore one from storefile, same family,
comment|// wildcard match
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertDoubleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
comment|// Two columns, one from memstore one from storefile, same family,
comment|// explicit match
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertDoubleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
comment|// Three column, one from memstore two from storefile, different families,
comment|// wildcard match
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
argument_list|,
name|QUALIFIERS
argument_list|,
name|VALUES
argument_list|,
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|4
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|4
block|,
literal|4
block|,
literal|4
block|}
block|,
block|{
literal|7
block|,
literal|7
block|,
literal|7
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Multiple columns from everywhere storefile, many family, wildcard
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
argument_list|,
name|QUALIFIERS
argument_list|,
name|VALUES
argument_list|,
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|}
block|,
block|{
literal|2
block|,
literal|4
block|,
literal|4
block|}
block|,
block|{
literal|4
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|4
block|,
literal|4
block|,
literal|4
block|}
block|,
block|{
literal|6
block|,
literal|6
block|,
literal|6
block|}
block|,
block|{
literal|6
block|,
literal|7
block|,
literal|7
block|}
block|,
block|{
literal|7
block|,
literal|7
block|,
literal|7
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Multiple columns from everywhere storefile, many family, wildcard
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|7
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|7
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
argument_list|,
name|QUALIFIERS
argument_list|,
name|VALUES
argument_list|,
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|}
block|,
block|{
literal|2
block|,
literal|4
block|,
literal|4
block|}
block|,
block|{
literal|4
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|4
block|,
literal|4
block|,
literal|4
block|}
block|,
block|{
literal|6
block|,
literal|6
block|,
literal|6
block|}
block|,
block|{
literal|6
block|,
literal|7
block|,
literal|7
block|}
block|,
block|{
literal|7
block|,
literal|7
block|,
literal|7
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Everything
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
argument_list|,
name|QUALIFIERS
argument_list|,
name|VALUES
argument_list|,
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|}
block|,
block|{
literal|2
block|,
literal|4
block|,
literal|4
block|}
block|,
block|{
literal|4
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|4
block|,
literal|4
block|,
literal|4
block|}
block|,
block|{
literal|6
block|,
literal|6
block|,
literal|6
block|}
block|,
block|{
literal|6
block|,
literal|7
block|,
literal|7
block|}
block|,
block|{
literal|7
block|,
literal|7
block|,
literal|7
block|}
block|,
block|{
literal|9
block|,
literal|0
block|,
literal|0
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Get around inserted columns
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|singleRowScanTest
parameter_list|(
name|HTable
name|ht
parameter_list|,
name|byte
index|[]
index|[]
name|ROWS
parameter_list|,
name|byte
index|[]
index|[]
name|FAMILIES
parameter_list|,
name|byte
index|[]
index|[]
name|QUALIFIERS
parameter_list|,
name|byte
index|[]
index|[]
name|VALUES
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Single column from memstore
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// Single column from storefile
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
comment|// Single column from storefile, family match
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|7
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|7
index|]
argument_list|,
name|VALUES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
comment|// Two columns, one from memstore one from storefile, same family,
comment|// wildcard match
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertDoubleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
comment|// Two columns, one from memstore one from storefile, same family,
comment|// explicit match
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertDoubleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
comment|// Three column, one from memstore two from storefile, different families,
comment|// wildcard match
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
argument_list|,
name|QUALIFIERS
argument_list|,
name|VALUES
argument_list|,
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|4
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|4
block|,
literal|4
block|,
literal|4
block|}
block|,
block|{
literal|7
block|,
literal|7
block|,
literal|7
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Multiple columns from everywhere storefile, many family, wildcard
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
argument_list|,
name|QUALIFIERS
argument_list|,
name|VALUES
argument_list|,
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|}
block|,
block|{
literal|2
block|,
literal|4
block|,
literal|4
block|}
block|,
block|{
literal|4
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|4
block|,
literal|4
block|,
literal|4
block|}
block|,
block|{
literal|6
block|,
literal|6
block|,
literal|6
block|}
block|,
block|{
literal|6
block|,
literal|7
block|,
literal|7
block|}
block|,
block|{
literal|7
block|,
literal|7
block|,
literal|7
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Multiple columns from everywhere storefile, many family, wildcard
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|7
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|7
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
argument_list|,
name|QUALIFIERS
argument_list|,
name|VALUES
argument_list|,
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|}
block|,
block|{
literal|2
block|,
literal|4
block|,
literal|4
block|}
block|,
block|{
literal|4
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|4
block|,
literal|4
block|,
literal|4
block|}
block|,
block|{
literal|6
block|,
literal|6
block|,
literal|6
block|}
block|,
block|{
literal|6
block|,
literal|7
block|,
literal|7
block|}
block|,
block|{
literal|7
block|,
literal|7
block|,
literal|7
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Everything
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
argument_list|,
name|QUALIFIERS
argument_list|,
name|VALUES
argument_list|,
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|}
block|,
block|{
literal|2
block|,
literal|4
block|,
literal|4
block|}
block|,
block|{
literal|4
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|4
block|,
literal|4
block|,
literal|4
block|}
block|,
block|{
literal|6
block|,
literal|6
block|,
literal|6
block|}
block|,
block|{
literal|6
block|,
literal|7
block|,
literal|7
block|}
block|,
block|{
literal|7
block|,
literal|7
block|,
literal|7
block|}
block|,
block|{
literal|9
block|,
literal|0
block|,
literal|0
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Scan around inserted columns
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify a single column using gets.    * Expects family and qualifier arrays to be valid for at least    * the range:  idx-2< idx< idx+2    */
specifier|private
name|void
name|getVerifySingleColumn
parameter_list|(
name|HTable
name|ht
parameter_list|,
name|byte
index|[]
index|[]
name|ROWS
parameter_list|,
name|int
name|ROWIDX
parameter_list|,
name|byte
index|[]
index|[]
name|FAMILIES
parameter_list|,
name|int
name|FAMILYIDX
parameter_list|,
name|byte
index|[]
index|[]
name|QUALIFIERS
parameter_list|,
name|int
name|QUALIFIERIDX
parameter_list|,
name|byte
index|[]
index|[]
name|VALUES
parameter_list|,
name|int
name|VALUEIDX
parameter_list|)
throws|throws
name|Exception
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|,
name|VALUES
index|[
name|VALUEIDX
index|]
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|,
name|VALUES
index|[
name|VALUEIDX
index|]
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
operator|-
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
operator|+
literal|2
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|,
name|VALUES
index|[
name|VALUEIDX
index|]
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|,
name|VALUES
index|[
name|VALUEIDX
index|]
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|,
name|VALUES
index|[
name|VALUEIDX
index|]
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
operator|+
literal|1
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
operator|-
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
operator|+
literal|2
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|,
name|VALUES
index|[
name|VALUEIDX
index|]
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify a single column using scanners.    * Expects family and qualifier arrays to be valid for at least    * the range:  idx-2 to idx+2    * Expects row array to be valid for at least idx to idx+2    */
specifier|private
name|void
name|scanVerifySingleColumn
parameter_list|(
name|HTable
name|ht
parameter_list|,
name|byte
index|[]
index|[]
name|ROWS
parameter_list|,
name|int
name|ROWIDX
parameter_list|,
name|byte
index|[]
index|[]
name|FAMILIES
parameter_list|,
name|int
name|FAMILYIDX
parameter_list|,
name|byte
index|[]
index|[]
name|QUALIFIERS
parameter_list|,
name|int
name|QUALIFIERIDX
parameter_list|,
name|byte
index|[]
index|[]
name|VALUES
parameter_list|,
name|int
name|VALUEIDX
parameter_list|)
throws|throws
name|Exception
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|Result
name|result
init|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|,
name|VALUES
index|[
name|VALUEIDX
index|]
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|,
name|VALUES
index|[
name|VALUEIDX
index|]
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|ROWS
index|[
name|ROWIDX
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|,
name|VALUES
index|[
name|VALUEIDX
index|]
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|ROWS
index|[
name|ROWIDX
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|,
name|VALUES
index|[
name|VALUEIDX
index|]
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|,
name|VALUES
index|[
name|VALUEIDX
index|]
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|,
name|VALUES
index|[
name|VALUEIDX
index|]
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|,
name|VALUES
index|[
name|VALUEIDX
index|]
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
operator|-
literal|1
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|,
name|VALUES
index|[
name|VALUEIDX
index|]
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify we do not read any values by accident around a single column    * Same requirements as getVerifySingleColumn    */
specifier|private
name|void
name|getVerifySingleEmpty
parameter_list|(
name|HTable
name|ht
parameter_list|,
name|byte
index|[]
index|[]
name|ROWS
parameter_list|,
name|int
name|ROWIDX
parameter_list|,
name|byte
index|[]
index|[]
name|FAMILIES
parameter_list|,
name|int
name|FAMILYIDX
parameter_list|,
name|byte
index|[]
index|[]
name|QUALIFIERS
parameter_list|,
name|int
name|QUALIFIERIDX
parameter_list|)
throws|throws
name|Exception
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|)
decl_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
name|ROWIDX
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|scanVerifySingleEmpty
parameter_list|(
name|HTable
name|ht
parameter_list|,
name|byte
index|[]
index|[]
name|ROWS
parameter_list|,
name|int
name|ROWIDX
parameter_list|,
name|byte
index|[]
index|[]
name|FAMILIES
parameter_list|,
name|int
name|FAMILYIDX
parameter_list|,
name|byte
index|[]
index|[]
name|QUALIFIERS
parameter_list|,
name|int
name|QUALIFIERIDX
parameter_list|)
throws|throws
name|Exception
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
name|ROWIDX
operator|+
literal|1
index|]
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
name|ROWIDX
operator|+
literal|1
index|]
argument_list|,
name|ROWS
index|[
name|ROWIDX
operator|+
literal|2
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// Verifiers
comment|//
specifier|private
name|void
name|assertKey
parameter_list|(
name|KeyValue
name|key
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"Expected row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|row
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|key
operator|.
name|getRow
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|row
argument_list|,
name|key
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|family
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|key
operator|.
name|getFamily
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|family
argument_list|,
name|key
operator|.
name|getFamily
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|qualifier
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|key
operator|.
name|getQualifier
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|qualifier
argument_list|,
name|key
operator|.
name|getQualifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected value ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|value
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got value ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|key
operator|.
name|getValue
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|value
argument_list|,
name|key
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertIncrementKey
parameter_list|(
name|KeyValue
name|key
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
name|value
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"Expected row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|row
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|key
operator|.
name|getRow
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|row
argument_list|,
name|key
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|family
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|key
operator|.
name|getFamily
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|family
argument_list|,
name|key
operator|.
name|getFamily
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|qualifier
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|key
operator|.
name|getQualifier
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|qualifier
argument_list|,
name|key
operator|.
name|getQualifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected value ["
operator|+
name|value
operator|+
literal|"] "
operator|+
literal|"Got value ["
operator|+
name|Bytes
operator|.
name|toLong
argument_list|(
name|key
operator|.
name|getValue
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|Bytes
operator|.
name|toLong
argument_list|(
name|key
operator|.
name|getValue
argument_list|()
argument_list|)
operator|==
name|value
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertNumKeys
parameter_list|(
name|Result
name|result
parameter_list|,
name|int
name|n
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"Expected "
operator|+
name|n
operator|+
literal|" keys but got "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
name|n
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertNResult
parameter_list|(
name|Result
name|result
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
index|[]
name|families
parameter_list|,
name|byte
index|[]
index|[]
name|qualifiers
parameter_list|,
name|byte
index|[]
index|[]
name|values
parameter_list|,
name|int
index|[]
index|[]
name|idxs
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"Expected row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|row
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|row
argument_list|,
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected "
operator|+
name|idxs
operator|.
name|length
operator|+
literal|" keys but result contains "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
name|idxs
operator|.
name|length
argument_list|)
expr_stmt|;
name|KeyValue
index|[]
name|keys
init|=
name|result
operator|.
name|raw
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|family
init|=
name|families
index|[
name|idxs
index|[
name|i
index|]
index|[
literal|0
index|]
index|]
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
name|qualifiers
index|[
name|idxs
index|[
name|i
index|]
index|[
literal|1
index|]
index|]
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|values
index|[
name|idxs
index|[
name|i
index|]
index|[
literal|2
index|]
index|]
decl_stmt|;
name|KeyValue
name|key
init|=
name|keys
index|[
name|i
index|]
decl_stmt|;
name|assertTrue
argument_list|(
literal|"("
operator|+
name|i
operator|+
literal|") Expected family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|family
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|key
operator|.
name|getFamily
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|family
argument_list|,
name|key
operator|.
name|getFamily
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"("
operator|+
name|i
operator|+
literal|") Expected qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|qualifier
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|key
operator|.
name|getQualifier
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|qualifier
argument_list|,
name|key
operator|.
name|getQualifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"("
operator|+
name|i
operator|+
literal|") Expected value ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|value
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got value ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|key
operator|.
name|getValue
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|value
argument_list|,
name|key
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|assertNResult
parameter_list|(
name|Result
name|result
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
index|[]
name|stamps
parameter_list|,
name|byte
index|[]
index|[]
name|values
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
literal|"Expected row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|row
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|row
argument_list|,
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|expectedResults
init|=
name|end
operator|-
name|start
operator|+
literal|1
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedResults
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|KeyValue
index|[]
name|keys
init|=
name|result
operator|.
name|raw
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|value
init|=
name|values
index|[
name|end
operator|-
name|i
index|]
decl_stmt|;
name|long
name|ts
init|=
name|stamps
index|[
name|end
operator|-
name|i
index|]
decl_stmt|;
name|KeyValue
name|key
init|=
name|keys
index|[
name|i
index|]
decl_stmt|;
name|assertTrue
argument_list|(
literal|"("
operator|+
name|i
operator|+
literal|") Expected family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|family
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|key
operator|.
name|getFamily
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|family
argument_list|,
name|key
operator|.
name|getFamily
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"("
operator|+
name|i
operator|+
literal|") Expected qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|qualifier
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|key
operator|.
name|getQualifier
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|qualifier
argument_list|,
name|key
operator|.
name|getQualifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected ts ["
operator|+
name|ts
operator|+
literal|"] "
operator|+
literal|"Got ts ["
operator|+
name|key
operator|.
name|getTimestamp
argument_list|()
operator|+
literal|"]"
argument_list|,
name|ts
operator|==
name|key
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"("
operator|+
name|i
operator|+
literal|") Expected value ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|value
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got value ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|key
operator|.
name|getValue
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|value
argument_list|,
name|key
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Validate that result contains two specified keys, exactly.    * It is assumed key A sorts before key B.    */
specifier|private
name|void
name|assertDoubleResult
parameter_list|(
name|Result
name|result
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|familyA
parameter_list|,
name|byte
index|[]
name|qualifierA
parameter_list|,
name|byte
index|[]
name|valueA
parameter_list|,
name|byte
index|[]
name|familyB
parameter_list|,
name|byte
index|[]
name|qualifierB
parameter_list|,
name|byte
index|[]
name|valueB
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"Expected row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|row
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|row
argument_list|,
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected two keys but result contains "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|KeyValue
index|[]
name|kv
init|=
name|result
operator|.
name|raw
argument_list|()
decl_stmt|;
name|KeyValue
name|kvA
init|=
name|kv
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
literal|"(A) Expected family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|familyA
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|kvA
operator|.
name|getFamily
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|familyA
argument_list|,
name|kvA
operator|.
name|getFamily
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"(A) Expected qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|qualifierA
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|kvA
operator|.
name|getQualifier
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|qualifierA
argument_list|,
name|kvA
operator|.
name|getQualifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"(A) Expected value ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|valueA
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got value ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|kvA
operator|.
name|getValue
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|valueA
argument_list|,
name|kvA
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|KeyValue
name|kvB
init|=
name|kv
index|[
literal|1
index|]
decl_stmt|;
name|assertTrue
argument_list|(
literal|"(B) Expected family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|familyB
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|kvB
operator|.
name|getFamily
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|familyB
argument_list|,
name|kvB
operator|.
name|getFamily
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"(B) Expected qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|qualifierB
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|kvB
operator|.
name|getQualifier
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|qualifierB
argument_list|,
name|kvB
operator|.
name|getQualifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"(B) Expected value ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|valueB
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got value ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|kvB
operator|.
name|getValue
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|valueB
argument_list|,
name|kvB
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertSingleResult
parameter_list|(
name|Result
name|result
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"Expected row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|row
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|row
argument_list|,
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected a single key but result contains "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|KeyValue
name|kv
init|=
name|result
operator|.
name|raw
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|family
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|kv
operator|.
name|getFamily
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|family
argument_list|,
name|kv
operator|.
name|getFamily
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|qualifier
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|kv
operator|.
name|getQualifier
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|qualifier
argument_list|,
name|kv
operator|.
name|getQualifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected value ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|value
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got value ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|kv
operator|.
name|getValue
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|value
argument_list|,
name|kv
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertSingleResult
parameter_list|(
name|Result
name|result
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
name|ts
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"Expected row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|row
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|row
argument_list|,
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected a single key but result contains "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|KeyValue
name|kv
init|=
name|result
operator|.
name|raw
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|family
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|kv
operator|.
name|getFamily
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|family
argument_list|,
name|kv
operator|.
name|getFamily
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|qualifier
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|kv
operator|.
name|getQualifier
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|qualifier
argument_list|,
name|kv
operator|.
name|getQualifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected ts ["
operator|+
name|ts
operator|+
literal|"] "
operator|+
literal|"Got ts ["
operator|+
name|kv
operator|.
name|getTimestamp
argument_list|()
operator|+
literal|"]"
argument_list|,
name|ts
operator|==
name|kv
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected value ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|value
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got value ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|kv
operator|.
name|getValue
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|value
argument_list|,
name|kv
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertEmptyResult
parameter_list|(
name|Result
name|result
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"expected an empty result but result contains "
operator|+
name|result
operator|.
name|size
argument_list|()
operator|+
literal|" keys"
argument_list|,
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertNullResult
parameter_list|(
name|Result
name|result
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"expected null result but received a non-null result"
argument_list|,
name|result
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// Helpers
comment|//
specifier|private
name|Result
name|getSingleScanResult
parameter_list|(
name|HTable
name|ht
parameter_list|,
name|Scan
name|scan
parameter_list|)
throws|throws
name|IOException
block|{
name|ResultScanner
name|scanner
init|=
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|private
name|byte
index|[]
index|[]
name|makeNAscii
parameter_list|(
name|byte
index|[]
name|base
parameter_list|,
name|int
name|n
parameter_list|)
block|{
if|if
condition|(
name|n
operator|>
literal|256
condition|)
block|{
return|return
name|makeNBig
argument_list|(
name|base
argument_list|,
name|n
argument_list|)
return|;
block|}
name|byte
index|[]
index|[]
name|ret
init|=
operator|new
name|byte
index|[
name|n
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|tail
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|ret
index|[
name|i
index|]
operator|=
name|Bytes
operator|.
name|add
argument_list|(
name|base
argument_list|,
name|tail
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|byte
index|[]
index|[]
name|makeN
parameter_list|(
name|byte
index|[]
name|base
parameter_list|,
name|int
name|n
parameter_list|)
block|{
if|if
condition|(
name|n
operator|>
literal|256
condition|)
block|{
return|return
name|makeNBig
argument_list|(
name|base
argument_list|,
name|n
argument_list|)
return|;
block|}
name|byte
index|[]
index|[]
name|ret
init|=
operator|new
name|byte
index|[
name|n
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|ret
index|[
name|i
index|]
operator|=
name|Bytes
operator|.
name|add
argument_list|(
name|base
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
name|i
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|byte
index|[]
index|[]
name|makeNBig
parameter_list|(
name|byte
index|[]
name|base
parameter_list|,
name|int
name|n
parameter_list|)
block|{
name|byte
index|[]
index|[]
name|ret
init|=
operator|new
name|byte
index|[
name|n
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|int
name|byteA
init|=
operator|(
name|i
operator|%
literal|256
operator|)
decl_stmt|;
name|int
name|byteB
init|=
operator|(
name|i
operator|>>
literal|8
operator|)
decl_stmt|;
name|ret
index|[
name|i
index|]
operator|=
name|Bytes
operator|.
name|add
argument_list|(
name|base
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
name|byteB
block|,
operator|(
name|byte
operator|)
name|byteA
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|long
index|[]
name|makeStamps
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|long
index|[]
name|stamps
init|=
operator|new
name|long
index|[
name|n
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
name|stamps
index|[
name|i
index|]
operator|=
name|i
operator|+
literal|1
expr_stmt|;
return|return
name|stamps
return|;
block|}
specifier|private
name|boolean
name|equals
parameter_list|(
name|byte
index|[]
name|left
parameter_list|,
name|byte
index|[]
name|right
parameter_list|)
block|{
if|if
condition|(
name|left
operator|==
literal|null
operator|&&
name|right
operator|==
literal|null
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|left
operator|==
literal|null
operator|&&
name|right
operator|.
name|length
operator|==
literal|0
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|right
operator|==
literal|null
operator|&&
name|left
operator|.
name|length
operator|==
literal|0
condition|)
return|return
literal|true
return|;
return|return
name|Bytes
operator|.
name|equals
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDuplicateVersions
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testDuplicateVersions"
argument_list|)
decl_stmt|;
name|long
index|[]
name|STAMPS
init|=
name|makeStamps
argument_list|(
literal|20
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|VALUES
init|=
name|makeNAscii
argument_list|(
name|VALUE
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|HTable
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLE
argument_list|,
name|FAMILY
argument_list|,
literal|10
argument_list|)
decl_stmt|;
comment|// Insert 4 versions of same column
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Verify we can get each one properly
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
comment|// Verify we don't accidentally get others
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
comment|// Ensure maxVersions in query is respected
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Flush and redo
name|TEST_UTIL
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// Verify we can get each one properly
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
comment|// Verify we don't accidentally get others
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
comment|// Ensure maxVersions in query is respected
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Add some memstore and retest
comment|// Insert 4 more versions of same column and a dupe
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|14
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|6
index|]
argument_list|,
name|VALUES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|7
index|]
argument_list|,
name|VALUES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|8
index|]
argument_list|,
name|VALUES
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Ensure maxVersions in query is respected
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|7
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|14
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|7
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|7
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|14
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|7
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|7
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|14
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|7
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|7
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|14
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|7
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
expr_stmt|;
comment|// Verify we can get each one properly
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|14
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|7
index|]
argument_list|,
name|VALUES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|14
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|7
index|]
argument_list|,
name|VALUES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
comment|// Verify we don't accidentally get others
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
comment|// Ensure maxVersions of table is respected
name|TEST_UTIL
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// Insert 4 more versions of same column and a dupe
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|9
index|]
argument_list|,
name|VALUES
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|11
index|]
argument_list|,
name|VALUES
index|[
literal|11
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|13
index|]
argument_list|,
name|VALUES
index|[
literal|13
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|15
index|]
argument_list|,
name|VALUES
index|[
literal|15
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|7
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|,
name|STAMPS
index|[
literal|9
index|]
block|,
name|STAMPS
index|[
literal|11
index|]
block|,
name|STAMPS
index|[
literal|13
index|]
block|,
name|STAMPS
index|[
literal|15
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|14
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|7
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|,
name|VALUES
index|[
literal|9
index|]
block|,
name|VALUES
index|[
literal|11
index|]
block|,
name|VALUES
index|[
literal|13
index|]
block|,
name|VALUES
index|[
literal|15
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|7
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|,
name|STAMPS
index|[
literal|9
index|]
block|,
name|STAMPS
index|[
literal|11
index|]
block|,
name|STAMPS
index|[
literal|13
index|]
block|,
name|STAMPS
index|[
literal|15
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|14
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|7
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|,
name|VALUES
index|[
literal|9
index|]
block|,
name|VALUES
index|[
literal|11
index|]
block|,
name|VALUES
index|[
literal|13
index|]
block|,
name|VALUES
index|[
literal|15
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|)
expr_stmt|;
comment|// Delete a version in the memstore and a version in a storefile
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|delete
operator|.
name|deleteColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|11
index|]
argument_list|)
expr_stmt|;
name|delete
operator|.
name|deleteColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
comment|// Test that it's gone
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|,
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|,
name|STAMPS
index|[
literal|9
index|]
block|,
name|STAMPS
index|[
literal|13
index|]
block|,
name|STAMPS
index|[
literal|15
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|14
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|,
name|VALUES
index|[
literal|9
index|]
block|,
name|VALUES
index|[
literal|13
index|]
block|,
name|VALUES
index|[
literal|15
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|,
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|,
name|STAMPS
index|[
literal|9
index|]
block|,
name|STAMPS
index|[
literal|13
index|]
block|,
name|STAMPS
index|[
literal|15
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|14
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|,
name|VALUES
index|[
literal|9
index|]
block|,
name|VALUES
index|[
literal|13
index|]
block|,
name|VALUES
index|[
literal|15
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdates
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testUpdates"
argument_list|)
decl_stmt|;
name|HTable
name|hTable
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLE
argument_list|,
name|FAMILY
argument_list|,
literal|10
argument_list|)
decl_stmt|;
comment|// Write a column with values at timestamp 1, 2 and 3
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"myCol"
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|,
literal|1L
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"AAA"
argument_list|)
argument_list|)
expr_stmt|;
name|hTable
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|,
literal|2L
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"BBB"
argument_list|)
argument_list|)
expr_stmt|;
name|hTable
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|,
literal|3L
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"EEE"
argument_list|)
argument_list|)
expr_stmt|;
name|hTable
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
comment|// Check that the column indeed has the right values at timestamps 1 and
comment|// 2
name|Result
name|result
init|=
name|hTable
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|NavigableMap
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
name|navigableMap
init|=
name|result
operator|.
name|getMap
argument_list|()
operator|.
name|get
argument_list|(
name|FAMILY
argument_list|)
operator|.
name|get
argument_list|(
name|qualifier
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"AAA"
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|navigableMap
operator|.
name|get
argument_list|(
literal|1L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"BBB"
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|navigableMap
operator|.
name|get
argument_list|(
literal|2L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Update the value at timestamp 1
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|,
literal|1L
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"CCC"
argument_list|)
argument_list|)
expr_stmt|;
name|hTable
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Update the value at timestamp 2
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|,
literal|2L
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"DDD"
argument_list|)
argument_list|)
expr_stmt|;
name|hTable
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Check that the values at timestamp 2 and 1 got updated
name|result
operator|=
name|hTable
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|navigableMap
operator|=
name|result
operator|.
name|getMap
argument_list|()
operator|.
name|get
argument_list|(
name|FAMILY
argument_list|)
operator|.
name|get
argument_list|(
name|qualifier
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"CCC"
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|navigableMap
operator|.
name|get
argument_list|(
literal|1L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"DDD"
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|navigableMap
operator|.
name|get
argument_list|(
literal|2L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdatesWithMajorCompaction
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tableName
init|=
literal|"testUpdatesWithMajorCompaction"
decl_stmt|;
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|HTable
name|hTable
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLE
argument_list|,
name|FAMILY
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|HBaseAdmin
name|admin
init|=
operator|new
name|HBaseAdmin
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
comment|// Write a column with values at timestamp 1, 2 and 3
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"myCol"
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|,
literal|1L
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"AAA"
argument_list|)
argument_list|)
expr_stmt|;
name|hTable
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|,
literal|2L
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"BBB"
argument_list|)
argument_list|)
expr_stmt|;
name|hTable
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|,
literal|3L
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"EEE"
argument_list|)
argument_list|)
expr_stmt|;
name|hTable
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
comment|// Check that the column indeed has the right values at timestamps 1 and
comment|// 2
name|Result
name|result
init|=
name|hTable
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|NavigableMap
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
name|navigableMap
init|=
name|result
operator|.
name|getMap
argument_list|()
operator|.
name|get
argument_list|(
name|FAMILY
argument_list|)
operator|.
name|get
argument_list|(
name|qualifier
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"AAA"
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|navigableMap
operator|.
name|get
argument_list|(
literal|1L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"BBB"
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|navigableMap
operator|.
name|get
argument_list|(
literal|2L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Trigger a major compaction
name|admin
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|admin
operator|.
name|majorCompact
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|6000
argument_list|)
expr_stmt|;
comment|// Update the value at timestamp 1
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|,
literal|1L
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"CCC"
argument_list|)
argument_list|)
expr_stmt|;
name|hTable
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Update the value at timestamp 2
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|,
literal|2L
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"DDD"
argument_list|)
argument_list|)
expr_stmt|;
name|hTable
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Trigger a major compaction
name|admin
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|admin
operator|.
name|majorCompact
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|6000
argument_list|)
expr_stmt|;
comment|// Check that the values at timestamp 2 and 1 got updated
name|result
operator|=
name|hTable
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|navigableMap
operator|=
name|result
operator|.
name|getMap
argument_list|()
operator|.
name|get
argument_list|(
name|FAMILY
argument_list|)
operator|.
name|get
argument_list|(
name|qualifier
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"CCC"
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|navigableMap
operator|.
name|get
argument_list|(
literal|1L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"DDD"
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|navigableMap
operator|.
name|get
argument_list|(
literal|2L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMajorCompactionBetweenTwoUpdates
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tableName
init|=
literal|"testMajorCompactionBetweenTwoUpdates"
decl_stmt|;
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|HTable
name|hTable
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLE
argument_list|,
name|FAMILY
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|HBaseAdmin
name|admin
init|=
operator|new
name|HBaseAdmin
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
comment|// Write a column with values at timestamp 1, 2 and 3
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row3"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"myCol"
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|,
literal|1L
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"AAA"
argument_list|)
argument_list|)
expr_stmt|;
name|hTable
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|,
literal|2L
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"BBB"
argument_list|)
argument_list|)
expr_stmt|;
name|hTable
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|,
literal|3L
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"EEE"
argument_list|)
argument_list|)
expr_stmt|;
name|hTable
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
comment|// Check that the column indeed has the right values at timestamps 1 and
comment|// 2
name|Result
name|result
init|=
name|hTable
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|NavigableMap
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
name|navigableMap
init|=
name|result
operator|.
name|getMap
argument_list|()
operator|.
name|get
argument_list|(
name|FAMILY
argument_list|)
operator|.
name|get
argument_list|(
name|qualifier
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"AAA"
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|navigableMap
operator|.
name|get
argument_list|(
literal|1L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"BBB"
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|navigableMap
operator|.
name|get
argument_list|(
literal|2L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Trigger a major compaction
name|admin
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|admin
operator|.
name|majorCompact
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|6000
argument_list|)
expr_stmt|;
comment|// Update the value at timestamp 1
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|,
literal|1L
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"CCC"
argument_list|)
argument_list|)
expr_stmt|;
name|hTable
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Trigger a major compaction
name|admin
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|admin
operator|.
name|majorCompact
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|6000
argument_list|)
expr_stmt|;
comment|// Update the value at timestamp 2
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|,
literal|2L
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"DDD"
argument_list|)
argument_list|)
expr_stmt|;
name|hTable
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Trigger a major compaction
name|admin
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|admin
operator|.
name|majorCompact
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|6000
argument_list|)
expr_stmt|;
comment|// Check that the values at timestamp 2 and 1 got updated
name|result
operator|=
name|hTable
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|navigableMap
operator|=
name|result
operator|.
name|getMap
argument_list|()
operator|.
name|get
argument_list|(
name|FAMILY
argument_list|)
operator|.
name|get
argument_list|(
name|qualifier
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"CCC"
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|navigableMap
operator|.
name|get
argument_list|(
literal|1L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"DDD"
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|navigableMap
operator|.
name|get
argument_list|(
literal|2L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGet_EmptyTable
parameter_list|()
throws|throws
name|IOException
block|{
name|HTable
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testGet_EmptyTable"
argument_list|)
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILY
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGet_NonExistentRow
parameter_list|()
throws|throws
name|IOException
block|{
name|HTable
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testGet_NonExistentRow"
argument_list|)
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Row put"
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILY
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|r
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Row retrieved successfully"
argument_list|)
expr_stmt|;
name|byte
index|[]
name|missingrow
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"missingrow"
argument_list|)
decl_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|missingrow
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILY
argument_list|)
expr_stmt|;
name|r
operator|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Row missing as it should be"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPut
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|CONTENTS_FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"contents"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|SMALL_FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"smallfam"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|row2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row2"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"abcd"
argument_list|)
decl_stmt|;
name|HTable
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testPut"
argument_list|)
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|CONTENTS_FAMILY
block|,
name|SMALL_FAMILY
block|}
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|CONTENTS_FAMILY
argument_list|,
literal|null
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row2
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|CONTENTS_FAMILY
argument_list|,
literal|null
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|put
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|put
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|get
argument_list|(
name|CONTENTS_FAMILY
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|KeyValue
name|kv
init|=
name|put
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|get
argument_list|(
name|CONTENTS_FAMILY
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|kv
operator|.
name|getFamily
argument_list|()
argument_list|,
name|CONTENTS_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
comment|// will it return null or an empty byte array?
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|kv
operator|.
name|getQualifier
argument_list|()
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|kv
operator|.
name|getValue
argument_list|()
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|CONTENTS_FAMILY
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
for|for
control|(
name|Result
name|r
range|:
name|scanner
control|)
block|{
for|for
control|(
name|KeyValue
name|key
range|:
name|r
operator|.
name|raw
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|r
operator|.
name|getRow
argument_list|()
argument_list|)
operator|+
literal|": "
operator|+
name|key
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRowsPut
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|CONTENTS_FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"contents"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|SMALL_FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"smallfam"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|NB_BATCH_ROWS
init|=
literal|10
decl_stmt|;
specifier|final
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"abcd"
argument_list|)
decl_stmt|;
name|HTable
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowsPut"
argument_list|)
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|CONTENTS_FAMILY
block|,
name|SMALL_FAMILY
block|}
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Put
argument_list|>
name|rowsUpdate
init|=
operator|new
name|ArrayList
argument_list|<
name|Put
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NB_BATCH_ROWS
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
operator|+
name|i
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|setWriteToWAL
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|CONTENTS_FAMILY
argument_list|,
literal|null
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|rowsUpdate
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|put
argument_list|(
name|rowsUpdate
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|CONTENTS_FAMILY
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|int
name|nbRows
init|=
literal|0
decl_stmt|;
for|for
control|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|Result
name|row
range|:
name|scanner
control|)
name|nbRows
operator|++
expr_stmt|;
name|assertEquals
argument_list|(
name|NB_BATCH_ROWS
argument_list|,
name|nbRows
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRowsPutBufferedOneFlush
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|CONTENTS_FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"contents"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|SMALL_FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"smallfam"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"abcd"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|NB_BATCH_ROWS
init|=
literal|10
decl_stmt|;
name|HTable
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowsPutBufferedOneFlush"
argument_list|)
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|CONTENTS_FAMILY
block|,
name|SMALL_FAMILY
block|}
argument_list|)
decl_stmt|;
name|table
operator|.
name|setAutoFlush
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|Put
argument_list|>
name|rowsUpdate
init|=
operator|new
name|ArrayList
argument_list|<
name|Put
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NB_BATCH_ROWS
operator|*
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
operator|+
name|i
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|setWriteToWAL
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|CONTENTS_FAMILY
argument_list|,
literal|null
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|rowsUpdate
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|put
argument_list|(
name|rowsUpdate
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|CONTENTS_FAMILY
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|int
name|nbRows
init|=
literal|0
decl_stmt|;
for|for
control|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|Result
name|row
range|:
name|scanner
control|)
name|nbRows
operator|++
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nbRows
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|table
operator|.
name|flushCommits
argument_list|()
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|CONTENTS_FAMILY
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|nbRows
operator|=
literal|0
expr_stmt|;
for|for
control|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|Result
name|row
range|:
name|scanner
control|)
name|nbRows
operator|++
expr_stmt|;
name|assertEquals
argument_list|(
name|NB_BATCH_ROWS
operator|*
literal|10
argument_list|,
name|nbRows
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRowsPutBufferedManyManyFlushes
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|CONTENTS_FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"contents"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|SMALL_FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"smallfam"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"abcd"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|NB_BATCH_ROWS
init|=
literal|10
decl_stmt|;
name|HTable
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowsPutBufferedManyManyFlushes"
argument_list|)
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|CONTENTS_FAMILY
block|,
name|SMALL_FAMILY
block|}
argument_list|)
decl_stmt|;
name|table
operator|.
name|setAutoFlush
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|table
operator|.
name|setWriteBufferSize
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|Put
argument_list|>
name|rowsUpdate
init|=
operator|new
name|ArrayList
argument_list|<
name|Put
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NB_BATCH_ROWS
operator|*
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
operator|+
name|i
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|setWriteToWAL
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|CONTENTS_FAMILY
argument_list|,
literal|null
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|rowsUpdate
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|put
argument_list|(
name|rowsUpdate
argument_list|)
expr_stmt|;
name|table
operator|.
name|flushCommits
argument_list|()
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|CONTENTS_FAMILY
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|int
name|nbRows
init|=
literal|0
decl_stmt|;
for|for
control|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|Result
name|row
range|:
name|scanner
control|)
name|nbRows
operator|++
expr_stmt|;
name|assertEquals
argument_list|(
name|NB_BATCH_ROWS
operator|*
literal|10
argument_list|,
name|nbRows
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddKeyValue
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|CONTENTS_FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"contents"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"abcd"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|row2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qf1"
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
decl_stmt|;
comment|// Adding KeyValue with the same row
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|CONTENTS_FAMILY
argument_list|,
name|qualifier
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|boolean
name|ok
init|=
literal|true
decl_stmt|;
try|try
block|{
name|put
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ok
operator|=
literal|false
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|ok
argument_list|)
expr_stmt|;
comment|// Adding KeyValue with the different row
name|kv
operator|=
operator|new
name|KeyValue
argument_list|(
name|row2
argument_list|,
name|CONTENTS_FAMILY
argument_list|,
name|qualifier
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|put
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ok
operator|=
literal|true
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|ok
argument_list|)
expr_stmt|;
block|}
comment|/**    * test for HBASE-737    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testHBase737
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|FAM1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|FAM2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam2"
argument_list|)
decl_stmt|;
comment|// Open table
name|HTable
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testHBase737"
argument_list|)
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|FAM1
block|,
name|FAM2
block|}
argument_list|)
decl_stmt|;
comment|// Insert some values
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAM1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"letters"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"abcdefg"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|i
parameter_list|)
block|{
comment|//ignore
block|}
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAM1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"numbers"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"123456"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|i
parameter_list|)
block|{
comment|//ignore
block|}
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAM2
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"letters"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"hijklmnop"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|long
name|times
index|[]
init|=
operator|new
name|long
index|[
literal|3
index|]
decl_stmt|;
comment|// First scan the memstore
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAM1
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAM2
argument_list|)
expr_stmt|;
name|ResultScanner
name|s
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
try|try
block|{
name|int
name|index
init|=
literal|0
decl_stmt|;
name|Result
name|r
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|r
operator|=
name|s
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|KeyValue
name|key
range|:
name|r
operator|.
name|raw
argument_list|()
control|)
block|{
name|times
index|[
name|index
operator|++
index|]
operator|=
name|key
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|times
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
name|i
operator|+
literal|1
init|;
name|j
operator|<
name|times
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|times
index|[
name|j
index|]
operator|>
name|times
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Flush data to disk and try again
name|TEST_UTIL
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// Reset times
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|times
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|times
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|i
parameter_list|)
block|{
comment|//ignore
block|}
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAM1
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAM2
argument_list|)
expr_stmt|;
name|s
operator|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
try|try
block|{
name|int
name|index
init|=
literal|0
decl_stmt|;
name|Result
name|r
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|r
operator|=
name|s
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|KeyValue
name|key
range|:
name|r
operator|.
name|raw
argument_list|()
control|)
block|{
name|times
index|[
name|index
operator|++
index|]
operator|=
name|key
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|times
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
name|i
operator|+
literal|1
init|;
name|j
operator|<
name|times
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|times
index|[
name|j
index|]
operator|>
name|times
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListTables
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|byte
index|[]
name|t1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testListTables1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|t2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testListTables2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|t3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testListTables3"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|tables
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|t1
block|,
name|t2
block|,
name|t3
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tables
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tables
index|[
name|i
index|]
argument_list|,
name|FAMILY
argument_list|)
expr_stmt|;
block|}
name|HBaseAdmin
name|admin
init|=
operator|new
name|HBaseAdmin
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|HTableDescriptor
index|[]
name|ts
init|=
name|admin
operator|.
name|listTables
argument_list|()
decl_stmt|;
name|HashSet
argument_list|<
name|HTableDescriptor
argument_list|>
name|result
init|=
operator|new
name|HashSet
argument_list|<
name|HTableDescriptor
argument_list|>
argument_list|(
name|ts
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|ts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|int
name|size
init|=
name|result
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|size
operator|>=
name|tables
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tables
operator|.
name|length
operator|&&
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|ts
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|ts
index|[
name|j
index|]
operator|.
name|getName
argument_list|()
argument_list|,
name|tables
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|assertTrue
argument_list|(
literal|"Not found: "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|tables
index|[
name|i
index|]
argument_list|)
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * simple test that just executes parts of the client    * API that accept a pre-created HConnction instance    *    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testUnmanagedHConnection
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testUnmanagedHConnection"
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
name|HConnection
name|conn
init|=
name|HConnectionManager
operator|.
name|createConnection
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|ExecutorService
name|pool
init|=
operator|new
name|ThreadPoolExecutor
argument_list|(
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|SynchronousQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
argument_list|,
operator|new
name|DaemonThreadFactory
argument_list|()
argument_list|)
decl_stmt|;
operator|(
operator|(
name|ThreadPoolExecutor
operator|)
name|pool
operator|)
operator|.
name|allowCoreThreadTimeOut
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|HTable
name|t
init|=
operator|new
name|HTable
argument_list|(
name|tableName
argument_list|,
name|conn
argument_list|,
name|pool
argument_list|)
decl_stmt|;
name|HBaseAdmin
name|ha
init|=
operator|new
name|HBaseAdmin
argument_list|(
name|conn
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ha
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMiscHTableStuff
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|tableAname
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testMiscHTableStuffA"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|tableBname
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testMiscHTableStuffB"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|attrName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"TESTATTR"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|attrValue
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"somevalue"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|HTable
name|a
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableAname
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
decl_stmt|;
name|HTable
name|b
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableBname
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
literal|null
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|a
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// open a new connection to A and a connection to b
name|HTable
name|newA
init|=
operator|new
name|HTable
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|tableAname
argument_list|)
decl_stmt|;
comment|// copy data from A to B
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
name|ResultScanner
name|s
init|=
name|newA
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|Result
name|r
range|:
name|s
control|)
block|{
name|put
operator|=
operator|new
name|Put
argument_list|(
name|r
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|put
operator|.
name|setWriteToWAL
argument_list|(
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
name|r
operator|.
name|raw
argument_list|()
control|)
block|{
name|put
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Opening a new connection to A will cause the tables to be reloaded
name|HTable
name|anotherA
init|=
operator|new
name|HTable
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|tableAname
argument_list|)
decl_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
name|anotherA
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
comment|// We can still access A through newA because it has the table information
comment|// cached. And if it needs to recalibrate, that will cause the information
comment|// to be reloaded.
comment|// Test user metadata
name|HBaseAdmin
name|admin
init|=
operator|new
name|HBaseAdmin
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
comment|// make a modifiable descriptor
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|a
operator|.
name|getTableDescriptor
argument_list|()
argument_list|)
decl_stmt|;
comment|// offline the table
name|admin
operator|.
name|disableTable
argument_list|(
name|tableAname
argument_list|)
expr_stmt|;
comment|// add a user attribute to HTD
name|desc
operator|.
name|setValue
argument_list|(
name|attrName
argument_list|,
name|attrValue
argument_list|)
expr_stmt|;
comment|// add a user attribute to HCD
for|for
control|(
name|HColumnDescriptor
name|c
range|:
name|desc
operator|.
name|getFamilies
argument_list|()
control|)
name|c
operator|.
name|setValue
argument_list|(
name|attrName
argument_list|,
name|attrValue
argument_list|)
expr_stmt|;
comment|// update metadata for all regions of this table
name|admin
operator|.
name|modifyTable
argument_list|(
name|tableAname
argument_list|,
name|desc
argument_list|)
expr_stmt|;
comment|// enable the table
name|admin
operator|.
name|enableTable
argument_list|(
name|tableAname
argument_list|)
expr_stmt|;
comment|// Test that attribute changes were applied
name|desc
operator|=
name|a
operator|.
name|getTableDescriptor
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"wrong table descriptor returned"
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|desc
operator|.
name|getName
argument_list|()
argument_list|,
name|tableAname
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// check HTD attribute
name|value
operator|=
name|desc
operator|.
name|getValue
argument_list|(
name|attrName
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"missing HTD attribute value"
argument_list|,
name|value
operator|==
literal|null
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"HTD attribute value is incorrect"
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|value
argument_list|,
name|attrValue
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
comment|// check HCD attribute
for|for
control|(
name|HColumnDescriptor
name|c
range|:
name|desc
operator|.
name|getFamilies
argument_list|()
control|)
block|{
name|value
operator|=
name|c
operator|.
name|getValue
argument_list|(
name|attrName
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"missing HCD attribute value"
argument_list|,
name|value
operator|==
literal|null
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"HCD attribute value is incorrect"
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|value
argument_list|,
name|attrValue
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetClosestRowBefore
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|tableAname
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testGetClosestRowBefore"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|firstRow
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ro"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|beforeFirstRow
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rn"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|beforeSecondRow
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rov"
argument_list|)
decl_stmt|;
name|HTable
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableAname
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|HConstants
operator|.
name|CATALOG_FAMILY
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"info2"
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|firstRow
argument_list|)
decl_stmt|;
name|Put
name|put2
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|byte
index|[]
name|zero
init|=
operator|new
name|byte
index|[]
block|{
literal|0
block|}
decl_stmt|;
name|byte
index|[]
name|one
init|=
operator|new
name|byte
index|[]
block|{
literal|1
block|}
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
literal|null
argument_list|,
name|zero
argument_list|)
expr_stmt|;
name|put2
operator|.
name|add
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
literal|null
argument_list|,
name|one
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put2
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
literal|null
decl_stmt|;
comment|// Test before first that null is returned
name|result
operator|=
name|table
operator|.
name|getRowOrBefore
argument_list|(
name|beforeFirstRow
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|// Test at first that first is returned
name|result
operator|=
name|table
operator|.
name|getRowOrBefore
argument_list|(
name|firstRow
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|containsColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
literal|null
argument_list|)
argument_list|,
name|zero
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test in between first and second that first is returned
name|result
operator|=
name|table
operator|.
name|getRowOrBefore
argument_list|(
name|beforeSecondRow
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|containsColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
literal|null
argument_list|)
argument_list|,
name|zero
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test at second make sure second is returned
name|result
operator|=
name|table
operator|.
name|getRowOrBefore
argument_list|(
name|row
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|containsColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
literal|null
argument_list|)
argument_list|,
name|one
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test after second, make sure second is returned
name|result
operator|=
name|table
operator|.
name|getRowOrBefore
argument_list|(
name|Bytes
operator|.
name|add
argument_list|(
name|row
argument_list|,
name|one
argument_list|)
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|containsColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
literal|null
argument_list|)
argument_list|,
name|one
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * For HBASE-2156    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testScanVariableReuse
parameter_list|()
throws|throws
name|Exception
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILY
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|ROW
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|scan
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|get
argument_list|(
name|FAMILY
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILY
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|scan
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|get
argument_list|(
name|FAMILY
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|scan
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|FAMILY
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRowMutation
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testRowMutation"
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|TABLENAME
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowMutation"
argument_list|)
decl_stmt|;
name|HTable
name|t
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLENAME
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|QUALIFIERS
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"b"
argument_list|)
block|}
decl_stmt|;
name|RowMutation
name|arm
init|=
operator|new
name|RowMutation
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|arm
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|t
operator|.
name|mutateRow
argument_list|(
name|arm
argument_list|)
expr_stmt|;
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|Result
name|r
init|=
name|t
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|VALUE
argument_list|,
name|r
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|arm
operator|=
operator|new
name|RowMutation
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|1
index|]
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|arm
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|d
operator|.
name|deleteColumns
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|arm
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|t
operator|.
name|batch
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|Row
operator|)
name|arm
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|=
name|t
operator|.
name|get
argument_list|(
name|g
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|VALUE
argument_list|,
name|r
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|1
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|r
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAppend
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testAppend"
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|TABLENAME
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testAppend"
argument_list|)
decl_stmt|;
name|HTable
name|t
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLENAME
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
name|byte
index|[]
name|v1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"42"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|v2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"23"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|QUALIFIERS
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"b"
argument_list|)
block|}
decl_stmt|;
name|Append
name|a
init|=
operator|new
name|Append
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|a
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|,
name|v1
argument_list|)
expr_stmt|;
name|a
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|1
index|]
argument_list|,
name|v2
argument_list|)
expr_stmt|;
name|a
operator|.
name|setReturnResults
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|t
operator|.
name|append
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|=
operator|new
name|Append
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|a
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|,
name|v2
argument_list|)
expr_stmt|;
name|a
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|1
index|]
argument_list|,
name|v1
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|t
operator|.
name|append
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|Bytes
operator|.
name|add
argument_list|(
name|v1
argument_list|,
name|v2
argument_list|)
argument_list|,
name|r
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|Bytes
operator|.
name|add
argument_list|(
name|v2
argument_list|,
name|v1
argument_list|)
argument_list|,
name|r
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|1
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncrement
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testIncrement"
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|TABLENAME
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testIncrement"
argument_list|)
decl_stmt|;
name|HTable
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLENAME
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|ROWS
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"b"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"d"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"e"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"g"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"h"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"i"
argument_list|)
block|}
decl_stmt|;
name|byte
index|[]
index|[]
name|QUALIFIERS
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"b"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"d"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"e"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"g"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"h"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"i"
argument_list|)
block|}
decl_stmt|;
comment|// Do some simple single-column increments
comment|// First with old API
name|ht
operator|.
name|incrementColumnValue
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ht
operator|.
name|incrementColumnValue
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|1
index|]
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|ht
operator|.
name|incrementColumnValue
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|ht
operator|.
name|incrementColumnValue
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|3
index|]
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// Now increment things incremented with old and do some new
name|Increment
name|inc
init|=
operator|new
name|Increment
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|inc
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|1
index|]
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|inc
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|3
index|]
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|inc
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ht
operator|.
name|increment
argument_list|(
name|inc
argument_list|)
expr_stmt|;
comment|// Verify expected results
name|Result
name|r
init|=
name|ht
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
argument_list|)
decl_stmt|;
name|KeyValue
index|[]
name|kvs
init|=
name|r
operator|.
name|raw
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertIncrementKey
argument_list|(
name|kvs
index|[
literal|0
index|]
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertIncrementKey
argument_list|(
name|kvs
index|[
literal|1
index|]
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|1
index|]
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertIncrementKey
argument_list|(
name|kvs
index|[
literal|2
index|]
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertIncrementKey
argument_list|(
name|kvs
index|[
literal|3
index|]
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|3
index|]
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertIncrementKey
argument_list|(
name|kvs
index|[
literal|4
index|]
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Now try multiple columns by different amounts
name|inc
operator|=
operator|new
name|Increment
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|QUALIFIERS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|inc
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|ht
operator|.
name|increment
argument_list|(
name|inc
argument_list|)
expr_stmt|;
comment|// Verify
name|r
operator|=
name|ht
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|=
name|r
operator|.
name|raw
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|QUALIFIERS
operator|.
name|length
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|QUALIFIERS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertIncrementKey
argument_list|(
name|kvs
index|[
name|i
index|]
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Re-increment them
name|inc
operator|=
operator|new
name|Increment
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|QUALIFIERS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|inc
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|ht
operator|.
name|increment
argument_list|(
name|inc
argument_list|)
expr_stmt|;
comment|// Verify
name|r
operator|=
name|ht
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|=
name|r
operator|.
name|raw
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|QUALIFIERS
operator|.
name|length
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|QUALIFIERS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertIncrementKey
argument_list|(
name|kvs
index|[
name|i
index|]
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
literal|2
operator|*
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This test demonstrates how we use ThreadPoolExecutor.    * It needs to show that we only use as many threads in the pool as we have    * region servers. To do this, instead of doing real requests, we use a    * SynchronousQueue where each put must wait for a take (and vice versa)    * so that way we have full control of the number of active threads.    * @throws IOException    * @throws InterruptedException    */
annotation|@
name|Test
specifier|public
name|void
name|testPoolBehavior
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|byte
index|[]
name|someBytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"pool"
argument_list|)
decl_stmt|;
name|HTable
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|someBytes
argument_list|,
name|someBytes
argument_list|)
decl_stmt|;
name|ThreadPoolExecutor
name|pool
init|=
operator|(
name|ThreadPoolExecutor
operator|)
name|table
operator|.
name|getPool
argument_list|()
decl_stmt|;
comment|// Make sure that the TPE stars with a core pool size of one and 0
comment|// initialized worker threads
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pool
operator|.
name|getCorePoolSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|pool
operator|.
name|getPoolSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Build a SynchronousQueue that we use for thread coordination
specifier|final
name|SynchronousQueue
argument_list|<
name|Object
argument_list|>
name|queue
init|=
operator|new
name|SynchronousQueue
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Thread
argument_list|>
name|threads
init|=
operator|new
name|ArrayList
argument_list|<
name|Thread
argument_list|>
argument_list|(
literal|5
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|threads
operator|.
name|add
argument_list|(
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
comment|// The thread blocks here until we decide to let it go
name|queue
operator|.
name|take
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{ }
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|// First, add two threads and make sure the pool size follows
name|pool
operator|.
name|submit
argument_list|(
name|threads
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pool
operator|.
name|getPoolSize
argument_list|()
argument_list|)
expr_stmt|;
name|pool
operator|.
name|submit
argument_list|(
name|threads
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|pool
operator|.
name|getPoolSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Next, terminate those threads and then make sure the pool is still the
comment|// same size
name|queue
operator|.
name|put
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|threads
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|queue
operator|.
name|put
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|threads
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|pool
operator|.
name|getPoolSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now let's simulate adding a RS meaning that we'll go up to three
comment|// concurrent threads. The pool should not grow larger than three.
name|pool
operator|.
name|submit
argument_list|(
name|threads
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|pool
operator|.
name|submit
argument_list|(
name|threads
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|pool
operator|.
name|submit
argument_list|(
name|threads
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|pool
operator|.
name|getPoolSize
argument_list|()
argument_list|)
expr_stmt|;
name|queue
operator|.
name|put
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|queue
operator|.
name|put
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|queue
operator|.
name|put
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClientPoolRoundRobin
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testClientPoolRoundRobin"
argument_list|)
decl_stmt|;
name|int
name|poolSize
init|=
literal|3
decl_stmt|;
name|int
name|numVersions
init|=
name|poolSize
operator|*
literal|2
decl_stmt|;
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_IPC_POOL_TYPE
argument_list|,
literal|"round-robin"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_IPC_POOL_SIZE
argument_list|,
name|poolSize
argument_list|)
expr_stmt|;
name|HTable
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|FAMILY
block|}
argument_list|,
name|conf
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|table
operator|.
name|setAutoFlush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|versions
init|=
literal|1
init|;
name|versions
operator|<=
name|numVersions
condition|;
name|versions
operator|++
control|)
block|{
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|NavigableMap
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
name|navigableMap
init|=
name|result
operator|.
name|getMap
argument_list|()
operator|.
name|get
argument_list|(
name|FAMILY
argument_list|)
operator|.
name|get
argument_list|(
name|QUALIFIER
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"The number of versions of '"
operator|+
name|FAMILY
operator|+
literal|":"
operator|+
name|QUALIFIER
operator|+
literal|" did not match "
operator|+
name|versions
argument_list|,
name|versions
argument_list|,
name|navigableMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
range|:
name|navigableMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
literal|"The value at time "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|" did not match what was put"
argument_list|,
name|Bytes
operator|.
name|equals
argument_list|(
name|VALUE
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClientPoolThreadLocal
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testClientPoolThreadLocal"
argument_list|)
decl_stmt|;
name|int
name|poolSize
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
name|int
name|numVersions
init|=
literal|3
decl_stmt|;
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_IPC_POOL_TYPE
argument_list|,
literal|"thread-local"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_IPC_POOL_SIZE
argument_list|,
name|poolSize
argument_list|)
expr_stmt|;
specifier|final
name|HTable
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|FAMILY
block|}
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|table
operator|.
name|setAutoFlush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
specifier|final
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|versions
init|=
literal|1
init|;
name|versions
operator|<=
name|numVersions
condition|;
name|versions
operator|++
control|)
block|{
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|NavigableMap
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
name|navigableMap
init|=
name|result
operator|.
name|getMap
argument_list|()
operator|.
name|get
argument_list|(
name|FAMILY
argument_list|)
operator|.
name|get
argument_list|(
name|QUALIFIER
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"The number of versions of '"
operator|+
name|FAMILY
operator|+
literal|":"
operator|+
name|QUALIFIER
operator|+
literal|" did not match "
operator|+
name|versions
argument_list|,
name|versions
argument_list|,
name|navigableMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
range|:
name|navigableMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
literal|"The value at time "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|" did not match what was put"
argument_list|,
name|Bytes
operator|.
name|equals
argument_list|(
name|VALUE
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|Object
name|waitLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|ExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|numVersions
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|versions
init|=
name|numVersions
init|;
name|versions
operator|<
name|numVersions
operator|*
literal|2
condition|;
name|versions
operator|++
control|)
block|{
specifier|final
name|int
name|versionsCopy
init|=
name|versions
decl_stmt|;
name|executorService
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
block|{
try|try
block|{
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|NavigableMap
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
name|navigableMap
init|=
name|result
operator|.
name|getMap
argument_list|()
operator|.
name|get
argument_list|(
name|FAMILY
argument_list|)
operator|.
name|get
argument_list|(
name|QUALIFIER
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"The number of versions of '"
operator|+
name|FAMILY
operator|+
literal|":"
operator|+
name|QUALIFIER
operator|+
literal|" did not match "
operator|+
name|versionsCopy
argument_list|,
name|versionsCopy
argument_list|,
name|navigableMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
range|:
name|navigableMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
literal|"The value at time "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|" did not match what was put"
argument_list|,
name|Bytes
operator|.
name|equals
argument_list|(
name|VALUE
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|waitLock
init|)
block|{
name|waitLock
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{           }
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|waitLock
init|)
block|{
name|waitLock
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
name|executorService
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCheckAndPut
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|anotherrow
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"anotherrow"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|value2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"abcd"
argument_list|)
decl_stmt|;
name|HTable
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testCheckAndPut"
argument_list|)
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|FAMILY
block|}
argument_list|)
decl_stmt|;
name|Put
name|put1
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put1
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
comment|// row doesn't exist, so using non-null value should be considered "not match".
name|boolean
name|ok
init|=
name|table
operator|.
name|checkAndPut
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|,
name|put1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ok
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// row doesn't exist, so using "null" to check for existence should be considered "match".
name|ok
operator|=
name|table
operator|.
name|checkAndPut
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
literal|null
argument_list|,
name|put1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ok
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// row now exists, so using "null" to check for existence should be considered "not match".
name|ok
operator|=
name|table
operator|.
name|checkAndPut
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
literal|null
argument_list|,
name|put1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ok
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Put
name|put2
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put2
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|value2
argument_list|)
expr_stmt|;
comment|// row now exists, use the matching value to check
name|ok
operator|=
name|table
operator|.
name|checkAndPut
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|,
name|put2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ok
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Put
name|put3
init|=
operator|new
name|Put
argument_list|(
name|anotherrow
argument_list|)
decl_stmt|;
name|put3
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
comment|// try to do CheckAndPut on different rows
try|try
block|{
name|ok
operator|=
name|table
operator|.
name|checkAndPut
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|value2
argument_list|,
name|put3
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"trying to check and modify different rows should have failed."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{}
block|}
comment|/**   * Test ScanMetrics   * @throws Exception   */
annotation|@
name|Test
specifier|public
name|void
name|testScanMetrics
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|TABLENAME
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testScanMetrics"
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLENAME
argument_list|,
name|FAMILY
argument_list|)
expr_stmt|;
comment|// Set up test table:
comment|// Create table:
name|HTable
name|ht
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|TABLENAME
argument_list|)
decl_stmt|;
comment|// Create multiple regions for this table
name|int
name|numOfRegions
init|=
name|TEST_UTIL
operator|.
name|createMultiRegions
argument_list|(
name|ht
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
name|Scan
name|scan1
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|ht
operator|.
name|getScanner
argument_list|(
name|scan1
argument_list|)
control|)
block|{     }
comment|// by default, scan metrics collection is turned off
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|scan1
operator|.
name|getAttribute
argument_list|(
name|Scan
operator|.
name|SCAN_ATTRIBUTES_METRICS_DATA
argument_list|)
argument_list|)
expr_stmt|;
comment|// turn on scan metrics
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setAttribute
argument_list|(
name|Scan
operator|.
name|SCAN_ATTRIBUTES_METRICS_ENABLE
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
control|)
block|{     }
name|byte
index|[]
name|serializedMetrics
init|=
name|scan
operator|.
name|getAttribute
argument_list|(
name|Scan
operator|.
name|SCAN_ATTRIBUTES_METRICS_DATA
argument_list|)
decl_stmt|;
name|DataInputBuffer
name|in
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
name|in
operator|.
name|reset
argument_list|(
name|serializedMetrics
argument_list|,
literal|0
argument_list|,
name|serializedMetrics
operator|.
name|length
argument_list|)
expr_stmt|;
name|ScanMetrics
name|scanMetrics
init|=
operator|new
name|ScanMetrics
argument_list|()
decl_stmt|;
name|scanMetrics
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numOfRegions
argument_list|,
name|scanMetrics
operator|.
name|countOfRegions
operator|.
name|getCurrentIntervalValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests that cache on write works all the way up from the client-side.    *    * Performs inserts, flushes, and compactions, verifying changes in the block    * cache along the way.    *    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testCacheOnWriteEvictOnClose
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testCOWEOCfromClient"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"data"
argument_list|)
decl_stmt|;
name|HTable
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|FAMILY
block|}
argument_list|)
decl_stmt|;
comment|// get the block cache and region
name|String
name|regionName
init|=
name|table
operator|.
name|getRegionLocations
argument_list|()
operator|.
name|firstKey
argument_list|()
operator|.
name|getEncodedName
argument_list|()
decl_stmt|;
name|HRegion
name|region
init|=
name|TEST_UTIL
operator|.
name|getRSForFirstRegionInTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|getFromOnlineRegions
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
name|Store
name|store
init|=
name|region
operator|.
name|getStores
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|CacheConfig
name|cacheConf
init|=
name|store
operator|.
name|getCacheConfig
argument_list|()
decl_stmt|;
name|cacheConf
operator|.
name|setCacheDataOnWrite
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cacheConf
operator|.
name|setEvictOnClose
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|BlockCache
name|cache
init|=
name|cacheConf
operator|.
name|getBlockCache
argument_list|()
decl_stmt|;
comment|// establish baseline stats
name|long
name|startBlockCount
init|=
name|cache
operator|.
name|getBlockCount
argument_list|()
decl_stmt|;
name|long
name|startBlockHits
init|=
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getHitCount
argument_list|()
decl_stmt|;
name|long
name|startBlockMiss
init|=
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getMissCount
argument_list|()
decl_stmt|;
comment|// insert data
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
comment|// data was in memstore so don't expect any changes
name|assertEquals
argument_list|(
name|startBlockCount
argument_list|,
name|cache
operator|.
name|getBlockCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|startBlockHits
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getHitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|startBlockMiss
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getMissCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// flush the data
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Flushing cache"
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
comment|// expect one more block in cache, no change in hits/misses
name|long
name|expectedBlockCount
init|=
name|startBlockCount
operator|+
literal|1
decl_stmt|;
name|long
name|expectedBlockHits
init|=
name|startBlockHits
decl_stmt|;
name|long
name|expectedBlockMiss
init|=
name|startBlockMiss
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedBlockCount
argument_list|,
name|cache
operator|.
name|getBlockCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedBlockHits
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getHitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedBlockMiss
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getMissCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// read the data and expect same blocks, one new hit, no misses
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedBlockCount
argument_list|,
name|cache
operator|.
name|getBlockCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|++
name|expectedBlockHits
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getHitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedBlockMiss
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getMissCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// insert a second column, read the row, no new blocks, one new hit
name|byte
index|[]
name|QUALIFIER2
init|=
name|Bytes
operator|.
name|add
argument_list|(
name|QUALIFIER
argument_list|,
name|QUALIFIER
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data2
init|=
name|Bytes
operator|.
name|add
argument_list|(
name|data
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER2
argument_list|,
name|data2
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER2
argument_list|)
argument_list|,
name|data2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedBlockCount
argument_list|,
name|cache
operator|.
name|getBlockCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|++
name|expectedBlockHits
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getHitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedBlockMiss
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getMissCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// flush, one new block
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Flushing cache"
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
operator|++
name|expectedBlockCount
argument_list|,
name|cache
operator|.
name|getBlockCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedBlockHits
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getHitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedBlockMiss
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getMissCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// compact, net minus two blocks, two hits, no misses
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Compacting"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|store
operator|.
name|getNumberOfstorefiles
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|triggerMajorCompaction
argument_list|()
expr_stmt|;
name|region
operator|.
name|compactStores
argument_list|()
expr_stmt|;
name|waitForStoreFileCount
argument_list|(
name|store
argument_list|,
literal|1
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
comment|// wait 10 seconds max
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|store
operator|.
name|getNumberOfstorefiles
argument_list|()
argument_list|)
expr_stmt|;
name|expectedBlockCount
operator|-=
literal|2
expr_stmt|;
comment|// evicted two blocks, cached none
name|assertEquals
argument_list|(
name|expectedBlockCount
argument_list|,
name|cache
operator|.
name|getBlockCount
argument_list|()
argument_list|)
expr_stmt|;
name|expectedBlockHits
operator|+=
literal|2
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedBlockMiss
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getMissCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedBlockHits
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getHitCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// read the row, this should be a cache miss because we don't cache data
comment|// blocks on compaction
name|r
operator|=
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER2
argument_list|)
argument_list|,
name|data2
argument_list|)
argument_list|)
expr_stmt|;
name|expectedBlockCount
operator|+=
literal|1
expr_stmt|;
comment|// cached one data block
name|assertEquals
argument_list|(
name|expectedBlockCount
argument_list|,
name|cache
operator|.
name|getBlockCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedBlockHits
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getHitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|++
name|expectedBlockMiss
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getMissCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|waitForStoreFileCount
parameter_list|(
name|Store
name|store
parameter_list|,
name|int
name|count
parameter_list|,
name|int
name|timeout
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
name|start
operator|+
name|timeout
operator|>
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|&&
name|store
operator|.
name|getNumberOfstorefiles
argument_list|()
operator|!=
name|count
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"start="
operator|+
name|start
operator|+
literal|", now="
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|", cur="
operator|+
name|store
operator|.
name|getNumberOfstorefiles
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|count
argument_list|,
name|store
operator|.
name|getNumberOfstorefiles
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|/**    * Tests the non cached version of getRegionLocation by moving a region.    */
specifier|public
name|void
name|testNonCachedGetRegionLocation
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test Initialization.
name|String
name|tableName
init|=
literal|"testNonCachedGetRegionLocation"
decl_stmt|;
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|byte
index|[]
name|family1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|family2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f2"
argument_list|)
decl_stmt|;
name|HTable
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLE
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|family1
block|,
name|family2
block|}
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|HBaseAdmin
name|admin
init|=
operator|new
name|HBaseAdmin
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|regionsMap
init|=
name|table
operator|.
name|getRegionLocations
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|regionsMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|HRegionInfo
name|regionInfo
init|=
name|regionsMap
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|ServerName
name|addrBefore
init|=
name|regionsMap
operator|.
name|get
argument_list|(
name|regionInfo
argument_list|)
decl_stmt|;
comment|// Verify region location before move.
name|HServerAddress
name|addrCache
init|=
name|table
operator|.
name|getRegionLocation
argument_list|(
name|regionInfo
operator|.
name|getStartKey
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|getServerAddress
argument_list|()
decl_stmt|;
name|HServerAddress
name|addrNoCache
init|=
name|table
operator|.
name|getRegionLocation
argument_list|(
name|regionInfo
operator|.
name|getStartKey
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|getServerAddress
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|addrBefore
operator|.
name|getPort
argument_list|()
argument_list|,
name|addrCache
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|addrBefore
operator|.
name|getPort
argument_list|()
argument_list|,
name|addrNoCache
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|ServerName
name|addrAfter
init|=
literal|null
decl_stmt|;
comment|// Now move the region to a different server.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SLAVES
condition|;
name|i
operator|++
control|)
block|{
name|HRegionServer
name|regionServer
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ServerName
name|addr
init|=
name|regionServer
operator|.
name|getServerName
argument_list|()
decl_stmt|;
if|if
condition|(
name|addr
operator|.
name|getPort
argument_list|()
operator|!=
name|addrBefore
operator|.
name|getPort
argument_list|()
condition|)
block|{
name|admin
operator|.
name|move
argument_list|(
name|regionInfo
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|addr
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Wait for the region to move.
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|addrAfter
operator|=
name|addr
expr_stmt|;
break|break;
block|}
block|}
comment|// Verify the region was moved.
name|addrCache
operator|=
name|table
operator|.
name|getRegionLocation
argument_list|(
name|regionInfo
operator|.
name|getStartKey
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|getServerAddress
argument_list|()
expr_stmt|;
name|addrNoCache
operator|=
name|table
operator|.
name|getRegionLocation
argument_list|(
name|regionInfo
operator|.
name|getStartKey
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|getServerAddress
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|addrAfter
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|addrAfter
operator|.
name|getPort
argument_list|()
operator|!=
name|addrCache
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|addrAfter
operator|.
name|getPort
argument_list|()
argument_list|,
name|addrNoCache
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Rule
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ResourceCheckerJUnitRule
name|cu
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ResourceCheckerJUnitRule
argument_list|()
decl_stmt|;
block|}
end_class

end_unit

