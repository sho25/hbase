begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2009 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * Run tests related to {@link TimestampsFilter} using HBase client APIs.  * Sets up the HBase mini cluster once at start. Each creates a table  * named for the method and does its stuff against that.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|LargeTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestMultipleTimestamps
block|{
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
block|}
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Nothing to do.
block|}
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Nothing to do.
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReseeksWithOneColumnMiltipleTimestamp
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testReseeksWithOne"
operator|+
literal|"ColumnMiltipleTimestamps"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"event_log"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|FAMILIES
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|FAMILY
block|}
decl_stmt|;
comment|// create table; set versions to max...
name|HTable
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLE
argument_list|,
name|FAMILIES
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|Integer
index|[]
name|putRows
init|=
operator|new
name|Integer
index|[]
block|{
literal|1
block|,
literal|3
block|,
literal|5
block|,
literal|7
block|}
decl_stmt|;
name|Integer
index|[]
name|putColumns
init|=
operator|new
name|Integer
index|[]
block|{
literal|1
block|,
literal|3
block|,
literal|5
block|}
decl_stmt|;
name|Long
index|[]
name|putTimestamps
init|=
operator|new
name|Long
index|[]
block|{
literal|1L
block|,
literal|2L
block|,
literal|3L
block|,
literal|4L
block|,
literal|5L
block|}
decl_stmt|;
name|Integer
index|[]
name|scanRows
init|=
operator|new
name|Integer
index|[]
block|{
literal|3
block|,
literal|5
block|}
decl_stmt|;
name|Integer
index|[]
name|scanColumns
init|=
operator|new
name|Integer
index|[]
block|{
literal|3
block|}
decl_stmt|;
name|Long
index|[]
name|scanTimestamps
init|=
operator|new
name|Long
index|[]
block|{
literal|3L
block|,
literal|4L
block|}
decl_stmt|;
name|int
name|scanMaxVersions
init|=
literal|2
decl_stmt|;
name|put
argument_list|(
name|ht
argument_list|,
name|FAMILY
argument_list|,
name|putRows
argument_list|,
name|putColumns
argument_list|,
name|putTimestamps
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|flush
argument_list|(
name|TABLE
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|scan
argument_list|(
name|ht
argument_list|,
name|FAMILY
argument_list|,
name|scanRows
argument_list|,
name|scanColumns
argument_list|,
name|scanTimestamps
argument_list|,
name|scanMaxVersions
argument_list|)
decl_stmt|;
name|KeyValue
index|[]
name|kvs
decl_stmt|;
name|kvs
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|.
name|raw
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
name|checkOneCell
argument_list|(
name|kvs
index|[
literal|0
index|]
argument_list|,
name|FAMILY
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|checkOneCell
argument_list|(
name|kvs
index|[
literal|1
index|]
argument_list|,
name|FAMILY
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|kvs
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|.
name|raw
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
name|checkOneCell
argument_list|(
name|kvs
index|[
literal|0
index|]
argument_list|,
name|FAMILY
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|checkOneCell
argument_list|(
name|kvs
index|[
literal|1
index|]
argument_list|,
name|FAMILY
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReseeksWithMultipleColumnOneTimestamp
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testReseeksWithMultipleColumnOneTimestamp"
argument_list|)
expr_stmt|;
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testReseeksWithMultiple"
operator|+
literal|"ColumnOneTimestamps"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"event_log"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|FAMILIES
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|FAMILY
block|}
decl_stmt|;
comment|// create table; set versions to max...
name|HTable
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLE
argument_list|,
name|FAMILIES
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|Integer
index|[]
name|putRows
init|=
operator|new
name|Integer
index|[]
block|{
literal|1
block|,
literal|3
block|,
literal|5
block|,
literal|7
block|}
decl_stmt|;
name|Integer
index|[]
name|putColumns
init|=
operator|new
name|Integer
index|[]
block|{
literal|1
block|,
literal|3
block|,
literal|5
block|}
decl_stmt|;
name|Long
index|[]
name|putTimestamps
init|=
operator|new
name|Long
index|[]
block|{
literal|1L
block|,
literal|2L
block|,
literal|3L
block|,
literal|4L
block|,
literal|5L
block|}
decl_stmt|;
name|Integer
index|[]
name|scanRows
init|=
operator|new
name|Integer
index|[]
block|{
literal|3
block|,
literal|5
block|}
decl_stmt|;
name|Integer
index|[]
name|scanColumns
init|=
operator|new
name|Integer
index|[]
block|{
literal|3
block|,
literal|4
block|}
decl_stmt|;
name|Long
index|[]
name|scanTimestamps
init|=
operator|new
name|Long
index|[]
block|{
literal|3L
block|}
decl_stmt|;
name|int
name|scanMaxVersions
init|=
literal|2
decl_stmt|;
name|put
argument_list|(
name|ht
argument_list|,
name|FAMILY
argument_list|,
name|putRows
argument_list|,
name|putColumns
argument_list|,
name|putTimestamps
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|flush
argument_list|(
name|TABLE
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|scan
argument_list|(
name|ht
argument_list|,
name|FAMILY
argument_list|,
name|scanRows
argument_list|,
name|scanColumns
argument_list|,
name|scanTimestamps
argument_list|,
name|scanMaxVersions
argument_list|)
decl_stmt|;
name|KeyValue
index|[]
name|kvs
decl_stmt|;
name|kvs
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|.
name|raw
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
name|checkOneCell
argument_list|(
name|kvs
index|[
literal|0
index|]
argument_list|,
name|FAMILY
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|kvs
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|.
name|raw
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
name|checkOneCell
argument_list|(
name|kvs
index|[
literal|0
index|]
argument_list|,
name|FAMILY
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReseeksWithMultipleColumnMultipleTimestamp
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testReseeksWithMultipleColumnMultipleTimestamp"
argument_list|)
expr_stmt|;
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testReseeksWithMultiple"
operator|+
literal|"ColumnMiltipleTimestamps"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"event_log"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|FAMILIES
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|FAMILY
block|}
decl_stmt|;
comment|// create table; set versions to max...
name|HTable
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLE
argument_list|,
name|FAMILIES
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|Integer
index|[]
name|putRows
init|=
operator|new
name|Integer
index|[]
block|{
literal|1
block|,
literal|3
block|,
literal|5
block|,
literal|7
block|}
decl_stmt|;
name|Integer
index|[]
name|putColumns
init|=
operator|new
name|Integer
index|[]
block|{
literal|1
block|,
literal|3
block|,
literal|5
block|}
decl_stmt|;
name|Long
index|[]
name|putTimestamps
init|=
operator|new
name|Long
index|[]
block|{
literal|1L
block|,
literal|2L
block|,
literal|3L
block|,
literal|4L
block|,
literal|5L
block|}
decl_stmt|;
name|Integer
index|[]
name|scanRows
init|=
operator|new
name|Integer
index|[]
block|{
literal|5
block|,
literal|7
block|}
decl_stmt|;
name|Integer
index|[]
name|scanColumns
init|=
operator|new
name|Integer
index|[]
block|{
literal|3
block|,
literal|4
block|,
literal|5
block|}
decl_stmt|;
name|Long
index|[]
name|scanTimestamps
init|=
operator|new
name|Long
index|[]
block|{
literal|2l
block|,
literal|3L
block|}
decl_stmt|;
name|int
name|scanMaxVersions
init|=
literal|2
decl_stmt|;
name|put
argument_list|(
name|ht
argument_list|,
name|FAMILY
argument_list|,
name|putRows
argument_list|,
name|putColumns
argument_list|,
name|putTimestamps
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|flush
argument_list|(
name|TABLE
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|scan
argument_list|(
name|ht
argument_list|,
name|FAMILY
argument_list|,
name|scanRows
argument_list|,
name|scanColumns
argument_list|,
name|scanTimestamps
argument_list|,
name|scanMaxVersions
argument_list|)
decl_stmt|;
name|KeyValue
index|[]
name|kvs
decl_stmt|;
name|kvs
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|.
name|raw
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
name|checkOneCell
argument_list|(
name|kvs
index|[
literal|0
index|]
argument_list|,
name|FAMILY
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|checkOneCell
argument_list|(
name|kvs
index|[
literal|1
index|]
argument_list|,
name|FAMILY
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkOneCell
argument_list|(
name|kvs
index|[
literal|2
index|]
argument_list|,
name|FAMILY
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|checkOneCell
argument_list|(
name|kvs
index|[
literal|3
index|]
argument_list|,
name|FAMILY
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|kvs
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|.
name|raw
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
name|checkOneCell
argument_list|(
name|kvs
index|[
literal|0
index|]
argument_list|,
name|FAMILY
argument_list|,
literal|7
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|checkOneCell
argument_list|(
name|kvs
index|[
literal|1
index|]
argument_list|,
name|FAMILY
argument_list|,
literal|7
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkOneCell
argument_list|(
name|kvs
index|[
literal|2
index|]
argument_list|,
name|FAMILY
argument_list|,
literal|7
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|checkOneCell
argument_list|(
name|kvs
index|[
literal|3
index|]
argument_list|,
name|FAMILY
argument_list|,
literal|7
argument_list|,
literal|5
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReseeksWithMultipleFiles
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testReseeksWithMultipleFiles"
argument_list|)
expr_stmt|;
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testReseeksWithMultipleFiles"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"event_log"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|FAMILIES
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|FAMILY
block|}
decl_stmt|;
comment|// create table; set versions to max...
name|HTable
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLE
argument_list|,
name|FAMILIES
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|Integer
index|[]
name|putRows1
init|=
operator|new
name|Integer
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
decl_stmt|;
name|Integer
index|[]
name|putColumns1
init|=
operator|new
name|Integer
index|[]
block|{
literal|2
block|,
literal|5
block|,
literal|6
block|}
decl_stmt|;
name|Long
index|[]
name|putTimestamps1
init|=
operator|new
name|Long
index|[]
block|{
literal|1L
block|,
literal|2L
block|,
literal|5L
block|}
decl_stmt|;
name|Integer
index|[]
name|putRows2
init|=
operator|new
name|Integer
index|[]
block|{
literal|6
block|,
literal|7
block|}
decl_stmt|;
name|Integer
index|[]
name|putColumns2
init|=
operator|new
name|Integer
index|[]
block|{
literal|3
block|,
literal|6
block|}
decl_stmt|;
name|Long
index|[]
name|putTimestamps2
init|=
operator|new
name|Long
index|[]
block|{
literal|4L
block|,
literal|5L
block|}
decl_stmt|;
name|Integer
index|[]
name|putRows3
init|=
operator|new
name|Integer
index|[]
block|{
literal|2
block|,
literal|3
block|,
literal|5
block|}
decl_stmt|;
name|Integer
index|[]
name|putColumns3
init|=
operator|new
name|Integer
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
decl_stmt|;
name|Long
index|[]
name|putTimestamps3
init|=
operator|new
name|Long
index|[]
block|{
literal|4L
block|,
literal|8L
block|}
decl_stmt|;
name|Integer
index|[]
name|scanRows
init|=
operator|new
name|Integer
index|[]
block|{
literal|3
block|,
literal|5
block|,
literal|7
block|}
decl_stmt|;
name|Integer
index|[]
name|scanColumns
init|=
operator|new
name|Integer
index|[]
block|{
literal|3
block|,
literal|4
block|,
literal|5
block|}
decl_stmt|;
name|Long
index|[]
name|scanTimestamps
init|=
operator|new
name|Long
index|[]
block|{
literal|2l
block|,
literal|4L
block|}
decl_stmt|;
name|int
name|scanMaxVersions
init|=
literal|5
decl_stmt|;
name|put
argument_list|(
name|ht
argument_list|,
name|FAMILY
argument_list|,
name|putRows1
argument_list|,
name|putColumns1
argument_list|,
name|putTimestamps1
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|flush
argument_list|(
name|TABLE
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|ht
argument_list|,
name|FAMILY
argument_list|,
name|putRows2
argument_list|,
name|putColumns2
argument_list|,
name|putTimestamps2
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|flush
argument_list|(
name|TABLE
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|ht
argument_list|,
name|FAMILY
argument_list|,
name|putRows3
argument_list|,
name|putColumns3
argument_list|,
name|putTimestamps3
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|scan
argument_list|(
name|ht
argument_list|,
name|FAMILY
argument_list|,
name|scanRows
argument_list|,
name|scanColumns
argument_list|,
name|scanTimestamps
argument_list|,
name|scanMaxVersions
argument_list|)
decl_stmt|;
name|KeyValue
index|[]
name|kvs
decl_stmt|;
name|kvs
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|.
name|raw
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
name|checkOneCell
argument_list|(
name|kvs
index|[
literal|0
index|]
argument_list|,
name|FAMILY
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|checkOneCell
argument_list|(
name|kvs
index|[
literal|1
index|]
argument_list|,
name|FAMILY
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|kvs
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|.
name|raw
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
name|checkOneCell
argument_list|(
name|kvs
index|[
literal|0
index|]
argument_list|,
name|FAMILY
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|kvs
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|.
name|raw
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
name|checkOneCell
argument_list|(
name|kvs
index|[
literal|0
index|]
argument_list|,
name|FAMILY
argument_list|,
literal|6
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|kvs
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|.
name|raw
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
name|checkOneCell
argument_list|(
name|kvs
index|[
literal|0
index|]
argument_list|,
name|FAMILY
argument_list|,
literal|7
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWithVersionDeletes
parameter_list|()
throws|throws
name|Exception
block|{
comment|// first test from memstore (without flushing).
name|testWithVersionDeletes
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// run same test against HFiles (by forcing a flush).
name|testWithVersionDeletes
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testWithVersionDeletes
parameter_list|(
name|boolean
name|flushTables
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testWithVersionDeletes_"
operator|+
operator|(
name|flushTables
condition|?
literal|"flush"
else|:
literal|"noflush"
operator|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testWithVersionDeletes_"
operator|+
operator|(
name|flushTables
condition|?
literal|"flush"
else|:
literal|"noflush"
operator|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"event_log"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|FAMILIES
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|FAMILY
block|}
decl_stmt|;
comment|// create table; set versions to max...
name|HTable
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLE
argument_list|,
name|FAMILIES
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
comment|// For row:0, col:0: insert versions 1 through 5.
name|putNVersions
argument_list|(
name|ht
argument_list|,
name|FAMILY
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
expr_stmt|;
if|if
condition|(
name|flushTables
condition|)
block|{
name|TEST_UTIL
operator|.
name|flush
argument_list|(
name|TABLE
argument_list|)
expr_stmt|;
block|}
comment|// delete version 4.
name|deleteOneVersion
argument_list|(
name|ht
argument_list|,
name|FAMILY
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// request a bunch of versions including the deleted version. We should
comment|// only get back entries for the versions that exist.
name|KeyValue
name|kvs
index|[]
init|=
name|getNVersions
argument_list|(
name|ht
argument_list|,
name|FAMILY
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|2L
argument_list|,
literal|3L
argument_list|,
literal|4L
argument_list|,
literal|5L
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
name|checkOneCell
argument_list|(
name|kvs
index|[
literal|0
index|]
argument_list|,
name|FAMILY
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|checkOneCell
argument_list|(
name|kvs
index|[
literal|1
index|]
argument_list|,
name|FAMILY
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|checkOneCell
argument_list|(
name|kvs
index|[
literal|2
index|]
argument_list|,
name|FAMILY
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWithMultipleVersionDeletes
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testWithMultipleVersionDeletes"
argument_list|)
expr_stmt|;
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testWithMultipleVersionDeletes"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"event_log"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|FAMILIES
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|FAMILY
block|}
decl_stmt|;
comment|// create table; set versions to max...
name|HTable
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLE
argument_list|,
name|FAMILIES
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
comment|// For row:0, col:0: insert versions 1 through 5.
name|putNVersions
argument_list|(
name|ht
argument_list|,
name|FAMILY
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|flush
argument_list|(
name|TABLE
argument_list|)
expr_stmt|;
comment|// delete all versions before 4.
name|deleteAllVersionsBefore
argument_list|(
name|ht
argument_list|,
name|FAMILY
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// request a bunch of versions including the deleted version. We should
comment|// only get back entries for the versions that exist.
name|KeyValue
name|kvs
index|[]
init|=
name|getNVersions
argument_list|(
name|ht
argument_list|,
name|FAMILY
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|2L
argument_list|,
literal|3L
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWithColumnDeletes
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testWithColumnDeletes"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"event_log"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|FAMILIES
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|FAMILY
block|}
decl_stmt|;
comment|// create table; set versions to max...
name|HTable
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLE
argument_list|,
name|FAMILIES
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
comment|// For row:0, col:0: insert versions 1 through 5.
name|putNVersions
argument_list|(
name|ht
argument_list|,
name|FAMILY
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|flush
argument_list|(
name|TABLE
argument_list|)
expr_stmt|;
comment|// delete all versions before 4.
name|deleteColumn
argument_list|(
name|ht
argument_list|,
name|FAMILY
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// request a bunch of versions including the deleted version. We should
comment|// only get back entries for the versions that exist.
name|KeyValue
name|kvs
index|[]
init|=
name|getNVersions
argument_list|(
name|ht
argument_list|,
name|FAMILY
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|2L
argument_list|,
literal|3L
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWithFamilyDeletes
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testWithFamilyDeletes"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"event_log"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|FAMILIES
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|FAMILY
block|}
decl_stmt|;
comment|// create table; set versions to max...
name|HTable
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLE
argument_list|,
name|FAMILIES
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
comment|// For row:0, col:0: insert versions 1 through 5.
name|putNVersions
argument_list|(
name|ht
argument_list|,
name|FAMILY
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|flush
argument_list|(
name|TABLE
argument_list|)
expr_stmt|;
comment|// delete all versions before 4.
name|deleteFamily
argument_list|(
name|ht
argument_list|,
name|FAMILY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// request a bunch of versions including the deleted version. We should
comment|// only get back entries for the versions that exist.
name|KeyValue
name|kvs
index|[]
init|=
name|getNVersions
argument_list|(
name|ht
argument_list|,
name|FAMILY
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|2L
argument_list|,
literal|3L
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**    * Assert that the passed in KeyValue has expected contents for the    * specified row, column& timestamp.    */
specifier|private
name|void
name|checkOneCell
parameter_list|(
name|KeyValue
name|kv
parameter_list|,
name|byte
index|[]
name|cf
parameter_list|,
name|int
name|rowIdx
parameter_list|,
name|int
name|colIdx
parameter_list|,
name|long
name|ts
parameter_list|)
block|{
name|String
name|ctx
init|=
literal|"rowIdx="
operator|+
name|rowIdx
operator|+
literal|"; colIdx="
operator|+
name|colIdx
operator|+
literal|"; ts="
operator|+
name|ts
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Row mismatch which checking: "
operator|+
name|ctx
argument_list|,
literal|"row:"
operator|+
name|rowIdx
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|kv
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ColumnFamily mismatch while checking: "
operator|+
name|ctx
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|cf
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|kv
operator|.
name|getFamily
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Column qualifier mismatch while checking: "
operator|+
name|ctx
argument_list|,
literal|"column:"
operator|+
name|colIdx
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|kv
operator|.
name|getQualifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Timestamp mismatch while checking: "
operator|+
name|ctx
argument_list|,
name|ts
argument_list|,
name|kv
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Value mismatch while checking: "
operator|+
name|ctx
argument_list|,
literal|"value-version-"
operator|+
name|ts
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|kv
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Uses the TimestampFilter on a Get to request a specified list of    * versions for the row/column specified by rowIdx& colIdx.    *    */
specifier|private
name|KeyValue
index|[]
name|getNVersions
parameter_list|(
name|HTable
name|ht
parameter_list|,
name|byte
index|[]
name|cf
parameter_list|,
name|int
name|rowIdx
parameter_list|,
name|int
name|colIdx
parameter_list|,
name|List
argument_list|<
name|Long
argument_list|>
name|versions
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
name|row
index|[]
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row:"
operator|+
name|rowIdx
argument_list|)
decl_stmt|;
name|byte
name|column
index|[]
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"column:"
operator|+
name|colIdx
argument_list|)
decl_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|cf
argument_list|,
name|column
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
name|get
operator|.
name|setTimeRange
argument_list|(
name|Collections
operator|.
name|min
argument_list|(
name|versions
argument_list|)
argument_list|,
name|Collections
operator|.
name|max
argument_list|(
name|versions
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
return|return
name|result
operator|.
name|raw
argument_list|()
return|;
block|}
specifier|private
name|ResultScanner
name|scan
parameter_list|(
name|HTable
name|ht
parameter_list|,
name|byte
index|[]
name|cf
parameter_list|,
name|Integer
index|[]
name|rowIndexes
parameter_list|,
name|Integer
index|[]
name|columnIndexes
parameter_list|,
name|Long
index|[]
name|versions
parameter_list|,
name|int
name|maxVersions
parameter_list|)
throws|throws
name|IOException
block|{
name|Arrays
operator|.
name|asList
argument_list|(
name|rowIndexes
argument_list|)
expr_stmt|;
name|byte
name|startRow
index|[]
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row:"
operator|+
name|Collections
operator|.
name|min
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|rowIndexes
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|byte
name|endRow
index|[]
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row:"
operator|+
name|Collections
operator|.
name|max
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|rowIndexes
argument_list|)
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|startRow
argument_list|,
name|endRow
argument_list|)
decl_stmt|;
for|for
control|(
name|Integer
name|colIdx
range|:
name|columnIndexes
control|)
block|{
name|byte
name|column
index|[]
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"column:"
operator|+
name|colIdx
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|cf
argument_list|,
name|column
argument_list|)
expr_stmt|;
block|}
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|maxVersions
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setTimeRange
argument_list|(
name|Collections
operator|.
name|min
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|versions
argument_list|)
argument_list|)
argument_list|,
name|Collections
operator|.
name|max
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|versions
argument_list|)
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
return|return
name|scanner
return|;
block|}
specifier|private
name|void
name|put
parameter_list|(
name|HTable
name|ht
parameter_list|,
name|byte
index|[]
name|cf
parameter_list|,
name|Integer
index|[]
name|rowIndexes
parameter_list|,
name|Integer
index|[]
name|columnIndexes
parameter_list|,
name|Long
index|[]
name|versions
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|rowIdx
range|:
name|rowIndexes
control|)
block|{
name|byte
name|row
index|[]
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row:"
operator|+
name|rowIdx
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|setWriteToWAL
argument_list|(
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|colIdx
range|:
name|columnIndexes
control|)
block|{
name|byte
name|column
index|[]
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"column:"
operator|+
name|colIdx
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|version
range|:
name|versions
control|)
block|{
name|put
operator|.
name|add
argument_list|(
name|cf
argument_list|,
name|column
argument_list|,
name|version
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value-version-"
operator|+
name|version
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Insert in specific row/column versions with timestamps    * versionStart..versionEnd.    */
specifier|private
name|void
name|putNVersions
parameter_list|(
name|HTable
name|ht
parameter_list|,
name|byte
index|[]
name|cf
parameter_list|,
name|int
name|rowIdx
parameter_list|,
name|int
name|colIdx
parameter_list|,
name|long
name|versionStart
parameter_list|,
name|long
name|versionEnd
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
name|row
index|[]
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row:"
operator|+
name|rowIdx
argument_list|)
decl_stmt|;
name|byte
name|column
index|[]
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"column:"
operator|+
name|colIdx
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|setWriteToWAL
argument_list|(
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|idx
init|=
name|versionStart
init|;
name|idx
operator|<=
name|versionEnd
condition|;
name|idx
operator|++
control|)
block|{
name|put
operator|.
name|add
argument_list|(
name|cf
argument_list|,
name|column
argument_list|,
name|idx
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value-version-"
operator|+
name|idx
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
comment|/**    * For row/column specified by rowIdx/colIdx, delete the cell    * corresponding to the specified version.    */
specifier|private
name|void
name|deleteOneVersion
parameter_list|(
name|HTable
name|ht
parameter_list|,
name|byte
index|[]
name|cf
parameter_list|,
name|int
name|rowIdx
parameter_list|,
name|int
name|colIdx
parameter_list|,
name|long
name|version
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
name|row
index|[]
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row:"
operator|+
name|rowIdx
argument_list|)
decl_stmt|;
name|byte
name|column
index|[]
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"column:"
operator|+
name|colIdx
argument_list|)
decl_stmt|;
name|Delete
name|del
init|=
operator|new
name|Delete
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|del
operator|.
name|deleteColumn
argument_list|(
name|cf
argument_list|,
name|column
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|del
argument_list|)
expr_stmt|;
block|}
comment|/**    * For row/column specified by rowIdx/colIdx, delete all cells    * preceeding the specified version.    */
specifier|private
name|void
name|deleteAllVersionsBefore
parameter_list|(
name|HTable
name|ht
parameter_list|,
name|byte
index|[]
name|cf
parameter_list|,
name|int
name|rowIdx
parameter_list|,
name|int
name|colIdx
parameter_list|,
name|long
name|version
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
name|row
index|[]
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row:"
operator|+
name|rowIdx
argument_list|)
decl_stmt|;
name|byte
name|column
index|[]
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"column:"
operator|+
name|colIdx
argument_list|)
decl_stmt|;
name|Delete
name|del
init|=
operator|new
name|Delete
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|del
operator|.
name|deleteColumns
argument_list|(
name|cf
argument_list|,
name|column
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|del
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|deleteColumn
parameter_list|(
name|HTable
name|ht
parameter_list|,
name|byte
index|[]
name|cf
parameter_list|,
name|int
name|rowIdx
parameter_list|,
name|int
name|colIdx
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
name|row
index|[]
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row:"
operator|+
name|rowIdx
argument_list|)
decl_stmt|;
name|byte
name|column
index|[]
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"column:"
operator|+
name|colIdx
argument_list|)
decl_stmt|;
name|Delete
name|del
init|=
operator|new
name|Delete
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|del
operator|.
name|deleteColumns
argument_list|(
name|cf
argument_list|,
name|column
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|del
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|deleteFamily
parameter_list|(
name|HTable
name|ht
parameter_list|,
name|byte
index|[]
name|cf
parameter_list|,
name|int
name|rowIdx
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
name|row
index|[]
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row:"
operator|+
name|rowIdx
argument_list|)
decl_stmt|;
name|Delete
name|del
init|=
operator|new
name|Delete
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|del
operator|.
name|deleteFamily
argument_list|(
name|cf
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|del
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

