begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2011 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|BinaryComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|ColumnCountGetFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|ColumnPaginationFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|ColumnPrefixFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|ColumnRangeFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|CompareFilter
operator|.
name|CompareOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|DependentColumnFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FamilyFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FilterList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FilterList
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FirstKeyOnlyFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|InclusiveStopFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|KeyOnlyFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|MultipleColumnPrefixFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|PageFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|PrefixFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|QualifierFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|RowFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|SingleColumnValueFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|SingleColumnValueExcludeFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|SkipFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|TimestampsFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|ValueFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|WhileMatchFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * Run tests that use the functionality of the Operation superclass for  * Puts, Gets, Deletes, Scans, and MultiPuts.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestOperation
block|{
specifier|private
specifier|static
name|byte
index|[]
name|ROW
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRow"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testFamily"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|QUALIFIER
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifier"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|VALUE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testValue"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|List
argument_list|<
name|Long
argument_list|>
name|TS_LIST
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|2L
argument_list|,
literal|3L
argument_list|,
literal|5L
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|TimestampsFilter
name|TS_FILTER
init|=
operator|new
name|TimestampsFilter
argument_list|(
name|TS_LIST
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|String
name|STR_TS_FILTER
init|=
name|TS_FILTER
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" (3/3): [2, 3, 5]"
decl_stmt|;
specifier|private
specifier|static
name|List
argument_list|<
name|Long
argument_list|>
name|L_TS_LIST
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|0L
argument_list|,
literal|1L
argument_list|,
literal|2L
argument_list|,
literal|3L
argument_list|,
literal|4L
argument_list|,
literal|5L
argument_list|,
literal|6L
argument_list|,
literal|7L
argument_list|,
literal|8L
argument_list|,
literal|9L
argument_list|,
literal|10L
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|TimestampsFilter
name|L_TS_FILTER
init|=
operator|new
name|TimestampsFilter
argument_list|(
name|L_TS_LIST
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|String
name|STR_L_TS_FILTER
init|=
name|L_TS_FILTER
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" (5/11): [0, 1, 2, 3, 4]"
decl_stmt|;
specifier|private
specifier|static
name|String
name|COL_NAME_1
init|=
literal|"col1"
decl_stmt|;
specifier|private
specifier|static
name|ColumnPrefixFilter
name|COL_PRE_FILTER
init|=
operator|new
name|ColumnPrefixFilter
argument_list|(
name|COL_NAME_1
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|String
name|STR_COL_PRE_FILTER
init|=
name|COL_PRE_FILTER
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" "
operator|+
name|COL_NAME_1
decl_stmt|;
specifier|private
specifier|static
name|String
name|COL_NAME_2
init|=
literal|"col2"
decl_stmt|;
specifier|private
specifier|static
name|ColumnRangeFilter
name|CR_FILTER
init|=
operator|new
name|ColumnRangeFilter
argument_list|(
name|COL_NAME_1
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|true
argument_list|,
name|COL_NAME_2
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|String
name|STR_CR_FILTER
init|=
name|CR_FILTER
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" ["
operator|+
name|COL_NAME_1
operator|+
literal|", "
operator|+
name|COL_NAME_2
operator|+
literal|")"
decl_stmt|;
specifier|private
specifier|static
name|int
name|COL_COUNT
init|=
literal|9
decl_stmt|;
specifier|private
specifier|static
name|ColumnCountGetFilter
name|CCG_FILTER
init|=
operator|new
name|ColumnCountGetFilter
argument_list|(
name|COL_COUNT
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|String
name|STR_CCG_FILTER
init|=
name|CCG_FILTER
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" "
operator|+
name|COL_COUNT
decl_stmt|;
specifier|private
specifier|static
name|int
name|LIMIT
init|=
literal|3
decl_stmt|;
specifier|private
specifier|static
name|int
name|OFFSET
init|=
literal|4
decl_stmt|;
specifier|private
specifier|static
name|ColumnPaginationFilter
name|CP_FILTER
init|=
operator|new
name|ColumnPaginationFilter
argument_list|(
name|LIMIT
argument_list|,
name|OFFSET
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|String
name|STR_CP_FILTER
init|=
name|CP_FILTER
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" ("
operator|+
name|LIMIT
operator|+
literal|", "
operator|+
name|OFFSET
operator|+
literal|")"
decl_stmt|;
specifier|private
specifier|static
name|String
name|STOP_ROW_KEY
init|=
literal|"stop"
decl_stmt|;
specifier|private
specifier|static
name|InclusiveStopFilter
name|IS_FILTER
init|=
operator|new
name|InclusiveStopFilter
argument_list|(
name|STOP_ROW_KEY
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|String
name|STR_IS_FILTER
init|=
name|IS_FILTER
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" "
operator|+
name|STOP_ROW_KEY
decl_stmt|;
specifier|private
specifier|static
name|String
name|PREFIX
init|=
literal|"prefix"
decl_stmt|;
specifier|private
specifier|static
name|PrefixFilter
name|PREFIX_FILTER
init|=
operator|new
name|PrefixFilter
argument_list|(
name|PREFIX
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|String
name|STR_PREFIX_FILTER
init|=
literal|"PrefixFilter "
operator|+
name|PREFIX
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
index|[]
name|PREFIXES
init|=
block|{
literal|"0"
operator|.
name|getBytes
argument_list|()
block|,
literal|"1"
operator|.
name|getBytes
argument_list|()
block|,
literal|"2"
operator|.
name|getBytes
argument_list|()
block|}
decl_stmt|;
specifier|private
specifier|static
name|MultipleColumnPrefixFilter
name|MCP_FILTER
init|=
operator|new
name|MultipleColumnPrefixFilter
argument_list|(
name|PREFIXES
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|String
name|STR_MCP_FILTER
init|=
name|MCP_FILTER
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" (3/3): [0, 1, 2]"
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
index|[]
name|L_PREFIXES
init|=
block|{
literal|"0"
operator|.
name|getBytes
argument_list|()
block|,
literal|"1"
operator|.
name|getBytes
argument_list|()
block|,
literal|"2"
operator|.
name|getBytes
argument_list|()
block|,
literal|"3"
operator|.
name|getBytes
argument_list|()
block|,
literal|"4"
operator|.
name|getBytes
argument_list|()
block|,
literal|"5"
operator|.
name|getBytes
argument_list|()
block|,
literal|"6"
operator|.
name|getBytes
argument_list|()
block|,
literal|"7"
operator|.
name|getBytes
argument_list|()
block|}
decl_stmt|;
specifier|private
specifier|static
name|MultipleColumnPrefixFilter
name|L_MCP_FILTER
init|=
operator|new
name|MultipleColumnPrefixFilter
argument_list|(
name|L_PREFIXES
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|String
name|STR_L_MCP_FILTER
init|=
name|L_MCP_FILTER
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" (5/8): [0, 1, 2, 3, 4]"
decl_stmt|;
specifier|private
specifier|static
name|int
name|PAGE_SIZE
init|=
literal|9
decl_stmt|;
specifier|private
specifier|static
name|PageFilter
name|PAGE_FILTER
init|=
operator|new
name|PageFilter
argument_list|(
name|PAGE_SIZE
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|String
name|STR_PAGE_FILTER
init|=
name|PAGE_FILTER
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" "
operator|+
name|PAGE_SIZE
decl_stmt|;
specifier|private
specifier|static
name|SkipFilter
name|SKIP_FILTER
init|=
operator|new
name|SkipFilter
argument_list|(
name|L_TS_FILTER
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|String
name|STR_SKIP_FILTER
init|=
name|SKIP_FILTER
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" "
operator|+
name|STR_L_TS_FILTER
decl_stmt|;
specifier|private
specifier|static
name|WhileMatchFilter
name|WHILE_FILTER
init|=
operator|new
name|WhileMatchFilter
argument_list|(
name|L_TS_FILTER
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|String
name|STR_WHILE_FILTER
init|=
name|WHILE_FILTER
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" "
operator|+
name|STR_L_TS_FILTER
decl_stmt|;
specifier|private
specifier|static
name|KeyOnlyFilter
name|KEY_ONLY_FILTER
init|=
operator|new
name|KeyOnlyFilter
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|String
name|STR_KEY_ONLY_FILTER
init|=
name|KEY_ONLY_FILTER
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|FirstKeyOnlyFilter
name|FIRST_KEY_ONLY_FILTER
init|=
operator|new
name|FirstKeyOnlyFilter
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|String
name|STR_FIRST_KEY_ONLY_FILTER
init|=
name|FIRST_KEY_ONLY_FILTER
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|CompareOp
name|CMP_OP
init|=
name|CompareOp
operator|.
name|EQUAL
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|CMP_VALUE
init|=
literal|"value"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|BinaryComparator
name|BC
init|=
operator|new
name|BinaryComparator
argument_list|(
name|CMP_VALUE
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|DependentColumnFilter
name|DC_FILTER
init|=
operator|new
name|DependentColumnFilter
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
literal|true
argument_list|,
name|CMP_OP
argument_list|,
name|BC
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|String
name|STR_DC_FILTER
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s (%s, %s, %s, %s, %s)"
argument_list|,
name|DC_FILTER
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|FAMILY
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|QUALIFIER
argument_list|)
argument_list|,
literal|true
argument_list|,
name|CMP_OP
operator|.
name|name
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|BC
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|FamilyFilter
name|FAMILY_FILTER
init|=
operator|new
name|FamilyFilter
argument_list|(
name|CMP_OP
argument_list|,
name|BC
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|String
name|STR_FAMILY_FILTER
init|=
name|FAMILY_FILTER
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" (EQUAL, value)"
decl_stmt|;
specifier|private
specifier|static
name|QualifierFilter
name|QUALIFIER_FILTER
init|=
operator|new
name|QualifierFilter
argument_list|(
name|CMP_OP
argument_list|,
name|BC
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|String
name|STR_QUALIFIER_FILTER
init|=
name|QUALIFIER_FILTER
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" (EQUAL, value)"
decl_stmt|;
specifier|private
specifier|static
name|RowFilter
name|ROW_FILTER
init|=
operator|new
name|RowFilter
argument_list|(
name|CMP_OP
argument_list|,
name|BC
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|String
name|STR_ROW_FILTER
init|=
name|ROW_FILTER
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" (EQUAL, value)"
decl_stmt|;
specifier|private
specifier|static
name|ValueFilter
name|VALUE_FILTER
init|=
operator|new
name|ValueFilter
argument_list|(
name|CMP_OP
argument_list|,
name|BC
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|String
name|STR_VALUE_FILTER
init|=
name|VALUE_FILTER
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" (EQUAL, value)"
decl_stmt|;
specifier|private
specifier|static
name|SingleColumnValueFilter
name|SCV_FILTER
init|=
operator|new
name|SingleColumnValueFilter
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|CMP_OP
argument_list|,
name|CMP_VALUE
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|String
name|STR_SCV_FILTER
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s (%s, %s, %s, %s)"
argument_list|,
name|SCV_FILTER
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|FAMILY
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|QUALIFIER
argument_list|)
argument_list|,
name|CMP_OP
operator|.
name|name
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|CMP_VALUE
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|SingleColumnValueExcludeFilter
name|SCVE_FILTER
init|=
operator|new
name|SingleColumnValueExcludeFilter
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|CMP_OP
argument_list|,
name|CMP_VALUE
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|String
name|STR_SCVE_FILTER
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s (%s, %s, %s, %s)"
argument_list|,
name|SCVE_FILTER
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|FAMILY
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|QUALIFIER
argument_list|)
argument_list|,
name|CMP_OP
operator|.
name|name
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|CMP_VALUE
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|FilterList
name|AND_FILTER_LIST
init|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ALL
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|Filter
operator|)
name|TS_FILTER
argument_list|,
name|L_TS_FILTER
argument_list|,
name|CR_FILTER
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|String
name|STR_AND_FILTER_LIST
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s AND (3/3): [%s, %s, %s]"
argument_list|,
name|AND_FILTER_LIST
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|STR_TS_FILTER
argument_list|,
name|STR_L_TS_FILTER
argument_list|,
name|STR_CR_FILTER
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|FilterList
name|OR_FILTER_LIST
init|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ONE
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|Filter
operator|)
name|TS_FILTER
argument_list|,
name|L_TS_FILTER
argument_list|,
name|CR_FILTER
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|String
name|STR_OR_FILTER_LIST
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s OR (3/3): [%s, %s, %s]"
argument_list|,
name|AND_FILTER_LIST
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|STR_TS_FILTER
argument_list|,
name|STR_L_TS_FILTER
argument_list|,
name|STR_CR_FILTER
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|FilterList
name|L_FILTER_LIST
init|=
operator|new
name|FilterList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|Filter
operator|)
name|TS_FILTER
argument_list|,
name|L_TS_FILTER
argument_list|,
name|CR_FILTER
argument_list|,
name|COL_PRE_FILTER
argument_list|,
name|CCG_FILTER
argument_list|,
name|CP_FILTER
argument_list|,
name|PREFIX_FILTER
argument_list|,
name|PAGE_FILTER
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|String
name|STR_L_FILTER_LIST
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s AND (5/8): [%s, %s, %s, %s, %s]"
argument_list|,
name|L_FILTER_LIST
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|STR_TS_FILTER
argument_list|,
name|STR_L_TS_FILTER
argument_list|,
name|STR_CR_FILTER
argument_list|,
name|STR_COL_PRE_FILTER
argument_list|,
name|STR_CCG_FILTER
argument_list|,
name|STR_CP_FILTER
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Filter
index|[]
name|FILTERS
init|=
block|{
name|TS_FILTER
block|,
comment|// TimestampsFilter
name|L_TS_FILTER
block|,
comment|// TimestampsFilter
name|COL_PRE_FILTER
block|,
comment|// ColumnPrefixFilter
name|CP_FILTER
block|,
comment|// ColumnPaginationFilter
name|CR_FILTER
block|,
comment|// ColumnRangeFilter
name|CCG_FILTER
block|,
comment|// ColumnCountGetFilter
name|IS_FILTER
block|,
comment|// InclusiveStopFilter
name|PREFIX_FILTER
block|,
comment|// PrefixFilter
name|PAGE_FILTER
block|,
comment|// PageFilter
name|SKIP_FILTER
block|,
comment|// SkipFilter
name|WHILE_FILTER
block|,
comment|// WhileMatchFilter
name|KEY_ONLY_FILTER
block|,
comment|// KeyOnlyFilter
name|FIRST_KEY_ONLY_FILTER
block|,
comment|// FirstKeyOnlyFilter
name|MCP_FILTER
block|,
comment|// MultipleColumnPrefixFilter
name|L_MCP_FILTER
block|,
comment|// MultipleColumnPrefixFilter
name|DC_FILTER
block|,
comment|// DependentColumnFilter
name|FAMILY_FILTER
block|,
comment|// FamilyFilter
name|QUALIFIER_FILTER
block|,
comment|// QualifierFilter
name|ROW_FILTER
block|,
comment|// RowFilter
name|VALUE_FILTER
block|,
comment|// ValueFilter
name|SCV_FILTER
block|,
comment|// SingleColumnValueFilter
name|SCVE_FILTER
block|,
comment|// SingleColumnValueExcludeFilter
name|AND_FILTER_LIST
block|,
comment|// FilterList
name|OR_FILTER_LIST
block|,
comment|// FilterList
name|L_FILTER_LIST
block|,
comment|// FilterList
block|}
decl_stmt|;
specifier|private
specifier|static
name|String
index|[]
name|FILTERS_INFO
init|=
block|{
name|STR_TS_FILTER
block|,
comment|// TimestampsFilter
name|STR_L_TS_FILTER
block|,
comment|// TimestampsFilter
name|STR_COL_PRE_FILTER
block|,
comment|// ColumnPrefixFilter
name|STR_CP_FILTER
block|,
comment|// ColumnPaginationFilter
name|STR_CR_FILTER
block|,
comment|// ColumnRangeFilter
name|STR_CCG_FILTER
block|,
comment|// ColumnCountGetFilter
name|STR_IS_FILTER
block|,
comment|// InclusiveStopFilter
name|STR_PREFIX_FILTER
block|,
comment|// PrefixFilter
name|STR_PAGE_FILTER
block|,
comment|// PageFilter
name|STR_SKIP_FILTER
block|,
comment|// SkipFilter
name|STR_WHILE_FILTER
block|,
comment|// WhileMatchFilter
name|STR_KEY_ONLY_FILTER
block|,
comment|// KeyOnlyFilter
name|STR_FIRST_KEY_ONLY_FILTER
block|,
comment|// FirstKeyOnlyFilter
name|STR_MCP_FILTER
block|,
comment|// MultipleColumnPrefixFilter
name|STR_L_MCP_FILTER
block|,
comment|// MultipleColumnPrefixFilter
name|STR_DC_FILTER
block|,
comment|// DependentColumnFilter
name|STR_FAMILY_FILTER
block|,
comment|// FamilyFilter
name|STR_QUALIFIER_FILTER
block|,
comment|// QualifierFilter
name|STR_ROW_FILTER
block|,
comment|// RowFilter
name|STR_VALUE_FILTER
block|,
comment|// ValueFilter
name|STR_SCV_FILTER
block|,
comment|// SingleColumnValueFilter
name|STR_SCVE_FILTER
block|,
comment|// SingleColumnValueExcludeFilter
name|STR_AND_FILTER_LIST
block|,
comment|// FilterList
name|STR_OR_FILTER_LIST
block|,
comment|// FilterList
name|STR_L_FILTER_LIST
block|,
comment|// FilterList
block|}
decl_stmt|;
static|static
block|{
name|assertEquals
argument_list|(
literal|"The sizes of static arrays do not match: "
operator|+
literal|"[FILTERS: %d<=> FILTERS_INFO: %d]"
argument_list|,
name|FILTERS
operator|.
name|length
argument_list|,
name|FILTERS_INFO
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the client Operations' JSON encoding to ensure that produced JSON is     * parseable and that the details are present and not corrupted.    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testOperationJSON
parameter_list|()
throws|throws
name|IOException
block|{
comment|// produce a Scan Operation
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
comment|// get its JSON representation, and parse it
name|String
name|json
init|=
name|scan
operator|.
name|toJSON
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parsedJSON
init|=
name|mapper
operator|.
name|readValue
argument_list|(
name|json
argument_list|,
name|HashMap
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// check for the row
name|assertEquals
argument_list|(
literal|"startRow incorrect in Scan.toJSON()"
argument_list|,
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|ROW
argument_list|)
argument_list|,
name|parsedJSON
operator|.
name|get
argument_list|(
literal|"startRow"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check for the family and the qualifier.
name|List
name|familyInfo
init|=
call|(
name|List
call|)
argument_list|(
operator|(
name|Map
operator|)
name|parsedJSON
operator|.
name|get
argument_list|(
literal|"families"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|FAMILY
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Family absent in Scan.toJSON()"
argument_list|,
name|familyInfo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Qualifier absent in Scan.toJSON()"
argument_list|,
literal|1
argument_list|,
name|familyInfo
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Qualifier incorrect in Scan.toJSON()"
argument_list|,
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|QUALIFIER
argument_list|)
argument_list|,
name|familyInfo
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// produce a Get Operation
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
comment|// get its JSON representation, and parse it
name|json
operator|=
name|get
operator|.
name|toJSON
argument_list|()
expr_stmt|;
name|parsedJSON
operator|=
name|mapper
operator|.
name|readValue
argument_list|(
name|json
argument_list|,
name|HashMap
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// check for the row
name|assertEquals
argument_list|(
literal|"row incorrect in Get.toJSON()"
argument_list|,
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|ROW
argument_list|)
argument_list|,
name|parsedJSON
operator|.
name|get
argument_list|(
literal|"row"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check for the family and the qualifier.
name|familyInfo
operator|=
call|(
name|List
call|)
argument_list|(
operator|(
name|Map
operator|)
name|parsedJSON
operator|.
name|get
argument_list|(
literal|"families"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Family absent in Get.toJSON()"
argument_list|,
name|familyInfo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Qualifier absent in Get.toJSON()"
argument_list|,
literal|1
argument_list|,
name|familyInfo
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Qualifier incorrect in Get.toJSON()"
argument_list|,
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|QUALIFIER
argument_list|)
argument_list|,
name|familyInfo
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// produce a Put operation
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
comment|// get its JSON representation, and parse it
name|json
operator|=
name|put
operator|.
name|toJSON
argument_list|()
expr_stmt|;
name|parsedJSON
operator|=
name|mapper
operator|.
name|readValue
argument_list|(
name|json
argument_list|,
name|HashMap
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// check for the row
name|assertEquals
argument_list|(
literal|"row absent in Put.toJSON()"
argument_list|,
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|ROW
argument_list|)
argument_list|,
name|parsedJSON
operator|.
name|get
argument_list|(
literal|"row"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check for the family and the qualifier.
name|familyInfo
operator|=
call|(
name|List
call|)
argument_list|(
operator|(
name|Map
operator|)
name|parsedJSON
operator|.
name|get
argument_list|(
literal|"families"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Family absent in Put.toJSON()"
argument_list|,
name|familyInfo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"KeyValue absent in Put.toJSON()"
argument_list|,
literal|1
argument_list|,
name|familyInfo
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Map
name|kvMap
init|=
operator|(
name|Map
operator|)
name|familyInfo
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Qualifier incorrect in Put.toJSON()"
argument_list|,
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|QUALIFIER
argument_list|)
argument_list|,
name|kvMap
operator|.
name|get
argument_list|(
literal|"qualifier"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Value length incorrect in Put.toJSON()"
argument_list|,
name|VALUE
operator|.
name|length
argument_list|,
name|kvMap
operator|.
name|get
argument_list|(
literal|"vlen"
argument_list|)
argument_list|)
expr_stmt|;
comment|// produce a Delete operation
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|delete
operator|.
name|deleteColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
comment|// get its JSON representation, and parse it
name|json
operator|=
name|delete
operator|.
name|toJSON
argument_list|()
expr_stmt|;
name|parsedJSON
operator|=
name|mapper
operator|.
name|readValue
argument_list|(
name|json
argument_list|,
name|HashMap
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// check for the row
name|assertEquals
argument_list|(
literal|"row absent in Delete.toJSON()"
argument_list|,
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|ROW
argument_list|)
argument_list|,
name|parsedJSON
operator|.
name|get
argument_list|(
literal|"row"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check for the family and the qualifier.
name|familyInfo
operator|=
call|(
name|List
call|)
argument_list|(
operator|(
name|Map
operator|)
name|parsedJSON
operator|.
name|get
argument_list|(
literal|"families"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Family absent in Delete.toJSON()"
argument_list|,
name|familyInfo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"KeyValue absent in Delete.toJSON()"
argument_list|,
literal|1
argument_list|,
name|familyInfo
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|kvMap
operator|=
operator|(
name|Map
operator|)
name|familyInfo
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Qualifier incorrect in Delete.toJSON()"
argument_list|,
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|QUALIFIER
argument_list|)
argument_list|,
name|kvMap
operator|.
name|get
argument_list|(
literal|"qualifier"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Rule
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ResourceCheckerJUnitRule
name|cu
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ResourceCheckerJUnitRule
argument_list|()
decl_stmt|;
block|}
end_class

end_unit

