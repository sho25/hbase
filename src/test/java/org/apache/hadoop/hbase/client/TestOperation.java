begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2011 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_comment
comment|/**  * Run tests that use the funtionality of the Operation superclass for   * Puts, Gets, Deletes, Scans, and MultiPuts.  */
end_comment

begin_class
specifier|public
class|class
name|TestOperation
block|{
specifier|private
specifier|static
name|byte
index|[]
name|ROW
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRow"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testFamily"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|QUALIFIER
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifier"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|VALUE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testValue"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
comment|/**    * Test the client Operations' JSON encoding to ensure that produced JSON is     * parseable and that the details are present and not corrupted.    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testOperationJSON
parameter_list|()
throws|throws
name|IOException
block|{
comment|// produce a Scan Operation
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
comment|// get its JSON representation, and parse it
name|String
name|json
init|=
name|scan
operator|.
name|toJSON
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parsedJSON
init|=
name|mapper
operator|.
name|readValue
argument_list|(
name|json
argument_list|,
name|HashMap
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// check for the row
name|assertEquals
argument_list|(
literal|"startRow incorrect in Scan.toJSON()"
argument_list|,
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|ROW
argument_list|)
argument_list|,
name|parsedJSON
operator|.
name|get
argument_list|(
literal|"startRow"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check for the family and the qualifier.
name|List
name|familyInfo
init|=
call|(
name|List
call|)
argument_list|(
operator|(
name|Map
operator|)
name|parsedJSON
operator|.
name|get
argument_list|(
literal|"families"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|FAMILY
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Family absent in Scan.toJSON()"
argument_list|,
name|familyInfo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Qualifier absent in Scan.toJSON()"
argument_list|,
literal|1
argument_list|,
name|familyInfo
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Qualifier incorrect in Scan.toJSON()"
argument_list|,
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|QUALIFIER
argument_list|)
argument_list|,
name|familyInfo
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// produce a Get Operation
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
comment|// get its JSON representation, and parse it
name|json
operator|=
name|get
operator|.
name|toJSON
argument_list|()
expr_stmt|;
name|parsedJSON
operator|=
name|mapper
operator|.
name|readValue
argument_list|(
name|json
argument_list|,
name|HashMap
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// check for the row
name|assertEquals
argument_list|(
literal|"row incorrect in Get.toJSON()"
argument_list|,
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|ROW
argument_list|)
argument_list|,
name|parsedJSON
operator|.
name|get
argument_list|(
literal|"row"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check for the family and the qualifier.
name|familyInfo
operator|=
call|(
name|List
call|)
argument_list|(
operator|(
name|Map
operator|)
name|parsedJSON
operator|.
name|get
argument_list|(
literal|"families"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Family absent in Get.toJSON()"
argument_list|,
name|familyInfo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Qualifier absent in Get.toJSON()"
argument_list|,
literal|1
argument_list|,
name|familyInfo
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Qualifier incorrect in Get.toJSON()"
argument_list|,
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|QUALIFIER
argument_list|)
argument_list|,
name|familyInfo
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// produce a Put operation
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
comment|// get its JSON representation, and parse it
name|json
operator|=
name|put
operator|.
name|toJSON
argument_list|()
expr_stmt|;
name|parsedJSON
operator|=
name|mapper
operator|.
name|readValue
argument_list|(
name|json
argument_list|,
name|HashMap
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// check for the row
name|assertEquals
argument_list|(
literal|"row absent in Put.toJSON()"
argument_list|,
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|ROW
argument_list|)
argument_list|,
name|parsedJSON
operator|.
name|get
argument_list|(
literal|"row"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check for the family and the qualifier.
name|familyInfo
operator|=
call|(
name|List
call|)
argument_list|(
operator|(
name|Map
operator|)
name|parsedJSON
operator|.
name|get
argument_list|(
literal|"families"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Family absent in Put.toJSON()"
argument_list|,
name|familyInfo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"KeyValue absent in Put.toJSON()"
argument_list|,
literal|1
argument_list|,
name|familyInfo
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Map
name|kvMap
init|=
operator|(
name|Map
operator|)
name|familyInfo
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Qualifier incorrect in Put.toJSON()"
argument_list|,
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|QUALIFIER
argument_list|)
argument_list|,
name|kvMap
operator|.
name|get
argument_list|(
literal|"qualifier"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Value length incorrect in Put.toJSON()"
argument_list|,
name|VALUE
operator|.
name|length
argument_list|,
name|kvMap
operator|.
name|get
argument_list|(
literal|"vlen"
argument_list|)
argument_list|)
expr_stmt|;
comment|// produce a Delete operation
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|delete
operator|.
name|deleteColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
comment|// get its JSON representation, and parse it
name|json
operator|=
name|delete
operator|.
name|toJSON
argument_list|()
expr_stmt|;
name|parsedJSON
operator|=
name|mapper
operator|.
name|readValue
argument_list|(
name|json
argument_list|,
name|HashMap
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// check for the row
name|assertEquals
argument_list|(
literal|"row absent in Delete.toJSON()"
argument_list|,
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|ROW
argument_list|)
argument_list|,
name|parsedJSON
operator|.
name|get
argument_list|(
literal|"row"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check for the family and the qualifier.
name|familyInfo
operator|=
call|(
name|List
call|)
argument_list|(
operator|(
name|Map
operator|)
name|parsedJSON
operator|.
name|get
argument_list|(
literal|"families"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Family absent in Delete.toJSON()"
argument_list|,
name|familyInfo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"KeyValue absent in Delete.toJSON()"
argument_list|,
literal|1
argument_list|,
name|familyInfo
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|kvMap
operator|=
operator|(
name|Map
operator|)
name|familyInfo
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Qualifier incorrect in Delete.toJSON()"
argument_list|,
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|QUALIFIER
argument_list|)
argument_list|,
name|kvMap
operator|.
name|get
argument_list|(
literal|"qualifier"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

