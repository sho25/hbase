begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2011 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_comment
comment|/**  * Class that implements a JUnit rule to be called before and after each  *  test method to check the resources used:  *   - file descriptors  *   - threads  *  @see ResourceChecker  */
end_comment

begin_class
specifier|public
class|class
name|ResourceCheckerJUnitRule
extends|extends
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestWatcher
block|{
specifier|private
name|ResourceChecker
name|cu
decl_stmt|;
specifier|private
name|boolean
name|endDone
decl_stmt|;
comment|/**    * To be called before the test methods    * @param testName    */
specifier|private
name|void
name|start
parameter_list|(
name|String
name|testName
parameter_list|)
block|{
name|cu
operator|=
operator|new
name|ResourceChecker
argument_list|(
literal|"before "
operator|+
name|testName
argument_list|)
expr_stmt|;
name|endDone
operator|=
literal|false
expr_stmt|;
block|}
comment|/**    * To be called after the test methods    * @param testName    */
specifier|private
name|void
name|end
parameter_list|(
name|String
name|testName
parameter_list|)
block|{
if|if
condition|(
operator|!
name|endDone
condition|)
block|{
name|endDone
operator|=
literal|true
expr_stmt|;
name|cu
operator|.
name|logInfo
argument_list|(
literal|"after "
operator|+
name|testName
argument_list|)
expr_stmt|;
name|cu
operator|.
name|check
argument_list|(
literal|"after "
operator|+
name|testName
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get the test name from the JUnit Description    * @param description    * @return the string for the short test name    */
specifier|private
name|String
name|descriptionToShortTestName
parameter_list|(
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|Description
name|description
parameter_list|)
block|{
specifier|final
name|int
name|toRemove
init|=
literal|"org.apache.hadoop.hbase."
operator|.
name|length
argument_list|()
decl_stmt|;
return|return
name|description
operator|.
name|getTestClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
name|toRemove
argument_list|)
operator|+
literal|"#"
operator|+
name|description
operator|.
name|getMethodName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|succeeded
parameter_list|(
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|Description
name|description
parameter_list|)
block|{
name|end
argument_list|(
name|descriptionToShortTestName
argument_list|(
name|description
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|failed
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Throwable
name|e
parameter_list|,
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|Description
name|description
parameter_list|)
block|{
name|end
argument_list|(
name|descriptionToShortTestName
argument_list|(
name|description
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|starting
parameter_list|(
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|Description
name|description
parameter_list|)
block|{
name|start
argument_list|(
name|descriptionToShortTestName
argument_list|(
name|description
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|finished
parameter_list|(
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|Description
name|description
parameter_list|)
block|{
name|end
argument_list|(
name|descriptionToShortTestName
argument_list|(
name|description
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

