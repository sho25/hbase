begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArraySet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MiniHBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test issues assigning ROOT.  */
end_comment

begin_class
specifier|public
class|class
name|TestROOTAssignment
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestROOTAssignment
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|TABLENAME
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"root_assignments"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
index|[]
name|FAMILIES
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
block|}
decl_stmt|;
comment|/**    * Start up a mini cluster and put a small table of many empty regions into it.    * @throws Exception    */
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeAllTests
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.regions.percheckin"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Start a cluster of two regionservers.
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// Create a table of three families.  This will assign a region.
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLENAME
argument_list|,
name|FAMILIES
argument_list|)
expr_stmt|;
name|HTable
name|t
init|=
operator|new
name|HTable
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|TABLENAME
argument_list|)
decl_stmt|;
name|int
name|countOfRegions
init|=
name|TEST_UTIL
operator|.
name|createMultiRegions
argument_list|(
name|t
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|waitUntilAllRegionsAssigned
argument_list|(
name|countOfRegions
argument_list|)
expr_stmt|;
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|TABLENAME
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|loadTable
argument_list|(
name|table
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|afterAllTests
parameter_list|()
throws|throws
name|IOException
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|TEST_UTIL
operator|.
name|ensureSomeRegionServersAvailable
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
comment|/**    * Interrupt processing of server shutdown so it gets put on delay queue.    */
specifier|static
class|class
name|PostponeShutdownProcessing
implements|implements
name|RegionServerOperationListener
block|{
comment|// Map of what we've delayed so we don't do do repeated delays.
specifier|private
specifier|final
name|Set
argument_list|<
name|RegionServerOperation
argument_list|>
name|postponed
init|=
operator|new
name|CopyOnWriteArraySet
argument_list|<
name|RegionServerOperation
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|done
init|=
literal|false
decl_stmt|;
specifier|private
specifier|final
name|HServerAddress
name|rootServerAddress
decl_stmt|;
specifier|private
specifier|final
name|HMaster
name|master
decl_stmt|;
name|PostponeShutdownProcessing
parameter_list|(
specifier|final
name|HMaster
name|master
parameter_list|,
specifier|final
name|HServerAddress
name|rootServerAddress
parameter_list|)
block|{
name|this
operator|.
name|master
operator|=
name|master
expr_stmt|;
name|this
operator|.
name|rootServerAddress
operator|=
name|rootServerAddress
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|process
parameter_list|(
specifier|final
name|RegionServerOperation
name|op
parameter_list|)
throws|throws
name|IOException
block|{
comment|// If a regionserver shutdown and its of the root server, then we want to
comment|// delay the processing of the shutdown
name|boolean
name|result
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|op
operator|instanceof
name|ProcessServerShutdown
condition|)
block|{
name|ProcessServerShutdown
name|pss
init|=
operator|(
name|ProcessServerShutdown
operator|)
name|op
decl_stmt|;
if|if
condition|(
name|pss
operator|.
name|getDeadServerAddress
argument_list|()
operator|.
name|equals
argument_list|(
name|this
operator|.
name|rootServerAddress
argument_list|)
condition|)
block|{
comment|// Don't postpone more than once.
if|if
condition|(
operator|!
name|this
operator|.
name|postponed
operator|.
name|contains
argument_list|(
name|pss
argument_list|)
condition|)
block|{
name|this
operator|.
name|postponed
operator|.
name|add
argument_list|(
name|pss
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|this
operator|.
name|master
operator|.
name|getRegionManager
argument_list|()
operator|.
name|getRootRegionLocation
argument_list|()
argument_list|)
expr_stmt|;
name|pss
operator|.
name|setDelay
argument_list|(
literal|1
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// Return false.  This will add this op to the delayed queue.
name|result
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|process
parameter_list|(
name|HServerInfo
name|serverInfo
parameter_list|,
name|HMsg
name|incomingMsg
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|processed
parameter_list|(
name|RegionServerOperation
name|op
parameter_list|)
block|{
if|if
condition|(
name|op
operator|instanceof
name|ProcessServerShutdown
condition|)
block|{
name|ProcessServerShutdown
name|pss
init|=
operator|(
name|ProcessServerShutdown
operator|)
name|op
decl_stmt|;
if|if
condition|(
name|pss
operator|.
name|getDeadServerAddress
argument_list|()
operator|.
name|equals
argument_list|(
name|this
operator|.
name|rootServerAddress
argument_list|)
condition|)
block|{
name|this
operator|.
name|done
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|boolean
name|isDone
parameter_list|()
block|{
return|return
name|this
operator|.
name|done
return|;
block|}
block|}
comment|/**    * If the split of the log for the regionserver hosting ROOT doesn't go off    * smoothly, if the process server shutdown gets added to the delayed queue    * of events to process, then ROOT was not being allocated, ever.    * @see<a href="https://issues.apache.org/jira/browse/HBASE-2707">HBASE-2707</a>     */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testROOTDeployedThoughProblemSplittingLog
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running testROOTDeployedThoughProblemSplittingLog"
argument_list|)
expr_stmt|;
name|MiniHBaseCluster
name|cluster
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
decl_stmt|;
specifier|final
name|HMaster
name|master
init|=
name|cluster
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|byte
index|[]
name|rootRegion
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"-ROOT-,,0"
argument_list|)
decl_stmt|;
name|int
name|rootIndex
init|=
name|cluster
operator|.
name|getServerWith
argument_list|(
name|rootRegion
argument_list|)
decl_stmt|;
specifier|final
name|HRegionServer
name|rootHRS
init|=
name|cluster
operator|.
name|getRegionServer
argument_list|(
name|rootIndex
argument_list|)
decl_stmt|;
comment|// Add our RegionServerOperationsListener
name|PostponeShutdownProcessing
name|listener
init|=
operator|new
name|PostponeShutdownProcessing
argument_list|(
name|master
argument_list|,
name|rootHRS
operator|.
name|getHServerInfo
argument_list|()
operator|.
name|getServerAddress
argument_list|()
argument_list|)
decl_stmt|;
name|master
operator|.
name|getRegionServerOperationQueue
argument_list|()
operator|.
name|registerRegionServerOperationListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Now close the server carrying meta.
name|cluster
operator|.
name|abortRegionServer
argument_list|(
name|rootIndex
argument_list|)
expr_stmt|;
comment|// Wait for processing of the shutdown server.
while|while
condition|(
operator|!
name|listener
operator|.
name|isDone
argument_list|()
condition|)
name|Threads
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|master
operator|.
name|getRegionManager
argument_list|()
operator|.
name|waitForRootRegionLocation
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|master
operator|.
name|getRegionServerOperationQueue
argument_list|()
operator|.
name|unregisterRegionServerOperationListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

