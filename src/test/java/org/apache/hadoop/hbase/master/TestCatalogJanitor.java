begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NotAllMetaRegionsOnlineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableDescriptors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|catalog
operator|.
name|CatalogTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HConnectionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HConnectionTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|HRegionInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MutateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MutateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Writables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestCatalogJanitor
block|{
comment|/**    * Pseudo server for below tests.    * Be sure to call stop on the way out else could leave some mess around.    */
class|class
name|MockServer
implements|implements
name|Server
block|{
specifier|private
specifier|final
name|HConnection
name|connection
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|c
decl_stmt|;
specifier|private
specifier|final
name|CatalogTracker
name|ct
decl_stmt|;
name|MockServer
parameter_list|(
specifier|final
name|HBaseTestingUtility
name|htu
parameter_list|)
throws|throws
name|NotAllMetaRegionsOnlineException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|this
operator|.
name|c
operator|=
name|htu
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|ClientProtocol
name|ri
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ClientProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|MutateResponse
operator|.
name|Builder
name|builder
init|=
name|MutateResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setProcessed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|Mockito
operator|.
name|when
argument_list|(
name|ri
operator|.
name|mutate
argument_list|(
operator|(
name|RpcController
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|,
operator|(
name|MutateRequest
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
throw|throw
name|ProtobufUtil
operator|.
name|getRemoteException
argument_list|(
name|se
argument_list|)
throw|;
block|}
comment|// Mock an HConnection and a HRegionInterface implementation.  Have the
comment|// HConnection return the HRI.  Have the HRI return a few mocked up responses
comment|// to make our test work.
name|this
operator|.
name|connection
operator|=
name|HConnectionTestingUtility
operator|.
name|getMockedConnectionAndDecorate
argument_list|(
name|this
operator|.
name|c
argument_list|,
name|Mockito
operator|.
name|mock
argument_list|(
name|HRegionInterface
operator|.
name|class
argument_list|)
argument_list|,
name|ri
argument_list|,
operator|new
name|ServerName
argument_list|(
literal|"example.org,12345,6789"
argument_list|)
argument_list|,
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
argument_list|)
expr_stmt|;
comment|// Set hbase.rootdir into test dir.
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|this
operator|.
name|c
argument_list|)
decl_stmt|;
name|Path
name|rootdir
init|=
name|fs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|this
operator|.
name|c
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|HBASE_DIR
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|this
operator|.
name|c
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|HBASE_DIR
argument_list|,
name|rootdir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|ct
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|CatalogTracker
operator|.
name|class
argument_list|)
expr_stmt|;
name|HRegionInterface
name|hri
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HRegionInterface
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|this
operator|.
name|ct
operator|.
name|getConnection
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|this
operator|.
name|connection
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|ct
operator|.
name|waitForMetaServerConnectionDefault
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|hri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|CatalogTracker
name|getCatalogTracker
parameter_list|()
block|{
return|return
name|this
operator|.
name|ct
return|;
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|this
operator|.
name|c
return|;
block|}
annotation|@
name|Override
specifier|public
name|ServerName
name|getServerName
parameter_list|()
block|{
return|return
operator|new
name|ServerName
argument_list|(
literal|"mockserver.example.org"
argument_list|,
literal|1234
argument_list|,
operator|-
literal|1L
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ZooKeeperWatcher
name|getZooKeeper
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|abort
parameter_list|(
name|String
name|why
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
comment|//no-op
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAborted
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isStopped
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|(
name|String
name|why
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|ct
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|ct
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|connection
operator|!=
literal|null
condition|)
block|{
name|HConnectionManager
operator|.
name|deleteConnection
argument_list|(
name|this
operator|.
name|connection
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Mock MasterServices for tests below.    */
class|class
name|MockMasterServices
implements|implements
name|MasterServices
block|{
specifier|private
specifier|final
name|MasterFileSystem
name|mfs
decl_stmt|;
specifier|private
specifier|final
name|AssignmentManager
name|asm
decl_stmt|;
name|MockMasterServices
parameter_list|(
specifier|final
name|Server
name|server
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|mfs
operator|=
operator|new
name|MasterFileSystem
argument_list|(
name|server
argument_list|,
name|this
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|asm
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|AssignmentManager
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|checkTableModifiable
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
comment|//no-op
block|}
annotation|@
name|Override
specifier|public
name|void
name|createTable
parameter_list|(
name|HTableDescriptor
name|desc
parameter_list|,
name|byte
index|[]
index|[]
name|splitKeys
parameter_list|)
throws|throws
name|IOException
block|{
comment|// no-op
block|}
annotation|@
name|Override
specifier|public
name|AssignmentManager
name|getAssignmentManager
parameter_list|()
block|{
return|return
name|this
operator|.
name|asm
return|;
block|}
annotation|@
name|Override
specifier|public
name|ExecutorService
name|getExecutorService
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|MasterFileSystem
name|getMasterFileSystem
parameter_list|()
block|{
return|return
name|this
operator|.
name|mfs
return|;
block|}
annotation|@
name|Override
specifier|public
name|ServerManager
name|getServerManager
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|ZooKeeperWatcher
name|getZooKeeper
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|CatalogTracker
name|getCatalogTracker
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|ServerName
name|getServerName
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|abort
parameter_list|(
name|String
name|why
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
comment|//no-op
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAborted
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|stopped
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|(
name|String
name|why
parameter_list|)
block|{
name|stopped
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isStopped
parameter_list|()
block|{
return|return
name|stopped
return|;
block|}
annotation|@
name|Override
specifier|public
name|TableDescriptors
name|getTableDescriptors
parameter_list|()
block|{
return|return
operator|new
name|TableDescriptors
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|HTableDescriptor
name|remove
parameter_list|(
name|String
name|tablename
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|HTableDescriptor
argument_list|>
name|getAll
parameter_list|()
throws|throws
name|IOException
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|HTableDescriptor
name|get
parameter_list|(
name|byte
index|[]
name|tablename
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
return|return
name|get
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|tablename
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|HTableDescriptor
name|get
parameter_list|(
name|String
name|tablename
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
return|return
name|createHTableDescriptor
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|HTableDescriptor
name|htd
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO Auto-generated method stub
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isServerShutdownHandlerEnabled
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetHRegionInfo
parameter_list|()
throws|throws
name|IOException
block|{
name|assertNull
argument_list|(
name|CatalogJanitor
operator|.
name|getHRegionInfo
argument_list|(
operator|new
name|Result
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|Result
name|r
init|=
operator|new
name|Result
argument_list|(
name|kvs
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|CatalogJanitor
operator|.
name|getHRegionInfo
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|f
init|=
name|HConstants
operator|.
name|CATALOG_FAMILY
decl_stmt|;
comment|// Make a key value that doesn't have the expected qualifier.
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|f
argument_list|,
name|HConstants
operator|.
name|SERVER_QUALIFIER
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|=
operator|new
name|Result
argument_list|(
name|kvs
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|CatalogJanitor
operator|.
name|getHRegionInfo
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make a key that does not have a regioninfo value.
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|f
argument_list|,
name|HConstants
operator|.
name|REGIONINFO_QUALIFIER
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
name|HRegionInfo
name|hri
init|=
name|CatalogJanitor
operator|.
name|getHRegionInfo
argument_list|(
operator|new
name|Result
argument_list|(
name|kvs
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|hri
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|// OK, give it what it expects
name|kvs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|f
argument_list|,
name|HConstants
operator|.
name|REGIONINFO_QUALIFIER
argument_list|,
name|Writables
operator|.
name|getBytes
argument_list|(
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|CatalogJanitor
operator|.
name|getHRegionInfo
argument_list|(
operator|new
name|Result
argument_list|(
name|kvs
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|hri
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hri
operator|.
name|equals
argument_list|(
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCleanParent
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|HBaseTestingUtility
name|htu
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
name|setRootDirAndCleanIt
argument_list|(
name|htu
argument_list|,
literal|"testCleanParent"
argument_list|)
expr_stmt|;
name|Server
name|server
init|=
operator|new
name|MockServer
argument_list|(
name|htu
argument_list|)
decl_stmt|;
try|try
block|{
name|MasterServices
name|services
init|=
operator|new
name|MockMasterServices
argument_list|(
name|server
argument_list|)
decl_stmt|;
name|CatalogJanitor
name|janitor
init|=
operator|new
name|CatalogJanitor
argument_list|(
name|server
argument_list|,
name|services
argument_list|)
decl_stmt|;
comment|// Create regions.
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
literal|"table"
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
literal|"f"
argument_list|)
argument_list|)
expr_stmt|;
name|HRegionInfo
name|parent
init|=
operator|new
name|HRegionInfo
argument_list|(
name|htd
operator|.
name|getName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaa"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"eee"
argument_list|)
argument_list|)
decl_stmt|;
name|HRegionInfo
name|splita
init|=
operator|new
name|HRegionInfo
argument_list|(
name|htd
operator|.
name|getName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaa"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ccc"
argument_list|)
argument_list|)
decl_stmt|;
name|HRegionInfo
name|splitb
init|=
operator|new
name|HRegionInfo
argument_list|(
name|htd
operator|.
name|getName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ccc"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"eee"
argument_list|)
argument_list|)
decl_stmt|;
comment|// Test that when both daughter regions are in place, that we do not
comment|// remove the parent.
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|parent
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|SPLITA_QUALIFIER
argument_list|,
name|Writables
operator|.
name|getBytes
argument_list|(
name|splita
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|parent
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|SPLITB_QUALIFIER
argument_list|,
name|Writables
operator|.
name|getBytes
argument_list|(
name|splitb
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
operator|new
name|Result
argument_list|(
name|kvs
argument_list|)
decl_stmt|;
comment|// Add a reference under splitA directory so we don't clear out the parent.
name|Path
name|rootdir
init|=
name|services
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getRootDir
argument_list|()
decl_stmt|;
name|Path
name|tabledir
init|=
name|HTableDescriptor
operator|.
name|getTableDir
argument_list|(
name|rootdir
argument_list|,
name|htd
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|storedir
init|=
name|Store
operator|.
name|getStoreHomedir
argument_list|(
name|tabledir
argument_list|,
name|splita
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|htd
operator|.
name|getColumnFamilies
argument_list|()
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Reference
name|ref
init|=
operator|new
name|Reference
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ccc"
argument_list|)
argument_list|,
name|Reference
operator|.
name|Range
operator|.
name|top
argument_list|)
decl_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// Reference name has this format: StoreFile#REF_NAME_PARSER
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|storedir
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|now
argument_list|)
operator|+
literal|"."
operator|+
name|parent
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|services
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
name|ref
operator|.
name|write
argument_list|(
name|fs
argument_list|,
name|p
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|janitor
operator|.
name|cleanParent
argument_list|(
name|parent
argument_list|,
name|r
argument_list|)
argument_list|)
expr_stmt|;
comment|// Remove the reference file and try again.
name|assertTrue
argument_list|(
name|fs
operator|.
name|delete
argument_list|(
name|p
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|janitor
operator|.
name|cleanParent
argument_list|(
name|parent
argument_list|,
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|server
operator|.
name|stop
argument_list|(
literal|"shutdown"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Make sure parent gets cleaned up even if daughter is cleaned up before it.    * @throws IOException    * @throws InterruptedException    */
annotation|@
name|Test
specifier|public
name|void
name|testParentCleanedEvenIfDaughterGoneFirst
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|parentWithSpecifiedEndKeyCleanedEvenIfDaughterGoneFirst
argument_list|(
literal|"testParentCleanedEvenIfDaughterGoneFirst"
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"eee"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Make sure last parent with empty end key gets cleaned up even if daughter is cleaned up before it.    * @throws IOException    * @throws InterruptedException    */
annotation|@
name|Test
specifier|public
name|void
name|testLastParentCleanedEvenIfDaughterGoneFirst
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|parentWithSpecifiedEndKeyCleanedEvenIfDaughterGoneFirst
argument_list|(
literal|"testLastParentCleanedEvenIfDaughterGoneFirst"
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
comment|/**    * Make sure parent with specified end key gets cleaned up even if daughter is cleaned up before it.    *    * @param rootDir the test case name, used as the HBase testing utility root    * @param lastEndKey the end key of the split parent    * @throws IOException    * @throws InterruptedException    */
specifier|private
name|void
name|parentWithSpecifiedEndKeyCleanedEvenIfDaughterGoneFirst
parameter_list|(
specifier|final
name|String
name|rootDir
parameter_list|,
specifier|final
name|byte
index|[]
name|lastEndKey
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|HBaseTestingUtility
name|htu
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
name|setRootDirAndCleanIt
argument_list|(
name|htu
argument_list|,
name|rootDir
argument_list|)
expr_stmt|;
name|Server
name|server
init|=
operator|new
name|MockServer
argument_list|(
name|htu
argument_list|)
decl_stmt|;
name|MasterServices
name|services
init|=
operator|new
name|MockMasterServices
argument_list|(
name|server
argument_list|)
decl_stmt|;
name|CatalogJanitor
name|janitor
init|=
operator|new
name|CatalogJanitor
argument_list|(
name|server
argument_list|,
name|services
argument_list|)
decl_stmt|;
specifier|final
name|HTableDescriptor
name|htd
init|=
name|createHTableDescriptor
argument_list|()
decl_stmt|;
comment|// Create regions: aaa->{lastEndKey}, aaa->ccc, aaa->bbb, bbb->ccc, etc.
comment|// Parent
name|HRegionInfo
name|parent
init|=
operator|new
name|HRegionInfo
argument_list|(
name|htd
operator|.
name|getName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaa"
argument_list|)
argument_list|,
name|lastEndKey
argument_list|)
decl_stmt|;
comment|// Sleep a second else the encoded name on these regions comes out
comment|// same for all with same start key and made in same second.
name|Thread
operator|.
name|sleep
argument_list|(
literal|1001
argument_list|)
expr_stmt|;
comment|// Daughter a
name|HRegionInfo
name|splita
init|=
operator|new
name|HRegionInfo
argument_list|(
name|htd
operator|.
name|getName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaa"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ccc"
argument_list|)
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1001
argument_list|)
expr_stmt|;
comment|// Make daughters of daughter a; splitaa and splitab.
name|HRegionInfo
name|splitaa
init|=
operator|new
name|HRegionInfo
argument_list|(
name|htd
operator|.
name|getName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaa"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"bbb"
argument_list|)
argument_list|)
decl_stmt|;
name|HRegionInfo
name|splitab
init|=
operator|new
name|HRegionInfo
argument_list|(
name|htd
operator|.
name|getName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"bbb"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ccc"
argument_list|)
argument_list|)
decl_stmt|;
comment|// Daughter b
name|HRegionInfo
name|splitb
init|=
operator|new
name|HRegionInfo
argument_list|(
name|htd
operator|.
name|getName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ccc"
argument_list|)
argument_list|,
name|lastEndKey
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1001
argument_list|)
expr_stmt|;
comment|// Make Daughters of daughterb; splitba and splitbb.
name|HRegionInfo
name|splitba
init|=
operator|new
name|HRegionInfo
argument_list|(
name|htd
operator|.
name|getName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ccc"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ddd"
argument_list|)
argument_list|)
decl_stmt|;
name|HRegionInfo
name|splitbb
init|=
operator|new
name|HRegionInfo
argument_list|(
name|htd
operator|.
name|getName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ddd"
argument_list|)
argument_list|,
name|lastEndKey
argument_list|)
decl_stmt|;
comment|// First test that our Comparator works right up in CatalogJanitor.
comment|// Just fo kicks.
name|SortedMap
argument_list|<
name|HRegionInfo
argument_list|,
name|Result
argument_list|>
name|regions
init|=
operator|new
name|TreeMap
argument_list|<
name|HRegionInfo
argument_list|,
name|Result
argument_list|>
argument_list|(
operator|new
name|CatalogJanitor
operator|.
name|SplitParentFirstComparator
argument_list|()
argument_list|)
decl_stmt|;
comment|// Now make sure that this regions map sorts as we expect it to.
name|regions
operator|.
name|put
argument_list|(
name|parent
argument_list|,
name|createResult
argument_list|(
name|parent
argument_list|,
name|splita
argument_list|,
name|splitb
argument_list|)
argument_list|)
expr_stmt|;
name|regions
operator|.
name|put
argument_list|(
name|splitb
argument_list|,
name|createResult
argument_list|(
name|splitb
argument_list|,
name|splitba
argument_list|,
name|splitbb
argument_list|)
argument_list|)
expr_stmt|;
name|regions
operator|.
name|put
argument_list|(
name|splita
argument_list|,
name|createResult
argument_list|(
name|splita
argument_list|,
name|splitaa
argument_list|,
name|splitab
argument_list|)
argument_list|)
expr_stmt|;
comment|// Assert its properly sorted.
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|HRegionInfo
argument_list|,
name|Result
argument_list|>
name|e
range|:
name|regions
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|index
operator|==
literal|0
condition|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getEncodedName
argument_list|()
operator|.
name|equals
argument_list|(
name|parent
operator|.
name|getEncodedName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|index
operator|==
literal|1
condition|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getEncodedName
argument_list|()
operator|.
name|equals
argument_list|(
name|splita
operator|.
name|getEncodedName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|index
operator|==
literal|2
condition|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getEncodedName
argument_list|()
operator|.
name|equals
argument_list|(
name|splitb
operator|.
name|getEncodedName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|index
operator|++
expr_stmt|;
block|}
comment|// Now play around with the cleanParent function.  Create a ref from splita
comment|// up to the parent.
name|Path
name|splitaRef
init|=
name|createReferences
argument_list|(
name|services
argument_list|,
name|htd
argument_list|,
name|parent
argument_list|,
name|splita
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ccc"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Make sure actual super parent sticks around because splita has a ref.
name|assertFalse
argument_list|(
name|janitor
operator|.
name|cleanParent
argument_list|(
name|parent
argument_list|,
name|regions
operator|.
name|get
argument_list|(
name|parent
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//splitba, and split bb, do not have dirs in fs.  That means that if
comment|// we test splitb, it should get cleaned up.
name|assertTrue
argument_list|(
name|janitor
operator|.
name|cleanParent
argument_list|(
name|splitb
argument_list|,
name|regions
operator|.
name|get
argument_list|(
name|splitb
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now remove ref from splita to parent... so parent can be let go and so
comment|// the daughter splita can be split (can't split if still references).
comment|// BUT make the timing such that the daughter gets cleaned up before we
comment|// can get a chance to let go of the parent.
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|htu
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|delete
argument_list|(
name|splitaRef
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create the refs from daughters of splita.
name|Path
name|splitaaRef
init|=
name|createReferences
argument_list|(
name|services
argument_list|,
name|htd
argument_list|,
name|splita
argument_list|,
name|splitaa
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"bbb"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Path
name|splitabRef
init|=
name|createReferences
argument_list|(
name|services
argument_list|,
name|htd
argument_list|,
name|splita
argument_list|,
name|splitab
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"bbb"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// Test splita.  It should stick around because references from splitab, etc.
name|assertFalse
argument_list|(
name|janitor
operator|.
name|cleanParent
argument_list|(
name|splita
argument_list|,
name|regions
operator|.
name|get
argument_list|(
name|splita
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now clean up parent daughter first.  Remove references from its daughters.
name|assertTrue
argument_list|(
name|fs
operator|.
name|delete
argument_list|(
name|splitaaRef
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|delete
argument_list|(
name|splitabRef
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|janitor
operator|.
name|cleanParent
argument_list|(
name|splita
argument_list|,
name|regions
operator|.
name|get
argument_list|(
name|splita
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Super parent should get cleaned up now both splita and splitb are gone.
name|assertTrue
argument_list|(
name|janitor
operator|.
name|cleanParent
argument_list|(
name|parent
argument_list|,
name|regions
operator|.
name|get
argument_list|(
name|parent
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|services
operator|.
name|stop
argument_list|(
literal|"test finished"
argument_list|)
expr_stmt|;
name|janitor
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
specifier|private
name|String
name|setRootDirAndCleanIt
parameter_list|(
specifier|final
name|HBaseTestingUtility
name|htu
parameter_list|,
specifier|final
name|String
name|subdir
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|testdir
init|=
name|htu
operator|.
name|getDataTestDir
argument_list|(
name|subdir
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|htu
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|testdir
argument_list|)
condition|)
name|assertTrue
argument_list|(
name|fs
operator|.
name|delete
argument_list|(
name|testdir
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|htu
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|HBASE_DIR
argument_list|,
name|testdir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|htu
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|HBASE_DIR
argument_list|)
return|;
block|}
comment|/**    * @param services Master services instance.    * @param htd    * @param parent    * @param daughter    * @param midkey    * @param top True if we are to write a 'top' reference.    * @return Path to reference we created.    * @throws IOException    */
specifier|private
name|Path
name|createReferences
parameter_list|(
specifier|final
name|MasterServices
name|services
parameter_list|,
specifier|final
name|HTableDescriptor
name|htd
parameter_list|,
specifier|final
name|HRegionInfo
name|parent
parameter_list|,
specifier|final
name|HRegionInfo
name|daughter
parameter_list|,
specifier|final
name|byte
index|[]
name|midkey
parameter_list|,
specifier|final
name|boolean
name|top
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|rootdir
init|=
name|services
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getRootDir
argument_list|()
decl_stmt|;
name|Path
name|tabledir
init|=
name|HTableDescriptor
operator|.
name|getTableDir
argument_list|(
name|rootdir
argument_list|,
name|parent
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|storedir
init|=
name|Store
operator|.
name|getStoreHomedir
argument_list|(
name|tabledir
argument_list|,
name|daughter
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|htd
operator|.
name|getColumnFamilies
argument_list|()
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Reference
name|ref
init|=
operator|new
name|Reference
argument_list|(
name|midkey
argument_list|,
name|top
condition|?
name|Reference
operator|.
name|Range
operator|.
name|top
else|:
name|Reference
operator|.
name|Range
operator|.
name|bottom
argument_list|)
decl_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// Reference name has this format: StoreFile#REF_NAME_PARSER
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|storedir
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|now
argument_list|)
operator|+
literal|"."
operator|+
name|parent
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|services
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|ref
operator|.
name|write
argument_list|(
name|fs
argument_list|,
name|p
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
specifier|private
name|Result
name|createResult
parameter_list|(
specifier|final
name|HRegionInfo
name|parent
parameter_list|,
specifier|final
name|HRegionInfo
name|a
parameter_list|,
specifier|final
name|HRegionInfo
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|parent
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|SPLITA_QUALIFIER
argument_list|,
name|Writables
operator|.
name|getBytes
argument_list|(
name|a
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|parent
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|SPLITB_QUALIFIER
argument_list|,
name|Writables
operator|.
name|getBytes
argument_list|(
name|b
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|Result
argument_list|(
name|kvs
argument_list|)
return|;
block|}
specifier|private
name|HTableDescriptor
name|createHTableDescriptor
parameter_list|()
block|{
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
literal|"t"
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
literal|"f"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|htd
return|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Rule
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ResourceCheckerJUnitRule
name|cu
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ResourceCheckerJUnitRule
argument_list|()
decl_stmt|;
block|}
end_class

end_unit

