begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|LoadBalancer
operator|.
name|RegionPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestLoadBalancer
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestLoadBalancer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|LoadBalancer
name|loadBalancer
decl_stmt|;
specifier|private
specifier|static
name|Random
name|rand
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeAllTests
parameter_list|()
throws|throws
name|Exception
block|{
name|loadBalancer
operator|=
operator|new
name|LoadBalancer
argument_list|()
expr_stmt|;
name|rand
operator|=
operator|new
name|Random
argument_list|()
expr_stmt|;
block|}
comment|// int[testnum][servernumber] -> numregions
name|int
index|[]
index|[]
name|clusterStateMocks
init|=
operator|new
name|int
index|[]
index|[]
block|{
comment|// 1 node
operator|new
name|int
index|[]
block|{
literal|0
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|10
block|}
block|,
comment|// 2 node
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|0
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|1
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|2
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|3
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|4
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|10
block|,
literal|1
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|14
block|,
literal|1432
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|47
block|,
literal|53
block|}
block|,
comment|// 3 node
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|2
block|,
literal|2
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|3
block|,
literal|0
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|4
block|,
literal|0
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|20
block|,
literal|20
block|,
literal|0
block|}
block|,
comment|// 4 node
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|4
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|5
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|6
block|,
literal|6
block|,
literal|0
block|,
literal|0
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|6
block|,
literal|2
block|,
literal|0
block|,
literal|0
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|6
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|6
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|7
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|8
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|7
block|}
block|,
comment|// 5 node
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|4
block|}
block|,
comment|// more nodes
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|8
block|,
literal|9
block|,
literal|10
block|,
literal|11
block|,
literal|12
block|,
literal|13
block|,
literal|14
block|,
literal|15
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|10
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|6
block|,
literal|6
block|,
literal|5
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|1
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|54
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|55
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|56
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|16
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|8
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|9
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|10
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|123
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|155
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|144
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1123
block|,
literal|133
block|,
literal|138
block|,
literal|12
block|,
literal|1444
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|144
block|,
literal|1
block|,
literal|0
block|,
literal|4
block|,
literal|1
block|,
literal|1123
block|,
literal|133
block|,
literal|138
block|,
literal|12
block|,
literal|1444
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|1538
block|,
literal|1392
block|,
literal|1561
block|,
literal|1557
block|,
literal|1535
block|,
literal|1553
block|,
literal|1385
block|,
literal|1542
block|,
literal|1619
block|}
block|}
decl_stmt|;
name|int
index|[]
index|[]
name|regionsAndServersMocks
init|=
operator|new
name|int
index|[]
index|[]
block|{
comment|// { num regions, num servers }
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|1
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|10
block|,
literal|1
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|2
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|3
block|,
literal|2
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|3
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|3
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|3
block|,
literal|3
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|25
block|,
literal|3
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|10
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|100
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|12
block|,
literal|10
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|12
block|,
literal|100
block|}
block|,   }
decl_stmt|;
comment|/**    * Test the load balancing algorithm.    *    * Invariant is that all servers should be hosting either    * floor(average) or ceiling(average)    *    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testBalanceCluster
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
index|[]
name|mockCluster
range|:
name|clusterStateMocks
control|)
block|{
name|Map
argument_list|<
name|HServerInfo
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|servers
init|=
name|mockClusterServers
argument_list|(
name|mockCluster
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Mock Cluster : "
operator|+
name|printMock
argument_list|(
name|servers
argument_list|)
operator|+
literal|" "
operator|+
name|printStats
argument_list|(
name|servers
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RegionPlan
argument_list|>
name|plans
init|=
name|loadBalancer
operator|.
name|balanceCluster
argument_list|(
name|servers
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HServerInfo
argument_list|>
name|balancedCluster
init|=
name|reconcile
argument_list|(
name|servers
argument_list|,
name|plans
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Mock Balance : "
operator|+
name|printMock
argument_list|(
name|balancedCluster
argument_list|)
argument_list|)
expr_stmt|;
name|assertClusterAsBalanced
argument_list|(
name|balancedCluster
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|HServerInfo
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|entry
range|:
name|servers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|returnRegions
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|returnServer
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Invariant is that all servers have between floor(avg) and ceiling(avg)    * number of regions.    */
specifier|public
name|void
name|assertClusterAsBalanced
parameter_list|(
name|List
argument_list|<
name|HServerInfo
argument_list|>
name|servers
parameter_list|)
block|{
name|int
name|numServers
init|=
name|servers
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|numRegions
init|=
literal|0
decl_stmt|;
name|int
name|maxRegions
init|=
literal|0
decl_stmt|;
name|int
name|minRegions
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
for|for
control|(
name|HServerInfo
name|server
range|:
name|servers
control|)
block|{
name|int
name|nr
init|=
name|server
operator|.
name|getLoad
argument_list|()
operator|.
name|getNumberOfRegions
argument_list|()
decl_stmt|;
if|if
condition|(
name|nr
operator|>
name|maxRegions
condition|)
block|{
name|maxRegions
operator|=
name|nr
expr_stmt|;
block|}
if|if
condition|(
name|nr
operator|<
name|minRegions
condition|)
block|{
name|minRegions
operator|=
name|nr
expr_stmt|;
block|}
name|numRegions
operator|+=
name|nr
expr_stmt|;
block|}
if|if
condition|(
name|maxRegions
operator|-
name|minRegions
operator|<
literal|2
condition|)
block|{
comment|// less than 2 between max and min, can't balance
return|return;
block|}
name|int
name|min
init|=
name|numRegions
operator|/
name|numServers
decl_stmt|;
name|int
name|max
init|=
name|numRegions
operator|%
name|numServers
operator|==
literal|0
condition|?
name|min
else|:
name|min
operator|+
literal|1
decl_stmt|;
for|for
control|(
name|HServerInfo
name|server
range|:
name|servers
control|)
block|{
name|assertTrue
argument_list|(
name|server
operator|.
name|getLoad
argument_list|()
operator|.
name|getNumberOfRegions
argument_list|()
operator|<=
name|max
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|server
operator|.
name|getLoad
argument_list|()
operator|.
name|getNumberOfRegions
argument_list|()
operator|>=
name|min
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Tests immediate assignment.    *    * Invariant is that all regions have an assignment.    *    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testImmediateAssignment
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
index|[]
name|mock
range|:
name|regionsAndServersMocks
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"testImmediateAssignment with "
operator|+
name|mock
index|[
literal|0
index|]
operator|+
literal|" regions and "
operator|+
name|mock
index|[
literal|1
index|]
operator|+
literal|" servers"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
name|randomRegions
argument_list|(
name|mock
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HServerInfo
argument_list|>
name|servers
init|=
name|randomServers
argument_list|(
name|mock
index|[
literal|1
index|]
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerInfo
argument_list|>
name|assignments
init|=
name|LoadBalancer
operator|.
name|immediateAssignment
argument_list|(
name|regions
argument_list|,
name|servers
argument_list|)
decl_stmt|;
name|assertImmediateAssignment
argument_list|(
name|regions
argument_list|,
name|servers
argument_list|,
name|assignments
argument_list|)
expr_stmt|;
name|returnRegions
argument_list|(
name|regions
argument_list|)
expr_stmt|;
name|returnServers
argument_list|(
name|servers
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * All regions have an assignment.    * @param regions    * @param servers    * @param assignments    */
specifier|private
name|void
name|assertImmediateAssignment
parameter_list|(
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
parameter_list|,
name|List
argument_list|<
name|HServerInfo
argument_list|>
name|servers
parameter_list|,
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerInfo
argument_list|>
name|assignments
parameter_list|)
block|{
for|for
control|(
name|HRegionInfo
name|region
range|:
name|regions
control|)
block|{
name|assertTrue
argument_list|(
name|assignments
operator|.
name|containsKey
argument_list|(
name|region
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Tests the bulk assignment used during cluster startup.    *    * Round-robin.  Should yield a balanced cluster so same invariant as the load    * balancer holds, all servers holding either floor(avg) or ceiling(avg).    *    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testBulkAssignment
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
index|[]
name|mock
range|:
name|regionsAndServersMocks
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"testBulkAssignment with "
operator|+
name|mock
index|[
literal|0
index|]
operator|+
literal|" regions and "
operator|+
name|mock
index|[
literal|1
index|]
operator|+
literal|" servers"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
name|randomRegions
argument_list|(
name|mock
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HServerInfo
argument_list|>
name|servers
init|=
name|randomServers
argument_list|(
name|mock
index|[
literal|1
index|]
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|HServerInfo
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|assignments
init|=
name|LoadBalancer
operator|.
name|roundRobinAssignment
argument_list|(
name|regions
argument_list|,
name|servers
argument_list|)
decl_stmt|;
name|float
name|average
init|=
operator|(
name|float
operator|)
name|regions
operator|.
name|size
argument_list|()
operator|/
name|servers
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|min
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|average
argument_list|)
decl_stmt|;
name|int
name|max
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|average
argument_list|)
decl_stmt|;
if|if
condition|(
name|assignments
operator|!=
literal|null
operator|&&
operator|!
name|assignments
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regionList
range|:
name|assignments
operator|.
name|values
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|regionList
operator|.
name|size
argument_list|()
operator|==
name|min
operator|||
name|regionList
operator|.
name|size
argument_list|()
operator|==
name|max
argument_list|)
expr_stmt|;
block|}
block|}
name|returnRegions
argument_list|(
name|regions
argument_list|)
expr_stmt|;
name|returnServers
argument_list|(
name|servers
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test the cluster startup bulk assignment which attempts to retain    * assignment info.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testRetainAssignment
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test simple case where all same servers are there
name|List
argument_list|<
name|HServerInfo
argument_list|>
name|servers
init|=
name|randomServers
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
name|randomRegions
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
name|existing
init|=
operator|new
name|TreeMap
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|regions
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|existing
operator|.
name|put
argument_list|(
name|regions
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|servers
operator|.
name|get
argument_list|(
name|i
operator|%
name|servers
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|getServerAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|HServerInfo
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|assignment
init|=
name|LoadBalancer
operator|.
name|retainAssignment
argument_list|(
name|existing
argument_list|,
name|servers
argument_list|)
decl_stmt|;
name|assertRetainedAssignment
argument_list|(
name|existing
argument_list|,
name|servers
argument_list|,
name|assignment
argument_list|)
expr_stmt|;
comment|// Include two new servers that were not there before
name|List
argument_list|<
name|HServerInfo
argument_list|>
name|servers2
init|=
operator|new
name|ArrayList
argument_list|<
name|HServerInfo
argument_list|>
argument_list|(
name|servers
argument_list|)
decl_stmt|;
name|servers2
operator|.
name|add
argument_list|(
name|randomServer
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|servers2
operator|.
name|add
argument_list|(
name|randomServer
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assignment
operator|=
name|LoadBalancer
operator|.
name|retainAssignment
argument_list|(
name|existing
argument_list|,
name|servers2
argument_list|)
expr_stmt|;
name|assertRetainedAssignment
argument_list|(
name|existing
argument_list|,
name|servers2
argument_list|,
name|assignment
argument_list|)
expr_stmt|;
comment|// Remove two of the servers that were previously there
name|List
argument_list|<
name|HServerInfo
argument_list|>
name|servers3
init|=
operator|new
name|ArrayList
argument_list|<
name|HServerInfo
argument_list|>
argument_list|(
name|servers
argument_list|)
decl_stmt|;
name|servers3
operator|.
name|remove
argument_list|(
name|servers3
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|servers3
operator|.
name|remove
argument_list|(
name|servers3
operator|.
name|size
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
name|assignment
operator|=
name|LoadBalancer
operator|.
name|retainAssignment
argument_list|(
name|existing
argument_list|,
name|servers3
argument_list|)
expr_stmt|;
name|assertRetainedAssignment
argument_list|(
name|existing
argument_list|,
name|servers3
argument_list|,
name|assignment
argument_list|)
expr_stmt|;
block|}
comment|/**    * Asserts a valid retained assignment plan.    *<p>    * Must meet the following conditions:    *<ul>    *<li>Every input region has an assignment, and to an online server    *<li>If a region had an existing assignment to a server with the same    *       address a a currently online server, it will be assigned to it    *</ul>    * @param existing    * @param servers    * @param assignment    */
specifier|private
name|void
name|assertRetainedAssignment
parameter_list|(
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
name|existing
parameter_list|,
name|List
argument_list|<
name|HServerInfo
argument_list|>
name|servers
parameter_list|,
name|Map
argument_list|<
name|HServerInfo
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|assignment
parameter_list|)
block|{
comment|// Verify condition 1, every region assigned, and to online server
name|Set
argument_list|<
name|HServerInfo
argument_list|>
name|onlineServerSet
init|=
operator|new
name|TreeSet
argument_list|<
name|HServerInfo
argument_list|>
argument_list|(
name|servers
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
name|assignedRegions
init|=
operator|new
name|TreeSet
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|HServerInfo
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|a
range|:
name|assignment
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
literal|"Region assigned to server that was not listed as online"
argument_list|,
name|onlineServerSet
operator|.
name|contains
argument_list|(
name|a
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|HRegionInfo
name|r
range|:
name|a
operator|.
name|getValue
argument_list|()
control|)
name|assignedRegions
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|existing
operator|.
name|size
argument_list|()
argument_list|,
name|assignedRegions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify condition 2, if server had existing assignment, must have same
name|Set
argument_list|<
name|HServerAddress
argument_list|>
name|onlineAddresses
init|=
operator|new
name|TreeSet
argument_list|<
name|HServerAddress
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|HServerInfo
name|s
range|:
name|servers
control|)
name|onlineAddresses
operator|.
name|add
argument_list|(
name|s
operator|.
name|getServerAddress
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|HServerInfo
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|a
range|:
name|assignment
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|HRegionInfo
name|r
range|:
name|a
operator|.
name|getValue
argument_list|()
control|)
block|{
name|HServerAddress
name|address
init|=
name|existing
operator|.
name|get
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|address
operator|!=
literal|null
operator|&&
name|onlineAddresses
operator|.
name|contains
argument_list|(
name|address
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|a
operator|.
name|getKey
argument_list|()
operator|.
name|getServerAddress
argument_list|()
operator|.
name|equals
argument_list|(
name|address
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|String
name|printStats
parameter_list|(
name|Map
argument_list|<
name|HServerInfo
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|servers
parameter_list|)
block|{
name|int
name|numServers
init|=
name|servers
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|totalRegions
init|=
literal|0
decl_stmt|;
for|for
control|(
name|HServerInfo
name|server
range|:
name|servers
operator|.
name|keySet
argument_list|()
control|)
block|{
name|totalRegions
operator|+=
name|server
operator|.
name|getLoad
argument_list|()
operator|.
name|getNumberOfRegions
argument_list|()
expr_stmt|;
block|}
name|float
name|average
init|=
operator|(
name|float
operator|)
name|totalRegions
operator|/
name|numServers
decl_stmt|;
name|int
name|max
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|average
argument_list|)
decl_stmt|;
name|int
name|min
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|average
argument_list|)
decl_stmt|;
return|return
literal|"[srvr="
operator|+
name|numServers
operator|+
literal|" rgns="
operator|+
name|totalRegions
operator|+
literal|" avg="
operator|+
name|average
operator|+
literal|" max="
operator|+
name|max
operator|+
literal|" min="
operator|+
name|min
operator|+
literal|"]"
return|;
block|}
specifier|private
name|String
name|printMock
parameter_list|(
name|Map
argument_list|<
name|HServerInfo
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|servers
parameter_list|)
block|{
return|return
name|printMock
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|servers
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|HServerInfo
index|[
name|servers
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|String
name|printMock
parameter_list|(
name|List
argument_list|<
name|HServerInfo
argument_list|>
name|balancedCluster
parameter_list|)
block|{
name|SortedSet
argument_list|<
name|HServerInfo
argument_list|>
name|sorted
init|=
operator|new
name|TreeSet
argument_list|<
name|HServerInfo
argument_list|>
argument_list|(
name|balancedCluster
argument_list|)
decl_stmt|;
name|HServerInfo
index|[]
name|arr
init|=
name|sorted
operator|.
name|toArray
argument_list|(
operator|new
name|HServerInfo
index|[
name|sorted
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|sorted
operator|.
name|size
argument_list|()
operator|*
literal|4
operator|+
literal|4
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"{ "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arr
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" , "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|arr
index|[
name|i
index|]
operator|.
name|getLoad
argument_list|()
operator|.
name|getNumberOfRegions
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|" }"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * This assumes the RegionPlan HSI instances are the same ones in the map, so    * actually no need to even pass in the map, but I think it's clearer.    * @param servers    * @param plans    * @return    */
specifier|private
name|List
argument_list|<
name|HServerInfo
argument_list|>
name|reconcile
parameter_list|(
name|Map
argument_list|<
name|HServerInfo
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|servers
parameter_list|,
name|List
argument_list|<
name|RegionPlan
argument_list|>
name|plans
parameter_list|)
block|{
if|if
condition|(
name|plans
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|RegionPlan
name|plan
range|:
name|plans
control|)
block|{
name|plan
operator|.
name|getSource
argument_list|()
operator|.
name|getLoad
argument_list|()
operator|.
name|setNumberOfRegions
argument_list|(
name|plan
operator|.
name|getSource
argument_list|()
operator|.
name|getLoad
argument_list|()
operator|.
name|getNumberOfRegions
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|plan
operator|.
name|getDestination
argument_list|()
operator|.
name|getLoad
argument_list|()
operator|.
name|setNumberOfRegions
argument_list|(
name|plan
operator|.
name|getDestination
argument_list|()
operator|.
name|getLoad
argument_list|()
operator|.
name|getNumberOfRegions
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|servers
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|HServerInfo
index|[
name|servers
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|Map
argument_list|<
name|HServerInfo
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|mockClusterServers
parameter_list|(
name|int
index|[]
name|mockCluster
parameter_list|)
block|{
name|int
name|numServers
init|=
name|mockCluster
operator|.
name|length
decl_stmt|;
name|Map
argument_list|<
name|HServerInfo
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|servers
init|=
operator|new
name|TreeMap
argument_list|<
name|HServerInfo
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numServers
condition|;
name|i
operator|++
control|)
block|{
name|int
name|numRegions
init|=
name|mockCluster
index|[
name|i
index|]
decl_stmt|;
name|HServerInfo
name|server
init|=
name|randomServer
argument_list|(
name|numRegions
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
name|randomRegions
argument_list|(
name|numRegions
argument_list|)
decl_stmt|;
name|servers
operator|.
name|put
argument_list|(
name|server
argument_list|,
name|regions
argument_list|)
expr_stmt|;
block|}
return|return
name|servers
return|;
block|}
specifier|private
name|Queue
argument_list|<
name|HRegionInfo
argument_list|>
name|regionQueue
init|=
operator|new
name|LinkedList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|randomRegions
parameter_list|(
name|int
name|numRegions
parameter_list|)
block|{
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|(
name|numRegions
argument_list|)
decl_stmt|;
name|byte
index|[]
name|start
init|=
operator|new
name|byte
index|[
literal|16
index|]
decl_stmt|;
name|byte
index|[]
name|end
init|=
operator|new
name|byte
index|[
literal|16
index|]
decl_stmt|;
name|rand
operator|.
name|nextBytes
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|rand
operator|.
name|nextBytes
argument_list|(
name|end
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRegions
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|regionQueue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|regions
operator|.
name|add
argument_list|(
name|regionQueue
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|Bytes
operator|.
name|putInt
argument_list|(
name|start
argument_list|,
literal|0
argument_list|,
name|numRegions
operator|<<
literal|1
argument_list|)
expr_stmt|;
name|Bytes
operator|.
name|putInt
argument_list|(
name|end
argument_list|,
literal|0
argument_list|,
operator|(
name|numRegions
operator|<<
literal|1
operator|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|HRegionInfo
name|hri
init|=
operator|new
name|HRegionInfo
argument_list|(
operator|new
name|HTableDescriptor
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"table"
argument_list|)
argument_list|)
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
decl_stmt|;
name|regions
operator|.
name|add
argument_list|(
name|hri
argument_list|)
expr_stmt|;
block|}
return|return
name|regions
return|;
block|}
specifier|private
name|void
name|returnRegions
parameter_list|(
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
parameter_list|)
block|{
name|regionQueue
operator|.
name|addAll
argument_list|(
name|regions
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Queue
argument_list|<
name|HServerInfo
argument_list|>
name|serverQueue
init|=
operator|new
name|LinkedList
argument_list|<
name|HServerInfo
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|HServerInfo
name|randomServer
parameter_list|(
name|int
name|numRegions
parameter_list|)
block|{
if|if
condition|(
operator|!
name|serverQueue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|HServerInfo
name|server
init|=
name|this
operator|.
name|serverQueue
operator|.
name|poll
argument_list|()
decl_stmt|;
name|server
operator|.
name|getLoad
argument_list|()
operator|.
name|setNumberOfRegions
argument_list|(
name|numRegions
argument_list|)
expr_stmt|;
return|return
name|server
return|;
block|}
name|String
name|host
init|=
literal|"127.0.0.1"
decl_stmt|;
name|int
name|port
init|=
name|rand
operator|.
name|nextInt
argument_list|(
literal|60000
argument_list|)
decl_stmt|;
name|long
name|startCode
init|=
name|rand
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|HServerInfo
name|hsi
init|=
operator|new
name|HServerInfo
argument_list|(
operator|new
name|HServerAddress
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
argument_list|,
name|startCode
argument_list|,
name|port
argument_list|,
name|host
argument_list|)
decl_stmt|;
name|hsi
operator|.
name|getLoad
argument_list|()
operator|.
name|setNumberOfRegions
argument_list|(
name|numRegions
argument_list|)
expr_stmt|;
return|return
name|hsi
return|;
block|}
specifier|private
name|List
argument_list|<
name|HServerInfo
argument_list|>
name|randomServers
parameter_list|(
name|int
name|numServers
parameter_list|,
name|int
name|numRegionsPerServer
parameter_list|)
block|{
name|List
argument_list|<
name|HServerInfo
argument_list|>
name|servers
init|=
operator|new
name|ArrayList
argument_list|<
name|HServerInfo
argument_list|>
argument_list|(
name|numServers
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numServers
condition|;
name|i
operator|++
control|)
block|{
name|servers
operator|.
name|add
argument_list|(
name|randomServer
argument_list|(
name|numRegionsPerServer
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|servers
return|;
block|}
specifier|private
name|void
name|returnServer
parameter_list|(
name|HServerInfo
name|server
parameter_list|)
block|{
name|serverQueue
operator|.
name|add
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|returnServers
parameter_list|(
name|List
argument_list|<
name|HServerInfo
argument_list|>
name|servers
parameter_list|)
block|{
name|serverQueue
operator|.
name|addAll
argument_list|(
name|servers
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

