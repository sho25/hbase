begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ZooKeeperConnectionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|catalog
operator|.
name|CatalogTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|EventHandler
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|RegionTransitionData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKAssign
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
operator|.
name|NodeExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_comment
comment|/**  * Test {@link AssignmentManager}  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestAssignmentManager
block|{
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|HTU
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ServerName
name|RANDOM_SERVERNAME
init|=
operator|new
name|ServerName
argument_list|(
literal|"example.org"
argument_list|,
literal|1234
argument_list|,
literal|5678
argument_list|)
decl_stmt|;
specifier|private
name|Server
name|server
decl_stmt|;
specifier|private
name|ServerManager
name|serverManager
decl_stmt|;
specifier|private
name|CatalogTracker
name|ct
decl_stmt|;
specifier|private
name|ExecutorService
name|executor
decl_stmt|;
specifier|private
name|ZooKeeperWatcher
name|watcher
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|HTU
operator|.
name|startMiniZKCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|IOException
block|{
name|HTU
operator|.
name|shutdownMiniZKCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|ZooKeeperConnectionException
throws|,
name|IOException
block|{
comment|// Mock a Server.  Have it return a legit Configuration and ZooKeeperWatcher.
comment|// If abort is called, be sure to fail the test (don't just swallow it
comment|// silently as is mockito default).
name|this
operator|.
name|server
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Server
operator|.
name|class
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|server
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|HTU
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|watcher
operator|=
operator|new
name|ZooKeeperWatcher
argument_list|(
name|HTU
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|"mocked server"
argument_list|,
name|this
operator|.
name|server
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|server
operator|.
name|getZooKeeper
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|this
operator|.
name|watcher
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doThrow
argument_list|(
operator|new
name|RuntimeException
argument_list|(
literal|"Aborted"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|server
argument_list|)
operator|.
name|abort
argument_list|(
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|,
operator|(
name|Throwable
operator|)
name|Mockito
operator|.
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
comment|// Mock a ServerManager.  Say the server RANDOME_SERVERNAME is online.
comment|// Also, when someone sends sendRegionClose, say true it succeeded.
name|this
operator|.
name|serverManager
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ServerManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|this
operator|.
name|serverManager
operator|.
name|isServerOnline
argument_list|(
name|RANDOM_SERVERNAME
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|ct
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|CatalogTracker
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|executor
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ExecutorService
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|watcher
operator|!=
literal|null
condition|)
name|this
operator|.
name|watcher
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnassignWithSplitAtSameTime
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|IOException
block|{
comment|// Region to use in test.
specifier|final
name|HRegionInfo
name|hri
init|=
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
decl_stmt|;
comment|// First amend the servermanager mock so that when we do send close of the
comment|// first meta region on RANDOM_SERVERNAME, it will return true rather than
comment|// default null.
name|Mockito
operator|.
name|when
argument_list|(
name|this
operator|.
name|serverManager
operator|.
name|sendRegionClose
argument_list|(
name|RANDOM_SERVERNAME
argument_list|,
name|hri
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Create an AM.
name|AssignmentManager
name|am
init|=
operator|new
name|AssignmentManager
argument_list|(
name|this
operator|.
name|server
argument_list|,
name|this
operator|.
name|serverManager
argument_list|,
name|this
operator|.
name|ct
argument_list|,
name|this
operator|.
name|executor
argument_list|)
decl_stmt|;
try|try
block|{
comment|// First make sure my mock up basically works.  Unassign a region.
name|unassign
argument_list|(
name|am
argument_list|,
name|RANDOM_SERVERNAME
argument_list|,
name|hri
argument_list|)
expr_stmt|;
comment|// This delete will fail if the previous unassign did wrong thing.
name|ZKAssign
operator|.
name|deleteClosingNode
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|hri
argument_list|)
expr_stmt|;
comment|// Now put a SPLITTING region in the way.  I don't have to assert it
comment|// go put in place.  This method puts it in place then asserts it still
comment|// owns it by moving state from SPLITTING to SPLITTING.
name|int
name|version
init|=
name|createNodeSplitting
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|hri
argument_list|,
name|RANDOM_SERVERNAME
argument_list|)
decl_stmt|;
comment|// Now, retry the unassign with the SPLTTING in place.  It should just
comment|// complete without fail; a sort of 'silent' recognition that the
comment|// region to unassign has been split and no longer exists: TOOD: what if
comment|// the split fails and the parent region comes back to life?
name|unassign
argument_list|(
name|am
argument_list|,
name|RANDOM_SERVERNAME
argument_list|,
name|hri
argument_list|)
expr_stmt|;
comment|// This transition should fail if the znode has been messed with.
name|ZKAssign
operator|.
name|transitionNode
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|hri
argument_list|,
name|RANDOM_SERVERNAME
argument_list|,
name|EventType
operator|.
name|RS_ZK_REGION_SPLITTING
argument_list|,
name|EventType
operator|.
name|RS_ZK_REGION_SPLITTING
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|am
operator|.
name|isRegionInTransition
argument_list|(
name|hri
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|am
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Creates a new ephemeral node in the SPLITTING state for the specified region.    * Create it ephemeral in case regionserver dies mid-split.    *    *<p>Does not transition nodes from other states.  If a node already exists    * for this region, a {@link NodeExistsException} will be thrown.    *    * @param zkw zk reference    * @param region region to be created as offline    * @param serverName server event originates from    * @return Version of znode created.    * @throws KeeperException     * @throws IOException     */
comment|// Copied from SplitTransaction rather than open the method over there in
comment|// the regionserver package.
specifier|private
specifier|static
name|int
name|createNodeSplitting
parameter_list|(
specifier|final
name|ZooKeeperWatcher
name|zkw
parameter_list|,
specifier|final
name|HRegionInfo
name|region
parameter_list|,
specifier|final
name|ServerName
name|serverName
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|IOException
block|{
name|RegionTransitionData
name|data
init|=
operator|new
name|RegionTransitionData
argument_list|(
name|EventType
operator|.
name|RS_ZK_REGION_SPLITTING
argument_list|,
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|serverName
argument_list|)
decl_stmt|;
name|String
name|node
init|=
name|ZKAssign
operator|.
name|getNodeName
argument_list|(
name|zkw
argument_list|,
name|region
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ZKUtil
operator|.
name|createEphemeralNodeAndWatch
argument_list|(
name|zkw
argument_list|,
name|node
argument_list|,
name|data
operator|.
name|getBytes
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed create of ephemeral "
operator|+
name|node
argument_list|)
throw|;
block|}
comment|// Transition node from SPLITTING to SPLITTING and pick up version so we
comment|// can be sure this znode is ours; version is needed deleting.
return|return
name|transitionNodeSplitting
argument_list|(
name|zkw
argument_list|,
name|region
argument_list|,
name|serverName
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
comment|// Copied from SplitTransaction rather than open the method over there in
comment|// the regionserver package.
specifier|private
specifier|static
name|int
name|transitionNodeSplitting
parameter_list|(
specifier|final
name|ZooKeeperWatcher
name|zkw
parameter_list|,
specifier|final
name|HRegionInfo
name|parent
parameter_list|,
specifier|final
name|ServerName
name|serverName
parameter_list|,
specifier|final
name|int
name|version
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|IOException
block|{
return|return
name|ZKAssign
operator|.
name|transitionNode
argument_list|(
name|zkw
argument_list|,
name|parent
argument_list|,
name|serverName
argument_list|,
name|EventType
operator|.
name|RS_ZK_REGION_SPLITTING
argument_list|,
name|EventType
operator|.
name|RS_ZK_REGION_SPLITTING
argument_list|,
name|version
argument_list|)
return|;
block|}
specifier|private
name|void
name|unassign
parameter_list|(
specifier|final
name|AssignmentManager
name|am
parameter_list|,
specifier|final
name|ServerName
name|sn
parameter_list|,
specifier|final
name|HRegionInfo
name|hri
parameter_list|)
block|{
comment|// Before I can unassign a region, I need to set it online.
name|am
operator|.
name|regionOnline
argument_list|(
name|hri
argument_list|,
name|sn
argument_list|)
expr_stmt|;
comment|// Unassign region.
name|am
operator|.
name|unassign
argument_list|(
name|hri
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

