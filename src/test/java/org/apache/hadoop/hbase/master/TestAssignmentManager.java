begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerLoad
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ZooKeeperConnectionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|catalog
operator|.
name|CatalogTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HConnectionTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|EventHandler
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|ExecutorService
operator|.
name|ExecutorType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|RegionTransitionData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|HRegionInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|handler
operator|.
name|ServerShutdownHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionOpeningState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Writables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKAssign
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
operator|.
name|NodeExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_comment
comment|/**  * Test {@link AssignmentManager}  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestAssignmentManager
block|{
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|HTU
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ServerName
name|SERVERNAME_A
init|=
operator|new
name|ServerName
argument_list|(
literal|"example.org"
argument_list|,
literal|1234
argument_list|,
literal|5678
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ServerName
name|SERVERNAME_B
init|=
operator|new
name|ServerName
argument_list|(
literal|"example.org"
argument_list|,
literal|0
argument_list|,
literal|5678
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HRegionInfo
name|REGIONINFO
init|=
operator|new
name|HRegionInfo
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"t"
argument_list|)
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
decl_stmt|;
comment|// Mocked objects or; get redone for each test.
specifier|private
name|Server
name|server
decl_stmt|;
specifier|private
name|ServerManager
name|serverManager
decl_stmt|;
specifier|private
name|ZooKeeperWatcher
name|watcher
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|HTU
operator|.
name|startMiniZKCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|IOException
block|{
name|HTU
operator|.
name|shutdownMiniZKCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|ZooKeeperConnectionException
throws|,
name|IOException
block|{
comment|// TODO: Make generic versions of what we do below and put up in a mocking
comment|// utility class or move up into HBaseTestingUtility.
comment|// Mock a Server.  Have it return a legit Configuration and ZooKeeperWatcher.
comment|// If abort is called, be sure to fail the test (don't just swallow it
comment|// silently as is mockito default).
name|this
operator|.
name|server
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Server
operator|.
name|class
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|server
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|HTU
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|watcher
operator|=
operator|new
name|ZooKeeperWatcher
argument_list|(
name|HTU
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|"mockedServer"
argument_list|,
name|this
operator|.
name|server
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|server
operator|.
name|getZooKeeper
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|this
operator|.
name|watcher
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doThrow
argument_list|(
operator|new
name|RuntimeException
argument_list|(
literal|"Aborted"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|server
argument_list|)
operator|.
name|abort
argument_list|(
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|,
operator|(
name|Throwable
operator|)
name|Mockito
operator|.
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
comment|// Mock a ServerManager.  Say server SERVERNAME_{A,B} are online.  Also
comment|// make it so if close or open, we return 'success'.
name|this
operator|.
name|serverManager
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ServerManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|this
operator|.
name|serverManager
operator|.
name|isServerOnline
argument_list|(
name|SERVERNAME_A
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|this
operator|.
name|serverManager
operator|.
name|isServerOnline
argument_list|(
name|SERVERNAME_B
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|ServerName
argument_list|,
name|HServerLoad
argument_list|>
name|onlineServers
init|=
operator|new
name|HashMap
argument_list|<
name|ServerName
argument_list|,
name|HServerLoad
argument_list|>
argument_list|()
decl_stmt|;
name|onlineServers
operator|.
name|put
argument_list|(
name|SERVERNAME_B
argument_list|,
operator|new
name|HServerLoad
argument_list|()
argument_list|)
expr_stmt|;
name|onlineServers
operator|.
name|put
argument_list|(
name|SERVERNAME_A
argument_list|,
operator|new
name|HServerLoad
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|this
operator|.
name|serverManager
operator|.
name|getOnlineServersList
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ServerName
argument_list|>
argument_list|(
name|onlineServers
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|this
operator|.
name|serverManager
operator|.
name|getOnlineServers
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|onlineServers
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|this
operator|.
name|serverManager
operator|.
name|sendRegionClose
argument_list|(
name|SERVERNAME_A
argument_list|,
name|REGIONINFO
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|this
operator|.
name|serverManager
operator|.
name|sendRegionClose
argument_list|(
name|SERVERNAME_B
argument_list|,
name|REGIONINFO
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Ditto on open.
name|Mockito
operator|.
name|when
argument_list|(
name|this
operator|.
name|serverManager
operator|.
name|sendRegionOpen
argument_list|(
name|SERVERNAME_A
argument_list|,
name|REGIONINFO
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|RegionOpeningState
operator|.
name|OPENED
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|this
operator|.
name|serverManager
operator|.
name|sendRegionOpen
argument_list|(
name|SERVERNAME_B
argument_list|,
name|REGIONINFO
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|RegionOpeningState
operator|.
name|OPENED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|KeeperException
block|{
if|if
condition|(
name|this
operator|.
name|watcher
operator|!=
literal|null
condition|)
block|{
comment|// Clean up all znodes
name|ZKAssign
operator|.
name|deleteAllNodes
argument_list|(
name|this
operator|.
name|watcher
argument_list|)
expr_stmt|;
name|this
operator|.
name|watcher
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test a balance going on at same time as a master failover    *     * @throws IOException    * @throws KeeperException    * @throws InterruptedException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
specifier|public
name|void
name|testBalanceOnMasterFailoverScenarioWithOpenedNode
parameter_list|()
throws|throws
name|IOException
throws|,
name|KeeperException
throws|,
name|InterruptedException
block|{
name|AssignmentManagerWithExtrasForTesting
name|am
init|=
name|setUpMockedAssignmentManager
argument_list|(
name|this
operator|.
name|server
argument_list|,
name|this
operator|.
name|serverManager
argument_list|)
decl_stmt|;
try|try
block|{
name|createRegionPlanAndBalance
argument_list|(
name|am
argument_list|,
name|SERVERNAME_A
argument_list|,
name|SERVERNAME_B
argument_list|,
name|REGIONINFO
argument_list|)
expr_stmt|;
name|startFakeFailedOverMasterAssignmentManager
argument_list|(
name|am
argument_list|,
name|this
operator|.
name|watcher
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|am
operator|.
name|processRITInvoked
condition|)
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Now fake the region closing successfully over on the regionserver; the
comment|// regionserver will have set the region in CLOSED state. This will
comment|// trigger callback into AM. The below zk close call is from the RS close
comment|// region handler duplicated here because its down deep in a private
comment|// method hard to expose.
name|int
name|versionid
init|=
name|ZKAssign
operator|.
name|transitionNodeClosed
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|REGIONINFO
argument_list|,
name|SERVERNAME_A
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|versionid
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|ZKAssign
operator|.
name|verifyRegionState
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|REGIONINFO
argument_list|,
name|EventType
operator|.
name|M_ZK_REGION_OFFLINE
argument_list|)
condition|)
block|{
name|Threads
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Get current versionid else will fail on transition from OFFLINE to
comment|// OPENING below
name|versionid
operator|=
name|ZKAssign
operator|.
name|getVersion
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|REGIONINFO
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
operator|-
literal|1
argument_list|,
name|versionid
argument_list|)
expr_stmt|;
comment|// This uglyness below is what the openregionhandler on RS side does.
name|versionid
operator|=
name|ZKAssign
operator|.
name|transitionNode
argument_list|(
name|server
operator|.
name|getZooKeeper
argument_list|()
argument_list|,
name|REGIONINFO
argument_list|,
name|SERVERNAME_A
argument_list|,
name|EventType
operator|.
name|M_ZK_REGION_OFFLINE
argument_list|,
name|EventType
operator|.
name|RS_ZK_REGION_OPENING
argument_list|,
name|versionid
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
operator|-
literal|1
argument_list|,
name|versionid
argument_list|)
expr_stmt|;
comment|// Move znode from OPENING to OPENED as RS does on successful open.
name|versionid
operator|=
name|ZKAssign
operator|.
name|transitionNodeOpened
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|REGIONINFO
argument_list|,
name|SERVERNAME_B
argument_list|,
name|versionid
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
operator|-
literal|1
argument_list|,
name|versionid
argument_list|)
expr_stmt|;
name|am
operator|.
name|gate
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Block here until our znode is cleared or until this test times out.
name|ZKAssign
operator|.
name|blockUntilNoRIT
argument_list|(
name|watcher
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|am
operator|.
name|getExecutorService
argument_list|()
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|am
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
specifier|public
name|void
name|testBalanceOnMasterFailoverScenarioWithClosedNode
parameter_list|()
throws|throws
name|IOException
throws|,
name|KeeperException
throws|,
name|InterruptedException
block|{
name|AssignmentManagerWithExtrasForTesting
name|am
init|=
name|setUpMockedAssignmentManager
argument_list|(
name|this
operator|.
name|server
argument_list|,
name|this
operator|.
name|serverManager
argument_list|)
decl_stmt|;
try|try
block|{
name|createRegionPlanAndBalance
argument_list|(
name|am
argument_list|,
name|SERVERNAME_A
argument_list|,
name|SERVERNAME_B
argument_list|,
name|REGIONINFO
argument_list|)
expr_stmt|;
name|startFakeFailedOverMasterAssignmentManager
argument_list|(
name|am
argument_list|,
name|this
operator|.
name|watcher
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|am
operator|.
name|processRITInvoked
condition|)
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Now fake the region closing successfully over on the regionserver; the
comment|// regionserver will have set the region in CLOSED state. This will
comment|// trigger callback into AM. The below zk close call is from the RS close
comment|// region handler duplicated here because its down deep in a private
comment|// method hard to expose.
name|int
name|versionid
init|=
name|ZKAssign
operator|.
name|transitionNodeClosed
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|REGIONINFO
argument_list|,
name|SERVERNAME_A
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|versionid
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|am
operator|.
name|gate
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|ZKAssign
operator|.
name|verifyRegionState
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|REGIONINFO
argument_list|,
name|EventType
operator|.
name|M_ZK_REGION_OFFLINE
argument_list|)
condition|)
block|{
name|Threads
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Get current versionid else will fail on transition from OFFLINE to
comment|// OPENING below
name|versionid
operator|=
name|ZKAssign
operator|.
name|getVersion
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|REGIONINFO
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
operator|-
literal|1
argument_list|,
name|versionid
argument_list|)
expr_stmt|;
comment|// This uglyness below is what the openregionhandler on RS side does.
name|versionid
operator|=
name|ZKAssign
operator|.
name|transitionNode
argument_list|(
name|server
operator|.
name|getZooKeeper
argument_list|()
argument_list|,
name|REGIONINFO
argument_list|,
name|SERVERNAME_A
argument_list|,
name|EventType
operator|.
name|M_ZK_REGION_OFFLINE
argument_list|,
name|EventType
operator|.
name|RS_ZK_REGION_OPENING
argument_list|,
name|versionid
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
operator|-
literal|1
argument_list|,
name|versionid
argument_list|)
expr_stmt|;
comment|// Move znode from OPENING to OPENED as RS does on successful open.
name|versionid
operator|=
name|ZKAssign
operator|.
name|transitionNodeOpened
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|REGIONINFO
argument_list|,
name|SERVERNAME_B
argument_list|,
name|versionid
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
operator|-
literal|1
argument_list|,
name|versionid
argument_list|)
expr_stmt|;
comment|// Block here until our znode is cleared or until this test timesout.
name|ZKAssign
operator|.
name|blockUntilNoRIT
argument_list|(
name|watcher
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|am
operator|.
name|getExecutorService
argument_list|()
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|am
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
specifier|public
name|void
name|testBalanceOnMasterFailoverScenarioWithOfflineNode
parameter_list|()
throws|throws
name|IOException
throws|,
name|KeeperException
throws|,
name|InterruptedException
block|{
name|AssignmentManagerWithExtrasForTesting
name|am
init|=
name|setUpMockedAssignmentManager
argument_list|(
name|this
operator|.
name|server
argument_list|,
name|this
operator|.
name|serverManager
argument_list|)
decl_stmt|;
try|try
block|{
name|createRegionPlanAndBalance
argument_list|(
name|am
argument_list|,
name|SERVERNAME_A
argument_list|,
name|SERVERNAME_B
argument_list|,
name|REGIONINFO
argument_list|)
expr_stmt|;
name|startFakeFailedOverMasterAssignmentManager
argument_list|(
name|am
argument_list|,
name|this
operator|.
name|watcher
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|am
operator|.
name|processRITInvoked
condition|)
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Now fake the region closing successfully over on the regionserver; the
comment|// regionserver will have set the region in CLOSED state. This will
comment|// trigger callback into AM. The below zk close call is from the RS close
comment|// region handler duplicated here because its down deep in a private
comment|// method hard to expose.
name|int
name|versionid
init|=
name|ZKAssign
operator|.
name|transitionNodeClosed
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|REGIONINFO
argument_list|,
name|SERVERNAME_A
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|versionid
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|ZKAssign
operator|.
name|verifyRegionState
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|REGIONINFO
argument_list|,
name|EventType
operator|.
name|M_ZK_REGION_OFFLINE
argument_list|)
condition|)
block|{
name|Threads
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|am
operator|.
name|gate
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Get current versionid else will fail on transition from OFFLINE to
comment|// OPENING below
name|versionid
operator|=
name|ZKAssign
operator|.
name|getVersion
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|REGIONINFO
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
operator|-
literal|1
argument_list|,
name|versionid
argument_list|)
expr_stmt|;
comment|// This uglyness below is what the openregionhandler on RS side does.
name|versionid
operator|=
name|ZKAssign
operator|.
name|transitionNode
argument_list|(
name|server
operator|.
name|getZooKeeper
argument_list|()
argument_list|,
name|REGIONINFO
argument_list|,
name|SERVERNAME_A
argument_list|,
name|EventType
operator|.
name|M_ZK_REGION_OFFLINE
argument_list|,
name|EventType
operator|.
name|RS_ZK_REGION_OPENING
argument_list|,
name|versionid
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
operator|-
literal|1
argument_list|,
name|versionid
argument_list|)
expr_stmt|;
comment|// Move znode from OPENING to OPENED as RS does on successful open.
name|versionid
operator|=
name|ZKAssign
operator|.
name|transitionNodeOpened
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|REGIONINFO
argument_list|,
name|SERVERNAME_B
argument_list|,
name|versionid
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
operator|-
literal|1
argument_list|,
name|versionid
argument_list|)
expr_stmt|;
comment|// Block here until our znode is cleared or until this test timesout.
name|ZKAssign
operator|.
name|blockUntilNoRIT
argument_list|(
name|watcher
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|am
operator|.
name|getExecutorService
argument_list|()
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|am
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|createRegionPlanAndBalance
parameter_list|(
specifier|final
name|AssignmentManager
name|am
parameter_list|,
specifier|final
name|ServerName
name|from
parameter_list|,
specifier|final
name|ServerName
name|to
parameter_list|,
specifier|final
name|HRegionInfo
name|hri
parameter_list|)
block|{
comment|// Call the balance function but fake the region being online first at
comment|// servername from.
name|am
operator|.
name|regionOnline
argument_list|(
name|hri
argument_list|,
name|from
argument_list|)
expr_stmt|;
comment|// Balance region from 'from' to 'to'. It calls unassign setting CLOSING state
comment|// up in zk.  Create a plan and balance
name|am
operator|.
name|balance
argument_list|(
operator|new
name|RegionPlan
argument_list|(
name|hri
argument_list|,
name|from
argument_list|,
name|to
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests AssignmentManager balance function.  Runs a balance moving a region    * from one server to another mocking regionserver responding over zk.    * @throws IOException    * @throws KeeperException    */
annotation|@
name|Test
specifier|public
name|void
name|testBalance
parameter_list|()
throws|throws
name|IOException
throws|,
name|KeeperException
block|{
comment|// Create and startup an executor.  This is used by AssignmentManager
comment|// handling zk callbacks.
name|ExecutorService
name|executor
init|=
name|startupMasterExecutor
argument_list|(
literal|"testBalanceExecutor"
argument_list|)
decl_stmt|;
comment|// We need a mocked catalog tracker.
name|CatalogTracker
name|ct
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|CatalogTracker
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Create an AM.
name|AssignmentManager
name|am
init|=
operator|new
name|AssignmentManager
argument_list|(
name|this
operator|.
name|server
argument_list|,
name|this
operator|.
name|serverManager
argument_list|,
name|ct
argument_list|,
name|executor
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Make sure our new AM gets callbacks; once registered, can't unregister.
comment|// Thats ok because we make a new zk watcher for each test.
name|this
operator|.
name|watcher
operator|.
name|registerListenerFirst
argument_list|(
name|am
argument_list|)
expr_stmt|;
comment|// Call the balance function but fake the region being online first at
comment|// SERVERNAME_A.  Create a balance plan.
name|am
operator|.
name|regionOnline
argument_list|(
name|REGIONINFO
argument_list|,
name|SERVERNAME_A
argument_list|)
expr_stmt|;
comment|// Balance region from A to B.
name|RegionPlan
name|plan
init|=
operator|new
name|RegionPlan
argument_list|(
name|REGIONINFO
argument_list|,
name|SERVERNAME_A
argument_list|,
name|SERVERNAME_B
argument_list|)
decl_stmt|;
name|am
operator|.
name|balance
argument_list|(
name|plan
argument_list|)
expr_stmt|;
comment|// Now fake the region closing successfully over on the regionserver; the
comment|// regionserver will have set the region in CLOSED state.  This will
comment|// trigger callback into AM. The below zk close call is from the RS close
comment|// region handler duplicated here because its down deep in a private
comment|// method hard to expose.
name|int
name|versionid
init|=
name|ZKAssign
operator|.
name|transitionNodeClosed
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|REGIONINFO
argument_list|,
name|SERVERNAME_A
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|versionid
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// AM is going to notice above CLOSED and queue up a new assign.  The
comment|// assign will go to open the region in the new location set by the
comment|// balancer.  The zk node will be OFFLINE waiting for regionserver to
comment|// transition it through OPENING, OPENED.  Wait till we see the OFFLINE
comment|// zk node before we proceed.
while|while
condition|(
operator|!
name|ZKAssign
operator|.
name|verifyRegionState
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|REGIONINFO
argument_list|,
name|EventType
operator|.
name|M_ZK_REGION_OFFLINE
argument_list|)
condition|)
block|{
name|Threads
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Get current versionid else will fail on transition from OFFLINE to OPENING below
name|versionid
operator|=
name|ZKAssign
operator|.
name|getVersion
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|REGIONINFO
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
operator|-
literal|1
argument_list|,
name|versionid
argument_list|)
expr_stmt|;
comment|// This uglyness below is what the openregionhandler on RS side does.
name|versionid
operator|=
name|ZKAssign
operator|.
name|transitionNode
argument_list|(
name|server
operator|.
name|getZooKeeper
argument_list|()
argument_list|,
name|REGIONINFO
argument_list|,
name|SERVERNAME_A
argument_list|,
name|EventType
operator|.
name|M_ZK_REGION_OFFLINE
argument_list|,
name|EventType
operator|.
name|RS_ZK_REGION_OPENING
argument_list|,
name|versionid
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
operator|-
literal|1
argument_list|,
name|versionid
argument_list|)
expr_stmt|;
comment|// Move znode from OPENING to OPENED as RS does on successful open.
name|versionid
operator|=
name|ZKAssign
operator|.
name|transitionNodeOpened
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|REGIONINFO
argument_list|,
name|SERVERNAME_B
argument_list|,
name|versionid
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
operator|-
literal|1
argument_list|,
name|versionid
argument_list|)
expr_stmt|;
comment|// Wait on the handler removing the OPENED znode.
while|while
condition|(
name|am
operator|.
name|isRegionInTransition
argument_list|(
name|REGIONINFO
argument_list|)
operator|!=
literal|null
condition|)
name|Threads
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|am
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// Clean up all znodes
name|ZKAssign
operator|.
name|deleteAllNodes
argument_list|(
name|this
operator|.
name|watcher
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Run a simple server shutdown handler.    * @throws KeeperException    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testShutdownHandler
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|IOException
block|{
comment|// Create and startup an executor.  This is used by AssignmentManager
comment|// handling zk callbacks.
name|ExecutorService
name|executor
init|=
name|startupMasterExecutor
argument_list|(
literal|"testShutdownHandler"
argument_list|)
decl_stmt|;
comment|// We need a mocked catalog tracker.
name|CatalogTracker
name|ct
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|CatalogTracker
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Create an AM.
name|AssignmentManager
name|am
init|=
operator|new
name|AssignmentManager
argument_list|(
name|this
operator|.
name|server
argument_list|,
name|this
operator|.
name|serverManager
argument_list|,
name|ct
argument_list|,
name|executor
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Make sure our new AM gets callbacks; once registered, can't unregister.
comment|// Thats ok because we make a new zk watcher for each test.
name|this
operator|.
name|watcher
operator|.
name|registerListenerFirst
argument_list|(
name|am
argument_list|)
expr_stmt|;
comment|// Need to set up a fake scan of meta for the servershutdown handler
comment|// Make an RS Interface implementation.  Make it so a scanner can go against it.
name|HRegionInterface
name|implementation
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HRegionInterface
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Get a meta row result that has region up on SERVERNAME_A
name|Result
name|r
init|=
name|getMetaTableRowResult
argument_list|(
name|REGIONINFO
argument_list|,
name|SERVERNAME_A
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|implementation
operator|.
name|openScanner
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|,
operator|(
name|Scan
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
comment|// Return a good result first and then return null to indicate end of scan
name|Mockito
operator|.
name|when
argument_list|(
name|implementation
operator|.
name|next
argument_list|(
name|Mockito
operator|.
name|anyLong
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyInt
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Result
index|[]
block|{
name|r
block|}
argument_list|,
operator|(
name|Result
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
comment|// Get a connection w/ mocked up common methods.
name|HConnection
name|connection
init|=
name|HConnectionTestingUtility
operator|.
name|getMockedConnectionAndDecorate
argument_list|(
name|HTU
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|implementation
argument_list|,
name|SERVERNAME_B
argument_list|,
name|REGIONINFO
argument_list|)
decl_stmt|;
comment|// Make it so we can get a catalogtracker from servermanager.. .needed
comment|// down in guts of server shutdown handler.
name|Mockito
operator|.
name|when
argument_list|(
name|ct
operator|.
name|getConnection
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|this
operator|.
name|server
operator|.
name|getCatalogTracker
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ct
argument_list|)
expr_stmt|;
comment|// Now make a server shutdown handler instance and invoke process.
comment|// Have it that SERVERNAME_A died.
name|DeadServer
name|deadServers
init|=
operator|new
name|DeadServer
argument_list|()
decl_stmt|;
name|deadServers
operator|.
name|add
argument_list|(
name|SERVERNAME_A
argument_list|)
expr_stmt|;
comment|// I need a services instance that will return the AM
name|MasterServices
name|services
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|MasterServices
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|services
operator|.
name|getAssignmentManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|am
argument_list|)
expr_stmt|;
name|ServerShutdownHandler
name|handler
init|=
operator|new
name|ServerShutdownHandler
argument_list|(
name|this
operator|.
name|server
argument_list|,
name|services
argument_list|,
name|deadServers
argument_list|,
name|SERVERNAME_A
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|handler
operator|.
name|process
argument_list|()
expr_stmt|;
comment|// The region in r will have been assigned.  It'll be up in zk as unassigned.
block|}
finally|finally
block|{
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|am
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// Clean up all znodes
name|ZKAssign
operator|.
name|deleteAllNodes
argument_list|(
name|this
operator|.
name|watcher
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @param sn ServerName to use making startcode and server in meta    * @param hri Region to serialize into HRegionInfo    * @return A mocked up Result that fakes a Get on a row in the    *<code>.META.</code> table.    * @throws IOException     */
specifier|private
name|Result
name|getMetaTableRowResult
parameter_list|(
specifier|final
name|HRegionInfo
name|hri
parameter_list|,
specifier|final
name|ServerName
name|sn
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO: Move to a utilities class.  More than one test case can make use
comment|// of this facility.
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|REGIONINFO_QUALIFIER
argument_list|,
name|Writables
operator|.
name|getBytes
argument_list|(
name|hri
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|SERVER_QUALIFIER
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|sn
operator|.
name|getHostAndPort
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|STARTCODE_QUALIFIER
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|sn
operator|.
name|getStartcode
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|Result
argument_list|(
name|kvs
argument_list|)
return|;
block|}
comment|/**    * Create and startup executor pools. Start same set as master does (just    * run a few less).    * @param name Name to give our executor    * @return Created executor (be sure to call shutdown when done).    */
specifier|private
name|ExecutorService
name|startupMasterExecutor
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
comment|// TODO: Move up into HBaseTestingUtility?  Generally useful.
name|ExecutorService
name|executor
init|=
operator|new
name|ExecutorService
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|executor
operator|.
name|startExecutorService
argument_list|(
name|ExecutorType
operator|.
name|MASTER_OPEN_REGION
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|executor
operator|.
name|startExecutorService
argument_list|(
name|ExecutorType
operator|.
name|MASTER_CLOSE_REGION
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|executor
operator|.
name|startExecutorService
argument_list|(
name|ExecutorType
operator|.
name|MASTER_SERVER_OPERATIONS
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|executor
operator|.
name|startExecutorService
argument_list|(
name|ExecutorType
operator|.
name|MASTER_META_SERVER_OPERATIONS
argument_list|,
literal|3
argument_list|)
expr_stmt|;
return|return
name|executor
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnassignWithSplitAtSameTime
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|IOException
block|{
comment|// Region to use in test.
specifier|final
name|HRegionInfo
name|hri
init|=
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
decl_stmt|;
comment|// First amend the servermanager mock so that when we do send close of the
comment|// first meta region on SERVERNAME_A, it will return true rather than
comment|// default null.
name|Mockito
operator|.
name|when
argument_list|(
name|this
operator|.
name|serverManager
operator|.
name|sendRegionClose
argument_list|(
name|SERVERNAME_A
argument_list|,
name|hri
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Need a mocked catalog tracker.
name|CatalogTracker
name|ct
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|CatalogTracker
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Create an AM.
name|AssignmentManager
name|am
init|=
operator|new
name|AssignmentManager
argument_list|(
name|this
operator|.
name|server
argument_list|,
name|this
operator|.
name|serverManager
argument_list|,
name|ct
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
comment|// First make sure my mock up basically works.  Unassign a region.
name|unassign
argument_list|(
name|am
argument_list|,
name|SERVERNAME_A
argument_list|,
name|hri
argument_list|)
expr_stmt|;
comment|// This delete will fail if the previous unassign did wrong thing.
name|ZKAssign
operator|.
name|deleteClosingNode
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|hri
argument_list|)
expr_stmt|;
comment|// Now put a SPLITTING region in the way.  I don't have to assert it
comment|// go put in place.  This method puts it in place then asserts it still
comment|// owns it by moving state from SPLITTING to SPLITTING.
name|int
name|version
init|=
name|createNodeSplitting
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|hri
argument_list|,
name|SERVERNAME_A
argument_list|)
decl_stmt|;
comment|// Now, retry the unassign with the SPLTTING in place.  It should just
comment|// complete without fail; a sort of 'silent' recognition that the
comment|// region to unassign has been split and no longer exists: TOOD: what if
comment|// the split fails and the parent region comes back to life?
name|unassign
argument_list|(
name|am
argument_list|,
name|SERVERNAME_A
argument_list|,
name|hri
argument_list|)
expr_stmt|;
comment|// This transition should fail if the znode has been messed with.
name|ZKAssign
operator|.
name|transitionNode
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|hri
argument_list|,
name|SERVERNAME_A
argument_list|,
name|EventType
operator|.
name|RS_ZK_REGION_SPLITTING
argument_list|,
name|EventType
operator|.
name|RS_ZK_REGION_SPLITTING
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|am
operator|.
name|isRegionInTransition
argument_list|(
name|hri
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|am
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Creates a new ephemeral node in the SPLITTING state for the specified region.    * Create it ephemeral in case regionserver dies mid-split.    *    *<p>Does not transition nodes from other states.  If a node already exists    * for this region, a {@link NodeExistsException} will be thrown.    *    * @param zkw zk reference    * @param region region to be created as offline    * @param serverName server event originates from    * @return Version of znode created.    * @throws KeeperException     * @throws IOException     */
comment|// Copied from SplitTransaction rather than open the method over there in
comment|// the regionserver package.
specifier|private
specifier|static
name|int
name|createNodeSplitting
parameter_list|(
specifier|final
name|ZooKeeperWatcher
name|zkw
parameter_list|,
specifier|final
name|HRegionInfo
name|region
parameter_list|,
specifier|final
name|ServerName
name|serverName
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|IOException
block|{
name|RegionTransitionData
name|data
init|=
operator|new
name|RegionTransitionData
argument_list|(
name|EventType
operator|.
name|RS_ZK_REGION_SPLITTING
argument_list|,
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|serverName
argument_list|)
decl_stmt|;
name|String
name|node
init|=
name|ZKAssign
operator|.
name|getNodeName
argument_list|(
name|zkw
argument_list|,
name|region
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ZKUtil
operator|.
name|createEphemeralNodeAndWatch
argument_list|(
name|zkw
argument_list|,
name|node
argument_list|,
name|data
operator|.
name|getBytes
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed create of ephemeral "
operator|+
name|node
argument_list|)
throw|;
block|}
comment|// Transition node from SPLITTING to SPLITTING and pick up version so we
comment|// can be sure this znode is ours; version is needed deleting.
return|return
name|transitionNodeSplitting
argument_list|(
name|zkw
argument_list|,
name|region
argument_list|,
name|serverName
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
comment|// Copied from SplitTransaction rather than open the method over there in
comment|// the regionserver package.
specifier|private
specifier|static
name|int
name|transitionNodeSplitting
parameter_list|(
specifier|final
name|ZooKeeperWatcher
name|zkw
parameter_list|,
specifier|final
name|HRegionInfo
name|parent
parameter_list|,
specifier|final
name|ServerName
name|serverName
parameter_list|,
specifier|final
name|int
name|version
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|IOException
block|{
return|return
name|ZKAssign
operator|.
name|transitionNode
argument_list|(
name|zkw
argument_list|,
name|parent
argument_list|,
name|serverName
argument_list|,
name|EventType
operator|.
name|RS_ZK_REGION_SPLITTING
argument_list|,
name|EventType
operator|.
name|RS_ZK_REGION_SPLITTING
argument_list|,
name|version
argument_list|)
return|;
block|}
specifier|private
name|void
name|unassign
parameter_list|(
specifier|final
name|AssignmentManager
name|am
parameter_list|,
specifier|final
name|ServerName
name|sn
parameter_list|,
specifier|final
name|HRegionInfo
name|hri
parameter_list|)
block|{
comment|// Before I can unassign a region, I need to set it online.
name|am
operator|.
name|regionOnline
argument_list|(
name|hri
argument_list|,
name|sn
argument_list|)
expr_stmt|;
comment|// Unassign region.
name|am
operator|.
name|unassign
argument_list|(
name|hri
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create an {@link AssignmentManagerWithExtrasForTesting} that has mocked    * {@link CatalogTracker} etc.    * @param server    * @param manager    * @return An AssignmentManagerWithExtras with mock connections, etc.    * @throws IOException    * @throws KeeperException    */
specifier|private
name|AssignmentManagerWithExtrasForTesting
name|setUpMockedAssignmentManager
parameter_list|(
specifier|final
name|Server
name|server
parameter_list|,
specifier|final
name|ServerManager
name|manager
parameter_list|)
throws|throws
name|IOException
throws|,
name|KeeperException
block|{
comment|// We need a mocked catalog tracker. Its used by our AM instance.
name|CatalogTracker
name|ct
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|CatalogTracker
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Make an RS Interface implementation. Make it so a scanner can go against
comment|// it and a get to return the single region, REGIONINFO, this test is
comment|// messing with. Needed when "new master" joins cluster. AM will try and
comment|// rebuild its list of user regions and it will also get the HRI that goes
comment|// with an encoded name by doing a Get on .META.
name|HRegionInterface
name|ri
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HRegionInterface
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Get a meta row result that has region up on SERVERNAME_A for REGIONINFO
name|Result
name|r
init|=
name|getMetaTableRowResult
argument_list|(
name|REGIONINFO
argument_list|,
name|SERVERNAME_A
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|ri
operator|.
name|openScanner
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|,
operator|(
name|Scan
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
comment|// Return good result 'r' first and then return null to indicate end of scan
name|Mockito
operator|.
name|when
argument_list|(
name|ri
operator|.
name|next
argument_list|(
name|Mockito
operator|.
name|anyLong
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyInt
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Result
index|[]
block|{
name|r
block|}
argument_list|,
operator|(
name|Result
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
comment|// If a get, return the above result too for REGIONINFO
name|Mockito
operator|.
name|when
argument_list|(
name|ri
operator|.
name|get
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|,
operator|(
name|Get
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|r
argument_list|)
expr_stmt|;
comment|// Get a connection w/ mocked up common methods.
name|HConnection
name|connection
init|=
name|HConnectionTestingUtility
operator|.
name|getMockedConnectionAndDecorate
argument_list|(
name|HTU
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|ri
argument_list|,
name|SERVERNAME_B
argument_list|,
name|REGIONINFO
argument_list|)
decl_stmt|;
comment|// Make it so we can get the connection from our mocked catalogtracker
name|Mockito
operator|.
name|when
argument_list|(
name|ct
operator|.
name|getConnection
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|connection
argument_list|)
expr_stmt|;
comment|// Create and startup an executor. Used by AM handling zk callbacks.
name|ExecutorService
name|executor
init|=
name|startupMasterExecutor
argument_list|(
literal|"mockedAMExecutor"
argument_list|)
decl_stmt|;
name|AssignmentManagerWithExtrasForTesting
name|am
init|=
operator|new
name|AssignmentManagerWithExtrasForTesting
argument_list|(
name|server
argument_list|,
name|manager
argument_list|,
name|ct
argument_list|,
name|executor
argument_list|)
decl_stmt|;
return|return
name|am
return|;
block|}
comment|/**    * An {@link AssignmentManager} with some extra facility used testing    */
class|class
name|AssignmentManagerWithExtrasForTesting
extends|extends
name|AssignmentManager
block|{
comment|// Keep a reference so can give it out below in {@link #getExecutorService}
specifier|private
specifier|final
name|ExecutorService
name|es
decl_stmt|;
comment|// Ditto for ct
specifier|private
specifier|final
name|CatalogTracker
name|ct
decl_stmt|;
name|boolean
name|processRITInvoked
init|=
literal|false
decl_stmt|;
name|AtomicBoolean
name|gate
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|public
name|AssignmentManagerWithExtrasForTesting
parameter_list|(
specifier|final
name|Server
name|master
parameter_list|,
specifier|final
name|ServerManager
name|serverManager
parameter_list|,
specifier|final
name|CatalogTracker
name|catalogTracker
parameter_list|,
specifier|final
name|ExecutorService
name|service
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|IOException
block|{
name|super
argument_list|(
name|master
argument_list|,
name|serverManager
argument_list|,
name|catalogTracker
argument_list|,
name|service
argument_list|)
expr_stmt|;
name|this
operator|.
name|es
operator|=
name|service
expr_stmt|;
name|this
operator|.
name|ct
operator|=
name|catalogTracker
expr_stmt|;
block|}
annotation|@
name|Override
name|boolean
name|processRegionInTransition
parameter_list|(
name|String
name|encodedRegionName
parameter_list|,
name|HRegionInfo
name|regionInfo
parameter_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|Result
argument_list|>
argument_list|>
argument_list|>
name|deadServers
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|IOException
block|{
name|this
operator|.
name|processRITInvoked
operator|=
literal|true
expr_stmt|;
return|return
name|super
operator|.
name|processRegionInTransition
argument_list|(
name|encodedRegionName
argument_list|,
name|regionInfo
argument_list|,
name|deadServers
argument_list|)
return|;
block|}
annotation|@
name|Override
name|void
name|processRegionsInTransition
parameter_list|(
specifier|final
name|RegionTransitionData
name|data
parameter_list|,
specifier|final
name|HRegionInfo
name|regionInfo
parameter_list|,
specifier|final
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|Result
argument_list|>
argument_list|>
argument_list|>
name|deadServers
parameter_list|,
specifier|final
name|int
name|expectedVersion
parameter_list|)
throws|throws
name|KeeperException
block|{
while|while
condition|(
name|this
operator|.
name|gate
operator|.
name|get
argument_list|()
condition|)
name|Threads
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|super
operator|.
name|processRegionsInTransition
argument_list|(
name|data
argument_list|,
name|regionInfo
argument_list|,
name|deadServers
argument_list|,
name|expectedVersion
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return ExecutorService used by this instance.      */
name|ExecutorService
name|getExecutorService
parameter_list|()
block|{
return|return
name|this
operator|.
name|es
return|;
block|}
comment|/**      * @return CatalogTracker used by this AM (Its a mock).      */
name|CatalogTracker
name|getCatalogTracker
parameter_list|()
block|{
return|return
name|this
operator|.
name|ct
return|;
block|}
block|}
comment|/**    * Call joinCluster on the passed AssignmentManager.  Do it in a thread    * so it runs independent of what all else is going on.  Try to simulate    * an AM running insided a failed over master by clearing all in-memory    * AM state first.   */
specifier|private
name|void
name|startFakeFailedOverMasterAssignmentManager
parameter_list|(
specifier|final
name|AssignmentManager
name|am
parameter_list|,
specifier|final
name|ZooKeeperWatcher
name|watcher
parameter_list|)
block|{
comment|// Make sure our new AM gets callbacks; once registered, we can't unregister.
comment|// Thats ok because we make a new zk watcher for each test.
name|watcher
operator|.
name|registerListenerFirst
argument_list|(
name|am
argument_list|)
expr_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
literal|"RunAmJoinCluster"
argument_list|)
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// Call the joinCluster function as though we were doing a master
comment|// failover at this point. It will stall just before we go to add
comment|// the RIT region to our RIT Map in AM at processRegionsInTransition.
comment|// First clear any inmemory state from AM so it acts like a new master
comment|// coming on line.
name|am
operator|.
name|regionsInTransition
operator|.
name|clear
argument_list|()
expr_stmt|;
name|am
operator|.
name|regionPlans
operator|.
name|clear
argument_list|()
expr_stmt|;
try|try
block|{
name|am
operator|.
name|joinCluster
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
empty_stmt|;
block|}
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|t
operator|.
name|isAlive
argument_list|()
condition|)
name|Threads
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Rule
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ResourceCheckerJUnitRule
name|cu
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ResourceCheckerJUnitRule
argument_list|()
decl_stmt|;
block|}
end_class

end_unit

