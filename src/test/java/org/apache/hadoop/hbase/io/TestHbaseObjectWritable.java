begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ClusterStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerLoad
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Append
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Increment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|MultiAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|MultiResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Row
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RowMutations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|coprocessor
operator|.
name|Exec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|BinaryComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|BitComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|ColumnCountGetFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|ColumnPrefixFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|ColumnRangeFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|CompareFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|CompareFilter
operator|.
name|CompareOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|DependentColumnFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FilterBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FilterList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FirstKeyOnlyFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|InclusiveStopFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|KeyOnlyFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|PageFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|PrefixFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|QualifierFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|RandomRowFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|RowFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|SingleColumnValueExcludeFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|SingleColumnValueFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|SkipFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|ValueFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|WhileMatchFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|WritableByteArrayComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionOpeningState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLogKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|MapWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestHbaseObjectWritable
extends|extends
name|TestCase
block|{
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"boxing"
argument_list|)
specifier|public
name|void
name|testReadOldObjectDataInput
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
comment|/*      * This is the code used to generate byte[] where      *  HbaseObjectWritable used byte for code      *     ByteArrayOutputStream byteStream = new ByteArrayOutputStream();     DataOutputStream out = new DataOutputStream(byteStream);     HbaseObjectWritable.writeObject(out, bytes, byte[].class, conf);     byte[] ba = byteStream.toByteArray();     out.close();     */
comment|/*      * byte array generated by the folowing call      *  HbaseObjectWritable.writeObject(out, new Text("Old"), Text.class, conf);      */
name|byte
index|[]
name|baForText
init|=
block|{
literal|13
block|,
literal|13
block|,
literal|3
block|,
literal|79
block|,
literal|108
block|,
literal|100
block|}
decl_stmt|;
name|Text
name|txt
init|=
operator|(
name|Text
operator|)
name|readByteArray
argument_list|(
name|conf
argument_list|,
name|baForText
argument_list|)
decl_stmt|;
name|Text
name|oldTxt
init|=
operator|new
name|Text
argument_list|(
literal|"Old"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|txt
argument_list|,
name|oldTxt
argument_list|)
expr_stmt|;
specifier|final
name|byte
name|A
init|=
literal|'A'
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
literal|1
index|]
decl_stmt|;
name|bytes
index|[
literal|0
index|]
operator|=
name|A
expr_stmt|;
comment|/*      * byte array generated by the folowing call      *  HbaseObjectWritable.writeObject(out, bytes, byte[].class, conf);      */
name|byte
index|[]
name|baForByteArray
init|=
block|{
literal|11
block|,
literal|1
block|,
literal|65
block|}
decl_stmt|;
name|byte
index|[]
name|baOut
init|=
operator|(
name|byte
index|[]
operator|)
name|readByteArray
argument_list|(
name|conf
argument_list|,
name|baForByteArray
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|baOut
argument_list|,
name|bytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*    * helper method which reads byte array using HbaseObjectWritable.readObject()    */
specifier|private
name|Object
name|readByteArray
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|byte
index|[]
name|ba
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayInputStream
name|bais
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|ba
argument_list|)
decl_stmt|;
name|DataInputStream
name|dis
init|=
operator|new
name|DataInputStream
argument_list|(
name|bais
argument_list|)
decl_stmt|;
name|Object
name|product
init|=
name|HbaseObjectWritable
operator|.
name|readObject
argument_list|(
name|dis
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|dis
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|product
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"boxing"
argument_list|)
specifier|public
name|void
name|testReadObjectDataInputConfiguration
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
comment|// Do primitive type
specifier|final
name|int
name|COUNT
init|=
literal|101
decl_stmt|;
name|assertTrue
argument_list|(
name|doType
argument_list|(
name|conf
argument_list|,
name|COUNT
argument_list|,
name|int
operator|.
name|class
argument_list|)
operator|.
name|equals
argument_list|(
name|COUNT
argument_list|)
argument_list|)
expr_stmt|;
comment|// Do array
specifier|final
name|byte
index|[]
name|testing
init|=
literal|"testing"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|result
init|=
operator|(
name|byte
index|[]
operator|)
name|doType
argument_list|(
name|conf
argument_list|,
name|testing
argument_list|,
name|testing
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|WritableComparator
operator|.
name|compareBytes
argument_list|(
name|testing
argument_list|,
literal|0
argument_list|,
name|testing
operator|.
name|length
argument_list|,
name|result
argument_list|,
literal|0
argument_list|,
name|result
operator|.
name|length
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// Do unsupported type.
name|boolean
name|exception
init|=
literal|false
decl_stmt|;
try|try
block|{
name|doType
argument_list|(
name|conf
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|,
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|uoe
parameter_list|)
block|{
name|exception
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exception
argument_list|)
expr_stmt|;
comment|// Try odd types
specifier|final
name|byte
name|A
init|=
literal|'A'
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
literal|1
index|]
decl_stmt|;
name|bytes
index|[
literal|0
index|]
operator|=
name|A
expr_stmt|;
name|Object
name|obj
init|=
name|doType
argument_list|(
name|conf
argument_list|,
name|bytes
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|byte
index|[]
operator|)
name|obj
operator|)
index|[
literal|0
index|]
operator|==
name|A
argument_list|)
expr_stmt|;
comment|// Do 'known' Writable type.
name|obj
operator|=
name|doType
argument_list|(
name|conf
argument_list|,
operator|new
name|Text
argument_list|(
literal|""
argument_list|)
argument_list|,
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|obj
operator|instanceof
name|Text
argument_list|)
expr_stmt|;
comment|//List.class
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"world"
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"universe"
argument_list|)
expr_stmt|;
name|obj
operator|=
name|doType
argument_list|(
name|conf
argument_list|,
name|list
argument_list|,
name|List
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|obj
operator|instanceof
name|List
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|list
operator|.
name|toArray
argument_list|()
argument_list|,
operator|(
operator|(
name|List
operator|)
name|obj
operator|)
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
comment|//ArrayList.class
name|ArrayList
argument_list|<
name|String
argument_list|>
name|arr
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|arr
operator|.
name|add
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
name|arr
operator|.
name|add
argument_list|(
literal|"world"
argument_list|)
expr_stmt|;
name|arr
operator|.
name|add
argument_list|(
literal|"universe"
argument_list|)
expr_stmt|;
name|obj
operator|=
name|doType
argument_list|(
name|conf
argument_list|,
name|arr
argument_list|,
name|ArrayList
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|obj
operator|instanceof
name|ArrayList
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|list
operator|.
name|toArray
argument_list|()
argument_list|,
operator|(
operator|(
name|ArrayList
operator|)
name|obj
operator|)
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check that filters can be serialized
name|obj
operator|=
name|doType
argument_list|(
name|conf
argument_list|,
operator|new
name|PrefixFilter
argument_list|(
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
argument_list|,
name|PrefixFilter
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|obj
operator|instanceof
name|PrefixFilter
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCustomWritable
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
comment|// test proper serialization of un-encoded custom writables
name|CustomWritable
name|custom
init|=
operator|new
name|CustomWritable
argument_list|(
literal|"test phrase"
argument_list|)
decl_stmt|;
name|Object
name|obj
init|=
name|doType
argument_list|(
name|conf
argument_list|,
name|custom
argument_list|,
name|CustomWritable
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|obj
operator|instanceof
name|Writable
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|obj
operator|instanceof
name|CustomWritable
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test phrase"
argument_list|,
operator|(
operator|(
name|CustomWritable
operator|)
name|obj
operator|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// test proper serialization of a custom filter
name|CustomFilter
name|filt
init|=
operator|new
name|CustomFilter
argument_list|(
literal|"mykey"
argument_list|)
decl_stmt|;
name|FilterList
name|filtlist
init|=
operator|new
name|FilterList
argument_list|(
name|FilterList
operator|.
name|Operator
operator|.
name|MUST_PASS_ALL
argument_list|)
decl_stmt|;
name|filtlist
operator|.
name|addFilter
argument_list|(
name|filt
argument_list|)
expr_stmt|;
name|obj
operator|=
name|doType
argument_list|(
name|conf
argument_list|,
name|filtlist
argument_list|,
name|FilterList
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|obj
operator|instanceof
name|FilterList
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
operator|(
operator|(
name|FilterList
operator|)
name|obj
operator|)
operator|.
name|getFilters
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|FilterList
operator|)
name|obj
operator|)
operator|.
name|getFilters
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Filter
name|child
init|=
operator|(
operator|(
name|FilterList
operator|)
name|obj
operator|)
operator|.
name|getFilters
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|child
operator|instanceof
name|CustomFilter
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mykey"
argument_list|,
operator|(
operator|(
name|CustomFilter
operator|)
name|child
operator|)
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCustomSerializable
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
comment|// test proper serialization of un-encoded serialized java objects
name|CustomSerializable
name|custom
init|=
operator|new
name|CustomSerializable
argument_list|(
literal|"test phrase"
argument_list|)
decl_stmt|;
name|Object
name|obj
init|=
name|doType
argument_list|(
name|conf
argument_list|,
name|custom
argument_list|,
name|CustomSerializable
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|obj
operator|instanceof
name|Serializable
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|obj
operator|instanceof
name|CustomSerializable
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test phrase"
argument_list|,
operator|(
operator|(
name|CustomSerializable
operator|)
name|obj
operator|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Object
name|doType
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|Object
name|value
parameter_list|,
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|byteStream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
name|byteStream
argument_list|)
decl_stmt|;
name|HbaseObjectWritable
operator|.
name|writeObject
argument_list|(
name|out
argument_list|,
name|value
argument_list|,
name|clazz
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|ByteArrayInputStream
name|bais
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|byteStream
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|DataInputStream
name|dis
init|=
operator|new
name|DataInputStream
argument_list|(
name|bais
argument_list|)
decl_stmt|;
name|Object
name|product
init|=
name|HbaseObjectWritable
operator|.
name|readObject
argument_list|(
name|dis
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|dis
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|product
return|;
block|}
specifier|public
specifier|static
class|class
name|A
extends|extends
name|IntWritable
block|{
specifier|public
name|A
parameter_list|()
block|{}
specifier|public
name|A
parameter_list|(
name|int
name|a
parameter_list|)
block|{
name|super
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|B
extends|extends
name|A
block|{
name|int
name|b
decl_stmt|;
specifier|public
name|B
parameter_list|()
block|{ }
specifier|public
name|B
parameter_list|(
name|int
name|a
parameter_list|,
name|int
name|b
parameter_list|)
block|{
name|super
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|this
operator|.
name|b
operator|=
name|b
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|b
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|B
condition|)
block|{
return|return
name|this
operator|.
name|get
argument_list|()
operator|==
operator|(
operator|(
name|B
operator|)
name|o
operator|)
operator|.
name|get
argument_list|()
operator|&&
name|this
operator|.
name|b
operator|==
operator|(
operator|(
name|B
operator|)
name|o
operator|)
operator|.
name|b
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
comment|/** Tests for serialization of List and Arrays */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
specifier|public
name|void
name|testPolymorphismInSequences
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|Object
name|ret
decl_stmt|;
comment|//test with lists
name|List
argument_list|<
name|A
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|new
name|A
argument_list|(
literal|42
argument_list|)
argument_list|,
operator|new
name|B
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
argument_list|)
decl_stmt|;
name|ret
operator|=
name|doType
argument_list|(
name|conf
argument_list|,
name|list
argument_list|,
name|list
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ret
argument_list|,
name|list
argument_list|)
expr_stmt|;
comment|//test with Writable[]
name|Writable
index|[]
name|warr
init|=
operator|new
name|Writable
index|[]
block|{
operator|new
name|A
argument_list|(
literal|42
argument_list|)
block|,
operator|new
name|B
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
block|}
decl_stmt|;
name|ret
operator|=
name|doType
argument_list|(
name|conf
argument_list|,
name|warr
argument_list|,
name|warr
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|(
name|Writable
index|[]
operator|)
name|ret
argument_list|,
name|warr
argument_list|)
expr_stmt|;
comment|//test with arrays
name|A
index|[]
name|arr
init|=
operator|new
name|A
index|[]
block|{
operator|new
name|A
argument_list|(
literal|42
argument_list|)
block|,
operator|new
name|B
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
block|}
decl_stmt|;
name|ret
operator|=
name|doType
argument_list|(
name|conf
argument_list|,
name|arr
argument_list|,
name|arr
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|(
name|A
index|[]
operator|)
name|ret
argument_list|,
name|arr
argument_list|)
expr_stmt|;
comment|//test with double array
name|A
index|[]
index|[]
name|darr
init|=
operator|new
name|A
index|[]
index|[]
block|{
operator|new
name|A
index|[]
block|{
operator|new
name|A
argument_list|(
literal|42
argument_list|)
block|,
operator|new
name|B
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
block|}
block|,
operator|new
name|A
index|[]
block|{
operator|new
name|A
argument_list|(
literal|12
argument_list|)
block|}
block|}
decl_stmt|;
name|ret
operator|=
name|doType
argument_list|(
name|conf
argument_list|,
name|darr
argument_list|,
name|darr
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|(
name|A
index|[]
index|[]
operator|)
name|ret
argument_list|,
name|darr
argument_list|)
expr_stmt|;
comment|//test with List of arrays
name|List
argument_list|<
name|A
index|[]
argument_list|>
name|larr
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|arr
argument_list|,
operator|new
name|A
index|[]
block|{
operator|new
name|A
argument_list|(
literal|99
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|ret
operator|=
name|doType
argument_list|(
name|conf
argument_list|,
name|larr
argument_list|,
name|larr
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|A
index|[]
argument_list|>
name|lret
init|=
operator|(
name|List
argument_list|<
name|A
index|[]
argument_list|>
operator|)
name|ret
decl_stmt|;
name|assertEquals
argument_list|(
name|larr
operator|.
name|size
argument_list|()
argument_list|,
name|lret
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lret
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|larr
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|lret
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//test with array of lists
name|List
index|[]
name|alarr
init|=
operator|new
name|List
index|[]
block|{
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|new
name|A
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|A
argument_list|(
literal|2
argument_list|)
argument_list|)
block|,
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|new
name|B
argument_list|(
literal|4
argument_list|,
literal|5
argument_list|)
argument_list|)
block|}
decl_stmt|;
name|ret
operator|=
name|doType
argument_list|(
name|conf
argument_list|,
name|alarr
argument_list|,
name|alarr
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|List
index|[]
name|alret
init|=
operator|(
name|List
index|[]
operator|)
name|ret
decl_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|alarr
argument_list|,
name|alret
argument_list|)
expr_stmt|;
comment|//test with array of Text, note that Text[] is not pre-defined
name|Text
index|[]
name|tarr
init|=
operator|new
name|Text
index|[]
block|{
operator|new
name|Text
argument_list|(
literal|"foo"
argument_list|)
block|,
operator|new
name|Text
argument_list|(
literal|"bar"
argument_list|)
block|}
decl_stmt|;
name|ret
operator|=
name|doType
argument_list|(
name|conf
argument_list|,
name|tarr
argument_list|,
name|tarr
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|tarr
argument_list|,
operator|(
name|Text
index|[]
operator|)
name|ret
argument_list|)
expr_stmt|;
comment|//test with byte[][]
name|byte
index|[]
index|[]
name|barr
init|=
operator|new
name|byte
index|[]
index|[]
block|{
literal|"foo"
operator|.
name|getBytes
argument_list|()
block|,
literal|"baz"
operator|.
name|getBytes
argument_list|()
block|}
decl_stmt|;
name|ret
operator|=
name|doType
argument_list|(
name|conf
argument_list|,
name|barr
argument_list|,
name|barr
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|barr
argument_list|,
operator|(
name|byte
index|[]
index|[]
operator|)
name|ret
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|CustomSerializable
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1048445561865740632L
decl_stmt|;
specifier|private
name|String
name|value
init|=
literal|null
decl_stmt|;
specifier|public
name|CustomSerializable
parameter_list|()
block|{     }
specifier|public
name|CustomSerializable
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|String
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
specifier|public
name|void
name|setValue
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|CustomWritable
implements|implements
name|Writable
block|{
specifier|private
name|String
name|value
init|=
literal|null
decl_stmt|;
specifier|public
name|CustomWritable
parameter_list|()
block|{     }
specifier|public
name|CustomWritable
parameter_list|(
name|String
name|val
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|val
expr_stmt|;
block|}
specifier|public
name|String
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|this
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|value
operator|=
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|CustomFilter
extends|extends
name|FilterBase
block|{
specifier|private
name|String
name|key
init|=
literal|null
decl_stmt|;
specifier|public
name|CustomFilter
parameter_list|()
block|{     }
specifier|public
name|CustomFilter
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
block|}
specifier|public
name|String
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|this
operator|.
name|key
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|key
operator|=
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test case to ensure ordering of CODE_TO_CLASS and CLASS_TO_CODE. In the    * past, and item was added in the middle of the static initializer, and that    * threw off all of the codes after the addition. This unintentionally broke    * the wire protocol for clients. The idea behind this test case is that if    * you unintentionally change the order, you will get a test failure. If you    * are actually intentionally change the order, just update the test case.    * This should be a clue to the reviewer that you are doing something to    * change the wire protocol.    */
specifier|public
name|void
name|testGetClassCode
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Primitive types
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|Boolean
operator|.
name|TYPE
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|Byte
operator|.
name|TYPE
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|Character
operator|.
name|TYPE
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|Short
operator|.
name|TYPE
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|Integer
operator|.
name|TYPE
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|Long
operator|.
name|TYPE
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|Float
operator|.
name|TYPE
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|Double
operator|.
name|TYPE
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|Void
operator|.
name|TYPE
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// Other java types
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|byte
index|[]
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// Hadoop types
name|assertEquals
argument_list|(
literal|13
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|Text
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|14
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|Writable
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|Writable
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|16
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|HbaseMapWritable
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// 17 is NullInstance which isn't visible from here
comment|// Hbase types
name|assertEquals
argument_list|(
literal|18
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|HColumnDescriptor
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|19
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|HConstants
operator|.
name|Modify
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// 20 and 21 are place holders for HMsg
name|assertEquals
argument_list|(
literal|22
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|HRegion
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|23
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|HRegion
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|24
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|HRegionInfo
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|25
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|HRegionInfo
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|26
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|HServerAddress
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|27
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|HServerInfo
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|28
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|HTableDescriptor
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|29
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|MapWritable
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// HBASE-880
name|assertEquals
argument_list|(
literal|30
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|ClusterStatus
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|31
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|Delete
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|32
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|Get
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|33
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|KeyValue
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|34
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|KeyValue
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|35
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|Put
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|36
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|Put
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|37
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|Result
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|38
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|Result
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|39
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|Scan
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|40
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|WhileMatchFilter
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|41
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|PrefixFilter
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|42
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|PageFilter
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|43
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|InclusiveStopFilter
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|44
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|ColumnCountGetFilter
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|45
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|SingleColumnValueFilter
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|46
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|SingleColumnValueExcludeFilter
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|47
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|BinaryComparator
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|48
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|BitComparator
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|49
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|CompareFilter
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|50
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|RowFilter
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|51
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|ValueFilter
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|52
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|QualifierFilter
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|53
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|SkipFilter
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|54
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|WritableByteArrayComparable
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|55
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|FirstKeyOnlyFilter
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|56
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|DependentColumnFilter
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|57
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|Delete
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|58
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|HLog
operator|.
name|Entry
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|59
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|HLog
operator|.
name|Entry
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|60
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|HLogKey
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|61
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|List
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|62
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|NavigableSet
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|63
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|ColumnPrefixFilter
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// Multi
name|assertEquals
argument_list|(
literal|64
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|Row
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|65
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|Action
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|66
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|MultiAction
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|67
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|MultiResponse
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// coprocessor execution
name|assertEquals
argument_list|(
literal|68
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|Exec
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|69
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|Increment
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|70
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|KeyOnlyFilter
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// serializable
name|assertEquals
argument_list|(
literal|71
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|Serializable
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|72
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|RandomRowFilter
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|73
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|CompareOp
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|74
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|ColumnRangeFilter
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|75
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|HServerLoad
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|76
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|RegionOpeningState
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|77
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|HTableDescriptor
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|78
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|Append
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|79
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|RowMutations
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|80
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|Message
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|81
argument_list|,
name|HbaseObjectWritable
operator|.
name|getClassCode
argument_list|(
name|Array
operator|.
name|class
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test verifies that additional objects have not been added to the end of the list.    * If you are legitimately adding objects, this test will need to be updated, but see the    * note on the test above.     */
specifier|public
name|void
name|testGetNextObjectCode
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|82
argument_list|,
name|HbaseObjectWritable
operator|.
name|getNextClassCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Rule
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ResourceCheckerJUnitRule
name|cu
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ResourceCheckerJUnitRule
argument_list|()
decl_stmt|;
block|}
end_class

end_unit

