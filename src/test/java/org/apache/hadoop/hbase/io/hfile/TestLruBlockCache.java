begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2009 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|HeapSize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ClassSize
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * Tests the concurrent LruBlockCache.<p>  *  * Tests will ensure it grows and shrinks in size properly,  * evictions run when they're supposed to and do what they should,  * and that cached blocks are accessible when expected to be.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|MediumTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestLruBlockCache
extends|extends
name|TestCase
block|{
specifier|public
name|void
name|testBackgroundEvictionThread
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|maxSize
init|=
literal|100000
decl_stmt|;
name|long
name|blockSize
init|=
name|calculateBlockSizeDefault
argument_list|(
name|maxSize
argument_list|,
literal|9
argument_list|)
decl_stmt|;
comment|// room for 9, will evict
name|LruBlockCache
name|cache
init|=
operator|new
name|LruBlockCache
argument_list|(
name|maxSize
argument_list|,
name|blockSize
argument_list|)
decl_stmt|;
name|CachedItem
index|[]
name|blocks
init|=
name|generateFixedBlocks
argument_list|(
literal|10
argument_list|,
name|blockSize
argument_list|,
literal|"block"
argument_list|)
decl_stmt|;
comment|// Add all the blocks
for|for
control|(
name|CachedItem
name|block
range|:
name|blocks
control|)
block|{
name|cache
operator|.
name|cacheBlock
argument_list|(
name|block
operator|.
name|blockName
argument_list|,
name|block
argument_list|)
expr_stmt|;
block|}
comment|// Let the eviction run
name|int
name|n
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|cache
operator|.
name|getEvictionCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|n
operator|++
operator|<
literal|10
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Background Evictions run: "
operator|+
name|cache
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// A single eviction run should have occurred
name|assertEquals
argument_list|(
name|cache
operator|.
name|getEvictionCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCacheSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|maxSize
init|=
literal|1000000
decl_stmt|;
name|long
name|blockSize
init|=
name|calculateBlockSizeDefault
argument_list|(
name|maxSize
argument_list|,
literal|101
argument_list|)
decl_stmt|;
name|LruBlockCache
name|cache
init|=
operator|new
name|LruBlockCache
argument_list|(
name|maxSize
argument_list|,
name|blockSize
argument_list|)
decl_stmt|;
name|CachedItem
index|[]
name|blocks
init|=
name|generateRandomBlocks
argument_list|(
literal|100
argument_list|,
name|blockSize
argument_list|)
decl_stmt|;
name|long
name|expectedCacheSize
init|=
name|cache
operator|.
name|heapSize
argument_list|()
decl_stmt|;
comment|// Confirm empty
for|for
control|(
name|CachedItem
name|block
range|:
name|blocks
control|)
block|{
name|assertTrue
argument_list|(
name|cache
operator|.
name|getBlock
argument_list|(
name|block
operator|.
name|blockName
argument_list|,
literal|true
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// Add blocks
for|for
control|(
name|CachedItem
name|block
range|:
name|blocks
control|)
block|{
name|cache
operator|.
name|cacheBlock
argument_list|(
name|block
operator|.
name|blockName
argument_list|,
name|block
argument_list|)
expr_stmt|;
name|expectedCacheSize
operator|+=
name|block
operator|.
name|cacheBlockHeapSize
argument_list|()
expr_stmt|;
block|}
comment|// Verify correctly calculated cache heap size
name|assertEquals
argument_list|(
name|expectedCacheSize
argument_list|,
name|cache
operator|.
name|heapSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check if all blocks are properly cached and retrieved
for|for
control|(
name|CachedItem
name|block
range|:
name|blocks
control|)
block|{
name|HeapSize
name|buf
init|=
name|cache
operator|.
name|getBlock
argument_list|(
name|block
operator|.
name|blockName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|buf
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|buf
operator|.
name|heapSize
argument_list|()
argument_list|,
name|block
operator|.
name|heapSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Re-add same blocks and ensure nothing has changed
for|for
control|(
name|CachedItem
name|block
range|:
name|blocks
control|)
block|{
try|try
block|{
name|cache
operator|.
name|cacheBlock
argument_list|(
name|block
operator|.
name|blockName
argument_list|,
name|block
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Cache should not allow re-caching a block"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|re
parameter_list|)
block|{
comment|// expected
block|}
block|}
comment|// Verify correctly calculated cache heap size
name|assertEquals
argument_list|(
name|expectedCacheSize
argument_list|,
name|cache
operator|.
name|heapSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check if all blocks are properly cached and retrieved
for|for
control|(
name|CachedItem
name|block
range|:
name|blocks
control|)
block|{
name|HeapSize
name|buf
init|=
name|cache
operator|.
name|getBlock
argument_list|(
name|block
operator|.
name|blockName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|buf
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|buf
operator|.
name|heapSize
argument_list|()
argument_list|,
name|block
operator|.
name|heapSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Expect no evictions
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cache
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
name|t
init|=
operator|new
name|LruBlockCache
operator|.
name|StatisticsThread
argument_list|(
name|cache
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testCacheEvictionSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|maxSize
init|=
literal|100000
decl_stmt|;
name|long
name|blockSize
init|=
name|calculateBlockSizeDefault
argument_list|(
name|maxSize
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|LruBlockCache
name|cache
init|=
operator|new
name|LruBlockCache
argument_list|(
name|maxSize
argument_list|,
name|blockSize
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|CachedItem
index|[]
name|blocks
init|=
name|generateFixedBlocks
argument_list|(
literal|10
argument_list|,
name|blockSize
argument_list|,
literal|"block"
argument_list|)
decl_stmt|;
name|long
name|expectedCacheSize
init|=
name|cache
operator|.
name|heapSize
argument_list|()
decl_stmt|;
comment|// Add all the blocks
for|for
control|(
name|CachedItem
name|block
range|:
name|blocks
control|)
block|{
name|cache
operator|.
name|cacheBlock
argument_list|(
name|block
operator|.
name|blockName
argument_list|,
name|block
argument_list|)
expr_stmt|;
name|expectedCacheSize
operator|+=
name|block
operator|.
name|cacheBlockHeapSize
argument_list|()
expr_stmt|;
block|}
comment|// A single eviction run should have occurred
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cache
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Our expected size overruns acceptable limit
name|assertTrue
argument_list|(
name|expectedCacheSize
operator|>
operator|(
name|maxSize
operator|*
name|LruBlockCache
operator|.
name|DEFAULT_ACCEPTABLE_FACTOR
operator|)
argument_list|)
expr_stmt|;
comment|// But the cache did not grow beyond max
name|assertTrue
argument_list|(
name|cache
operator|.
name|heapSize
argument_list|()
operator|<
name|maxSize
argument_list|)
expr_stmt|;
comment|// And is still below the acceptable limit
name|assertTrue
argument_list|(
name|cache
operator|.
name|heapSize
argument_list|()
operator|<
operator|(
name|maxSize
operator|*
name|LruBlockCache
operator|.
name|DEFAULT_ACCEPTABLE_FACTOR
operator|)
argument_list|)
expr_stmt|;
comment|// All blocks except block 0 and 1 should be in the cache
name|assertTrue
argument_list|(
name|cache
operator|.
name|getBlock
argument_list|(
name|blocks
index|[
literal|0
index|]
operator|.
name|blockName
argument_list|,
literal|true
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cache
operator|.
name|getBlock
argument_list|(
name|blocks
index|[
literal|1
index|]
operator|.
name|blockName
argument_list|,
literal|true
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
name|blocks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|cache
operator|.
name|getBlock
argument_list|(
name|blocks
index|[
name|i
index|]
operator|.
name|blockName
argument_list|,
literal|true
argument_list|)
argument_list|,
name|blocks
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testCacheEvictionTwoPriorities
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|maxSize
init|=
literal|100000
decl_stmt|;
name|long
name|blockSize
init|=
name|calculateBlockSizeDefault
argument_list|(
name|maxSize
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|LruBlockCache
name|cache
init|=
operator|new
name|LruBlockCache
argument_list|(
name|maxSize
argument_list|,
name|blockSize
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|CachedItem
index|[]
name|singleBlocks
init|=
name|generateFixedBlocks
argument_list|(
literal|5
argument_list|,
literal|10000
argument_list|,
literal|"single"
argument_list|)
decl_stmt|;
name|CachedItem
index|[]
name|multiBlocks
init|=
name|generateFixedBlocks
argument_list|(
literal|5
argument_list|,
literal|10000
argument_list|,
literal|"multi"
argument_list|)
decl_stmt|;
name|long
name|expectedCacheSize
init|=
name|cache
operator|.
name|heapSize
argument_list|()
decl_stmt|;
comment|// Add and get the multi blocks
for|for
control|(
name|CachedItem
name|block
range|:
name|multiBlocks
control|)
block|{
name|cache
operator|.
name|cacheBlock
argument_list|(
name|block
operator|.
name|blockName
argument_list|,
name|block
argument_list|)
expr_stmt|;
name|expectedCacheSize
operator|+=
name|block
operator|.
name|cacheBlockHeapSize
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|cache
operator|.
name|getBlock
argument_list|(
name|block
operator|.
name|blockName
argument_list|,
literal|true
argument_list|)
argument_list|,
name|block
argument_list|)
expr_stmt|;
block|}
comment|// Add the single blocks (no get)
for|for
control|(
name|CachedItem
name|block
range|:
name|singleBlocks
control|)
block|{
name|cache
operator|.
name|cacheBlock
argument_list|(
name|block
operator|.
name|blockName
argument_list|,
name|block
argument_list|)
expr_stmt|;
name|expectedCacheSize
operator|+=
name|block
operator|.
name|heapSize
argument_list|()
expr_stmt|;
block|}
comment|// A single eviction run should have occurred
name|assertEquals
argument_list|(
name|cache
operator|.
name|getEvictionCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// We expect two entries evicted
name|assertEquals
argument_list|(
name|cache
operator|.
name|getEvictedCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Our expected size overruns acceptable limit
name|assertTrue
argument_list|(
name|expectedCacheSize
operator|>
operator|(
name|maxSize
operator|*
name|LruBlockCache
operator|.
name|DEFAULT_ACCEPTABLE_FACTOR
operator|)
argument_list|)
expr_stmt|;
comment|// But the cache did not grow beyond max
name|assertTrue
argument_list|(
name|cache
operator|.
name|heapSize
argument_list|()
operator|<=
name|maxSize
argument_list|)
expr_stmt|;
comment|// And is now below the acceptable limit
name|assertTrue
argument_list|(
name|cache
operator|.
name|heapSize
argument_list|()
operator|<=
operator|(
name|maxSize
operator|*
name|LruBlockCache
operator|.
name|DEFAULT_ACCEPTABLE_FACTOR
operator|)
argument_list|)
expr_stmt|;
comment|// We expect fairness across the two priorities.
comment|// This test makes multi go barely over its limit, in-memory
comment|// empty, and the rest in single.  Two single evictions and
comment|// one multi eviction expected.
name|assertTrue
argument_list|(
name|cache
operator|.
name|getBlock
argument_list|(
name|singleBlocks
index|[
literal|0
index|]
operator|.
name|blockName
argument_list|,
literal|true
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cache
operator|.
name|getBlock
argument_list|(
name|multiBlocks
index|[
literal|0
index|]
operator|.
name|blockName
argument_list|,
literal|true
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|// And all others to be cached
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|cache
operator|.
name|getBlock
argument_list|(
name|singleBlocks
index|[
name|i
index|]
operator|.
name|blockName
argument_list|,
literal|true
argument_list|)
argument_list|,
name|singleBlocks
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cache
operator|.
name|getBlock
argument_list|(
name|multiBlocks
index|[
name|i
index|]
operator|.
name|blockName
argument_list|,
literal|true
argument_list|)
argument_list|,
name|multiBlocks
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testCacheEvictionThreePriorities
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|maxSize
init|=
literal|100000
decl_stmt|;
name|long
name|blockSize
init|=
name|calculateBlockSize
argument_list|(
name|maxSize
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|LruBlockCache
name|cache
init|=
operator|new
name|LruBlockCache
argument_list|(
name|maxSize
argument_list|,
name|blockSize
argument_list|,
literal|false
argument_list|,
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
literal|1.2
operator|*
name|maxSize
operator|/
name|blockSize
argument_list|)
argument_list|,
name|LruBlockCache
operator|.
name|DEFAULT_LOAD_FACTOR
argument_list|,
name|LruBlockCache
operator|.
name|DEFAULT_CONCURRENCY_LEVEL
argument_list|,
literal|0.98f
argument_list|,
comment|// min
literal|0.99f
argument_list|,
comment|// acceptable
literal|0.33f
argument_list|,
comment|// single
literal|0.33f
argument_list|,
comment|// multi
literal|0.34f
argument_list|)
decl_stmt|;
comment|// memory
name|CachedItem
index|[]
name|singleBlocks
init|=
name|generateFixedBlocks
argument_list|(
literal|5
argument_list|,
name|blockSize
argument_list|,
literal|"single"
argument_list|)
decl_stmt|;
name|CachedItem
index|[]
name|multiBlocks
init|=
name|generateFixedBlocks
argument_list|(
literal|5
argument_list|,
name|blockSize
argument_list|,
literal|"multi"
argument_list|)
decl_stmt|;
name|CachedItem
index|[]
name|memoryBlocks
init|=
name|generateFixedBlocks
argument_list|(
literal|5
argument_list|,
name|blockSize
argument_list|,
literal|"memory"
argument_list|)
decl_stmt|;
name|long
name|expectedCacheSize
init|=
name|cache
operator|.
name|heapSize
argument_list|()
decl_stmt|;
comment|// Add 3 blocks from each priority
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
comment|// Just add single blocks
name|cache
operator|.
name|cacheBlock
argument_list|(
name|singleBlocks
index|[
name|i
index|]
operator|.
name|blockName
argument_list|,
name|singleBlocks
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|expectedCacheSize
operator|+=
name|singleBlocks
index|[
name|i
index|]
operator|.
name|cacheBlockHeapSize
argument_list|()
expr_stmt|;
comment|// Add and get multi blocks
name|cache
operator|.
name|cacheBlock
argument_list|(
name|multiBlocks
index|[
name|i
index|]
operator|.
name|blockName
argument_list|,
name|multiBlocks
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|expectedCacheSize
operator|+=
name|multiBlocks
index|[
name|i
index|]
operator|.
name|cacheBlockHeapSize
argument_list|()
expr_stmt|;
name|cache
operator|.
name|getBlock
argument_list|(
name|multiBlocks
index|[
name|i
index|]
operator|.
name|blockName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Add memory blocks as such
name|cache
operator|.
name|cacheBlock
argument_list|(
name|memoryBlocks
index|[
name|i
index|]
operator|.
name|blockName
argument_list|,
name|memoryBlocks
index|[
name|i
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|expectedCacheSize
operator|+=
name|memoryBlocks
index|[
name|i
index|]
operator|.
name|cacheBlockHeapSize
argument_list|()
expr_stmt|;
block|}
comment|// Do not expect any evictions yet
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cache
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify cache size
name|assertEquals
argument_list|(
name|expectedCacheSize
argument_list|,
name|cache
operator|.
name|heapSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Insert a single block, oldest single should be evicted
name|cache
operator|.
name|cacheBlock
argument_list|(
name|singleBlocks
index|[
literal|3
index|]
operator|.
name|blockName
argument_list|,
name|singleBlocks
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
comment|// Single eviction, one thing evicted
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cache
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cache
operator|.
name|getEvictedCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify oldest single block is the one evicted
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getBlock
argument_list|(
name|singleBlocks
index|[
literal|0
index|]
operator|.
name|blockName
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Change the oldest remaining single block to a multi
name|cache
operator|.
name|getBlock
argument_list|(
name|singleBlocks
index|[
literal|1
index|]
operator|.
name|blockName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Insert another single block
name|cache
operator|.
name|cacheBlock
argument_list|(
name|singleBlocks
index|[
literal|4
index|]
operator|.
name|blockName
argument_list|,
name|singleBlocks
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
comment|// Two evictions, two evicted.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cache
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cache
operator|.
name|getEvictedCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Oldest multi block should be evicted now
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getBlock
argument_list|(
name|multiBlocks
index|[
literal|0
index|]
operator|.
name|blockName
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Insert another memory block
name|cache
operator|.
name|cacheBlock
argument_list|(
name|memoryBlocks
index|[
literal|3
index|]
operator|.
name|blockName
argument_list|,
name|memoryBlocks
index|[
literal|3
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Three evictions, three evicted.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|cache
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|cache
operator|.
name|getEvictedCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Oldest memory block should be evicted now
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getBlock
argument_list|(
name|memoryBlocks
index|[
literal|0
index|]
operator|.
name|blockName
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add a block that is twice as big (should force two evictions)
name|CachedItem
index|[]
name|bigBlocks
init|=
name|generateFixedBlocks
argument_list|(
literal|3
argument_list|,
name|blockSize
operator|*
literal|3
argument_list|,
literal|"big"
argument_list|)
decl_stmt|;
name|cache
operator|.
name|cacheBlock
argument_list|(
name|bigBlocks
index|[
literal|0
index|]
operator|.
name|blockName
argument_list|,
name|bigBlocks
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// Four evictions, six evicted (inserted block 3X size, expect +3 evicted)
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|cache
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|cache
operator|.
name|getEvictedCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Expect three remaining singles to be evicted
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getBlock
argument_list|(
name|singleBlocks
index|[
literal|2
index|]
operator|.
name|blockName
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getBlock
argument_list|(
name|singleBlocks
index|[
literal|3
index|]
operator|.
name|blockName
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getBlock
argument_list|(
name|singleBlocks
index|[
literal|4
index|]
operator|.
name|blockName
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make the big block a multi block
name|cache
operator|.
name|getBlock
argument_list|(
name|bigBlocks
index|[
literal|0
index|]
operator|.
name|blockName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Cache another single big block
name|cache
operator|.
name|cacheBlock
argument_list|(
name|bigBlocks
index|[
literal|1
index|]
operator|.
name|blockName
argument_list|,
name|bigBlocks
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// Five evictions, nine evicted (3 new)
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|cache
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|cache
operator|.
name|getEvictedCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Expect three remaining multis to be evicted
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getBlock
argument_list|(
name|singleBlocks
index|[
literal|1
index|]
operator|.
name|blockName
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getBlock
argument_list|(
name|multiBlocks
index|[
literal|1
index|]
operator|.
name|blockName
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getBlock
argument_list|(
name|multiBlocks
index|[
literal|2
index|]
operator|.
name|blockName
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Cache a big memory block
name|cache
operator|.
name|cacheBlock
argument_list|(
name|bigBlocks
index|[
literal|2
index|]
operator|.
name|blockName
argument_list|,
name|bigBlocks
index|[
literal|2
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Six evictions, twelve evicted (3 new)
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|cache
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|cache
operator|.
name|getEvictedCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Expect three remaining in-memory to be evicted
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getBlock
argument_list|(
name|memoryBlocks
index|[
literal|1
index|]
operator|.
name|blockName
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getBlock
argument_list|(
name|memoryBlocks
index|[
literal|2
index|]
operator|.
name|blockName
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getBlock
argument_list|(
name|memoryBlocks
index|[
literal|3
index|]
operator|.
name|blockName
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// test scan resistance
specifier|public
name|void
name|testScanResistance
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|maxSize
init|=
literal|100000
decl_stmt|;
name|long
name|blockSize
init|=
name|calculateBlockSize
argument_list|(
name|maxSize
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|LruBlockCache
name|cache
init|=
operator|new
name|LruBlockCache
argument_list|(
name|maxSize
argument_list|,
name|blockSize
argument_list|,
literal|false
argument_list|,
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
literal|1.2
operator|*
name|maxSize
operator|/
name|blockSize
argument_list|)
argument_list|,
name|LruBlockCache
operator|.
name|DEFAULT_LOAD_FACTOR
argument_list|,
name|LruBlockCache
operator|.
name|DEFAULT_CONCURRENCY_LEVEL
argument_list|,
literal|0.66f
argument_list|,
comment|// min
literal|0.99f
argument_list|,
comment|// acceptable
literal|0.33f
argument_list|,
comment|// single
literal|0.33f
argument_list|,
comment|// multi
literal|0.34f
argument_list|)
decl_stmt|;
comment|// memory
name|CachedItem
index|[]
name|singleBlocks
init|=
name|generateFixedBlocks
argument_list|(
literal|20
argument_list|,
name|blockSize
argument_list|,
literal|"single"
argument_list|)
decl_stmt|;
name|CachedItem
index|[]
name|multiBlocks
init|=
name|generateFixedBlocks
argument_list|(
literal|5
argument_list|,
name|blockSize
argument_list|,
literal|"multi"
argument_list|)
decl_stmt|;
comment|// Add 5 multi blocks
for|for
control|(
name|CachedItem
name|block
range|:
name|multiBlocks
control|)
block|{
name|cache
operator|.
name|cacheBlock
argument_list|(
name|block
operator|.
name|blockName
argument_list|,
name|block
argument_list|)
expr_stmt|;
name|cache
operator|.
name|getBlock
argument_list|(
name|block
operator|.
name|blockName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Add 5 single blocks
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|cache
operator|.
name|cacheBlock
argument_list|(
name|singleBlocks
index|[
name|i
index|]
operator|.
name|blockName
argument_list|,
name|singleBlocks
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// An eviction ran
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cache
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// To drop down to 2/3 capacity, we'll need to evict 4 blocks
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|cache
operator|.
name|getEvictedCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Should have been taken off equally from single and multi
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getBlock
argument_list|(
name|singleBlocks
index|[
literal|0
index|]
operator|.
name|blockName
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getBlock
argument_list|(
name|singleBlocks
index|[
literal|1
index|]
operator|.
name|blockName
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getBlock
argument_list|(
name|multiBlocks
index|[
literal|0
index|]
operator|.
name|blockName
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getBlock
argument_list|(
name|multiBlocks
index|[
literal|1
index|]
operator|.
name|blockName
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Let's keep "scanning" by adding single blocks.  From here on we only
comment|// expect evictions from the single bucket.
comment|// Every time we reach 10 total blocks (every 4 inserts) we get 4 single
comment|// blocks evicted.  Inserting 13 blocks should yield 3 more evictions and
comment|// 12 more evicted.
for|for
control|(
name|int
name|i
init|=
literal|5
init|;
name|i
operator|<
literal|18
condition|;
name|i
operator|++
control|)
block|{
name|cache
operator|.
name|cacheBlock
argument_list|(
name|singleBlocks
index|[
name|i
index|]
operator|.
name|blockName
argument_list|,
name|singleBlocks
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// 4 total evictions, 16 total evicted
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|cache
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|16
argument_list|,
name|cache
operator|.
name|getEvictedCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Should now have 7 total blocks
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|cache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// test setMaxSize
specifier|public
name|void
name|testResizeBlockCache
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|maxSize
init|=
literal|300000
decl_stmt|;
name|long
name|blockSize
init|=
name|calculateBlockSize
argument_list|(
name|maxSize
argument_list|,
literal|31
argument_list|)
decl_stmt|;
name|LruBlockCache
name|cache
init|=
operator|new
name|LruBlockCache
argument_list|(
name|maxSize
argument_list|,
name|blockSize
argument_list|,
literal|false
argument_list|,
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
literal|1.2
operator|*
name|maxSize
operator|/
name|blockSize
argument_list|)
argument_list|,
name|LruBlockCache
operator|.
name|DEFAULT_LOAD_FACTOR
argument_list|,
name|LruBlockCache
operator|.
name|DEFAULT_CONCURRENCY_LEVEL
argument_list|,
literal|0.98f
argument_list|,
comment|// min
literal|0.99f
argument_list|,
comment|// acceptable
literal|0.33f
argument_list|,
comment|// single
literal|0.33f
argument_list|,
comment|// multi
literal|0.34f
argument_list|)
decl_stmt|;
comment|// memory
name|CachedItem
index|[]
name|singleBlocks
init|=
name|generateFixedBlocks
argument_list|(
literal|10
argument_list|,
name|blockSize
argument_list|,
literal|"single"
argument_list|)
decl_stmt|;
name|CachedItem
index|[]
name|multiBlocks
init|=
name|generateFixedBlocks
argument_list|(
literal|10
argument_list|,
name|blockSize
argument_list|,
literal|"multi"
argument_list|)
decl_stmt|;
name|CachedItem
index|[]
name|memoryBlocks
init|=
name|generateFixedBlocks
argument_list|(
literal|10
argument_list|,
name|blockSize
argument_list|,
literal|"memory"
argument_list|)
decl_stmt|;
comment|// Add all blocks from all priorities
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
comment|// Just add single blocks
name|cache
operator|.
name|cacheBlock
argument_list|(
name|singleBlocks
index|[
name|i
index|]
operator|.
name|blockName
argument_list|,
name|singleBlocks
index|[
name|i
index|]
argument_list|)
expr_stmt|;
comment|// Add and get multi blocks
name|cache
operator|.
name|cacheBlock
argument_list|(
name|multiBlocks
index|[
name|i
index|]
operator|.
name|blockName
argument_list|,
name|multiBlocks
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|cache
operator|.
name|getBlock
argument_list|(
name|multiBlocks
index|[
name|i
index|]
operator|.
name|blockName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Add memory blocks as such
name|cache
operator|.
name|cacheBlock
argument_list|(
name|memoryBlocks
index|[
name|i
index|]
operator|.
name|blockName
argument_list|,
name|memoryBlocks
index|[
name|i
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Do not expect any evictions yet
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cache
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Resize to half capacity plus an extra block (otherwise we evict an extra)
name|cache
operator|.
name|setMaxSize
argument_list|(
call|(
name|long
call|)
argument_list|(
name|maxSize
operator|*
literal|0.5f
argument_list|)
argument_list|)
expr_stmt|;
comment|// Should have run a single eviction
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cache
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// And we expect 1/2 of the blocks to be evicted
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|cache
operator|.
name|getEvictedCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// And the oldest 5 blocks from each category should be gone
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getBlock
argument_list|(
name|singleBlocks
index|[
name|i
index|]
operator|.
name|blockName
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getBlock
argument_list|(
name|multiBlocks
index|[
name|i
index|]
operator|.
name|blockName
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getBlock
argument_list|(
name|memoryBlocks
index|[
name|i
index|]
operator|.
name|blockName
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// And the newest 5 blocks should still be accessible
for|for
control|(
name|int
name|i
init|=
literal|5
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|singleBlocks
index|[
name|i
index|]
argument_list|,
name|cache
operator|.
name|getBlock
argument_list|(
name|singleBlocks
index|[
name|i
index|]
operator|.
name|blockName
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|multiBlocks
index|[
name|i
index|]
argument_list|,
name|cache
operator|.
name|getBlock
argument_list|(
name|multiBlocks
index|[
name|i
index|]
operator|.
name|blockName
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|memoryBlocks
index|[
name|i
index|]
argument_list|,
name|cache
operator|.
name|getBlock
argument_list|(
name|memoryBlocks
index|[
name|i
index|]
operator|.
name|blockName
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|CachedItem
index|[]
name|generateFixedBlocks
parameter_list|(
name|int
name|numBlocks
parameter_list|,
name|int
name|size
parameter_list|,
name|String
name|pfx
parameter_list|)
block|{
name|CachedItem
index|[]
name|blocks
init|=
operator|new
name|CachedItem
index|[
name|numBlocks
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numBlocks
condition|;
name|i
operator|++
control|)
block|{
name|blocks
index|[
name|i
index|]
operator|=
operator|new
name|CachedItem
argument_list|(
name|pfx
operator|+
name|i
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
return|return
name|blocks
return|;
block|}
specifier|private
name|CachedItem
index|[]
name|generateFixedBlocks
parameter_list|(
name|int
name|numBlocks
parameter_list|,
name|long
name|size
parameter_list|,
name|String
name|pfx
parameter_list|)
block|{
return|return
name|generateFixedBlocks
argument_list|(
name|numBlocks
argument_list|,
operator|(
name|int
operator|)
name|size
argument_list|,
name|pfx
argument_list|)
return|;
block|}
specifier|private
name|CachedItem
index|[]
name|generateRandomBlocks
parameter_list|(
name|int
name|numBlocks
parameter_list|,
name|long
name|maxSize
parameter_list|)
block|{
name|CachedItem
index|[]
name|blocks
init|=
operator|new
name|CachedItem
index|[
name|numBlocks
index|]
decl_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numBlocks
condition|;
name|i
operator|++
control|)
block|{
name|blocks
index|[
name|i
index|]
operator|=
operator|new
name|CachedItem
argument_list|(
literal|"block"
operator|+
name|i
argument_list|,
name|r
operator|.
name|nextInt
argument_list|(
operator|(
name|int
operator|)
name|maxSize
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|blocks
return|;
block|}
specifier|private
name|long
name|calculateBlockSize
parameter_list|(
name|long
name|maxSize
parameter_list|,
name|int
name|numBlocks
parameter_list|)
block|{
name|long
name|roughBlockSize
init|=
name|maxSize
operator|/
name|numBlocks
decl_stmt|;
name|int
name|numEntries
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
operator|(
literal|1.2
operator|)
operator|*
name|maxSize
operator|/
name|roughBlockSize
argument_list|)
decl_stmt|;
name|long
name|totalOverhead
init|=
name|LruBlockCache
operator|.
name|CACHE_FIXED_OVERHEAD
operator|+
name|ClassSize
operator|.
name|CONCURRENT_HASHMAP
operator|+
operator|(
name|numEntries
operator|*
name|ClassSize
operator|.
name|CONCURRENT_HASHMAP_ENTRY
operator|)
operator|+
operator|(
name|LruBlockCache
operator|.
name|DEFAULT_CONCURRENCY_LEVEL
operator|*
name|ClassSize
operator|.
name|CONCURRENT_HASHMAP_SEGMENT
operator|)
decl_stmt|;
name|long
name|negateBlockSize
init|=
call|(
name|long
call|)
argument_list|(
name|totalOverhead
operator|/
name|numEntries
argument_list|)
decl_stmt|;
name|negateBlockSize
operator|+=
name|CachedBlock
operator|.
name|PER_BLOCK_OVERHEAD
expr_stmt|;
return|return
name|ClassSize
operator|.
name|align
argument_list|(
operator|(
name|long
operator|)
name|Math
operator|.
name|floor
argument_list|(
operator|(
name|roughBlockSize
operator|-
name|negateBlockSize
operator|)
operator|*
literal|0.99f
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|long
name|calculateBlockSizeDefault
parameter_list|(
name|long
name|maxSize
parameter_list|,
name|int
name|numBlocks
parameter_list|)
block|{
name|long
name|roughBlockSize
init|=
name|maxSize
operator|/
name|numBlocks
decl_stmt|;
name|int
name|numEntries
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
operator|(
literal|1.2
operator|)
operator|*
name|maxSize
operator|/
name|roughBlockSize
argument_list|)
decl_stmt|;
name|long
name|totalOverhead
init|=
name|LruBlockCache
operator|.
name|CACHE_FIXED_OVERHEAD
operator|+
name|ClassSize
operator|.
name|CONCURRENT_HASHMAP
operator|+
operator|(
name|numEntries
operator|*
name|ClassSize
operator|.
name|CONCURRENT_HASHMAP_ENTRY
operator|)
operator|+
operator|(
name|LruBlockCache
operator|.
name|DEFAULT_CONCURRENCY_LEVEL
operator|*
name|ClassSize
operator|.
name|CONCURRENT_HASHMAP_SEGMENT
operator|)
decl_stmt|;
name|long
name|negateBlockSize
init|=
name|totalOverhead
operator|/
name|numEntries
decl_stmt|;
name|negateBlockSize
operator|+=
name|CachedBlock
operator|.
name|PER_BLOCK_OVERHEAD
expr_stmt|;
return|return
name|ClassSize
operator|.
name|align
argument_list|(
operator|(
name|long
operator|)
name|Math
operator|.
name|floor
argument_list|(
operator|(
name|roughBlockSize
operator|-
name|negateBlockSize
operator|)
operator|*
name|LruBlockCache
operator|.
name|DEFAULT_ACCEPTABLE_FACTOR
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|CachedItem
implements|implements
name|Cacheable
block|{
name|String
name|blockName
decl_stmt|;
name|int
name|size
decl_stmt|;
name|CachedItem
parameter_list|(
name|String
name|blockName
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|this
operator|.
name|blockName
operator|=
name|blockName
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
block|}
comment|/** The size of this item reported to the block cache layer */
annotation|@
name|Override
specifier|public
name|long
name|heapSize
parameter_list|()
block|{
return|return
name|ClassSize
operator|.
name|align
argument_list|(
name|size
argument_list|)
return|;
block|}
comment|/** Size of the cache block holding this item. Used for verification. */
specifier|public
name|long
name|cacheBlockHeapSize
parameter_list|()
block|{
return|return
name|CachedBlock
operator|.
name|PER_BLOCK_OVERHEAD
operator|+
name|ClassSize
operator|.
name|align
argument_list|(
literal|2
operator|*
name|blockName
operator|.
name|length
argument_list|()
argument_list|)
operator|+
name|ClassSize
operator|.
name|align
argument_list|(
name|size
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getSerializedLength
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|CacheableDeserializer
argument_list|<
name|Cacheable
argument_list|>
name|getDeserializer
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|serialize
parameter_list|(
name|ByteBuffer
name|destination
parameter_list|)
block|{     }
block|}
block|}
end_class

end_unit

