begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2011 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorCompletionService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|DoubleOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|encoding
operator|.
name|DataBlockEncoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ClassSize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|Compressor
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|Compression
operator|.
name|Algorithm
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|MediumTests
operator|.
name|class
argument_list|)
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestHFileBlock
block|{
comment|// change this value to activate more logs
specifier|private
specifier|static
specifier|final
name|boolean
name|detailedLogging
init|=
literal|false
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
index|[]
name|BOOLEAN_VALUES
init|=
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestHFileBlock
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|Compression
operator|.
name|Algorithm
index|[]
name|COMPRESSION_ALGORITHMS
init|=
block|{
name|NONE
block|,
name|GZ
block|}
decl_stmt|;
comment|// In case we need to temporarily switch some test cases to just test gzip.
specifier|static
specifier|final
name|Compression
operator|.
name|Algorithm
index|[]
name|GZIP_ONLY
init|=
block|{
name|GZ
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_TEST_BLOCKS
init|=
literal|1000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_READER_THREADS
init|=
literal|26
decl_stmt|;
comment|// Used to generate KeyValues
specifier|private
specifier|static
name|int
name|NUM_KEYVALUES
init|=
literal|50
decl_stmt|;
specifier|private
specifier|static
name|int
name|FIELD_LENGTH
init|=
literal|10
decl_stmt|;
specifier|private
specifier|static
name|float
name|CHANCE_TO_REPEAT
init|=
literal|0.6f
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
name|FileSystem
name|fs
decl_stmt|;
specifier|private
name|int
name|uncompressedSizeV1
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|includesMemstoreTS
decl_stmt|;
specifier|public
name|TestHFileBlock
parameter_list|(
name|boolean
name|includesMemstoreTS
parameter_list|)
block|{
name|this
operator|.
name|includesMemstoreTS
operator|=
name|includesMemstoreTS
expr_stmt|;
block|}
annotation|@
name|Parameters
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|parameters
parameter_list|()
block|{
return|return
name|HBaseTestingUtility
operator|.
name|BOOLEAN_PARAMETERIZED
return|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|writeTestBlockContents
parameter_list|(
name|DataOutputStream
name|dos
parameter_list|)
throws|throws
name|IOException
block|{
comment|// This compresses really well.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
operator|++
name|i
control|)
name|dos
operator|.
name|writeInt
argument_list|(
name|i
operator|/
literal|100
argument_list|)
expr_stmt|;
block|}
specifier|private
name|int
name|writeTestKeyValues
parameter_list|(
name|OutputStream
name|dos
parameter_list|,
name|int
name|seed
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|KeyValue
argument_list|>
name|keyValues
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|Random
name|randomizer
init|=
operator|new
name|Random
argument_list|(
literal|42l
operator|+
name|seed
argument_list|)
decl_stmt|;
comment|// just any fixed number
comment|// generate keyValues
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_KEYVALUES
condition|;
operator|++
name|i
control|)
block|{
name|byte
index|[]
name|row
decl_stmt|;
name|long
name|timestamp
decl_stmt|;
name|byte
index|[]
name|family
decl_stmt|;
name|byte
index|[]
name|qualifier
decl_stmt|;
name|byte
index|[]
name|value
decl_stmt|;
comment|// generate it or repeat, it should compress well
if|if
condition|(
literal|0
operator|<
name|i
operator|&&
name|randomizer
operator|.
name|nextFloat
argument_list|()
operator|<
name|CHANCE_TO_REPEAT
condition|)
block|{
name|row
operator|=
name|keyValues
operator|.
name|get
argument_list|(
name|randomizer
operator|.
name|nextInt
argument_list|(
name|keyValues
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
operator|.
name|getRow
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|row
operator|=
operator|new
name|byte
index|[
name|FIELD_LENGTH
index|]
expr_stmt|;
name|randomizer
operator|.
name|nextBytes
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|0
operator|==
name|i
condition|)
block|{
name|family
operator|=
operator|new
name|byte
index|[
name|FIELD_LENGTH
index|]
expr_stmt|;
name|randomizer
operator|.
name|nextBytes
argument_list|(
name|family
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|family
operator|=
name|keyValues
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFamily
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|0
operator|<
name|i
operator|&&
name|randomizer
operator|.
name|nextFloat
argument_list|()
operator|<
name|CHANCE_TO_REPEAT
condition|)
block|{
name|qualifier
operator|=
name|keyValues
operator|.
name|get
argument_list|(
name|randomizer
operator|.
name|nextInt
argument_list|(
name|keyValues
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
operator|.
name|getQualifier
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|qualifier
operator|=
operator|new
name|byte
index|[
name|FIELD_LENGTH
index|]
expr_stmt|;
name|randomizer
operator|.
name|nextBytes
argument_list|(
name|qualifier
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|0
operator|<
name|i
operator|&&
name|randomizer
operator|.
name|nextFloat
argument_list|()
operator|<
name|CHANCE_TO_REPEAT
condition|)
block|{
name|value
operator|=
name|keyValues
operator|.
name|get
argument_list|(
name|randomizer
operator|.
name|nextInt
argument_list|(
name|keyValues
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
operator|new
name|byte
index|[
name|FIELD_LENGTH
index|]
expr_stmt|;
name|randomizer
operator|.
name|nextBytes
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|0
operator|<
name|i
operator|&&
name|randomizer
operator|.
name|nextFloat
argument_list|()
operator|<
name|CHANCE_TO_REPEAT
condition|)
block|{
name|timestamp
operator|=
name|keyValues
operator|.
name|get
argument_list|(
name|randomizer
operator|.
name|nextInt
argument_list|(
name|keyValues
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|timestamp
operator|=
name|randomizer
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
name|keyValues
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|timestamp
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// sort it and write to stream
name|int
name|totalSize
init|=
literal|0
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|keyValues
argument_list|,
name|KeyValue
operator|.
name|COMPARATOR
argument_list|)
expr_stmt|;
name|DataOutputStream
name|dataOutputStream
init|=
operator|new
name|DataOutputStream
argument_list|(
name|dos
argument_list|)
decl_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
name|keyValues
control|)
block|{
name|totalSize
operator|+=
name|kv
operator|.
name|getLength
argument_list|()
expr_stmt|;
name|dataOutputStream
operator|.
name|write
argument_list|(
name|kv
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|kv
operator|.
name|getOffset
argument_list|()
argument_list|,
name|kv
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|includesMemstoreTS
condition|)
block|{
name|long
name|memstoreTS
init|=
name|randomizer
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|WritableUtils
operator|.
name|writeVLong
argument_list|(
name|dataOutputStream
argument_list|,
name|memstoreTS
argument_list|)
expr_stmt|;
name|totalSize
operator|+=
name|WritableUtils
operator|.
name|getVIntSize
argument_list|(
name|memstoreTS
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|totalSize
return|;
block|}
specifier|public
name|byte
index|[]
name|createTestV1Block
parameter_list|(
name|Compression
operator|.
name|Algorithm
name|algo
parameter_list|)
throws|throws
name|IOException
block|{
name|Compressor
name|compressor
init|=
name|algo
operator|.
name|getCompressor
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|OutputStream
name|os
init|=
name|algo
operator|.
name|createCompressionStream
argument_list|(
name|baos
argument_list|,
name|compressor
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|DataOutputStream
name|dos
init|=
operator|new
name|DataOutputStream
argument_list|(
name|os
argument_list|)
decl_stmt|;
name|BlockType
operator|.
name|META
operator|.
name|write
argument_list|(
name|dos
argument_list|)
expr_stmt|;
comment|// Let's make this a meta block.
name|writeTestBlockContents
argument_list|(
name|dos
argument_list|)
expr_stmt|;
name|uncompressedSizeV1
operator|=
name|dos
operator|.
name|size
argument_list|()
expr_stmt|;
name|dos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|algo
operator|.
name|returnCompressor
argument_list|(
name|compressor
argument_list|)
expr_stmt|;
return|return
name|baos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
specifier|private
name|byte
index|[]
name|createTestV2Block
parameter_list|(
name|Compression
operator|.
name|Algorithm
name|algo
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|BlockType
name|blockType
init|=
name|BlockType
operator|.
name|DATA
decl_stmt|;
name|HFileBlock
operator|.
name|Writer
name|hbw
init|=
operator|new
name|HFileBlock
operator|.
name|Writer
argument_list|(
name|algo
argument_list|,
literal|null
argument_list|,
name|includesMemstoreTS
argument_list|)
decl_stmt|;
name|DataOutputStream
name|dos
init|=
name|hbw
operator|.
name|startWriting
argument_list|(
name|blockType
argument_list|)
decl_stmt|;
name|writeTestBlockContents
argument_list|(
name|dos
argument_list|)
expr_stmt|;
name|byte
index|[]
name|headerAndData
init|=
name|hbw
operator|.
name|getHeaderAndData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1000
operator|*
literal|4
argument_list|,
name|hbw
operator|.
name|getUncompressedSizeWithoutHeader
argument_list|()
argument_list|)
expr_stmt|;
name|hbw
operator|.
name|releaseCompressor
argument_list|()
expr_stmt|;
return|return
name|headerAndData
return|;
block|}
specifier|public
name|String
name|createTestBlockStr
parameter_list|(
name|Compression
operator|.
name|Algorithm
name|algo
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|testV2Block
init|=
name|createTestV2Block
argument_list|(
name|algo
argument_list|)
decl_stmt|;
name|int
name|osOffset
init|=
name|HFileBlock
operator|.
name|HEADER_SIZE
operator|+
literal|9
decl_stmt|;
if|if
condition|(
name|osOffset
operator|<
name|testV2Block
operator|.
name|length
condition|)
block|{
comment|// Force-set the "OS" field of the gzip header to 3 (Unix) to avoid
comment|// variations across operating systems.
comment|// See http://www.gzip.org/zlib/rfc-gzip.html for gzip format.
name|testV2Block
index|[
name|osOffset
index|]
operator|=
literal|3
expr_stmt|;
block|}
return|return
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|testV2Block
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoCompression
parameter_list|()
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
literal|4000
operator|+
name|HFileBlock
operator|.
name|HEADER_SIZE
argument_list|,
name|createTestV2Block
argument_list|(
name|NONE
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGzipCompression
parameter_list|()
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
literal|"DATABLK*\\x00\\x00\\x00:\\x00\\x00\\x0F\\xA0\\xFF\\xFF\\xFF\\xFF"
operator|+
literal|"\\xFF\\xFF\\xFF\\xFF"
comment|// gzip-compressed block: http://www.gzip.org/zlib/rfc-gzip.html
operator|+
literal|"\\x1F\\x8B"
comment|// gzip magic signature
operator|+
literal|"\\x08"
comment|// Compression method: 8 = "deflate"
operator|+
literal|"\\x00"
comment|// Flags
operator|+
literal|"\\x00\\x00\\x00\\x00"
comment|// mtime
operator|+
literal|"\\x00"
comment|// XFL (extra flags)
comment|// OS (0 = FAT filesystems, 3 = Unix). However, this field
comment|// sometimes gets set to 0 on Linux and Mac, so we reset it to 3.
operator|+
literal|"\\x03"
operator|+
literal|"\\xED\\xC3\\xC1\\x11\\x00 \\x08\\xC00DD\\xDD\\x7Fa"
operator|+
literal|"\\xD6\\xE8\\xA3\\xB9K\\x84`\\x96Q\\xD3\\xA8\\xDB\\xA8e\\xD4c"
operator|+
literal|"\\xD46\\xEA5\\xEA3\\xEA7\\xE7\\x00LI\\s\\xA0\\x0F\\x00\\x00"
argument_list|,
name|createTestBlockStr
argument_list|(
name|GZ
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReaderV1
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|Compression
operator|.
name|Algorithm
name|algo
range|:
name|COMPRESSION_ALGORITHMS
control|)
block|{
for|for
control|(
name|boolean
name|pread
range|:
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|}
control|)
block|{
name|byte
index|[]
name|block
init|=
name|createTestV1Block
argument_list|(
name|algo
argument_list|)
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|TEST_UTIL
operator|.
name|getDataTestDir
argument_list|()
argument_list|,
literal|"blocks_v1_"
operator|+
name|algo
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating temporary file at "
operator|+
name|path
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|os
init|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|int
name|totalSize
init|=
literal|0
decl_stmt|;
name|int
name|numBlocks
init|=
literal|50
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numBlocks
condition|;
operator|++
name|i
control|)
block|{
name|os
operator|.
name|write
argument_list|(
name|block
argument_list|)
expr_stmt|;
name|totalSize
operator|+=
name|block
operator|.
name|length
expr_stmt|;
block|}
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|FSDataInputStream
name|is
init|=
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|HFileBlock
operator|.
name|FSReader
name|hbr
init|=
operator|new
name|HFileBlock
operator|.
name|FSReaderV1
argument_list|(
name|is
argument_list|,
name|algo
argument_list|,
name|totalSize
argument_list|)
decl_stmt|;
name|HFileBlock
name|b
decl_stmt|;
name|int
name|numBlocksRead
init|=
literal|0
decl_stmt|;
name|long
name|pos
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|pos
operator|<
name|totalSize
condition|)
block|{
name|b
operator|=
name|hbr
operator|.
name|readBlockData
argument_list|(
name|pos
argument_list|,
name|block
operator|.
name|length
argument_list|,
name|uncompressedSizeV1
argument_list|,
name|pread
argument_list|)
expr_stmt|;
name|b
operator|.
name|sanityCheck
argument_list|()
expr_stmt|;
name|pos
operator|+=
name|block
operator|.
name|length
expr_stmt|;
name|numBlocksRead
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|numBlocks
argument_list|,
name|numBlocksRead
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReaderV2
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|Compression
operator|.
name|Algorithm
name|algo
range|:
name|COMPRESSION_ALGORITHMS
control|)
block|{
for|for
control|(
name|boolean
name|pread
range|:
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|}
control|)
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|TEST_UTIL
operator|.
name|getDataTestDir
argument_list|()
argument_list|,
literal|"blocks_v2_"
operator|+
name|algo
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|os
init|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|HFileBlock
operator|.
name|Writer
name|hbw
init|=
operator|new
name|HFileBlock
operator|.
name|Writer
argument_list|(
name|algo
argument_list|,
literal|null
argument_list|,
name|includesMemstoreTS
argument_list|)
decl_stmt|;
name|long
name|totalSize
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|blockId
init|=
literal|0
init|;
name|blockId
operator|<
literal|2
condition|;
operator|++
name|blockId
control|)
block|{
name|DataOutputStream
name|dos
init|=
name|hbw
operator|.
name|startWriting
argument_list|(
name|BlockType
operator|.
name|DATA
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1234
condition|;
operator|++
name|i
control|)
name|dos
operator|.
name|writeInt
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|hbw
operator|.
name|writeHeaderAndData
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|totalSize
operator|+=
name|hbw
operator|.
name|getOnDiskSizeWithHeader
argument_list|()
expr_stmt|;
block|}
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|FSDataInputStream
name|is
init|=
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|HFileBlock
operator|.
name|FSReader
name|hbr
init|=
operator|new
name|HFileBlock
operator|.
name|FSReaderV2
argument_list|(
name|is
argument_list|,
name|algo
argument_list|,
name|totalSize
argument_list|)
decl_stmt|;
name|HFileBlock
name|b
init|=
name|hbr
operator|.
name|readBlockData
argument_list|(
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|pread
argument_list|)
decl_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
name|b
operator|.
name|sanityCheck
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|4936
argument_list|,
name|b
operator|.
name|getUncompressedSizeWithoutHeader
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|algo
operator|==
name|GZ
condition|?
literal|2173
else|:
literal|4936
argument_list|,
name|b
operator|.
name|getOnDiskSizeWithoutHeader
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|blockStr
init|=
name|b
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|algo
operator|==
name|GZ
condition|)
block|{
name|is
operator|=
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|hbr
operator|=
operator|new
name|HFileBlock
operator|.
name|FSReaderV2
argument_list|(
name|is
argument_list|,
name|algo
argument_list|,
name|totalSize
argument_list|)
expr_stmt|;
name|b
operator|=
name|hbr
operator|.
name|readBlockData
argument_list|(
literal|0
argument_list|,
literal|2173
operator|+
name|HFileBlock
operator|.
name|HEADER_SIZE
argument_list|,
operator|-
literal|1
argument_list|,
name|pread
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|blockStr
argument_list|,
name|b
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|wrongCompressedSize
init|=
literal|2172
decl_stmt|;
try|try
block|{
name|b
operator|=
name|hbr
operator|.
name|readBlockData
argument_list|(
literal|0
argument_list|,
name|wrongCompressedSize
operator|+
name|HFileBlock
operator|.
name|HEADER_SIZE
argument_list|,
operator|-
literal|1
argument_list|,
name|pread
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Exception expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|String
name|expectedPrefix
init|=
literal|"On-disk size without header provided is "
operator|+
name|wrongCompressedSize
operator|+
literal|", but block header contains "
operator|+
name|b
operator|.
name|getOnDiskSizeWithoutHeader
argument_list|()
operator|+
literal|"."
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Invalid exception message: '"
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
operator|+
literal|"'.\nMessage is expected to start with: '"
operator|+
name|expectedPrefix
operator|+
literal|"'"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
name|expectedPrefix
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Test encoding/decoding data blocks.    * @throws IOException a bug or a problem with temporary files.    */
annotation|@
name|Test
specifier|public
name|void
name|testDataBlockEncoding
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|numBlocks
init|=
literal|5
decl_stmt|;
for|for
control|(
name|Compression
operator|.
name|Algorithm
name|algo
range|:
name|COMPRESSION_ALGORITHMS
control|)
block|{
for|for
control|(
name|boolean
name|pread
range|:
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|}
control|)
block|{
for|for
control|(
name|DataBlockEncoding
name|encoding
range|:
name|DataBlockEncoding
operator|.
name|values
argument_list|()
control|)
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|TEST_UTIL
operator|.
name|getDataTestDir
argument_list|()
argument_list|,
literal|"blocks_v2_"
operator|+
name|algo
operator|+
literal|"_"
operator|+
name|encoding
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|os
init|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|HFileDataBlockEncoder
name|dataBlockEncoder
init|=
operator|new
name|HFileDataBlockEncoderImpl
argument_list|(
name|encoding
argument_list|)
decl_stmt|;
name|HFileBlock
operator|.
name|Writer
name|hbw
init|=
operator|new
name|HFileBlock
operator|.
name|Writer
argument_list|(
name|algo
argument_list|,
name|dataBlockEncoder
argument_list|,
name|includesMemstoreTS
argument_list|)
decl_stmt|;
name|long
name|totalSize
init|=
literal|0
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|encodedSizes
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|encodedBlocks
init|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|blockId
init|=
literal|0
init|;
name|blockId
operator|<
name|numBlocks
condition|;
operator|++
name|blockId
control|)
block|{
name|writeEncodedBlock
argument_list|(
name|encoding
argument_list|,
name|hbw
argument_list|,
name|encodedSizes
argument_list|,
name|encodedBlocks
argument_list|,
name|blockId
argument_list|)
expr_stmt|;
name|hbw
operator|.
name|writeHeaderAndData
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|totalSize
operator|+=
name|hbw
operator|.
name|getOnDiskSizeWithHeader
argument_list|()
expr_stmt|;
block|}
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|FSDataInputStream
name|is
init|=
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|HFileBlock
operator|.
name|FSReaderV2
name|hbr
init|=
operator|new
name|HFileBlock
operator|.
name|FSReaderV2
argument_list|(
name|is
argument_list|,
name|algo
argument_list|,
name|totalSize
argument_list|)
decl_stmt|;
name|hbr
operator|.
name|setDataBlockEncoder
argument_list|(
name|dataBlockEncoder
argument_list|)
expr_stmt|;
name|hbr
operator|.
name|setIncludesMemstoreTS
argument_list|(
name|includesMemstoreTS
argument_list|)
expr_stmt|;
name|HFileBlock
name|b
decl_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|blockId
init|=
literal|0
init|;
name|blockId
operator|<
name|numBlocks
condition|;
operator|++
name|blockId
control|)
block|{
name|b
operator|=
name|hbr
operator|.
name|readBlockData
argument_list|(
name|pos
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|pread
argument_list|)
expr_stmt|;
name|b
operator|.
name|sanityCheck
argument_list|()
expr_stmt|;
name|pos
operator|+=
name|b
operator|.
name|getOnDiskSizeWithHeader
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|int
operator|)
name|encodedSizes
operator|.
name|get
argument_list|(
name|blockId
argument_list|)
argument_list|,
name|b
operator|.
name|getUncompressedSizeWithoutHeader
argument_list|()
argument_list|)
expr_stmt|;
name|ByteBuffer
name|actualBuffer
init|=
name|b
operator|.
name|getBufferWithoutHeader
argument_list|()
decl_stmt|;
if|if
condition|(
name|encoding
operator|!=
name|DataBlockEncoding
operator|.
name|NONE
condition|)
block|{
comment|// We expect a two-byte big-endian encoding id.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|actualBuffer
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|encoding
operator|.
name|getId
argument_list|()
argument_list|,
name|actualBuffer
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|actualBuffer
operator|.
name|position
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|actualBuffer
operator|=
name|actualBuffer
operator|.
name|slice
argument_list|()
expr_stmt|;
block|}
name|ByteBuffer
name|expectedBuffer
init|=
name|encodedBlocks
operator|.
name|get
argument_list|(
name|blockId
argument_list|)
decl_stmt|;
name|expectedBuffer
operator|.
name|rewind
argument_list|()
expr_stmt|;
comment|// test if content matches, produce nice message
name|assertBuffersEqual
argument_list|(
name|expectedBuffer
argument_list|,
name|actualBuffer
argument_list|,
name|algo
argument_list|,
name|encoding
argument_list|,
name|pread
argument_list|)
expr_stmt|;
block|}
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|writeEncodedBlock
parameter_list|(
name|DataBlockEncoding
name|encoding
parameter_list|,
name|HFileBlock
operator|.
name|Writer
name|hbw
parameter_list|,
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|encodedSizes
parameter_list|,
specifier|final
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|encodedBlocks
parameter_list|,
name|int
name|blockId
parameter_list|)
throws|throws
name|IOException
block|{
name|DataOutputStream
name|dos
init|=
name|hbw
operator|.
name|startWriting
argument_list|(
name|BlockType
operator|.
name|DATA
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DoubleOutputStream
name|doubleOutputStream
init|=
operator|new
name|DoubleOutputStream
argument_list|(
name|dos
argument_list|,
name|baos
argument_list|)
decl_stmt|;
specifier|final
name|int
name|rawBlockSize
init|=
name|writeTestKeyValues
argument_list|(
name|doubleOutputStream
argument_list|,
name|blockId
argument_list|)
decl_stmt|;
name|ByteBuffer
name|rawBuf
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|rawBuf
operator|.
name|rewind
argument_list|()
expr_stmt|;
specifier|final
name|int
name|encodedSize
decl_stmt|;
specifier|final
name|ByteBuffer
name|encodedBuf
decl_stmt|;
if|if
condition|(
name|encoding
operator|==
name|DataBlockEncoding
operator|.
name|NONE
condition|)
block|{
name|encodedSize
operator|=
name|rawBlockSize
expr_stmt|;
name|encodedBuf
operator|=
name|rawBuf
expr_stmt|;
block|}
else|else
block|{
name|ByteArrayOutputStream
name|encodedOut
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|encoding
operator|.
name|getEncoder
argument_list|()
operator|.
name|compressKeyValues
argument_list|(
operator|new
name|DataOutputStream
argument_list|(
name|encodedOut
argument_list|)
argument_list|,
name|rawBuf
operator|.
name|duplicate
argument_list|()
argument_list|,
name|includesMemstoreTS
argument_list|)
expr_stmt|;
comment|// We need to account for the two-byte encoding algorithm ID that
comment|// comes after the 24-byte block header but before encoded KVs.
name|encodedSize
operator|=
name|encodedOut
operator|.
name|size
argument_list|()
operator|+
name|DataBlockEncoding
operator|.
name|ID_SIZE
expr_stmt|;
name|encodedBuf
operator|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|encodedOut
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|encodedSizes
operator|.
name|add
argument_list|(
name|encodedSize
argument_list|)
expr_stmt|;
name|encodedBlocks
operator|.
name|add
argument_list|(
name|encodedBuf
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertBuffersEqual
parameter_list|(
name|ByteBuffer
name|expectedBuffer
parameter_list|,
name|ByteBuffer
name|actualBuffer
parameter_list|,
name|Compression
operator|.
name|Algorithm
name|compression
parameter_list|,
name|DataBlockEncoding
name|encoding
parameter_list|,
name|boolean
name|pread
parameter_list|)
block|{
if|if
condition|(
operator|!
name|actualBuffer
operator|.
name|equals
argument_list|(
name|expectedBuffer
argument_list|)
condition|)
block|{
name|int
name|prefix
init|=
literal|0
decl_stmt|;
name|int
name|minLimit
init|=
name|Math
operator|.
name|min
argument_list|(
name|expectedBuffer
operator|.
name|limit
argument_list|()
argument_list|,
name|actualBuffer
operator|.
name|limit
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|prefix
operator|<
name|minLimit
operator|&&
name|expectedBuffer
operator|.
name|get
argument_list|(
name|prefix
argument_list|)
operator|==
name|actualBuffer
operator|.
name|get
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|prefix
operator|++
expr_stmt|;
block|}
name|fail
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Content mismath for compression %s, encoding %s, "
operator|+
literal|"pread %s, commonPrefix %d, expected %s, got %s"
argument_list|,
name|compression
argument_list|,
name|encoding
argument_list|,
name|pread
argument_list|,
name|prefix
argument_list|,
name|nextBytesToStr
argument_list|(
name|expectedBuffer
argument_list|,
name|prefix
argument_list|)
argument_list|,
name|nextBytesToStr
argument_list|(
name|actualBuffer
argument_list|,
name|prefix
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Convert a few next bytes in the given buffer at the given position to    * string. Used for error messages.    */
specifier|private
specifier|static
name|String
name|nextBytesToStr
parameter_list|(
name|ByteBuffer
name|buf
parameter_list|,
name|int
name|pos
parameter_list|)
block|{
name|int
name|maxBytes
init|=
name|buf
operator|.
name|limit
argument_list|()
operator|-
name|pos
decl_stmt|;
name|int
name|numBytes
init|=
name|Math
operator|.
name|min
argument_list|(
literal|16
argument_list|,
name|maxBytes
argument_list|)
decl_stmt|;
return|return
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|buf
operator|.
name|array
argument_list|()
argument_list|,
name|buf
operator|.
name|arrayOffset
argument_list|()
operator|+
name|pos
argument_list|,
name|numBytes
argument_list|)
operator|+
operator|(
name|numBytes
operator|<
name|maxBytes
condition|?
literal|"..."
else|:
literal|""
operator|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPreviousOffset
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|Compression
operator|.
name|Algorithm
name|algo
range|:
name|COMPRESSION_ALGORITHMS
control|)
block|{
for|for
control|(
name|boolean
name|pread
range|:
name|BOOLEAN_VALUES
control|)
block|{
for|for
control|(
name|boolean
name|cacheOnWrite
range|:
name|BOOLEAN_VALUES
control|)
block|{
name|Random
name|rand
init|=
name|defaultRandom
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Compression algorithm: "
operator|+
name|algo
operator|+
literal|", pread="
operator|+
name|pread
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|TEST_UTIL
operator|.
name|getDataTestDir
argument_list|()
argument_list|,
literal|"prev_offset"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|expectedOffsets
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|expectedPrevOffsets
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|BlockType
argument_list|>
name|expectedTypes
init|=
operator|new
name|ArrayList
argument_list|<
name|BlockType
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|expectedContents
init|=
name|cacheOnWrite
condition|?
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
else|:
literal|null
decl_stmt|;
name|long
name|totalSize
init|=
name|writeBlocks
argument_list|(
name|rand
argument_list|,
name|algo
argument_list|,
name|path
argument_list|,
name|expectedOffsets
argument_list|,
name|expectedPrevOffsets
argument_list|,
name|expectedTypes
argument_list|,
name|expectedContents
argument_list|)
decl_stmt|;
name|FSDataInputStream
name|is
init|=
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|HFileBlock
operator|.
name|FSReader
name|hbr
init|=
operator|new
name|HFileBlock
operator|.
name|FSReaderV2
argument_list|(
name|is
argument_list|,
name|algo
argument_list|,
name|totalSize
argument_list|)
decl_stmt|;
name|long
name|curOffset
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_TEST_BLOCKS
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|pread
condition|)
block|{
name|assertEquals
argument_list|(
name|is
operator|.
name|getPos
argument_list|()
argument_list|,
name|curOffset
operator|+
operator|(
name|i
operator|==
literal|0
condition|?
literal|0
else|:
name|HFileBlock
operator|.
name|HEADER_SIZE
operator|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expectedOffsets
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|,
name|curOffset
argument_list|)
expr_stmt|;
if|if
condition|(
name|detailedLogging
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Reading block #"
operator|+
name|i
operator|+
literal|" at offset "
operator|+
name|curOffset
argument_list|)
expr_stmt|;
block|}
name|HFileBlock
name|b
init|=
name|hbr
operator|.
name|readBlockData
argument_list|(
name|curOffset
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|pread
argument_list|)
decl_stmt|;
if|if
condition|(
name|detailedLogging
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Block #"
operator|+
name|i
operator|+
literal|": "
operator|+
name|b
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Invalid block #"
operator|+
name|i
operator|+
literal|"'s type:"
argument_list|,
name|expectedTypes
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|b
operator|.
name|getBlockType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Invalid previous block offset for block "
operator|+
name|i
operator|+
literal|" of "
operator|+
literal|"type "
operator|+
name|b
operator|.
name|getBlockType
argument_list|()
operator|+
literal|":"
argument_list|,
operator|(
name|long
operator|)
name|expectedPrevOffsets
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|b
operator|.
name|getPrevBlockOffset
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|sanityCheck
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|curOffset
argument_list|,
name|b
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now re-load this block knowing the on-disk size. This tests a
comment|// different branch in the loader.
name|HFileBlock
name|b2
init|=
name|hbr
operator|.
name|readBlockData
argument_list|(
name|curOffset
argument_list|,
name|b
operator|.
name|getOnDiskSizeWithHeader
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
name|pread
argument_list|)
decl_stmt|;
name|b2
operator|.
name|sanityCheck
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|b
operator|.
name|getBlockType
argument_list|()
argument_list|,
name|b2
operator|.
name|getBlockType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|b
operator|.
name|getOnDiskSizeWithoutHeader
argument_list|()
argument_list|,
name|b2
operator|.
name|getOnDiskSizeWithoutHeader
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|b
operator|.
name|getOnDiskSizeWithHeader
argument_list|()
argument_list|,
name|b2
operator|.
name|getOnDiskSizeWithHeader
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|b
operator|.
name|getUncompressedSizeWithoutHeader
argument_list|()
argument_list|,
name|b2
operator|.
name|getUncompressedSizeWithoutHeader
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|b
operator|.
name|getPrevBlockOffset
argument_list|()
argument_list|,
name|b2
operator|.
name|getPrevBlockOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|curOffset
argument_list|,
name|b2
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|curOffset
operator|+=
name|b
operator|.
name|getOnDiskSizeWithHeader
argument_list|()
expr_stmt|;
if|if
condition|(
name|cacheOnWrite
condition|)
block|{
comment|// In the cache-on-write mode we store uncompressed bytes so we
comment|// can compare them to what was read by the block reader.
name|ByteBuffer
name|bufRead
init|=
name|b
operator|.
name|getBufferWithHeader
argument_list|()
decl_stmt|;
name|ByteBuffer
name|bufExpected
init|=
name|expectedContents
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|boolean
name|bytesAreCorrect
init|=
name|Bytes
operator|.
name|compareTo
argument_list|(
name|bufRead
operator|.
name|array
argument_list|()
argument_list|,
name|bufRead
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|bufRead
operator|.
name|limit
argument_list|()
argument_list|,
name|bufExpected
operator|.
name|array
argument_list|()
argument_list|,
name|bufExpected
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|bufExpected
operator|.
name|limit
argument_list|()
argument_list|)
operator|==
literal|0
decl_stmt|;
name|String
name|wrongBytesMsg
init|=
literal|""
decl_stmt|;
if|if
condition|(
operator|!
name|bytesAreCorrect
condition|)
block|{
comment|// Optimization: only construct an error message in case we
comment|// will need it.
name|wrongBytesMsg
operator|=
literal|"Expected bytes in block #"
operator|+
name|i
operator|+
literal|" (algo="
operator|+
name|algo
operator|+
literal|", pread="
operator|+
name|pread
operator|+
literal|"):\n"
expr_stmt|;
name|wrongBytesMsg
operator|+=
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|bufExpected
operator|.
name|array
argument_list|()
argument_list|,
name|bufExpected
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|Math
operator|.
name|min
argument_list|(
literal|32
argument_list|,
name|bufExpected
operator|.
name|limit
argument_list|()
argument_list|)
argument_list|)
operator|+
literal|", actual:\n"
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|bufRead
operator|.
name|array
argument_list|()
argument_list|,
name|bufRead
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|Math
operator|.
name|min
argument_list|(
literal|32
argument_list|,
name|bufRead
operator|.
name|limit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|wrongBytesMsg
argument_list|,
name|bytesAreCorrect
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|curOffset
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|Random
name|defaultRandom
parameter_list|()
block|{
return|return
operator|new
name|Random
argument_list|(
literal|189237
argument_list|)
return|;
block|}
specifier|private
class|class
name|BlockReaderThread
implements|implements
name|Callable
argument_list|<
name|Boolean
argument_list|>
block|{
specifier|private
specifier|final
name|String
name|clientId
decl_stmt|;
specifier|private
specifier|final
name|HFileBlock
operator|.
name|FSReader
name|hbr
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Long
argument_list|>
name|offsets
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|BlockType
argument_list|>
name|types
decl_stmt|;
specifier|private
specifier|final
name|long
name|fileSize
decl_stmt|;
specifier|public
name|BlockReaderThread
parameter_list|(
name|String
name|clientId
parameter_list|,
name|HFileBlock
operator|.
name|FSReader
name|hbr
parameter_list|,
name|List
argument_list|<
name|Long
argument_list|>
name|offsets
parameter_list|,
name|List
argument_list|<
name|BlockType
argument_list|>
name|types
parameter_list|,
name|long
name|fileSize
parameter_list|)
block|{
name|this
operator|.
name|clientId
operator|=
name|clientId
expr_stmt|;
name|this
operator|.
name|offsets
operator|=
name|offsets
expr_stmt|;
name|this
operator|.
name|hbr
operator|=
name|hbr
expr_stmt|;
name|this
operator|.
name|types
operator|=
name|types
expr_stmt|;
name|this
operator|.
name|fileSize
operator|=
name|fileSize
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|clientId
operator|.
name|hashCode
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|endTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|10000
decl_stmt|;
name|int
name|numBlocksRead
init|=
literal|0
decl_stmt|;
name|int
name|numPositionalRead
init|=
literal|0
decl_stmt|;
name|int
name|numWithOnDiskSize
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|endTime
condition|)
block|{
name|int
name|blockId
init|=
name|rand
operator|.
name|nextInt
argument_list|(
name|NUM_TEST_BLOCKS
argument_list|)
decl_stmt|;
name|long
name|offset
init|=
name|offsets
operator|.
name|get
argument_list|(
name|blockId
argument_list|)
decl_stmt|;
name|boolean
name|pread
init|=
name|rand
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|boolean
name|withOnDiskSize
init|=
name|rand
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|long
name|expectedSize
init|=
operator|(
name|blockId
operator|==
name|NUM_TEST_BLOCKS
operator|-
literal|1
condition|?
name|fileSize
else|:
name|offsets
operator|.
name|get
argument_list|(
name|blockId
operator|+
literal|1
argument_list|)
operator|)
operator|-
name|offset
decl_stmt|;
name|HFileBlock
name|b
decl_stmt|;
try|try
block|{
name|long
name|onDiskSizeArg
init|=
name|withOnDiskSize
condition|?
name|expectedSize
else|:
operator|-
literal|1
decl_stmt|;
name|b
operator|=
name|hbr
operator|.
name|readBlockData
argument_list|(
name|offset
argument_list|,
name|onDiskSizeArg
argument_list|,
operator|-
literal|1
argument_list|,
name|pread
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error in client "
operator|+
name|clientId
operator|+
literal|" trying to read block at "
operator|+
name|offset
operator|+
literal|", pread="
operator|+
name|pread
operator|+
literal|", withOnDiskSize="
operator|+
name|withOnDiskSize
argument_list|,
name|ex
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|assertEquals
argument_list|(
name|types
operator|.
name|get
argument_list|(
name|blockId
argument_list|)
argument_list|,
name|b
operator|.
name|getBlockType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedSize
argument_list|,
name|b
operator|.
name|getOnDiskSizeWithHeader
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|offset
argument_list|,
name|b
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|numBlocksRead
expr_stmt|;
if|if
condition|(
name|pread
condition|)
operator|++
name|numPositionalRead
expr_stmt|;
if|if
condition|(
name|withOnDiskSize
condition|)
operator|++
name|numWithOnDiskSize
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Client "
operator|+
name|clientId
operator|+
literal|" successfully read "
operator|+
name|numBlocksRead
operator|+
literal|" blocks (with pread: "
operator|+
name|numPositionalRead
operator|+
literal|", with onDiskSize "
operator|+
literal|"specified: "
operator|+
name|numWithOnDiskSize
operator|+
literal|")"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConcurrentReading
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Compression
operator|.
name|Algorithm
name|compressAlgo
range|:
name|COMPRESSION_ALGORITHMS
control|)
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|TEST_UTIL
operator|.
name|getDataTestDir
argument_list|()
argument_list|,
literal|"concurrent_reading"
argument_list|)
decl_stmt|;
name|Random
name|rand
init|=
name|defaultRandom
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|offsets
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|BlockType
argument_list|>
name|types
init|=
operator|new
name|ArrayList
argument_list|<
name|BlockType
argument_list|>
argument_list|()
decl_stmt|;
name|writeBlocks
argument_list|(
name|rand
argument_list|,
name|compressAlgo
argument_list|,
name|path
argument_list|,
name|offsets
argument_list|,
literal|null
argument_list|,
name|types
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|FSDataInputStream
name|is
init|=
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|long
name|fileSize
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|HFileBlock
operator|.
name|FSReader
name|hbr
init|=
operator|new
name|HFileBlock
operator|.
name|FSReaderV2
argument_list|(
name|is
argument_list|,
name|compressAlgo
argument_list|,
name|fileSize
argument_list|)
decl_stmt|;
name|Executor
name|exec
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|NUM_READER_THREADS
argument_list|)
decl_stmt|;
name|ExecutorCompletionService
argument_list|<
name|Boolean
argument_list|>
name|ecs
init|=
operator|new
name|ExecutorCompletionService
argument_list|<
name|Boolean
argument_list|>
argument_list|(
name|exec
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_READER_THREADS
condition|;
operator|++
name|i
control|)
block|{
name|ecs
operator|.
name|submit
argument_list|(
operator|new
name|BlockReaderThread
argument_list|(
literal|"reader_"
operator|+
call|(
name|char
call|)
argument_list|(
literal|'A'
operator|+
name|i
argument_list|)
argument_list|,
name|hbr
argument_list|,
name|offsets
argument_list|,
name|types
argument_list|,
name|fileSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_READER_THREADS
condition|;
operator|++
name|i
control|)
block|{
name|Future
argument_list|<
name|Boolean
argument_list|>
name|result
init|=
name|ecs
operator|.
name|take
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|detailedLogging
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|+
literal|" reader threads finished successfully (algo="
operator|+
name|compressAlgo
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|long
name|writeBlocks
parameter_list|(
name|Random
name|rand
parameter_list|,
name|Compression
operator|.
name|Algorithm
name|compressAlgo
parameter_list|,
name|Path
name|path
parameter_list|,
name|List
argument_list|<
name|Long
argument_list|>
name|expectedOffsets
parameter_list|,
name|List
argument_list|<
name|Long
argument_list|>
name|expectedPrevOffsets
parameter_list|,
name|List
argument_list|<
name|BlockType
argument_list|>
name|expectedTypes
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|expectedContents
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|cacheOnWrite
init|=
name|expectedContents
operator|!=
literal|null
decl_stmt|;
name|FSDataOutputStream
name|os
init|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|HFileBlock
operator|.
name|Writer
name|hbw
init|=
operator|new
name|HFileBlock
operator|.
name|Writer
argument_list|(
name|compressAlgo
argument_list|,
literal|null
argument_list|,
name|includesMemstoreTS
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|BlockType
argument_list|,
name|Long
argument_list|>
name|prevOffsetByType
init|=
operator|new
name|HashMap
argument_list|<
name|BlockType
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|long
name|totalSize
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_TEST_BLOCKS
condition|;
operator|++
name|i
control|)
block|{
name|int
name|blockTypeOrdinal
init|=
name|rand
operator|.
name|nextInt
argument_list|(
name|BlockType
operator|.
name|values
argument_list|()
operator|.
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|blockTypeOrdinal
operator|==
name|BlockType
operator|.
name|ENCODED_DATA
operator|.
name|ordinal
argument_list|()
condition|)
block|{
name|blockTypeOrdinal
operator|=
name|BlockType
operator|.
name|DATA
operator|.
name|ordinal
argument_list|()
expr_stmt|;
block|}
name|BlockType
name|bt
init|=
name|BlockType
operator|.
name|values
argument_list|()
index|[
name|blockTypeOrdinal
index|]
decl_stmt|;
name|DataOutputStream
name|dos
init|=
name|hbw
operator|.
name|startWriting
argument_list|(
name|bt
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|rand
operator|.
name|nextInt
argument_list|(
literal|500
argument_list|)
condition|;
operator|++
name|j
control|)
block|{
comment|// This might compress well.
name|dos
operator|.
name|writeShort
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|dos
operator|.
name|writeInt
argument_list|(
name|j
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|expectedOffsets
operator|!=
literal|null
condition|)
name|expectedOffsets
operator|.
name|add
argument_list|(
name|os
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedPrevOffsets
operator|!=
literal|null
condition|)
block|{
name|Long
name|prevOffset
init|=
name|prevOffsetByType
operator|.
name|get
argument_list|(
name|bt
argument_list|)
decl_stmt|;
name|expectedPrevOffsets
operator|.
name|add
argument_list|(
name|prevOffset
operator|!=
literal|null
condition|?
name|prevOffset
else|:
operator|-
literal|1
argument_list|)
expr_stmt|;
name|prevOffsetByType
operator|.
name|put
argument_list|(
name|bt
argument_list|,
name|os
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|expectedTypes
operator|.
name|add
argument_list|(
name|bt
argument_list|)
expr_stmt|;
name|hbw
operator|.
name|writeHeaderAndData
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|totalSize
operator|+=
name|hbw
operator|.
name|getOnDiskSizeWithHeader
argument_list|()
expr_stmt|;
if|if
condition|(
name|cacheOnWrite
condition|)
name|expectedContents
operator|.
name|add
argument_list|(
name|hbw
operator|.
name|getUncompressedBufferWithHeader
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|detailedLogging
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Writing block #"
operator|+
name|i
operator|+
literal|" of type "
operator|+
name|bt
operator|+
literal|", uncompressed size "
operator|+
name|hbw
operator|.
name|getUncompressedSizeWithoutHeader
argument_list|()
operator|+
literal|" at offset "
operator|+
name|os
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created a temporary file at "
operator|+
name|path
operator|+
literal|", "
operator|+
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|getLen
argument_list|()
operator|+
literal|" byte, compression="
operator|+
name|compressAlgo
argument_list|)
expr_stmt|;
return|return
name|totalSize
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBlockHeapSize
parameter_list|()
block|{
if|if
condition|(
name|ClassSize
operator|.
name|is32BitJVM
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
name|HFileBlock
operator|.
name|BYTE_BUFFER_HEAP_SIZE
operator|==
literal|64
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|HFileBlock
operator|.
name|BYTE_BUFFER_HEAP_SIZE
operator|==
literal|80
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|size
range|:
operator|new
name|int
index|[]
block|{
literal|100
block|,
literal|256
block|,
literal|12345
block|}
control|)
block|{
name|byte
index|[]
name|byteArr
init|=
operator|new
name|byte
index|[
name|HFileBlock
operator|.
name|HEADER_SIZE
operator|+
name|size
index|]
decl_stmt|;
name|ByteBuffer
name|buf
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|byteArr
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|HFileBlock
name|block
init|=
operator|new
name|HFileBlock
argument_list|(
name|BlockType
operator|.
name|DATA
argument_list|,
name|size
argument_list|,
name|size
argument_list|,
operator|-
literal|1
argument_list|,
name|buf
argument_list|,
name|HFileBlock
operator|.
name|FILL_HEADER
argument_list|,
operator|-
literal|1
argument_list|,
name|includesMemstoreTS
argument_list|)
decl_stmt|;
name|long
name|byteBufferExpectedSize
init|=
name|ClassSize
operator|.
name|align
argument_list|(
name|ClassSize
operator|.
name|estimateBase
argument_list|(
name|buf
operator|.
name|getClass
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|+
name|HFileBlock
operator|.
name|HEADER_SIZE
operator|+
name|size
argument_list|)
decl_stmt|;
name|long
name|hfileBlockExpectedSize
init|=
name|ClassSize
operator|.
name|align
argument_list|(
name|ClassSize
operator|.
name|estimateBase
argument_list|(
name|HFileBlock
operator|.
name|class
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|expected
init|=
name|hfileBlockExpectedSize
operator|+
name|byteBufferExpectedSize
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Block data size: "
operator|+
name|size
operator|+
literal|", byte buffer expected "
operator|+
literal|"size: "
operator|+
name|byteBufferExpectedSize
operator|+
literal|", HFileBlock class expected "
operator|+
literal|"size: "
operator|+
name|hfileBlockExpectedSize
operator|+
literal|";"
argument_list|,
name|expected
argument_list|,
name|block
operator|.
name|heapSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Rule
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ResourceCheckerJUnitRule
name|cu
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ResourceCheckerJUnitRule
argument_list|()
decl_stmt|;
block|}
end_class

end_unit

