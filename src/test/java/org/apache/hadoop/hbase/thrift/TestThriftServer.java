begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2009 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClusterTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|BatchMutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|ColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|Mutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|TCell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|TRowResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * Unit testing for ThriftServer.HBaseHandler, a part of the  * org.apache.hadoop.hbase.thrift package.  */
end_comment

begin_class
specifier|public
class|class
name|TestThriftServer
extends|extends
name|HBaseClusterTestCase
block|{
comment|// Static names for tables, columns, rows, and values
specifier|private
specifier|static
name|byte
index|[]
name|tableAname
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"tableA"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|tableBname
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"tableB"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|columnAname
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"columnA:"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|columnBname
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"columnB:"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|rowAname
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowA"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|rowBname
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowB"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|valueAname
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"valueA"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|valueBname
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"valueB"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|valueCname
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"valueC"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|valueDname
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"valueD"
argument_list|)
decl_stmt|;
comment|/**    * Runs all of the tests under a single JUnit test method.  We    * consolidate all testing to one method because HBaseClusterTestCase    * is prone to OutOfMemoryExceptions when there are three or more    * JUnit test methods.    *    * @throws Exception    */
specifier|public
name|void
name|testAll
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Run all tests
name|doTestTableCreateDrop
argument_list|()
expr_stmt|;
name|doTestTableMutations
argument_list|()
expr_stmt|;
name|doTestTableTimestampsAndColumns
argument_list|()
expr_stmt|;
name|doTestTableScanners
argument_list|()
expr_stmt|;
block|}
comment|/**    * Tests for creating, enabling, disabling, and deleting tables.  Also    * tests that creating a table with an invalid column name yields an    * IllegalArgument exception.    *    * @throws Exception    */
specifier|public
name|void
name|doTestTableCreateDrop
parameter_list|()
throws|throws
name|Exception
block|{
name|ThriftServer
operator|.
name|HBaseHandler
name|handler
init|=
operator|new
name|ThriftServer
operator|.
name|HBaseHandler
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
comment|// Create/enable/disable/delete tables, ensure methods act correctly
name|assertEquals
argument_list|(
name|handler
operator|.
name|getTableNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|handler
operator|.
name|createTable
argument_list|(
name|tableAname
argument_list|,
name|getColumnDescriptors
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|handler
operator|.
name|getTableNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|handler
operator|.
name|getColumnDescriptors
argument_list|(
name|tableAname
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|handler
operator|.
name|isTableEnabled
argument_list|(
name|tableAname
argument_list|)
argument_list|)
expr_stmt|;
name|handler
operator|.
name|createTable
argument_list|(
name|tableBname
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ColumnDescriptor
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|handler
operator|.
name|getTableNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|handler
operator|.
name|disableTable
argument_list|(
name|tableBname
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|handler
operator|.
name|isTableEnabled
argument_list|(
name|tableBname
argument_list|)
argument_list|)
expr_stmt|;
name|handler
operator|.
name|deleteTable
argument_list|(
name|tableBname
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|handler
operator|.
name|getTableNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|handler
operator|.
name|disableTable
argument_list|(
name|tableAname
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|handler
operator|.
name|isTableEnabled
argument_list|(
name|tableAname
argument_list|)
argument_list|)
expr_stmt|;
name|handler
operator|.
name|enableTable
argument_list|(
name|tableAname
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|handler
operator|.
name|isTableEnabled
argument_list|(
name|tableAname
argument_list|)
argument_list|)
expr_stmt|;
name|handler
operator|.
name|disableTable
argument_list|(
name|tableAname
argument_list|)
expr_stmt|;
name|handler
operator|.
name|deleteTable
argument_list|(
name|tableAname
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests adding a series of Mutations and BatchMutations, including a    * delete mutation.  Also tests data retrieval, and getting back multiple    * versions.    *    * @throws Exception    */
specifier|public
name|void
name|doTestTableMutations
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Setup
name|ThriftServer
operator|.
name|HBaseHandler
name|handler
init|=
operator|new
name|ThriftServer
operator|.
name|HBaseHandler
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
name|handler
operator|.
name|createTable
argument_list|(
name|tableAname
argument_list|,
name|getColumnDescriptors
argument_list|()
argument_list|)
expr_stmt|;
comment|// Apply a few Mutations to rowA
comment|//     mutations.add(new Mutation(false, columnAname, valueAname));
comment|//     mutations.add(new Mutation(false, columnBname, valueBname));
name|handler
operator|.
name|mutateRow
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
name|getMutations
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assert that the changes were made
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|valueAname
argument_list|,
name|handler
operator|.
name|get
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
name|columnAname
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|TRowResult
name|rowResult1
init|=
name|handler
operator|.
name|getRow
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|rowAname
argument_list|,
name|rowResult1
operator|.
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|valueBname
argument_list|,
name|rowResult1
operator|.
name|columns
operator|.
name|get
argument_list|(
name|columnBname
argument_list|)
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
comment|// Apply a few BatchMutations for rowA and rowB
comment|// rowAmutations.add(new Mutation(true, columnAname, null));
comment|// rowAmutations.add(new Mutation(false, columnBname, valueCname));
comment|// batchMutations.add(new BatchMutation(rowAname, rowAmutations));
comment|// Mutations to rowB
comment|// rowBmutations.add(new Mutation(false, columnAname, valueCname));
comment|// rowBmutations.add(new Mutation(false, columnBname, valueDname));
comment|// batchMutations.add(new BatchMutation(rowBname, rowBmutations));
name|handler
operator|.
name|mutateRows
argument_list|(
name|tableAname
argument_list|,
name|getBatchMutations
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assert that changes were made to rowA
name|List
argument_list|<
name|TCell
argument_list|>
name|cells
init|=
name|handler
operator|.
name|get
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
name|columnAname
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|cells
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|valueCname
argument_list|,
name|handler
operator|.
name|get
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
name|columnBname
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TCell
argument_list|>
name|versions
init|=
name|handler
operator|.
name|getVer
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
name|columnBname
argument_list|,
name|MAXVERSIONS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|valueCname
argument_list|,
name|versions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|valueBname
argument_list|,
name|versions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
comment|// Assert that changes were made to rowB
name|TRowResult
name|rowResult2
init|=
name|handler
operator|.
name|getRow
argument_list|(
name|tableAname
argument_list|,
name|rowBname
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|rowBname
argument_list|,
name|rowResult2
operator|.
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|valueCname
argument_list|,
name|rowResult2
operator|.
name|columns
operator|.
name|get
argument_list|(
name|columnAname
argument_list|)
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|valueDname
argument_list|,
name|rowResult2
operator|.
name|columns
operator|.
name|get
argument_list|(
name|columnBname
argument_list|)
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
comment|// Apply some deletes
name|handler
operator|.
name|deleteAll
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
name|columnBname
argument_list|)
expr_stmt|;
name|handler
operator|.
name|deleteAllRow
argument_list|(
name|tableAname
argument_list|,
name|rowBname
argument_list|)
expr_stmt|;
comment|// Assert that the deletes were applied
name|int
name|size
init|=
name|handler
operator|.
name|get
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
name|columnBname
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|size
operator|=
name|handler
operator|.
name|getRow
argument_list|(
name|tableAname
argument_list|,
name|rowBname
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
comment|// Teardown
name|handler
operator|.
name|disableTable
argument_list|(
name|tableAname
argument_list|)
expr_stmt|;
name|handler
operator|.
name|deleteTable
argument_list|(
name|tableAname
argument_list|)
expr_stmt|;
block|}
comment|/**    * Similar to testTableMutations(), except Mutations are applied with    * specific timestamps and data retrieval uses these timestamps to    * extract specific versions of data.    *    * @throws Exception    */
specifier|public
name|void
name|doTestTableTimestampsAndColumns
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Setup
name|ThriftServer
operator|.
name|HBaseHandler
name|handler
init|=
operator|new
name|ThriftServer
operator|.
name|HBaseHandler
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
name|handler
operator|.
name|createTable
argument_list|(
name|tableAname
argument_list|,
name|getColumnDescriptors
argument_list|()
argument_list|)
expr_stmt|;
comment|// Apply timestamped Mutations to rowA
name|long
name|time1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|handler
operator|.
name|mutateRowTs
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
name|getMutations
argument_list|()
argument_list|,
name|time1
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// Apply timestamped BatchMutations for rowA and rowB
name|long
name|time2
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|handler
operator|.
name|mutateRowsTs
argument_list|(
name|tableAname
argument_list|,
name|getBatchMutations
argument_list|()
argument_list|,
name|time2
argument_list|)
expr_stmt|;
comment|// Apply an overlapping timestamped mutation to rowB
name|handler
operator|.
name|mutateRowTs
argument_list|(
name|tableAname
argument_list|,
name|rowBname
argument_list|,
name|getMutations
argument_list|()
argument_list|,
name|time2
argument_list|)
expr_stmt|;
comment|// the getVerTs is [inf, ts) so you need to increment one.
name|time1
operator|+=
literal|1
expr_stmt|;
name|time2
operator|+=
literal|2
expr_stmt|;
comment|// Assert that the timestamp-related methods retrieve the correct data
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|handler
operator|.
name|getVerTs
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
name|columnBname
argument_list|,
name|time2
argument_list|,
name|MAXVERSIONS
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|handler
operator|.
name|getVerTs
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
name|columnBname
argument_list|,
name|time1
argument_list|,
name|MAXVERSIONS
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|TRowResult
name|rowResult1
init|=
name|handler
operator|.
name|getRowTs
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
name|time1
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|TRowResult
name|rowResult2
init|=
name|handler
operator|.
name|getRowTs
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
name|time2
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// columnA was completely deleted
comment|//assertTrue(Bytes.equals(rowResult1.columns.get(columnAname).value, valueAname));
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|rowResult1
operator|.
name|columns
operator|.
name|get
argument_list|(
name|columnBname
argument_list|)
operator|.
name|value
argument_list|,
name|valueBname
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|rowResult2
operator|.
name|columns
operator|.
name|get
argument_list|(
name|columnBname
argument_list|)
operator|.
name|value
argument_list|,
name|valueCname
argument_list|)
argument_list|)
expr_stmt|;
comment|// ColumnAname has been deleted, and will never be visible even with a getRowTs()
name|assertFalse
argument_list|(
name|rowResult2
operator|.
name|columns
operator|.
name|containsKey
argument_list|(
name|columnAname
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|columns
operator|.
name|add
argument_list|(
name|columnBname
argument_list|)
expr_stmt|;
name|rowResult1
operator|=
name|handler
operator|.
name|getRowWithColumns
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
name|columns
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|rowResult1
operator|.
name|columns
operator|.
name|get
argument_list|(
name|columnBname
argument_list|)
operator|.
name|value
argument_list|,
name|valueCname
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rowResult1
operator|.
name|columns
operator|.
name|containsKey
argument_list|(
name|columnAname
argument_list|)
argument_list|)
expr_stmt|;
name|rowResult1
operator|=
name|handler
operator|.
name|getRowWithColumnsTs
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
name|columns
argument_list|,
name|time1
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|rowResult1
operator|.
name|columns
operator|.
name|get
argument_list|(
name|columnBname
argument_list|)
operator|.
name|value
argument_list|,
name|valueBname
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rowResult1
operator|.
name|columns
operator|.
name|containsKey
argument_list|(
name|columnAname
argument_list|)
argument_list|)
expr_stmt|;
comment|// Apply some timestamped deletes
comment|// this actually deletes _everything_.
comment|// nukes everything in columnB: forever.
name|handler
operator|.
name|deleteAllTs
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
name|columnBname
argument_list|,
name|time1
argument_list|)
expr_stmt|;
name|handler
operator|.
name|deleteAllRowTs
argument_list|(
name|tableAname
argument_list|,
name|rowBname
argument_list|,
name|time2
argument_list|)
expr_stmt|;
comment|// Assert that the timestamp-related methods retrieve the correct data
name|int
name|size
init|=
name|handler
operator|.
name|getVerTs
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
name|columnBname
argument_list|,
name|time1
argument_list|,
name|MAXVERSIONS
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|size
operator|=
name|handler
operator|.
name|getVerTs
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
name|columnBname
argument_list|,
name|time2
argument_list|,
name|MAXVERSIONS
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|size
argument_list|)
expr_stmt|;
comment|// should be available....
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|handler
operator|.
name|get
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
name|columnBname
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|,
name|valueCname
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|handler
operator|.
name|getRow
argument_list|(
name|tableAname
argument_list|,
name|rowBname
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Teardown
name|handler
operator|.
name|disableTable
argument_list|(
name|tableAname
argument_list|)
expr_stmt|;
name|handler
operator|.
name|deleteTable
argument_list|(
name|tableAname
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests the four different scanner-opening methods (with and without    * a stoprow, with and without a timestamp).    *    * @throws Exception    */
specifier|public
name|void
name|doTestTableScanners
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Setup
name|ThriftServer
operator|.
name|HBaseHandler
name|handler
init|=
operator|new
name|ThriftServer
operator|.
name|HBaseHandler
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
name|handler
operator|.
name|createTable
argument_list|(
name|tableAname
argument_list|,
name|getColumnDescriptors
argument_list|()
argument_list|)
expr_stmt|;
comment|// Apply timestamped Mutations to rowA
name|long
name|time1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|handler
operator|.
name|mutateRowTs
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
name|getMutations
argument_list|()
argument_list|,
name|time1
argument_list|)
expr_stmt|;
comment|// Sleep to assure that 'time1' and 'time2' will be different even with a
comment|// coarse grained system timer.
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// Apply timestamped BatchMutations for rowA and rowB
name|long
name|time2
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|handler
operator|.
name|mutateRowsTs
argument_list|(
name|tableAname
argument_list|,
name|getBatchMutations
argument_list|()
argument_list|,
name|time2
argument_list|)
expr_stmt|;
name|time1
operator|+=
literal|1
expr_stmt|;
comment|// Test a scanner on all rows and all columns, no timestamp
name|int
name|scanner1
init|=
name|handler
operator|.
name|scannerOpen
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
name|getColumnList
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|TRowResult
name|rowResult1a
init|=
name|handler
operator|.
name|scannerGet
argument_list|(
name|scanner1
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|rowResult1a
operator|.
name|row
argument_list|,
name|rowAname
argument_list|)
argument_list|)
expr_stmt|;
comment|// This used to be '1'.  I don't know why when we are asking for two columns
comment|// and when the mutations above would seem to add two columns to the row.
comment|// -- St.Ack 05/12/2009
name|assertEquals
argument_list|(
name|rowResult1a
operator|.
name|columns
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|rowResult1a
operator|.
name|columns
operator|.
name|get
argument_list|(
name|columnBname
argument_list|)
operator|.
name|value
argument_list|,
name|valueCname
argument_list|)
argument_list|)
expr_stmt|;
name|TRowResult
name|rowResult1b
init|=
name|handler
operator|.
name|scannerGet
argument_list|(
name|scanner1
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|rowResult1b
operator|.
name|row
argument_list|,
name|rowBname
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rowResult1b
operator|.
name|columns
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|rowResult1b
operator|.
name|columns
operator|.
name|get
argument_list|(
name|columnAname
argument_list|)
operator|.
name|value
argument_list|,
name|valueCname
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|rowResult1b
operator|.
name|columns
operator|.
name|get
argument_list|(
name|columnBname
argument_list|)
operator|.
name|value
argument_list|,
name|valueDname
argument_list|)
argument_list|)
expr_stmt|;
name|closeScanner
argument_list|(
name|scanner1
argument_list|,
name|handler
argument_list|)
expr_stmt|;
comment|// Test a scanner on all rows and all columns, with timestamp
name|int
name|scanner2
init|=
name|handler
operator|.
name|scannerOpenTs
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
name|getColumnList
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|,
name|time1
argument_list|)
decl_stmt|;
name|TRowResult
name|rowResult2a
init|=
name|handler
operator|.
name|scannerGet
argument_list|(
name|scanner2
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|rowResult2a
operator|.
name|columns
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// column A deleted, does not exist.
comment|//assertTrue(Bytes.equals(rowResult2a.columns.get(columnAname).value, valueAname));
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|rowResult2a
operator|.
name|columns
operator|.
name|get
argument_list|(
name|columnBname
argument_list|)
operator|.
name|value
argument_list|,
name|valueBname
argument_list|)
argument_list|)
expr_stmt|;
name|closeScanner
argument_list|(
name|scanner2
argument_list|,
name|handler
argument_list|)
expr_stmt|;
comment|// Test a scanner on the first row and first column only, no timestamp
name|int
name|scanner3
init|=
name|handler
operator|.
name|scannerOpenWithStop
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
name|rowBname
argument_list|,
name|getColumnList
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|closeScanner
argument_list|(
name|scanner3
argument_list|,
name|handler
argument_list|)
expr_stmt|;
comment|// Test a scanner on the first row and second column only, with timestamp
name|int
name|scanner4
init|=
name|handler
operator|.
name|scannerOpenWithStopTs
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
name|rowBname
argument_list|,
name|getColumnList
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|,
name|time1
argument_list|)
decl_stmt|;
name|TRowResult
name|rowResult4a
init|=
name|handler
operator|.
name|scannerGet
argument_list|(
name|scanner4
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|rowResult4a
operator|.
name|columns
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|rowResult4a
operator|.
name|columns
operator|.
name|get
argument_list|(
name|columnBname
argument_list|)
operator|.
name|value
argument_list|,
name|valueBname
argument_list|)
argument_list|)
expr_stmt|;
comment|// Teardown
name|handler
operator|.
name|disableTable
argument_list|(
name|tableAname
argument_list|)
expr_stmt|;
name|handler
operator|.
name|deleteTable
argument_list|(
name|tableAname
argument_list|)
expr_stmt|;
block|}
comment|/**    *    * @return a List of ColumnDescriptors for use in creating a table.  Has one    * default ColumnDescriptor and one ColumnDescriptor with fewer versions    */
specifier|private
name|List
argument_list|<
name|ColumnDescriptor
argument_list|>
name|getColumnDescriptors
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|ColumnDescriptor
argument_list|>
name|cDescriptors
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnDescriptor
argument_list|>
argument_list|()
decl_stmt|;
comment|// A default ColumnDescriptor
name|ColumnDescriptor
name|cDescA
init|=
operator|new
name|ColumnDescriptor
argument_list|()
decl_stmt|;
name|cDescA
operator|.
name|name
operator|=
name|columnAname
expr_stmt|;
name|cDescriptors
operator|.
name|add
argument_list|(
name|cDescA
argument_list|)
expr_stmt|;
comment|// A slightly customized ColumnDescriptor (only 2 versions)
name|ColumnDescriptor
name|cDescB
init|=
operator|new
name|ColumnDescriptor
argument_list|(
name|columnBname
argument_list|,
literal|2
argument_list|,
literal|"NONE"
argument_list|,
literal|false
argument_list|,
literal|"NONE"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|cDescriptors
operator|.
name|add
argument_list|(
name|cDescB
argument_list|)
expr_stmt|;
return|return
name|cDescriptors
return|;
block|}
comment|/**    *    * @param includeA whether or not to include columnA    * @param includeB whether or not to include columnB    * @return a List of column names for use in retrieving a scanner    */
specifier|private
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|getColumnList
parameter_list|(
name|boolean
name|includeA
parameter_list|,
name|boolean
name|includeB
parameter_list|)
block|{
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|columnList
init|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|includeA
condition|)
name|columnList
operator|.
name|add
argument_list|(
name|columnAname
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeB
condition|)
name|columnList
operator|.
name|add
argument_list|(
name|columnBname
argument_list|)
expr_stmt|;
return|return
name|columnList
return|;
block|}
comment|/**    *    * @return a List of Mutations for a row, with columnA having valueA    * and columnB having valueB    */
specifier|private
name|List
argument_list|<
name|Mutation
argument_list|>
name|getMutations
parameter_list|()
block|{
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
init|=
operator|new
name|ArrayList
argument_list|<
name|Mutation
argument_list|>
argument_list|()
decl_stmt|;
name|mutations
operator|.
name|add
argument_list|(
operator|new
name|Mutation
argument_list|(
literal|false
argument_list|,
name|columnAname
argument_list|,
name|valueAname
argument_list|)
argument_list|)
expr_stmt|;
name|mutations
operator|.
name|add
argument_list|(
operator|new
name|Mutation
argument_list|(
literal|false
argument_list|,
name|columnBname
argument_list|,
name|valueBname
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|mutations
return|;
block|}
comment|/**    *    * @return a List of BatchMutations with the following effects:    * (rowA, columnA): delete    * (rowA, columnB): place valueC    * (rowB, columnA): place valueC    * (rowB, columnB): place valueD    */
specifier|private
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|getBatchMutations
parameter_list|()
block|{
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|batchMutations
init|=
operator|new
name|ArrayList
argument_list|<
name|BatchMutation
argument_list|>
argument_list|()
decl_stmt|;
comment|// Mutations to rowA.  You can't mix delete and put anymore.
name|List
argument_list|<
name|Mutation
argument_list|>
name|rowAmutations
init|=
operator|new
name|ArrayList
argument_list|<
name|Mutation
argument_list|>
argument_list|()
decl_stmt|;
name|rowAmutations
operator|.
name|add
argument_list|(
operator|new
name|Mutation
argument_list|(
literal|true
argument_list|,
name|columnAname
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|batchMutations
operator|.
name|add
argument_list|(
operator|new
name|BatchMutation
argument_list|(
name|rowAname
argument_list|,
name|rowAmutations
argument_list|)
argument_list|)
expr_stmt|;
name|rowAmutations
operator|=
operator|new
name|ArrayList
argument_list|<
name|Mutation
argument_list|>
argument_list|()
expr_stmt|;
name|rowAmutations
operator|.
name|add
argument_list|(
operator|new
name|Mutation
argument_list|(
literal|false
argument_list|,
name|columnBname
argument_list|,
name|valueCname
argument_list|)
argument_list|)
expr_stmt|;
name|batchMutations
operator|.
name|add
argument_list|(
operator|new
name|BatchMutation
argument_list|(
name|rowAname
argument_list|,
name|rowAmutations
argument_list|)
argument_list|)
expr_stmt|;
comment|// Mutations to rowB
name|List
argument_list|<
name|Mutation
argument_list|>
name|rowBmutations
init|=
operator|new
name|ArrayList
argument_list|<
name|Mutation
argument_list|>
argument_list|()
decl_stmt|;
name|rowBmutations
operator|.
name|add
argument_list|(
operator|new
name|Mutation
argument_list|(
literal|false
argument_list|,
name|columnAname
argument_list|,
name|valueCname
argument_list|)
argument_list|)
expr_stmt|;
name|rowBmutations
operator|.
name|add
argument_list|(
operator|new
name|Mutation
argument_list|(
literal|false
argument_list|,
name|columnBname
argument_list|,
name|valueDname
argument_list|)
argument_list|)
expr_stmt|;
name|batchMutations
operator|.
name|add
argument_list|(
operator|new
name|BatchMutation
argument_list|(
name|rowBname
argument_list|,
name|rowBmutations
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|batchMutations
return|;
block|}
comment|/**    * Asserts that the passed scanner is exhausted, and then closes    * the scanner.    *    * @param scannerId the scanner to close    * @param handler the HBaseHandler interfacing to HBase    * @throws Exception    */
specifier|private
name|void
name|closeScanner
parameter_list|(
name|int
name|scannerId
parameter_list|,
name|ThriftServer
operator|.
name|HBaseHandler
name|handler
parameter_list|)
throws|throws
name|Exception
block|{
name|handler
operator|.
name|scannerGet
argument_list|(
name|scannerId
argument_list|)
expr_stmt|;
name|handler
operator|.
name|scannerClose
argument_list|(
name|scannerId
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

