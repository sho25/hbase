begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|HMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|MiniZooKeeperCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|MediumTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestLocalHBaseCluster
block|{
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
comment|/**    * Check that we can start a local HBase cluster specifying a custom master    * and regionserver class and then cast back to those classes; also that    * the cluster will launch and terminate cleanly. See HBASE-6011.    */
annotation|@
name|Test
specifier|public
name|void
name|testLocalHBaseCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|MiniZooKeeperCluster
name|zkCluster
init|=
name|TEST_UTIL
operator|.
name|startMiniZKCluster
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_CLIENT_PORT
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|zkCluster
operator|.
name|getClientPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LocalHBaseCluster
name|cluster
init|=
operator|new
name|LocalHBaseCluster
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|MyHMaster
operator|.
name|class
argument_list|,
name|MyHRegionServer
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Can we cast back to our master class?
try|try
block|{
operator|(
operator|(
name|MyHMaster
operator|)
name|cluster
operator|.
name|getMaster
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|setZKCluster
argument_list|(
name|zkCluster
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Could not cast master to our class"
argument_list|)
expr_stmt|;
block|}
comment|// Can we cast back to our regionserver class?
try|try
block|{
operator|(
operator|(
name|MyHRegionServer
operator|)
name|cluster
operator|.
name|getRegionServer
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|echo
argument_list|(
literal|42
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Could not cast regionserver to our class"
argument_list|)
expr_stmt|;
block|}
comment|// Does the cluster start successfully?
try|try
block|{
name|cluster
operator|.
name|startup
argument_list|()
expr_stmt|;
name|waitForClusterUp
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"LocalHBaseCluster did not start successfully"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|waitForClusterUp
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|HTable
name|t
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|HConstants
operator|.
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
name|ResultScanner
name|s
init|=
name|t
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|s
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
continue|continue;
block|}
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * A private master class similar to that used by HMasterCommandLine when    * running in local mode.    */
specifier|public
specifier|static
class|class
name|MyHMaster
extends|extends
name|HMaster
block|{
specifier|private
name|MiniZooKeeperCluster
name|zkcluster
init|=
literal|null
decl_stmt|;
specifier|public
name|MyHMaster
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|KeeperException
throws|,
name|InterruptedException
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|super
operator|.
name|run
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|zkcluster
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|this
operator|.
name|zkcluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|void
name|setZKCluster
parameter_list|(
specifier|final
name|MiniZooKeeperCluster
name|zkcluster
parameter_list|)
block|{
name|this
operator|.
name|zkcluster
operator|=
name|zkcluster
expr_stmt|;
block|}
block|}
comment|/**    * A private regionserver class with a dummy method for testing casts    */
specifier|public
specifier|static
class|class
name|MyHRegionServer
extends|extends
name|HRegionServer
block|{
specifier|public
name|MyHRegionServer
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|echo
parameter_list|(
name|int
name|val
parameter_list|)
block|{
return|return
name|val
return|;
block|}
block|}
block|}
end_class

end_unit

