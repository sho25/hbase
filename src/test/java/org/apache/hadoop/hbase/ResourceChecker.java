begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2011 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|management
operator|.
name|UnixOperatingSystemMXBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|OperatingSystemMXBean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Check the resources used:  * - threads  * - file descriptor  */
end_comment

begin_class
specifier|public
class|class
name|ResourceChecker
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ResourceChecker
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * On unix, we know how to get the number of open file descriptor    */
specifier|private
specifier|static
class|class
name|ResourceAnalyzer
block|{
specifier|private
specifier|static
specifier|final
name|OperatingSystemMXBean
name|osStats
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|UnixOperatingSystemMXBean
name|unixOsStats
decl_stmt|;
specifier|public
name|long
name|getThreadsCount
parameter_list|()
block|{
return|return
name|Thread
operator|.
name|getAllStackTraces
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|long
name|getOpenFileDescriptorCount
parameter_list|()
block|{
if|if
condition|(
name|unixOsStats
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
name|unixOsStats
operator|.
name|getOpenFileDescriptorCount
argument_list|()
return|;
block|}
block|}
specifier|public
name|long
name|getMaxFileDescriptorCount
parameter_list|()
block|{
if|if
condition|(
name|unixOsStats
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
name|unixOsStats
operator|.
name|getMaxFileDescriptorCount
argument_list|()
return|;
block|}
block|}
static|static
block|{
name|osStats
operator|=
name|ManagementFactory
operator|.
name|getOperatingSystemMXBean
argument_list|()
expr_stmt|;
if|if
condition|(
name|osStats
operator|instanceof
name|UnixOperatingSystemMXBean
condition|)
block|{
name|unixOsStats
operator|=
operator|(
name|UnixOperatingSystemMXBean
operator|)
name|osStats
expr_stmt|;
block|}
else|else
block|{
name|unixOsStats
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
specifier|final
name|ResourceAnalyzer
name|rc
init|=
operator|new
name|ResourceAnalyzer
argument_list|()
decl_stmt|;
comment|/**    * Maximum we set for the thread. Will get a warning in logs    * if we go other this limit    */
specifier|private
specifier|static
specifier|final
name|long
name|MAX_THREADS_COUNT
init|=
literal|500
decl_stmt|;
comment|/**    * Maximum we set for the thread. Will get a warning in logs    * if we go other this limit    */
specifier|private
specifier|static
specifier|final
name|long
name|MAX_FILE_HANDLES_COUNT
init|=
literal|1024
decl_stmt|;
specifier|private
name|long
name|initialThreadsCount
decl_stmt|;
specifier|private
name|long
name|initialFileHandlesCount
decl_stmt|;
specifier|public
name|boolean
name|checkThreads
parameter_list|(
name|String
name|tagLine
parameter_list|)
block|{
name|boolean
name|isOk
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|rc
operator|.
name|getThreadsCount
argument_list|()
operator|>
name|MAX_THREADS_COUNT
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|tagLine
operator|+
literal|": too many threads used. We use "
operator|+
name|rc
operator|.
name|getThreadsCount
argument_list|()
operator|+
literal|" our max is "
operator|+
name|MAX_THREADS_COUNT
argument_list|)
expr_stmt|;
name|isOk
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|isOk
return|;
block|}
specifier|public
name|boolean
name|check
parameter_list|(
name|String
name|tagLine
parameter_list|)
block|{
name|boolean
name|isOk
init|=
name|checkThreads
argument_list|(
name|tagLine
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|checkFileHandles
argument_list|(
name|tagLine
argument_list|)
condition|)
name|isOk
operator|=
literal|false
expr_stmt|;
return|return
name|isOk
return|;
block|}
specifier|public
name|ResourceChecker
parameter_list|(
name|String
name|tagLine
parameter_list|)
block|{
name|init
argument_list|(
name|tagLine
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|init
parameter_list|(
name|String
name|tagLine
parameter_list|)
block|{
if|if
condition|(
name|rc
operator|.
name|getMaxFileDescriptorCount
argument_list|()
operator|<
name|MAX_FILE_HANDLES_COUNT
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Bad configuration: the operating systems file handles maximum is "
operator|+
name|rc
operator|.
name|getMaxFileDescriptorCount
argument_list|()
operator|+
literal|" our is "
operator|+
name|MAX_FILE_HANDLES_COUNT
argument_list|)
expr_stmt|;
block|}
name|logInfo
argument_list|(
name|tagLine
argument_list|)
expr_stmt|;
name|initialThreadsCount
operator|=
name|rc
operator|.
name|getThreadsCount
argument_list|()
expr_stmt|;
name|initialFileHandlesCount
operator|=
name|rc
operator|.
name|getOpenFileDescriptorCount
argument_list|()
expr_stmt|;
name|check
argument_list|(
name|tagLine
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|logInfo
parameter_list|(
name|String
name|tagLine
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|tagLine
operator|+
literal|": "
operator|+
name|rc
operator|.
name|getThreadsCount
argument_list|()
operator|+
literal|" threads"
operator|+
operator|(
name|initialThreadsCount
operator|>
literal|0
condition|?
literal|" (was "
operator|+
name|initialThreadsCount
operator|+
literal|"), "
else|:
literal|", "
operator|)
operator|+
name|rc
operator|.
name|getOpenFileDescriptorCount
argument_list|()
operator|+
literal|" file descriptors"
operator|+
operator|(
name|initialFileHandlesCount
operator|>
literal|0
condition|?
literal|" (was "
operator|+
name|initialFileHandlesCount
operator|+
literal|"). "
else|:
literal|" "
operator|)
operator|+
operator|(
name|initialThreadsCount
operator|>
literal|0
operator|&&
name|rc
operator|.
name|getThreadsCount
argument_list|()
operator|>
name|initialThreadsCount
condition|?
literal|" -thread leak?- "
else|:
literal|""
operator|)
operator|+
operator|(
name|initialFileHandlesCount
operator|>
literal|0
operator|&&
name|rc
operator|.
name|getOpenFileDescriptorCount
argument_list|()
operator|>
name|initialFileHandlesCount
condition|?
literal|" -file handle leak?- "
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|checkFileHandles
parameter_list|(
name|String
name|tagLine
parameter_list|)
block|{
name|boolean
name|isOk
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|rc
operator|.
name|getOpenFileDescriptorCount
argument_list|()
operator|>
name|MAX_FILE_HANDLES_COUNT
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|tagLine
operator|+
literal|": too many file handles used. We use "
operator|+
name|rc
operator|.
name|getOpenFileDescriptorCount
argument_list|()
operator|+
literal|" our max is "
operator|+
name|MAX_FILE_HANDLES_COUNT
argument_list|)
expr_stmt|;
name|isOk
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|isOk
return|;
block|}
comment|/**    * Helper function: print the threads    */
specifier|public
specifier|static
name|void
name|printThreads
parameter_list|()
block|{
name|Set
argument_list|<
name|Thread
argument_list|>
name|threads
init|=
name|Thread
operator|.
name|getAllStackTraces
argument_list|()
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"name; state; isDameon; isAlive; isInterrupted"
argument_list|)
expr_stmt|;
for|for
control|(
name|Thread
name|t
range|:
name|threads
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|t
operator|.
name|getName
argument_list|()
operator|+
literal|";"
operator|+
name|t
operator|.
name|getState
argument_list|()
operator|+
literal|";"
operator|+
name|t
operator|.
name|isDaemon
argument_list|()
operator|+
literal|";"
operator|+
name|t
operator|.
name|isAlive
argument_list|()
operator|+
literal|";"
operator|+
name|t
operator|.
name|isInterrupted
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

