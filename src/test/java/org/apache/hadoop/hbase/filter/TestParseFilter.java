begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2011 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|InternalScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * This class tests ParseFilter.java  * It tests the entire work flow from when a string is given by the user  * and how it is parsed to construct the corresponding Filter object  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestParseFilter
block|{
name|ParseFilter
name|f
decl_stmt|;
name|Filter
name|filter
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|f
operator|=
operator|new
name|ParseFilter
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Nothing to do.
block|}
annotation|@
name|Test
specifier|public
name|void
name|testKeyOnlyFilter
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|filterString
init|=
literal|"KeyOnlyFilter()"
decl_stmt|;
name|doTestFilter
argument_list|(
name|filterString
argument_list|,
name|KeyOnlyFilter
operator|.
name|class
argument_list|)
expr_stmt|;
name|String
name|filterString2
init|=
literal|"KeyOnlyFilter ('') "
decl_stmt|;
name|byte
index|[]
name|filterStringAsByteArray2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|filterString2
argument_list|)
decl_stmt|;
try|try
block|{
name|filter
operator|=
name|f
operator|.
name|parseFilterString
argument_list|(
name|filterStringAsByteArray2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFirstKeyOnlyFilter
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|filterString
init|=
literal|" FirstKeyOnlyFilter( ) "
decl_stmt|;
name|doTestFilter
argument_list|(
name|filterString
argument_list|,
name|FirstKeyOnlyFilter
operator|.
name|class
argument_list|)
expr_stmt|;
name|String
name|filterString2
init|=
literal|" FirstKeyOnlyFilter ('') "
decl_stmt|;
name|byte
index|[]
name|filterStringAsByteArray2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|filterString2
argument_list|)
decl_stmt|;
try|try
block|{
name|filter
operator|=
name|f
operator|.
name|parseFilterString
argument_list|(
name|filterStringAsByteArray2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrefixFilter
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|filterString
init|=
literal|" PrefixFilter('row' ) "
decl_stmt|;
name|PrefixFilter
name|prefixFilter
init|=
name|doTestFilter
argument_list|(
name|filterString
argument_list|,
name|PrefixFilter
operator|.
name|class
argument_list|)
decl_stmt|;
name|byte
index|[]
name|prefix
init|=
name|prefixFilter
operator|.
name|getPrefix
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|String
argument_list|(
name|prefix
argument_list|)
argument_list|,
literal|"row"
argument_list|)
expr_stmt|;
name|filterString
operator|=
literal|" PrefixFilter(row)"
expr_stmt|;
try|try
block|{
name|doTestFilter
argument_list|(
name|filterString
argument_list|,
name|PrefixFilter
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColumnPrefixFilter
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|filterString
init|=
literal|" ColumnPrefixFilter('qualifier' ) "
decl_stmt|;
name|ColumnPrefixFilter
name|columnPrefixFilter
init|=
name|doTestFilter
argument_list|(
name|filterString
argument_list|,
name|ColumnPrefixFilter
operator|.
name|class
argument_list|)
decl_stmt|;
name|byte
index|[]
name|columnPrefix
init|=
name|columnPrefixFilter
operator|.
name|getPrefix
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|String
argument_list|(
name|columnPrefix
argument_list|)
argument_list|,
literal|"qualifier"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultipleColumnPrefixFilter
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|filterString
init|=
literal|" MultipleColumnPrefixFilter('qualifier1', 'qualifier2' ) "
decl_stmt|;
name|MultipleColumnPrefixFilter
name|multipleColumnPrefixFilter
init|=
name|doTestFilter
argument_list|(
name|filterString
argument_list|,
name|MultipleColumnPrefixFilter
operator|.
name|class
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|prefixes
init|=
name|multipleColumnPrefixFilter
operator|.
name|getPrefix
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|String
argument_list|(
name|prefixes
index|[
literal|0
index|]
argument_list|)
argument_list|,
literal|"qualifier1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|String
argument_list|(
name|prefixes
index|[
literal|1
index|]
argument_list|)
argument_list|,
literal|"qualifier2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColumnCountGetFilter
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|filterString
init|=
literal|" ColumnCountGetFilter(4)"
decl_stmt|;
name|ColumnCountGetFilter
name|columnCountGetFilter
init|=
name|doTestFilter
argument_list|(
name|filterString
argument_list|,
name|ColumnCountGetFilter
operator|.
name|class
argument_list|)
decl_stmt|;
name|int
name|limit
init|=
name|columnCountGetFilter
operator|.
name|getLimit
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|limit
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|filterString
operator|=
literal|" ColumnCountGetFilter('abc')"
expr_stmt|;
try|try
block|{
name|doTestFilter
argument_list|(
name|filterString
argument_list|,
name|ColumnCountGetFilter
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|filterString
operator|=
literal|" ColumnCountGetFilter(2147483648)"
expr_stmt|;
try|try
block|{
name|doTestFilter
argument_list|(
name|filterString
argument_list|,
name|ColumnCountGetFilter
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPageFilter
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|filterString
init|=
literal|" PageFilter(4)"
decl_stmt|;
name|PageFilter
name|pageFilter
init|=
name|doTestFilter
argument_list|(
name|filterString
argument_list|,
name|PageFilter
operator|.
name|class
argument_list|)
decl_stmt|;
name|long
name|pageSize
init|=
name|pageFilter
operator|.
name|getPageSize
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|pageSize
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|filterString
operator|=
literal|" PageFilter('123')"
expr_stmt|;
try|try
block|{
name|doTestFilter
argument_list|(
name|filterString
argument_list|,
name|PageFilter
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"PageFilter needs an int as an argument"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColumnPaginationFilter
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|filterString
init|=
literal|"ColumnPaginationFilter(4, 6)"
decl_stmt|;
name|ColumnPaginationFilter
name|columnPaginationFilter
init|=
name|doTestFilter
argument_list|(
name|filterString
argument_list|,
name|ColumnPaginationFilter
operator|.
name|class
argument_list|)
decl_stmt|;
name|int
name|limit
init|=
name|columnPaginationFilter
operator|.
name|getLimit
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|limit
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|int
name|offset
init|=
name|columnPaginationFilter
operator|.
name|getOffset
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|offset
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|filterString
operator|=
literal|" ColumnPaginationFilter('124')"
expr_stmt|;
try|try
block|{
name|doTestFilter
argument_list|(
name|filterString
argument_list|,
name|ColumnPaginationFilter
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ColumnPaginationFilter needs two arguments"
argument_list|)
expr_stmt|;
block|}
name|filterString
operator|=
literal|" ColumnPaginationFilter('4' , '123a')"
expr_stmt|;
try|try
block|{
name|doTestFilter
argument_list|(
name|filterString
argument_list|,
name|ColumnPaginationFilter
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ColumnPaginationFilter needs two ints as arguments"
argument_list|)
expr_stmt|;
block|}
name|filterString
operator|=
literal|" ColumnPaginationFilter('4' , '-123')"
expr_stmt|;
try|try
block|{
name|doTestFilter
argument_list|(
name|filterString
argument_list|,
name|ColumnPaginationFilter
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ColumnPaginationFilter arguments should not be negative"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInclusiveStopFilter
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|filterString
init|=
literal|"InclusiveStopFilter ('row 3')"
decl_stmt|;
name|InclusiveStopFilter
name|inclusiveStopFilter
init|=
name|doTestFilter
argument_list|(
name|filterString
argument_list|,
name|InclusiveStopFilter
operator|.
name|class
argument_list|)
decl_stmt|;
name|byte
index|[]
name|stopRowKey
init|=
name|inclusiveStopFilter
operator|.
name|getStopRowKey
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|String
argument_list|(
name|stopRowKey
argument_list|)
argument_list|,
literal|"row 3"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTimestampsFilter
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|filterString
init|=
literal|"TimestampsFilter(9223372036854775806, 6)"
decl_stmt|;
name|TimestampsFilter
name|timestampsFilter
init|=
name|doTestFilter
argument_list|(
name|filterString
argument_list|,
name|TimestampsFilter
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|timestamps
init|=
name|timestampsFilter
operator|.
name|getTimestamps
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|timestamps
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|timestamps
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|Long
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|filterString
operator|=
literal|"TimestampsFilter()"
expr_stmt|;
name|timestampsFilter
operator|=
name|doTestFilter
argument_list|(
name|filterString
argument_list|,
name|TimestampsFilter
operator|.
name|class
argument_list|)
expr_stmt|;
name|timestamps
operator|=
name|timestampsFilter
operator|.
name|getTimestamps
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|timestamps
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|filterString
operator|=
literal|"TimestampsFilter(9223372036854775808, 6)"
expr_stmt|;
try|try
block|{
name|doTestFilter
argument_list|(
name|filterString
argument_list|,
name|ColumnPaginationFilter
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Long Argument was too large"
argument_list|)
expr_stmt|;
block|}
name|filterString
operator|=
literal|"TimestampsFilter(-45, 6)"
expr_stmt|;
try|try
block|{
name|doTestFilter
argument_list|(
name|filterString
argument_list|,
name|ColumnPaginationFilter
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Timestamp Arguments should not be negative"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRowFilter
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|filterString
init|=
literal|"RowFilter ( =,   'binary:regionse')"
decl_stmt|;
name|RowFilter
name|rowFilter
init|=
name|doTestFilter
argument_list|(
name|filterString
argument_list|,
name|RowFilter
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|CompareFilter
operator|.
name|CompareOp
operator|.
name|EQUAL
argument_list|,
name|rowFilter
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rowFilter
operator|.
name|getComparator
argument_list|()
operator|instanceof
name|BinaryComparator
argument_list|)
expr_stmt|;
name|BinaryComparator
name|binaryComparator
init|=
operator|(
name|BinaryComparator
operator|)
name|rowFilter
operator|.
name|getComparator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"regionse"
argument_list|,
operator|new
name|String
argument_list|(
name|binaryComparator
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFamilyFilter
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|filterString
init|=
literal|"FamilyFilter(>=, 'binaryprefix:pre')"
decl_stmt|;
name|FamilyFilter
name|familyFilter
init|=
name|doTestFilter
argument_list|(
name|filterString
argument_list|,
name|FamilyFilter
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|CompareFilter
operator|.
name|CompareOp
operator|.
name|GREATER_OR_EQUAL
argument_list|,
name|familyFilter
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|familyFilter
operator|.
name|getComparator
argument_list|()
operator|instanceof
name|BinaryPrefixComparator
argument_list|)
expr_stmt|;
name|BinaryPrefixComparator
name|binaryPrefixComparator
init|=
operator|(
name|BinaryPrefixComparator
operator|)
name|familyFilter
operator|.
name|getComparator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"pre"
argument_list|,
operator|new
name|String
argument_list|(
name|binaryPrefixComparator
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQualifierFilter
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|filterString
init|=
literal|"QualifierFilter(=, 'regexstring:pre*')"
decl_stmt|;
name|QualifierFilter
name|qualifierFilter
init|=
name|doTestFilter
argument_list|(
name|filterString
argument_list|,
name|QualifierFilter
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|CompareFilter
operator|.
name|CompareOp
operator|.
name|EQUAL
argument_list|,
name|qualifierFilter
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|qualifierFilter
operator|.
name|getComparator
argument_list|()
operator|instanceof
name|RegexStringComparator
argument_list|)
expr_stmt|;
name|RegexStringComparator
name|regexStringComparator
init|=
operator|(
name|RegexStringComparator
operator|)
name|qualifierFilter
operator|.
name|getComparator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"pre*"
argument_list|,
operator|new
name|String
argument_list|(
name|regexStringComparator
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testValueFilter
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|filterString
init|=
literal|"ValueFilter(!=, 'substring:pre')"
decl_stmt|;
name|ValueFilter
name|valueFilter
init|=
name|doTestFilter
argument_list|(
name|filterString
argument_list|,
name|ValueFilter
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|CompareFilter
operator|.
name|CompareOp
operator|.
name|NOT_EQUAL
argument_list|,
name|valueFilter
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|valueFilter
operator|.
name|getComparator
argument_list|()
operator|instanceof
name|SubstringComparator
argument_list|)
expr_stmt|;
name|SubstringComparator
name|substringComparator
init|=
operator|(
name|SubstringComparator
operator|)
name|valueFilter
operator|.
name|getComparator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"pre"
argument_list|,
operator|new
name|String
argument_list|(
name|substringComparator
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColumnRangeFilter
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|filterString
init|=
literal|"ColumnRangeFilter('abc', true, 'xyz', false)"
decl_stmt|;
name|ColumnRangeFilter
name|columnRangeFilter
init|=
name|doTestFilter
argument_list|(
name|filterString
argument_list|,
name|ColumnRangeFilter
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"abc"
argument_list|,
operator|new
name|String
argument_list|(
name|columnRangeFilter
operator|.
name|getMinColumn
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xyz"
argument_list|,
operator|new
name|String
argument_list|(
name|columnRangeFilter
operator|.
name|getMaxColumn
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|columnRangeFilter
operator|.
name|isMinColumnInclusive
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|columnRangeFilter
operator|.
name|isMaxColumnInclusive
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDependentColumnFilter
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|filterString
init|=
literal|"DependentColumnFilter('family', 'qualifier', true, =, 'binary:abc')"
decl_stmt|;
name|DependentColumnFilter
name|dependentColumnFilter
init|=
name|doTestFilter
argument_list|(
name|filterString
argument_list|,
name|DependentColumnFilter
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"family"
argument_list|,
operator|new
name|String
argument_list|(
name|dependentColumnFilter
operator|.
name|getFamily
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"qualifier"
argument_list|,
operator|new
name|String
argument_list|(
name|dependentColumnFilter
operator|.
name|getQualifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dependentColumnFilter
operator|.
name|getDropDependentColumn
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CompareFilter
operator|.
name|CompareOp
operator|.
name|EQUAL
argument_list|,
name|dependentColumnFilter
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dependentColumnFilter
operator|.
name|getComparator
argument_list|()
operator|instanceof
name|BinaryComparator
argument_list|)
expr_stmt|;
name|BinaryComparator
name|binaryComparator
init|=
operator|(
name|BinaryComparator
operator|)
name|dependentColumnFilter
operator|.
name|getComparator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"abc"
argument_list|,
operator|new
name|String
argument_list|(
name|binaryComparator
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleColumnValueFilter
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|filterString
init|=
literal|"SingleColumnValueFilter "
operator|+
literal|"('family', 'qualifier',>=, 'binary:a', true, false)"
decl_stmt|;
name|SingleColumnValueFilter
name|singleColumnValueFilter
init|=
name|doTestFilter
argument_list|(
name|filterString
argument_list|,
name|SingleColumnValueFilter
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"family"
argument_list|,
operator|new
name|String
argument_list|(
name|singleColumnValueFilter
operator|.
name|getFamily
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"qualifier"
argument_list|,
operator|new
name|String
argument_list|(
name|singleColumnValueFilter
operator|.
name|getQualifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|singleColumnValueFilter
operator|.
name|getOperator
argument_list|()
argument_list|,
name|CompareFilter
operator|.
name|CompareOp
operator|.
name|GREATER_OR_EQUAL
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|singleColumnValueFilter
operator|.
name|getComparator
argument_list|()
operator|instanceof
name|BinaryComparator
argument_list|)
expr_stmt|;
name|BinaryComparator
name|binaryComparator
init|=
operator|(
name|BinaryComparator
operator|)
name|singleColumnValueFilter
operator|.
name|getComparator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|String
argument_list|(
name|binaryComparator
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|singleColumnValueFilter
operator|.
name|getFilterIfMissing
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|singleColumnValueFilter
operator|.
name|getLatestVersionOnly
argument_list|()
argument_list|)
expr_stmt|;
name|filterString
operator|=
literal|"SingleColumnValueFilter ('family', 'qualifier',>, 'binaryprefix:a')"
expr_stmt|;
name|singleColumnValueFilter
operator|=
name|doTestFilter
argument_list|(
name|filterString
argument_list|,
name|SingleColumnValueFilter
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"family"
argument_list|,
operator|new
name|String
argument_list|(
name|singleColumnValueFilter
operator|.
name|getFamily
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"qualifier"
argument_list|,
operator|new
name|String
argument_list|(
name|singleColumnValueFilter
operator|.
name|getQualifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|singleColumnValueFilter
operator|.
name|getOperator
argument_list|()
argument_list|,
name|CompareFilter
operator|.
name|CompareOp
operator|.
name|GREATER
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|singleColumnValueFilter
operator|.
name|getComparator
argument_list|()
operator|instanceof
name|BinaryPrefixComparator
argument_list|)
expr_stmt|;
name|BinaryPrefixComparator
name|binaryPrefixComparator
init|=
operator|(
name|BinaryPrefixComparator
operator|)
name|singleColumnValueFilter
operator|.
name|getComparator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|String
argument_list|(
name|binaryPrefixComparator
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|singleColumnValueFilter
operator|.
name|getFilterIfMissing
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|singleColumnValueFilter
operator|.
name|getLatestVersionOnly
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleColumnValueExcludeFilter
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|filterString
init|=
literal|"SingleColumnValueExcludeFilter ('family', 'qualifier',<, 'binaryprefix:a')"
decl_stmt|;
name|SingleColumnValueExcludeFilter
name|singleColumnValueExcludeFilter
init|=
name|doTestFilter
argument_list|(
name|filterString
argument_list|,
name|SingleColumnValueExcludeFilter
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|singleColumnValueExcludeFilter
operator|.
name|getOperator
argument_list|()
argument_list|,
name|CompareFilter
operator|.
name|CompareOp
operator|.
name|LESS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"family"
argument_list|,
operator|new
name|String
argument_list|(
name|singleColumnValueExcludeFilter
operator|.
name|getFamily
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"qualifier"
argument_list|,
operator|new
name|String
argument_list|(
name|singleColumnValueExcludeFilter
operator|.
name|getQualifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|String
argument_list|(
name|singleColumnValueExcludeFilter
operator|.
name|getComparator
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|singleColumnValueExcludeFilter
operator|.
name|getFilterIfMissing
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|singleColumnValueExcludeFilter
operator|.
name|getLatestVersionOnly
argument_list|()
argument_list|)
expr_stmt|;
name|filterString
operator|=
literal|"SingleColumnValueExcludeFilter "
operator|+
literal|"('family', 'qualifier',<=, 'binaryprefix:a', true, false)"
expr_stmt|;
name|singleColumnValueExcludeFilter
operator|=
name|doTestFilter
argument_list|(
name|filterString
argument_list|,
name|SingleColumnValueExcludeFilter
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"family"
argument_list|,
operator|new
name|String
argument_list|(
name|singleColumnValueExcludeFilter
operator|.
name|getFamily
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"qualifier"
argument_list|,
operator|new
name|String
argument_list|(
name|singleColumnValueExcludeFilter
operator|.
name|getQualifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|singleColumnValueExcludeFilter
operator|.
name|getOperator
argument_list|()
argument_list|,
name|CompareFilter
operator|.
name|CompareOp
operator|.
name|LESS_OR_EQUAL
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|singleColumnValueExcludeFilter
operator|.
name|getComparator
argument_list|()
operator|instanceof
name|BinaryPrefixComparator
argument_list|)
expr_stmt|;
name|BinaryPrefixComparator
name|binaryPrefixComparator
init|=
operator|(
name|BinaryPrefixComparator
operator|)
name|singleColumnValueExcludeFilter
operator|.
name|getComparator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|String
argument_list|(
name|binaryPrefixComparator
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|singleColumnValueExcludeFilter
operator|.
name|getFilterIfMissing
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|singleColumnValueExcludeFilter
operator|.
name|getLatestVersionOnly
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSkipFilter
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|filterString
init|=
literal|"SKIP ValueFilter( =,  'binary:0')"
decl_stmt|;
name|SkipFilter
name|skipFilter
init|=
name|doTestFilter
argument_list|(
name|filterString
argument_list|,
name|SkipFilter
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|skipFilter
operator|.
name|getFilter
argument_list|()
operator|instanceof
name|ValueFilter
argument_list|)
expr_stmt|;
name|ValueFilter
name|valueFilter
init|=
operator|(
name|ValueFilter
operator|)
name|skipFilter
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|CompareFilter
operator|.
name|CompareOp
operator|.
name|EQUAL
argument_list|,
name|valueFilter
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|valueFilter
operator|.
name|getComparator
argument_list|()
operator|instanceof
name|BinaryComparator
argument_list|)
expr_stmt|;
name|BinaryComparator
name|binaryComparator
init|=
operator|(
name|BinaryComparator
operator|)
name|valueFilter
operator|.
name|getComparator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
operator|new
name|String
argument_list|(
name|binaryComparator
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWhileFilter
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|filterString
init|=
literal|" WHILE   RowFilter ( !=, 'binary:row1')"
decl_stmt|;
name|WhileMatchFilter
name|whileMatchFilter
init|=
name|doTestFilter
argument_list|(
name|filterString
argument_list|,
name|WhileMatchFilter
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|whileMatchFilter
operator|.
name|getFilter
argument_list|()
operator|instanceof
name|RowFilter
argument_list|)
expr_stmt|;
name|RowFilter
name|rowFilter
init|=
operator|(
name|RowFilter
operator|)
name|whileMatchFilter
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|CompareFilter
operator|.
name|CompareOp
operator|.
name|NOT_EQUAL
argument_list|,
name|rowFilter
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rowFilter
operator|.
name|getComparator
argument_list|()
operator|instanceof
name|BinaryComparator
argument_list|)
expr_stmt|;
name|BinaryComparator
name|binaryComparator
init|=
operator|(
name|BinaryComparator
operator|)
name|rowFilter
operator|.
name|getComparator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"row1"
argument_list|,
operator|new
name|String
argument_list|(
name|binaryComparator
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompoundFilter1
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|filterString
init|=
literal|" (PrefixFilter ('realtime')AND  FirstKeyOnlyFilter())"
decl_stmt|;
name|FilterList
name|filterList
init|=
name|doTestFilter
argument_list|(
name|filterString
argument_list|,
name|FilterList
operator|.
name|class
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Filter
argument_list|>
name|filters
init|=
operator|(
name|ArrayList
argument_list|<
name|Filter
argument_list|>
operator|)
name|filterList
operator|.
name|getFilters
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|filters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|PrefixFilter
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|filters
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|FirstKeyOnlyFilter
argument_list|)
expr_stmt|;
name|PrefixFilter
name|PrefixFilter
init|=
operator|(
name|PrefixFilter
operator|)
name|filters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|byte
index|[]
name|prefix
init|=
name|PrefixFilter
operator|.
name|getPrefix
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|String
argument_list|(
name|prefix
argument_list|)
argument_list|,
literal|"realtime"
argument_list|)
expr_stmt|;
name|FirstKeyOnlyFilter
name|firstKeyOnlyFilter
init|=
operator|(
name|FirstKeyOnlyFilter
operator|)
name|filters
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompoundFilter2
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|filterString
init|=
literal|"(PrefixFilter('realtime') AND QualifierFilter (>=, 'binary:e'))"
operator|+
literal|"OR FamilyFilter (=, 'binary:qualifier') "
decl_stmt|;
name|FilterList
name|filterList
init|=
name|doTestFilter
argument_list|(
name|filterString
argument_list|,
name|FilterList
operator|.
name|class
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Filter
argument_list|>
name|filterListFilters
init|=
operator|(
name|ArrayList
argument_list|<
name|Filter
argument_list|>
operator|)
name|filterList
operator|.
name|getFilters
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|filterListFilters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|FilterList
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|filterListFilters
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|FamilyFilter
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|filterList
operator|.
name|getOperator
argument_list|()
argument_list|,
name|FilterList
operator|.
name|Operator
operator|.
name|MUST_PASS_ONE
argument_list|)
expr_stmt|;
name|filterList
operator|=
operator|(
name|FilterList
operator|)
name|filterListFilters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|FamilyFilter
name|familyFilter
init|=
operator|(
name|FamilyFilter
operator|)
name|filterListFilters
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|filterListFilters
operator|=
operator|(
name|ArrayList
argument_list|<
name|Filter
argument_list|>
operator|)
name|filterList
operator|.
name|getFilters
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|filterListFilters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|PrefixFilter
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|filterListFilters
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|QualifierFilter
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|filterList
operator|.
name|getOperator
argument_list|()
argument_list|,
name|FilterList
operator|.
name|Operator
operator|.
name|MUST_PASS_ALL
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CompareFilter
operator|.
name|CompareOp
operator|.
name|EQUAL
argument_list|,
name|familyFilter
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|familyFilter
operator|.
name|getComparator
argument_list|()
operator|instanceof
name|BinaryComparator
argument_list|)
expr_stmt|;
name|BinaryComparator
name|binaryComparator
init|=
operator|(
name|BinaryComparator
operator|)
name|familyFilter
operator|.
name|getComparator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"qualifier"
argument_list|,
operator|new
name|String
argument_list|(
name|binaryComparator
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|PrefixFilter
name|prefixFilter
init|=
operator|(
name|PrefixFilter
operator|)
name|filterListFilters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|byte
index|[]
name|prefix
init|=
name|prefixFilter
operator|.
name|getPrefix
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|String
argument_list|(
name|prefix
argument_list|)
argument_list|,
literal|"realtime"
argument_list|)
expr_stmt|;
name|QualifierFilter
name|qualifierFilter
init|=
operator|(
name|QualifierFilter
operator|)
name|filterListFilters
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|CompareFilter
operator|.
name|CompareOp
operator|.
name|GREATER_OR_EQUAL
argument_list|,
name|qualifierFilter
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|qualifierFilter
operator|.
name|getComparator
argument_list|()
operator|instanceof
name|BinaryComparator
argument_list|)
expr_stmt|;
name|binaryComparator
operator|=
operator|(
name|BinaryComparator
operator|)
name|qualifierFilter
operator|.
name|getComparator
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"e"
argument_list|,
operator|new
name|String
argument_list|(
name|binaryComparator
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompoundFilter3
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|filterString
init|=
literal|" ColumnPrefixFilter ('realtime')AND  "
operator|+
literal|"FirstKeyOnlyFilter() OR SKIP FamilyFilter(=, 'substring:hihi')"
decl_stmt|;
name|FilterList
name|filterList
init|=
name|doTestFilter
argument_list|(
name|filterString
argument_list|,
name|FilterList
operator|.
name|class
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Filter
argument_list|>
name|filters
init|=
operator|(
name|ArrayList
argument_list|<
name|Filter
argument_list|>
operator|)
name|filterList
operator|.
name|getFilters
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|filters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|FilterList
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|filters
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|SkipFilter
argument_list|)
expr_stmt|;
name|filterList
operator|=
operator|(
name|FilterList
operator|)
name|filters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|SkipFilter
name|skipFilter
init|=
operator|(
name|SkipFilter
operator|)
name|filters
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|filters
operator|=
operator|(
name|ArrayList
argument_list|<
name|Filter
argument_list|>
operator|)
name|filterList
operator|.
name|getFilters
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|filters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|ColumnPrefixFilter
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|filters
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|FirstKeyOnlyFilter
argument_list|)
expr_stmt|;
name|ColumnPrefixFilter
name|columnPrefixFilter
init|=
operator|(
name|ColumnPrefixFilter
operator|)
name|filters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|byte
index|[]
name|columnPrefix
init|=
name|columnPrefixFilter
operator|.
name|getPrefix
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|String
argument_list|(
name|columnPrefix
argument_list|)
argument_list|,
literal|"realtime"
argument_list|)
expr_stmt|;
name|FirstKeyOnlyFilter
name|firstKeyOnlyFilter
init|=
operator|(
name|FirstKeyOnlyFilter
operator|)
name|filters
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|skipFilter
operator|.
name|getFilter
argument_list|()
operator|instanceof
name|FamilyFilter
argument_list|)
expr_stmt|;
name|FamilyFilter
name|familyFilter
init|=
operator|(
name|FamilyFilter
operator|)
name|skipFilter
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|CompareFilter
operator|.
name|CompareOp
operator|.
name|EQUAL
argument_list|,
name|familyFilter
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|familyFilter
operator|.
name|getComparator
argument_list|()
operator|instanceof
name|SubstringComparator
argument_list|)
expr_stmt|;
name|SubstringComparator
name|substringComparator
init|=
operator|(
name|SubstringComparator
operator|)
name|familyFilter
operator|.
name|getComparator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"hihi"
argument_list|,
operator|new
name|String
argument_list|(
name|substringComparator
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompoundFilter4
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|filterString
init|=
literal|" ColumnPrefixFilter ('realtime') OR "
operator|+
literal|"FirstKeyOnlyFilter() OR SKIP FamilyFilter(=, 'substring:hihi')"
decl_stmt|;
name|FilterList
name|filterList
init|=
name|doTestFilter
argument_list|(
name|filterString
argument_list|,
name|FilterList
operator|.
name|class
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Filter
argument_list|>
name|filters
init|=
operator|(
name|ArrayList
argument_list|<
name|Filter
argument_list|>
operator|)
name|filterList
operator|.
name|getFilters
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|filters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|ColumnPrefixFilter
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|filters
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|FirstKeyOnlyFilter
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|filters
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|instanceof
name|SkipFilter
argument_list|)
expr_stmt|;
name|ColumnPrefixFilter
name|columnPrefixFilter
init|=
operator|(
name|ColumnPrefixFilter
operator|)
name|filters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|FirstKeyOnlyFilter
name|firstKeyOnlyFilter
init|=
operator|(
name|FirstKeyOnlyFilter
operator|)
name|filters
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|SkipFilter
name|skipFilter
init|=
operator|(
name|SkipFilter
operator|)
name|filters
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|byte
index|[]
name|columnPrefix
init|=
name|columnPrefixFilter
operator|.
name|getPrefix
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|String
argument_list|(
name|columnPrefix
argument_list|)
argument_list|,
literal|"realtime"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|skipFilter
operator|.
name|getFilter
argument_list|()
operator|instanceof
name|FamilyFilter
argument_list|)
expr_stmt|;
name|FamilyFilter
name|familyFilter
init|=
operator|(
name|FamilyFilter
operator|)
name|skipFilter
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|CompareFilter
operator|.
name|CompareOp
operator|.
name|EQUAL
argument_list|,
name|familyFilter
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|familyFilter
operator|.
name|getComparator
argument_list|()
operator|instanceof
name|SubstringComparator
argument_list|)
expr_stmt|;
name|SubstringComparator
name|substringComparator
init|=
operator|(
name|SubstringComparator
operator|)
name|familyFilter
operator|.
name|getComparator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"hihi"
argument_list|,
operator|new
name|String
argument_list|(
name|substringComparator
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncorrectCompareOperator
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|filterString
init|=
literal|"RowFilter ('>>' , 'binary:region')"
decl_stmt|;
try|try
block|{
name|doTestFilter
argument_list|(
name|filterString
argument_list|,
name|RowFilter
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Incorrect compare operator>>"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncorrectComparatorType
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|filterString
init|=
literal|"RowFilter ('>=' , 'binaryoperator:region')"
decl_stmt|;
try|try
block|{
name|doTestFilter
argument_list|(
name|filterString
argument_list|,
name|RowFilter
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Incorrect comparator type: binaryoperator"
argument_list|)
expr_stmt|;
block|}
name|filterString
operator|=
literal|"RowFilter ('>=' 'regexstring:pre*')"
expr_stmt|;
try|try
block|{
name|doTestFilter
argument_list|(
name|filterString
argument_list|,
name|RowFilter
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"RegexStringComparator can only be used with EQUAL or NOT_EQUAL"
argument_list|)
expr_stmt|;
block|}
name|filterString
operator|=
literal|"SingleColumnValueFilter"
operator|+
literal|" ('family', 'qualifier', '>=', 'substring:a', 'true', 'false')')"
expr_stmt|;
try|try
block|{
name|doTestFilter
argument_list|(
name|filterString
argument_list|,
name|RowFilter
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"SubtringComparator can only be used with EQUAL or NOT_EQUAL"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrecedence1
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|filterString
init|=
literal|" (PrefixFilter ('realtime')AND  FirstKeyOnlyFilter()"
operator|+
literal|" OR KeyOnlyFilter())"
decl_stmt|;
name|FilterList
name|filterList
init|=
name|doTestFilter
argument_list|(
name|filterString
argument_list|,
name|FilterList
operator|.
name|class
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Filter
argument_list|>
name|filters
init|=
operator|(
name|ArrayList
argument_list|<
name|Filter
argument_list|>
operator|)
name|filterList
operator|.
name|getFilters
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|filters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|FilterList
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|filters
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|KeyOnlyFilter
argument_list|)
expr_stmt|;
name|filterList
operator|=
operator|(
name|FilterList
operator|)
name|filters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|filters
operator|=
operator|(
name|ArrayList
argument_list|<
name|Filter
argument_list|>
operator|)
name|filterList
operator|.
name|getFilters
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|filters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|PrefixFilter
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|filters
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|FirstKeyOnlyFilter
argument_list|)
expr_stmt|;
name|PrefixFilter
name|prefixFilter
init|=
operator|(
name|PrefixFilter
operator|)
name|filters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|byte
index|[]
name|prefix
init|=
name|prefixFilter
operator|.
name|getPrefix
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|String
argument_list|(
name|prefix
argument_list|)
argument_list|,
literal|"realtime"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrecedence2
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|filterString
init|=
literal|" PrefixFilter ('realtime')AND  SKIP FirstKeyOnlyFilter()"
operator|+
literal|"OR KeyOnlyFilter()"
decl_stmt|;
name|FilterList
name|filterList
init|=
name|doTestFilter
argument_list|(
name|filterString
argument_list|,
name|FilterList
operator|.
name|class
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Filter
argument_list|>
name|filters
init|=
operator|(
name|ArrayList
argument_list|<
name|Filter
argument_list|>
operator|)
name|filterList
operator|.
name|getFilters
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|filters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|FilterList
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|filters
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|KeyOnlyFilter
argument_list|)
expr_stmt|;
name|filterList
operator|=
operator|(
name|FilterList
operator|)
name|filters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|filters
operator|=
operator|(
name|ArrayList
argument_list|<
name|Filter
argument_list|>
operator|)
name|filterList
operator|.
name|getFilters
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|filters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|PrefixFilter
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|filters
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|SkipFilter
argument_list|)
expr_stmt|;
name|PrefixFilter
name|prefixFilter
init|=
operator|(
name|PrefixFilter
operator|)
name|filters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|byte
index|[]
name|prefix
init|=
name|prefixFilter
operator|.
name|getPrefix
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|String
argument_list|(
name|prefix
argument_list|)
argument_list|,
literal|"realtime"
argument_list|)
expr_stmt|;
name|SkipFilter
name|skipFilter
init|=
operator|(
name|SkipFilter
operator|)
name|filters
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|skipFilter
operator|.
name|getFilter
argument_list|()
operator|instanceof
name|FirstKeyOnlyFilter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnescapedQuote1
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|filterString
init|=
literal|"InclusiveStopFilter ('row''3')"
decl_stmt|;
name|InclusiveStopFilter
name|inclusiveStopFilter
init|=
name|doTestFilter
argument_list|(
name|filterString
argument_list|,
name|InclusiveStopFilter
operator|.
name|class
argument_list|)
decl_stmt|;
name|byte
index|[]
name|stopRowKey
init|=
name|inclusiveStopFilter
operator|.
name|getStopRowKey
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|String
argument_list|(
name|stopRowKey
argument_list|)
argument_list|,
literal|"row'3"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnescapedQuote2
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|filterString
init|=
literal|"InclusiveStopFilter ('row''3''')"
decl_stmt|;
name|InclusiveStopFilter
name|inclusiveStopFilter
init|=
name|doTestFilter
argument_list|(
name|filterString
argument_list|,
name|InclusiveStopFilter
operator|.
name|class
argument_list|)
decl_stmt|;
name|byte
index|[]
name|stopRowKey
init|=
name|inclusiveStopFilter
operator|.
name|getStopRowKey
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|String
argument_list|(
name|stopRowKey
argument_list|)
argument_list|,
literal|"row'3'"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnescapedQuote3
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|filterString
init|=
literal|"	InclusiveStopFilter ('''')"
decl_stmt|;
name|InclusiveStopFilter
name|inclusiveStopFilter
init|=
name|doTestFilter
argument_list|(
name|filterString
argument_list|,
name|InclusiveStopFilter
operator|.
name|class
argument_list|)
decl_stmt|;
name|byte
index|[]
name|stopRowKey
init|=
name|inclusiveStopFilter
operator|.
name|getStopRowKey
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|String
argument_list|(
name|stopRowKey
argument_list|)
argument_list|,
literal|"'"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncorrectFilterString
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|filterString
init|=
literal|"()"
decl_stmt|;
name|byte
index|[]
name|filterStringAsByteArray
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|filterString
argument_list|)
decl_stmt|;
try|try
block|{
name|filter
operator|=
name|f
operator|.
name|parseFilterString
argument_list|(
name|filterStringAsByteArray
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCorrectFilterString
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|filterString
init|=
literal|"(FirstKeyOnlyFilter())"
decl_stmt|;
name|FirstKeyOnlyFilter
name|firstKeyOnlyFilter
init|=
name|doTestFilter
argument_list|(
name|filterString
argument_list|,
name|FirstKeyOnlyFilter
operator|.
name|class
argument_list|)
decl_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRegisterFilter
parameter_list|()
block|{
name|ParseFilter
operator|.
name|registerFilter
argument_list|(
literal|"MyFilter"
argument_list|,
literal|"some.class"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|getSupportedFilters
argument_list|()
operator|.
name|contains
argument_list|(
literal|"MyFilter"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
parameter_list|<
name|T
extends|extends
name|Filter
parameter_list|>
name|T
name|doTestFilter
parameter_list|(
name|String
name|filterString
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|filterStringAsByteArray
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|filterString
argument_list|)
decl_stmt|;
name|filter
operator|=
name|f
operator|.
name|parseFilterString
argument_list|(
name|filterStringAsByteArray
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|clazz
argument_list|,
name|filter
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|clazz
operator|.
name|cast
argument_list|(
name|filter
argument_list|)
return|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Rule
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ResourceCheckerJUnitRule
name|cu
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ResourceCheckerJUnitRule
argument_list|()
decl_stmt|;
block|}
end_class

end_unit

