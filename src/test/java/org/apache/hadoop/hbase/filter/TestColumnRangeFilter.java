begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValueTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|InternalScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_class
class|class
name|StringRange
block|{
specifier|private
name|String
name|start
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|end
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|startInclusive
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|endInclusive
init|=
literal|false
decl_stmt|;
specifier|public
name|StringRange
parameter_list|(
name|String
name|start
parameter_list|,
name|boolean
name|startInclusive
parameter_list|,
name|String
name|end
parameter_list|,
name|boolean
name|endInclusive
parameter_list|)
block|{
name|this
operator|.
name|start
operator|=
name|start
expr_stmt|;
name|this
operator|.
name|startInclusive
operator|=
name|startInclusive
expr_stmt|;
name|this
operator|.
name|end
operator|=
name|end
expr_stmt|;
name|this
operator|.
name|endInclusive
operator|=
name|endInclusive
expr_stmt|;
block|}
specifier|public
name|String
name|getStart
parameter_list|()
block|{
return|return
name|this
operator|.
name|start
return|;
block|}
specifier|public
name|String
name|getEnd
parameter_list|()
block|{
return|return
name|this
operator|.
name|end
return|;
block|}
specifier|public
name|boolean
name|isStartInclusive
parameter_list|()
block|{
return|return
name|this
operator|.
name|startInclusive
return|;
block|}
specifier|public
name|boolean
name|isEndInclusive
parameter_list|()
block|{
return|return
name|this
operator|.
name|endInclusive
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hashCode
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|start
operator|!=
literal|null
condition|)
block|{
name|hashCode
operator|^=
name|this
operator|.
name|start
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|end
operator|!=
literal|null
condition|)
block|{
name|hashCode
operator|^=
name|this
operator|.
name|end
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
return|return
name|hashCode
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|result
init|=
operator|(
name|this
operator|.
name|startInclusive
condition|?
literal|"["
else|:
literal|"("
operator|)
operator|+
operator|(
name|this
operator|.
name|start
operator|==
literal|null
condition|?
literal|null
else|:
name|this
operator|.
name|start
operator|)
operator|+
literal|", "
operator|+
operator|(
name|this
operator|.
name|end
operator|==
literal|null
condition|?
literal|null
else|:
name|this
operator|.
name|end
operator|)
operator|+
operator|(
name|this
operator|.
name|endInclusive
condition|?
literal|"]"
else|:
literal|")"
operator|)
decl_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|boolean
name|inRange
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|boolean
name|afterStart
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|start
operator|!=
literal|null
condition|)
block|{
name|int
name|startCmp
init|=
name|value
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|start
argument_list|)
decl_stmt|;
name|afterStart
operator|=
name|this
operator|.
name|startInclusive
condition|?
name|startCmp
operator|>=
literal|0
else|:
name|startCmp
operator|>
literal|0
expr_stmt|;
block|}
name|boolean
name|beforeEnd
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|end
operator|!=
literal|null
condition|)
block|{
name|int
name|endCmp
init|=
name|value
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|end
argument_list|)
decl_stmt|;
name|beforeEnd
operator|=
name|this
operator|.
name|endInclusive
condition|?
name|endCmp
operator|<=
literal|0
else|:
name|endCmp
operator|<
literal|0
expr_stmt|;
block|}
return|return
name|afterStart
operator|&&
name|beforeEnd
return|;
block|}
block|}
end_class

begin_class
specifier|public
class|class
name|TestColumnRangeFilter
block|{
specifier|private
specifier|final
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
block|}
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Nothing to do.
block|}
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Nothing to do.
block|}
annotation|@
name|Test
specifier|public
name|void
name|TestColumnRangeFilterClient
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|family
init|=
literal|"Family"
decl_stmt|;
name|String
name|table
init|=
literal|"TestColumnRangeFilterClient"
decl_stmt|;
name|HTable
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|table
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family
argument_list|)
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rows
init|=
name|generateRandomWords
argument_list|(
literal|10
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|long
name|maxTimestamp
init|=
literal|2
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columns
init|=
name|generateRandomWords
argument_list|(
literal|20000
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvList
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|StringRange
argument_list|,
name|List
argument_list|<
name|KeyValue
argument_list|>
argument_list|>
name|rangeMap
init|=
operator|new
name|HashMap
argument_list|<
name|StringRange
argument_list|,
name|List
argument_list|<
name|KeyValue
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|rangeMap
operator|.
name|put
argument_list|(
operator|new
name|StringRange
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|,
literal|"b"
argument_list|,
literal|false
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|rangeMap
operator|.
name|put
argument_list|(
operator|new
name|StringRange
argument_list|(
literal|"p"
argument_list|,
literal|true
argument_list|,
literal|"q"
argument_list|,
literal|false
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|rangeMap
operator|.
name|put
argument_list|(
operator|new
name|StringRange
argument_list|(
literal|"r"
argument_list|,
literal|false
argument_list|,
literal|"s"
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|rangeMap
operator|.
name|put
argument_list|(
operator|new
name|StringRange
argument_list|(
literal|"z"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|valueString
init|=
literal|"ValueString"
decl_stmt|;
for|for
control|(
name|String
name|row
range|:
name|rows
control|)
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|setWriteToWAL
argument_list|(
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|column
range|:
name|columns
control|)
block|{
for|for
control|(
name|long
name|timestamp
init|=
literal|1
init|;
name|timestamp
operator|<=
name|maxTimestamp
condition|;
name|timestamp
operator|++
control|)
block|{
name|KeyValue
name|kv
init|=
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|column
argument_list|,
name|timestamp
argument_list|,
name|valueString
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
name|kvList
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
for|for
control|(
name|StringRange
name|s
range|:
name|rangeMap
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|s
operator|.
name|inRange
argument_list|(
name|column
argument_list|)
condition|)
block|{
name|rangeMap
operator|.
name|get
argument_list|(
name|s
argument_list|)
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|ht
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|TEST_UTIL
operator|.
name|flush
argument_list|()
expr_stmt|;
name|ColumnRangeFilter
name|filter
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
for|for
control|(
name|StringRange
name|s
range|:
name|rangeMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|filter
operator|=
operator|new
name|ColumnRangeFilter
argument_list|(
name|s
operator|.
name|getStart
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|Bytes
operator|.
name|toBytes
argument_list|(
name|s
operator|.
name|getStart
argument_list|()
argument_list|)
argument_list|,
name|s
operator|.
name|isStartInclusive
argument_list|()
argument_list|,
name|s
operator|.
name|getEnd
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|Bytes
operator|.
name|toBytes
argument_list|(
name|s
operator|.
name|getEnd
argument_list|()
argument_list|)
argument_list|,
name|s
operator|.
name|isEndInclusive
argument_list|()
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"scan column range: "
operator|+
name|s
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|timeBeforeScan
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Result
name|result
decl_stmt|;
while|while
condition|(
operator|(
name|result
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|KeyValue
name|kv
range|:
name|result
operator|.
name|list
argument_list|()
control|)
block|{
name|results
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
block|}
name|long
name|scanTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|timeBeforeScan
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"scan time = "
operator|+
name|scanTime
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"found "
operator|+
name|results
operator|.
name|size
argument_list|()
operator|+
literal|" results"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Expecting "
operator|+
name|rangeMap
operator|.
name|get
argument_list|(
name|s
argument_list|)
operator|.
name|size
argument_list|()
operator|+
literal|" results"
argument_list|)
expr_stmt|;
comment|/*       for (KeyValue kv : results) {         LOG.info("found row " + Bytes.toString(kv.getRow()) + ", column "             + Bytes.toString(kv.getQualifier()));       }       */
name|assertEquals
argument_list|(
name|rangeMap
operator|.
name|get
argument_list|(
name|s
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|String
argument_list|>
name|generateRandomWords
parameter_list|(
name|int
name|numberOfWords
parameter_list|,
name|int
name|maxLengthOfWords
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|wordSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfWords
condition|;
name|i
operator|++
control|)
block|{
name|int
name|lengthOfWords
init|=
call|(
name|int
call|)
argument_list|(
name|Math
operator|.
name|random
argument_list|()
operator|*
name|maxLengthOfWords
argument_list|)
operator|+
literal|1
decl_stmt|;
name|char
index|[]
name|wordChar
init|=
operator|new
name|char
index|[
name|lengthOfWords
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|wordChar
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|wordChar
index|[
name|j
index|]
operator|=
call|(
name|char
call|)
argument_list|(
name|Math
operator|.
name|random
argument_list|()
operator|*
literal|26
operator|+
literal|97
argument_list|)
expr_stmt|;
block|}
name|String
name|word
init|=
operator|new
name|String
argument_list|(
name|wordChar
argument_list|)
decl_stmt|;
name|wordSet
operator|.
name|add
argument_list|(
name|word
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|wordList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|wordSet
argument_list|)
decl_stmt|;
return|return
name|wordList
return|;
block|}
block|}
end_class

end_unit

