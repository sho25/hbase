begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|PairOfSameType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_comment
comment|/**  * Test the {@link SplitTransaction} class against an HRegion (as opposed to  * running cluster).  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestSplitTransaction
block|{
specifier|private
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Path
name|testdir
init|=
name|TEST_UTIL
operator|.
name|getDataTestDir
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|HRegion
name|parent
decl_stmt|;
specifier|private
name|HLog
name|wal
decl_stmt|;
specifier|private
name|FileSystem
name|fs
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|STARTROW
init|=
operator|new
name|byte
index|[]
block|{
literal|'a'
block|,
literal|'a'
block|,
literal|'a'
block|}
decl_stmt|;
comment|// '{' is next ascii after 'z'.
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ENDROW
init|=
operator|new
name|byte
index|[]
block|{
literal|'{'
block|,
literal|'{'
block|,
literal|'{'
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|GOOD_SPLIT_ROW
init|=
operator|new
name|byte
index|[]
block|{
literal|'d'
block|,
literal|'d'
block|,
literal|'d'
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|CF
init|=
name|HConstants
operator|.
name|CATALOG_FAMILY
decl_stmt|;
static|static
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"AAAA static"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"AAAA setup"
argument_list|)
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|fs
operator|.
name|delete
argument_list|(
name|this
operator|.
name|testdir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|wal
operator|=
operator|new
name|HLog
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|this
operator|.
name|testdir
argument_list|,
literal|"logs"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|this
operator|.
name|testdir
argument_list|,
literal|"archive"
argument_list|)
argument_list|,
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"AAAA setup createRegion"
argument_list|)
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|createRegion
argument_list|(
name|this
operator|.
name|testdir
argument_list|,
name|this
operator|.
name|wal
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
literal|"hbase.testing.nocluster"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"AAAA setup ends"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|parent
operator|!=
literal|null
operator|&&
operator|!
name|this
operator|.
name|parent
operator|.
name|isClosed
argument_list|()
condition|)
name|this
operator|.
name|parent
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|fs
operator|.
name|exists
argument_list|(
name|this
operator|.
name|parent
operator|.
name|getRegionDir
argument_list|()
argument_list|)
operator|&&
operator|!
name|this
operator|.
name|fs
operator|.
name|delete
argument_list|(
name|this
operator|.
name|parent
operator|.
name|getRegionDir
argument_list|()
argument_list|,
literal|true
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed delete of "
operator|+
name|this
operator|.
name|parent
operator|.
name|getRegionDir
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|this
operator|.
name|wal
operator|!=
literal|null
condition|)
name|this
operator|.
name|wal
operator|.
name|closeAndDelete
argument_list|()
expr_stmt|;
name|this
operator|.
name|fs
operator|.
name|delete
argument_list|(
name|this
operator|.
name|testdir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFailAfterPONR
parameter_list|()
throws|throws
name|IOException
throws|,
name|KeeperException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"AAAA testFailAfterPONR"
argument_list|)
expr_stmt|;
specifier|final
name|int
name|rowcount
init|=
name|TEST_UTIL
operator|.
name|loadRegion
argument_list|(
name|this
operator|.
name|parent
argument_list|,
name|CF
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|rowcount
operator|>
literal|0
argument_list|)
expr_stmt|;
name|int
name|parentRowCount
init|=
name|countRows
argument_list|(
name|this
operator|.
name|parent
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|rowcount
argument_list|,
name|parentRowCount
argument_list|)
expr_stmt|;
comment|// Start transaction.
name|SplitTransaction
name|st
init|=
name|prepareGOOD_SPLIT_ROW
argument_list|()
decl_stmt|;
name|SplitTransaction
name|spiedUponSt
init|=
name|spy
argument_list|(
name|st
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doThrow
argument_list|(
operator|new
name|MockedFailedDaughterOpen
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|spiedUponSt
argument_list|)
operator|.
name|openDaughterRegion
argument_list|(
operator|(
name|Server
operator|)
name|Mockito
operator|.
name|anyObject
argument_list|()
argument_list|,
operator|(
name|HRegion
operator|)
name|Mockito
operator|.
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
comment|// Run the execute.  Look at what it returns.
name|boolean
name|expectedException
init|=
literal|false
decl_stmt|;
name|Server
name|mockServer
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Server
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockServer
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|spiedUponSt
operator|.
name|execute
argument_list|(
name|mockServer
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|MockedFailedDaughterOpen
condition|)
block|{
name|expectedException
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|expectedException
argument_list|)
expr_stmt|;
comment|// Run rollback returns that we should restart.
name|assertFalse
argument_list|(
name|spiedUponSt
operator|.
name|rollback
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure that region a and region b are still in the filesystem, that
comment|// they have not been removed; this is supposed to be the case if we go
comment|// past point of no return.
name|Path
name|tableDir
init|=
name|this
operator|.
name|parent
operator|.
name|getRegionDir
argument_list|()
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|Path
name|daughterADir
init|=
operator|new
name|Path
argument_list|(
name|tableDir
argument_list|,
name|spiedUponSt
operator|.
name|getFirstDaughter
argument_list|()
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|daughterBDir
init|=
operator|new
name|Path
argument_list|(
name|tableDir
argument_list|,
name|spiedUponSt
operator|.
name|getSecondDaughter
argument_list|()
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|TEST_UTIL
operator|.
name|getTestFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|daughterADir
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|TEST_UTIL
operator|.
name|getTestFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|daughterBDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test straight prepare works.  Tries to split on {@link #GOOD_SPLIT_ROW}    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testPrepare
parameter_list|()
throws|throws
name|IOException
block|{
name|prepareGOOD_SPLIT_ROW
argument_list|()
expr_stmt|;
block|}
specifier|private
name|SplitTransaction
name|prepareGOOD_SPLIT_ROW
parameter_list|()
block|{
name|SplitTransaction
name|st
init|=
operator|new
name|SplitTransaction
argument_list|(
name|this
operator|.
name|parent
argument_list|,
name|GOOD_SPLIT_ROW
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|st
operator|.
name|prepare
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|st
return|;
block|}
comment|/**    * Pass an unreasonable split row.    */
annotation|@
name|Test
specifier|public
name|void
name|testPrepareWithBadSplitRow
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Pass start row as split key.
name|SplitTransaction
name|st
init|=
operator|new
name|SplitTransaction
argument_list|(
name|this
operator|.
name|parent
argument_list|,
name|STARTROW
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|st
operator|.
name|prepare
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|=
operator|new
name|SplitTransaction
argument_list|(
name|this
operator|.
name|parent
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|st
operator|.
name|prepare
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|=
operator|new
name|SplitTransaction
argument_list|(
name|this
operator|.
name|parent
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'A'
block|,
literal|'A'
block|,
literal|'A'
block|}
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|st
operator|.
name|prepare
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|=
operator|new
name|SplitTransaction
argument_list|(
name|this
operator|.
name|parent
argument_list|,
name|ENDROW
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|st
operator|.
name|prepare
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrepareWithClosedRegion
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|parent
operator|.
name|close
argument_list|()
expr_stmt|;
name|SplitTransaction
name|st
init|=
operator|new
name|SplitTransaction
argument_list|(
name|this
operator|.
name|parent
argument_list|,
name|GOOD_SPLIT_ROW
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|st
operator|.
name|prepare
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWholesomeSplit
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|rowcount
init|=
name|TEST_UTIL
operator|.
name|loadRegion
argument_list|(
name|this
operator|.
name|parent
argument_list|,
name|CF
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|rowcount
operator|>
literal|0
argument_list|)
expr_stmt|;
name|int
name|parentRowCount
init|=
name|countRows
argument_list|(
name|this
operator|.
name|parent
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|rowcount
argument_list|,
name|parentRowCount
argument_list|)
expr_stmt|;
comment|// Start transaction.
name|SplitTransaction
name|st
init|=
name|prepareGOOD_SPLIT_ROW
argument_list|()
decl_stmt|;
comment|// Run the execute.  Look at what it returns.
name|Server
name|mockServer
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Server
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockServer
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|PairOfSameType
argument_list|<
name|HRegion
argument_list|>
name|daughters
init|=
name|st
operator|.
name|execute
argument_list|(
name|mockServer
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// Do some assertions about execution.
name|assertTrue
argument_list|(
name|this
operator|.
name|fs
operator|.
name|exists
argument_list|(
name|st
operator|.
name|getSplitDir
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Assert the parent region is closed.
name|assertTrue
argument_list|(
name|this
operator|.
name|parent
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assert splitdir is empty -- because its content will have been moved out
comment|// to be under the daughter region dirs.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|this
operator|.
name|fs
operator|.
name|listStatus
argument_list|(
name|st
operator|.
name|getSplitDir
argument_list|()
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Check daughters have correct key span.
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|this
operator|.
name|parent
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|daughters
operator|.
name|getFirst
argument_list|()
operator|.
name|getStartKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|GOOD_SPLIT_ROW
argument_list|,
name|daughters
operator|.
name|getFirst
argument_list|()
operator|.
name|getEndKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|daughters
operator|.
name|getSecond
argument_list|()
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|GOOD_SPLIT_ROW
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|this
operator|.
name|parent
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|daughters
operator|.
name|getSecond
argument_list|()
operator|.
name|getEndKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Count rows.
name|int
name|daughtersRowCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|HRegion
name|r
range|:
name|daughters
control|)
block|{
comment|// Open so can count its content.
name|HRegion
name|openRegion
init|=
name|HRegion
operator|.
name|openHRegion
argument_list|(
name|this
operator|.
name|testdir
argument_list|,
name|r
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|r
operator|.
name|getTableDesc
argument_list|()
argument_list|,
name|r
operator|.
name|getLog
argument_list|()
argument_list|,
name|r
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|int
name|count
init|=
name|countRows
argument_list|(
name|openRegion
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|count
operator|>
literal|0
operator|&&
name|count
operator|!=
name|rowcount
argument_list|)
expr_stmt|;
name|daughtersRowCount
operator|+=
name|count
expr_stmt|;
block|}
finally|finally
block|{
name|openRegion
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|rowcount
argument_list|,
name|daughtersRowCount
argument_list|)
expr_stmt|;
comment|// Assert the write lock is no longer held on parent
name|assertTrue
argument_list|(
operator|!
name|this
operator|.
name|parent
operator|.
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|isHeldByCurrentThread
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRollback
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|rowcount
init|=
name|TEST_UTIL
operator|.
name|loadRegion
argument_list|(
name|this
operator|.
name|parent
argument_list|,
name|CF
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|rowcount
operator|>
literal|0
argument_list|)
expr_stmt|;
name|int
name|parentRowCount
init|=
name|countRows
argument_list|(
name|this
operator|.
name|parent
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|rowcount
argument_list|,
name|parentRowCount
argument_list|)
expr_stmt|;
comment|// Start transaction.
name|SplitTransaction
name|st
init|=
name|prepareGOOD_SPLIT_ROW
argument_list|()
decl_stmt|;
name|SplitTransaction
name|spiedUponSt
init|=
name|spy
argument_list|(
name|st
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|spiedUponSt
operator|.
name|createDaughterRegion
argument_list|(
name|spiedUponSt
operator|.
name|getSecondDaughter
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|MockedFailedDaughterCreation
argument_list|()
argument_list|)
expr_stmt|;
comment|// Run the execute.  Look at what it returns.
name|boolean
name|expectedException
init|=
literal|false
decl_stmt|;
name|Server
name|mockServer
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Server
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockServer
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|spiedUponSt
operator|.
name|execute
argument_list|(
name|mockServer
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MockedFailedDaughterCreation
name|e
parameter_list|)
block|{
name|expectedException
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|expectedException
argument_list|)
expr_stmt|;
comment|// Run rollback
name|assertTrue
argument_list|(
name|spiedUponSt
operator|.
name|rollback
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// Assert I can scan parent.
name|int
name|parentRowCount2
init|=
name|countRows
argument_list|(
name|this
operator|.
name|parent
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|parentRowCount
argument_list|,
name|parentRowCount2
argument_list|)
expr_stmt|;
comment|// Assert rollback cleaned up stuff in fs
name|assertTrue
argument_list|(
operator|!
name|this
operator|.
name|fs
operator|.
name|exists
argument_list|(
name|HRegion
operator|.
name|getRegionDir
argument_list|(
name|this
operator|.
name|testdir
argument_list|,
name|st
operator|.
name|getFirstDaughter
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|this
operator|.
name|fs
operator|.
name|exists
argument_list|(
name|HRegion
operator|.
name|getRegionDir
argument_list|(
name|this
operator|.
name|testdir
argument_list|,
name|st
operator|.
name|getSecondDaughter
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|this
operator|.
name|parent
operator|.
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|isHeldByCurrentThread
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now retry the split but do not throw an exception this time.
name|assertTrue
argument_list|(
name|st
operator|.
name|prepare
argument_list|()
argument_list|)
expr_stmt|;
name|PairOfSameType
argument_list|<
name|HRegion
argument_list|>
name|daughters
init|=
name|st
operator|.
name|execute
argument_list|(
name|mockServer
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// Count rows.
name|int
name|daughtersRowCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|HRegion
name|r
range|:
name|daughters
control|)
block|{
comment|// Open so can count its content.
name|HRegion
name|openRegion
init|=
name|HRegion
operator|.
name|openHRegion
argument_list|(
name|this
operator|.
name|testdir
argument_list|,
name|r
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|r
operator|.
name|getTableDesc
argument_list|()
argument_list|,
name|r
operator|.
name|getLog
argument_list|()
argument_list|,
name|r
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|int
name|count
init|=
name|countRows
argument_list|(
name|openRegion
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|count
operator|>
literal|0
operator|&&
name|count
operator|!=
name|rowcount
argument_list|)
expr_stmt|;
name|daughtersRowCount
operator|+=
name|count
expr_stmt|;
block|}
finally|finally
block|{
name|openRegion
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|rowcount
argument_list|,
name|daughtersRowCount
argument_list|)
expr_stmt|;
comment|// Assert the write lock is no longer held on parent
name|assertTrue
argument_list|(
operator|!
name|this
operator|.
name|parent
operator|.
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|isHeldByCurrentThread
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Exception used in this class only.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
specifier|private
class|class
name|MockedFailedDaughterCreation
extends|extends
name|IOException
block|{}
specifier|private
class|class
name|MockedFailedDaughterOpen
extends|extends
name|IOException
block|{}
specifier|private
name|int
name|countRows
parameter_list|(
specifier|final
name|HRegion
name|r
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|rowcount
init|=
literal|0
decl_stmt|;
name|InternalScanner
name|scanner
init|=
name|r
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|hasNext
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|hasNext
condition|)
block|{
name|hasNext
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|kvs
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|kvs
operator|.
name|isEmpty
argument_list|()
condition|)
name|rowcount
operator|++
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|rowcount
return|;
block|}
name|HRegion
name|createRegion
parameter_list|(
specifier|final
name|Path
name|testdir
parameter_list|,
specifier|final
name|HLog
name|wal
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Make a region with start and end keys. Use 'aaa', to 'AAA'.  The load
comment|// region utility will add rows between 'aaa' and 'zzz'.
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
literal|"table"
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|CF
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
name|HRegionInfo
name|hri
init|=
operator|new
name|HRegionInfo
argument_list|(
name|htd
operator|.
name|getName
argument_list|()
argument_list|,
name|STARTROW
argument_list|,
name|ENDROW
argument_list|)
decl_stmt|;
name|HRegion
operator|.
name|createHRegion
argument_list|(
name|hri
argument_list|,
name|testdir
argument_list|,
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|htd
argument_list|)
expr_stmt|;
return|return
name|HRegion
operator|.
name|openHRegion
argument_list|(
name|testdir
argument_list|,
name|hri
argument_list|,
name|htd
argument_list|,
name|wal
argument_list|,
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

