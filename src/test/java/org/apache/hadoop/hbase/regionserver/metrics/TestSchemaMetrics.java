begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|BlockType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|BlockType
operator|.
name|BlockCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|metrics
operator|.
name|SchemaMetrics
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|metrics
operator|.
name|SchemaMetrics
operator|.
name|BOOL_VALUES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|metrics
operator|.
name|SchemaMetrics
operator|.
name|BlockMetricType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|MediumTests
operator|.
name|class
argument_list|)
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestSchemaMetrics
block|{
specifier|private
specifier|final
name|String
name|TABLE_NAME
init|=
literal|"myTable"
decl_stmt|;
specifier|private
specifier|final
name|String
name|CF_NAME
init|=
literal|"myColumnFamily"
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|useTableName
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|startingMetrics
decl_stmt|;
annotation|@
name|Parameters
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|parameters
parameter_list|()
block|{
return|return
name|HBaseTestingUtility
operator|.
name|BOOLEAN_PARAMETERIZED
return|;
block|}
specifier|public
name|TestSchemaMetrics
parameter_list|(
name|boolean
name|useTableName
parameter_list|)
block|{
name|this
operator|.
name|useTableName
operator|=
name|useTableName
expr_stmt|;
name|SchemaMetrics
operator|.
name|setUseTableNameInTest
argument_list|(
name|useTableName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|startingMetrics
operator|=
name|SchemaMetrics
operator|.
name|getMetricsSnapshot
argument_list|()
expr_stmt|;
block|}
empty_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testNaming
parameter_list|()
block|{
specifier|final
name|String
name|metricPrefix
init|=
operator|(
name|useTableName
condition|?
literal|"tbl."
operator|+
name|TABLE_NAME
operator|+
literal|"."
else|:
literal|""
operator|)
operator|+
literal|"cf."
operator|+
name|CF_NAME
operator|+
literal|"."
decl_stmt|;
name|SchemaMetrics
name|schemaMetrics
init|=
name|SchemaMetrics
operator|.
name|getInstance
argument_list|(
name|TABLE_NAME
argument_list|,
name|CF_NAME
argument_list|)
decl_stmt|;
name|SchemaMetrics
name|ALL_CF_METRICS
init|=
name|SchemaMetrics
operator|.
name|ALL_SCHEMA_METRICS
decl_stmt|;
comment|// fsReadTimeMetric
name|assertEquals
argument_list|(
name|metricPrefix
operator|+
literal|"fsRead"
argument_list|,
name|schemaMetrics
operator|.
name|getBlockMetricName
argument_list|(
name|BlockCategory
operator|.
name|ALL_CATEGORIES
argument_list|,
literal|false
argument_list|,
name|BlockMetricType
operator|.
name|READ_TIME
argument_list|)
argument_list|)
expr_stmt|;
comment|// compactionReadTimeMetric
name|assertEquals
argument_list|(
name|metricPrefix
operator|+
literal|"compactionRead"
argument_list|,
name|schemaMetrics
operator|.
name|getBlockMetricName
argument_list|(
name|BlockCategory
operator|.
name|ALL_CATEGORIES
argument_list|,
literal|true
argument_list|,
name|BlockMetricType
operator|.
name|READ_TIME
argument_list|)
argument_list|)
expr_stmt|;
comment|// fsBlockReadCntMetric
name|assertEquals
argument_list|(
name|metricPrefix
operator|+
literal|"fsBlockReadCnt"
argument_list|,
name|schemaMetrics
operator|.
name|getBlockMetricName
argument_list|(
name|BlockCategory
operator|.
name|ALL_CATEGORIES
argument_list|,
literal|false
argument_list|,
name|BlockMetricType
operator|.
name|READ_COUNT
argument_list|)
argument_list|)
expr_stmt|;
comment|// fsBlockReadCacheHitCntMetric
name|assertEquals
argument_list|(
name|metricPrefix
operator|+
literal|"fsBlockReadCacheHitCnt"
argument_list|,
name|schemaMetrics
operator|.
name|getBlockMetricName
argument_list|(
name|BlockCategory
operator|.
name|ALL_CATEGORIES
argument_list|,
literal|false
argument_list|,
name|BlockMetricType
operator|.
name|CACHE_HIT
argument_list|)
argument_list|)
expr_stmt|;
comment|// fsBlockReadCacheMissCntMetric
name|assertEquals
argument_list|(
name|metricPrefix
operator|+
literal|"fsBlockReadCacheMissCnt"
argument_list|,
name|schemaMetrics
operator|.
name|getBlockMetricName
argument_list|(
name|BlockCategory
operator|.
name|ALL_CATEGORIES
argument_list|,
literal|false
argument_list|,
name|BlockMetricType
operator|.
name|CACHE_MISS
argument_list|)
argument_list|)
expr_stmt|;
comment|// compactionBlockReadCntMetric
name|assertEquals
argument_list|(
name|metricPrefix
operator|+
literal|"compactionBlockReadCnt"
argument_list|,
name|schemaMetrics
operator|.
name|getBlockMetricName
argument_list|(
name|BlockCategory
operator|.
name|ALL_CATEGORIES
argument_list|,
literal|true
argument_list|,
name|BlockMetricType
operator|.
name|READ_COUNT
argument_list|)
argument_list|)
expr_stmt|;
comment|// compactionBlockReadCacheHitCntMetric
name|assertEquals
argument_list|(
name|metricPrefix
operator|+
literal|"compactionBlockReadCacheHitCnt"
argument_list|,
name|schemaMetrics
operator|.
name|getBlockMetricName
argument_list|(
name|BlockCategory
operator|.
name|ALL_CATEGORIES
argument_list|,
literal|true
argument_list|,
name|BlockMetricType
operator|.
name|CACHE_HIT
argument_list|)
argument_list|)
expr_stmt|;
comment|// compactionBlockReadCacheMissCntMetric
name|assertEquals
argument_list|(
name|metricPrefix
operator|+
literal|"compactionBlockReadCacheMissCnt"
argument_list|,
name|schemaMetrics
operator|.
name|getBlockMetricName
argument_list|(
name|BlockCategory
operator|.
name|ALL_CATEGORIES
argument_list|,
literal|true
argument_list|,
name|BlockMetricType
operator|.
name|CACHE_MISS
argument_list|)
argument_list|)
expr_stmt|;
comment|// fsMetaBlockReadCntMetric
name|assertEquals
argument_list|(
literal|"fsMetaBlockReadCnt"
argument_list|,
name|ALL_CF_METRICS
operator|.
name|getBlockMetricName
argument_list|(
name|BlockCategory
operator|.
name|META
argument_list|,
literal|false
argument_list|,
name|BlockMetricType
operator|.
name|READ_COUNT
argument_list|)
argument_list|)
expr_stmt|;
comment|// fsMetaBlockReadCacheHitCntMetric
name|assertEquals
argument_list|(
literal|"fsMetaBlockReadCacheHitCnt"
argument_list|,
name|ALL_CF_METRICS
operator|.
name|getBlockMetricName
argument_list|(
name|BlockCategory
operator|.
name|META
argument_list|,
literal|false
argument_list|,
name|BlockMetricType
operator|.
name|CACHE_HIT
argument_list|)
argument_list|)
expr_stmt|;
comment|// fsMetaBlockReadCacheMissCntMetric
name|assertEquals
argument_list|(
literal|"fsMetaBlockReadCacheMissCnt"
argument_list|,
name|ALL_CF_METRICS
operator|.
name|getBlockMetricName
argument_list|(
name|BlockCategory
operator|.
name|META
argument_list|,
literal|false
argument_list|,
name|BlockMetricType
operator|.
name|CACHE_MISS
argument_list|)
argument_list|)
expr_stmt|;
comment|// Per-(column family, block type) statistics.
name|assertEquals
argument_list|(
name|metricPrefix
operator|+
literal|"bt.Index.fsBlockReadCnt"
argument_list|,
name|schemaMetrics
operator|.
name|getBlockMetricName
argument_list|(
name|BlockCategory
operator|.
name|INDEX
argument_list|,
literal|false
argument_list|,
name|BlockMetricType
operator|.
name|READ_COUNT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|metricPrefix
operator|+
literal|"bt.Data.compactionBlockReadCacheHitCnt"
argument_list|,
name|schemaMetrics
operator|.
name|getBlockMetricName
argument_list|(
name|BlockCategory
operator|.
name|DATA
argument_list|,
literal|true
argument_list|,
name|BlockMetricType
operator|.
name|CACHE_HIT
argument_list|)
argument_list|)
expr_stmt|;
comment|// A special case for Meta blocks
name|assertEquals
argument_list|(
name|metricPrefix
operator|+
literal|"compactionMetaBlockReadCacheHitCnt"
argument_list|,
name|schemaMetrics
operator|.
name|getBlockMetricName
argument_list|(
name|BlockCategory
operator|.
name|META
argument_list|,
literal|true
argument_list|,
name|BlockMetricType
operator|.
name|CACHE_HIT
argument_list|)
argument_list|)
expr_stmt|;
comment|// Cache metrics
name|assertEquals
argument_list|(
name|metricPrefix
operator|+
literal|"blockCacheSize"
argument_list|,
name|schemaMetrics
operator|.
name|getBlockMetricName
argument_list|(
name|BlockCategory
operator|.
name|ALL_CATEGORIES
argument_list|,
literal|false
argument_list|,
name|BlockMetricType
operator|.
name|CACHE_SIZE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|metricPrefix
operator|+
literal|"bt.Index.blockCacheNumEvicted"
argument_list|,
name|schemaMetrics
operator|.
name|getBlockMetricName
argument_list|(
name|BlockCategory
operator|.
name|INDEX
argument_list|,
literal|false
argument_list|,
name|BlockMetricType
operator|.
name|EVICTED
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bt.Data.blockCacheNumCached"
argument_list|,
name|ALL_CF_METRICS
operator|.
name|getBlockMetricName
argument_list|(
name|BlockCategory
operator|.
name|DATA
argument_list|,
literal|false
argument_list|,
name|BlockMetricType
operator|.
name|CACHED
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"blockCacheNumCached"
argument_list|,
name|ALL_CF_METRICS
operator|.
name|getBlockMetricName
argument_list|(
name|BlockCategory
operator|.
name|ALL_CATEGORIES
argument_list|,
literal|false
argument_list|,
name|BlockMetricType
operator|.
name|CACHED
argument_list|)
argument_list|)
expr_stmt|;
comment|// "Non-compaction aware" metrics
try|try
block|{
name|ALL_CF_METRICS
operator|.
name|getBlockMetricName
argument_list|(
name|BlockCategory
operator|.
name|ALL_CATEGORIES
argument_list|,
literal|true
argument_list|,
name|BlockMetricType
operator|.
name|CACHE_SIZE
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Exception expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{     }
comment|// Bloom metrics
name|assertEquals
argument_list|(
literal|"keyMaybeInBloomCnt"
argument_list|,
name|ALL_CF_METRICS
operator|.
name|getBloomMetricName
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|metricPrefix
operator|+
literal|"keyNotInBloomCnt"
argument_list|,
name|schemaMetrics
operator|.
name|getBloomMetricName
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|schemaMetrics
operator|.
name|printMetricNames
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|checkMetrics
parameter_list|()
block|{
name|SchemaMetrics
operator|.
name|validateMetricChanges
argument_list|(
name|startingMetrics
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncrements
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
literal|23982737L
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|3
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|String
name|tableName
init|=
literal|"table"
operator|+
name|i
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<=
literal|3
condition|;
operator|++
name|j
control|)
block|{
specifier|final
name|String
name|cfName
init|=
literal|"cf"
operator|+
name|j
decl_stmt|;
name|SchemaMetrics
name|sm
init|=
name|SchemaMetrics
operator|.
name|getInstance
argument_list|(
name|tableName
argument_list|,
name|cfName
argument_list|)
decl_stmt|;
for|for
control|(
name|boolean
name|isInBloom
range|:
name|BOOL_VALUES
control|)
block|{
name|sm
operator|.
name|updateBloomMetrics
argument_list|(
name|isInBloom
argument_list|)
expr_stmt|;
name|checkMetrics
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|BlockCategory
name|blockCat
range|:
name|BlockType
operator|.
name|BlockCategory
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|blockCat
operator|==
name|BlockCategory
operator|.
name|ALL_CATEGORIES
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|boolean
name|isCompaction
range|:
name|BOOL_VALUES
control|)
block|{
name|sm
operator|.
name|updateOnCacheHit
argument_list|(
name|blockCat
argument_list|,
name|isCompaction
argument_list|)
expr_stmt|;
name|checkMetrics
argument_list|()
expr_stmt|;
name|sm
operator|.
name|updateOnCacheMiss
argument_list|(
name|blockCat
argument_list|,
name|isCompaction
argument_list|,
name|rand
operator|.
name|nextInt
argument_list|()
argument_list|)
expr_stmt|;
name|checkMetrics
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|boolean
name|isEviction
range|:
name|BOOL_VALUES
control|)
block|{
name|sm
operator|.
name|updateOnCachePutOrEvict
argument_list|(
name|blockCat
argument_list|,
operator|(
name|isEviction
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
operator|*
name|rand
operator|.
name|nextInt
argument_list|(
literal|1024
operator|*
literal|1024
argument_list|)
argument_list|,
name|isEviction
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

