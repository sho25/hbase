begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Testing {@link HLog} splitting code.  */
end_comment

begin_class
specifier|public
class|class
name|TestHLogSplit
block|{
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|FileSystem
name|fs
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Path
name|hbaseDir
init|=
operator|new
name|Path
argument_list|(
literal|"/hbase"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Path
name|hlogDir
init|=
operator|new
name|Path
argument_list|(
name|hbaseDir
argument_list|,
literal|"hlog"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Path
name|oldLogDir
init|=
operator|new
name|Path
argument_list|(
name|hbaseDir
argument_list|,
literal|"hlog.old"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Path
name|corruptDir
init|=
operator|new
name|Path
argument_list|(
name|hbaseDir
argument_list|,
literal|".corrupt"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_WRITERS
init|=
literal|10
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|ENTRIES
init|=
literal|10
decl_stmt|;
comment|// entries per writer per region
specifier|private
name|HLog
operator|.
name|Writer
index|[]
name|writer
init|=
operator|new
name|HLog
operator|.
name|Writer
index|[
name|NUM_WRITERS
index|]
decl_stmt|;
specifier|private
name|long
name|seq
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|TABLE_NAME
init|=
literal|"t1"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|FAMILY
init|=
literal|"f1"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|QUALIFIER
init|=
literal|"q1"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|VALUE
init|=
literal|"v1"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HLOG_FILE_PREFIX
init|=
literal|"hlog.dat."
decl_stmt|;
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|regions
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HBASE_SKIP_ERRORS
init|=
literal|"hbase.hlog.split.skip.errors"
decl_stmt|;
specifier|static
enum|enum
name|Corruptions
block|{
name|INSERT_GARBAGE_ON_FIRST_LINE
block|,
name|INSERT_GARBAGE_IN_THE_MIDDLE
block|,
name|APPEND_GARBAGE
block|,   }
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.regionserver.flushlogentries"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
literal|"dfs.support.append"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setStrings
argument_list|(
literal|"hbase.rootdir"
argument_list|,
name|hbaseDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setClass
argument_list|(
literal|"hbase.regionserver.hlog.writer.impl"
argument_list|,
name|InstrumentedSequenceFileLogWriter
operator|.
name|class
argument_list|,
name|HLog
operator|.
name|Writer
operator|.
name|class
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniDFSCluster
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniDFSCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|fs
operator|=
name|TEST_UTIL
operator|.
name|getDFSCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|FileStatus
index|[]
name|entries
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|dir
range|:
name|entries
control|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|dir
operator|.
name|getPath
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|seq
operator|=
literal|0
expr_stmt|;
name|regions
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|regions
argument_list|,
literal|"bbb"
argument_list|,
literal|"ccc"
argument_list|)
expr_stmt|;
name|InstrumentedSequenceFileLogWriter
operator|.
name|activateFailure
operator|=
literal|false
expr_stmt|;
comment|// Set the soft lease for hdfs to be down from default of 5 minutes or so.
name|TEST_UTIL
operator|.
name|setNameNodeNameSystemLeasePeriod
argument_list|(
literal|100
argument_list|,
literal|50000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{   }
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IOException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testSplitFailsIfNewHLogGetsCreatedAfterSplitStarted
parameter_list|()
throws|throws
name|IOException
block|{
name|AtomicBoolean
name|stop
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|generateHLogs
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
operator|(
operator|new
name|ZombieNewLogWriterRegionServer
argument_list|(
name|stop
argument_list|)
operator|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|HLog
operator|.
name|splitLog
argument_list|(
name|hbaseDir
argument_list|,
name|hlogDir
argument_list|,
name|oldLogDir
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stop
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSplitPreservesEdits
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|REGION
init|=
literal|"region__1"
decl_stmt|;
name|regions
operator|.
name|removeAll
argument_list|(
name|regions
argument_list|)
expr_stmt|;
name|regions
operator|.
name|add
argument_list|(
name|REGION
argument_list|)
expr_stmt|;
name|generateHLogs
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|HLog
operator|.
name|splitLog
argument_list|(
name|hbaseDir
argument_list|,
name|hlogDir
argument_list|,
name|oldLogDir
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Path
name|originalLog
init|=
operator|(
name|fs
operator|.
name|listStatus
argument_list|(
name|oldLogDir
argument_list|)
operator|)
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|Path
name|splitLog
init|=
name|getLogForRegion
argument_list|(
name|hbaseDir
argument_list|,
name|TABLE_NAME
argument_list|,
name|REGION
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"edits differ after split"
argument_list|,
literal|true
argument_list|,
name|logsAreEqual
argument_list|(
name|originalLog
argument_list|,
name|splitLog
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmptyLogFiles
parameter_list|()
throws|throws
name|IOException
block|{
name|injectEmptyFile
argument_list|(
literal|".empty"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|generateHLogs
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|injectEmptyFile
argument_list|(
literal|"empty"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// make fs act as a different client now
comment|// initialize will create a new DFSClient with a new client ID
name|fs
operator|.
name|initialize
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|HLog
operator|.
name|splitLog
argument_list|(
name|hbaseDir
argument_list|,
name|hlogDir
argument_list|,
name|oldLogDir
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|region
range|:
name|regions
control|)
block|{
name|Path
name|logfile
init|=
name|getLogForRegion
argument_list|(
name|hbaseDir
argument_list|,
name|TABLE_NAME
argument_list|,
name|region
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|NUM_WRITERS
operator|*
name|ENTRIES
argument_list|,
name|countHLog
argument_list|(
name|logfile
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmptyOpenLogFiles
parameter_list|()
throws|throws
name|IOException
block|{
name|injectEmptyFile
argument_list|(
literal|".empty"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|generateHLogs
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|injectEmptyFile
argument_list|(
literal|"empty"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// make fs act as a different client now
comment|// initialize will create a new DFSClient with a new client ID
name|fs
operator|.
name|initialize
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|HLog
operator|.
name|splitLog
argument_list|(
name|hbaseDir
argument_list|,
name|hlogDir
argument_list|,
name|oldLogDir
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|region
range|:
name|regions
control|)
block|{
name|Path
name|logfile
init|=
name|getLogForRegion
argument_list|(
name|hbaseDir
argument_list|,
name|TABLE_NAME
argument_list|,
name|region
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|NUM_WRITERS
operator|*
name|ENTRIES
argument_list|,
name|countHLog
argument_list|(
name|logfile
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOpenZeroLengthReportedFileButWithDataGetsSplit
parameter_list|()
throws|throws
name|IOException
block|{
comment|// generate logs but leave hlog.dat.5 open.
name|generateHLogs
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|HLog
operator|.
name|splitLog
argument_list|(
name|hbaseDir
argument_list|,
name|hlogDir
argument_list|,
name|oldLogDir
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|region
range|:
name|regions
control|)
block|{
name|Path
name|logfile
init|=
name|getLogForRegion
argument_list|(
name|hbaseDir
argument_list|,
name|TABLE_NAME
argument_list|,
name|region
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|NUM_WRITERS
operator|*
name|ENTRIES
argument_list|,
name|countHLog
argument_list|(
name|logfile
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTralingGarbageCorruptionFileSkipErrorsPasses
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|HBASE_SKIP_ERRORS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|generateHLogs
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|corruptHLog
argument_list|(
operator|new
name|Path
argument_list|(
name|hlogDir
argument_list|,
name|HLOG_FILE_PREFIX
operator|+
literal|"5"
argument_list|)
argument_list|,
name|Corruptions
operator|.
name|APPEND_GARBAGE
argument_list|,
literal|true
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|HLog
operator|.
name|splitLog
argument_list|(
name|hbaseDir
argument_list|,
name|hlogDir
argument_list|,
name|oldLogDir
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|region
range|:
name|regions
control|)
block|{
name|Path
name|logfile
init|=
name|getLogForRegion
argument_list|(
name|hbaseDir
argument_list|,
name|TABLE_NAME
argument_list|,
name|region
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|NUM_WRITERS
operator|*
name|ENTRIES
argument_list|,
name|countHLog
argument_list|(
name|logfile
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFirstLineCorruptionLogFileSkipErrorsPasses
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|HBASE_SKIP_ERRORS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|generateHLogs
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|corruptHLog
argument_list|(
operator|new
name|Path
argument_list|(
name|hlogDir
argument_list|,
name|HLOG_FILE_PREFIX
operator|+
literal|"5"
argument_list|)
argument_list|,
name|Corruptions
operator|.
name|INSERT_GARBAGE_ON_FIRST_LINE
argument_list|,
literal|true
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|HLog
operator|.
name|splitLog
argument_list|(
name|hbaseDir
argument_list|,
name|hlogDir
argument_list|,
name|oldLogDir
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|region
range|:
name|regions
control|)
block|{
name|Path
name|logfile
init|=
name|getLogForRegion
argument_list|(
name|hbaseDir
argument_list|,
name|TABLE_NAME
argument_list|,
name|region
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|(
name|NUM_WRITERS
operator|-
literal|1
operator|)
operator|*
name|ENTRIES
argument_list|,
name|countHLog
argument_list|(
name|logfile
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMiddleGarbageCorruptionSkipErrorsReadsHalfOfFile
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|HBASE_SKIP_ERRORS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|generateHLogs
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|corruptHLog
argument_list|(
operator|new
name|Path
argument_list|(
name|hlogDir
argument_list|,
name|HLOG_FILE_PREFIX
operator|+
literal|"5"
argument_list|)
argument_list|,
name|Corruptions
operator|.
name|INSERT_GARBAGE_IN_THE_MIDDLE
argument_list|,
literal|false
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|HLog
operator|.
name|splitLog
argument_list|(
name|hbaseDir
argument_list|,
name|hlogDir
argument_list|,
name|oldLogDir
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|region
range|:
name|regions
control|)
block|{
name|Path
name|logfile
init|=
name|getLogForRegion
argument_list|(
name|hbaseDir
argument_list|,
name|TABLE_NAME
argument_list|,
name|region
argument_list|)
decl_stmt|;
comment|// the entries in the original logs are alternating regions
comment|// considering the sequence file header, the middle corruption should
comment|// affect at least half of the entries
name|int
name|goodEntries
init|=
operator|(
name|NUM_WRITERS
operator|-
literal|1
operator|)
operator|*
name|ENTRIES
decl_stmt|;
name|int
name|firstHalfEntries
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|ENTRIES
operator|/
literal|2
argument_list|)
operator|-
literal|1
decl_stmt|;
name|assertTrue
argument_list|(
literal|"The file up to the corrupted area hasn't been parsed"
argument_list|,
name|goodEntries
operator|+
name|firstHalfEntries
operator|<=
name|countHLog
argument_list|(
name|logfile
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCorruptedFileGetsArchivedIfSkipErrors
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|HBASE_SKIP_ERRORS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Path
name|c1
init|=
operator|new
name|Path
argument_list|(
name|hlogDir
argument_list|,
name|HLOG_FILE_PREFIX
operator|+
literal|"0"
argument_list|)
decl_stmt|;
name|Path
name|c2
init|=
operator|new
name|Path
argument_list|(
name|hlogDir
argument_list|,
name|HLOG_FILE_PREFIX
operator|+
literal|"5"
argument_list|)
decl_stmt|;
name|Path
name|c3
init|=
operator|new
name|Path
argument_list|(
name|hlogDir
argument_list|,
name|HLOG_FILE_PREFIX
operator|+
operator|(
name|NUM_WRITERS
operator|-
literal|1
operator|)
argument_list|)
decl_stmt|;
name|generateHLogs
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|corruptHLog
argument_list|(
name|c1
argument_list|,
name|Corruptions
operator|.
name|INSERT_GARBAGE_IN_THE_MIDDLE
argument_list|,
literal|false
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|corruptHLog
argument_list|(
name|c2
argument_list|,
name|Corruptions
operator|.
name|APPEND_GARBAGE
argument_list|,
literal|true
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|corruptHLog
argument_list|(
name|c3
argument_list|,
name|Corruptions
operator|.
name|INSERT_GARBAGE_ON_FIRST_LINE
argument_list|,
literal|true
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|HLog
operator|.
name|splitLog
argument_list|(
name|hbaseDir
argument_list|,
name|hlogDir
argument_list|,
name|oldLogDir
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|archivedLogs
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|corruptDir
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"expected a different file"
argument_list|,
name|c1
operator|.
name|getName
argument_list|()
argument_list|,
name|archivedLogs
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"expected a different file"
argument_list|,
name|c2
operator|.
name|getName
argument_list|()
argument_list|,
name|archivedLogs
index|[
literal|1
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"expected a different file"
argument_list|,
name|c3
operator|.
name|getName
argument_list|()
argument_list|,
name|archivedLogs
index|[
literal|2
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|archivedLogs
operator|.
name|length
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLogsGetArchivedAfterSplit
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|HBASE_SKIP_ERRORS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|generateHLogs
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|HLog
operator|.
name|splitLog
argument_list|(
name|hbaseDir
argument_list|,
name|hlogDir
argument_list|,
name|oldLogDir
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|archivedLogs
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|oldLogDir
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"wrong number of files in the archive log"
argument_list|,
name|NUM_WRITERS
argument_list|,
name|archivedLogs
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IOException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testTrailingGarbageCorruptionLogFileSkipErrorsFalseThrows
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|HBASE_SKIP_ERRORS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|generateHLogs
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|corruptHLog
argument_list|(
operator|new
name|Path
argument_list|(
name|hlogDir
argument_list|,
name|HLOG_FILE_PREFIX
operator|+
literal|"5"
argument_list|)
argument_list|,
name|Corruptions
operator|.
name|APPEND_GARBAGE
argument_list|,
literal|true
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|HLog
operator|.
name|splitLog
argument_list|(
name|hbaseDir
argument_list|,
name|hlogDir
argument_list|,
name|oldLogDir
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCorruptedLogFilesSkipErrorsFalseDoesNotTouchLogs
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|HBASE_SKIP_ERRORS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|generateHLogs
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|corruptHLog
argument_list|(
operator|new
name|Path
argument_list|(
name|hlogDir
argument_list|,
name|HLOG_FILE_PREFIX
operator|+
literal|"5"
argument_list|)
argument_list|,
name|Corruptions
operator|.
name|APPEND_GARBAGE
argument_list|,
literal|true
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|HLog
operator|.
name|splitLog
argument_list|(
name|hbaseDir
argument_list|,
name|hlogDir
argument_list|,
name|oldLogDir
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|/* expected */
block|}
name|assertEquals
argument_list|(
literal|"if skip.errors is false all files should remain in place"
argument_list|,
name|NUM_WRITERS
argument_list|,
name|fs
operator|.
name|listStatus
argument_list|(
name|hlogDir
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSplit
parameter_list|()
throws|throws
name|IOException
block|{
name|generateHLogs
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|HLog
operator|.
name|splitLog
argument_list|(
name|hbaseDir
argument_list|,
name|hlogDir
argument_list|,
name|oldLogDir
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|region
range|:
name|regions
control|)
block|{
name|Path
name|logfile
init|=
name|getLogForRegion
argument_list|(
name|hbaseDir
argument_list|,
name|TABLE_NAME
argument_list|,
name|region
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|NUM_WRITERS
operator|*
name|ENTRIES
argument_list|,
name|countHLog
argument_list|(
name|logfile
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLogDirectoryShouldBeDeletedAfterSuccessfulSplit
parameter_list|()
throws|throws
name|IOException
block|{
name|generateHLogs
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|HLog
operator|.
name|splitLog
argument_list|(
name|hbaseDir
argument_list|,
name|hlogDir
argument_list|,
name|oldLogDir
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|statuses
init|=
literal|null
decl_stmt|;
try|try
block|{
name|statuses
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
name|hlogDir
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|statuses
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// hadoop 0.21 throws FNFE whereas hadoop 0.20 returns null
block|}
block|}
comment|/* DISABLED for now.  TODO: HBASE-2645    @Test   public void testLogCannotBeWrittenOnceParsed() throws IOException {     AtomicLong counter = new AtomicLong(0);     AtomicBoolean stop = new AtomicBoolean(false);     generateHLogs(9);     fs.initialize(fs.getUri(), conf);      Thread zombie = new ZombieLastLogWriterRegionServer(writer[9], counter, stop);        try {       zombie.start();        HLog.splitLog(hbaseDir, hlogDir, oldLogDir, fs, conf);        Path logfile = getLogForRegion(hbaseDir, TABLE_NAME, "juliet");        // It's possible that the writer got an error while appending and didn't count it       // however the entry will in fact be written to file and split with the rest       long numberOfEditsInRegion = countHLog(logfile, fs, conf);       assertTrue("The log file could have at most 1 extra log entry, but " +               "can't have less. Zombie could write "+counter.get() +" and logfile had only"+ numberOfEditsInRegion+" "  + logfile, counter.get() == numberOfEditsInRegion ||                       counter.get() + 1 == numberOfEditsInRegion);     } finally {       stop.set(true);     }   } */
annotation|@
name|Test
specifier|public
name|void
name|testSplitWillNotTouchLogsIfNewHLogGetsCreatedAfterSplitStarted
parameter_list|()
throws|throws
name|IOException
block|{
name|AtomicBoolean
name|stop
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|generateHLogs
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Thread
name|zombie
init|=
operator|new
name|ZombieNewLogWriterRegionServer
argument_list|(
name|stop
argument_list|)
decl_stmt|;
try|try
block|{
name|zombie
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|HLog
operator|.
name|splitLog
argument_list|(
name|hbaseDir
argument_list|,
name|hlogDir
argument_list|,
name|oldLogDir
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|/* expected */
block|}
name|int
name|logFilesNumber
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|hlogDir
argument_list|)
operator|.
name|length
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Log files should not be archived if there's an extra file after split"
argument_list|,
name|NUM_WRITERS
operator|+
literal|1
argument_list|,
name|logFilesNumber
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stop
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IOException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testSplitWillFailIfWritingToRegionFails
parameter_list|()
throws|throws
name|Exception
block|{
comment|//leave 5th log open so we could append the "trap"
name|generateHLogs
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|InstrumentedSequenceFileLogWriter
operator|.
name|activateFailure
operator|=
literal|false
expr_stmt|;
name|appendEntry
argument_list|(
name|writer
index|[
literal|4
index|]
argument_list|,
name|TABLE_NAME
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"break"
argument_list|)
argument_list|,
operator|(
literal|"r"
operator|+
literal|999
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|writer
index|[
literal|4
index|]
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|InstrumentedSequenceFileLogWriter
operator|.
name|activateFailure
operator|=
literal|true
expr_stmt|;
name|HLog
operator|.
name|splitLog
argument_list|(
name|hbaseDir
argument_list|,
name|hlogDir
argument_list|,
name|oldLogDir
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"java.io.IOException: This exception is instrumented and should only be thrown for testing"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|InstrumentedSequenceFileLogWriter
operator|.
name|activateFailure
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|//  @Test
specifier|public
name|void
name|testSplittingLargeNumberOfRegionsConsistency
parameter_list|()
throws|throws
name|IOException
block|{
name|regions
operator|.
name|removeAll
argument_list|(
name|regions
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|regions
operator|.
name|add
argument_list|(
literal|"region__"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|generateHLogs
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|HLog
operator|.
name|splitLog
argument_list|(
name|hbaseDir
argument_list|,
name|hlogDir
argument_list|,
name|oldLogDir
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|oldLogDir
argument_list|,
name|hlogDir
argument_list|)
expr_stmt|;
name|Path
name|firstSplitPath
init|=
operator|new
name|Path
argument_list|(
name|hbaseDir
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|TABLE_NAME
argument_list|)
operator|+
literal|".first"
argument_list|)
decl_stmt|;
name|Path
name|splitPath
init|=
operator|new
name|Path
argument_list|(
name|hbaseDir
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|TABLE_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|splitPath
argument_list|,
name|firstSplitPath
argument_list|)
expr_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|HLog
operator|.
name|splitLog
argument_list|(
name|hbaseDir
argument_list|,
name|hlogDir
argument_list|,
name|oldLogDir
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|compareHLogSplitDirs
argument_list|(
name|firstSplitPath
argument_list|,
name|splitPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * This thread will keep writing to the file after the split process has started    * It simulates a region server that was considered dead but woke up and wrote    * some more to he last log entry    */
class|class
name|ZombieLastLogWriterRegionServer
extends|extends
name|Thread
block|{
name|AtomicLong
name|editsCount
decl_stmt|;
name|AtomicBoolean
name|stop
decl_stmt|;
name|Path
name|log
decl_stmt|;
name|HLog
operator|.
name|Writer
name|lastLogWriter
decl_stmt|;
specifier|public
name|ZombieLastLogWriterRegionServer
parameter_list|(
name|HLog
operator|.
name|Writer
name|writer
parameter_list|,
name|AtomicLong
name|counter
parameter_list|,
name|AtomicBoolean
name|stop
parameter_list|)
block|{
name|this
operator|.
name|stop
operator|=
name|stop
expr_stmt|;
name|this
operator|.
name|editsCount
operator|=
name|counter
expr_stmt|;
name|this
operator|.
name|lastLogWriter
operator|=
name|writer
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|stop
operator|.
name|get
argument_list|()
condition|)
block|{
return|return;
block|}
name|flushToConsole
argument_list|(
literal|"starting"
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|appendEntry
argument_list|(
name|lastLogWriter
argument_list|,
name|TABLE_NAME
argument_list|,
literal|"juliet"
operator|.
name|getBytes
argument_list|()
argument_list|,
operator|(
literal|"r"
operator|+
name|editsCount
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|lastLogWriter
operator|.
name|sync
argument_list|()
expr_stmt|;
name|editsCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|ex
operator|instanceof
name|RemoteException
condition|)
block|{
name|flushToConsole
argument_list|(
literal|"Juliet: got RemoteException "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
operator|+
literal|" while writing "
operator|+
operator|(
name|editsCount
operator|.
name|get
argument_list|()
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
name|assertTrue
argument_list|(
literal|"Failed to write "
operator|+
name|editsCount
operator|.
name|get
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/**    * This thread will keep adding new log files    * It simulates a region server that was considered dead but woke up and wrote    * some more to a new hlog    */
class|class
name|ZombieNewLogWriterRegionServer
extends|extends
name|Thread
block|{
name|AtomicBoolean
name|stop
decl_stmt|;
specifier|public
name|ZombieNewLogWriterRegionServer
parameter_list|(
name|AtomicBoolean
name|stop
parameter_list|)
block|{
name|super
argument_list|(
literal|"ZombieNewLogWriterRegionServer"
argument_list|)
expr_stmt|;
name|this
operator|.
name|stop
operator|=
name|stop
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|stop
operator|.
name|get
argument_list|()
condition|)
block|{
return|return;
block|}
name|boolean
name|splitStarted
init|=
literal|false
decl_stmt|;
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|hbaseDir
argument_list|,
operator|new
name|String
argument_list|(
name|TABLE_NAME
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|splitStarted
condition|)
block|{
try|try
block|{
name|FileStatus
index|[]
name|statuses
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|p
argument_list|)
decl_stmt|;
comment|// In 0.20, listStatus comes back with a null if file doesn't exit.
comment|// In 0.21, it throws FNFE.
if|if
condition|(
name|statuses
operator|!=
literal|null
operator|&&
name|statuses
operator|.
name|length
operator|>
literal|0
condition|)
block|{
comment|// Done.
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// Expected in hadoop 0.21
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Failed to list status "
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|flushToConsole
argument_list|(
literal|"Juliet: split not started, sleeping a bit..."
argument_list|)
expr_stmt|;
name|Threads
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|Path
name|julietLog
init|=
operator|new
name|Path
argument_list|(
name|hlogDir
argument_list|,
name|HLOG_FILE_PREFIX
operator|+
literal|".juliet"
argument_list|)
decl_stmt|;
try|try
block|{
name|HLog
operator|.
name|Writer
name|writer
init|=
name|HLog
operator|.
name|createWriter
argument_list|(
name|fs
argument_list|,
name|julietLog
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|appendEntry
argument_list|(
name|writer
argument_list|,
literal|"juliet"
operator|.
name|getBytes
argument_list|()
argument_list|,
operator|(
literal|"juliet"
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|,
operator|(
literal|"r"
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|flushToConsole
argument_list|(
literal|"Juliet file creator: created file "
operator|+
name|julietLog
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Failed to create file "
operator|+
name|julietLog
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|flushToConsole
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|generateHLogs
parameter_list|(
name|int
name|leaveOpen
parameter_list|)
throws|throws
name|IOException
block|{
name|generateHLogs
argument_list|(
name|NUM_WRITERS
argument_list|,
name|ENTRIES
argument_list|,
name|leaveOpen
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateHLogs
parameter_list|(
name|int
name|writers
parameter_list|,
name|int
name|entries
parameter_list|,
name|int
name|leaveOpen
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|writers
condition|;
name|i
operator|++
control|)
block|{
name|writer
index|[
name|i
index|]
operator|=
name|HLog
operator|.
name|createWriter
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|hlogDir
argument_list|,
name|HLOG_FILE_PREFIX
operator|+
name|i
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|entries
condition|;
name|j
operator|++
control|)
block|{
name|int
name|prefix
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|region
range|:
name|regions
control|)
block|{
name|String
name|row_key
init|=
name|region
operator|+
name|prefix
operator|++
operator|+
name|i
operator|+
name|j
decl_stmt|;
name|appendEntry
argument_list|(
name|writer
index|[
name|i
index|]
argument_list|,
name|TABLE_NAME
argument_list|,
name|region
operator|.
name|getBytes
argument_list|()
argument_list|,
name|row_key
operator|.
name|getBytes
argument_list|()
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|,
name|seq
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|i
operator|!=
name|leaveOpen
condition|)
block|{
name|writer
index|[
name|i
index|]
operator|.
name|close
argument_list|()
expr_stmt|;
name|flushToConsole
argument_list|(
literal|"Closing writer "
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|Path
name|getLogForRegion
parameter_list|(
name|Path
name|rootdir
parameter_list|,
name|byte
index|[]
name|table
parameter_list|,
name|String
name|region
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|HRegion
operator|.
name|getRegionDir
argument_list|(
name|HTableDescriptor
operator|.
name|getTableDir
argument_list|(
name|rootdir
argument_list|,
name|table
argument_list|)
argument_list|,
name|HRegionInfo
operator|.
name|encodeRegionName
argument_list|(
name|region
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|HLog
operator|.
name|RECOVERED_EDITS
argument_list|)
return|;
block|}
specifier|private
name|void
name|corruptHLog
parameter_list|(
name|Path
name|path
parameter_list|,
name|Corruptions
name|corruption
parameter_list|,
name|boolean
name|close
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDataOutputStream
name|out
decl_stmt|;
name|int
name|fileSize
init|=
operator|(
name|int
operator|)
name|fs
operator|.
name|listStatus
argument_list|(
name|path
argument_list|)
index|[
literal|0
index|]
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|byte
index|[]
name|corrupted_bytes
init|=
operator|new
name|byte
index|[
name|fileSize
index|]
decl_stmt|;
name|in
operator|.
name|readFully
argument_list|(
literal|0
argument_list|,
name|corrupted_bytes
argument_list|,
literal|0
argument_list|,
name|fileSize
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|corruption
condition|)
block|{
case|case
name|APPEND_GARBAGE
case|:
name|out
operator|=
name|fs
operator|.
name|append
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"-----"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|closeOrFlush
argument_list|(
name|close
argument_list|,
name|out
argument_list|)
expr_stmt|;
break|break;
case|case
name|INSERT_GARBAGE_ON_FIRST_LINE
case|:
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|out
operator|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|corrupted_bytes
argument_list|)
expr_stmt|;
name|closeOrFlush
argument_list|(
name|close
argument_list|,
name|out
argument_list|)
expr_stmt|;
break|break;
case|case
name|INSERT_GARBAGE_IN_THE_MIDDLE
case|:
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|out
operator|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|int
name|middle
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|corrupted_bytes
operator|.
name|length
operator|/
literal|2
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|corrupted_bytes
argument_list|,
literal|0
argument_list|,
name|middle
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|corrupted_bytes
argument_list|,
name|middle
argument_list|,
name|corrupted_bytes
operator|.
name|length
operator|-
name|middle
argument_list|)
expr_stmt|;
name|closeOrFlush
argument_list|(
name|close
argument_list|,
name|out
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
specifier|private
name|void
name|closeOrFlush
parameter_list|(
name|boolean
name|close
parameter_list|,
name|FSDataOutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|close
condition|)
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|sync
argument_list|()
expr_stmt|;
comment|// Not in 0out.hflush();
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
name|void
name|dumpHLog
parameter_list|(
name|Path
name|log
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|HLog
operator|.
name|Entry
name|entry
decl_stmt|;
name|HLog
operator|.
name|Reader
name|in
init|=
name|HLog
operator|.
name|getReader
argument_list|(
name|fs
argument_list|,
name|log
argument_list|,
name|conf
argument_list|)
decl_stmt|;
while|while
condition|(
operator|(
name|entry
operator|=
name|in
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|int
name|countHLog
parameter_list|(
name|Path
name|log
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
name|HLog
operator|.
name|Reader
name|in
init|=
name|HLog
operator|.
name|getReader
argument_list|(
name|fs
argument_list|,
name|log
argument_list|,
name|conf
argument_list|)
decl_stmt|;
while|while
condition|(
name|in
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
specifier|public
name|long
name|appendEntry
parameter_list|(
name|HLog
operator|.
name|Writer
name|writer
parameter_list|,
name|byte
index|[]
name|table
parameter_list|,
name|byte
index|[]
name|region
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|byte
index|[]
name|value
parameter_list|,
name|long
name|seq
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|time
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|WALEdit
name|edit
init|=
operator|new
name|WALEdit
argument_list|()
decl_stmt|;
name|seq
operator|++
expr_stmt|;
name|edit
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|time
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
operator|new
name|HLog
operator|.
name|Entry
argument_list|(
operator|new
name|HLogKey
argument_list|(
name|region
argument_list|,
name|table
argument_list|,
name|seq
argument_list|,
name|time
argument_list|)
argument_list|,
name|edit
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|sync
argument_list|()
expr_stmt|;
return|return
name|seq
return|;
block|}
specifier|private
name|void
name|injectEmptyFile
parameter_list|(
name|String
name|suffix
parameter_list|,
name|boolean
name|closeFile
parameter_list|)
throws|throws
name|IOException
block|{
name|HLog
operator|.
name|Writer
name|writer
init|=
name|HLog
operator|.
name|createWriter
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|hlogDir
argument_list|,
name|HLOG_FILE_PREFIX
operator|+
name|suffix
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|closeFile
condition|)
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
name|void
name|listLogs
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|FileStatus
name|file
range|:
name|fs
operator|.
name|listStatus
argument_list|(
name|dir
argument_list|)
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|int
name|compareHLogSplitDirs
parameter_list|(
name|Path
name|p1
parameter_list|,
name|Path
name|p2
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
index|[]
name|f1
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|p1
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|f2
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|p2
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|f1
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|logsAreEqual
argument_list|(
operator|new
name|Path
argument_list|(
name|f1
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|,
name|HLog
operator|.
name|RECOVERED_EDITS
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|f2
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|,
name|HLog
operator|.
name|RECOVERED_EDITS
argument_list|)
argument_list|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|private
name|boolean
name|logsAreEqual
parameter_list|(
name|Path
name|p1
parameter_list|,
name|Path
name|p2
parameter_list|)
throws|throws
name|IOException
block|{
name|HLog
operator|.
name|Reader
name|in1
decl_stmt|,
name|in2
decl_stmt|;
name|in1
operator|=
name|HLog
operator|.
name|getReader
argument_list|(
name|fs
argument_list|,
name|p1
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|in2
operator|=
name|HLog
operator|.
name|getReader
argument_list|(
name|fs
argument_list|,
name|p2
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|HLog
operator|.
name|Entry
name|entry1
decl_stmt|;
name|HLog
operator|.
name|Entry
name|entry2
decl_stmt|;
while|while
condition|(
operator|(
name|entry1
operator|=
name|in1
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|entry2
operator|=
name|in2
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|entry1
operator|.
name|getKey
argument_list|()
operator|.
name|compareTo
argument_list|(
name|entry2
operator|.
name|getKey
argument_list|()
argument_list|)
operator|!=
literal|0
operator|)
operator|||
operator|(
operator|!
name|entry1
operator|.
name|getEdit
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|entry2
operator|.
name|getEdit
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

