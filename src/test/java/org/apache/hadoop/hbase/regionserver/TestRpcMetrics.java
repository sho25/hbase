begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2011 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|HBaseRpcMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|ContextFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|MetricsContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|MetricsUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|spi
operator|.
name|AbstractMetricsContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|spi
operator|.
name|OutputRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|TestRpcMetrics
block|{
comment|/**    * Defines test methods to register with HBaseRpcMetrics    */
specifier|public
interface|interface
name|TestMetrics
block|{
specifier|public
name|void
name|test
parameter_list|()
function_decl|;
block|}
comment|/**    * HRegionServer sub-class to register custom metrics    */
specifier|public
specifier|static
class|class
name|TestRegionServer
extends|extends
name|HRegionServer
block|{
specifier|public
name|TestRegionServer
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// register custom metrics interface
name|getRpcMetrics
argument_list|()
operator|.
name|createMetrics
argument_list|(
operator|new
name|Class
index|[]
block|{
name|TestMetrics
operator|.
name|class
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|incTest
parameter_list|(
name|int
name|amt
parameter_list|)
block|{
name|HBaseRpcMetrics
name|metrics
init|=
name|getRpcMetrics
argument_list|()
decl_stmt|;
comment|// force an increment so we have something to check for
name|metrics
operator|.
name|inc
argument_list|(
name|metrics
operator|.
name|getMetricName
argument_list|(
name|TestMetrics
operator|.
name|class
argument_list|,
literal|"test"
argument_list|)
argument_list|,
name|amt
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Dummy metrics context to allow retrieval of values    */
specifier|public
specifier|static
class|class
name|MockMetricsContext
extends|extends
name|AbstractMetricsContext
block|{
specifier|public
name|MockMetricsContext
parameter_list|()
block|{
comment|// update every 1 sec.
name|setPeriod
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|emitRecord
parameter_list|(
name|String
name|contextName
parameter_list|,
name|String
name|recordName
parameter_list|,
name|OutputRecord
name|outputRecord
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|name
range|:
name|outputRecord
operator|.
name|getMetricNames
argument_list|()
control|)
block|{
name|Number
name|val
init|=
name|outputRecord
operator|.
name|getMetric
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
operator|&&
name|val
operator|.
name|intValue
argument_list|()
operator|>
literal|0
condition|)
block|{
name|METRICS
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Set metric "
operator|+
name|name
operator|+
literal|" to "
operator|+
name|val
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|METRICS
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestRpcMetrics
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setupBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
comment|// set custom metrics context
name|ContextFactory
name|factory
init|=
name|ContextFactory
operator|.
name|getFactory
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setAttribute
argument_list|(
literal|"rpc.class"
argument_list|,
name|MockMetricsContext
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// make sure metrics context is setup, otherwise updating won't start
name|MetricsContext
name|ctx
init|=
name|MetricsUtil
operator|.
name|getContext
argument_list|(
literal|"rpc"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Wrong MetricContext implementation class"
argument_list|,
operator|(
name|ctx
operator|instanceof
name|MockMetricsContext
operator|)
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniZKCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniZKCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCustomMetrics
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.regionserver.port"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|TestRegionServer
name|rs
init|=
operator|new
name|TestRegionServer
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|rs
operator|.
name|incTest
argument_list|(
literal|5
argument_list|)
expr_stmt|;
comment|// wait for metrics context update
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|String
name|metricName
init|=
name|HBaseRpcMetrics
operator|.
name|getMetricName
argument_list|(
name|TestMetrics
operator|.
name|class
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Metric should have set incremented for "
operator|+
name|metricName
argument_list|,
name|wasSet
argument_list|(
name|metricName
operator|+
literal|"_num_ops"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|wasSet
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|METRICS
operator|.
name|get
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
condition|?
name|METRICS
operator|.
name|get
argument_list|(
name|name
argument_list|)
else|:
literal|false
return|;
block|}
block|}
end_class

end_unit

